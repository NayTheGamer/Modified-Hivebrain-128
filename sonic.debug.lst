 AS V1.42 Beta [Bld 212] - Source File sonic.asm - Page 1 - 12/19/2024 3:38:4


       1/       0 :                     ; /=========================================================================/
       2/       0 :                     ; º	This file is generated by The Interactive Disassembler (IDA)	    º
       3/       0 :                     ; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
       4/       0 :                     ; /=========================================================================/
       5/       0 :                     ;
       6/       0 :                     ; Disassembly created by Hivebrain
       7/       0 :                     ; thanks to drx and Stealth
       8/       0 :                     
       9/       0 :                     ; Processor:	    68000
      10/       0 :                     ; Target Assembler: 680x0 Assembler in MRI compatible mode
      11/       0 :                     ; This file should be compiled with "as	-M"
      12/       0 :                     
      13/       0 :                     ; ===========================================================================
      14/       0 :                     
      15/       0 :                     	cpu 68000
      16/       0 :                     
      17/       0 :                     	include "MacroSetup.asm"	
(1)    1/       0 :                     	padding off	; we don't want AS padding out dc.b instructions
(1)    2/       0 :                     	listing purecode	; Want listing file, but only the final code in expanded macros
(1)    3/       0 :                     	page	0	; Don't want form feeds
(1)    4/       0 :                     	supmode on	; we don't need warnings about privileged instructions
(1)    5/       0 :                     
(1)    6/       0 :                     notZ80 function cpu,(cpu<>128)&&(cpu<>32988)
(1)    7/       0 :                     
(1)    8/       0 :                     ; make org safer (impossible to overwrite previously assembled bytes)
(1)    9/       0 :                     ; and also make it work in Z80 code without creating a new segment
(1)   10/       0 :                     org macro address
(1)   11/       0 :                     	if notZ80(MOMCPU)
(1)   12/       0 :                     		if address < *
(1)   13/       0 :                     			error "too much stuff before org $\{address} ($\{(*-address)} bytes)"
(1)   14/       0 :                     		else
(1)   15/       0 :                     			!org address
(1)   16/       0 :                     		endif
(1)   17/       0 :                     	else
(1)   18/       0 :                     		if address < $
(1)   19/       0 :                     			error "too much stuff before org 0\{address}h (0\{($-address)}h bytes)"
(1)   20/       0 :                     		else
(1)   21/       0 :                     			while address > $
(1)   22/       0 :                     				db 0
(1)   23/       0 :                     			endm
(1)   24/       0 :                     		endif
(1)   25/       0 :                     	endif
(1)   26/       0 :                         endm
(1)   27/       0 :                     
(1)   28/       0 :                     ; define an alternate org that fills the extra space with 0s instead of FFs
(1)   29/       0 :                     org0 macro address
(1)   30/       0 :                     .diff := address - *
(1)   31/       0 :                     	if .diff < 0
(1)   32/       0 :                     		error "too much stuff before org0 $\{address} ($\{(-diff)} bytes)"
(1)   33/       0 :                     	else
(1)   34/       0 :                     		while .diff > 1024
(1)   35/       0 :                     			; AS can only generate 1 kb of code on a single line
(1)   36/       0 :                     			dc.b [1024]0
(1)   37/       0 :                     .diff := .diff - 1024
(1)   38/       0 :                     		endm
(1)   39/       0 :                     		dc.b [.diff]0
(1)   40/       0 :                     	endif
(1)   41/       0 :                         endm
(1)   42/       0 :                     
(1)   43/       0 :                     ; define the cnop pseudo-instruction
(1)   44/       0 :                     cnop macro offset,alignment
(1)   45/       0 :                     	if notZ80(MOMCPU)
(1)   46/       0 :                     		org (*-1+(alignment)-((*-1+(-(offset)))#(alignment)))
(1)   47/       0 :                     	else
(1)   48/       0 :                     		org ($-1+(alignment)-(($-1+(-(offset)))#(alignment)))
(1)   49/       0 :                     	endif
(1)   50/       0 :                         endm
(1)   51/       0 :                     
(1)   52/       0 :                     ; define an alternate cnop that fills the extra space with 0s instead of FFs
(1)   53/       0 :                     cnop0 macro offset,alignment
(1)   54/       0 :                     	org0 (*-1+(alignment)-((*-1+(-(offset)))#(alignment)))
(1)   55/       0 :                         endm
(1)   56/       0 :                     
(1)   57/       0 :                     ; redefine align in terms of cnop, because the built-in align can be stupid sometimes
(1)   58/       0 :                     align macro alignment
(1)   59/       0 :                     	cnop 0,alignment
(1)   60/       0 :                         endm
(1)   61/       0 :                     
(1)   62/       0 :                     ; define an alternate align that fills the extra space with 0s instead of FFs
(1)   63/       0 :                     align0 macro alignment
(1)   64/       0 :                     	cnop0 0,alignment
(1)   65/       0 :                         endm
(1)   66/       0 :                     
(1)   67/       0 :                     ; define the even pseudo-instruction
(1)   68/       0 :                     even macro
(1)   69/       0 :                     	if notZ80(MOMCPU)
(1)   70/       0 :                     		if (*)&1
(1)   71/       0 :                     			dc.b 0 ;ds.b 1 
(1)   72/       0 :                     		endif
(1)   73/       0 :                     	else
(1)   74/       0 :                     		if ($)&1
(1)   75/       0 :                     			db 0
(1)   76/       0 :                     		endif
(1)   77/       0 :                     	endif
(1)   78/       0 :                         endm
(1)   79/       0 :                     
(1)   80/       0 :                     ; make ds work in Z80 code without creating a new segment
(1)   81/       0 :                     ds macro
(1)   82/       0 :                     	if notZ80(MOMCPU)
(1)   83/       0 :                     		!ds.ATTRIBUTE ALLARGS
(1)   84/       0 :                     	else
(1)   85/       0 :                     		rept ALLARGS
(1)   86/       0 :                     			db 0
(1)   87/       0 :                     		endm
(1)   88/       0 :                     	endif
(1)   89/       0 :                        endm
(1)   90/       0 :                     
(1)   91/       0 :                     ; define a trace macro
(1)   92/       0 :                     ; lets you easily check what address a location in this disassembly assembles to
(1)   93/       0 :                     trace macro optionalMessageWithoutQuotes
(1)   94/       0 :                     	if MOMPASS=1
(1)   95/       0 :                     		if ("ALLARGS"<>"")
(1)   96/       0 :                     			message "#\{tracenum/1.0}: line=\{MOMLINE/1.0} PC=$\{(*)&$FFFFFFFF} msg=ALLARGS"
(1)   97/       0 :                     		else
(1)   98/       0 :                     			message "#\{tracenum/1.0}: line=\{MOMLINE/1.0} PC=$\{(*)&$FFFFFFFF}"
(1)   99/       0 :                     		endif
(1)  100/       0 :                     tracenum := (tracenum+1)
(1)  101/       0 :                     	endif
(1)  102/       0 :                        endm
(1)  103/       0 : =$0                  tracenum := 0
(1)  104/       0 :                     
(1)  105/       0 :                         ; disable a space optimization in AS so we can build a bit-perfect ROM
(1)  106/       0 :                         ; (the hard way, but it requires no modification of AS itself)
(1)  107/       0 :                     
(1)  108/       0 :                     
(1)  109/       0 :                     chkop function op,ref,(substr(lowstring(op),0,strlen(ref))<>ref)
(1)  110/       0 :                     
(1)  111/       0 :                     ; 1-arg instruction that's self-patching to remove 0-offset optimization
(1)  112/       0 :                     insn1op	 macro oper,x
(1)  113/       0 :                     	  if (chkop("x","0(") && chkop("x","obid(") && chkop("x","smps_ram.v_sndprio("))
(1)  114/       0 :                     		!oper	x
(1)  115/       0 :                     	  else
(1)  116/       0 :                     		!oper	1+x
(1)  117/       0 :                     		!org	*-1
(1)  118/       0 :                     		!dc.b	0
(1)  119/       0 :                     	  endif
(1)  120/       0 :                     	 endm
(1)  121/       0 :                     
(1)  122/       0 :                     ; 2-arg instruction that's self-patching to remove 0-offset optimization
(1)  123/       0 :                     insn2op	 macro oper,x,y
(1)  124/       0 :                     	  if (chkop("x","0(") && chkop("x","obid(") && chkop("x","smps_ram.v_sndprio("))
(1)  125/       0 :                     		  if (chkop("y","0(") && chkop("y","obid(") && chkop("y","smps_ram.v_sndprio("))
(1)  126/       0 :                     			!oper	x,y
(1)  127/       0 :                     		  else
(1)  128/       0 :                     			!oper	x,1+y
(1)  129/       0 :                     			!org	*-1
(1)  130/       0 :                     			!dc.b	0
(1)  131/       0 :                     		  endif
(1)  132/       0 :                     	  else
(1)  133/       0 :                     		if chkop("y","d")
(1)  134/       0 :                     		  if (chkop("y","0(") && chkop("y","obid(") && chkop("y","smps_ram.v_sndprio("))
(1)  135/       0 :                     .start:
(1)  136/       0 :                     			!oper	1+x,y
(1)  137/       0 :                     .end:
(1)  138/       0 :                     			!org	.start+3
(1)  139/       0 :                     			!dc.b	0
(1)  140/       0 :                     			!org	.end
(1)  141/       0 :                     		  else
(1)  142/       0 :                     			!oper	1+x,1+y
(1)  143/       0 :                     			!org	*-3
(1)  144/       0 :                     			!dc.b	0
(1)  145/       0 :                     			!org	*+1
(1)  146/       0 :                     			!dc.b	0
(1)  147/       0 :                     		  endif
(1)  148/       0 :                     		else
(1)  149/       0 :                     			!oper	1+x,y
(1)  150/       0 :                     			!org	*-1
(1)  151/       0 :                     			!dc.b	0
(1)  152/       0 :                     		endif
(1)  153/       0 :                     	  endif
(1)  154/       0 :                     	 endm
(1)  155/       0 :                     
(1)  156/       0 :                     	; instructions that were used with 0(a#) syntax
(1)  157/       0 :                     	; defined to assemble as they originally did
(1)  158/       0 :                     
(1)  159/       0 :                     
      18/       0 :                     	include "Macros.asm"
(1)    1/       0 :                     ; ---------------------------------------------------------------------------
(1)    2/       0 :                     ; Set a VRAM address via the VDP control port.
(1)    3/       0 :                     ; input: 16-bit VRAM address, control port (default is ($C00004).l)
(1)    4/       0 :                     ; ---------------------------------------------------------------------------
(1)    5/       0 :                     
(1)    6/       0 :                     locVRAM:	macro loc,controlport
(1)    7/       0 :                     		if ("controlport"=="")
(1)    8/       0 :                     		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),(vdp_control_port).l
(1)    9/       0 :                     		else
(1)   10/       0 :                     		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),controlport
(1)   11/       0 :                     		endif
(1)   12/       0 :                     		endm
(1)   13/       0 :                     
(1)   14/       0 :                     ; ---------------------------------------------------------------------------
(1)   15/       0 :                     ; DMA copy data from 68K (ROM/RAM) to the VRAM
(1)   16/       0 :                     ; input: source, length, destination
(1)   17/       0 :                     ; ---------------------------------------------------------------------------
(1)   18/       0 :                     
(1)   19/       0 :                     writeVRAM:	macro source,length,destination
(1)   20/       0 :                     		lea	(vdp_control_port).l,a5
(1)   21/       0 :                     		move.l	#$94000000+(((length>>1)&$FF00)<<8)+$9300+((length>>1)&$FF),(a5)
(1)   22/       0 :                     		move.l	#$96000000+(((source>>1)&$FF00)<<8)+$9500+((source>>1)&$FF),(a5)
(1)   23/       0 :                     		move.w	#$9700+((((source>>1)&$FF0000)>>16)&$7F),(a5)
(1)   24/       0 :                     		move.w	#$4000+(destination&$3FFF),(a5)
(1)   25/       0 :                     		move.w	#$80+((destination&$C000)>>14),(v_vdp_buffer2).w
(1)   26/       0 :                     		move.w	(v_vdp_buffer2).w,(a5)
(1)   27/       0 :                     		endm
(1)   28/       0 :                     
(1)   29/       0 :                     ; ---------------------------------------------------------------------------
(1)   30/       0 :                     ; DMA copy data from 68K (ROM/RAM) to the CRAM
(1)   31/       0 :                     ; input: source, length, destination
(1)   32/       0 :                     ; ---------------------------------------------------------------------------
(1)   33/       0 :                     
(1)   34/       0 :                     writeCRAM:	macro source,length,destination
(1)   35/       0 :                     		lea	(vdp_control_port).l,a5
(1)   36/       0 :                     		move.l	#$94000000+(((length>>1)&$FF00)<<8)+$9300+((length>>1)&$FF),(a5)
(1)   37/       0 :                     		move.l	#$96000000+(((source>>1)&$FF00)<<8)+$9500+((source>>1)&$FF),(a5)
(1)   38/       0 :                     		move.w	#$9700+((((source>>1)&$FF0000)>>16)&$7F),(a5)
(1)   39/       0 :                     		move.w	#$C000+(destination&$3FFF),(a5)
(1)   40/       0 :                     		move.w	#$80+((destination&$C000)>>14),(v_vdp_buffer2).w
(1)   41/       0 :                     		move.w	(v_vdp_buffer2).w,(a5)
(1)   42/       0 :                     		endm
(1)   43/       0 :                     
(1)   44/       0 :                     ; ---------------------------------------------------------------------------
(1)   45/       0 :                     ; DMA fill VRAM with a value
(1)   46/       0 :                     ; input: value, length, destination
(1)   47/       0 :                     ; ---------------------------------------------------------------------------
(1)   48/       0 :                     
(1)   49/       0 :                     fillVRAM:	macro value,length,loc
(1)   50/       0 :                     		lea	(vdp_control_port).l,a5
(1)   51/       0 :                     		move.w	#$8F01,(a5)
(1)   52/       0 :                     		move.l	#$94000000+((length&$FF00)<<8)+$9300+(length&$FF),(a5)
(1)   53/       0 :                     		move.w	#$9780,(a5)
(1)   54/       0 :                     		move.l	#$40000080+((loc&$3FFF)<<16)+((loc&$C000)>>14),(a5)
(1)   55/       0 :                     		move.w	#value,(vdp_data_port).l
(1)   56/       0 :                     		endm
(1)   57/       0 :                     
(1)   58/       0 :                     ; ---------------------------------------------------------------------------
(1)   59/       0 :                     ; Copy a tilemap from 68K (ROM/RAM) to the VRAM without using DMA
(1)   60/       0 :                     ; input: source, destination, width [cells], height [cells]
(1)   61/       0 :                     ; ---------------------------------------------------------------------------
(1)   62/       0 :                     
(1)   63/       0 :                     copyTilemap:	macro source,loc,width,height
(1)   64/       0 :                     		lea	(source).l,a1
(1)   65/       0 :                     		move.l	#$40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14),d0
(1)   66/       0 :                     		moveq	#width,d1
(1)   67/       0 :                     		moveq	#height,d2
(1)   68/       0 :                     		bsr.w	TilemapToVRAM
(1)   69/       0 :                     		endm
(1)   70/       0 :                     
(1)   71/       0 :                     disable_ints:	macro
(1)   72/       0 :                     		move	#$2700,sr
(1)   73/       0 :                     		endm
(1)   74/       0 :                     
(1)   75/       0 :                     ; ---------------------------------------------------------------------------
(1)   76/       0 :                     ; enable interrupts
(1)   77/       0 :                     ; ---------------------------------------------------------------------------
(1)   78/       0 :                     
(1)   79/       0 :                     enable_ints:	macro
(1)   80/       0 :                     		move	#$2300,sr
(1)   81/       0 :                     		endm
(1)   82/       0 :                     
(1)   83/       0 :                     ; ---------------------------------------------------------------------------
(1)   84/       0 :                     ; long conditional jumps
(1)   85/       0 :                     ; ---------------------------------------------------------------------------
(1)   86/       0 :                     
(1)   87/       0 :                     jhi:		macro loc
(1)   88/       0 :                     		bls.s	.nojump
(1)   89/       0 :                     		jmp	loc
(1)   90/       0 :                     .nojump:
(1)   91/       0 :                     		endm
(1)   92/       0 :                     
(1)   93/       0 :                     jcc:		macro loc
(1)   94/       0 :                     		bcs.s	.nojump
(1)   95/       0 :                     		jmp	loc
(1)   96/       0 :                     .nojump:
(1)   97/       0 :                     		endm
(1)   98/       0 :                     
(1)   99/       0 :                     jhs:		macro loc
(1)  100/       0 :                     		jcc	loc
(1)  101/       0 :                     		endm
(1)  102/       0 :                     
(1)  103/       0 :                     jls:		macro loc
(1)  104/       0 :                     		bhi.s	.nojump
(1)  105/       0 :                     		jmp	loc
(1)  106/       0 :                     .nojump:
(1)  107/       0 :                     		endm
(1)  108/       0 :                     
(1)  109/       0 :                     jcs:		macro loc
(1)  110/       0 :                     		bcc.s	.nojump
(1)  111/       0 :                     		jmp	loc
(1)  112/       0 :                     .nojump:
(1)  113/       0 :                     		endm
(1)  114/       0 :                     
(1)  115/       0 :                     jlo:		macro loc
(1)  116/       0 :                     		jcs	loc
(1)  117/       0 :                     		endm
(1)  118/       0 :                     
(1)  119/       0 :                     jeq:		macro loc
(1)  120/       0 :                     		bne.s	.nojump
(1)  121/       0 :                     		jmp	loc
(1)  122/       0 :                     .nojump:
(1)  123/       0 :                     		endm
(1)  124/       0 :                     
(1)  125/       0 :                     jne:		macro loc
(1)  126/       0 :                     		beq.s	.nojump
(1)  127/       0 :                     		jmp	loc
(1)  128/       0 :                     .nojump:
(1)  129/       0 :                     		endm
(1)  130/       0 :                     
(1)  131/       0 :                     jgt:		macro loc
(1)  132/       0 :                     		ble.s	.nojump
(1)  133/       0 :                     		jmp	loc
(1)  134/       0 :                     .nojump:
(1)  135/       0 :                     		endm
(1)  136/       0 :                     
(1)  137/       0 :                     jge:		macro loc
(1)  138/       0 :                     		blt.s	.nojump
(1)  139/       0 :                     		jmp	loc
(1)  140/       0 :                     .nojump:
(1)  141/       0 :                     		endm
(1)  142/       0 :                     
(1)  143/       0 :                     jle:		macro loc
(1)  144/       0 :                     		bgt.s	.nojump
(1)  145/       0 :                     		jmp	loc
(1)  146/       0 :                     .nojump:
(1)  147/       0 :                     		endm
(1)  148/       0 :                     
(1)  149/       0 :                     jlt:		macro loc
(1)  150/       0 :                     		bge.s	.nojump
(1)  151/       0 :                     		jmp	loc
(1)  152/       0 :                     .nojump:
(1)  153/       0 :                     		endm
(1)  154/       0 :                     
(1)  155/       0 :                     jpl:		macro loc
(1)  156/       0 :                     		bmi.s	.nojump
(1)  157/       0 :                     		jmp	loc
(1)  158/       0 :                     .nojump:
(1)  159/       0 :                     		endm
(1)  160/       0 :                     
(1)  161/       0 :                     jmi:		macro loc
(1)  162/       0 :                     		bpl.s	.nojump
(1)  163/       0 :                     		jmp	loc
(1)  164/       0 :                     .nojump:
(1)  165/       0 :                     		endm
(1)  166/       0 :                     
(1)  167/       0 :                     
(1)  168/       0 :                     ; ---------------------------------------------------------------------------
(1)  169/       0 :                     ; bankswitch between SRAM and ROM
(1)  170/       0 :                     ; (remember to enable SRAM in the header first!)
(1)  171/       0 :                     ; ---------------------------------------------------------------------------
(1)  172/       0 :                     
(1)  173/       0 :                     
(1)  174/       0 :                     ; ---------------------------------------------------------------------------
(1)  175/       0 :                     ; compare the size of an index with ZoneCount constant
(1)  176/       0 :                     ; (should be used immediately after the index)
(1)  177/       0 :                     ; input: index address, element size
(1)  178/       0 :                     ; ---------------------------------------------------------------------------
(1)  179/       0 :                     
(1)  180/       0 :                     zonewarning:	macro loc,elementsize
(1)  181/       0 :                     ._end:
(1)  182/       0 :                     		if (._end-loc)-(ZoneCount*elementsize)<>0
(1)  183/       0 :                     		warning "Size of loc (\{(._end-loc)/elementsize}) does not match ZoneCount (\{ZoneCount})."
(1)  184/       0 :                     		endif
(1)  185/       0 :                     		endm
(1)  186/       0 :                     
      19/       0 :                     	include "Ram-Additions.asm"		
(1)    1/       0 :                     ; ---------------------------------------------------------------------------
(1)    2/       0 :                     ; Ram Additions
(1)    3/       0 :                     ; ---------------------------------------------------------------------------
(1)    4/       0 :                     
(1)    5/       0 : =$6978               Size_of_SegaPCM:		equ $6978
(1)    6/       0 : =$1760               Size_of_DAC_driver_guess:	equ $1760
(1)    7/       0 :                     
(1)    8/       0 :                     
      20/       0 :                     	include	"_includes-ASM/Debugger.asm"	
(1)    1/       0 :                     
(1)    2/       0 :                     ; ===============================================================
(1)    3/       0 :                     ; ---------------------------------------------------------------
(1)    4/       0 :                     ; MD Debugger and Error Handler v.2.6
(1)    5/       0 :                     ;
(1)    6/       0 :                     ;
(1)    7/       0 :                     ; Documentation, references and source code are available at:
(1)    8/       0 :                     ; - https://github.com/vladikcomper/md-modules
(1)    9/       0 :                     ;
(1)   10/       0 :                     ; (c) 2016-2024, Vladikcomper
(1)   11/       0 :                     ; ---------------------------------------------------------------
(1)   12/       0 :                     ; Debugger definitions
(1)   13/       0 :                     ; ---------------------------------------------------------------
(1)   14/       0 :                     
(1)   15/       0 :                     ; ---------------------------------------------------------------
(1)   16/       0 :                     ; Debugger customization
(1)   17/       0 :                     ; ---------------------------------------------------------------
(1)   18/       0 :                     
(1)   19/       0 :                     ; Enable debugger extensions
(1)   20/       0 :                     ; Pressing A/B/C on the exception screen can open other debuggers
(1)   21/       0 :                     ; Pressing Start or unmapped button returns to the exception
(1)   22/       0 : =$1                  DEBUGGER__EXTENSIONS__ENABLE:			equ		1		; 0 = OFF, 1 = ON (default)
(1)   23/       0 :                     
(1)   24/       0 :                     ; Whether to show SR and USP registers in exception handler
(1)   25/       0 : =$0                  DEBUGGER__SHOW_SR_USP:					equ		0		; 0 = OFF (default), 1 = ON
(1)   26/       0 :                     
(1)   27/       0 :                     ; Debuggers mapped to pressing A/B/C on the exception screen
(1)   28/       0 :                     ; Use 0 to disable button, use debugger's entry point otherwise.
(1)   29/       0 : =$95ABE              DEBUGGER__EXTENSIONS__BTN_A_DEBUGGER:	equ		MDDBG__Debugger_AddressRegisters	; display address register symbols
(1)   30/       0 : =$95B0A              DEBUGGER__EXTENSIONS__BTN_B_DEBUGGER:	equ		MDDBG__Debugger_Backtrace			; display exception backtrace
(1)   31/       0 : =$0                  DEBUGGER__EXTENSIONS__BTN_C_DEBUGGER:	equ		0		; disabled
(1)   32/       0 :                     
(1)   33/       0 :                     ; Selects between 24-bit (compact) and 32-bit (full) offset format.
(1)   34/       0 :                     ; This affects offset format next to the symbols in the exception screen header.
(1)   35/       0 :                     ; M68K bus is limited to 24 bits anyways, so not displaying unused bits saves screen space.
(1)   36/       0 :                     ; Possible values:
(1)   37/       0 :                     ; - MDDBG__Str_OffsetLocation_24bit (example: 001C04 SomeLoc+4)
(1)   38/       0 :                     ; - MDDBG__Str_OffsetLocation_32bit (example: 00001C04 SomeLoc+4)
(1)   39/       0 : =$94F5E              DEBUGGER__STR_OFFSET_SELECTOR:			equ		MDDBG__Str_OffsetLocation_24bit
(1)   40/       0 :                     
(1)   41/       0 :                     
(1)   42/       0 :                     
(1)   43/       0 :                     ; ===============================================================
(1)   44/       0 :                     ; ---------------------------------------------------------------
(1)   45/       0 :                     ; Constants
(1)   46/       0 :                     ; ---------------------------------------------------------------
(1)   47/       0 :                     
(1)   48/       0 :                     ; ----------------------------
(1)   49/       0 :                     ; Arguments formatting flags
(1)   50/       0 :                     ; ----------------------------
(1)   51/       0 :                     
(1)   52/       0 :                     ; General arguments format flags
(1)   53/       0 : =$80                 hex		equ		$80				; flag to display as hexadecimal number
(1)   54/       0 : =$90                 dec		equ		$90				; flag to display as decimal number
(1)   55/       0 : =$A0                 bin		equ		$A0				; flag to display as binary number
(1)   56/       0 : =$B0                 sym		equ		$B0				; flag to display as symbol (treat as offset, decode into symbol +displacement, if present)
(1)   57/       0 : =$C0                 symdisp	equ		$C0				; flag to display as symbol's displacement alone (DO NOT USE, unless complex formatting is required, see notes below)
(1)   58/       0 : =$D0                 str		equ		$D0				; flag to display as string (treat as offset, insert string from that offset)
(1)   59/       0 :                     
(1)   60/       0 :                     ; NOTES:
(1)   61/       0 :                     ;	* By default, the "sym" flag displays both symbol and displacement (e.g.: "Map_Sonic+$2E")
(1)   62/       0 :                     ;		In case, you need a different formatting for the displacement part (different text color and such),
(1)   63/       0 :                     ;		use "sym|split", so the displacement won't be displayed until symdisp is met
(1)   64/       0 :                     ;	* The "symdisp" can only be used after the "sym|split" instance, which decodes offset, otherwise, it'll
(1)   65/       0 :                     ;		display a garbage offset.
(1)   66/       0 :                     ;	* No other argument format flags (hex, dec, bin, str) are allowed between "sym|split" and "symdisp",
(1)   67/       0 :                     ;		otherwise, the "symdisp" results are undefined.
(1)   68/       0 :                     ;	* When using "str" flag, the argument should point to string offset that will be inserted.
(1)   69/       0 :                     ;		Arguments format flags CAN NOT be used in the string (as no arguments are meant to be here),
(1)   70/       0 :                     ;		only console control flags (see below).
(1)   71/       0 :                     
(1)   72/       0 :                     
(1)   73/       0 :                     ; Additional flags ...
(1)   74/       0 :                     ; ... for number formatters (hex, dec, bin)
(1)   75/       0 : =$8                  signed	equ		8				; treat number as signed (display + or - before the number depending on sign)
(1)   76/       0 :                     
(1)   77/       0 :                     ; ... for symbol formatter (sym)
(1)   78/       0 : =$8                  split	equ		8				; DO NOT write displacement (if present), skip and wait for "symdisp" flag to write it later (optional)
(1)   79/       0 : =$4                  forced	equ		4				; display "<unknown>" if symbol was not found, otherwise, plain offset is displayed by the displacement formatter
(1)   80/       0 :                     
(1)   81/       0 :                     ; ... for symbol displacement formatter (symdisp)
(1)   82/       0 : =$8                  weak	equ		8				; DO NOT write plain offset if symbol is displayed as "<unknown>"
(1)   83/       0 :                     
(1)   84/       0 :                     ; Argument type flags:
(1)   85/       0 :                     ; - DO NOT USE in formatted strings processed by macros, as these are included automatically
(1)   86/       0 :                     ; - ONLY USE when writting down strings manually with DC.B
(1)   87/       0 : =$0                  byte	equ		0
(1)   88/       0 : =$1                  word	equ		1
(1)   89/       0 : =$3                  long	equ		3
(1)   90/       0 :                     
(1)   91/       0 :                     ; -----------------------
(1)   92/       0 :                     ; Console control flags
(1)   93/       0 :                     ; -----------------------
(1)   94/       0 :                     
(1)   95/       0 :                     ; Plain control flags: no arguments following
(1)   96/       0 : =$E0                 endl	equ		$E0				; "End of line": flag for line break
(1)   97/       0 : =$E6                 cr		equ		$E6				; "Carriage return": jump to the beginning of the line
(1)   98/       0 : =$E8                 pal0	equ		$E8				; use palette line #0
(1)   99/       0 : =$EA                 pal1	equ		$EA				; use palette line #1
(1)  100/       0 : =$EC                 pal2	equ		$EC				; use palette line #2
(1)  101/       0 : =$EE                 pal3	equ		$EE				; use palette line #3
(1)  102/       0 :                     
(1)  103/       0 :                     ; Parametrized control flags: followed by 1-byte argument
(1)  104/       0 : =$F0                 setw	equ		$F0				; set line width: number of characters before automatic line break
(1)  105/       0 : =$F4                 setoff	equ		$F4				; set tile offset: lower byte of base pattern, which points to tile index of ASCII character 00
(1)  106/       0 : =$F8                 setpat	equ		$F8				; set tile pattern: high byte of base pattern, which determines palette flags and $100-tile section id
(1)  107/       0 : =$FA                 setx	equ		$FA				; set x-position
(1)  108/       0 :                     
(1)  109/       0 :                     ; -----------------------------
(1)  110/       0 :                     ; Error handler control flags
(1)  111/       0 :                     ; -----------------------------
(1)  112/       0 :                     
(1)  113/       0 :                     ; Screen appearence flags
(1)  114/       0 : =$1                  _eh_address_error	equ	$01		; use for address and bus errors only (tells error handler to display additional "Address" field)
(1)  115/       0 : =$2                  _eh_show_sr_usp		equ	$02		; displays SR and USP registers content on error screen
(1)  116/       0 : =$4                  _eh_hide_caller		equ	$04		; don't guess and print caller in the header (in SGDK and C/C++ projects naive caller detection isn't reliable)
(1)  117/       0 :                     
(1)  118/       0 :                     ; Advanced execution flags
(1)  119/       0 :                     ; WARNING! For experts only, DO NOT USE them unless you know what you're doing
(1)  120/       0 : =$20                 _eh_return			equ	$20
(1)  121/       0 : =$40                 _eh_enter_console	equ	$40
(1)  122/       0 : =$80                 _eh_align_offset	equ	$80
(1)  123/       0 :                     
(1)  124/       0 :                     
(1)  125/       0 :                     
(1)  126/       0 :                     ; ===============================================================
(1)  127/       0 :                     ; ---------------------------------------------------------------
(1)  128/       0 :                     ; Macros
(1)  129/       0 :                     ; ---------------------------------------------------------------
(1)  130/       0 :                     
(1)  131/       0 :                     
(1)  132/       0 :                     ; ---------------------------------------------------------------
(1)  133/       0 :                     ; WARNING! This disables automatic padding in order to combine DC.B's correctly
(1)  134/       0 :                     ;	Make sure your code doesn't rely on padding (enabled by default)!
(1)  135/       0 :                     ; ---------------------------------------------------------------
(1)  136/       0 :                     
(1)  137/       0 :                     	padding off
(1)  138/       0 :                     	supmode on				; bypass warnings on privileged instructions
(1)  139/       0 :                     
(1)  140/       0 :                     ; ---------------------------------------------------------------
(1)  141/       0 :                     ; Creates assertions for debugging
(1)  142/       0 :                     ; ---------------------------------------------------------------
(1)  143/       0 :                     ; EXAMPLES:
(1)  144/       0 :                     ;	assert.b	d0, eq, #1		; d0 must be $01, or else crash
(1)  145/       0 :                     ;	assert.w	d5, pl			; d5 must be positive
(1)  146/       0 :                     ;	assert.l	a1, hi, a0		; assert a1 > a0, or else crash
(1)  147/       0 :                     ;	assert.b	(MemFlag).w, ne	; MemFlag must be set (non-zero)
(1)  148/       0 :                     ;	assert.l	a0, eq, #Obj_Player, MyObjectsDebugger
(1)  149/       0 :                     ;
(1)  150/       0 :                     ; NOTICE:
(1)  151/       0 :                     ;	All "assert" saves and restores CCR so it's fully safe
(1)  152/       0 :                     ;	to use in-between any instructions.
(1)  153/       0 :                     ;	Use "_assert" instead if you deliberatly want to disbale
(1)  154/       0 :                     ;	this behavior and safe a few cycles.
(1)  155/       0 :                     ; ---------------------------------------------------------------
(1)  156/       0 :                     
(1)  157/       0 :                     assert:	macro	src, cond, dest, consoleprogram
(1)  158/       0 :                     	; Assertions only work in DEBUG builds
(1)  159/       0 :                     	ifdef __DEBUG__
(1)  160/       0 :                     		move.w	sr, -(sp)
(1)  161/       0 :                     		_assert.ATTRIBUTE	src, cond, dest, consoleprogram
(1)  162/       0 :                     		move.w	(sp)+, sr
(1)  163/       0 :                     	endif
(1)  164/       0 :                     		endm
(1)  165/       0 :                     
(1)  166/       0 :                     ; Same as "assert", but doesn't save/restore CCR (can be used to save a few cycles)
(1)  167/       0 :                     _assert:	macro	src, cond, dest, consoleprogram
(1)  168/       0 :                     	; Assertions only work in DEBUG builds
(1)  169/       0 :                     	ifdef __DEBUG__
(1)  170/       0 :                     		if "dest"<>""
(1)  171/       0 :                     			cmp.ATTRIBUTE	dest, src
(1)  172/       0 :                     		else
(1)  173/       0 :                     			tst.ATTRIBUTE	src
(1)  174/       0 :                     		endif
(1)  175/       0 :                     
(1)  176/       0 :                     		switch lowstring("cond")
(1)  177/       0 :                     		case "eq"
(1)  178/       0 :                     			beq	.skip
(1)  179/       0 :                     		case "ne"
(1)  180/       0 :                     			bne	.skip
(1)  181/       0 :                     		case "cs"
(1)  182/       0 :                     			bcs	.skip
(1)  183/       0 :                     		case "cc"
(1)  184/       0 :                     			bcc	.skip
(1)  185/       0 :                     		case "pl"
(1)  186/       0 :                     			bpl	.skip
(1)  187/       0 :                     		case "mi"
(1)  188/       0 :                     			bmi	.skip
(1)  189/       0 :                     		case "hi"
(1)  190/       0 :                     			bhi	.skip
(1)  191/       0 :                     		case "hs"
(1)  192/       0 :                     			bhs	.skip
(1)  193/       0 :                     		case "ls"
(1)  194/       0 :                     			bls	.skip
(1)  195/       0 :                     		case "lo"
(1)  196/       0 :                     			blo	.skip
(1)  197/       0 :                     		case "gt"
(1)  198/       0 :                     			bgt	.skip
(1)  199/       0 :                     		case "ge"
(1)  200/       0 :                     			bge	.skip
(1)  201/       0 :                     		case "le"
(1)  202/       0 :                     			ble	.skip
(1)  203/       0 :                     		case "lt"
(1)  204/       0 :                     			blt	.skip
(1)  205/       0 :                     		case "vs"
(1)  206/       0 :                     			bvs	.skip
(1)  207/       0 :                     		case "vc"
(1)  208/       0 :                     			bvc	.skip
(1)  209/       0 :                     		elsecase
(1)  210/       0 :                     			!error "Unknown condition cond"
(1)  211/       0 :                     		endcase
(1)  212/       0 :                     
(1)  213/       0 :                     	if "dest"<>""
(1)  214/       0 :                     		RaiseError	"Assertion failed:%<endl>%<pal2>> assert.ATTRIBUTE %<pal0>src,%<pal2>cond%<pal0>,dest%<endl>%<pal1>Got: %<.ATTRIBUTE src>", consoleprogram
(1)  215/       0 :                     	else
(1)  216/       0 :                     		RaiseError	"Assertion failed:%<endl>%<pal2>> assert.ATTRIBUTE %<pal0>src,%<pal2>cond%%<endl>%<pal1>Got: %<.ATTRIBUTE src>", consoleprogram
(1)  217/       0 :                     	endif
(1)  218/       0 :                     
(1)  219/       0 :                     	.skip:
(1)  220/       0 :                     	endif
(1)  221/       0 :                         endm
(1)  222/       0 :                     
(1)  223/       0 :                     ; ---------------------------------------------------------------
(1)  224/       0 :                     ; Raises an error with the given message
(1)  225/       0 :                     ; ---------------------------------------------------------------
(1)  226/       0 :                     ; EXAMPLES:
(1)  227/       0 :                     ;	RaiseError	"Something is wrong"
(1)  228/       0 :                     ;	RaiseError	"Your D0 value is BAD: %<.w d0>"
(1)  229/       0 :                     ;	RaiseError	"Module crashed! Extra info:", YourMod_Debugger
(1)  230/       0 :                     ; ---------------------------------------------------------------
(1)  231/       0 :                     
(1)  232/       0 :                     RaiseError:	macro	string, consoleprogram, opts
(1)  233/       0 :                     	pea		*(pc)
(1)  234/       0 :                     	move.w	sr, -(sp)
(1)  235/       0 :                     	__FSTRING_GenerateArgumentsCode string
(1)  236/       0 :                     	jsr		MDDBG__ErrorHandler
(1)  237/       0 :                     	__FSTRING_GenerateDecodedString string
(1)  238/       0 :                     	if ("consoleprogram"<>"")			; if console program offset is specified ...
(1)  239/       0 :                     		.__align_flag:	set	((((*)&1)!1)*_eh_align_offset)
(1)  240/       0 :                     		if "opts"<>""
(1)  241/       0 :                     			dc.b	opts+_eh_enter_console|.__align_flag					; add flag "_eh_align_offset" if the next byte is at odd offset ...
(1)  242/       0 :                     		else
(1)  243/       0 :                     			dc.b	_eh_enter_console|.__align_flag						; ''
(1)  244/       0 :                     		endif
(1)  245/       0 :                     		!align	2													; ... to tell Error handler to skip this byte, so it'll jump to ...
(1)  246/       0 :                     		if DEBUGGER__EXTENSIONS__ENABLE
(1)  247/       0 :                     			jsr		consoleprogram										; ... an aligned "jsr" instruction that calls console program itself
(1)  248/       0 :                     			jmp		MDDBG__ErrorHandler_PagesController
(1)  249/       0 :                     		else
(1)  250/       0 :                     			jmp		consoleprogram										; ... an aligned "jmp" instruction that calls console program itself
(1)  251/       0 :                     		endif
(1)  252/       0 :                     	else
(1)  253/       0 :                     		if DEBUGGER__EXTENSIONS__ENABLE
(1)  254/       0 :                     			.__align_flag:	set	((((*)&1)!1)*_eh_align_offset)
(1)  255/       0 :                     			if "opts"<>""
(1)  256/       0 :                     				dc.b	opts+_eh_return|.__align_flag					; add flag "_eh_align_offset" if the next byte is at odd offset ...
(1)  257/       0 :                     			else
(1)  258/       0 :                     				dc.b	_eh_return|.__align_flag							; add flag "_eh_align_offset" if the next byte is at odd offset ...
(1)  259/       0 :                     			endif
(1)  260/       0 :                     			!align	2													; ... to tell Error handler to skip this byte, so it'll jump to ...
(1)  261/       0 :                     			jmp		MDDBG__ErrorHandler_PagesController
(1)  262/       0 :                     		else
(1)  263/       0 :                     			dc.b	opts+0						; otherwise, just specify \opts for error handler, +0 will generate dc.b 0 ...
(1)  264/       0 :                     			!align	2							; ... in case \opts argument is empty or skipped
(1)  265/       0 :                     		endif
(1)  266/       0 :                     	endif
(1)  267/       0 :                     	!align	2
(1)  268/       0 :                     	endm
(1)  269/       0 :                     
(1)  270/       0 :                     
(1)  271/       0 :                     ; ---------------------------------------------------------------
(1)  272/       0 :                     ; Console interface
(1)  273/       0 :                     ; ---------------------------------------------------------------
(1)  274/       0 :                     ; EXAMPLES:
(1)  275/       0 :                     ;	Console.Run	YourConsoleProgram
(1)  276/       0 :                     ;	Console.Write "Hello "
(1)  277/       0 :                     ;	Console.WriteLine "...world!"
(1)  278/       0 :                     ;	Console.WriteLine "Your data is %<.b d0>"
(1)  279/       0 :                     ;	Console.WriteLine "%<pal0>Your code pointer: %<.l a0 sym>"
(1)  280/       0 :                     ;	Console.SetXY #1, #4
(1)  281/       0 :                     ;	Console.SetXY d0, d1
(1)  282/       0 :                     ;	Console.Sleep #60 ; sleep for 1 second
(1)  283/       0 :                     ;	Console.Pause
(1)  284/       0 :                     ;
(1)  285/       0 :                     ; NOTICE:
(1)  286/       0 :                     ;	All "Console.*" calls save and restore CCR so they are fully
(1)  287/       0 :                     ;	safe to use in-between any instructions.
(1)  288/       0 :                     ;	Use "_Console.*" instead if you deliberatly want to disbale
(1)  289/       0 :                     ;	this behavior and safe a few cycles.
(1)  290/       0 :                     ; ---------------------------------------------------------------
(1)  291/       0 :                     
(1)  292/       0 :                     Console:	macro	argument1, argument2
(1)  293/       0 :                     	switch lowstring("ATTRIBUTE")
(1)  294/       0 :                     	; "Console.Run" doesn't have to save/restore CCR, because it's a no-return
(1)  295/       0 :                     	case "run"
(1)  296/       0 :                     		_Console.ATTRIBUTE	argument1, argument2
(1)  297/       0 :                     
(1)  298/       0 :                     	; Other Console calls do save/restore CCR
(1)  299/       0 :                     	elsecase
(1)  300/       0 :                     		move.w	sr, -(sp)
(1)  301/       0 :                     		_Console.ATTRIBUTE	argument1, argument2
(1)  302/       0 :                     		move.w	(sp)+, sr
(1)  303/       0 :                     	endcase
(1)  304/       0 :                     	endm
(1)  305/       0 :                     
(1)  306/       0 :                     ; Same as "Console", but doesn't save/restore CCR (can be used to save a few cycles)
(1)  307/       0 :                     _Console:	macro	argument1, argument2
(1)  308/       0 :                     	switch lowstring("ATTRIBUTE")
(1)  309/       0 :                     	case "write"
(1)  310/       0 :                     		__FSTRING_GenerateArgumentsCode argument1
(1)  311/       0 :                     
(1)  312/       0 :                     		; If we have any arguments in string, use formatted string function ...
(1)  313/       0 :                     		if (.__sp>0)
(1)  314/       0 :                     			movem.l	a0-a2/d7, -(sp)
(1)  315/       0 :                     			lea		4*4(sp), a2
(1)  316/       0 :                     			lea		.__data(pc), a1
(1)  317/       0 :                     			jsr		MDDBG__Console_Write_Formatted
(1)  318/       0 :                     			movem.l	(sp)+, a0-a2/d7
(1)  319/       0 :                     			if (.__sp>8)
(1)  320/       0 :                     				lea		.__sp(sp), sp
(1)  321/       0 :                     			elseif (.__sp>0)
(1)  322/       0 :                     				addq.w	#.__sp, sp
(1)  323/       0 :                     			endif
(1)  324/       0 :                     
(1)  325/       0 :                     		; ... Otherwise, use direct write as an optimization
(1)  326/       0 :                     		else
(1)  327/       0 :                     			move.l	a0, -(sp)
(1)  328/       0 :                     			lea		.__data(pc), a0
(1)  329/       0 :                     			jsr		MDDBG__Console_Write
(1)  330/       0 :                     			move.l	(sp)+, a0
(1)  331/       0 :                     		endif
(1)  332/       0 :                     
(1)  333/       0 :                     		bra.w	.__leave
(1)  334/       0 :                     	.__data:
(1)  335/       0 :                     		__FSTRING_GenerateDecodedString argument1
(1)  336/       0 :                     		!align	2
(1)  337/       0 :                     	.__leave:
(1)  338/       0 :                     
(1)  339/       0 :                     	case "writeline"
(1)  340/       0 :                     		__FSTRING_GenerateArgumentsCode argument1
(1)  341/       0 :                     
(1)  342/       0 :                     		; If we have any arguments in string, use formatted string function ...
(1)  343/       0 :                     		if (.__sp>0)
(1)  344/       0 :                     			movem.l	a0-a2/d7, -(sp)
(1)  345/       0 :                     			lea		4*4(sp), a2
(1)  346/       0 :                     			lea		.__data(pc), a1
(1)  347/       0 :                     			jsr		MDDBG__Console_WriteLine_Formatted
(1)  348/       0 :                     			movem.l	(sp)+, a0-a2/d7
(1)  349/       0 :                     			if (.__sp>8)
(1)  350/       0 :                     				lea		.__sp(sp), sp
(1)  351/       0 :                     			elseif (.__sp>0)
(1)  352/       0 :                     				addq.w	#.__sp, sp
(1)  353/       0 :                     			endif
(1)  354/       0 :                     		; ... Otherwise, use direct write as an optimization
(1)  355/       0 :                     		else
(1)  356/       0 :                     			move.l	a0, -(sp)
(1)  357/       0 :                     			lea		.__data(pc), a0
(1)  358/       0 :                     			jsr		MDDBG__Console_WriteLine
(1)  359/       0 :                     			move.l	(sp)+, a0
(1)  360/       0 :                     		endif
(1)  361/       0 :                     		bra.w	.__leave
(1)  362/       0 :                     	.__data:
(1)  363/       0 :                     		__FSTRING_GenerateDecodedString argument1
(1)  364/       0 :                     		!align	2
(1)  365/       0 :                     	.__leave:
(1)  366/       0 :                     
(1)  367/       0 :                     	case "run"
(1)  368/       0 :                     		jsr		MDDBG__ErrorHandler_ConsoleOnly
(1)  369/       0 :                     		jsr		argument1
(1)  370/       0 :                     		bra.s	*
(1)  371/       0 :                     
(1)  372/       0 :                     	case "clear"
(1)  373/       0 :                     		jsr		MDDBG__ErrorHandler_ClearConsole
(1)  374/       0 :                     
(1)  375/       0 :                     	case "pause"
(1)  376/       0 :                     		jsr		MDDBG__ErrorHandler_PauseConsole
(1)  377/       0 :                     
(1)  378/       0 :                     	case "sleep"
(1)  379/       0 :                     		move.w	d0, -(sp)
(1)  380/       0 :                     		move.l	a0, -(sp)
(1)  381/       0 :                     		move.w	argument1, d0
(1)  382/       0 :                     		subq.w	#1, d0
(1)  383/       0 :                     		bcs.s	.__sleep_done
(1)  384/       0 :                     		.__sleep_loop:
(1)  385/       0 :                     			jsr		MDDBG__VSync
(1)  386/       0 :                     			dbf		d0, .__sleep_loop
(1)  387/       0 :                     
(1)  388/       0 :                     	.__sleep_done:
(1)  389/       0 :                     		move.l	(sp)+, a0
(1)  390/       0 :                     		move.w	(sp)+, d0
(1)  391/       0 :                     
(1)  392/       0 :                     	case "setxy"
(1)  393/       0 :                     		movem.l	d0-d1, -(sp)
(1)  394/       0 :                     		move.w	argument2, -(sp)
(1)  395/       0 :                     		move.w	argument1, -(sp)
(1)  396/       0 :                     		jsr		MDDBG__Console_SetPosAsXY_Stack
(1)  397/       0 :                     		addq.w	#4, sp
(1)  398/       0 :                     		movem.l	(sp)+, d0-d1
(1)  399/       0 :                     
(1)  400/       0 :                     	case "breakline"
(1)  401/       0 :                     		jsr		MDDBG__Console_StartNewLine
(1)  402/       0 :                     
(1)  403/       0 :                     	elsecase
(1)  404/       0 :                     		!error	"ATTRIBUTE isn't a member of Console"
(1)  405/       0 :                     
(1)  406/       0 :                     	endcase
(1)  407/       0 :                     	endm
(1)  408/       0 :                     
(1)  409/       0 :                     ; ---------------------------------------------------------------
(1)  410/       0 :                     ; KDebug integration interface
(1)  411/       0 :                     ; ---------------------------------------------------------------
(1)  412/       0 :                     ; EXAMPLES:
(1)  413/       0 :                     ;	KDebug.WriteLine "Look in your debug console!"
(1)  414/       0 :                     ;	KDebug.WriteLine "Your D0 is %<.w d0>"
(1)  415/       0 :                     ;	KDebug.BreakPoint
(1)  416/       0 :                     ;	KDebug.StartTimer
(1)  417/       0 :                     ;	KDebug.EndTimer
(1)  418/       0 :                     ;
(1)  419/       0 :                     ; NOTICE:
(1)  420/       0 :                     ;	All "KDebug.*" calls save and restore CCR so they are fully
(1)  421/       0 :                     ;	safe to use in-between any instructions.
(1)  422/       0 :                     ;	Use "_KDebug.*" instead if you deliberatly want to disbale
(1)  423/       0 :                     ;	this behavior and safe a few cycles.
(1)  424/       0 :                     ; ---------------------------------------------------------------
(1)  425/       0 :                     
(1)  426/       0 :                     KDebug:	macro	argument1
(1)  427/       0 :                     	ifdef __DEBUG__	; KDebug interface is only available in DEBUG builds
(1)  428/       0 :                     		move.w	sr, -(sp)
(1)  429/       0 :                     		_KDebug.ATTRIBUTE	argument1
(1)  430/       0 :                     		move.w	(sp)+, sr
(1)  431/       0 :                     	endif
(1)  432/       0 :                     	endm
(1)  433/       0 :                     
(1)  434/       0 :                     ; Same as "KDebug", but doesn't save/restore CCR (can be used to save a few cycles)
(1)  435/       0 :                     _KDebug	macro	argument1
(1)  436/       0 :                     	ifdef __DEBUG__	; KDebug interface is only available in DEBUG builds
(1)  437/       0 :                     	switch lowstring("ATTRIBUTE")
(1)  438/       0 :                     	case "write"
(1)  439/       0 :                     		__FSTRING_GenerateArgumentsCode argument1
(1)  440/       0 :                     
(1)  441/       0 :                     		; If we have any arguments in string, use formatted string function ...
(1)  442/       0 :                     		if (.__sp>0)
(1)  443/       0 :                     			movem.l	a0-a2/d7, -(sp)
(1)  444/       0 :                     			lea		4*4(sp), a2
(1)  445/       0 :                     			lea		.__data(pc), a1
(1)  446/       0 :                     			jsr		MDDBG__KDebug_Write_Formatted
(1)  447/       0 :                     			movem.l	(sp)+, a0-a2/d7
(1)  448/       0 :                     			if (.__sp>8)
(1)  449/       0 :                     				lea		.__sp(sp), sp
(1)  450/       0 :                     			elseif (.__sp>0)
(1)  451/       0 :                     				addq.w	#.__sp, sp
(1)  452/       0 :                     			endif
(1)  453/       0 :                     
(1)  454/       0 :                     		; ... Otherwise, use direct write as an optimization
(1)  455/       0 :                     		else
(1)  456/       0 :                     			move.l	a0, -(sp)
(1)  457/       0 :                     			lea		.__data(pc), a0
(1)  458/       0 :                     			jsr		MDDBG__KDebug_Write
(1)  459/       0 :                     			move.l	(sp)+, a0
(1)  460/       0 :                     		endif
(1)  461/       0 :                     
(1)  462/       0 :                     		bra.w	.__leave
(1)  463/       0 :                     	.__data:
(1)  464/       0 :                     		__FSTRING_GenerateDecodedString argument1
(1)  465/       0 :                     		!align	2
(1)  466/       0 :                     	.__leave:
(1)  467/       0 :                     
(1)  468/       0 :                     	case "writeline"
(1)  469/       0 :                     		__FSTRING_GenerateArgumentsCode argument1
(1)  470/       0 :                     
(1)  471/       0 :                     		; If we have any arguments in string, use formatted string function ...
(1)  472/       0 :                     		if (.__sp>0)
(1)  473/       0 :                     			movem.l	a0-a2/d7, -(sp)
(1)  474/       0 :                     			lea		4*4(sp), a2
(1)  475/       0 :                     			lea		.__data(pc), a1
(1)  476/       0 :                     			jsr		MDDBG__KDebug_WriteLine_Formatted
(1)  477/       0 :                     			movem.l	(sp)+, a0-a2/d7
(1)  478/       0 :                     			if (.__sp>8)
(1)  479/       0 :                     				lea		.__sp(sp), sp
(1)  480/       0 :                     			elseif (.__sp>0)
(1)  481/       0 :                     				addq.w	#.__sp, sp
(1)  482/       0 :                     			endif
(1)  483/       0 :                     
(1)  484/       0 :                     		; ... Otherwise, use direct write as an optimization
(1)  485/       0 :                     		else
(1)  486/       0 :                     			move.l	a0, -(sp)
(1)  487/       0 :                     			lea		.__data(pc), a0
(1)  488/       0 :                     			jsr		MDDBG__KDebug_WriteLine
(1)  489/       0 :                     			move.l	(sp)+, a0
(1)  490/       0 :                     		endif
(1)  491/       0 :                     
(1)  492/       0 :                     		bra.w	.__leave
(1)  493/       0 :                     	.__data:
(1)  494/       0 :                     		__FSTRING_GenerateDecodedString argument1
(1)  495/       0 :                     		!align	2
(1)  496/       0 :                     	.__leave:
(1)  497/       0 :                     
(1)  498/       0 :                     	case "breakline"
(1)  499/       0 :                     		jsr		MDDBG__KDebug_FlushLine
(1)  500/       0 :                     
(1)  501/       0 :                     	case "starttimer"
(1)  502/       0 :                     		move.w	#$9FC0, ($C00004).l
(1)  503/       0 :                     
(1)  504/       0 :                     	case "endtimer"
(1)  505/       0 :                     		move.w	#$9F00, ($C00004).l
(1)  506/       0 :                     
(1)  507/       0 :                     	case "breakpoint"
(1)  508/       0 :                     		move.w	#$9D00, ($C00004).l
(1)  509/       0 :                     
(1)  510/       0 :                     	elsecase
(1)  511/       0 :                     		!error	"ATTRIBUTE isn't a member of KDebug"
(1)  512/       0 :                     
(1)  513/       0 :                     	endcase
(1)  514/       0 :                     	endif
(1)  515/       0 :                     	endm
(1)  516/       0 :                     
(1)  517/       0 :                     ; ---------------------------------------------------------------
(1)  518/       0 :                     __ErrorMessage:	macro string, opts
(1)  519/       0 :                     		__FSTRING_GenerateArgumentsCode string
(1)  520/       0 :                     		jsr		MDDBG__ErrorHandler
(1)  521/       0 :                     		__FSTRING_GenerateDecodedString string
(1)  522/       0 :                     
(1)  523/       0 :                     		if DEBUGGER__EXTENSIONS__ENABLE
(1)  524/       0 :                     		.__align_flag: set (((*)&1)!1)*_eh_align_offset
(1)  525/       0 :                     			dc.b	(opts)+_eh_return|.__align_flag	; add flag "_eh_align_offset" if the next byte is at odd offset ...
(1)  526/       0 :                     			!align	2												; ... to tell Error handler to skip this byte, so it'll jump to ...
(1)  527/       0 :                     			jmp		MDDBG__ErrorHandler_PagesController	; ... extensions controller
(1)  528/       0 :                     		else
(1)  529/       0 :                     			dc.b	(opts)+0
(1)  530/       0 :                     			!align	2
(1)  531/       0 :                     		endif
(1)  532/       0 :                     	endm
(1)  533/       0 :                     
(1)  534/       0 :                     ; ---------------------------------------------------------------
(1)  535/       0 :                     ; WARNING: Since AS cannot compile instructions out of strings
(1)  536/       0 :                     ;	we have to do lots of switch-case bullshit down here..
(1)  537/       0 :                     
(1)  538/       0 :                     __FSTRING_PushArgument: macro OPERAND,DEST
(1)  539/       0 :                     
(1)  540/       0 :                     	.__operand:		set	OPERAND
(1)  541/       0 :                     	.__dval:		set	0
(1)  542/       0 :                     
(1)  543/       0 :                     	; If OPERAND starts with "#", simulate "#immediate" mode by splitting OPERAND string
(1)  544/       0 :                     	if (substr(OPERAND, 0, 1)="#")
(1)  545/       0 :                     		.__dval:	set	VAL(substr(OPERAND, 1, 0))
(1)  546/       0 :                     		.__operand:	set	"#"
(1)  547/       0 :                     
(1)  548/       0 :                     	; If OPERAND ends with ".w", simulate "XXX.w" mode
(1)  549/       0 :                     	elseif (substr(OPERAND, strlen(OPERAND)-2, 2)=".w")
(1)  550/       0 :                     		.__dval:	set VAL(substr(OPERAND, 0, strlen(OPERAND)-2))
(1)  551/       0 :                     		.__operand:	set	"x.w"
(1)  552/       0 :                     
(1)  553/       0 :                     	; If OPERAND ends with ".l", simulate "XXX.l" mode
(1)  554/       0 :                     	elseif (substr(OPERAND, strlen(OPERAND)-2, 2)=".l")
(1)  555/       0 :                     		.__dval:	set VAL(substr(OPERAND, 0, strlen(OPERAND)-2))
(1)  556/       0 :                     		.__operand:	set	"x.l"
(1)  557/       0 :                     
(1)  558/       0 :                     	; If OPERAND ends with "(pc)", simulate "d16(pc)" mode by splitting OPERAND string
(1)  559/       0 :                     	elseif (strlen(OPERAND)>4)&&(substr(OPERAND, strlen(OPERAND)-4, 4)="(pc)")
(1)  560/       0 :                     		.__dval:	set	VAL(substr(OPERAND, 0, strlen(OPERAND)-4))
(1)  561/       0 :                     		.__operand:	set substr(OPERAND, strlen(OPERAND)-4, 0)
(1)  562/       0 :                     
(1)  563/       0 :                     	; If OPERAND ends with "(an)", simulate "d16(an)" mode by splitting OPERAND string
(1)  564/       0 :                     	elseif (strlen(OPERAND)>4)&&(substr(OPERAND, strlen(OPERAND)-4, 2)="(a")&&(substr(OPERAND, strlen(OPERAND)-1, 1)=")")
(1)  565/       0 :                     		.__dval:	set	VAL(substr(OPERAND, 0, strlen(OPERAND)-4))
(1)  566/       0 :                     		.__operand:	set substr(OPERAND, strlen(OPERAND)-4, 0)
(1)  567/       0 :                     
(1)  568/       0 :                     	endif
(1)  569/       0 :                     
(1)  570/       0 :                     	switch lowstring(.__operand)
(1)  571/       0 :                     	case "d0"
(1)  572/       0 :                     		move.ATTRIBUTE	d0,DEST
(1)  573/       0 :                     	case "d1"
(1)  574/       0 :                     		move.ATTRIBUTE	d1,DEST
(1)  575/       0 :                     	case "d2"
(1)  576/       0 :                     		move.ATTRIBUTE	d2,DEST
(1)  577/       0 :                     	case "d3"
(1)  578/       0 :                     		move.ATTRIBUTE	d3,DEST
(1)  579/       0 :                     	case "d4"
(1)  580/       0 :                     		move.ATTRIBUTE	d4,DEST
(1)  581/       0 :                     	case "d5"
(1)  582/       0 :                     		move.ATTRIBUTE	d5,DEST
(1)  583/       0 :                     	case "d6"
(1)  584/       0 :                     		move.ATTRIBUTE	d6,DEST
(1)  585/       0 :                     	case "d7"
(1)  586/       0 :                     		move.ATTRIBUTE	d7,DEST
(1)  587/       0 :                     	
(1)  588/       0 :                     	case "a0"
(1)  589/       0 :                     		move.ATTRIBUTE	a0,DEST
(1)  590/       0 :                     	case "a1"
(1)  591/       0 :                     		move.ATTRIBUTE	a1,DEST
(1)  592/       0 :                     	case "a2"
(1)  593/       0 :                     		move.ATTRIBUTE	a2,DEST
(1)  594/       0 :                     	case "a3"
(1)  595/       0 :                     		move.ATTRIBUTE	a3,DEST
(1)  596/       0 :                     	case "a4"
(1)  597/       0 :                     		move.ATTRIBUTE	a4,DEST
(1)  598/       0 :                     	case "a5"
(1)  599/       0 :                     		move.ATTRIBUTE	a5,DEST
(1)  600/       0 :                     	case "a6"
(1)  601/       0 :                     		move.ATTRIBUTE	a6,DEST
(1)  602/       0 :                     
(1)  603/       0 :                     	case "(a0)"
(1)  604/       0 :                     		move.ATTRIBUTE	.__dval(a0),DEST
(1)  605/       0 :                     	case "(a1)"
(1)  606/       0 :                     		move.ATTRIBUTE	.__dval(a1),DEST
(1)  607/       0 :                     	case "(a2)"
(1)  608/       0 :                     		move.ATTRIBUTE	.__dval(a2),DEST
(1)  609/       0 :                     	case "(a3)"
(1)  610/       0 :                     		move.ATTRIBUTE	.__dval(a3),DEST
(1)  611/       0 :                     	case "(a4)"
(1)  612/       0 :                     		move.ATTRIBUTE	.__dval(a4),DEST
(1)  613/       0 :                     	case "(a5)"
(1)  614/       0 :                     		move.ATTRIBUTE	.__dval(a5),DEST
(1)  615/       0 :                     	case "(a6)"
(1)  616/       0 :                     		move.ATTRIBUTE	.__dval(a6),DEST
(1)  617/       0 :                     
(1)  618/       0 :                     	case "x.w"
(1)  619/       0 :                     		move.ATTRIBUTE	(.__dval).w,DEST
(1)  620/       0 :                     
(1)  621/       0 :                     	case "x.l"
(1)  622/       0 :                     		move.ATTRIBUTE	(.__dval).l,DEST
(1)  623/       0 :                     
(1)  624/       0 :                     	case "(pc)"
(1)  625/       0 :                     		move.ATTRIBUTE	.__dval(pc),DEST
(1)  626/       0 :                     
(1)  627/       0 :                     	case "#"
(1)  628/       0 :                     		move.ATTRIBUTE	#.__dval,DEST
(1)  629/       0 :                     
(1)  630/       0 :                     	elsecase
(1)  631/       0 :                     	.__evaluated_operand: set VAL(OPERAND)
(1)  632/       0 :                     		move.ATTRIBUTE	.__evaluated_operand,DEST
(1)  633/       0 :                     
(1)  634/       0 :                     	endcase
(1)  635/       0 :                     	endm
(1)  636/       0 :                     
(1)  637/       0 :                     ; ---------------------------------------------------------------
(1)  638/       0 :                     ; WARNING! Incomplete!
(1)  639/       0 :                     __FSTRING_GenerateArgumentsCode: macro string
(1)  640/       0 :                     
(1)  641/       0 :                     	.__pos:	set 	strstr(string,"%<")		; token position
(1)  642/       0 :                     	.__sp:	set		0						; stack displacement
(1)  643/       0 :                     	.__str:	set		string
(1)  644/       0 :                     
(1)  645/       0 :                     	; Parse string itself
(1)  646/       0 :                     	while (.__pos>=0)
(1)  647/       0 :                     
(1)  648/       0 :                         	; Find the last occurance "%<" in the string
(1)  649/       0 :                         	while ( strstr(substr(.__str,.__pos+2,0),"%<")>=0 )
(1)  650/       0 :                     			.__pos: 	set		strstr(substr(.__str,.__pos+2,0),"%<")+.__pos+2
(1)  651/       0 :                     		endm
(1)  652/       0 :                     		.__substr:	set		substr(.__str,.__pos,0)
(1)  653/       0 :                     
(1)  654/       0 :                     		; Retrive expression in brackets following % char
(1)  655/       0 :                         	.__endpos:	set		strstr(.__substr,">")
(1)  656/       0 :                     		if (.__endpos<0) ; Fix bizzare AS bug as stsstr() fails to check the last character of string
(1)  657/       0 :                     			.__endpos:	set		strlen(.__substr)-1
(1)  658/       0 :                     		endif
(1)  659/       0 :                         	.__midpos:	set		strstr(substr(.__substr,5,0)," ")
(1)  660/       0 :                         	if ((.__midpos<0)||(.__midpos+5>.__endpos))
(1)  661/       0 :                     			.__midpos:	set		.__endpos
(1)  662/       0 :                     		else
(1)  663/       0 :                     			.__midpos:	set		.__midpos+5
(1)  664/       0 :                         	endif
(1)  665/       0 :                     		.__type:		set		substr(.__substr,2,2)	; .type
(1)  666/       0 :                     
(1)  667/       0 :                     		; Expression is an effective address (e.g. %(.w d0 hex) )
(1)  668/       0 :                     		if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)  669/       0 :                     			.__operand:	set		substr(.__substr,5,.__midpos-5)						; ea
(1)  670/       0 :                     			.__param:	set		substr(.__substr,.__midpos+1,.__endpos-.__midpos-1)		; param
(1)  671/       0 :                     
(1)  672/       0 :                     			if (.__type==".b")
(1)  673/       0 :                     				subq.w	#2, sp
(1)  674/       0 :                     				__FSTRING_PushArgument.b	.__operand,1(sp)
(1)  675/       0 :                     				.__sp:	set		.__sp+2
(1)  676/       0 :                     
(1)  677/       0 :                     			elseif (.__type==".w")
(1)  678/       0 :                     				__FSTRING_PushArgument.w	.__operand,-(sp)
(1)  679/       0 :                     				.__sp:	set		.__sp+2
(1)  680/       0 :                     
(1)  681/       0 :                     			elseif (.__type==".l")
(1)  682/       0 :                     				__FSTRING_PushArgument.l	.__operand,-(sp)
(1)  683/       0 :                     				.__sp:	set		.__sp+4
(1)  684/       0 :                     
(1)  685/       0 :                     			else
(1)  686/       0 :                     				error "Unrecognized type in string operand: \{.__type}"
(1)  687/       0 :                     			endif
(1)  688/       0 :                     
(1)  689/       0 :                     		endif
(1)  690/       0 :                     
(1)  691/       0 :                     		; Cut string
(1)  692/       0 :                     		if (.__pos>0)
(1)  693/       0 :                     			.__str:	set		substr(.__str, 0, .__pos)
(1)  694/       0 :                     			.__pos:	set		strstr(.__str,"%<")
(1)  695/       0 :                     		else
(1)  696/       0 :                     			.__pos:	set		-1
(1)  697/       0 :                     		endif
(1)  698/       0 :                     
(1)  699/       0 :                     	endm
(1)  700/       0 :                     
(1)  701/       0 :                     	endm
(1)  702/       0 :                     
(1)  703/       0 :                     ; ---------------------------------------------------------------
(1)  704/       0 :                     __FSTRING_GenerateDecodedString:	macro string
(1)  705/       0 :                     
(1)  706/       0 :                     	.__lpos:	set		0		; start position
(1)  707/       0 :                     	.__pos:	set		strstr(string, "%<")
(1)  708/       0 :                     
(1)  709/       0 :                     	while (.__pos>=0)
(1)  710/       0 :                     
(1)  711/       0 :                     		; Write part of string before % token
(1)  712/       0 :                     		if (.__pos-.__lpos>0)
(1)  713/       0 :                     			dc.b	substr(string, .__lpos, .__pos-.__lpos)
(1)  714/       0 :                     		endif
(1)  715/       0 :                     
(1)  716/       0 :                     		; Retrive expression in brakets following % char
(1)  717/       0 :                         	.__endpos:	set		strstr(substr(string,.__pos+1,0),">")+.__pos+1 
(1)  718/       0 :                     		if (.__endpos<=.__pos) ; Fix bizzare AS bug as stsstr() fails to check the last character of string
(1)  719/       0 :                     			.__endpos:	set		strlen(string)-1
(1)  720/       0 :                     		endif
(1)  721/       0 :                         	.__midpos:	set		strstr(substr(string,.__pos+5,0)," ")+.__pos+5
(1)  722/       0 :                         	if ((.__midpos<.__pos+5)||(.__midpos>.__endpos))
(1)  723/       0 :                     			.__midpos:	set		.__endpos
(1)  724/       0 :                         	endif
(1)  725/       0 :                     		.__type:		set		substr(string,.__pos+1+1,2)		; .type
(1)  726/       0 :                     
(1)  727/       0 :                     		; Expression is an effective address (e.g. %<.w d0 hex> )
(1)  728/       0 :                     		if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)  729/       0 :                     			.__param:	set		substr(string,.__midpos+1,.__endpos-.__midpos-1)	; param
(1)  730/       0 :                     
(1)  731/       0 :                     			; Validate format setting ("param")
(1)  732/       0 :                     			if (strlen(.__param)<1)
(1)  733/       0 :                     				.__param: 	set		"hex"			; if param is ommited, set it to "hex"
(1)  734/       0 :                     			elseif (.__param=="signed")
(1)  735/       0 :                     				.__param:	set		"hex+signed"	; if param is "signed", correct it to "hex+signed"
(1)  736/       0 :                     			endif
(1)  737/       0 :                     
(1)  738/       0 :                     			if (val(.__param) < $80)
(1)  739/       0 :                     				!error "Illegal operand format setting: \{.__param}. Expected hex, dec, bin, sym, str or their derivatives."
(1)  740/       0 :                     			endif
(1)  741/       0 :                     
(1)  742/       0 :                     			if (.__type==".b")
(1)  743/       0 :                     				dc.b	val(.__param)
(1)  744/       0 :                     			elseif (.__type==".w")
(1)  745/       0 :                     				dc.b	val(.__param)|1
(1)  746/       0 :                     			else
(1)  747/       0 :                     				dc.b	val(.__param)|3
(1)  748/       0 :                     			endif
(1)  749/       0 :                     
(1)  750/       0 :                     		; Expression is an inline constant (e.g. %<endl> )
(1)  751/       0 :                     		else
(1)  752/       0 :                     			dc.b	val(substr(string,.__pos+1+1,.__endpos-.__pos-2))
(1)  753/       0 :                     		endif
(1)  754/       0 :                     
(1)  755/       0 :                     		.__lpos:	set		.__endpos+1
(1)  756/       0 :                     		if (strstr(substr(string,.__pos+1,0),"%<")>=0)
(1)  757/       0 :                     			.__pos:	set		strstr(substr(string,.__pos+1,0), "%<")+.__pos+1
(1)  758/       0 :                     		else
(1)  759/       0 :                     			.__pos:	set		-1
(1)  760/       0 :                     		endif
(1)  761/       0 :                     
(1)  762/       0 :                     	endm
(1)  763/       0 :                     
(1)  764/       0 :                     	; Write part of string before the end
(1)  765/       0 :                     	dc.b	substr(string, .__lpos, 0), 0
(1)  766/       0 :                     
(1)  767/       0 :                     	endm
(1)  768/       0 :                     
(1)  769/       0 :                     ; ---------------------------------------------------------------
(1)  770/       0 :                     ; MIT License
(1)  771/       0 :                     ; 
(1)  772/       0 :                     ; Copyright (c) 2016-2024 Vladikcomper
(1)  773/       0 :                     ; 
(1)  774/       0 :                     ; Permission is hereby granted, free of charge, to any person
(1)  775/       0 :                     ; obtaining a copy ; of this software and associated
(1)  776/       0 :                     ; documentation files (the "Software"), to deal in the Software 
(1)  777/       0 :                     ; without restriction, including without limitation the rights
(1)  778/       0 :                     ; to use, copy, modify, merge, publish, distribute, sublicense,
(1)  779/       0 :                     ; and/or sell copies of the Software, and to permit persons to
(1)  780/       0 :                     ; whom the Software is furnished to do so, subject to the
(1)  781/       0 :                     ; following conditions:
(1)  782/       0 :                     ; 
(1)  783/       0 :                     ; The above copyright notice and this permission notice shall be
(1)  784/       0 :                     ; included in all copies or substantial portions of the Software.
(1)  785/       0 :                     ; 
(1)  786/       0 :                     ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
(1)  787/       0 :                     ; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
(1)  788/       0 :                     ; OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
(1)  789/       0 :                     ; NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
(1)  790/       0 :                     ; HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
(1)  791/       0 :                     ; WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
(1)  792/       0 :                     ; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
(1)  793/       0 :                     ; OTHER DEALINGS IN THE SOFTWARE.
(1)  794/       0 :                     ; ---------------------------------------------------------------
(1)  795/       0 :                     
      21/       0 :                     	
      22/       0 :                     StartOfRom:
      23/       0 : 00FF FE00 0000      Vectors:dc.l $FFFE00, EntryPoint, BusError, AddressError
                6 : 0206 0009 4B10 
                C : 0009 4B28          
      24/      10 : 0009 4B44 0009      		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
               16 : 4B66 0009 4B80 
               1C : 0009 4B9E          
      25/      20 : 0009 4BBE 0009      		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
               26 : 4BE0 0009 4BF4 
               2C : 0009 4C14          
      26/      30 : 0009 4C34 0009      		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
               36 : 4C34 0009 4C34 
               3C : 0009 4C34          
      27/      40 : 0009 4C34 0009      		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
               46 : 4C34 0009 4C34 
               4C : 0009 4C34          
      28/      50 : 0009 4C34 0009      		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
               56 : 4C34 0009 4C34 
               5C : 0009 4C34          
      29/      60 : 0009 4C34 0000      		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
               66 : 0200 0000 0200 
               6C : 0000 0200          
      30/      70 : 0000 0F0C 0000      		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
               76 : 0200 0000 08F6 
               7C : 0000 0200          
      31/      80 : 0000 0200 0000      		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
               86 : 0200 0000 0200 
               8C : 0000 0200          
      32/      90 : 0000 0200 0000      		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
               96 : 0200 0000 0200 
               9C : 0000 0200          
      33/      A0 : 0000 0200 0000      		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
               A6 : 0200 0000 0200 
               AC : 0000 0200          
      34/      B0 : 0000 0200 0000      		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
               B6 : 0200 0000 0200 
               BC : 0000 0200          
      35/      C0 : 0000 0200 0000      		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
               C6 : 0200 0000 0200 
               CC : 0000 0200          
      36/      D0 : 0000 0200 0000      		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
               D6 : 0200 0000 0200 
               DC : 0000 0200          
      37/      E0 : 0000 0200 0000      		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
               E6 : 0200 0000 0200 
               EC : 0000 0200          
      38/      F0 : 0000 0200 0000      		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
               F6 : 0200 0000 0200 
               FC : 0000 0200          
      39/     100 : 5345 4741 204D      		dc.b "SEGA MEGA DRIVE " ; Hardware system ID (Console name)
              106 : 4547 4120 4452 
              10C : 4956 4520          
      40/     110 : 2843 2953 4547      		dc.b "(C)SEGA 1991.APR" ; Copyright holder and release date (generally year)
              116 : 4120 3139 3931 
              11C : 2E41 5052          
      41/     120 : 534F 4E49 4320      		dc.b "SONIC THE               HEDGEHOG                " ; Domestic name
              126 : 5448 4520 2020 
              12C : 2020 2020 2020 
              132 : 2020 2020 2020 
              138 : 4845 4447 4548 
              13E : 4F47 2020 2020 
              144 : 2020 2020 2020 
              14A : 2020 2020 2020    
      42/     150 : 534F 4E49 4320      		dc.b "SONIC THE               HEDGEHOG                " ; International name
              156 : 5448 4520 2020 
              15C : 2020 2020 2020 
              162 : 2020 2020 2020 
              168 : 4845 4447 4548 
              16E : 4F47 2020 2020 
              174 : 2020 2020 2020 
              17A : 2020 2020 2020    
      43/     180 : 474D 2030 3030      		dc.b "GM 00001009-00"   ; Serial/version number (Rev 0)
              186 : 3031 3030 392D 
              18C : 3030             
      44/     18E : 0000                Checksum:	dc.w 0
      45/     190 : 4A20 2020 2020      		dc.b "J               " ; I/O support
              196 : 2020 2020 2020 
              19C : 2020 2020          
      46/     1A0 : 0000 0000           RomStartLoc:	dc.l StartOfRom		; ROM start
      47/     1A4 : 0009 5BA7           RomEndLoc:	dc.l EndOfRom-1		; ROM end
      48/     1A8 : 00FF 0000           RamStartLoc:	dc.l $FF0000		; RAM start
      49/     1AC : 00FF FFFF           RamEndLoc:	dc.l $FFFFFF		; RAM end
      50/     1B0 : 2020 2020           SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
      51/     1B4 : 2020 2020           		dc.l $20202020		; SRAM start
      52/     1B8 : 2020 2020           		dc.l $20202020		; SRAM end
      53/     1BC : 2020 2020 2020      		dc.b "                                                    " ; Notes (unused, anything can be put in this space, but it has to be 52 bytes.)
              1C2 : 2020 2020 2020 
              1C8 : 2020 2020 2020 
              1CE : 2020 2020 2020 
              1D4 : 2020 2020 2020 
              1DA : 2020 2020 2020 
              1E0 : 2020 2020 2020 
              1E6 : 2020 2020 2020 
              1EC : 2020 2020          
      54/     1F0 : 4A55 4520 2020      		dc.b "JUE             " ; Region (Country code)
              1F6 : 2020 2020 2020 
              1FC : 2020 2020          
      55/     200 :                     
      56/     200 :                     ; ===========================================================================
      57/     200 :                     
      58/     200 :                     ErrorTrap:
      59/     200 : 4E71                		nop	
      60/     202 : 4E71                		nop	
      61/     204 : 60FA                		bra.s	ErrorTrap
      62/     206 :                     ; ===========================================================================
      63/     206 :                     
      64/     206 :                     EntryPoint:
      65/     206 : 4AB9 00A1 0008      		tst.l	($A10008).l	; test port A control
      66/     20C : 6606                		bne.s	PortA_Ok
      67/     20E : 4A79 00A1 000C      		tst.w	($A1000C).l	; test port C control
      68/     214 :                     
      69/     214 :                     PortA_Ok:
      70/     214 : 667C                		bne.s	PortC_Ok
      71/     216 : 4BFA 007C           		lea	SetupValues(pc),a5
      72/     21A : 4C9D 00E0           		movem.w	(a5)+,d5-d7
      73/     21E : 4CDD 1F00           		movem.l	(a5)+,a0-a4
      74/     222 : 1029 EF01           		move.b	-$10FF(a1),d0	; get hardware version
      75/     226 : 0200 000F           		andi.b	#$F,d0
      76/     22A : 6708                		beq.s	SkipSecurity
      77/     22C : 237C 5345 4741      		move.l	#'SEGA',$2F00(a1)
              232 : 2F00             
      78/     234 :                     
      79/     234 :                     SkipSecurity:
      80/     234 : 3014                		move.w	(a4),d0		; check	if VDP works
      81/     236 : 7000                		moveq	#0,d0
      82/     238 : 2C40                		movea.l	d0,a6
      83/     23A : 4E66                		move.l	a6,usp		; set usp to $0
      84/     23C : 7217                		moveq	#$17,d1
      85/     23E :                     
      86/     23E :                     VDPInitLoop:
      87/     23E : 1A1D                		move.b	(a5)+,d5	; add $8000 to value
      88/     240 : 3885                		move.w	d5,(a4)		; move value to	VDP register
      89/     242 : DA47                		add.w	d7,d5		; next register
      90/     244 : 51C9 FFF8           		dbf	d1,VDPInitLoop
      91/     248 : 289D                		move.l	(a5)+,(a4)
      92/     24A : 3680                		move.w	d0,(a3)		; clear	the screen
      93/     24C : 3287                		move.w	d7,(a1)		; stop the Z80
      94/     24E : 3487                		move.w	d7,(a2)		; reset	the Z80
      95/     250 :                     
      96/     250 :                     WaitForZ80:
      97/     250 : 0111                		btst	d0,(a1)		; has the Z80 stopped?
      98/     252 : 66FC                		bne.s	WaitForZ80	; if not, branch
      99/     254 : 7425                		moveq	#$25,d2
     100/     256 :                     
     101/     256 :                     Z80InitLoop:
     102/     256 : 10DD                		move.b	(a5)+,(a0)+
     103/     258 : 51CA FFFC           		dbf	d2,Z80InitLoop
     104/     25C : 3480                		move.w	d0,(a2)
     105/     25E : 3280                		move.w	d0,(a1)		; start	the Z80
     106/     260 : 3487                		move.w	d7,(a2)		; reset	the Z80
     107/     262 :                     
     108/     262 :                     ClrRAMLoop:
     109/     262 : 2D00                		move.l	d0,-(a6)
     110/     264 : 51CE FFFC           		dbf	d6,ClrRAMLoop	; clear	the entire RAM
     111/     268 : 289D                		move.l	(a5)+,(a4)	; set VDP display mode and increment
     112/     26A : 289D                		move.l	(a5)+,(a4)	; set VDP to CRAM write
     113/     26C : 761F                		moveq	#$1F,d3
     114/     26E :                     
     115/     26E :                     ClrCRAMLoop:
     116/     26E : 2680                		move.l	d0,(a3)
     117/     270 : 51CB FFFC           		dbf	d3,ClrCRAMLoop	; clear	the CRAM
     118/     274 : 289D                		move.l	(a5)+,(a4)
     119/     276 : 7813                		moveq	#$13,d4
     120/     278 :                     
     121/     278 :                     ClrVDPStuff:
     122/     278 : 2680                		move.l	d0,(a3)
     123/     27A : 51CC FFFC           		dbf	d4,ClrVDPStuff
     124/     27E : 7A03                		moveq	#3,d5
     125/     280 :                     
     126/     280 :                     PSGInitLoop:
     127/     280 : 175D 0011           		move.b	(a5)+,$11(a3)	; reset	the PSG
     128/     284 : 51CD FFFA           		dbf	d5,PSGInitLoop
     129/     288 : 3480                		move.w	d0,(a2)
     130/     28A : 4CD6 7FFF           		movem.l	(a6),d0-a6	; clear	all registers
     131/     28E : 46FC 2700           		move	#$2700,sr	; set the sr
     132/     292 :                     
     133/     292 :                     PortC_Ok:
     134/     292 : 606C                		bra.s	GameProgram
     135/     294 :                     ; ===========================================================================
     136/     294 : 8000                SetupValues:	dc.w $8000		; XREF: PortA_Ok
     137/     296 : 3FFF                		dc.w $3FFF
     138/     298 : 0100                		dc.w $100
     139/     29A :                     
     140/     29A : 00A0 0000           		dc.l $A00000		; start	of Z80 RAM
     141/     29E : 00A1 1100           		dc.l $A11100		; Z80 bus request
     142/     2A2 : 00A1 1200           		dc.l $A11200		; Z80 reset
     143/     2A6 : 00C0 0000           		dc.l $C00000
     144/     2AA : 00C0 0004           		dc.l $C00004		; address for VDP registers
     145/     2AE :                     
     146/     2AE : 0414 303C           		dc.b 4,	$14, $30, $3C	; values for VDP registers
     147/     2B2 : 076C 0000           		dc.b 7,	$6C, 0,	0
     148/     2B6 : 0000 FF00           		dc.b 0,	0, $FF,	0
     149/     2BA : 8137 0001           		dc.b $81, $37, 0, 1
     150/     2BE : 0100 00FF           		dc.b 1,	0, 0, $FF
     151/     2C2 : FF00 0080           		dc.b $FF, 0, 0,	$80
     152/     2C6 :                     
     153/     2C6 : 4000 0080           		dc.l $40000080
     154/     2CA :                     
     155/     2CA : AF01 D91F 1127      		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
              2D0 : 0021 2600 F977    
     156/     2D6 : EDB0 DDE1 FDE1      		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
              2DC : ED47 ED4F          
     157/     2E0 : D1E1 F108 D9C1      		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
              2E6 : D1E1 F1F9 F3       
     158/     2EB : ED56 36E9 E9        		dc.b $ED, $56, $36, $E9, $E9
     159/     2F0 :                     
     160/     2F0 : 8104                		dc.w $8104		; value	for VDP	display	mode
     161/     2F2 : 8F02                		dc.w $8F02		; value	for VDP	increment
     162/     2F4 : C000 0000           		dc.l $C0000000		; value	for CRAM write mode
     163/     2F8 : 4000 0010           		dc.l $40000010
     164/     2FC :                     
     165/     2FC : 9FBF DFFF           		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
     166/     300 :                     ; ===========================================================================
     167/     300 :                     
     168/     300 :                     GameProgram:
     169/     300 : 4A79 00C0 0004      		tst.w	($C00004).l
     170/     306 : 0839 0006 00A1      		btst	#6,($A1000D).l
              30C : 000D             
     171/     30E : 670C                		beq.s	CheckSumCheck
     172/     310 : 0CB8 696E 6974      		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
              316 : FFFC             
     173/     318 : 6700 004A           		beq.w	GameInit	; if yes, branch
     174/     31C :                     
     175/     31C :                     CheckSumCheck:
     176/     31C : 207C 0000 0200      		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
     177/     322 : 227C 0000 01A4      		movea.l	#RomEndLoc,a1	; stop at end of ROM
     178/     328 : 2011                		move.l	(a1),d0
     179/     32A : 7200                		moveq	#0,d1
     180/     32C :                     
     181/     32C :                     loc_32C:
     182/     32C : D258                		add.w	(a0)+,d1
     183/     32E : B088                		cmp.l	a0,d0
     184/     330 : 64FA                		bcc.s	loc_32C
     185/     332 : 227C 0000 018E      		movea.l	#Checksum,a1	; read the checksum
     186/     338 : B251                		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
     187/     33A : 6600 007C           		bne.w	CheckSumError	; if they don't match, branch
     188/     33E : 4DF8 FE00           		lea	($FFFFFE00).w,a6
     189/     342 : 7E00                		moveq	#0,d7
     190/     344 : 3C3C 007F           		move.w	#$7F,d6
     191/     348 :                     
     192/     348 :                     loc_348:
     193/     348 : 2CC7                		move.l	d7,(a6)+
     194/     34A : 51CE FFFC           		dbf	d6,loc_348
     195/     34E : 1039 00A1 0001      		move.b	($A10001).l,d0
     196/     354 : 0200 00C0           		andi.b	#$C0,d0
     197/     358 : 11C0 FFF8           		move.b	d0,($FFFFFFF8).w
     198/     35C : 21FC 696E 6974      		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
              362 : FFFC             
     199/     364 :                     
     200/     364 :                     GameInit:
     201/     364 : 4DF9 00FF 0000      		lea	($FF0000).l,a6
     202/     36A : 7E00                		moveq	#0,d7
     203/     36C : 3C3C 3F7F           		move.w	#$3F7F,d6		
     204/     370 :                     
     205/     370 :                     GameClrRAM:
     206/     370 : 2CC7                		move.l	d7,(a6)+
     207/     372 : 51CE FFFC           		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
     208/     376 : 6100 0C90           		bsr.w	VDPSetupGame
     209/     37A : 6100 0DBC           		bsr.w	SoundDriverLoad
     210/     37E : 6100 0C1C           		bsr.w	JoypadInit
     211/     382 : 11FC 0000 F600      		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
     212/     388 :                     
     213/     388 :                     MainGameLoop:
     214/     388 : 1038 F600           		move.b	($FFFFF600).w,d0 ; load	Game Mode
     215/     38C : 0240 001C           		andi.w	#$1C,d0
     216/     390 : 4EBB 0004           		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
     217/     394 : 60F2                		bra.s	MainGameLoop
     218/     396 :                     ; ===========================================================================
     219/     396 :                     ; ---------------------------------------------------------------------------
     220/     396 :                     ; Main game mode array
     221/     396 :                     ; ---------------------------------------------------------------------------
     222/     396 :                     
     223/     396 :                     GameModeArray:
     224/     396 : 6000 285E           		bra.w	SegaScreen	; Sega Screen ($00)
     225/     39A :                     ; ===========================================================================
     226/     39A : 6000 2962           		bra.w	TitleScreen	; Title	Screen ($04)
     227/     39E :                     ; ===========================================================================
     228/     39E : 6000 31E8           		bra.w	Level		; Demo Mode ($08)
     229/     3A2 :                     ; ===========================================================================
     230/     3A2 : 6000 31E4           		bra.w	Level		; Normal Level ($0C)
     231/     3A6 :                     ; ===========================================================================
     232/     3A6 : 6000 4058           		bra.w	SpecialStage	; Special Stage	($10)
     233/     3AA :                     ; ===========================================================================
     234/     3AA : 6000 4758           		bra.w	ContinueScreen	; Continue Screen ($14)
     235/     3AE :                     ; ===========================================================================
     236/     3AE : 6000 4B58           		bra.w	EndingSequence	; End of game sequence ($18)
     237/     3B2 :                     ; ===========================================================================
     238/     3B2 : 6000 523A           		bra.w	Credits		; Credits ($1C)
     239/     3B6 :                     ; ===========================================================================
     240/     3B6 : 4E75                		rts	
     241/     3B8 :                     ; ===========================================================================
     242/     3B8 :                     
     243/     3B8 :                     CheckSumError:
     244/     3B8 : 6100 0C4E           		bsr.w	VDPSetupGame
     245/     3BC : 23FC C000 0000      		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
              3C2 : 00C0 0004          
     246/     3C6 : 7E3F                		moveq	#$3F,d7
     247/     3C8 :                     
     248/     3C8 :                     CheckSum_Red:
     249/     3C8 : 33FC 000E 00C0      		move.w	#$E,($C00000).l	; fill screen with colour red
              3CE : 0000             
     250/     3D0 : 51CF FFF6           		dbf	d7,CheckSum_Red	; repeat $3F more times
     251/     3D4 :                     
     252/     3D4 :                     CheckSum_Loop:
     253/     3D4 : 60FE                		bra.s	CheckSum_Loop
     254/     3D6 :                     
     255/     3D6 :                     ; ===========================================================================
     256/     3D6 :                     
     257/     3D6 :                     Art_Text:	binclude	"_binary-files/artunc/menutext.bin"	; text used in level select and debug mode
     258/     8F6 : (MACRO)              		even
     259/     8F6 :                     
     260/     8F6 :                     ; ===========================================================================
     261/     8F6 :                     
     262/     8F6 :                     loc_B10:				; XREF: Vectors
     263/     8F6 : 48E7 FFFE           		movem.l	d0-a6,-(sp)
     264/     8FA : 4A38 F62A           		tst.b	($FFFFF62A).w
     265/     8FE : 676E                		beq.s	loc_B88
     266/     900 : 3039 00C0 0004      		move.w	($C00004).l,d0
     267/     906 : 23FC 4000 0010      		move.l	#$40000010,($C00004).l
              90C : 00C0 0004          
     268/     910 : 23F8 F616 00C0      		move.l	($FFFFF616).w,($C00000).l
              916 : 0000             
     269/     918 : 0838 0006 FFF8      		btst	#6,($FFFFFFF8).w
     270/     91E : 6708                		beq.s	loc_B42
     271/     920 : 303C 0700           		move.w	#$700,d0
     272/     924 :                     
     273/     924 :                     loc_B3E:
     274/     924 : 51C8 FFFE           		dbf	d0,loc_B3E
     275/     928 :                     
     276/     928 :                     loc_B42:
     277/     928 : 1038 F62A           		move.b	($FFFFF62A).w,d0
     278/     92C : 11FC 0000 F62A      		move.b	#0,($FFFFF62A).w
     279/     932 : 31FC 0001 F644      		move.w	#1,($FFFFF644).w
     280/     938 : 0240 003E           		andi.w	#$3E,d0
     281/     93C : 303B 0016           		move.w	off_B6E(pc,d0.w),d0
     282/     940 : 4EBB 0012           		jsr	off_B6E(pc,d0.w)
     283/     944 :                     
     284/     944 :                     loc_B5E:				; XREF: loc_B88
     285/     944 : 4EB9 0008 664E      		jsr	sub_71B4C
     286/     94A :                     
     287/     94A :                     loc_B64:				; XREF: loc_D50
     288/     94A : 52B8 FE0C           		addq.l	#1,($FFFFFE0C).w
     289/     94E : 4CDF 7FFF           		movem.l	(sp)+,d0-a6
     290/     952 : 4E73                		rte	
     291/     954 :                     ; ===========================================================================
     292/     954 : 001A 00C4           off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
     293/     958 : 00D6 00F0           		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
     294/     95C : 0100 0238           		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
     295/     960 : 0304 041C           		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
     296/     964 : 00F6 042C           		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
     297/     968 : 00C8 0438           		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
     298/     96C : 0304                		dc.w loc_E72-off_B6E
     299/     96E :                     ; ===========================================================================
     300/     96E :                     
     301/     96E :                     loc_B88:				; XREF: loc_B10; off_B6E
     302/     96E : 0C38 008C F600      		cmpi.b	#$8C,($FFFFF600).w
     303/     974 : 670A                		beq.s	loc_B9A
     304/     976 : 0C38 000C F600      		cmpi.b	#$C,($FFFFF600).w
     305/     97C : 6600 FFC6           		bne.w	loc_B5E
     306/     980 :                     
     307/     980 :                     loc_B9A:
     308/     980 : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
     309/     986 : 6600 FFBC           		bne.w	loc_B5E		; if not, branch
     310/     98A : 3039 00C0 0004      		move.w	($C00004).l,d0
     311/     990 : 0838 0006 FFF8      		btst	#6,($FFFFFFF8).w
     312/     996 : 6708                		beq.s	loc_BBA
     313/     998 : 303C 0700           		move.w	#$700,d0
     314/     99C :                     
     315/     99C :                     loc_BB6:
     316/     99C : 51C8 FFFE           		dbf	d0,loc_BB6
     317/     9A0 :                     
     318/     9A0 :                     loc_BBA:
     319/     9A0 : 31FC 0001 F644      		move.w	#1,($FFFFF644).w
     320/     9A6 : 33FC 0100 00A1      		move.w	#$100,($A11100).l
              9AC : 1100             
     321/     9AE :                     
     322/     9AE :                     loc_BC8:
     323/     9AE : 0839 0000 00A1      		btst	#0,($A11100).l
              9B4 : 1100             
     324/     9B6 : 66F6                		bne.s	loc_BC8
     325/     9B8 : 4A38 F64E           		tst.b	($FFFFF64E).w
     326/     9BC : 6626                		bne.s	loc_BFE
     327/     9BE : 4BF9 00C0 0004      		lea	($C00004).l,a5
     328/     9C4 : 2ABC 9400 9340      		move.l	#$94009340,(a5)
     329/     9CA : 2ABC 96FD 9580      		move.l	#$96FD9580,(a5)
     330/     9D0 : 3ABC 977F           		move.w	#$977F,(a5)
     331/     9D4 : 3ABC C000           		move.w	#$C000,(a5)
     332/     9D8 : 31FC 0080 F640      		move.w	#$80,($FFFFF640).w
     333/     9DE : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     334/     9E2 : 6024                		bra.s	loc_C22
     335/     9E4 :                     ; ===========================================================================
     336/     9E4 :                     
     337/     9E4 :                     loc_BFE:				; XREF: loc_BC8
     338/     9E4 : 4BF9 00C0 0004      		lea	($C00004).l,a5
     339/     9EA : 2ABC 9400 9340      		move.l	#$94009340,(a5)
     340/     9F0 : 2ABC 96FD 9540      		move.l	#$96FD9540,(a5)
     341/     9F6 : 3ABC 977F           		move.w	#$977F,(a5)
     342/     9FA : 3ABC C000           		move.w	#$C000,(a5)
     343/     9FE : 31FC 0080 F640      		move.w	#$80,($FFFFF640).w
     344/     A04 : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     345/     A08 :                     
     346/     A08 :                     loc_C22:				; XREF: loc_BC8
     347/     A08 : 3AB8 F624           		move.w	($FFFFF624).w,(a5)
     348/     A0C : 33FC 0000 00A1      		move.w	#0,($A11100).l
              A12 : 1100             
     349/     A14 : 6000 FF2E           		bra.w	loc_B5E
     350/     A18 :                     ; ===========================================================================
     351/     A18 :                     
     352/     A18 :                     loc_C32:				; XREF: off_B6E
     353/     A18 : 6100 043A           		bsr.w	sub_106E
     354/     A1C :                     
     355/     A1C :                     loc_C36:				; XREF: off_B6E
     356/     A1C : 4A78 F614           		tst.w	($FFFFF614).w
     357/     A20 : 6700 0006           		beq.w	locret_C42
     358/     A24 : 5378 F614           		subq.w	#1,($FFFFF614).w
     359/     A28 :                     
     360/     A28 :                     locret_C42:
     361/     A28 : 4E75                		rts	
     362/     A2A :                     ; ===========================================================================
     363/     A2A :                     
     364/     A2A :                     loc_C44:				; XREF: off_B6E
     365/     A2A : 6100 0428           		bsr.w	sub_106E
     366/     A2E : 6100 5CA4           		bsr.w	sub_6886
     367/     A32 : 6100 09F4           		bsr.w	sub_1642
     368/     A36 : 4A78 F614           		tst.w	($FFFFF614).w
     369/     A3A : 6700 0006           		beq.w	locret_C5C
     370/     A3E : 5378 F614           		subq.w	#1,($FFFFF614).w
     371/     A42 :                     
     372/     A42 :                     locret_C5C:
     373/     A42 : 4E75                		rts	
     374/     A44 :                     ; ===========================================================================
     375/     A44 :                     
     376/     A44 :                     loc_C5E:				; XREF: off_B6E
     377/     A44 : 6100 040E           		bsr.w	sub_106E
     378/     A48 : 4E75                		rts	
     379/     A4A :                     ; ===========================================================================
     380/     A4A :                     
     381/     A4A :                     loc_C64:				; XREF: off_B6E
     382/     A4A : 0C38 0010 F600      		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
     383/     A50 : 6700 013A           		beq.w	loc_DA6		; if yes, branch
     384/     A54 :                     
     385/     A54 :                     loc_C6E:				; XREF: off_B6E
     386/     A54 : 33FC 0100 00A1      		move.w	#$100,($A11100).l ; stop the Z80
              A5A : 1100             
     387/     A5C :                     
     388/     A5C :                     loc_C76:
     389/     A5C : 0839 0000 00A1      		btst	#0,($A11100).l	; has Z80 stopped?
              A62 : 1100             
     390/     A64 : 66F6                		bne.s	loc_C76		; if not, branch
     391/     A66 : 6100 0564           		bsr.w	ReadJoypads
     392/     A6A : 4A38 F64E           		tst.b	($FFFFF64E).w
     393/     A6E : 6626                		bne.s	loc_CB0
     394/     A70 : 4BF9 00C0 0004      		lea	($C00004).l,a5
     395/     A76 : 2ABC 9400 9340      		move.l	#$94009340,(a5)
     396/     A7C : 2ABC 96FD 9580      		move.l	#$96FD9580,(a5)
     397/     A82 : 3ABC 977F           		move.w	#$977F,(a5)
     398/     A86 : 3ABC C000           		move.w	#$C000,(a5)
     399/     A8A : 31FC 0080 F640      		move.w	#$80,($FFFFF640).w
     400/     A90 : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     401/     A94 : 6024                		bra.s	loc_CD4
     402/     A96 :                     ; ===========================================================================
     403/     A96 :                     
     404/     A96 :                     loc_CB0:				; XREF: loc_C76
     405/     A96 : 4BF9 00C0 0004      		lea	($C00004).l,a5
     406/     A9C : 2ABC 9400 9340      		move.l	#$94009340,(a5)
     407/     AA2 : 2ABC 96FD 9540      		move.l	#$96FD9540,(a5)
     408/     AA8 : 3ABC 977F           		move.w	#$977F,(a5)
     409/     AAC : 3ABC C000           		move.w	#$C000,(a5)
     410/     AB0 : 31FC 0080 F640      		move.w	#$80,($FFFFF640).w
     411/     AB6 : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     412/     ABA :                     
     413/     ABA :                     loc_CD4:				; XREF: loc_C76
     414/     ABA : 3AB8 F624           		move.w	($FFFFF624).w,(a5)
     415/     ABE : 4BF9 00C0 0004      		lea	($C00004).l,a5
     416/     AC4 : 2ABC 9401 93C0      		move.l	#$940193C0,(a5)
     417/     ACA : 2ABC 96E6 9500      		move.l	#$96E69500,(a5)
     418/     AD0 : 3ABC 977F           		move.w	#$977F,(a5)
     419/     AD4 : 3ABC 7C00           		move.w	#$7C00,(a5)
     420/     AD8 : 31FC 0083 F640      		move.w	#$83,($FFFFF640).w
     421/     ADE : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     422/     AE2 : 4BF9 00C0 0004      		lea	($C00004).l,a5
     423/     AE8 : 2ABC 9401 9340      		move.l	#$94019340,(a5)
     424/     AEE : 2ABC 96FC 9500      		move.l	#$96FC9500,(a5)
     425/     AF4 : 3ABC 977F           		move.w	#$977F,(a5)
     426/     AF8 : 3ABC 7800           		move.w	#$7800,(a5)
     427/     AFC : 31FC 0083 F640      		move.w	#$83,($FFFFF640).w
     428/     B02 : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     429/     B06 : 4A38 F767           		tst.b	($FFFFF767).w
     430/     B0A : 672A                		beq.s	loc_D50
     431/     B0C : 4BF9 00C0 0004      		lea	($C00004).l,a5
     432/     B12 : 2ABC 9401 9370      		move.l	#$94019370,(a5)
     433/     B18 : 2ABC 96E4 9500      		move.l	#$96E49500,(a5)
     434/     B1E : 3ABC 977F           		move.w	#$977F,(a5)
     435/     B22 : 3ABC 7000           		move.w	#$7000,(a5)
     436/     B26 : 31FC 0083 F640      		move.w	#$83,($FFFFF640).w
     437/     B2C : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     438/     B30 : 11FC 0000 F767      		move.b	#0,($FFFFF767).w
     439/     B36 :                     
     440/     B36 :                     loc_D50:
     441/     B36 : 33FC 0000 00A1      		move.w	#0,($A11100).l
              B3C : 1100             
     442/     B3E : 4CF8 00FF F700      		movem.l	($FFFFF700).w,d0-d7
     443/     B44 : 48F8 00FF FF10      		movem.l	d0-d7,($FFFFFF10).w
     444/     B4A : 4CF8 0003 F754      		movem.l	($FFFFF754).w,d0-d1
     445/     B50 : 48F8 0003 FF30      		movem.l	d0-d1,($FFFFFF30).w
     446/     B56 : 0C38 0060 F625      		cmpi.b	#$60,($FFFFF625).w
     447/     B5C : 640C                		bcc.s	Demo_Time
     448/     B5E : 11FC 0001 F64F      		move.b	#1,($FFFFF64F).w
     449/     B64 : 588F                		addq.l	#4,sp
     450/     B66 : 6000 FDE2           		bra.w	loc_B64
     451/     B6A :                     
     452/     B6A :                     ; ---------------------------------------------------------------------------
     453/     B6A :                     ; Subroutine to	run a demo for an amount of time
     454/     B6A :                     ; ---------------------------------------------------------------------------
     455/     B6A :                     
     456/     B6A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
     457/     B6A :                     
     458/     B6A :                     
     459/     B6A :                     Demo_Time:				; XREF: loc_D50; PalToCRAM
     460/     B6A : 6100 5B94           		bsr.w	LoadTilesAsYouMove
     461/     B6E : 4EB9 0001 C086      		jsr	AniArt_Load
     462/     B74 : 4EB9 0001 C714      		jsr	HudUpdate
     463/     B7A : 6100 08C8           		bsr.w	sub_165E
     464/     B7E : 4A78 F614           		tst.w	($FFFFF614).w	; is there time	left on	the demo?
     465/     B82 : 6700 0006           		beq.w	Demo_TimeEnd	; if not, branch
     466/     B86 : 5378 F614           		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
     467/     B8A :                     
     468/     B8A :                     Demo_TimeEnd:
     469/     B8A : 4E75                		rts	
     470/     B8C :                     ; End of function Demo_Time
     471/     B8C :                     
     472/     B8C :                     ; ===========================================================================
     473/     B8C :                     
     474/     B8C :                     loc_DA6:				; XREF: off_B6E
     475/     B8C : 33FC 0100 00A1      		move.w	#$100,($A11100).l ; stop the Z80
              B92 : 1100             
     476/     B94 :                     
     477/     B94 :                     loc_DAE:
     478/     B94 : 0839 0000 00A1      		btst	#0,($A11100).l	; has Z80 stopped?
              B9A : 1100             
     479/     B9C : 66F6                		bne.s	loc_DAE		; if not, branch
     480/     B9E : 6100 042C           		bsr.w	ReadJoypads
     481/     BA2 : 4BF9 00C0 0004      		lea	($C00004).l,a5
     482/     BA8 : 2ABC 9400 9340      		move.l	#$94009340,(a5)
     483/     BAE : 2ABC 96FD 9580      		move.l	#$96FD9580,(a5)
     484/     BB4 : 3ABC 977F           		move.w	#$977F,(a5)
     485/     BB8 : 3ABC C000           		move.w	#$C000,(a5)
     486/     BBC : 31FC 0080 F640      		move.w	#$80,($FFFFF640).w
     487/     BC2 : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     488/     BC6 : 4BF9 00C0 0004      		lea	($C00004).l,a5
     489/     BCC : 2ABC 9401 9340      		move.l	#$94019340,(a5)
     490/     BD2 : 2ABC 96FC 9500      		move.l	#$96FC9500,(a5)
     491/     BD8 : 3ABC 977F           		move.w	#$977F,(a5)
     492/     BDC : 3ABC 7800           		move.w	#$7800,(a5)
     493/     BE0 : 31FC 0083 F640      		move.w	#$83,($FFFFF640).w
     494/     BE6 : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     495/     BEA : 4BF9 00C0 0004      		lea	($C00004).l,a5
     496/     BF0 : 2ABC 9401 93C0      		move.l	#$940193C0,(a5)
     497/     BF6 : 2ABC 96E6 9500      		move.l	#$96E69500,(a5)
     498/     BFC : 3ABC 977F           		move.w	#$977F,(a5)
     499/     C00 : 3ABC 7C00           		move.w	#$7C00,(a5)
     500/     C04 : 31FC 0083 F640      		move.w	#$83,($FFFFF640).w
     501/     C0A : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     502/     C0E : 33FC 0000 00A1      		move.w	#0,($A11100).l
              C14 : 1100             
     503/     C16 : 6100 3B6E           		bsr.w	PalCycle_SS
     504/     C1A : 4A38 F767           		tst.b	($FFFFF767).w
     505/     C1E : 672A                		beq.s	loc_E64
     506/     C20 : 4BF9 00C0 0004      		lea	($C00004).l,a5
     507/     C26 : 2ABC 9401 9370      		move.l	#$94019370,(a5)
     508/     C2C : 2ABC 96E4 9500      		move.l	#$96E49500,(a5)
     509/     C32 : 3ABC 977F           		move.w	#$977F,(a5)
     510/     C36 : 3ABC 7000           		move.w	#$7000,(a5)
     511/     C3A : 31FC 0083 F640      		move.w	#$83,($FFFFF640).w
     512/     C40 : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     513/     C44 : 11FC 0000 F767      		move.b	#0,($FFFFF767).w
     514/     C4A :                     
     515/     C4A :                     loc_E64:
     516/     C4A : 4A78 F614           		tst.w	($FFFFF614).w
     517/     C4E : 6700 0006           		beq.w	locret_E70
     518/     C52 : 5378 F614           		subq.w	#1,($FFFFF614).w
     519/     C56 :                     
     520/     C56 :                     locret_E70:
     521/     C56 : 4E75                		rts	
     522/     C58 :                     ; ===========================================================================
     523/     C58 :                     
     524/     C58 :                     loc_E72:				; XREF: off_B6E
     525/     C58 : 33FC 0100 00A1      		move.w	#$100,($A11100).l ; stop the Z80
              C5E : 1100             
     526/     C60 :                     
     527/     C60 :                     loc_E7A:
     528/     C60 : 0839 0000 00A1      		btst	#0,($A11100).l	; has Z80 stopped?
              C66 : 1100             
     529/     C68 : 66F6                		bne.s	loc_E7A		; if not, branch
     530/     C6A : 6100 0360           		bsr.w	ReadJoypads
     531/     C6E : 4A38 F64E           		tst.b	($FFFFF64E).w
     532/     C72 : 6626                		bne.s	loc_EB4
     533/     C74 : 4BF9 00C0 0004      		lea	($C00004).l,a5
     534/     C7A : 2ABC 9400 9340      		move.l	#$94009340,(a5)
     535/     C80 : 2ABC 96FD 9580      		move.l	#$96FD9580,(a5)
     536/     C86 : 3ABC 977F           		move.w	#$977F,(a5)
     537/     C8A : 3ABC C000           		move.w	#$C000,(a5)
     538/     C8E : 31FC 0080 F640      		move.w	#$80,($FFFFF640).w
     539/     C94 : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     540/     C98 : 6024                		bra.s	loc_ED8
     541/     C9A :                     ; ===========================================================================
     542/     C9A :                     
     543/     C9A :                     loc_EB4:				; XREF: loc_E7A
     544/     C9A : 4BF9 00C0 0004      		lea	($C00004).l,a5
     545/     CA0 : 2ABC 9400 9340      		move.l	#$94009340,(a5)
     546/     CA6 : 2ABC 96FD 9540      		move.l	#$96FD9540,(a5)
     547/     CAC : 3ABC 977F           		move.w	#$977F,(a5)
     548/     CB0 : 3ABC C000           		move.w	#$C000,(a5)
     549/     CB4 : 31FC 0080 F640      		move.w	#$80,($FFFFF640).w
     550/     CBA : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     551/     CBE :                     
     552/     CBE :                     loc_ED8:				; XREF: loc_E7A
     553/     CBE : 3AB8 F624           		move.w	($FFFFF624).w,(a5)
     554/     CC2 : 4BF9 00C0 0004      		lea	($C00004).l,a5
     555/     CC8 : 2ABC 9401 93C0      		move.l	#$940193C0,(a5)
     556/     CCE : 2ABC 96E6 9500      		move.l	#$96E69500,(a5)
     557/     CD4 :                     
     558/     CD4 :                     loc_EEE:
     559/     CD4 : 3ABC 977F           		move.w	#$977F,(a5)
     560/     CD8 : 3ABC 7C00           		move.w	#$7C00,(a5)
     561/     CDC : 31FC 0083 F640      		move.w	#$83,($FFFFF640).w
     562/     CE2 : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     563/     CE6 : 4BF9 00C0 0004      		lea	($C00004).l,a5
     564/     CEC : 2ABC 9401 9340      		move.l	#$94019340,(a5)
     565/     CF2 : 2ABC 96FC 9500      		move.l	#$96FC9500,(a5)
     566/     CF8 : 3ABC 977F           		move.w	#$977F,(a5)
     567/     CFC : 3ABC 7800           		move.w	#$7800,(a5)
     568/     D00 : 31FC 0083 F640      		move.w	#$83,($FFFFF640).w
     569/     D06 : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     570/     D0A : 4A38 F767           		tst.b	($FFFFF767).w
     571/     D0E : 672A                		beq.s	loc_F54
     572/     D10 : 4BF9 00C0 0004      		lea	($C00004).l,a5
     573/     D16 : 2ABC 9401 9370      		move.l	#$94019370,(a5)
     574/     D1C : 2ABC 96E4 9500      		move.l	#$96E49500,(a5)
     575/     D22 : 3ABC 977F           		move.w	#$977F,(a5)
     576/     D26 : 3ABC 7000           		move.w	#$7000,(a5)
     577/     D2A : 31FC 0083 F640      		move.w	#$83,($FFFFF640).w
     578/     D30 : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     579/     D34 : 11FC 0000 F767      		move.b	#0,($FFFFF767).w
     580/     D3A :                     
     581/     D3A :                     loc_F54:
     582/     D3A : 33FC 0000 00A1      		move.w	#0,($A11100).l	; start	the Z80
              D40 : 1100             
     583/     D42 : 4CF8 00FF F700      		movem.l	($FFFFF700).w,d0-d7
     584/     D48 : 48F8 00FF FF10      		movem.l	d0-d7,($FFFFFF10).w
     585/     D4E : 4CF8 0003 F754      		movem.l	($FFFFF754).w,d0-d1
     586/     D54 : 48F8 0003 FF30      		movem.l	d0-d1,($FFFFFF30).w
     587/     D5A : 6100 59A4           		bsr.w	LoadTilesAsYouMove
     588/     D5E : 4EB9 0001 C086      		jsr	AniArt_Load
     589/     D64 : 4EB9 0001 C714      		jsr	HudUpdate
     590/     D6A : 6100 06BC           		bsr.w	sub_1642
     591/     D6E : 4E75                		rts	
     592/     D70 :                     ; ===========================================================================
     593/     D70 :                     
     594/     D70 :                     loc_F8A:				; XREF: off_B6E
     595/     D70 : 6100 00E2           		bsr.w	sub_106E
     596/     D74 : 5238 F628           		addq.b	#1,($FFFFF628).w
     597/     D78 : 11FC 000E F62A      		move.b	#$E,($FFFFF62A).w
     598/     D7E : 4E75                		rts	
     599/     D80 :                     ; ===========================================================================
     600/     D80 :                     
     601/     D80 :                     loc_F9A:				; XREF: off_B6E
     602/     D80 : 6100 00D2           		bsr.w	sub_106E
     603/     D84 : 3AB8 F624           		move.w	($FFFFF624).w,(a5)
     604/     D88 : 6000 069E           		bra.w	sub_1642
     605/     D8C :                     ; ===========================================================================
     606/     D8C :                     
     607/     D8C :                     loc_FA6:				; XREF: off_B6E
     608/     D8C : 33FC 0100 00A1      		move.w	#$100,($A11100).l ; stop the Z80
              D92 : 1100             
     609/     D94 :                     
     610/     D94 :                     loc_FAE:
     611/     D94 : 0839 0000 00A1      		btst	#0,($A11100).l	; has Z80 stopped?
              D9A : 1100             
     612/     D9C : 66F6                		bne.s	loc_FAE		; if not, branch
     613/     D9E : 6100 022C           		bsr.w	ReadJoypads
     614/     DA2 : 4BF9 00C0 0004      		lea	($C00004).l,a5
     615/     DA8 : 2ABC 9400 9340      		move.l	#$94009340,(a5)
     616/     DAE : 2ABC 96FD 9580      		move.l	#$96FD9580,(a5)
     617/     DB4 : 3ABC 977F           		move.w	#$977F,(a5)
     618/     DB8 : 3ABC C000           		move.w	#$C000,(a5)
     619/     DBC : 31FC 0080 F640      		move.w	#$80,($FFFFF640).w
     620/     DC2 : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     621/     DC6 : 4BF9 00C0 0004      		lea	($C00004).l,a5
     622/     DCC : 2ABC 9401 9340      		move.l	#$94019340,(a5)
     623/     DD2 : 2ABC 96FC 9500      		move.l	#$96FC9500,(a5)
     624/     DD8 : 3ABC 977F           		move.w	#$977F,(a5)
     625/     DDC : 3ABC 7800           		move.w	#$7800,(a5)
     626/     DE0 : 31FC 0083 F640      		move.w	#$83,($FFFFF640).w
     627/     DE6 : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     628/     DEA : 4BF9 00C0 0004      		lea	($C00004).l,a5
     629/     DF0 : 2ABC 9401 93C0      		move.l	#$940193C0,(a5)
     630/     DF6 : 2ABC 96E6 9500      		move.l	#$96E69500,(a5)
     631/     DFC : 3ABC 977F           		move.w	#$977F,(a5)
     632/     E00 : 3ABC 7C00           		move.w	#$7C00,(a5)
     633/     E04 : 31FC 0083 F640      		move.w	#$83,($FFFFF640).w
     634/     E0A : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     635/     E0E : 33FC 0000 00A1      		move.w	#0,($A11100).l	; start	the Z80
              E14 : 1100             
     636/     E16 : 4A38 F767           		tst.b	($FFFFF767).w
     637/     E1A : 672A                		beq.s	loc_1060
     638/     E1C : 4BF9 00C0 0004      		lea	($C00004).l,a5
     639/     E22 : 2ABC 9401 9370      		move.l	#$94019370,(a5)
     640/     E28 : 2ABC 96E4 9500      		move.l	#$96E49500,(a5)
     641/     E2E : 3ABC 977F           		move.w	#$977F,(a5)
     642/     E32 : 3ABC 7000           		move.w	#$7000,(a5)
     643/     E36 : 31FC 0083 F640      		move.w	#$83,($FFFFF640).w
     644/     E3C : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     645/     E40 : 11FC 0000 F767      		move.b	#0,($FFFFF767).w
     646/     E46 :                     
     647/     E46 :                     loc_1060:
     648/     E46 : 4A78 F614           		tst.w	($FFFFF614).w
     649/     E4A : 6700 0006           		beq.w	locret_106C
     650/     E4E : 5378 F614           		subq.w	#1,($FFFFF614).w
     651/     E52 :                     
     652/     E52 :                     locret_106C:
     653/     E52 : 4E75                		rts	
     654/     E54 :                     
     655/     E54 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
     656/     E54 :                     
     657/     E54 :                     
     658/     E54 :                     sub_106E:				; XREF: loc_C32; et al
     659/     E54 : 33FC 0100 00A1      		move.w	#$100,($A11100).l ; stop the Z80
              E5A : 1100             
     660/     E5C :                     
     661/     E5C :                     loc_1076:
     662/     E5C : 0839 0000 00A1      		btst	#0,($A11100).l	; has Z80 stopped?
              E62 : 1100             
     663/     E64 : 66F6                		bne.s	loc_1076	; if not, branch
     664/     E66 : 6100 0164           		bsr.w	ReadJoypads
     665/     E6A : 4A38 F64E           		tst.b	($FFFFF64E).w
     666/     E6E : 6626                		bne.s	loc_10B0
     667/     E70 : 4BF9 00C0 0004      		lea	($C00004).l,a5
     668/     E76 : 2ABC 9400 9340      		move.l	#$94009340,(a5)
     669/     E7C : 2ABC 96FD 9580      		move.l	#$96FD9580,(a5)
     670/     E82 : 3ABC 977F           		move.w	#$977F,(a5)
     671/     E86 : 3ABC C000           		move.w	#$C000,(a5)
     672/     E8A : 31FC 0080 F640      		move.w	#$80,($FFFFF640).w
     673/     E90 : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     674/     E94 : 6024                		bra.s	loc_10D4
     675/     E96 :                     ; ===========================================================================
     676/     E96 :                     
     677/     E96 :                     loc_10B0:				; XREF: sub_106E
     678/     E96 : 4BF9 00C0 0004      		lea	($C00004).l,a5
     679/     E9C : 2ABC 9400 9340      		move.l	#$94009340,(a5)
     680/     EA2 : 2ABC 96FD 9540      		move.l	#$96FD9540,(a5)
     681/     EA8 : 3ABC 977F           		move.w	#$977F,(a5)
     682/     EAC : 3ABC C000           		move.w	#$C000,(a5)
     683/     EB0 : 31FC 0080 F640      		move.w	#$80,($FFFFF640).w
     684/     EB6 : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     685/     EBA :                     
     686/     EBA :                     loc_10D4:				; XREF: sub_106E
     687/     EBA : 4BF9 00C0 0004      		lea	($C00004).l,a5
     688/     EC0 : 2ABC 9401 9340      		move.l	#$94019340,(a5)
     689/     EC6 : 2ABC 96FC 9500      		move.l	#$96FC9500,(a5)
     690/     ECC : 3ABC 977F           		move.w	#$977F,(a5)
     691/     ED0 : 3ABC 7800           		move.w	#$7800,(a5)
     692/     ED4 : 31FC 0083 F640      		move.w	#$83,($FFFFF640).w
     693/     EDA : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     694/     EDE : 4BF9 00C0 0004      		lea	($C00004).l,a5
     695/     EE4 : 2ABC 9401 93C0      		move.l	#$940193C0,(a5)
     696/     EEA : 2ABC 96E6 9500      		move.l	#$96E69500,(a5)
     697/     EF0 : 3ABC 977F           		move.w	#$977F,(a5)
     698/     EF4 : 3ABC 7C00           		move.w	#$7C00,(a5)
     699/     EF8 : 31FC 0083 F640      		move.w	#$83,($FFFFF640).w
     700/     EFE : 3AB8 F640           		move.w	($FFFFF640).w,(a5)
     701/     F02 : 33FC 0000 00A1      		move.w	#0,($A11100).l	; start	the Z80
              F08 : 1100             
     702/     F0A : 4E75                		rts	
     703/     F0C :                     ; End of function sub_106E
     704/     F0C :                     
     705/     F0C :                     ; ---------------------------------------------------------------------------
     706/     F0C :                     ; Subroutine to	move pallets from the RAM to CRAM
     707/     F0C :                     ; ---------------------------------------------------------------------------
     708/     F0C :                     
     709/     F0C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
     710/     F0C :                     
     711/     F0C :                     
     712/     F0C :                     PalToCRAM:
     713/     F0C : 46FC 2700           		move	#$2700,sr
     714/     F10 : 4A78 F644           		tst.w	($FFFFF644).w
     715/     F14 : 676C                		beq.s	locret_119C
     716/     F16 : 31FC 0000 F644      		move.w	#0,($FFFFF644).w
     717/     F1C : 48E7 00C0           		movem.l	a0-a1,-(sp)
     718/     F20 : 43F9 00C0 0000      		lea	($C00000).l,a1
     719/     F26 : 41F8 FA80           		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
     720/     F2A : 237C C000 0000      		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
              F30 : 0004             
     721/     F32 : 2298                		move.l	(a0)+,(a1)	; move pallet to CRAM
     722/     F34 : 2298                		move.l	(a0)+,(a1)
     723/     F36 : 2298                		move.l	(a0)+,(a1)
     724/     F38 : 2298                		move.l	(a0)+,(a1)
     725/     F3A : 2298                		move.l	(a0)+,(a1)
     726/     F3C : 2298                		move.l	(a0)+,(a1)
     727/     F3E : 2298                		move.l	(a0)+,(a1)
     728/     F40 : 2298                		move.l	(a0)+,(a1)
     729/     F42 : 2298                		move.l	(a0)+,(a1)
     730/     F44 : 2298                		move.l	(a0)+,(a1)
     731/     F46 : 2298                		move.l	(a0)+,(a1)
     732/     F48 : 2298                		move.l	(a0)+,(a1)
     733/     F4A : 2298                		move.l	(a0)+,(a1)
     734/     F4C : 2298                		move.l	(a0)+,(a1)
     735/     F4E : 2298                		move.l	(a0)+,(a1)
     736/     F50 : 2298                		move.l	(a0)+,(a1)
     737/     F52 : 2298                		move.l	(a0)+,(a1)
     738/     F54 : 2298                		move.l	(a0)+,(a1)
     739/     F56 : 2298                		move.l	(a0)+,(a1)
     740/     F58 : 2298                		move.l	(a0)+,(a1)
     741/     F5A : 2298                		move.l	(a0)+,(a1)
     742/     F5C : 2298                		move.l	(a0)+,(a1)
     743/     F5E : 2298                		move.l	(a0)+,(a1)
     744/     F60 : 2298                		move.l	(a0)+,(a1)
     745/     F62 : 2298                		move.l	(a0)+,(a1)
     746/     F64 : 2298                		move.l	(a0)+,(a1)
     747/     F66 : 2298                		move.l	(a0)+,(a1)
     748/     F68 : 2298                		move.l	(a0)+,(a1)
     749/     F6A : 2298                		move.l	(a0)+,(a1)
     750/     F6C : 2298                		move.l	(a0)+,(a1)
     751/     F6E : 2298                		move.l	(a0)+,(a1)
     752/     F70 : 2298                		move.l	(a0)+,(a1)
     753/     F72 : 337C 8ADF 0004      		move.w	#$8ADF,4(a1)
     754/     F78 : 4CDF 0300           		movem.l	(sp)+,a0-a1
     755/     F7C : 4A38 F64F           		tst.b	($FFFFF64F).w
     756/     F80 : 6602                		bne.s	loc_119E
     757/     F82 :                     
     758/     F82 :                     locret_119C:
     759/     F82 : 4E73                		rte	
     760/     F84 :                     ; ===========================================================================
     761/     F84 :                     
     762/     F84 :                     loc_119E:				; XREF: PalToCRAM
     763/     F84 : 4238 F64F           		clr.b	($FFFFF64F).w
     764/     F88 : 48E7 FFFE           		movem.l	d0-a6,-(sp)
     765/     F8C : 6100 FBDC           		bsr.w	Demo_Time
     766/     F90 : 4EB9 0008 664E      		jsr	sub_71B4C
     767/     F96 : 4CDF 7FFF           		movem.l	(sp)+,d0-a6
     768/     F9A : 4E73                		rte	
     769/     F9C :                     ; End of function PalToCRAM
     770/     F9C :                     
     771/     F9C :                     ; ---------------------------------------------------------------------------
     772/     F9C :                     ; Subroutine to	initialise joypads
     773/     F9C :                     ; ---------------------------------------------------------------------------
     774/     F9C :                     
     775/     F9C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
     776/     F9C :                     
     777/     F9C :                     
     778/     F9C :                     JoypadInit:				; XREF: GameClrRAM
     779/     F9C : 33FC 0100 00A1      		move.w	#$100,($A11100).l ; stop the Z80
              FA2 : 1100             
     780/     FA4 :                     
     781/     FA4 :                     Joypad_WaitZ80:
     782/     FA4 : 0839 0000 00A1      		btst	#0,($A11100).l	; has the Z80 stopped?
              FAA : 1100             
     783/     FAC : 66F6                		bne.s	Joypad_WaitZ80	; if not, branch
     784/     FAE : 7040                		moveq	#$40,d0
     785/     FB0 : 13C0 00A1 0009      		move.b	d0,($A10009).l	; init port 1 (joypad 1)
     786/     FB6 : 13C0 00A1 000B      		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
     787/     FBC : 13C0 00A1 000D      		move.b	d0,($A1000D).l	; init port 3 (extra)
     788/     FC2 : 33FC 0000 00A1      		move.w	#0,($A11100).l	; start	the Z80
              FC8 : 1100             
     789/     FCA : 4E75                		rts	
     790/     FCC :                     ; End of function JoypadInit
     791/     FCC :                     
     792/     FCC :                     ; ---------------------------------------------------------------------------
     793/     FCC :                     ; Subroutine to	read joypad input, and send it to the RAM
     794/     FCC :                     ; ---------------------------------------------------------------------------
     795/     FCC :                     
     796/     FCC :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
     797/     FCC :                     
     798/     FCC :                     
     799/     FCC :                     ReadJoypads:
     800/     FCC : 41F8 F604           		lea	($FFFFF604).w,a0 ; address where joypad	states are written
     801/     FD0 : 43F9 00A1 0003      		lea	($A10003).l,a1	; first	joypad port
     802/     FD6 : 6102                		bsr.s	Joypad_Read	; do the first joypad
     803/     FD8 : 5449                		addq.w	#2,a1		; do the second	joypad
     804/     FDA :                     
     805/     FDA :                     Joypad_Read:
     806/     FDA : 12BC 0000           		move.b	#0,(a1)
     807/     FDE : 4E71                		nop	
     808/     FE0 : 4E71                		nop	
     809/     FE2 : 1011                		move.b	(a1),d0
     810/     FE4 : E508                		lsl.b	#2,d0
     811/     FE6 : 0200 00C0           		andi.b	#$C0,d0
     812/     FEA : 12BC 0040           		move.b	#$40,(a1)
     813/     FEE : 4E71                		nop	
     814/     FF0 : 4E71                		nop	
     815/     FF2 : 1211                		move.b	(a1),d1
     816/     FF4 : 0201 003F           		andi.b	#$3F,d1
     817/     FF8 : 8001                		or.b	d1,d0
     818/     FFA : 4600                		not.b	d0
     819/     FFC : 1210                		move.b	(a0),d1
     820/     FFE : B101                		eor.b	d0,d1
     821/    1000 : 10C0                		move.b	d0,(a0)+
     822/    1002 : C200                		and.b	d0,d1
     823/    1004 : 10C1                		move.b	d1,(a0)+
     824/    1006 : 4E75                		rts	
     825/    1008 :                     ; End of function ReadJoypads
     826/    1008 :                     
     827/    1008 :                     
     828/    1008 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
     829/    1008 :                     
     830/    1008 :                     
     831/    1008 :                     VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
     832/    1008 : 41F9 00C0 0004      		lea	($C00004).l,a0
     833/    100E : 43F9 00C0 0000      		lea	($C00000).l,a1
     834/    1014 : 45F9 0000 1084      		lea	(VDPSetupArray).l,a2
     835/    101A : 7E12                		moveq	#$12,d7
     836/    101C :                     
     837/    101C :                     VDP_Loop:
     838/    101C : 309A                		move.w	(a2)+,(a0)
     839/    101E : 51CF FFFC           		dbf	d7,VDP_Loop	; set the VDP registers
     840/    1022 :                     
     841/    1022 : 3039 0000 1086      		move.w	(VDPSetupArray+2).l,d0
     842/    1028 : 31C0 F60C           		move.w	d0,($FFFFF60C).w
     843/    102C : 31FC 8ADF F624      		move.w	#$8ADF,($FFFFF624).w
     844/    1032 : 7000                		moveq	#0,d0
     845/    1034 : 23FC C000 0000      		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
             103A : 00C0 0004          
     846/    103E : 3E3C 003F           		move.w	#$3F,d7
     847/    1042 :                     
     848/    1042 :                     VDP_ClrCRAM:
     849/    1042 : 3280                		move.w	d0,(a1)
     850/    1044 : 51CF FFFC           		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
     851/    1048 :                     
     852/    1048 : 42B8 F616           		clr.l	($FFFFF616).w
     853/    104C : 42B8 F61A           		clr.l	($FFFFF61A).w
     854/    1050 : 2F01                		move.l	d1,-(sp)
     855/    1052 : 4BF9 00C0 0004      		lea	($C00004).l,a5
     856/    1058 : 3ABC 8F01           		move.w	#$8F01,(a5)
     857/    105C : 2ABC 94FF 93FF      		move.l	#$94FF93FF,(a5)
     858/    1062 : 3ABC 9780           		move.w	#$9780,(a5)
     859/    1066 : 2ABC 4000 0080      		move.l	#$40000080,(a5)
     860/    106C : 33FC 0000 00C0      		move.w	#0,($C00000).l	; clear	the screen
             1072 : 0000             
     861/    1074 :                     
     862/    1074 :                     loc_128E:
     863/    1074 : 3215                		move.w	(a5),d1
     864/    1076 : 0801 0001           		btst	#1,d1
     865/    107A : 66F8                		bne.s	loc_128E
     866/    107C :                     
     867/    107C : 3ABC 8F02           		move.w	#$8F02,(a5)
     868/    1080 : 221F                		move.l	(sp)+,d1
     869/    1082 : 4E75                		rts	
     870/    1084 :                     ; End of function VDPSetupGame
     871/    1084 :                     
     872/    1084 :                     ; ===========================================================================
     873/    1084 : 8004 8134 8230      VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
             108A : 8328             
     874/    108C : 8407 857C 8600      		dc.w $8407, $857C, $8600, $8700
             1092 : 8700             
     875/    1094 : 8800 8900 8A00      		dc.w $8800, $8900, $8A00, $8B00
             109A : 8B00             
     876/    109C : 8C81 8D3F 8E00      		dc.w $8C81, $8D3F, $8E00, $8F02
             10A2 : 8F02             
     877/    10A4 : 9001 9100 9200      		dc.w $9001, $9100, $9200
     878/    10AA :                     
     879/    10AA :                     ; ---------------------------------------------------------------------------
     880/    10AA :                     ; Subroutine to	clear the screen
     881/    10AA :                     ; ---------------------------------------------------------------------------
     882/    10AA :                     
     883/    10AA :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
     884/    10AA :                     
     885/    10AA :                     
     886/    10AA :                     ClearScreen:
     887/    10AA : 4BF9 00C0 0004      		lea	($C00004).l,a5
     888/    10B0 : 3ABC 8F01           		move.w	#$8F01,(a5)
     889/    10B4 : 2ABC 940F 93FF      		move.l	#$940F93FF,(a5)
     890/    10BA : 3ABC 9780           		move.w	#$9780,(a5)
     891/    10BE : 2ABC 4000 0083      		move.l	#$40000083,(a5)
     892/    10C4 : 33FC 0000 00C0      		move.w	#0,($C00000).l
             10CA : 0000             
     893/    10CC :                     
     894/    10CC :                     loc_12E6:
     895/    10CC : 3215                		move.w	(a5),d1
     896/    10CE : 0801 0001           		btst	#1,d1
     897/    10D2 : 66F8                		bne.s	loc_12E6
     898/    10D4 :                     
     899/    10D4 : 3ABC 8F02           		move.w	#$8F02,(a5)
     900/    10D8 : 4BF9 00C0 0004      		lea	($C00004).l,a5
     901/    10DE : 3ABC 8F01           		move.w	#$8F01,(a5)
     902/    10E2 : 2ABC 940F 93FF      		move.l	#$940F93FF,(a5)
     903/    10E8 : 3ABC 9780           		move.w	#$9780,(a5)
     904/    10EC : 2ABC 6000 0083      		move.l	#$60000083,(a5)
     905/    10F2 : 33FC 0000 00C0      		move.w	#0,($C00000).l
             10F8 : 0000             
     906/    10FA :                     
     907/    10FA :                     loc_1314:
     908/    10FA : 3215                		move.w	(a5),d1
     909/    10FC : 0801 0001           		btst	#1,d1
     910/    1100 : 66F8                		bne.s	loc_1314
     911/    1102 :                     
     912/    1102 : 3ABC 8F02           		move.w	#$8F02,(a5)
     913/    1106 : 21FC 0000 0000      		move.l	#0,($FFFFF616).w
             110C : F616             
     914/    110E : 21FC 0000 0000      		move.l	#0,($FFFFF61A).w
             1114 : F61A             
     915/    1116 : 43F8 F800           		lea	($FFFFF800).w,a1
     916/    111A : 7000                		moveq	#0,d0
     917/    111C : 323C 00A0           		move.w	#$A0,d1
     918/    1120 :                     
     919/    1120 :                     loc_133A:
     920/    1120 : 22C0                		move.l	d0,(a1)+
     921/    1122 : 51C9 FFFC           		dbf	d1,loc_133A
     922/    1126 :                     
     923/    1126 : 43F8 CC00           		lea	($FFFFCC00).w,a1
     924/    112A : 7000                		moveq	#0,d0
     925/    112C : 323C 0100           		move.w	#$100,d1
     926/    1130 :                     
     927/    1130 :                     loc_134A:
     928/    1130 : 22C0                		move.l	d0,(a1)+
     929/    1132 : 51C9 FFFC           		dbf	d1,loc_134A
     930/    1136 : 4E75                		rts	
     931/    1138 :                     ; End of function ClearScreen
     932/    1138 :                     
     933/    1138 :                     ; ---------------------------------------------------------------------------
     934/    1138 :                     ; Subroutine to	load the sound driver
     935/    1138 :                     ; ---------------------------------------------------------------------------
     936/    1138 :                     
     937/    1138 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
     938/    1138 :                     
     939/    1138 :                     
     940/    1138 :                     SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
     941/    1138 : 4E71                		nop	
     942/    113A : 33FC 0100 00A1      		move.w	#$100,($A11100).l ; stop the Z80
             1140 : 1100             
     943/    1142 : 33FC 0100 00A1      		move.w	#$100,($A11200).l ; reset the Z80
             1148 : 1200             
     944/    114A : 41F9 0008 798C      		lea	(Kos_Z80).l,a0	; load sound driver
     945/    1150 : 43F9 00A0 0000      		lea	($A00000).l,a1
     946/    1156 : 6100 052A           		bsr.w	KosDec		; decompress
     947/    115A : 33FC 0000 00A1      		move.w	#0,($A11200).l
             1160 : 1200             
     948/    1162 : 4E71                		nop	
     949/    1164 : 4E71                		nop	
     950/    1166 : 4E71                		nop	
     951/    1168 : 4E71                		nop	
     952/    116A : 33FC 0100 00A1      		move.w	#$100,($A11200).l ; reset the Z80
             1170 : 1200             
     953/    1172 : 33FC 0000 00A1      		move.w	#0,($A11100).l	; start	the Z80
             1178 : 1100             
     954/    117A : 4E75                		rts	
     955/    117C :                     ; End of function SoundDriverLoad
     956/    117C :                     
     957/    117C :                     ; ---------------------------------------------------------------------------
     958/    117C :                     ; Subroutine to	play a sound or	music track
     959/    117C :                     ; ---------------------------------------------------------------------------
     960/    117C :                     
     961/    117C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
     962/    117C :                     
     963/    117C :                     
     964/    117C :                     PlaySound:
     965/    117C : 11C0 F00A           		move.b	d0,($FFFFF00A).w
     966/    1180 : 4E75                		rts	
     967/    1182 :                     ; End of function PlaySound
     968/    1182 :                     
     969/    1182 :                     ; ---------------------------------------------------------------------------
     970/    1182 :                     ; Subroutine to	play a special sound/music (E0-E4)
     971/    1182 :                     ;
     972/    1182 :                     ; E0 - Fade out
     973/    1182 :                     ; E1 - Sega
     974/    1182 :                     ; E2 - Speed up
     975/    1182 :                     ; E3 - Normal speed
     976/    1182 :                     ; E4 - Stop
     977/    1182 :                     ; ---------------------------------------------------------------------------
     978/    1182 :                     
     979/    1182 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
     980/    1182 :                     
     981/    1182 :                     
     982/    1182 :                     PlaySound_Special:
     983/    1182 : 11C0 F00B           		move.b	d0,($FFFFF00B).w
     984/    1186 : 4E75                		rts	
     985/    1188 :                     ; End of function PlaySound_Special
     986/    1188 :                     
     987/    1188 :                     ; ===========================================================================
     988/    1188 :                     ; ---------------------------------------------------------------------------
     989/    1188 :                     ; Unused sound/music subroutine
     990/    1188 :                     ; ---------------------------------------------------------------------------
     991/    1188 :                     
     992/    1188 :                     PlaySound_Unk:
     993/    1188 : 11C0 F00C           		move.b	d0,($FFFFF00C).w
     994/    118C : 4E75                		rts	
     995/    118E :                     
     996/    118E :                     ; ---------------------------------------------------------------------------
     997/    118E :                     ; Subroutine to	pause the game
     998/    118E :                     ; ---------------------------------------------------------------------------
     999/    118E :                     
    1000/    118E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1001/    118E :                     
    1002/    118E :                     
    1003/    118E :                     PauseGame:				; XREF: Level_MainLoop; et al
    1004/    118E : 4E71                		nop	
    1005/    1190 : 4A38 FE12           		tst.b	($FFFFFE12).w	; do you have any lives	left?
    1006/    1194 : 675A                		beq.s	Unpause		; if not, branch
    1007/    1196 : 4A78 F63A           		tst.w	($FFFFF63A).w	; is game already paused?
    1008/    119A : 6608                		bne.s	loc_13BE	; if yes, branch
    1009/    119C : 0838 0007 F605      		btst	#7,($FFFFF605).w ; is Start button pressed?
    1010/    11A2 : 6752                		beq.s	Pause_DoNothing	; if not, branch
    1011/    11A4 :                     
    1012/    11A4 :                     loc_13BE:
    1013/    11A4 : 31FC 0001 F63A      		move.w	#1,($FFFFF63A).w ; freeze time
    1014/    11AA : 11FC 0001 F003      		move.b	#1,($FFFFF003).w ; pause music
    1015/    11B0 :                     
    1016/    11B0 :                     loc_13CA:
    1017/    11B0 : 11FC 0010 F62A      		move.b	#$10,($FFFFF62A).w
    1018/    11B6 : 6100 15D6           		bsr.w	DelayProgram
    1019/    11BA : 4A38 FFE1           		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
    1020/    11BE : 6722                		beq.s	Pause_ChkStart	; if not, branch
    1021/    11C0 : 0838 0006 F605      		btst	#6,($FFFFF605).w ; is button A pressed?
    1022/    11C6 : 670A                		beq.s	Pause_ChkBC	; if not, branch
    1023/    11C8 : 11FC 0004 F600      		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
    1024/    11CE : 4E71                		nop	
    1025/    11D0 : 6018                		bra.s	loc_1404
    1026/    11D2 :                     ; ===========================================================================
    1027/    11D2 :                     
    1028/    11D2 :                     Pause_ChkBC:				; XREF: PauseGame
    1029/    11D2 : 0838 0004 F604      		btst	#4,($FFFFF604).w ; is button B pressed?
    1030/    11D8 : 661E                		bne.s	Pause_SlowMo	; if yes, branch
    1031/    11DA : 0838 0005 F605      		btst	#5,($FFFFF605).w ; is button C pressed?
    1032/    11E0 : 6616                		bne.s	Pause_SlowMo	; if yes, branch
    1033/    11E2 :                     
    1034/    11E2 :                     Pause_ChkStart:				; XREF: PauseGame
    1035/    11E2 : 0838 0007 F605      		btst	#7,($FFFFF605).w ; is Start button pressed?
    1036/    11E8 : 67C6                		beq.s	loc_13CA	; if not, branch
    1037/    11EA :                     
    1038/    11EA :                     loc_1404:				; XREF: PauseGame
    1039/    11EA : 11FC 0080 F003      		move.b	#$80,($FFFFF003).w
    1040/    11F0 :                     
    1041/    11F0 :                     Unpause:				; XREF: PauseGame
    1042/    11F0 : 31FC 0000 F63A      		move.w	#0,($FFFFF63A).w ; unpause the game
    1043/    11F6 :                     
    1044/    11F6 :                     Pause_DoNothing:			; XREF: PauseGame
    1045/    11F6 : 4E75                		rts	
    1046/    11F8 :                     ; ===========================================================================
    1047/    11F8 :                     
    1048/    11F8 :                     Pause_SlowMo:				; XREF: PauseGame
    1049/    11F8 : 31FC 0001 F63A      		move.w	#1,($FFFFF63A).w
    1050/    11FE : 11FC 0080 F003      		move.b	#$80,($FFFFF003).w
    1051/    1204 : 4E75                		rts	
    1052/    1206 :                     ; End of function PauseGame
    1053/    1206 :                     
    1054/    1206 :                     ; ---------------------------------------------------------------------------
    1055/    1206 :                     ; Subroutine to	display	patterns via the VDP
    1056/    1206 :                     ; ---------------------------------------------------------------------------
    1057/    1206 :                     
    1058/    1206 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1059/    1206 :                     
    1060/    1206 :                     
    1061/    1206 :                     ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
    1062/    1206 : 4DF9 00C0 0000      		lea	($C00000).l,a6
    1063/    120C : 283C 0080 0000      		move.l	#$800000,d4
    1064/    1212 :                     
    1065/    1212 :                     loc_142C:
    1066/    1212 : 2D40 0004           		move.l	d0,4(a6)
    1067/    1216 : 3601                		move.w	d1,d3
    1068/    1218 :                     
    1069/    1218 :                     loc_1432:
    1070/    1218 : 3C99                		move.w	(a1)+,(a6)
    1071/    121A : 51CB FFFC           		dbf	d3,loc_1432
    1072/    121E : D084                		add.l	d4,d0
    1073/    1220 : 51CA FFF0           		dbf	d2,loc_142C
    1074/    1224 : 4E75                		rts	
    1075/    1226 :                     ; End of function ShowVDPGraphics
    1076/    1226 :                     
    1077/    1226 :                     ; ---------------------------------------------------------------------------
    1078/    1226 :                     ; Nemesis decompression	algorithm
    1079/    1226 :                     ; ---------------------------------------------------------------------------
    1080/    1226 :                     
    1081/    1226 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1082/    1226 :                     
    1083/    1226 :                     
    1084/    1226 :                     NemDec:
    1085/    1226 : 48E7 FFDC           		movem.l	d0-a1/a3-a5,-(sp)
    1086/    122A : 47F9 0000 12E8      		lea	(loc_1502).l,a3
    1087/    1230 : 49F9 00C0 0000      		lea	($C00000).l,a4
    1088/    1236 : 600A                		bra.s	loc_145C
    1089/    1238 :                     ; ===========================================================================
    1090/    1238 : 48E7 FFDC           		movem.l	d0-a1/a3-a5,-(sp)
    1091/    123C : 47F9 0000 12FE      		lea	(loc_1518).l,a3
    1092/    1242 :                     
    1093/    1242 :                     loc_145C:				; XREF: NemDec
    1094/    1242 : 43F8 AA00           		lea	($FFFFAA00).w,a1
    1095/    1246 : 3418                		move.w	(a0)+,d2
    1096/    1248 : E34A                		lsl.w	#1,d2
    1097/    124A : 6404                		bcc.s	loc_146A
    1098/    124C : D6FC 000A           		adda.w	#$A,a3
    1099/    1250 :                     
    1100/    1250 :                     loc_146A:
    1101/    1250 : E54A                		lsl.w	#2,d2
    1102/    1252 : 3A42                		movea.w	d2,a5
    1103/    1254 : 7608                		moveq	#8,d3
    1104/    1256 : 7400                		moveq	#0,d2
    1105/    1258 : 7800                		moveq	#0,d4
    1106/    125A : 6100 00B8           		bsr.w	NemDec4
    1107/    125E : 1A18                		move.b	(a0)+,d5
    1108/    1260 : E145                		asl.w	#8,d5
    1109/    1262 : 1A18                		move.b	(a0)+,d5
    1110/    1264 : 3C3C 0010           		move.w	#$10,d6
    1111/    1268 : 6106                		bsr.s	NemDec2
    1112/    126A : 4CDF 3BFF           		movem.l	(sp)+,d0-a1/a3-a5
    1113/    126E : 4E75                		rts	
    1114/    1270 :                     ; End of function NemDec
    1115/    1270 :                     
    1116/    1270 :                     
    1117/    1270 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1118/    1270 :                     
    1119/    1270 :                     
    1120/    1270 :                     NemDec2:				; XREF: NemDec
    1121/    1270 : 3E06                		move.w	d6,d7
    1122/    1272 : 5147                		subq.w	#8,d7
    1123/    1274 : 3205                		move.w	d5,d1
    1124/    1276 : EE69                		lsr.w	d7,d1
    1125/    1278 : 0C01 00FC           		cmpi.b	#-4,d1
    1126/    127C : 643E                		bcc.s	loc_14D6
    1127/    127E : 0241 00FF           		andi.w	#$FF,d1
    1128/    1282 : D241                		add.w	d1,d1
    1129/    1284 : 1031 1000           		move.b	(a1,d1.w),d0
    1130/    1288 : 4880                		ext.w	d0
    1131/    128A : 9C40                		sub.w	d0,d6
    1132/    128C : 0C46 0009           		cmpi.w	#9,d6
    1133/    1290 : 6406                		bcc.s	loc_14B2
    1134/    1292 : 5046                		addq.w	#8,d6
    1135/    1294 : E145                		asl.w	#8,d5
    1136/    1296 : 1A18                		move.b	(a0)+,d5
    1137/    1298 :                     
    1138/    1298 :                     loc_14B2:
    1139/    1298 : 1231 1001           		move.b	1(a1,d1.w),d1
    1140/    129C : 3001                		move.w	d1,d0
    1141/    129E : 0241 000F           		andi.w	#$F,d1
    1142/    12A2 : 0240 00F0           		andi.w	#$F0,d0
    1143/    12A6 :                     
    1144/    12A6 :                     loc_14C0:				; XREF: NemDec3
    1145/    12A6 : E848                		lsr.w	#4,d0
    1146/    12A8 :                     
    1147/    12A8 :                     loc_14C2:				; XREF: NemDec3
    1148/    12A8 : E98C                		lsl.l	#4,d4
    1149/    12AA : 8801                		or.b	d1,d4
    1150/    12AC : 5343                		subq.w	#1,d3
    1151/    12AE : 6606                		bne.s	loc_14D0
    1152/    12B0 : 4ED3                		jmp	(a3)
    1153/    12B2 :                     ; End of function NemDec2
    1154/    12B2 :                     
    1155/    12B2 :                     
    1156/    12B2 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1157/    12B2 :                     
    1158/    12B2 :                     
    1159/    12B2 :                     NemDec3:				; XREF: loc_1502
    1160/    12B2 : 7800                		moveq	#0,d4
    1161/    12B4 : 7608                		moveq	#8,d3
    1162/    12B6 :                     
    1163/    12B6 :                     loc_14D0:				; XREF: NemDec2
    1164/    12B6 : 51C8 FFF0           		dbf	d0,loc_14C2
    1165/    12BA : 60B4                		bra.s	NemDec2
    1166/    12BC :                     ; ===========================================================================
    1167/    12BC :                     
    1168/    12BC :                     loc_14D6:				; XREF: NemDec2
    1169/    12BC : 5D46                		subq.w	#6,d6
    1170/    12BE : 0C46 0009           		cmpi.w	#9,d6
    1171/    12C2 : 6406                		bcc.s	loc_14E4
    1172/    12C4 : 5046                		addq.w	#8,d6
    1173/    12C6 : E145                		asl.w	#8,d5
    1174/    12C8 : 1A18                		move.b	(a0)+,d5
    1175/    12CA :                     
    1176/    12CA :                     loc_14E4:				; XREF: NemDec3
    1177/    12CA : 5F46                		subq.w	#7,d6
    1178/    12CC : 3205                		move.w	d5,d1
    1179/    12CE : EC69                		lsr.w	d6,d1
    1180/    12D0 : 3001                		move.w	d1,d0
    1181/    12D2 : 0241 000F           		andi.w	#$F,d1
    1182/    12D6 : 0240 0070           		andi.w	#$70,d0
    1183/    12DA : 0C46 0009           		cmpi.w	#9,d6
    1184/    12DE : 64C6                		bcc.s	loc_14C0
    1185/    12E0 : 5046                		addq.w	#8,d6
    1186/    12E2 : E145                		asl.w	#8,d5
    1187/    12E4 : 1A18                		move.b	(a0)+,d5
    1188/    12E6 : 60BE                		bra.s	loc_14C0
    1189/    12E8 :                     ; End of function NemDec3
    1190/    12E8 :                     
    1191/    12E8 :                     ; ===========================================================================
    1192/    12E8 :                     
    1193/    12E8 :                     loc_1502:				; XREF: NemDec
    1194/    12E8 : 2884                		move.l	d4,(a4)
    1195/    12EA : 534D                		subq.w	#1,a5
    1196/    12EC : 380D                		move.w	a5,d4
    1197/    12EE : 66C2                		bne.s	NemDec3
    1198/    12F0 : 4E75                		rts	
    1199/    12F2 :                     ; ===========================================================================
    1200/    12F2 : B982                		eor.l	d4,d2
    1201/    12F4 : 2882                		move.l	d2,(a4)
    1202/    12F6 : 534D                		subq.w	#1,a5
    1203/    12F8 : 380D                		move.w	a5,d4
    1204/    12FA : 66B6                		bne.s	NemDec3
    1205/    12FC : 4E75                		rts	
    1206/    12FE :                     ; ===========================================================================
    1207/    12FE :                     
    1208/    12FE :                     loc_1518:				; XREF: NemDec
    1209/    12FE : 28C4                		move.l	d4,(a4)+
    1210/    1300 : 534D                		subq.w	#1,a5
    1211/    1302 : 380D                		move.w	a5,d4
    1212/    1304 : 66AC                		bne.s	NemDec3
    1213/    1306 : 4E75                		rts	
    1214/    1308 :                     ; ===========================================================================
    1215/    1308 : B982                		eor.l	d4,d2
    1216/    130A : 28C2                		move.l	d2,(a4)+
    1217/    130C : 534D                		subq.w	#1,a5
    1218/    130E : 380D                		move.w	a5,d4
    1219/    1310 : 66A0                		bne.s	NemDec3
    1220/    1312 : 4E75                		rts	
    1221/    1314 :                     
    1222/    1314 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1223/    1314 :                     
    1224/    1314 :                     
    1225/    1314 :                     NemDec4:				; XREF: NemDec
    1226/    1314 : 1018                		move.b	(a0)+,d0
    1227/    1316 :                     
    1228/    1316 :                     loc_1530:
    1229/    1316 : 0C00 00FF           		cmpi.b	#-1,d0
    1230/    131A : 6602                		bne.s	loc_1538
    1231/    131C : 4E75                		rts	
    1232/    131E :                     ; ===========================================================================
    1233/    131E :                     
    1234/    131E :                     loc_1538:				; XREF: NemDec4
    1235/    131E : 3E00                		move.w	d0,d7
    1236/    1320 :                     
    1237/    1320 :                     loc_153A:
    1238/    1320 : 1018                		move.b	(a0)+,d0
    1239/    1322 : 0C00 0080           		cmpi.b	#$80,d0
    1240/    1326 : 64EE                		bcc.s	loc_1530
    1241/    1328 : 1200                		move.b	d0,d1
    1242/    132A : 0247 000F           		andi.w	#$F,d7
    1243/    132E : 0241 0070           		andi.w	#$70,d1
    1244/    1332 : 8E41                		or.w	d1,d7
    1245/    1334 : 0240 000F           		andi.w	#$F,d0
    1246/    1338 : 1200                		move.b	d0,d1
    1247/    133A : E149                		lsl.w	#8,d1
    1248/    133C : 8E41                		or.w	d1,d7
    1249/    133E : 7208                		moveq	#8,d1
    1250/    1340 : 9240                		sub.w	d0,d1
    1251/    1342 : 660A                		bne.s	loc_1568
    1252/    1344 : 1018                		move.b	(a0)+,d0
    1253/    1346 : D040                		add.w	d0,d0
    1254/    1348 : 3387 0000           		move.w	d7,(a1,d0.w)
    1255/    134C : 60D2                		bra.s	loc_153A
    1256/    134E :                     ; ===========================================================================
    1257/    134E :                     
    1258/    134E :                     loc_1568:				; XREF: NemDec4
    1259/    134E : 1018                		move.b	(a0)+,d0
    1260/    1350 : E368                		lsl.w	d1,d0
    1261/    1352 : D040                		add.w	d0,d0
    1262/    1354 : 7A01                		moveq	#1,d5
    1263/    1356 : E36D                		lsl.w	d1,d5
    1264/    1358 : 5345                		subq.w	#1,d5
    1265/    135A :                     
    1266/    135A :                     loc_1574:
    1267/    135A : 3387 0000           		move.w	d7,(a1,d0.w)
    1268/    135E : 5440                		addq.w	#2,d0
    1269/    1360 : 51CD FFF8           		dbf	d5,loc_1574
    1270/    1364 : 60BA                		bra.s	loc_153A
    1271/    1366 :                     ; End of function NemDec4
    1272/    1366 :                     
    1273/    1366 :                     ; ---------------------------------------------------------------------------
    1274/    1366 :                     ; Subroutine to	load pattern load cues
    1275/    1366 :                     ; ---------------------------------------------------------------------------
    1276/    1366 :                     
    1277/    1366 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1278/    1366 :                     
    1279/    1366 :                     
    1280/    1366 :                     LoadPLC:
    1281/    1366 : 48E7 0060           		movem.l	a1-a2,-(sp)
    1282/    136A : 43F9 0001 D66C      		lea	(ArtLoadCues).l,a1
    1283/    1370 : D040                		add.w	d0,d0
    1284/    1372 : 3031 0000           		move.w	(a1,d0.w),d0
    1285/    1376 : 43F1 0000           		lea	(a1,d0.w),a1
    1286/    137A : 45F8 F680           		lea	($FFFFF680).w,a2
    1287/    137E :                     
    1288/    137E :                     loc_1598:
    1289/    137E : 4A92                		tst.l	(a2)
    1290/    1380 : 6704                		beq.s	loc_15A0
    1291/    1382 : 5C4A                		addq.w	#6,a2
    1292/    1384 : 60F8                		bra.s	loc_1598
    1293/    1386 :                     ; ===========================================================================
    1294/    1386 :                     
    1295/    1386 :                     loc_15A0:				; XREF: LoadPLC
    1296/    1386 : 3019                		move.w	(a1)+,d0
    1297/    1388 : 6B08                		bmi.s	loc_15AC
    1298/    138A :                     
    1299/    138A :                     loc_15A4:
    1300/    138A : 24D9                		move.l	(a1)+,(a2)+
    1301/    138C : 34D9                		move.w	(a1)+,(a2)+
    1302/    138E : 51C8 FFFA           		dbf	d0,loc_15A4
    1303/    1392 :                     
    1304/    1392 :                     loc_15AC:
    1305/    1392 : 4CDF 0600           		movem.l	(sp)+,a1-a2
    1306/    1396 : 4E75                		rts	
    1307/    1398 :                     ; End of function LoadPLC
    1308/    1398 :                     
    1309/    1398 :                     
    1310/    1398 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1311/    1398 :                     
    1312/    1398 :                     
    1313/    1398 :                     LoadPLC2:
    1314/    1398 : 48E7 0060           		movem.l	a1-a2,-(sp)
    1315/    139C : 43F9 0001 D66C      		lea	(ArtLoadCues).l,a1
    1316/    13A2 : D040                		add.w	d0,d0
    1317/    13A4 : 3031 0000           		move.w	(a1,d0.w),d0
    1318/    13A8 : 43F1 0000           		lea	(a1,d0.w),a1
    1319/    13AC : 6116                		bsr.s	ClearPLC
    1320/    13AE : 45F8 F680           		lea	($FFFFF680).w,a2
    1321/    13B2 : 3019                		move.w	(a1)+,d0
    1322/    13B4 : 6B08                		bmi.s	loc_15D8
    1323/    13B6 :                     
    1324/    13B6 :                     loc_15D0:
    1325/    13B6 : 24D9                		move.l	(a1)+,(a2)+
    1326/    13B8 : 34D9                		move.w	(a1)+,(a2)+
    1327/    13BA : 51C8 FFFA           		dbf	d0,loc_15D0
    1328/    13BE :                     
    1329/    13BE :                     loc_15D8:
    1330/    13BE : 4CDF 0600           		movem.l	(sp)+,a1-a2
    1331/    13C2 : 4E75                		rts	
    1332/    13C4 :                     ; End of function LoadPLC2
    1333/    13C4 :                     
    1334/    13C4 :                     ; ---------------------------------------------------------------------------
    1335/    13C4 :                     ; Subroutine to	clear the pattern load cues
    1336/    13C4 :                     ; ---------------------------------------------------------------------------
    1337/    13C4 :                     
    1338/    13C4 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1339/    13C4 :                     
    1340/    13C4 :                     
    1341/    13C4 :                     ClearPLC:				; XREF: LoadPLC2
    1342/    13C4 : 45F8 F680           		lea	($FFFFF680).w,a2
    1343/    13C8 : 701F                		moveq	#$1F,d0
    1344/    13CA :                     
    1345/    13CA :                     ClearPLC_Loop:
    1346/    13CA : 429A                		clr.l	(a2)+
    1347/    13CC : 51C8 FFFC           		dbf	d0,ClearPLC_Loop
    1348/    13D0 : 4E75                		rts	
    1349/    13D2 :                     ; End of function ClearPLC
    1350/    13D2 :                     
    1351/    13D2 :                     ; ---------------------------------------------------------------------------
    1352/    13D2 :                     ; Subroutine to	use graphics listed in a pattern load cue
    1353/    13D2 :                     ; ---------------------------------------------------------------------------
    1354/    13D2 :                     
    1355/    13D2 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1356/    13D2 :                     
    1357/    13D2 :                     
    1358/    13D2 :                     RunPLC_RAM:				; XREF: Pal_FadeTo
    1359/    13D2 : 4AB8 F680           		tst.l	($FFFFF680).w
    1360/    13D6 : 674E                		beq.s	locret_1640
    1361/    13D8 : 4A78 F6F8           		tst.w	($FFFFF6F8).w
    1362/    13DC : 6648                		bne.s	locret_1640
    1363/    13DE : 2078 F680           		movea.l	($FFFFF680).w,a0
    1364/    13E2 : 47F9 0000 12E8      		lea	(loc_1502).l,a3
    1365/    13E8 : 43F8 AA00           		lea	($FFFFAA00).w,a1
    1366/    13EC : 3418                		move.w	(a0)+,d2
    1367/    13EE : 6A04                		bpl.s	loc_160E
    1368/    13F0 : D6FC 000A           		adda.w	#$A,a3
    1369/    13F4 :                     
    1370/    13F4 :                     loc_160E:
    1371/    13F4 : 0242 7FFF           		andi.w	#$7FFF,d2
    1372/    13F8 : 31C2 F6F8           		move.w	d2,($FFFFF6F8).w
    1373/    13FC : 6100 FF16           		bsr.w	NemDec4
    1374/    1400 : 1A18                		move.b	(a0)+,d5
    1375/    1402 : E145                		asl.w	#8,d5
    1376/    1404 : 1A18                		move.b	(a0)+,d5
    1377/    1406 : 7C10                		moveq	#$10,d6
    1378/    1408 : 7000                		moveq	#0,d0
    1379/    140A : 21C8 F680           		move.l	a0,($FFFFF680).w
    1380/    140E : 21CB F6E0           		move.l	a3,($FFFFF6E0).w
    1381/    1412 : 21C0 F6E4           		move.l	d0,($FFFFF6E4).w
    1382/    1416 : 21C0 F6E8           		move.l	d0,($FFFFF6E8).w
    1383/    141A : 21C0 F6EC           		move.l	d0,($FFFFF6EC).w
    1384/    141E : 21C5 F6F0           		move.l	d5,($FFFFF6F0).w
    1385/    1422 : 21C6 F6F4           		move.l	d6,($FFFFF6F4).w
    1386/    1426 :                     
    1387/    1426 :                     locret_1640:
    1388/    1426 : 4E75                		rts	
    1389/    1428 :                     ; End of function RunPLC_RAM
    1390/    1428 :                     
    1391/    1428 :                     
    1392/    1428 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1393/    1428 :                     
    1394/    1428 :                     
    1395/    1428 :                     sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
    1396/    1428 : 4A78 F6F8           		tst.w	($FFFFF6F8).w
    1397/    142C : 6700 0092           		beq.w	locret_16DA
    1398/    1430 : 31FC 0009 F6FA      		move.w	#9,($FFFFF6FA).w
    1399/    1436 : 7000                		moveq	#0,d0
    1400/    1438 : 3038 F684           		move.w	($FFFFF684).w,d0
    1401/    143C : 0678 0120 F684      		addi.w	#$120,($FFFFF684).w
    1402/    1442 : 6018                		bra.s	loc_1676
    1403/    1444 :                     ; End of function sub_1642
    1404/    1444 :                     
    1405/    1444 :                     
    1406/    1444 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1407/    1444 :                     
    1408/    1444 :                     
    1409/    1444 :                     sub_165E:				; XREF: Demo_Time
    1410/    1444 : 4A78 F6F8           		tst.w	($FFFFF6F8).w
    1411/    1448 : 6776                		beq.s	locret_16DA
    1412/    144A : 31FC 0003 F6FA      		move.w	#3,($FFFFF6FA).w
    1413/    1450 : 7000                		moveq	#0,d0
    1414/    1452 : 3038 F684           		move.w	($FFFFF684).w,d0
    1415/    1456 : 0678 0060 F684      		addi.w	#$60,($FFFFF684).w
    1416/    145C :                     
    1417/    145C :                     loc_1676:				; XREF: sub_1642
    1418/    145C : 49F9 00C0 0004      		lea	($C00004).l,a4
    1419/    1462 : E588                		lsl.l	#2,d0
    1420/    1464 : E448                		lsr.w	#2,d0
    1421/    1466 : 0040 4000           		ori.w	#$4000,d0
    1422/    146A : 4840                		swap	d0
    1423/    146C : 2880                		move.l	d0,(a4)
    1424/    146E : 594C                		subq.w	#4,a4
    1425/    1470 : 2078 F680           		movea.l	($FFFFF680).w,a0
    1426/    1474 : 2678 F6E0           		movea.l	($FFFFF6E0).w,a3
    1427/    1478 : 2038 F6E4           		move.l	($FFFFF6E4).w,d0
    1428/    147C : 2238 F6E8           		move.l	($FFFFF6E8).w,d1
    1429/    1480 : 2438 F6EC           		move.l	($FFFFF6EC).w,d2
    1430/    1484 : 2A38 F6F0           		move.l	($FFFFF6F0).w,d5
    1431/    1488 : 2C38 F6F4           		move.l	($FFFFF6F4).w,d6
    1432/    148C : 43F8 AA00           		lea	($FFFFAA00).w,a1
    1433/    1490 :                     
    1434/    1490 :                     loc_16AA:				; XREF: sub_165E
    1435/    1490 : 3A7C 0008           		movea.w	#8,a5
    1436/    1494 : 6100 FE1C           		bsr.w	NemDec3
    1437/    1498 : 5378 F6F8           		subq.w	#1,($FFFFF6F8).w
    1438/    149C : 6724                		beq.s	loc_16DC
    1439/    149E : 5378 F6FA           		subq.w	#1,($FFFFF6FA).w
    1440/    14A2 : 66EC                		bne.s	loc_16AA
    1441/    14A4 : 21C8 F680           		move.l	a0,($FFFFF680).w
    1442/    14A8 : 21CB F6E0           		move.l	a3,($FFFFF6E0).w
    1443/    14AC : 21C0 F6E4           		move.l	d0,($FFFFF6E4).w
    1444/    14B0 : 21C1 F6E8           		move.l	d1,($FFFFF6E8).w
    1445/    14B4 : 21C2 F6EC           		move.l	d2,($FFFFF6EC).w
    1446/    14B8 : 21C5 F6F0           		move.l	d5,($FFFFF6F0).w
    1447/    14BC : 21C6 F6F4           		move.l	d6,($FFFFF6F4).w
    1448/    14C0 :                     
    1449/    14C0 :                     locret_16DA:				; XREF: sub_1642
    1450/    14C0 : 4E75                		rts	
    1451/    14C2 :                     ; ===========================================================================
    1452/    14C2 :                     
    1453/    14C2 :                     loc_16DC:				; XREF: sub_165E
    1454/    14C2 : 41F8 F680           		lea	($FFFFF680).w,a0
    1455/    14C6 : 7015                		moveq	#$15,d0
    1456/    14C8 :                     
    1457/    14C8 :                     loc_16E2:				; XREF: sub_165E
    1458/    14C8 : 20E8 0006           		move.l	6(a0),(a0)+
    1459/    14CC : 51C8 FFFA           		dbf	d0,loc_16E2
    1460/    14D0 : 4E75                		rts	
    1461/    14D2 :                     ; End of function sub_165E
    1462/    14D2 :                     
    1463/    14D2 :                     ; ---------------------------------------------------------------------------
    1464/    14D2 :                     ; Subroutine to	execute	the pattern load cue
    1465/    14D2 :                     ; ---------------------------------------------------------------------------
    1466/    14D2 :                     
    1467/    14D2 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1468/    14D2 :                     
    1469/    14D2 :                     
    1470/    14D2 :                     RunPLC_ROM:
    1471/    14D2 : 43F9 0001 D66C      		lea	(ArtLoadCues).l,a1 ; load the PLC index
    1472/    14D8 : D040                		add.w	d0,d0
    1473/    14DA : 3031 0000           		move.w	(a1,d0.w),d0
    1474/    14DE : 43F1 0000           		lea	(a1,d0.w),a1
    1475/    14E2 : 3219                		move.w	(a1)+,d1	; load number of entries in the	PLC
    1476/    14E4 :                     
    1477/    14E4 :                     RunPLC_Loop:
    1478/    14E4 : 2059                		movea.l	(a1)+,a0	; get art pointer
    1479/    14E6 : 7000                		moveq	#0,d0
    1480/    14E8 : 3019                		move.w	(a1)+,d0	; get VRAM address
    1481/    14EA : E588                		lsl.l	#2,d0		; divide address by $20
    1482/    14EC : E448                		lsr.w	#2,d0
    1483/    14EE : 0040 4000           		ori.w	#$4000,d0
    1484/    14F2 : 4840                		swap	d0
    1485/    14F4 : 23C0 00C0 0004      		move.l	d0,($C00004).l	; put the VRAM address into VDP
    1486/    14FA : 6100 FD2A           		bsr.w	NemDec		; decompress
    1487/    14FE : 51C9 FFE4           		dbf	d1,RunPLC_Loop	; loop for number of entries
    1488/    1502 : 4E75                		rts	
    1489/    1504 :                     ; End of function RunPLC_ROM
    1490/    1504 :                     
    1491/    1504 :                     ; ---------------------------------------------------------------------------
    1492/    1504 :                     ; Enigma decompression algorithm
    1493/    1504 :                     ; ---------------------------------------------------------------------------
    1494/    1504 :                     
    1495/    1504 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1496/    1504 :                     
    1497/    1504 :                     
    1498/    1504 :                     EniDec:
    1499/    1504 : 48E7 FF7C           		movem.l	d0-d7/a1-a5,-(sp)
    1500/    1508 : 3640                		movea.w	d0,a3
    1501/    150A : 1018                		move.b	(a0)+,d0
    1502/    150C : 4880                		ext.w	d0
    1503/    150E : 3A40                		movea.w	d0,a5
    1504/    1510 : 1818                		move.b	(a0)+,d4
    1505/    1512 : E70C                		lsl.b	#3,d4
    1506/    1514 : 3458                		movea.w	(a0)+,a2
    1507/    1516 : D4CB                		adda.w	a3,a2
    1508/    1518 : 3858                		movea.w	(a0)+,a4
    1509/    151A : D8CB                		adda.w	a3,a4
    1510/    151C : 1A18                		move.b	(a0)+,d5
    1511/    151E : E145                		asl.w	#8,d5
    1512/    1520 : 1A18                		move.b	(a0)+,d5
    1513/    1522 : 7C10                		moveq	#$10,d6
    1514/    1524 :                     
    1515/    1524 :                     loc_173E:				; XREF: loc_1768
    1516/    1524 : 7007                		moveq	#7,d0
    1517/    1526 : 3E06                		move.w	d6,d7
    1518/    1528 : 9E40                		sub.w	d0,d7
    1519/    152A : 3205                		move.w	d5,d1
    1520/    152C : EE69                		lsr.w	d7,d1
    1521/    152E : 0241 007F           		andi.w	#$7F,d1
    1522/    1532 : 3401                		move.w	d1,d2
    1523/    1534 : 0C41 0040           		cmpi.w	#$40,d1
    1524/    1538 : 6404                		bcc.s	loc_1758
    1525/    153A : 7006                		moveq	#6,d0
    1526/    153C : E24A                		lsr.w	#1,d2
    1527/    153E :                     
    1528/    153E :                     loc_1758:
    1529/    153E : 6100 0132           		bsr.w	sub_188C
    1530/    1542 : 0242 000F           		andi.w	#$F,d2
    1531/    1546 : E849                		lsr.w	#4,d1
    1532/    1548 : D241                		add.w	d1,d1
    1533/    154A : 4EFB 104E           		jmp	loc_17B4(pc,d1.w)
    1534/    154E :                     ; End of function EniDec
    1535/    154E :                     
    1536/    154E :                     ; ===========================================================================
    1537/    154E :                     
    1538/    154E :                     loc_1768:				; XREF: loc_17B4
    1539/    154E : 32CA                		move.w	a2,(a1)+
    1540/    1550 : 524A                		addq.w	#1,a2
    1541/    1552 : 51CA FFFA           		dbf	d2,loc_1768
    1542/    1556 : 60CC                		bra.s	loc_173E
    1543/    1558 :                     ; ===========================================================================
    1544/    1558 :                     
    1545/    1558 :                     loc_1772:				; XREF: loc_17B4
    1546/    1558 : 32CC                		move.w	a4,(a1)+
    1547/    155A : 51CA FFFC           		dbf	d2,loc_1772
    1548/    155E : 60C4                		bra.s	loc_173E
    1549/    1560 :                     ; ===========================================================================
    1550/    1560 :                     
    1551/    1560 :                     loc_177A:				; XREF: loc_17B4
    1552/    1560 : 6100 0060           		bsr.w	loc_17DC
    1553/    1564 :                     
    1554/    1564 :                     loc_177E:
    1555/    1564 : 32C1                		move.w	d1,(a1)+
    1556/    1566 : 51CA FFFC           		dbf	d2,loc_177E
    1557/    156A : 60B8                		bra.s	loc_173E
    1558/    156C :                     ; ===========================================================================
    1559/    156C :                     
    1560/    156C :                     loc_1786:				; XREF: loc_17B4
    1561/    156C : 6100 0054           		bsr.w	loc_17DC
    1562/    1570 :                     
    1563/    1570 :                     loc_178A:
    1564/    1570 : 32C1                		move.w	d1,(a1)+
    1565/    1572 : 5241                		addq.w	#1,d1
    1566/    1574 : 51CA FFFA           		dbf	d2,loc_178A
    1567/    1578 : 60AA                		bra.s	loc_173E
    1568/    157A :                     ; ===========================================================================
    1569/    157A :                     
    1570/    157A :                     loc_1794:				; XREF: loc_17B4
    1571/    157A : 6100 0046           		bsr.w	loc_17DC
    1572/    157E :                     
    1573/    157E :                     loc_1798:
    1574/    157E : 32C1                		move.w	d1,(a1)+
    1575/    1580 : 5341                		subq.w	#1,d1
    1576/    1582 : 51CA FFFA           		dbf	d2,loc_1798
    1577/    1586 : 609C                		bra.s	loc_173E
    1578/    1588 :                     ; ===========================================================================
    1579/    1588 :                     
    1580/    1588 :                     loc_17A2:				; XREF: loc_17B4
    1581/    1588 : 0C42 000F           		cmpi.w	#$F,d2
    1582/    158C : 671C                		beq.s	loc_17C4
    1583/    158E :                     
    1584/    158E :                     loc_17A8:
    1585/    158E : 6100 0032           		bsr.w	loc_17DC
    1586/    1592 : 32C1                		move.w	d1,(a1)+
    1587/    1594 : 51CA FFF8           		dbf	d2,loc_17A8
    1588/    1598 : 608A                		bra.s	loc_173E
    1589/    159A :                     ; ===========================================================================
    1590/    159A :                     
    1591/    159A :                     loc_17B4:				; XREF: EniDec
    1592/    159A : 60B2                		bra.s	loc_1768
    1593/    159C :                     ; ===========================================================================
    1594/    159C : 60B0                		bra.s	loc_1768
    1595/    159E :                     ; ===========================================================================
    1596/    159E : 60B8                		bra.s	loc_1772
    1597/    15A0 :                     ; ===========================================================================
    1598/    15A0 : 60B6                		bra.s	loc_1772
    1599/    15A2 :                     ; ===========================================================================
    1600/    15A2 : 60BC                		bra.s	loc_177A
    1601/    15A4 :                     ; ===========================================================================
    1602/    15A4 : 60C6                		bra.s	loc_1786
    1603/    15A6 :                     ; ===========================================================================
    1604/    15A6 : 60D2                		bra.s	loc_1794
    1605/    15A8 :                     ; ===========================================================================
    1606/    15A8 : 60DE                		bra.s	loc_17A2
    1607/    15AA :                     ; ===========================================================================
    1608/    15AA :                     
    1609/    15AA :                     loc_17C4:				; XREF: loc_17A2
    1610/    15AA : 5348                		subq.w	#1,a0
    1611/    15AC : 0C46 0010           		cmpi.w	#$10,d6
    1612/    15B0 : 6602                		bne.s	loc_17CE
    1613/    15B2 : 5348                		subq.w	#1,a0
    1614/    15B4 :                     
    1615/    15B4 :                     loc_17CE:
    1616/    15B4 : 3008                		move.w	a0,d0
    1617/    15B6 : E248                		lsr.w	#1,d0
    1618/    15B8 : 6402                		bcc.s	loc_17D6
    1619/    15BA : 5248                		addq.w	#1,a0
    1620/    15BC :                     
    1621/    15BC :                     loc_17D6:
    1622/    15BC : 4CDF 3EFF           		movem.l	(sp)+,d0-d7/a1-a5
    1623/    15C0 : 4E75                		rts	
    1624/    15C2 :                     ; ===========================================================================
    1625/    15C2 :                     
    1626/    15C2 :                     loc_17DC:				; XREF: loc_17A2
    1627/    15C2 : 360B                		move.w	a3,d3
    1628/    15C4 : 1204                		move.b	d4,d1
    1629/    15C6 : D201                		add.b	d1,d1
    1630/    15C8 : 640A                		bcc.s	loc_17EE
    1631/    15CA : 5346                		subq.w	#1,d6
    1632/    15CC : 0D05                		btst	d6,d5
    1633/    15CE : 6704                		beq.s	loc_17EE
    1634/    15D0 : 0043 8000           		ori.w	#-$8000,d3
    1635/    15D4 :                     
    1636/    15D4 :                     loc_17EE:
    1637/    15D4 : D201                		add.b	d1,d1
    1638/    15D6 : 640A                		bcc.s	loc_17FC
    1639/    15D8 : 5346                		subq.w	#1,d6
    1640/    15DA : 0D05                		btst	d6,d5
    1641/    15DC : 6704                		beq.s	loc_17FC
    1642/    15DE : 0643 4000           		addi.w	#$4000,d3
    1643/    15E2 :                     
    1644/    15E2 :                     loc_17FC:
    1645/    15E2 : D201                		add.b	d1,d1
    1646/    15E4 : 640A                		bcc.s	loc_180A
    1647/    15E6 : 5346                		subq.w	#1,d6
    1648/    15E8 : 0D05                		btst	d6,d5
    1649/    15EA : 6704                		beq.s	loc_180A
    1650/    15EC : 0643 2000           		addi.w	#$2000,d3
    1651/    15F0 :                     
    1652/    15F0 :                     loc_180A:
    1653/    15F0 : D201                		add.b	d1,d1
    1654/    15F2 : 640A                		bcc.s	loc_1818
    1655/    15F4 : 5346                		subq.w	#1,d6
    1656/    15F6 : 0D05                		btst	d6,d5
    1657/    15F8 : 6704                		beq.s	loc_1818
    1658/    15FA : 0043 1000           		ori.w	#$1000,d3
    1659/    15FE :                     
    1660/    15FE :                     loc_1818:
    1661/    15FE : D201                		add.b	d1,d1
    1662/    1600 : 640A                		bcc.s	loc_1826
    1663/    1602 : 5346                		subq.w	#1,d6
    1664/    1604 : 0D05                		btst	d6,d5
    1665/    1606 : 6704                		beq.s	loc_1826
    1666/    1608 : 0043 0800           		ori.w	#$800,d3
    1667/    160C :                     
    1668/    160C :                     loc_1826:
    1669/    160C : 3205                		move.w	d5,d1
    1670/    160E : 3E06                		move.w	d6,d7
    1671/    1610 : 9E4D                		sub.w	a5,d7
    1672/    1612 : 6428                		bcc.s	loc_1856
    1673/    1614 : 3C07                		move.w	d7,d6
    1674/    1616 : 0646 0010           		addi.w	#$10,d6
    1675/    161A : 4447                		neg.w	d7
    1676/    161C : EF69                		lsl.w	d7,d1
    1677/    161E : 1A10                		move.b	(a0),d5
    1678/    1620 : EF3D                		rol.b	d7,d5
    1679/    1622 : DE47                		add.w	d7,d7
    1680/    1624 : CA7B 702A           		and.w	word_186C-2(pc,d7.w),d5
    1681/    1628 : D245                		add.w	d5,d1
    1682/    162A :                     
    1683/    162A :                     loc_1844:				; XREF: loc_1868
    1684/    162A : 300D                		move.w	a5,d0
    1685/    162C : D040                		add.w	d0,d0
    1686/    162E : C27B 0020           		and.w	word_186C-2(pc,d0.w),d1
    1687/    1632 : D243                		add.w	d3,d1
    1688/    1634 : 1A18                		move.b	(a0)+,d5
    1689/    1636 : E14D                		lsl.w	#8,d5
    1690/    1638 : 1A18                		move.b	(a0)+,d5
    1691/    163A : 4E75                		rts	
    1692/    163C :                     ; ===========================================================================
    1693/    163C :                     
    1694/    163C :                     loc_1856:				; XREF: loc_1826
    1695/    163C : 6710                		beq.s	loc_1868
    1696/    163E : EE69                		lsr.w	d7,d1
    1697/    1640 : 300D                		move.w	a5,d0
    1698/    1642 : D040                		add.w	d0,d0
    1699/    1644 : C27B 000A           		and.w	word_186C-2(pc,d0.w),d1
    1700/    1648 : D243                		add.w	d3,d1
    1701/    164A : 300D                		move.w	a5,d0
    1702/    164C : 6024                		bra.s	sub_188C
    1703/    164E :                     ; ===========================================================================
    1704/    164E :                     
    1705/    164E :                     loc_1868:				; XREF: loc_1856
    1706/    164E : 7C10                		moveq	#$10,d6
    1707/    1650 :                     
    1708/    1650 :                     loc_186A:
    1709/    1650 : 60D8                		bra.s	loc_1844
    1710/    1652 :                     ; ===========================================================================
    1711/    1652 : 0001 0003 0007      word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
             1658 : 000F 001F 003F 
             165E : 007F 00FF 01FF 
             1664 : 03FF 07FF          
    1712/    1668 : 0FFF 1FFF 3FFF      		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
             166E : 7FFF FFFF          
    1713/    1672 :                     
    1714/    1672 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1715/    1672 :                     
    1716/    1672 :                     
    1717/    1672 :                     sub_188C:				; XREF: EniDec
    1718/    1672 : 9C40                		sub.w	d0,d6
    1719/    1674 : 0C46 0009           		cmpi.w	#9,d6
    1720/    1678 : 6406                		bcc.s	locret_189A
    1721/    167A : 5046                		addq.w	#8,d6
    1722/    167C : E145                		asl.w	#8,d5
    1723/    167E : 1A18                		move.b	(a0)+,d5
    1724/    1680 :                     
    1725/    1680 :                     locret_189A:
    1726/    1680 : 4E75                		rts	
    1727/    1682 :                     ; End of function sub_188C
    1728/    1682 :                     
    1729/    1682 :                     ; ---------------------------------------------------------------------------
    1730/    1682 :                     ; Kosinski decompression algorithm
    1731/    1682 :                     ; ---------------------------------------------------------------------------
    1732/    1682 :                     
    1733/    1682 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1734/    1682 :                     
    1735/    1682 :                     
    1736/    1682 :                     KosDec:
    1737/    1682 :                     
    1738/    1682 : =$FFFFFFFFFFFFFFFE   var_2		= -2
    1739/    1682 : =$FFFFFFFFFFFFFFFF   var_1		= -1
    1740/    1682 :                     
    1741/    1682 : 558F                		subq.l	#2,sp
    1742/    1684 : 1F58 0001           		move.b	(a0)+,2+var_1(sp)
    1743/    1688 : 1E98                		move.b	(a0)+,(sp)
    1744/    168A : 3A17                		move.w	(sp),d5
    1745/    168C : 780F                		moveq	#$F,d4
    1746/    168E :                     
    1747/    168E :                     loc_18A8:
    1748/    168E : E24D                		lsr.w	#1,d5
    1749/    1690 : 40C6                		move	sr,d6
    1750/    1692 : 51CC 000C           		dbf	d4,loc_18BA
    1751/    1696 : 1F58 0001           		move.b	(a0)+,2+var_1(sp)
    1752/    169A : 1E98                		move.b	(a0)+,(sp)
    1753/    169C : 3A17                		move.w	(sp),d5
    1754/    169E : 780F                		moveq	#$F,d4
    1755/    16A0 :                     
    1756/    16A0 :                     loc_18BA:
    1757/    16A0 : 44C6                		move	d6,ccr
    1758/    16A2 : 6404                		bcc.s	loc_18C2
    1759/    16A4 : 12D8                		move.b	(a0)+,(a1)+
    1760/    16A6 : 60E6                		bra.s	loc_18A8
    1761/    16A8 :                     ; ===========================================================================
    1762/    16A8 :                     
    1763/    16A8 :                     loc_18C2:				; XREF: KosDec
    1764/    16A8 : 7600                		moveq	#0,d3
    1765/    16AA : E24D                		lsr.w	#1,d5
    1766/    16AC : 40C6                		move	sr,d6
    1767/    16AE : 51CC 000C           		dbf	d4,loc_18D6
    1768/    16B2 : 1F58 0001           		move.b	(a0)+,2+var_1(sp)
    1769/    16B6 : 1E98                		move.b	(a0)+,(sp)
    1770/    16B8 : 3A17                		move.w	(sp),d5
    1771/    16BA : 780F                		moveq	#$F,d4
    1772/    16BC :                     
    1773/    16BC :                     loc_18D6:
    1774/    16BC : 44C6                		move	d6,ccr
    1775/    16BE : 652C                		bcs.s	loc_1906
    1776/    16C0 : E24D                		lsr.w	#1,d5
    1777/    16C2 : 51CC 000C           		dbf	d4,loc_18EA
    1778/    16C6 : 1F58 0001           		move.b	(a0)+,2+var_1(sp)
    1779/    16CA : 1E98                		move.b	(a0)+,(sp)
    1780/    16CC : 3A17                		move.w	(sp),d5
    1781/    16CE : 780F                		moveq	#$F,d4
    1782/    16D0 :                     
    1783/    16D0 :                     loc_18EA:
    1784/    16D0 : E353                		roxl.w	#1,d3
    1785/    16D2 : E24D                		lsr.w	#1,d5
    1786/    16D4 : 51CC 000C           		dbf	d4,loc_18FC
    1787/    16D8 : 1F58 0001           		move.b	(a0)+,2+var_1(sp)
    1788/    16DC : 1E98                		move.b	(a0)+,(sp)
    1789/    16DE : 3A17                		move.w	(sp),d5
    1790/    16E0 : 780F                		moveq	#$F,d4
    1791/    16E2 :                     
    1792/    16E2 :                     loc_18FC:
    1793/    16E2 : E353                		roxl.w	#1,d3
    1794/    16E4 : 5243                		addq.w	#1,d3
    1795/    16E6 : 74FF                		moveq	#-1,d2
    1796/    16E8 : 1418                		move.b	(a0)+,d2
    1797/    16EA : 6016                		bra.s	loc_191C
    1798/    16EC :                     ; ===========================================================================
    1799/    16EC :                     
    1800/    16EC :                     loc_1906:				; XREF: loc_18C2
    1801/    16EC : 1018                		move.b	(a0)+,d0
    1802/    16EE : 1218                		move.b	(a0)+,d1
    1803/    16F0 : 74FF                		moveq	#-1,d2
    1804/    16F2 : 1401                		move.b	d1,d2
    1805/    16F4 : EB4A                		lsl.w	#5,d2
    1806/    16F6 : 1400                		move.b	d0,d2
    1807/    16F8 : 0241 0007           		andi.w	#7,d1
    1808/    16FC : 6710                		beq.s	loc_1928
    1809/    16FE : 1601                		move.b	d1,d3
    1810/    1700 : 5243                		addq.w	#1,d3
    1811/    1702 :                     
    1812/    1702 :                     loc_191C:
    1813/    1702 : 1031 2000           		move.b	(a1,d2.w),d0
    1814/    1706 : 12C0                		move.b	d0,(a1)+
    1815/    1708 : 51CB FFF8           		dbf	d3,loc_191C
    1816/    170C : 6080                		bra.s	loc_18A8
    1817/    170E :                     ; ===========================================================================
    1818/    170E :                     
    1819/    170E :                     loc_1928:				; XREF: loc_1906
    1820/    170E : 1218                		move.b	(a0)+,d1
    1821/    1710 : 670C                		beq.s	loc_1938
    1822/    1712 : 0C01 0001           		cmpi.b	#1,d1
    1823/    1716 : 6700 FF76           		beq.w	loc_18A8
    1824/    171A : 1601                		move.b	d1,d3
    1825/    171C : 60E4                		bra.s	loc_191C
    1826/    171E :                     ; ===========================================================================
    1827/    171E :                     
    1828/    171E :                     loc_1938:				; XREF: loc_1928
    1829/    171E : 548F                		addq.l	#2,sp
    1830/    1720 : 4E75                		rts	
    1831/    1722 :                     ; End of function KosDec
    1832/    1722 :                     
    1833/    1722 :                     ; ---------------------------------------------------------------------------
    1834/    1722 :                     ; Pallet cycling routine loading subroutine
    1835/    1722 :                     ; ---------------------------------------------------------------------------
    1836/    1722 :                     
    1837/    1722 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1838/    1722 :                     
    1839/    1722 :                     
    1840/    1722 :                     PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
    1841/    1722 : 7400                		moveq	#0,d2
    1842/    1724 : 7000                		moveq	#0,d0
    1843/    1726 : 1038 FE10           		move.b	($FFFFFE10).w,d0 ; get level number
    1844/    172A : D040                		add.w	d0,d0		; multiply by 2
    1845/    172C : 303B 0006           		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
    1846/    1730 : 4EFB 0002           		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
    1847/    1734 :                     ; End of function PalCycle_Load
    1848/    1734 :                     
    1849/    1734 :                     ; ===========================================================================
    1850/    1734 :                     ; ---------------------------------------------------------------------------
    1851/    1734 :                     ; Pallet cycling routines
    1852/    1734 :                     ; ---------------------------------------------------------------------------
    1853/    1734 : 0016                PalCycle:	dc.w PalCycle_GHZ-PalCycle
    1854/    1736 : 0044                		dc.w PalCycle_LZ-PalCycle
    1855/    1738 : 00F6                		dc.w PalCycle_MZ-PalCycle
    1856/    173A : 00F8                		dc.w PalCycle_SLZ-PalCycle
    1857/    173C : 0134                		dc.w PalCycle_SYZ-PalCycle
    1858/    173E : 017A                		dc.w PalCycle_SBZ-PalCycle
    1859/    1740 : 0016                		dc.w PalCycle_GHZ-PalCycle
    1860/    1742 :                     
    1861/    1742 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1862/    1742 :                     
    1863/    1742 :                     
    1864/    1742 :                     PalCycle_Title:				; XREF: TitleScreen
    1865/    1742 : 41F9 0000 194C      		lea	(Pal_TitleCyc).l,a0
    1866/    1748 : 6006                		bra.s	loc_196A
    1867/    174A :                     ; ===========================================================================
    1868/    174A :                     
    1869/    174A :                     PalCycle_GHZ:				; XREF: PalCycle
    1870/    174A : 41F9 0000 196C      		lea	(Pal_GHZCyc).l,a0
    1871/    1750 :                     
    1872/    1750 :                     loc_196A:				; XREF: PalCycle_Title
    1873/    1750 : 5378 F634           		subq.w	#1,($FFFFF634).w
    1874/    1754 : 6A20                		bpl.s	locret_1990
    1875/    1756 : 31FC 0005 F634      		move.w	#5,($FFFFF634).w
    1876/    175C : 3038 F632           		move.w	($FFFFF632).w,d0
    1877/    1760 : 5278 F632           		addq.w	#1,($FFFFF632).w
    1878/    1764 : 0240 0003           		andi.w	#3,d0
    1879/    1768 : E748                		lsl.w	#3,d0
    1880/    176A : 43F8 FB50           		lea	($FFFFFB50).w,a1
    1881/    176E : 22F0 0000           		move.l	(a0,d0.w),(a1)+
    1882/    1772 : 22B0 0004           		move.l	4(a0,d0.w),(a1)
    1883/    1776 :                     
    1884/    1776 :                     locret_1990:
    1885/    1776 : 4E75                		rts	
    1886/    1778 :                     ; End of function PalCycle_Title
    1887/    1778 :                     
    1888/    1778 :                     
    1889/    1778 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1890/    1778 :                     
    1891/    1778 :                     
    1892/    1778 :                     PalCycle_LZ:				; XREF: PalCycle
    1893/    1778 : 5378 F634           		subq.w	#1,($FFFFF634).w
    1894/    177C : 6A40                		bpl.s	loc_19D8
    1895/    177E : 31FC 0002 F634      		move.w	#2,($FFFFF634).w
    1896/    1784 : 3038 F632           		move.w	($FFFFF632).w,d0
    1897/    1788 : 5278 F632           		addq.w	#1,($FFFFF632).w
    1898/    178C : 0240 0003           		andi.w	#3,d0
    1899/    1790 : E748                		lsl.w	#3,d0
    1900/    1792 : 41F9 0000 198C      		lea	(Pal_LZCyc1).l,a0
    1901/    1798 : 0C38 0003 FE11      		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
    1902/    179E : 6606                		bne.s	loc_19C0
    1903/    17A0 : 41F9 0000 19D0      		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
    1904/    17A6 :                     
    1905/    17A6 :                     loc_19C0:
    1906/    17A6 : 43F8 FB56           		lea	($FFFFFB56).w,a1
    1907/    17AA : 22F0 0000           		move.l	(a0,d0.w),(a1)+
    1908/    17AE : 22B0 0004           		move.l	4(a0,d0.w),(a1)
    1909/    17B2 : 43F8 FAD6           		lea	($FFFFFAD6).w,a1
    1910/    17B6 : 22F0 0000           		move.l	(a0,d0.w),(a1)+
    1911/    17BA : 22B0 0004           		move.l	4(a0,d0.w),(a1)
    1912/    17BE :                     
    1913/    17BE :                     loc_19D8:
    1914/    17BE : 3038 FE04           		move.w	($FFFFFE04).w,d0
    1915/    17C2 : 0240 0007           		andi.w	#7,d0
    1916/    17C6 : 103B 005A           		move.b	byte_1A3C(pc,d0.w),d0
    1917/    17CA : 6754                		beq.s	locret_1A3A
    1918/    17CC : 7201                		moveq	#1,d1
    1919/    17CE : 4A38 F7C0           		tst.b	($FFFFF7C0).w
    1920/    17D2 : 6702                		beq.s	loc_19F0
    1921/    17D4 : 4441                		neg.w	d1
    1922/    17D6 :                     
    1923/    17D6 :                     loc_19F0:
    1924/    17D6 : 3038 F650           		move.w	($FFFFF650).w,d0
    1925/    17DA : 0240 0003           		andi.w	#3,d0
    1926/    17DE : D041                		add.w	d1,d0
    1927/    17E0 : 0C40 0003           		cmpi.w	#3,d0
    1928/    17E4 : 650A                		bcs.s	loc_1A0A
    1929/    17E6 : 3200                		move.w	d0,d1
    1930/    17E8 : 7000                		moveq	#0,d0
    1931/    17EA : 4A41                		tst.w	d1
    1932/    17EC : 6A02                		bpl.s	loc_1A0A
    1933/    17EE : 7002                		moveq	#2,d0
    1934/    17F0 :                     
    1935/    17F0 :                     loc_1A0A:
    1936/    17F0 : 31C0 F650           		move.w	d0,($FFFFF650).w
    1937/    17F4 : D040                		add.w	d0,d0
    1938/    17F6 : 3200                		move.w	d0,d1
    1939/    17F8 : D040                		add.w	d0,d0
    1940/    17FA : D041                		add.w	d1,d0
    1941/    17FC : 41F9 0000 19AC      		lea	(Pal_LZCyc2).l,a0
    1942/    1802 : 43F8 FB76           		lea	($FFFFFB76).w,a1
    1943/    1806 : 22F0 0000           		move.l	(a0,d0.w),(a1)+
    1944/    180A : 32B0 0004           		move.w	4(a0,d0.w),(a1)
    1945/    180E : 41F9 0000 19BE      		lea	(Pal_LZCyc3).l,a0
    1946/    1814 : 43F8 FAF6           		lea	($FFFFFAF6).w,a1
    1947/    1818 : 22F0 0000           		move.l	(a0,d0.w),(a1)+
    1948/    181C : 32B0 0004           		move.w	4(a0,d0.w),(a1)
    1949/    1820 :                     
    1950/    1820 :                     locret_1A3A:
    1951/    1820 : 4E75                		rts	
    1952/    1822 :                     ; End of function PalCycle_LZ
    1953/    1822 :                     
    1954/    1822 :                     ; ===========================================================================
    1955/    1822 : 0100 0001 0000      byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
             1828 : 0100             
    1956/    182A :                     ; ===========================================================================
    1957/    182A :                     
    1958/    182A :                     PalCycle_MZ:				; XREF: PalCycle
    1959/    182A : 4E75                		rts	
    1960/    182C :                     
    1961/    182C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1962/    182C :                     
    1963/    182C :                     
    1964/    182C :                     PalCycle_SLZ:				; XREF: PalCycle
    1965/    182C : 5378 F634           		subq.w	#1,($FFFFF634).w
    1966/    1830 : 6A34                		bpl.s	locret_1A80
    1967/    1832 : 31FC 0007 F634      		move.w	#7,($FFFFF634).w
    1968/    1838 : 3038 F632           		move.w	($FFFFF632).w,d0
    1969/    183C : 5240                		addq.w	#1,d0
    1970/    183E : 0C40 0006           		cmpi.w	#6,d0
    1971/    1842 : 6502                		bcs.s	loc_1A60
    1972/    1844 : 7000                		moveq	#0,d0
    1973/    1846 :                     
    1974/    1846 :                     loc_1A60:
    1975/    1846 : 31C0 F632           		move.w	d0,($FFFFF632).w
    1976/    184A : 3200                		move.w	d0,d1
    1977/    184C : D241                		add.w	d1,d1
    1978/    184E : D041                		add.w	d1,d0
    1979/    1850 : D040                		add.w	d0,d0
    1980/    1852 : 41F9 0000 1A38      		lea	(Pal_SLZCyc).l,a0
    1981/    1858 : 43F8 FB56           		lea	($FFFFFB56).w,a1
    1982/    185C : 32B0 0000           		move.w	(a0,d0.w),(a1)
    1983/    1860 : 2370 0002 0004      		move.l	2(a0,d0.w),4(a1)
    1984/    1866 :                     
    1985/    1866 :                     locret_1A80:
    1986/    1866 : 4E75                		rts	
    1987/    1868 :                     ; End of function PalCycle_SLZ
    1988/    1868 :                     
    1989/    1868 :                     
    1990/    1868 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    1991/    1868 :                     
    1992/    1868 :                     
    1993/    1868 :                     PalCycle_SYZ:				; XREF: PalCycle
    1994/    1868 : 5378 F634           		subq.w	#1,($FFFFF634).w
    1995/    186C : 6A3E                		bpl.s	locret_1AC6
    1996/    186E : 31FC 0005 F634      		move.w	#5,($FFFFF634).w
    1997/    1874 : 3038 F632           		move.w	($FFFFF632).w,d0
    1998/    1878 : 5278 F632           		addq.w	#1,($FFFFF632).w
    1999/    187C : 0240 0003           		andi.w	#3,d0
    2000/    1880 : E548                		lsl.w	#2,d0
    2001/    1882 : 3200                		move.w	d0,d1
    2002/    1884 : D040                		add.w	d0,d0
    2003/    1886 : 41F9 0000 1A5C      		lea	(Pal_SYZCyc1).l,a0
    2004/    188C : 43F8 FB6E           		lea	($FFFFFB6E).w,a1
    2005/    1890 : 22F0 0000           		move.l	(a0,d0.w),(a1)+
    2006/    1894 : 22B0 0004           		move.l	4(a0,d0.w),(a1)
    2007/    1898 : 41F9 0000 1A7C      		lea	(Pal_SYZCyc2).l,a0
    2008/    189E : 43F8 FB76           		lea	($FFFFFB76).w,a1
    2009/    18A2 : 32B0 1000           		move.w	(a0,d1.w),(a1)
    2010/    18A6 : 3370 1002 0004      		move.w	2(a0,d1.w),4(a1)
    2011/    18AC :                     
    2012/    18AC :                     locret_1AC6:
    2013/    18AC : 4E75                		rts	
    2014/    18AE :                     ; End of function PalCycle_SYZ
    2015/    18AE :                     
    2016/    18AE :                     
    2017/    18AE :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2018/    18AE :                     
    2019/    18AE :                     
    2020/    18AE :                     PalCycle_SBZ:				; XREF: PalCycle
    2021/    18AE : 45F9 0000 1A8C      		lea	(Pal_SBZCycList).l,a2
    2022/    18B4 : 4A38 FE11           		tst.b	($FFFFFE11).w
    2023/    18B8 : 6706                		beq.s	loc_1ADA
    2024/    18BA : 45F9 0000 1AC4      		lea	(Pal_SBZCycList2).l,a2
    2025/    18C0 :                     
    2026/    18C0 :                     loc_1ADA:
    2027/    18C0 : 43F8 F650           		lea	($FFFFF650).w,a1
    2028/    18C4 : 321A                		move.w	(a2)+,d1
    2029/    18C6 :                     
    2030/    18C6 :                     loc_1AE0:
    2031/    18C6 : 5311                		subq.b	#1,(a1)
    2032/    18C8 : 6B06                		bmi.s	loc_1AEA
    2033/    18CA : 5489                		addq.l	#2,a1
    2034/    18CC : 5C8A                		addq.l	#6,a2
    2035/    18CE : 601C                		bra.s	loc_1B06
    2036/    18D0 :                     ; ===========================================================================
    2037/    18D0 :                     
    2038/    18D0 :                     loc_1AEA:				; XREF: PalCycle_SBZ
    2039/    18D0 : 12DA                		move.b	(a2)+,(a1)+
    2040/    18D2 : 1011                		move.b	(a1),d0
    2041/    18D4 : 5200                		addq.b	#1,d0
    2042/    18D6 : B01A                		cmp.b	(a2)+,d0
    2043/    18D8 : 6502                		bcs.s	loc_1AF6
    2044/    18DA : 7000                		moveq	#0,d0
    2045/    18DC :                     
    2046/    18DC :                     loc_1AF6:
    2047/    18DC : 12C0                		move.b	d0,(a1)+
    2048/    18DE : 0240 000F           		andi.w	#$F,d0
    2049/    18E2 : D040                		add.w	d0,d0
    2050/    18E4 : 305A                		movea.w	(a2)+,a0
    2051/    18E6 : 365A                		movea.w	(a2)+,a3
    2052/    18E8 : 36B0 0000           		move.w	(a0,d0.w),(a3)
    2053/    18EC :                     
    2054/    18EC :                     loc_1B06:				; XREF: PalCycle_SBZ
    2055/    18EC : 51C9 FFD8           		dbf	d1,loc_1AE0
    2056/    18F0 : 5378 F634           		subq.w	#1,($FFFFF634).w
    2057/    18F4 : 6A54                		bpl.s	locret_1B64
    2058/    18F6 : 41F9 0000 1B20      		lea	(Pal_SBZCyc4).l,a0
    2059/    18FC : 31FC 0001 F634      		move.w	#1,($FFFFF634).w
    2060/    1902 : 4A38 FE11           		tst.b	($FFFFFE11).w
    2061/    1906 : 670C                		beq.s	loc_1B2E
    2062/    1908 : 41F9 0000 1B86      		lea	(Pal_SBZCyc10).l,a0
    2063/    190E : 31FC 0000 F634      		move.w	#0,($FFFFF634).w
    2064/    1914 :                     
    2065/    1914 :                     loc_1B2E:
    2066/    1914 : 72FF                		moveq	#-1,d1
    2067/    1916 : 4A38 F7C0           		tst.b	($FFFFF7C0).w
    2068/    191A : 6702                		beq.s	loc_1B38
    2069/    191C : 4441                		neg.w	d1
    2070/    191E :                     
    2071/    191E :                     loc_1B38:
    2072/    191E : 3038 F632           		move.w	($FFFFF632).w,d0
    2073/    1922 : 0240 0003           		andi.w	#3,d0
    2074/    1926 : D041                		add.w	d1,d0
    2075/    1928 : 0C40 0003           		cmpi.w	#3,d0
    2076/    192C : 650A                		bcs.s	loc_1B52
    2077/    192E : 3200                		move.w	d0,d1
    2078/    1930 : 7000                		moveq	#0,d0
    2079/    1932 : 4A41                		tst.w	d1
    2080/    1934 : 6A02                		bpl.s	loc_1B52
    2081/    1936 : 7002                		moveq	#2,d0
    2082/    1938 :                     
    2083/    1938 :                     loc_1B52:
    2084/    1938 : 31C0 F632           		move.w	d0,($FFFFF632).w
    2085/    193C : D040                		add.w	d0,d0
    2086/    193E : 43F8 FB58           		lea	($FFFFFB58).w,a1
    2087/    1942 : 22F0 0000           		move.l	(a0,d0.w),(a1)+
    2088/    1946 : 32B0 0004           		move.w	4(a0,d0.w),(a1)
    2089/    194A :                     
    2090/    194A :                     locret_1B64:
    2091/    194A : 4E75                		rts	
    2092/    194C :                     ; End of function PalCycle_SBZ
    2093/    194C :                     
    2094/    194C :                     ; ===========================================================================
    2095/    194C :                     Pal_TitleCyc:	binclude	"_binary-files/palletes/c_title.bin"
    2096/    196C :                     Pal_GHZCyc:	binclude	"_binary-files/palletes/c_ghz.bin"
    2097/    198C :                     Pal_LZCyc1:	binclude	"_binary-files/palletes/c_lz_wat.bin"	; waterfalls pallet
    2098/    19AC :                     Pal_LZCyc2:	binclude	"_binary-files/palletes/c_lz_bel.bin"	; conveyor belt pallet
    2099/    19BE :                     Pal_LZCyc3:	binclude	"_binary-files/palletes/c_lz_buw.bin"	; conveyor belt (underwater) pallet
    2100/    19D0 :                     Pal_SBZ3Cyc1:	binclude	"_binary-files/palletes/c_sbz3_w.bin"	; waterfalls pallet
    2101/    1A38 :                     Pal_SLZCyc:	binclude	"_binary-files/palletes/c_slz.bin"
    2102/    1A5C :                     Pal_SYZCyc1:	binclude	"_binary-files/palletes/c_syz_1.bin"
    2103/    1A7C :                     Pal_SYZCyc2:	binclude	"_binary-files/palletes/c_syz_2.bin"
    2104/    1A8C :                     
    2105/    1A8C :                     Pal_SBZCycList:
    2106/    1A8C :                     	include "_includes-ASM/SBZ pallet script 1.asm"
(1)    1/    1A8C :                     ; ---------------------------------------------------------------------------
(1)    2/    1A8C :                     ; Scrap Brain Zone 1 pallet cycling script
(1)    3/    1A8C :                     ; ---------------------------------------------------------------------------
(1)    4/    1A8C : 0008                	dc.w 8			; number of entries - 1
(1)    5/    1A8E : 0708                	dc.b 7,	8		; duration in frames, number of	colours
(1)    6/    1A90 : 1AF0                	dc.w Pal_SBZCyc1	; pallet pointer
(1)    7/    1A92 : FB50                	dc.w $FB50		; RAM address
(1)    8/    1A94 : 0D08                	dc.b $D, 8
(1)    9/    1A96 : 1B00                	dc.w Pal_SBZCyc2
(1)   10/    1A98 : FB52                	dc.w $FB52
(1)   11/    1A9A : 0E08                	dc.b $E, 8
(1)   12/    1A9C : 1B10                	dc.w Pal_SBZCyc3
(1)   13/    1A9E : FB6E                	dc.w $FB6E
(1)   14/    1AA0 : 0B08                	dc.b $B, 8
(1)   15/    1AA2 : 1B2C                	dc.w Pal_SBZCyc5
(1)   16/    1AA4 : FB70                	dc.w $FB70
(1)   17/    1AA6 : 0708                	dc.b 7,	8
(1)   18/    1AA8 : 1B3C                	dc.w Pal_SBZCyc6
(1)   19/    1AAA : FB72                	dc.w $FB72
(1)   20/    1AAC : 1C10                	dc.b $1C, $10
(1)   21/    1AAE : 1B4C                	dc.w Pal_SBZCyc7
(1)   22/    1AB0 : FB7E                	dc.w $FB7E
(1)   23/    1AB2 : 0303                	dc.b 3,	3
(1)   24/    1AB4 : 1B6C                	dc.w Pal_SBZCyc8
(1)   25/    1AB6 : FB78                	dc.w $FB78
(1)   26/    1AB8 : 0303                	dc.b 3,	3
(1)   27/    1ABA : 1B6E                	dc.w Pal_SBZCyc8+2
(1)   28/    1ABC : FB7A                	dc.w $FB7A
(1)   29/    1ABE : 0303                	dc.b 3,	3
(1)   30/    1AC0 : 1B70                	dc.w Pal_SBZCyc8+4
(1)   31/    1AC2 : FB7C                	dc.w $FB7C
(1)   32/    1AC4 : (MACRO)              	even
    2107/    1AC4 :                     
    2108/    1AC4 :                     Pal_SBZCycList2:
    2109/    1AC4 :                     	include "_includes-ASM/SBZ pallet script 2.asm"
(1)    1/    1AC4 :                     ; ---------------------------------------------------------------------------
(1)    2/    1AC4 :                     ; Scrap Brain Zone 2 pallet cycling script
(1)    3/    1AC4 :                     ; ---------------------------------------------------------------------------
(1)    4/    1AC4 : 0006                	dc.w 6
(1)    5/    1AC6 : 0708                	dc.b 7,	8
(1)    6/    1AC8 : 1AF0                	dc.w Pal_SBZCyc1
(1)    7/    1ACA : FB50                	dc.w $FB50
(1)    8/    1ACC : 0D08                	dc.b $D, 8
(1)    9/    1ACE : 1B00                	dc.w Pal_SBZCyc2
(1)   10/    1AD0 : FB52                	dc.w $FB52
(1)   11/    1AD2 : 0908                	dc.b 9,	8
(1)   12/    1AD4 : 1B76                	dc.w Pal_SBZCyc9
(1)   13/    1AD6 : FB70                	dc.w $FB70
(1)   14/    1AD8 : 0708                	dc.b 7,	8
(1)   15/    1ADA : 1B3C                	dc.w Pal_SBZCyc6
(1)   16/    1ADC : FB72                	dc.w $FB72
(1)   17/    1ADE : 0303                	dc.b 3,	3
(1)   18/    1AE0 : 1B6C                	dc.w Pal_SBZCyc8
(1)   19/    1AE2 : FB78                	dc.w $FB78
(1)   20/    1AE4 : 0303                	dc.b 3,	3
(1)   21/    1AE6 : 1B6E                	dc.w Pal_SBZCyc8+2
(1)   22/    1AE8 : FB7A                	dc.w $FB7A
(1)   23/    1AEA : 0303                	dc.b 3,	3
(1)   24/    1AEC : 1B70                	dc.w Pal_SBZCyc8+4
(1)   25/    1AEE : FB7C                	dc.w $FB7C
(1)   26/    1AF0 : (MACRO)              	even
    2110/    1AF0 :                     
    2111/    1AF0 :                     Pal_SBZCyc1:	binclude	"_binary-files/palletes/c_sbz_1.bin"
    2112/    1B00 :                     Pal_SBZCyc2:	binclude	"_binary-files/palletes/c_sbz_2.bin"
    2113/    1B10 :                     Pal_SBZCyc3:	binclude	"_binary-files/palletes/c_sbz_3.bin"
    2114/    1B20 :                     Pal_SBZCyc4:	binclude	"_binary-files/palletes/c_sbz_4.bin"
    2115/    1B2C :                     Pal_SBZCyc5:	binclude	"_binary-files/palletes/c_sbz_5.bin"
    2116/    1B3C :                     Pal_SBZCyc6:	binclude	"_binary-files/palletes/c_sbz_6.bin"
    2117/    1B4C :                     Pal_SBZCyc7:	binclude	"_binary-files/palletes/c_sbz_7.bin"
    2118/    1B6C :                     Pal_SBZCyc8:	binclude	"_binary-files/palletes/c_sbz_8.bin"
    2119/    1B76 :                     Pal_SBZCyc9:	binclude	"_binary-files/palletes/c_sbz_9.bin"
    2120/    1B86 :                     Pal_SBZCyc10:	binclude	"_binary-files/palletes/c_sbz_10.bin"
    2121/    1B92 :                     ; ---------------------------------------------------------------------------
    2122/    1B92 :                     ; Subroutine to	fade out and fade in
    2123/    1B92 :                     ; ---------------------------------------------------------------------------
    2124/    1B92 :                     
    2125/    1B92 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2126/    1B92 :                     
    2127/    1B92 :                     
    2128/    1B92 :                     Pal_FadeTo:
    2129/    1B92 : 31FC 003F F626      		move.w	#$3F,($FFFFF626).w
    2130/    1B98 :                     
    2131/    1B98 :                     Pal_FadeTo2:
    2132/    1B98 : 7000                		moveq	#0,d0
    2133/    1B9A : 41F8 FB00           		lea	($FFFFFB00).w,a0
    2134/    1B9E : 1038 F626           		move.b	($FFFFF626).w,d0
    2135/    1BA2 : D0C0                		adda.w	d0,a0
    2136/    1BA4 : 7200                		moveq	#0,d1
    2137/    1BA6 : 1038 F627           		move.b	($FFFFF627).w,d0
    2138/    1BAA :                     
    2139/    1BAA :                     Pal_ToBlack:
    2140/    1BAA : 30C1                		move.w	d1,(a0)+
    2141/    1BAC : 51C8 FFFC           		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
    2142/    1BB0 :                     
    2143/    1BB0 : 383C 0015           		move.w	#$15,d4
    2144/    1BB4 :                     
    2145/    1BB4 :                     loc_1DCE:
    2146/    1BB4 : 11FC 0012 F62A      		move.b	#$12,($FFFFF62A).w
    2147/    1BBA : 6100 0BD2           		bsr.w	DelayProgram
    2148/    1BBE : 610A                		bsr.s	Pal_FadeIn
    2149/    1BC0 : 6100 F810           		bsr.w	RunPLC_RAM
    2150/    1BC4 : 51CC FFEE           		dbf	d4,loc_1DCE
    2151/    1BC8 : 4E75                		rts	
    2152/    1BCA :                     ; End of function Pal_FadeTo
    2153/    1BCA :                     
    2154/    1BCA :                     ; ---------------------------------------------------------------------------
    2155/    1BCA :                     ; Pallet fade-in subroutine
    2156/    1BCA :                     ; ---------------------------------------------------------------------------
    2157/    1BCA :                     
    2158/    1BCA :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2159/    1BCA :                     
    2160/    1BCA :                     
    2161/    1BCA :                     Pal_FadeIn:				; XREF: Pal_FadeTo
    2162/    1BCA : 7000                		moveq	#0,d0
    2163/    1BCC : 41F8 FB00           		lea	($FFFFFB00).w,a0
    2164/    1BD0 : 43F8 FB80           		lea	($FFFFFB80).w,a1
    2165/    1BD4 : 1038 F626           		move.b	($FFFFF626).w,d0
    2166/    1BD8 : D0C0                		adda.w	d0,a0
    2167/    1BDA : D2C0                		adda.w	d0,a1
    2168/    1BDC : 1038 F627           		move.b	($FFFFF627).w,d0
    2169/    1BE0 :                     
    2170/    1BE0 :                     loc_1DFA:
    2171/    1BE0 : 612A                		bsr.s	Pal_AddColor
    2172/    1BE2 : 51C8 FFFC           		dbf	d0,loc_1DFA
    2173/    1BE6 : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w
    2174/    1BEC : 661C                		bne.s	locret_1E24
    2175/    1BEE : 7000                		moveq	#0,d0
    2176/    1BF0 : 41F8 FA80           		lea	($FFFFFA80).w,a0
    2177/    1BF4 : 43F8 FA00           		lea	($FFFFFA00).w,a1
    2178/    1BF8 : 1038 F626           		move.b	($FFFFF626).w,d0
    2179/    1BFC : D0C0                		adda.w	d0,a0
    2180/    1BFE : D2C0                		adda.w	d0,a1
    2181/    1C00 : 1038 F627           		move.b	($FFFFF627).w,d0
    2182/    1C04 :                     
    2183/    1C04 :                     loc_1E1E:
    2184/    1C04 : 6106                		bsr.s	Pal_AddColor
    2185/    1C06 : 51C8 FFFC           		dbf	d0,loc_1E1E
    2186/    1C0A :                     
    2187/    1C0A :                     locret_1E24:
    2188/    1C0A : 4E75                		rts	
    2189/    1C0C :                     ; End of function Pal_FadeIn
    2190/    1C0C :                     
    2191/    1C0C :                     
    2192/    1C0C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2193/    1C0C :                     
    2194/    1C0C :                     
    2195/    1C0C :                     Pal_AddColor:				; XREF: Pal_FadeIn
    2196/    1C0C : 3419                		move.w	(a1)+,d2
    2197/    1C0E : 3610                		move.w	(a0),d3
    2198/    1C10 : B642                		cmp.w	d2,d3
    2199/    1C12 : 6720                		beq.s	loc_1E4E
    2200/    1C14 : 3203                		move.w	d3,d1
    2201/    1C16 : 0641 0200           		addi.w	#$200,d1	; increase blue	value
    2202/    1C1A : B242                		cmp.w	d2,d1		; has blue reached threshold level?
    2203/    1C1C : 6204                		bhi.s	Pal_AddGreen	; if yes, branch
    2204/    1C1E : 30C1                		move.w	d1,(a0)+	; update pallet
    2205/    1C20 : 4E75                		rts	
    2206/    1C22 :                     ; ===========================================================================
    2207/    1C22 :                     
    2208/    1C22 :                     Pal_AddGreen:				; XREF: Pal_AddColor
    2209/    1C22 : 3203                		move.w	d3,d1
    2210/    1C24 : 0641 0020           		addi.w	#$20,d1		; increase green value
    2211/    1C28 : B242                		cmp.w	d2,d1
    2212/    1C2A : 6204                		bhi.s	Pal_AddRed
    2213/    1C2C : 30C1                		move.w	d1,(a0)+	; update pallet
    2214/    1C2E : 4E75                		rts	
    2215/    1C30 :                     ; ===========================================================================
    2216/    1C30 :                     
    2217/    1C30 :                     Pal_AddRed:				; XREF: Pal_AddGreen
    2218/    1C30 : 5458                		addq.w	#2,(a0)+	; increase red value
    2219/    1C32 : 4E75                		rts	
    2220/    1C34 :                     ; ===========================================================================
    2221/    1C34 :                     
    2222/    1C34 :                     loc_1E4E:				; XREF: Pal_AddColor
    2223/    1C34 : 5448                		addq.w	#2,a0
    2224/    1C36 : 4E75                		rts	
    2225/    1C38 :                     ; End of function Pal_AddColor
    2226/    1C38 :                     
    2227/    1C38 :                     
    2228/    1C38 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2229/    1C38 :                     
    2230/    1C38 :                     
    2231/    1C38 :                     Pal_FadeFrom:
    2232/    1C38 : 31FC 003F F626      		move.w	#$3F,($FFFFF626).w
    2233/    1C3E : 383C 0015           		move.w	#$15,d4
    2234/    1C42 :                     
    2235/    1C42 :                     loc_1E5C:
    2236/    1C42 : 11FC 0012 F62A      		move.b	#$12,($FFFFF62A).w
    2237/    1C48 : 6100 0B44           		bsr.w	DelayProgram
    2238/    1C4C : 610A                		bsr.s	Pal_FadeOut
    2239/    1C4E : 6100 F782           		bsr.w	RunPLC_RAM
    2240/    1C52 : 51CC FFEE           		dbf	d4,loc_1E5C
    2241/    1C56 : 4E75                		rts	
    2242/    1C58 :                     ; End of function Pal_FadeFrom
    2243/    1C58 :                     
    2244/    1C58 :                     ; ---------------------------------------------------------------------------
    2245/    1C58 :                     ; Pallet fade-out subroutine
    2246/    1C58 :                     ; ---------------------------------------------------------------------------
    2247/    1C58 :                     
    2248/    1C58 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2249/    1C58 :                     
    2250/    1C58 :                     
    2251/    1C58 :                     Pal_FadeOut:				; XREF: Pal_FadeFrom
    2252/    1C58 : 7000                		moveq	#0,d0
    2253/    1C5A : 41F8 FB00           		lea	($FFFFFB00).w,a0
    2254/    1C5E : 1038 F626           		move.b	($FFFFF626).w,d0
    2255/    1C62 : D0C0                		adda.w	d0,a0
    2256/    1C64 : 1038 F627           		move.b	($FFFFF627).w,d0
    2257/    1C68 :                     
    2258/    1C68 :                     loc_1E82:
    2259/    1C68 : 611C                		bsr.s	Pal_DecColor
    2260/    1C6A : 51C8 FFFC           		dbf	d0,loc_1E82
    2261/    1C6E :                     
    2262/    1C6E : 7000                		moveq	#0,d0
    2263/    1C70 : 41F8 FA80           		lea	($FFFFFA80).w,a0
    2264/    1C74 : 1038 F626           		move.b	($FFFFF626).w,d0
    2265/    1C78 : D0C0                		adda.w	d0,a0
    2266/    1C7A : 1038 F627           		move.b	($FFFFF627).w,d0
    2267/    1C7E :                     
    2268/    1C7E :                     loc_1E98:
    2269/    1C7E : 6106                		bsr.s	Pal_DecColor
    2270/    1C80 : 51C8 FFFC           		dbf	d0,loc_1E98
    2271/    1C84 : 4E75                		rts	
    2272/    1C86 :                     ; End of function Pal_FadeOut
    2273/    1C86 :                     
    2274/    1C86 :                     
    2275/    1C86 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2276/    1C86 :                     
    2277/    1C86 :                     
    2278/    1C86 :                     Pal_DecColor:				; XREF: Pal_FadeOut
    2279/    1C86 : 3410                		move.w	(a0),d2
    2280/    1C88 : 6728                		beq.s	loc_1ECC
    2281/    1C8A : 3202                		move.w	d2,d1
    2282/    1C8C : 0241 000E           		andi.w	#$E,d1
    2283/    1C90 : 6704                		beq.s	Pal_DecGreen
    2284/    1C92 : 5558                		subq.w	#2,(a0)+	; decrease red value
    2285/    1C94 : 4E75                		rts	
    2286/    1C96 :                     ; ===========================================================================
    2287/    1C96 :                     
    2288/    1C96 :                     Pal_DecGreen:				; XREF: Pal_DecColor
    2289/    1C96 : 3202                		move.w	d2,d1
    2290/    1C98 : 0241 00E0           		andi.w	#$E0,d1
    2291/    1C9C : 6706                		beq.s	Pal_DecBlue
    2292/    1C9E : 0458 0020           		subi.w	#$20,(a0)+	; decrease green value
    2293/    1CA2 : 4E75                		rts	
    2294/    1CA4 :                     ; ===========================================================================
    2295/    1CA4 :                     
    2296/    1CA4 :                     Pal_DecBlue:				; XREF: Pal_DecGreen
    2297/    1CA4 : 3202                		move.w	d2,d1
    2298/    1CA6 : 0241 0E00           		andi.w	#$E00,d1
    2299/    1CAA : 6706                		beq.s	loc_1ECC
    2300/    1CAC : 0458 0200           		subi.w	#$200,(a0)+	; decrease blue	value
    2301/    1CB0 : 4E75                		rts	
    2302/    1CB2 :                     ; ===========================================================================
    2303/    1CB2 :                     
    2304/    1CB2 :                     loc_1ECC:				; XREF: Pal_DecColor
    2305/    1CB2 : 5448                		addq.w	#2,a0
    2306/    1CB4 : 4E75                		rts	
    2307/    1CB6 :                     ; End of function Pal_DecColor
    2308/    1CB6 :                     
    2309/    1CB6 :                     ; ---------------------------------------------------------------------------
    2310/    1CB6 :                     ; Subroutine to	fill the pallet	with white (special stage)
    2311/    1CB6 :                     ; ---------------------------------------------------------------------------
    2312/    1CB6 :                     
    2313/    1CB6 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2314/    1CB6 :                     
    2315/    1CB6 :                     
    2316/    1CB6 :                     Pal_MakeWhite:				; XREF: SpecialStage
    2317/    1CB6 : 31FC 003F F626      		move.w	#$3F,($FFFFF626).w
    2318/    1CBC : 7000                		moveq	#0,d0
    2319/    1CBE : 41F8 FB00           		lea	($FFFFFB00).w,a0
    2320/    1CC2 : 1038 F626           		move.b	($FFFFF626).w,d0
    2321/    1CC6 : D0C0                		adda.w	d0,a0
    2322/    1CC8 : 323C 0EEE           		move.w	#$EEE,d1
    2323/    1CCC : 1038 F627           		move.b	($FFFFF627).w,d0
    2324/    1CD0 :                     
    2325/    1CD0 :                     PalWhite_Loop:
    2326/    1CD0 : 30C1                		move.w	d1,(a0)+
    2327/    1CD2 : 51C8 FFFC           		dbf	d0,PalWhite_Loop
    2328/    1CD6 : 383C 0015           		move.w	#$15,d4
    2329/    1CDA :                     
    2330/    1CDA :                     loc_1EF4:
    2331/    1CDA : 11FC 0012 F62A      		move.b	#$12,($FFFFF62A).w
    2332/    1CE0 : 6100 0AAC           		bsr.w	DelayProgram
    2333/    1CE4 : 610A                		bsr.s	Pal_WhiteToBlack
    2334/    1CE6 : 6100 F6EA           		bsr.w	RunPLC_RAM
    2335/    1CEA : 51CC FFEE           		dbf	d4,loc_1EF4
    2336/    1CEE : 4E75                		rts	
    2337/    1CF0 :                     ; End of function Pal_MakeWhite
    2338/    1CF0 :                     
    2339/    1CF0 :                     
    2340/    1CF0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2341/    1CF0 :                     
    2342/    1CF0 :                     
    2343/    1CF0 :                     Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
    2344/    1CF0 : 7000                		moveq	#0,d0
    2345/    1CF2 : 41F8 FB00           		lea	($FFFFFB00).w,a0
    2346/    1CF6 : 43F8 FB80           		lea	($FFFFFB80).w,a1
    2347/    1CFA : 1038 F626           		move.b	($FFFFF626).w,d0
    2348/    1CFE : D0C0                		adda.w	d0,a0
    2349/    1D00 : D2C0                		adda.w	d0,a1
    2350/    1D02 : 1038 F627           		move.b	($FFFFF627).w,d0
    2351/    1D06 :                     
    2352/    1D06 :                     loc_1F20:
    2353/    1D06 : 612A                		bsr.s	Pal_DecColor2
    2354/    1D08 : 51C8 FFFC           		dbf	d0,loc_1F20
    2355/    1D0C :                     
    2356/    1D0C : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w
    2357/    1D12 : 661C                		bne.s	locret_1F4A
    2358/    1D14 : 7000                		moveq	#0,d0
    2359/    1D16 : 41F8 FA80           		lea	($FFFFFA80).w,a0
    2360/    1D1A : 43F8 FA00           		lea	($FFFFFA00).w,a1
    2361/    1D1E : 1038 F626           		move.b	($FFFFF626).w,d0
    2362/    1D22 : D0C0                		adda.w	d0,a0
    2363/    1D24 : D2C0                		adda.w	d0,a1
    2364/    1D26 : 1038 F627           		move.b	($FFFFF627).w,d0
    2365/    1D2A :                     
    2366/    1D2A :                     loc_1F44:
    2367/    1D2A : 6106                		bsr.s	Pal_DecColor2
    2368/    1D2C : 51C8 FFFC           		dbf	d0,loc_1F44
    2369/    1D30 :                     
    2370/    1D30 :                     locret_1F4A:
    2371/    1D30 : 4E75                		rts	
    2372/    1D32 :                     ; End of function Pal_WhiteToBlack
    2373/    1D32 :                     
    2374/    1D32 :                     
    2375/    1D32 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2376/    1D32 :                     
    2377/    1D32 :                     
    2378/    1D32 :                     Pal_DecColor2:				; XREF: Pal_WhiteToBlack
    2379/    1D32 : 3419                		move.w	(a1)+,d2
    2380/    1D34 : 3610                		move.w	(a0),d3
    2381/    1D36 : B642                		cmp.w	d2,d3
    2382/    1D38 : 6724                		beq.s	loc_1F78
    2383/    1D3A : 3203                		move.w	d3,d1
    2384/    1D3C : 0441 0200           		subi.w	#$200,d1	; decrease blue	value
    2385/    1D40 : 6508                		bcs.s	loc_1F64
    2386/    1D42 : B242                		cmp.w	d2,d1
    2387/    1D44 : 6504                		bcs.s	loc_1F64
    2388/    1D46 : 30C1                		move.w	d1,(a0)+
    2389/    1D48 : 4E75                		rts	
    2390/    1D4A :                     ; ===========================================================================
    2391/    1D4A :                     
    2392/    1D4A :                     loc_1F64:				; XREF: Pal_DecColor2
    2393/    1D4A : 3203                		move.w	d3,d1
    2394/    1D4C : 0441 0020           		subi.w	#$20,d1		; decrease green value
    2395/    1D50 : 6508                		bcs.s	loc_1F74
    2396/    1D52 : B242                		cmp.w	d2,d1
    2397/    1D54 : 6504                		bcs.s	loc_1F74
    2398/    1D56 : 30C1                		move.w	d1,(a0)+
    2399/    1D58 : 4E75                		rts	
    2400/    1D5A :                     ; ===========================================================================
    2401/    1D5A :                     
    2402/    1D5A :                     loc_1F74:				; XREF: loc_1F64
    2403/    1D5A : 5558                		subq.w	#2,(a0)+	; decrease red value
    2404/    1D5C : 4E75                		rts	
    2405/    1D5E :                     ; ===========================================================================
    2406/    1D5E :                     
    2407/    1D5E :                     loc_1F78:				; XREF: Pal_DecColor2
    2408/    1D5E : 5448                		addq.w	#2,a0
    2409/    1D60 : 4E75                		rts	
    2410/    1D62 :                     ; End of function Pal_DecColor2
    2411/    1D62 :                     
    2412/    1D62 :                     ; ---------------------------------------------------------------------------
    2413/    1D62 :                     ; Subroutine to	make a white flash when	you enter a special stage
    2414/    1D62 :                     ; ---------------------------------------------------------------------------
    2415/    1D62 :                     
    2416/    1D62 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2417/    1D62 :                     
    2418/    1D62 :                     
    2419/    1D62 :                     Pal_MakeFlash:				; XREF: SpecialStage
    2420/    1D62 : 31FC 003F F626      		move.w	#$3F,($FFFFF626).w
    2421/    1D68 : 383C 0015           		move.w	#$15,d4
    2422/    1D6C :                     
    2423/    1D6C :                     loc_1F86:
    2424/    1D6C : 11FC 0012 F62A      		move.b	#$12,($FFFFF62A).w
    2425/    1D72 : 6100 0A1A           		bsr.w	DelayProgram
    2426/    1D76 : 610A                		bsr.s	Pal_ToWhite
    2427/    1D78 : 6100 F658           		bsr.w	RunPLC_RAM
    2428/    1D7C : 51CC FFEE           		dbf	d4,loc_1F86
    2429/    1D80 : 4E75                		rts	
    2430/    1D82 :                     ; End of function Pal_MakeFlash
    2431/    1D82 :                     
    2432/    1D82 :                     
    2433/    1D82 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2434/    1D82 :                     
    2435/    1D82 :                     
    2436/    1D82 :                     Pal_ToWhite:				; XREF: Pal_MakeFlash
    2437/    1D82 : 7000                		moveq	#0,d0
    2438/    1D84 : 41F8 FB00           		lea	($FFFFFB00).w,a0
    2439/    1D88 : 1038 F626           		move.b	($FFFFF626).w,d0
    2440/    1D8C : D0C0                		adda.w	d0,a0
    2441/    1D8E : 1038 F627           		move.b	($FFFFF627).w,d0
    2442/    1D92 :                     
    2443/    1D92 :                     loc_1FAC:
    2444/    1D92 : 611C                		bsr.s	Pal_AddColor2
    2445/    1D94 : 51C8 FFFC           		dbf	d0,loc_1FAC
    2446/    1D98 : 7000                		moveq	#0,d0
    2447/    1D9A : 41F8 FA80           		lea	($FFFFFA80).w,a0
    2448/    1D9E : 1038 F626           		move.b	($FFFFF626).w,d0
    2449/    1DA2 : D0C0                		adda.w	d0,a0
    2450/    1DA4 : 1038 F627           		move.b	($FFFFF627).w,d0
    2451/    1DA8 :                     
    2452/    1DA8 :                     loc_1FC2:
    2453/    1DA8 : 6106                		bsr.s	Pal_AddColor2
    2454/    1DAA : 51C8 FFFC           		dbf	d0,loc_1FC2
    2455/    1DAE : 4E75                		rts	
    2456/    1DB0 :                     ; End of function Pal_ToWhite
    2457/    1DB0 :                     
    2458/    1DB0 :                     
    2459/    1DB0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2460/    1DB0 :                     
    2461/    1DB0 :                     
    2462/    1DB0 :                     Pal_AddColor2:				; XREF: Pal_ToWhite
    2463/    1DB0 : 3410                		move.w	(a0),d2
    2464/    1DB2 : 0C42 0EEE           		cmpi.w	#$EEE,d2
    2465/    1DB6 : 6734                		beq.s	loc_2006
    2466/    1DB8 : 3202                		move.w	d2,d1
    2467/    1DBA : 0241 000E           		andi.w	#$E,d1
    2468/    1DBE : 0C41 000E           		cmpi.w	#$E,d1
    2469/    1DC2 : 6704                		beq.s	loc_1FE2
    2470/    1DC4 : 5458                		addq.w	#2,(a0)+	; increase red value
    2471/    1DC6 : 4E75                		rts	
    2472/    1DC8 :                     ; ===========================================================================
    2473/    1DC8 :                     
    2474/    1DC8 :                     loc_1FE2:				; XREF: Pal_AddColor2
    2475/    1DC8 : 3202                		move.w	d2,d1
    2476/    1DCA : 0241 00E0           		andi.w	#$E0,d1
    2477/    1DCE : 0C41 00E0           		cmpi.w	#$E0,d1
    2478/    1DD2 : 6706                		beq.s	loc_1FF4
    2479/    1DD4 : 0658 0020           		addi.w	#$20,(a0)+	; increase green value
    2480/    1DD8 : 4E75                		rts	
    2481/    1DDA :                     ; ===========================================================================
    2482/    1DDA :                     
    2483/    1DDA :                     loc_1FF4:				; XREF: loc_1FE2
    2484/    1DDA : 3202                		move.w	d2,d1
    2485/    1DDC : 0241 0E00           		andi.w	#$E00,d1
    2486/    1DE0 : 0C41 0E00           		cmpi.w	#$E00,d1
    2487/    1DE4 : 6706                		beq.s	loc_2006
    2488/    1DE6 : 0658 0200           		addi.w	#$200,(a0)+	; increase blue	value
    2489/    1DEA : 4E75                		rts	
    2490/    1DEC :                     ; ===========================================================================
    2491/    1DEC :                     
    2492/    1DEC :                     loc_2006:				; XREF: Pal_AddColor2
    2493/    1DEC : 5448                		addq.w	#2,a0
    2494/    1DEE : 4E75                		rts	
    2495/    1DF0 :                     ; End of function Pal_AddColor2
    2496/    1DF0 :                     
    2497/    1DF0 :                     ; ---------------------------------------------------------------------------
    2498/    1DF0 :                     ; Pallet cycling routine - Sega	logo
    2499/    1DF0 :                     ; ---------------------------------------------------------------------------
    2500/    1DF0 :                     
    2501/    1DF0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2502/    1DF0 :                     
    2503/    1DF0 :                     
    2504/    1DF0 :                     PalCycle_Sega:				; XREF: SegaScreen
    2505/    1DF0 : 4A38 F635           		tst.b	($FFFFF635).w
    2506/    1DF4 : 665A                		bne.s	loc_206A
    2507/    1DF6 : 43F8 FB20           		lea	($FFFFFB20).w,a1
    2508/    1DFA : 41F9 0000 1EA6      		lea	(Pal_Sega1).l,a0
    2509/    1E00 : 7205                		moveq	#5,d1
    2510/    1E02 : 3038 F632           		move.w	($FFFFF632).w,d0
    2511/    1E06 :                     
    2512/    1E06 :                     loc_2020:
    2513/    1E06 : 6A08                		bpl.s	loc_202A
    2514/    1E08 : 5448                		addq.w	#2,a0
    2515/    1E0A : 5341                		subq.w	#1,d1
    2516/    1E0C : 5440                		addq.w	#2,d0
    2517/    1E0E : 60F6                		bra.s	loc_2020
    2518/    1E10 :                     ; ===========================================================================
    2519/    1E10 :                     
    2520/    1E10 :                     loc_202A:				; XREF: PalCycle_Sega
    2521/    1E10 : 3400                		move.w	d0,d2
    2522/    1E12 : 0242 001E           		andi.w	#$1E,d2
    2523/    1E16 : 6602                		bne.s	loc_2034
    2524/    1E18 : 5440                		addq.w	#2,d0
    2525/    1E1A :                     
    2526/    1E1A :                     loc_2034:
    2527/    1E1A : 0C40 0060           		cmpi.w	#$60,d0
    2528/    1E1E : 6404                		bcc.s	loc_203E
    2529/    1E20 : 3398 0000           		move.w	(a0)+,(a1,d0.w)
    2530/    1E24 :                     
    2531/    1E24 :                     loc_203E:
    2532/    1E24 : 5440                		addq.w	#2,d0
    2533/    1E26 : 51C9 FFE8           		dbf	d1,loc_202A
    2534/    1E2A : 3038 F632           		move.w	($FFFFF632).w,d0
    2535/    1E2E : 5440                		addq.w	#2,d0
    2536/    1E30 : 3400                		move.w	d0,d2
    2537/    1E32 : 0242 001E           		andi.w	#$1E,d2
    2538/    1E36 : 6602                		bne.s	loc_2054
    2539/    1E38 : 5440                		addq.w	#2,d0
    2540/    1E3A :                     
    2541/    1E3A :                     loc_2054:
    2542/    1E3A : 0C40 0064           		cmpi.w	#$64,d0
    2543/    1E3E : 6D08                		blt.s	loc_2062
    2544/    1E40 : 31FC 0401 F634      		move.w	#$401,($FFFFF634).w
    2545/    1E46 : 70F4                		moveq	#-$C,d0
    2546/    1E48 :                     
    2547/    1E48 :                     loc_2062:
    2548/    1E48 : 31C0 F632           		move.w	d0,($FFFFF632).w
    2549/    1E4C : 7001                		moveq	#1,d0
    2550/    1E4E : 4E75                		rts	
    2551/    1E50 :                     ; ===========================================================================
    2552/    1E50 :                     
    2553/    1E50 :                     loc_206A:				; XREF: loc_202A
    2554/    1E50 : 5338 F634           		subq.b	#1,($FFFFF634).w
    2555/    1E54 : 6A4C                		bpl.s	loc_20BC
    2556/    1E56 : 11FC 0004 F634      		move.b	#4,($FFFFF634).w
    2557/    1E5C : 3038 F632           		move.w	($FFFFF632).w,d0
    2558/    1E60 : 0640 000C           		addi.w	#$C,d0
    2559/    1E64 : 0C40 0030           		cmpi.w	#$30,d0
    2560/    1E68 : 6504                		bcs.s	loc_2088
    2561/    1E6A : 7000                		moveq	#0,d0
    2562/    1E6C : 4E75                		rts	
    2563/    1E6E :                     ; ===========================================================================
    2564/    1E6E :                     
    2565/    1E6E :                     loc_2088:				; XREF: loc_206A
    2566/    1E6E : 31C0 F632           		move.w	d0,($FFFFF632).w
    2567/    1E72 : 41F9 0000 1EB2      		lea	(Pal_Sega2).l,a0
    2568/    1E78 : 41F0 0000           		lea	(a0,d0.w),a0
    2569/    1E7C : 43F8 FB04           		lea	($FFFFFB04).w,a1
    2570/    1E80 : 22D8                		move.l	(a0)+,(a1)+
    2571/    1E82 : 22D8                		move.l	(a0)+,(a1)+
    2572/    1E84 : 3298                		move.w	(a0)+,(a1)
    2573/    1E86 : 43F8 FB20           		lea	($FFFFFB20).w,a1
    2574/    1E8A : 7000                		moveq	#0,d0
    2575/    1E8C : 722C                		moveq	#$2C,d1
    2576/    1E8E :                     
    2577/    1E8E :                     loc_20A8:
    2578/    1E8E : 3400                		move.w	d0,d2
    2579/    1E90 : 0242 001E           		andi.w	#$1E,d2
    2580/    1E94 : 6602                		bne.s	loc_20B2
    2581/    1E96 : 5440                		addq.w	#2,d0
    2582/    1E98 :                     
    2583/    1E98 :                     loc_20B2:
    2584/    1E98 : 3390 0000           		move.w	(a0),(a1,d0.w)
    2585/    1E9C : 5440                		addq.w	#2,d0
    2586/    1E9E : 51C9 FFEE           		dbf	d1,loc_20A8
    2587/    1EA2 :                     
    2588/    1EA2 :                     loc_20BC:
    2589/    1EA2 : 7001                		moveq	#1,d0
    2590/    1EA4 : 4E75                		rts	
    2591/    1EA6 :                     ; End of function PalCycle_Sega
    2592/    1EA6 :                     
    2593/    1EA6 :                     ; ===========================================================================
    2594/    1EA6 :                     
    2595/    1EA6 :                     Pal_Sega1:	binclude	"_binary-files/palletes/sega1.bin"
    2596/    1EB2 :                     Pal_Sega2:	binclude	"_binary-files/palletes/sega2.bin"
    2597/    1EE2 :                     
    2598/    1EE2 :                     ; ---------------------------------------------------------------------------
    2599/    1EE2 :                     ; Subroutines to load pallets
    2600/    1EE2 :                     ; ---------------------------------------------------------------------------
    2601/    1EE2 :                     
    2602/    1EE2 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2603/    1EE2 :                     
    2604/    1EE2 :                     
    2605/    1EE2 :                     PalLoad1:
    2606/    1EE2 : 43F9 0000 1F4E      		lea	(PalPointers).l,a1
    2607/    1EE8 : E748                		lsl.w	#3,d0
    2608/    1EEA : D2C0                		adda.w	d0,a1
    2609/    1EEC : 2459                		movea.l	(a1)+,a2
    2610/    1EEE : 3659                		movea.w	(a1)+,a3
    2611/    1EF0 : D6FC 0080           		adda.w	#$80,a3
    2612/    1EF4 : 3E19                		move.w	(a1)+,d7
    2613/    1EF6 :                     
    2614/    1EF6 :                     loc_2110:
    2615/    1EF6 : 26DA                		move.l	(a2)+,(a3)+
    2616/    1EF8 : 51CF FFFC           		dbf	d7,loc_2110
    2617/    1EFC : 4E75                		rts	
    2618/    1EFE :                     ; End of function PalLoad1
    2619/    1EFE :                     
    2620/    1EFE :                     
    2621/    1EFE :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2622/    1EFE :                     
    2623/    1EFE :                     
    2624/    1EFE :                     PalLoad2:
    2625/    1EFE : 43F9 0000 1F4E      		lea	(PalPointers).l,a1
    2626/    1F04 : E748                		lsl.w	#3,d0
    2627/    1F06 : D2C0                		adda.w	d0,a1
    2628/    1F08 : 2459                		movea.l	(a1)+,a2
    2629/    1F0A : 3659                		movea.w	(a1)+,a3
    2630/    1F0C : 3E19                		move.w	(a1)+,d7
    2631/    1F0E :                     
    2632/    1F0E :                     loc_2128:
    2633/    1F0E : 26DA                		move.l	(a2)+,(a3)+
    2634/    1F10 : 51CF FFFC           		dbf	d7,loc_2128
    2635/    1F14 : 4E75                		rts	
    2636/    1F16 :                     ; End of function PalLoad2
    2637/    1F16 :                     
    2638/    1F16 :                     ; ---------------------------------------------------------------------------
    2639/    1F16 :                     ; Underwater pallet loading subroutine
    2640/    1F16 :                     ; ---------------------------------------------------------------------------
    2641/    1F16 :                     
    2642/    1F16 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2643/    1F16 :                     
    2644/    1F16 :                     
    2645/    1F16 :                     PalLoad3_Water:
    2646/    1F16 : 43F9 0000 1F4E      		lea	(PalPointers).l,a1
    2647/    1F1C : E748                		lsl.w	#3,d0
    2648/    1F1E : D2C0                		adda.w	d0,a1
    2649/    1F20 : 2459                		movea.l	(a1)+,a2
    2650/    1F22 : 3659                		movea.w	(a1)+,a3
    2651/    1F24 : 96FC 0080           		suba.w	#$80,a3
    2652/    1F28 : 3E19                		move.w	(a1)+,d7
    2653/    1F2A :                     
    2654/    1F2A :                     loc_2144:
    2655/    1F2A : 26DA                		move.l	(a2)+,(a3)+
    2656/    1F2C : 51CF FFFC           		dbf	d7,loc_2144
    2657/    1F30 : 4E75                		rts	
    2658/    1F32 :                     ; End of function PalLoad3_Water
    2659/    1F32 :                     
    2660/    1F32 :                     
    2661/    1F32 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2662/    1F32 :                     
    2663/    1F32 :                     
    2664/    1F32 :                     PalLoad4_Water:
    2665/    1F32 : 43F9 0000 1F4E      		lea	(PalPointers).l,a1
    2666/    1F38 : E748                		lsl.w	#3,d0
    2667/    1F3A : D2C0                		adda.w	d0,a1
    2668/    1F3C : 2459                		movea.l	(a1)+,a2
    2669/    1F3E : 3659                		movea.w	(a1)+,a3
    2670/    1F40 : 96FC 0100           		suba.w	#$100,a3
    2671/    1F44 : 3E19                		move.w	(a1)+,d7
    2672/    1F46 :                     
    2673/    1F46 :                     loc_2160:
    2674/    1F46 : 26DA                		move.l	(a2)+,(a3)+
    2675/    1F48 : 51CF FFFC           		dbf	d7,loc_2160
    2676/    1F4C : 4E75                		rts	
    2677/    1F4E :                     ; End of function PalLoad4_Water
    2678/    1F4E :                     
    2679/    1F4E :                     ; ===========================================================================
    2680/    1F4E :                     ; ---------------------------------------------------------------------------
    2681/    1F4E :                     ; Pallet pointers
    2682/    1F4E :                     ; ---------------------------------------------------------------------------
    2683/    1F4E :                     PalPointers:
    2684/    1F4E :                     	include "_includes-ASM/Pallet pointers.asm"
(1)    1/    1F4E :                     ; ---------------------------------------------------------------------------
(1)    2/    1F4E :                     ; Pallet pointers
(1)    3/    1F4E :                     ; ---------------------------------------------------------------------------
(1)    4/    1F4E : 0000 1FEE           	dc.l Pal_SegaBG		; pallet address
(1)    5/    1F52 : FB00                	dc.w $FB00		; RAM address
(1)    6/    1F54 : 001F                	dc.w $1F		; (pallet length / 2) - 1
(1)    7/    1F56 : 0000 206E           	dc.l Pal_Title
(1)    8/    1F5A : FB00                	dc.w $FB00
(1)    9/    1F5C : 001F                	dc.w $1F
(1)   10/    1F5E : 0000 20EE           	dc.l Pal_LevelSel
(1)   11/    1F62 : FB00                	dc.w $FB00
(1)   12/    1F64 : 001F                	dc.w $1F
(1)   13/    1F66 : 0000 216E           	dc.l Pal_Sonic
(1)   14/    1F6A : FB00                	dc.w $FB00
(1)   15/    1F6C : 0007                	dc.w 7
(1)   16/    1F6E : 0000 218E           	dc.l Pal_GHZ
(1)   17/    1F72 : FB20                	dc.w $FB20
(1)   18/    1F74 : 0017                	dc.w $17
(1)   19/    1F76 : 0000 21EE           	dc.l Pal_LZ
(1)   20/    1F7A : FB20                	dc.w $FB20
(1)   21/    1F7C : 0017                	dc.w $17
(1)   22/    1F7E : 0000 22CE           	dc.l Pal_MZ
(1)   23/    1F82 : FB20                	dc.w $FB20
(1)   24/    1F84 : 0017                	dc.w $17
(1)   25/    1F86 : 0000 232E           	dc.l Pal_SLZ
(1)   26/    1F8A : FB20                	dc.w $FB20
(1)   27/    1F8C : 0017                	dc.w $17
(1)   28/    1F8E : 0000 238E           	dc.l Pal_SYZ
(1)   29/    1F92 : FB20                	dc.w $FB20
(1)   30/    1F94 : 0017                	dc.w $17
(1)   31/    1F96 : 0000 23EE           	dc.l Pal_SBZ1
(1)   32/    1F9A : FB20                	dc.w $FB20
(1)   33/    1F9C : 0017                	dc.w $17
(1)   34/    1F9E : 0000 24AE           	dc.l Pal_Special
(1)   35/    1FA2 : FB00                	dc.w $FB00
(1)   36/    1FA4 : 001F                	dc.w $1F
(1)   37/    1FA6 : 0000 224E           	dc.l Pal_LZWater
(1)   38/    1FAA : FB00                	dc.w $FB00
(1)   39/    1FAC : 001F                	dc.w $1F
(1)   40/    1FAE : 0000 252E           	dc.l Pal_SBZ3
(1)   41/    1FB2 : FB20                	dc.w $FB20
(1)   42/    1FB4 : 0017                	dc.w $17
(1)   43/    1FB6 : 0000 258E           	dc.l Pal_SBZ3Water
(1)   44/    1FBA : FB00                	dc.w $FB00
(1)   45/    1FBC : 001F                	dc.w $1F
(1)   46/    1FBE : 0000 244E           	dc.l Pal_SBZ2
(1)   47/    1FC2 : FB20                	dc.w $FB20
(1)   48/    1FC4 : 0017                	dc.w $17
(1)   49/    1FC6 : 0000 260E           	dc.l Pal_LZSonWater
(1)   50/    1FCA : FB00                	dc.w $FB00
(1)   51/    1FCC : 0007                	dc.w 7
(1)   52/    1FCE : 0000 262E           	dc.l Pal_SBZ3SonWat
(1)   53/    1FD2 : FB00                	dc.w $FB00
(1)   54/    1FD4 : 0007                	dc.w 7
(1)   55/    1FD6 : 0000 264E           	dc.l Pal_SpeResult
(1)   56/    1FDA : FB00                	dc.w $FB00
(1)   57/    1FDC : 001F                	dc.w $1F
(1)   58/    1FDE : 0000 26CE           	dc.l Pal_SpeContinue
(1)   59/    1FE2 : FB00                	dc.w $FB00
(1)   60/    1FE4 : 000F                	dc.w $F
(1)   61/    1FE6 : 0000 270E           	dc.l Pal_Ending
(1)   62/    1FEA : FB00                	dc.w $FB00
(1)   63/    1FEC : 001F                	dc.w $1F
    2685/    1FEE :                     
    2686/    1FEE :                     ; ---------------------------------------------------------------------------
    2687/    1FEE :                     ; Pallet data
    2688/    1FEE :                     ; ---------------------------------------------------------------------------
    2689/    1FEE :                     Pal_SegaBG:	binclude	"_binary-files/palletes/sega_bg.bin"
    2690/    206E :                     Pal_Title:	binclude	"_binary-files/palletes/title.bin"
    2691/    20EE :                     Pal_LevelSel:	binclude	"_binary-files/palletes/levelsel.bin"
    2692/    216E :                     Pal_Sonic:	binclude	"_binary-files/palletes/sonic.bin"
    2693/    218E :                     Pal_GHZ:	binclude	"_binary-files/palletes/ghz.bin"
    2694/    21EE :                     Pal_LZ:		binclude	"_binary-files/palletes/lz.bin"
    2695/    224E :                     Pal_LZWater:	binclude	"_binary-files/palletes/lz_uw.bin"	; LZ underwater pallets
    2696/    22CE :                     Pal_MZ:		binclude	"_binary-files/palletes/mz.bin"
    2697/    232E :                     Pal_SLZ:	binclude	"_binary-files/palletes/slz.bin"
    2698/    238E :                     Pal_SYZ:	binclude	"_binary-files/palletes/syz.bin"
    2699/    23EE :                     Pal_SBZ1:	binclude	"_binary-files/palletes/sbz_act1.bin"	; SBZ act 1 pallets
    2700/    244E :                     Pal_SBZ2:	binclude	"_binary-files/palletes/sbz_act2.bin"	; SBZ act 2 & Final Zone pallets
    2701/    24AE :                     Pal_Special:	binclude	"_binary-files/palletes/special.bin"	; special stage pallets
    2702/    252E :                     Pal_SBZ3:	binclude	"_binary-files/palletes/sbz_act3.bin"	; SBZ act 3 pallets
    2703/    258E :                     Pal_SBZ3Water:	binclude	"_binary-files/palletes/sbz_a3uw.bin"	; SBZ act 3 (underwater) pallets
    2704/    260E :                     Pal_LZSonWater:	binclude	"_binary-files/palletes/son_lzuw.bin"	; Sonic (underwater in LZ) pallet
    2705/    262E :                     Pal_SBZ3SonWat:	binclude	"_binary-files/palletes/son_sbzu.bin"	; Sonic (underwater in SBZ act 3) pallet
    2706/    264E :                     Pal_SpeResult:	binclude	"_binary-files/palletes/ssresult.bin"	; special stage results screen pallets
    2707/    26CE :                     Pal_SpeContinue:binclude	"_binary-files/palletes/sscontin.bin"	; special stage results screen continue pallet
    2708/    270E :                     Pal_Ending:	binclude	"_binary-files/palletes/ending.bin"	; ending sequence pallets
    2709/    278E :                     
    2710/    278E :                     ; ---------------------------------------------------------------------------
    2711/    278E :                     ; Subroutine to	delay the program by ($FFFFF62A) frames
    2712/    278E :                     ; ---------------------------------------------------------------------------
    2713/    278E :                     
    2714/    278E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2715/    278E :                     
    2716/    278E :                     
    2717/    278E :                     DelayProgram:				; XREF: PauseGame
    2718/    278E : 46FC 2300           		move	#$2300,sr
    2719/    2792 :                     
    2720/    2792 :                     loc_29AC:
    2721/    2792 : 4A38 F62A           		tst.b	($FFFFF62A).w
    2722/    2796 : 66FA                		bne.s	loc_29AC
    2723/    2798 : 4E75                		rts	
    2724/    279A :                     ; End of function DelayProgram
    2725/    279A :                     
    2726/    279A :                     ; ---------------------------------------------------------------------------
    2727/    279A :                     ; Subroutine to	generate a pseudo-random number	in d0
    2728/    279A :                     ; ---------------------------------------------------------------------------
    2729/    279A :                     
    2730/    279A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2731/    279A :                     
    2732/    279A :                     
    2733/    279A :                     RandomNumber:
    2734/    279A : 2238 F636           		move.l	($FFFFF636).w,d1
    2735/    279E : 6606                		bne.s	loc_29C0
    2736/    27A0 : 223C 2A6D 365A      		move.l	#$2A6D365A,d1
    2737/    27A6 :                     
    2738/    27A6 :                     loc_29C0:
    2739/    27A6 : 2001                		move.l	d1,d0
    2740/    27A8 : E581                		asl.l	#2,d1
    2741/    27AA : D280                		add.l	d0,d1
    2742/    27AC : E781                		asl.l	#3,d1
    2743/    27AE : D280                		add.l	d0,d1
    2744/    27B0 : 3001                		move.w	d1,d0
    2745/    27B2 : 4841                		swap	d1
    2746/    27B4 : D041                		add.w	d1,d0
    2747/    27B6 : 3200                		move.w	d0,d1
    2748/    27B8 : 4841                		swap	d1
    2749/    27BA : 21C1 F636           		move.l	d1,($FFFFF636).w
    2750/    27BE : 4E75                		rts	
    2751/    27C0 :                     ; End of function RandomNumber
    2752/    27C0 :                     
    2753/    27C0 :                     
    2754/    27C0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2755/    27C0 :                     
    2756/    27C0 :                     
    2757/    27C0 :                     CalcSine:				; XREF: SS_BGAnimate; et al
    2758/    27C0 : 0240 00FF           		andi.w	#$FF,d0
    2759/    27C4 : D040                		add.w	d0,d0
    2760/    27C6 : 0640 0080           		addi.w	#$80,d0
    2761/    27CA : 323B 000C           		move.w	Sine_Data(pc,d0.w),d1
    2762/    27CE : 0440 0080           		subi.w	#$80,d0
    2763/    27D2 : 303B 0004           		move.w	Sine_Data(pc,d0.w),d0
    2764/    27D6 : 4E75                		rts	
    2765/    27D8 :                     ; End of function CalcSine
    2766/    27D8 :                     
    2767/    27D8 :                     ; ===========================================================================
    2768/    27D8 :                     
    2769/    27D8 :                     Sine_Data:	binclude	"_misc/sinewave.bin"	; values for a 360º sine wave
    2770/    2A58 :                     
    2771/    2A58 :                     ; ===========================================================================
    2772/    2A58 : 48E7 6000           		movem.l	d1-d2,-(sp)
    2773/    2A5C : 3200                		move.w	d0,d1
    2774/    2A5E : 4841                		swap	d1
    2775/    2A60 : 7000                		moveq	#0,d0
    2776/    2A62 : 3200                		move.w	d0,d1
    2777/    2A64 : 7407                		moveq	#7,d2
    2778/    2A66 :                     
    2779/    2A66 :                     loc_2C80:
    2780/    2A66 : E599                		rol.l	#2,d1
    2781/    2A68 : D040                		add.w	d0,d0
    2782/    2A6A : 5240                		addq.w	#1,d0
    2783/    2A6C : 9240                		sub.w	d0,d1
    2784/    2A6E : 6410                		bcc.s	loc_2C9A
    2785/    2A70 : D240                		add.w	d0,d1
    2786/    2A72 : 5340                		subq.w	#1,d0
    2787/    2A74 : 51CA FFF0           		dbf	d2,loc_2C80
    2788/    2A78 : E248                		lsr.w	#1,d0
    2789/    2A7A : 4CDF 0006           		movem.l	(sp)+,d1-d2
    2790/    2A7E : 4E75                		rts	
    2791/    2A80 :                     ; ===========================================================================
    2792/    2A80 :                     
    2793/    2A80 :                     loc_2C9A:
    2794/    2A80 : 5240                		addq.w	#1,d0
    2795/    2A82 : 51CA FFE2           		dbf	d2,loc_2C80
    2796/    2A86 : E248                		lsr.w	#1,d0
    2797/    2A88 : 4CDF 0006           		movem.l	(sp)+,d1-d2
    2798/    2A8C : 4E75                		rts	
    2799/    2A8E :                     
    2800/    2A8E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    2801/    2A8E :                     
    2802/    2A8E :                     
    2803/    2A8E :                     CalcAngle:
    2804/    2A8E : 48E7 1800           		movem.l	d3-d4,-(sp)
    2805/    2A92 : 7600                		moveq	#0,d3
    2806/    2A94 : 7800                		moveq	#0,d4
    2807/    2A96 : 3601                		move.w	d1,d3
    2808/    2A98 : 3802                		move.w	d2,d4
    2809/    2A9A : 8843                		or.w	d3,d4
    2810/    2A9C : 674C                		beq.s	loc_2D04
    2811/    2A9E : 3802                		move.w	d2,d4
    2812/    2AA0 : 4A43                		tst.w	d3
    2813/    2AA2 : 6A00 0004           		bpl.w	loc_2CC2
    2814/    2AA6 : 4443                		neg.w	d3
    2815/    2AA8 :                     
    2816/    2AA8 :                     loc_2CC2:
    2817/    2AA8 : 4A44                		tst.w	d4
    2818/    2AAA : 6A00 0004           		bpl.w	loc_2CCA
    2819/    2AAE : 4444                		neg.w	d4
    2820/    2AB0 :                     
    2821/    2AB0 :                     loc_2CCA:
    2822/    2AB0 : B843                		cmp.w	d3,d4
    2823/    2AB2 : 6400 000E           		bcc.w	loc_2CDC
    2824/    2AB6 : E18C                		lsl.l	#8,d4
    2825/    2AB8 : 88C3                		divu.w	d3,d4
    2826/    2ABA : 7000                		moveq	#0,d0
    2827/    2ABC : 103B 4036           		move.b	Angle_Data(pc,d4.w),d0
    2828/    2AC0 : 600A                		bra.s	loc_2CE6
    2829/    2AC2 :                     ; ===========================================================================
    2830/    2AC2 :                     
    2831/    2AC2 :                     loc_2CDC:				; XREF: CalcAngle
    2832/    2AC2 : E18B                		lsl.l	#8,d3
    2833/    2AC4 : 86C4                		divu.w	d4,d3
    2834/    2AC6 : 7040                		moveq	#$40,d0
    2835/    2AC8 : 903B 302A           		sub.b	Angle_Data(pc,d3.w),d0
    2836/    2ACC :                     
    2837/    2ACC :                     loc_2CE6:
    2838/    2ACC : 4A41                		tst.w	d1
    2839/    2ACE : 6A00 0008           		bpl.w	loc_2CF2
    2840/    2AD2 : 4440                		neg.w	d0
    2841/    2AD4 : 0640 0080           		addi.w	#$80,d0
    2842/    2AD8 :                     
    2843/    2AD8 :                     loc_2CF2:
    2844/    2AD8 : 4A42                		tst.w	d2
    2845/    2ADA : 6A00 0008           		bpl.w	loc_2CFE
    2846/    2ADE : 4440                		neg.w	d0
    2847/    2AE0 : 0640 0100           		addi.w	#$100,d0
    2848/    2AE4 :                     
    2849/    2AE4 :                     loc_2CFE:
    2850/    2AE4 : 4CDF 0018           		movem.l	(sp)+,d3-d4
    2851/    2AE8 : 4E75                		rts	
    2852/    2AEA :                     ; ===========================================================================
    2853/    2AEA :                     
    2854/    2AEA :                     loc_2D04:				; XREF: CalcAngle
    2855/    2AEA : 303C 0040           		move.w	#$40,d0
    2856/    2AEE : 4CDF 0018           		movem.l	(sp)+,d3-d4
    2857/    2AF2 : 4E75                		rts	
    2858/    2AF4 :                     ; End of function CalcAngle
    2859/    2AF4 :                     
    2860/    2AF4 :                     ; ===========================================================================
    2861/    2AF4 :                     
    2862/    2AF4 :                     Angle_Data:	binclude	"_misc/angles.bin"
    2863/    2BF6 :                     
    2864/    2BF6 :                     ; ===========================================================================
    2865/    2BF6 :                     
    2866/    2BF6 :                     ; ---------------------------------------------------------------------------
    2867/    2BF6 :                     ; Sega screen
    2868/    2BF6 :                     ; ---------------------------------------------------------------------------
    2869/    2BF6 :                     
    2870/    2BF6 :                     SegaScreen:				; XREF: GameModeArray
    2871/    2BF6 : 103C 00E4           		move.b	#$E4,d0
    2872/    2BFA : 6100 E586           		bsr.w	PlaySound_Special ; stop music
    2873/    2BFE : 6100 E7C4           		bsr.w	ClearPLC
    2874/    2C02 : 6100 F034           		bsr.w	Pal_FadeFrom
    2875/    2C06 : 4DF9 00C0 0004      		lea	($C00004).l,a6
    2876/    2C0C : 3CBC 8004           		move.w	#$8004,(a6)
    2877/    2C10 : 3CBC 8230           		move.w	#$8230,(a6)
    2878/    2C14 : 3CBC 8407           		move.w	#$8407,(a6)
    2879/    2C18 : 3CBC 8700           		move.w	#$8700,(a6)
    2880/    2C1C : 3CBC 8B00           		move.w	#$8B00,(a6)
    2881/    2C20 : 4238 F64E           		clr.b	($FFFFF64E).w
    2882/    2C24 : 46FC 2700           		move	#$2700,sr
    2883/    2C28 : 3038 F60C           		move.w	($FFFFF60C).w,d0
    2884/    2C2C : 0200 00BF           		andi.b	#$BF,d0
    2885/    2C30 : 33C0 00C0 0004      		move.w	d0,($C00004).l
    2886/    2C36 : 6100 E472           		bsr.w	ClearScreen
    2887/    2C3A : 23FC 4000 0000      		move.l	#$40000000,($C00004).l
             2C40 : 00C0 0004          
    2888/    2C44 : 41F9 0001 DB66      		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
    2889/    2C4A : 6100 E5DA           		bsr.w	NemDec
    2890/    2C4E : 43F9 00FF 0000      		lea	($FF0000).l,a1
    2891/    2C54 : 41F9 0001 DFC8      		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
    2892/    2C5A : 303C 0000           		move.w	#0,d0
    2893/    2C5E : 6100 E8A4           		bsr.w	EniDec
    2894/    2C62 : 43F9 00FF 0000      		lea	($FF0000).l,a1
    2895/    2C68 : 203C 6510 0003      		move.l	#$65100003,d0
    2896/    2C6E : 7217                		moveq	#$17,d1
    2897/    2C70 : 7407                		moveq	#7,d2
    2898/    2C72 : 6100 E592           		bsr.w	ShowVDPGraphics
    2899/    2C76 : 43F9 00FF 0180      		lea	($FF0180).l,a1
    2900/    2C7C : 203C 4000 0003      		move.l	#$40000003,d0
    2901/    2C82 : 7227                		moveq	#$27,d1
    2902/    2C84 : 741B                		moveq	#$1B,d2
    2903/    2C86 : 6100 E57E           		bsr.w	ShowVDPGraphics
    2904/    2C8A : 7000                		moveq	#0,d0
    2905/    2C8C : 6100 F270           		bsr.w	PalLoad2	; load Sega logo pallet
    2906/    2C90 : 31FC FFF6 F632      		move.w	#-$A,($FFFFF632).w
    2907/    2C96 : 31FC 0000 F634      		move.w	#0,($FFFFF634).w
    2908/    2C9C : 31FC 0000 F662      		move.w	#0,($FFFFF662).w
    2909/    2CA2 : 31FC 0000 F660      		move.w	#0,($FFFFF660).w
    2910/    2CA8 : 3038 F60C           		move.w	($FFFFF60C).w,d0
    2911/    2CAC : 0000 0040           		ori.b	#$40,d0
    2912/    2CB0 : 33C0 00C0 0004      		move.w	d0,($C00004).l
    2913/    2CB6 :                     
    2914/    2CB6 :                     Sega_WaitPallet:
    2915/    2CB6 : 11FC 0002 F62A      		move.b	#2,($FFFFF62A).w
    2916/    2CBC : 6100 FAD0           		bsr.w	DelayProgram
    2917/    2CC0 : 6100 F12E           		bsr.w	PalCycle_Sega
    2918/    2CC4 : 66F0                		bne.s	Sega_WaitPallet
    2919/    2CC6 :                     
    2920/    2CC6 : 103C 00E1           		move.b	#$E1,d0
    2921/    2CCA : 6100 E4B6           		bsr.w	PlaySound_Special ; play "SEGA"	sound
    2922/    2CCE : 11FC 0014 F62A      		move.b	#$14,($FFFFF62A).w
    2923/    2CD4 : 6100 FAB8           		bsr.w	DelayProgram
    2924/    2CD8 : 31FC 001E F614      		move.w	#$1E,($FFFFF614).w
    2925/    2CDE :                     
    2926/    2CDE :                     Sega_WaitEnd:
    2927/    2CDE : 11FC 0002 F62A      		move.b	#2,($FFFFF62A).w
    2928/    2CE4 : 6100 FAA8           		bsr.w	DelayProgram
    2929/    2CE8 : 4A78 F614           		tst.w	($FFFFF614).w
    2930/    2CEC : 6708                		beq.s	Sega_GotoTitle
    2931/    2CEE : 0238 0080 F605      		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
    2932/    2CF4 : 67E8                		beq.s	Sega_WaitEnd	; if not, branch
    2933/    2CF6 :                     
    2934/    2CF6 :                     Sega_GotoTitle:
    2935/    2CF6 : 11FC 0004 F600      		move.b	#4,($FFFFF600).w ; go to title screen
    2936/    2CFC : 4E75                		rts	
    2937/    2CFE :                     ; ===========================================================================
    2938/    2CFE :                     
    2939/    2CFE :                     ; ---------------------------------------------------------------------------
    2940/    2CFE :                     ; Title	screen
    2941/    2CFE :                     ; ---------------------------------------------------------------------------
    2942/    2CFE :                     
    2943/    2CFE :                     TitleScreen:				; XREF: GameModeArray
    2944/    2CFE : 103C 00E4           		move.b	#$E4,d0
    2945/    2D02 : 6100 E47E           		bsr.w	PlaySound_Special ; stop music
    2946/    2D06 : 6100 E6BC           		bsr.w	ClearPLC
    2947/    2D0A : 6100 EF2C           		bsr.w	Pal_FadeFrom
    2948/    2D0E : 46FC 2700           		move	#$2700,sr
    2949/    2D12 : 6100 E424           		bsr.w	SoundDriverLoad
    2950/    2D16 : 4DF9 00C0 0004      		lea	($C00004).l,a6
    2951/    2D1C : 3CBC 8004           		move.w	#$8004,(a6)
    2952/    2D20 : 3CBC 8230           		move.w	#$8230,(a6)
    2953/    2D24 : 3CBC 8407           		move.w	#$8407,(a6)
    2954/    2D28 : 3CBC 9001           		move.w	#$9001,(a6)
    2955/    2D2C : 3CBC 9200           		move.w	#$9200,(a6)
    2956/    2D30 : 3CBC 8B03           		move.w	#$8B03,(a6)
    2957/    2D34 : 3CBC 8720           		move.w	#$8720,(a6)
    2958/    2D38 : 4238 F64E           		clr.b	($FFFFF64E).w
    2959/    2D3C : 6100 E36C           		bsr.w	ClearScreen
    2960/    2D40 : 43F8 D000           		lea	($FFFFD000).w,a1
    2961/    2D44 : 7000                		moveq	#0,d0
    2962/    2D46 : 323C 07FF           		move.w	#$7FF,d1
    2963/    2D4A :                     
    2964/    2D4A :                     Title_ClrObjRam:
    2965/    2D4A : 22C0                		move.l	d0,(a1)+
    2966/    2D4C : 51C9 FFFC           		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
    2967/    2D50 :                     
    2968/    2D50 : 23FC 4000 0000      		move.l	#$40000000,($C00004).l
             2D56 : 00C0 0004          
    2969/    2D5A : 41F9 0002 0CA0      		lea	(Nem_JapNames).l,a0 ; load Japanese credits
    2970/    2D60 : 6100 E4C4           		bsr.w	NemDec
    2971/    2D64 : 23FC 54C0 0000      		move.l	#$54C00000,($C00004).l
             2D6A : 00C0 0004          
    2972/    2D6E : 41F9 0006 3820      		lea	(Nem_CreditText).l,a0 ;	load alphabet
    2973/    2D74 : 6100 E4B0           		bsr.w	NemDec
    2974/    2D78 : 43F9 00FF 0000      		lea	($FF0000).l,a1
    2975/    2D7E : 41F9 0002 0BE2      		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
    2976/    2D84 : 303C 0000           		move.w	#0,d0
    2977/    2D88 : 6100 E77A           		bsr.w	EniDec
    2978/    2D8C : 43F9 00FF 0000      		lea	($FF0000).l,a1
    2979/    2D92 : 203C 4000 0003      		move.l	#$40000003,d0
    2980/    2D98 : 7227                		moveq	#$27,d1
    2981/    2D9A : 741B                		moveq	#$1B,d2
    2982/    2D9C : 6100 E468           		bsr.w	ShowVDPGraphics
    2983/    2DA0 : 43F8 FB80           		lea	($FFFFFB80).w,a1
    2984/    2DA4 : 7000                		moveq	#0,d0
    2985/    2DA6 : 323C 001F           		move.w	#$1F,d1
    2986/    2DAA :                     
    2987/    2DAA :                     Title_ClrPallet:
    2988/    2DAA : 22C0                		move.l	d0,(a1)+
    2989/    2DAC : 51C9 FFFC           		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
    2990/    2DB0 :                     
    2991/    2DB0 : 7003                		moveq	#3,d0		; load Sonic's pallet
    2992/    2DB2 : 6100 F12E           		bsr.w	PalLoad1
    2993/    2DB6 : 11FC 008A D080      		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
    2994/    2DBC : 4EB9 0000 D106      		jsr	ObjectsLoad
    2995/    2DC2 : 4EB9 0000 D42C      		jsr	BuildSprites
    2996/    2DC8 : 6100 EDC8           		bsr.w	Pal_FadeTo
    2997/    2DCC : 46FC 2700           		move	#$2700,sr
    2998/    2DD0 : 23FC 4000 0001      		move.l	#$40000001,($C00004).l
             2DD6 : 00C0 0004          
    2999/    2DDA : 41F9 0001 E1D4      		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
    3000/    2DE0 : 6100 E444           		bsr.w	NemDec
    3001/    2DE4 : 23FC 6000 0001      		move.l	#$60000001,($C00004).l
             2DEA : 00C0 0004          
    3002/    2DEE : 41F9 0001 F1E0      		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
    3003/    2DF4 : 6100 E430           		bsr.w	NemDec
    3004/    2DF8 : 23FC 6200 0002      		move.l	#$62000002,($C00004).l
             2DFE : 00C0 0004          
    3005/    2E02 : 41F9 0002 0BAE      		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
    3006/    2E08 : 6100 E41C           		bsr.w	NemDec
    3007/    2E0C : 4DF9 00C0 0000      		lea	($C00000).l,a6
    3008/    2E12 : 2D7C 5000 0003      		move.l	#$50000003,4(a6)
             2E18 : 0004             
    3009/    2E1A : 4BF9 0000 03D6      		lea	(Art_Text).l,a5
    3010/    2E20 : 323C 028F           		move.w	#$28F,d1		
    3011/    2E24 :                     
    3012/    2E24 :                     Title_LoadText:
    3013/    2E24 : 3C9D                		move.w	(a5)+,(a6)
    3014/    2E26 : 51C9 FFFC           		dbf	d1,Title_LoadText ; load uncompressed text patterns
    3015/    2E2A :                     
    3016/    2E2A : 11FC 0000 FE30      		move.b	#0,($FFFFFE30).w ; clear lamppost counter
    3017/    2E30 : 31FC 0000 FE08      		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
    3018/    2E36 : 31FC 0000 FFF0      		move.w	#0,($FFFFFFF0).w ; disable debug mode
    3019/    2E3C : 31FC 0000 FFEA      		move.w	#0,($FFFFFFEA).w
    3020/    2E42 : 31FC 0000 FE10      		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
    3021/    2E48 : 31FC 0000 F634      		move.w	#0,($FFFFF634).w ; disable pallet cycling
    3022/    2E4E : 6100 2E98           		bsr.w	LevelSizeLoad
    3023/    2E52 : 6100 3280           		bsr.w	DeformBgLayer
    3024/    2E56 : 43F8 B000           		lea	($FFFFB000).w,a1
    3025/    2E5A : 41F9 0003 E660      		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
    3026/    2E60 : 303C 0000           		move.w	#0,d0
    3027/    2E64 : 6100 E69E           		bsr.w	EniDec
    3028/    2E68 : 41F9 0004 1924      		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
    3029/    2E6E : 43F9 00FF 0000      		lea	($FF0000).l,a1
    3030/    2E74 : 6100 E80C           		bsr.w	KosDec
    3031/    2E78 : 6100 3CE0           		bsr.w	LevelLayoutLoad
    3032/    2E7C : 6100 EDBA           		bsr.w	Pal_FadeFrom
    3033/    2E80 : 46FC 2700           		move	#$2700,sr
    3034/    2E84 : 6100 E224           		bsr.w	ClearScreen
    3035/    2E88 : 4BF9 00C0 0004      		lea	($C00004).l,a5
    3036/    2E8E : 4DF9 00C0 0000      		lea	($C00000).l,a6
    3037/    2E94 : 47F8 F708           		lea	($FFFFF708).w,a3
    3038/    2E98 : 2878 A404           		movea.l	($FFFFA404).w,a4			; MJ: Load address of layout BG
    3039/    2E9C : 343C 6000           		move.w	#$6000,d2
    3040/    2EA0 : 6100 3C24           		bsr.w	LoadTilesFromStart2
    3041/    2EA4 : 43F9 00FF 0000      		lea	($FF0000).l,a1
    3042/    2EAA : 41F9 0001 E0C0      		lea	(Eni_Title).l,a0 ; load	title screen mappings
    3043/    2EB0 : 303C 0000           		move.w	#0,d0
    3044/    2EB4 : 6100 E64E           		bsr.w	EniDec
    3045/    2EB8 : 43F9 00FF 0000      		lea	($FF0000).l,a1
    3046/    2EBE : 203C 4206 0003      		move.l	#$42060003,d0
    3047/    2EC4 : 7221                		moveq	#$21,d1
    3048/    2EC6 : 7415                		moveq	#$15,d2
    3049/    2EC8 : 6100 E33C           		bsr.w	ShowVDPGraphics
    3050/    2ECC : 23FC 4000 0000      		move.l	#$40000000,($C00004).l
             2ED2 : 00C0 0004          
    3051/    2ED6 : 41F9 0003 BC58      		lea	(Nem_TIT_1st).l,a0 ; load GHZ patterns
    3052/    2EDC : 6100 E348           		bsr.w	NemDec
    3053/    2EE0 : 7001                		moveq	#1,d0		; load title screen pallet
    3054/    2EE2 : 6100 EFFE           		bsr.w	PalLoad1
    3055/    2EE6 : 103C 008A           		move.b	#$8A,d0		; play title screen music
    3056/    2EEA : 6100 E296           		bsr.w	PlaySound_Special
    3057/    2EEE : 11FC 0000 FFFA      		move.b	#0,($FFFFFFFA).w ; disable debug mode
    3058/    2EF4 : 31FC 0178 F614      		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
    3059/    2EFA : 43F8 D080           		lea	($FFFFD080).w,a1
    3060/    2EFE : 7000                		moveq	#0,d0
    3061/    2F00 : 323C 0007           		move.w	#7,d1
    3062/    2F04 :                     
    3063/    2F04 :                     Title_ClrObjRam2:
    3064/    2F04 : 22C0                		move.l	d0,(a1)+
    3065/    2F06 : 51C9 FFFC           		dbf	d1,Title_ClrObjRam2
    3066/    2F0A :                     
    3067/    2F0A : 11FC 000E D040      		move.b	#$E,($FFFFD040).w ; load big Sonic object
    3068/    2F10 : 11FC 000F D080      		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
    3069/    2F16 : 11FC 000F D0C0      		move.b	#$F,($FFFFD0C0).w ; load "TM" object
    3070/    2F1C : 11FC 0003 D0DA      		move.b	#3,($FFFFD0DA).w
    3071/    2F22 : 11FC 000F D100      		move.b	#$F,($FFFFD100).w
    3072/    2F28 : 11FC 0002 D11A      		move.b	#2,($FFFFD11A).w
    3073/    2F2E : 4EB9 0000 D106      		jsr	ObjectsLoad
    3074/    2F34 : 6100 319E           		bsr.w	DeformBgLayer
    3075/    2F38 : 4EB9 0000 D42C      		jsr	BuildSprites
    3076/    2F3E : 7000                		moveq	#0,d0
    3077/    2F40 : 6100 E456           		bsr.w	LoadPLC2
    3078/    2F44 : 31FC 0000 FFE4      		move.w	#0,($FFFFFFE4).w
    3079/    2F4A : 31FC 0000 FFE6      		move.w	#0,($FFFFFFE6).w
    3080/    2F50 : 3038 F60C           		move.w	($FFFFF60C).w,d0
    3081/    2F54 : 0000 0040           		ori.b	#$40,d0
    3082/    2F58 : 33C0 00C0 0004      		move.w	d0,($C00004).l
    3083/    2F5E : 6100 EC32           		bsr.w	Pal_FadeTo
    3084/    2F62 :                     
    3085/    2F62 :                     loc_317C:
    3086/    2F62 : 11FC 0004 F62A      		move.b	#4,($FFFFF62A).w
    3087/    2F68 : 6100 F824           		bsr.w	DelayProgram
    3088/    2F6C : 4EB9 0000 D106      		jsr	ObjectsLoad
    3089/    2F72 : 6100 3160           		bsr.w	DeformBgLayer
    3090/    2F76 : 4EB9 0000 D42C      		jsr	BuildSprites
    3091/    2F7C : 6100 E7C4           		bsr.w	PalCycle_Title
    3092/    2F80 : 6100 E450           		bsr.w	RunPLC_RAM
    3093/    2F84 : 3038 D008           		move.w	($FFFFD008).w,d0
    3094/    2F88 : 5440                		addq.w	#2,d0
    3095/    2F8A : 31C0 D008           		move.w	d0,($FFFFD008).w ; move	Sonic to the right
    3096/    2F8E : 0C40 1C00           		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
    3097/    2F92 : 6508                		bcs.s	Title_ChkRegion	; if not, branch
    3098/    2F94 : 11FC 0000 F600      		move.b	#0,($FFFFF600).w ; go to Sega screen
    3099/    2F9A : 4E75                		rts	
    3100/    2F9C :                     ; ===========================================================================
    3101/    2F9C :                     
    3102/    2F9C :                     Title_ChkRegion:
    3103/    2F9C : 4A38 FFF8           		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
    3104/    2FA0 : 6A08                		bpl.s	Title_RegionJ	; if Japanese, branch
    3105/    2FA2 : 41F9 0000 3190      		lea	(LevelSelectCode_US).l,a0 ; load US code
    3106/    2FA8 : 6006                		bra.s	Title_EnterCheat
    3107/    2FAA :                     ; ===========================================================================
    3108/    2FAA :                     
    3109/    2FAA :                     Title_RegionJ:				; XREF: Title_ChkRegion
    3110/    2FAA : 41F9 0000 318A      		lea	(LevelSelectCode_J).l,a0 ; load	J code
    3111/    2FB0 :                     
    3112/    2FB0 :                     Title_EnterCheat:			; XREF: Title_ChkRegion
    3113/    2FB0 : 3038 FFE4           		move.w	($FFFFFFE4).w,d0
    3114/    2FB4 : D0C0                		adda.w	d0,a0
    3115/    2FB6 : 1038 F605           		move.b	($FFFFF605).w,d0 ; get button press
    3116/    2FBA : 0200 000F           		andi.b	#$F,d0		; read only up/down/left/right buttons
    3117/    2FBE : B010                		cmp.b	(a0),d0		; does button press match the cheat code?
    3118/    2FC0 : 6634                		bne.s	loc_3210	; if not, branch
    3119/    2FC2 : 5278 FFE4           		addq.w	#1,($FFFFFFE4).w ; next	button press
    3120/    2FC6 : 4A00                		tst.b	d0
    3121/    2FC8 : 663E                		bne.s	Title_CountC
    3122/    2FCA : 41F8 FFE0           		lea	($FFFFFFE0).w,a0
    3123/    2FCE : 3238 FFE6           		move.w	($FFFFFFE6).w,d1
    3124/    2FD2 : E249                		lsr.w	#1,d1
    3125/    2FD4 : 0241 0003           		andi.w	#3,d1
    3126/    2FD8 : 670C                		beq.s	Title_PlayRing
    3127/    2FDA : 4A38 FFF8           		tst.b	($FFFFFFF8).w
    3128/    2FDE : 6A06                		bpl.s	Title_PlayRing
    3129/    2FE0 : 7201                		moveq	#1,d1
    3130/    2FE2 : 1181 1001           		move.b	d1,1(a0,d1.w)
    3131/    2FE6 :                     
    3132/    2FE6 :                     Title_PlayRing:
    3133/    2FE6 : 11BC 0001 1000      		move.b	#1,(a0,d1.w)	; activate cheat
    3134/    2FEC : 103C 00B5           		move.b	#$B5,d0		; play ring sound when code is entered
    3135/    2FF0 : 6100 E190           		bsr.w	PlaySound_Special
    3136/    2FF4 : 6012                		bra.s	Title_CountC
    3137/    2FF6 :                     ; ===========================================================================
    3138/    2FF6 :                     
    3139/    2FF6 :                     loc_3210:				; XREF: Title_EnterCheat
    3140/    2FF6 : 4A00                		tst.b	d0
    3141/    2FF8 : 670E                		beq.s	Title_CountC
    3142/    2FFA : 0C78 0009 FFE4      		cmpi.w	#9,($FFFFFFE4).w
    3143/    3000 : 6706                		beq.s	Title_CountC
    3144/    3002 : 31FC 0000 FFE4      		move.w	#0,($FFFFFFE4).w
    3145/    3008 :                     
    3146/    3008 :                     Title_CountC:
    3147/    3008 : 1038 F605           		move.b	($FFFFF605).w,d0
    3148/    300C : 0200 0020           		andi.b	#$20,d0		; is C button pressed?
    3149/    3010 : 6704                		beq.s	loc_3230	; if not, branch
    3150/    3012 : 5278 FFE6           		addq.w	#1,($FFFFFFE6).w ; increment C button counter
    3151/    3016 :                     
    3152/    3016 :                     loc_3230:
    3153/    3016 : 4A78 F614           		tst.w	($FFFFF614).w
    3154/    301A : 6700 017A           		beq.w	Demo
    3155/    301E : 0238 0080 F605      		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
    3156/    3024 : 6700 FF3C           		beq.w	loc_317C	; if not, branch
    3157/    3028 :                     
    3158/    3028 :                     Title_ChkLevSel:
    3159/    3028 : 4A38 FFE0           		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
    3160/    302C : 6700 00FA           		beq.w	PlayLevel	; if not, play level
    3161/    3030 : 0838 0006 F604      		btst	#6,($FFFFF604).w ; check if A is pressed
    3162/    3036 : 6700 00F0           		beq.w	PlayLevel	; if not, play level
    3163/    303A : 7002                		moveq	#2,d0
    3164/    303C : 6100 EEC0           		bsr.w	PalLoad2	; load level select pallet
    3165/    3040 : 43F8 CC00           		lea	($FFFFCC00).w,a1
    3166/    3044 : 7000                		moveq	#0,d0
    3167/    3046 : 323C 00DF           		move.w	#$DF,d1
    3168/    304A :                     
    3169/    304A :                     Title_ClrScroll:
    3170/    304A : 22C0                		move.l	d0,(a1)+
    3171/    304C : 51C9 FFFC           		dbf	d1,Title_ClrScroll ; fill scroll data with 0
    3172/    3050 :                     
    3173/    3050 : 21C0 F616           		move.l	d0,($FFFFF616).w
    3174/    3054 : 46FC 2700           		move	#$2700,sr
    3175/    3058 : 4DF9 00C0 0000      		lea	($C00000).l,a6
    3176/    305E : 23FC 6000 0003      		move.l	#$60000003,($C00004).l
             3064 : 00C0 0004          
    3177/    3068 : 323C 03FF           		move.w	#$3FF,d1
    3178/    306C :                     
    3179/    306C :                     Title_ClrVram:
    3180/    306C : 2C80                		move.l	d0,(a6)
    3181/    306E : 51C9 FFFC           		dbf	d1,Title_ClrVram ; fill	VRAM with 0
    3182/    3072 :                     
    3183/    3072 : 6100 0258           		bsr.w	LevSelTextLoad
    3184/    3076 :                     
    3185/    3076 :                     ; ---------------------------------------------------------------------------
    3186/    3076 :                     ; Level	Select
    3187/    3076 :                     ; ---------------------------------------------------------------------------
    3188/    3076 :                     
    3189/    3076 :                     LevelSelect:
    3190/    3076 : 11FC 0004 F62A      		move.b	#4,($FFFFF62A).w
    3191/    307C : 6100 F710           		bsr.w	DelayProgram
    3192/    3080 : 6100 01C4           		bsr.w	LevSelControls
    3193/    3084 : 6100 E34C           		bsr.w	RunPLC_RAM
    3194/    3088 : 4AB8 F680           		tst.l	($FFFFF680).w
    3195/    308C : 66E8                		bne.s	LevelSelect
    3196/    308E : 0238 00F0 F605      		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
    3197/    3094 : 67E0                		beq.s	LevelSelect	; if not, branch
    3198/    3096 : 3038 FF82           		move.w	($FFFFFF82).w,d0
    3199/    309A : 0C40 0014           		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
    3200/    309E : 6650                		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
    3201/    30A0 : 3038 FF84           		move.w	($FFFFFF84).w,d0
    3202/    30A4 : 0640 0080           		addi.w	#$80,d0
    3203/    30A8 : 4A38 FFE3           		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
    3204/    30AC : 670C                		beq.s	LevSel_NoCheat	; if not, branch
    3205/    30AE : 0C40 009F           		cmpi.w	#$9F,d0		; is sound $9F being played?
    3206/    30B2 : 6718                		beq.s	LevSel_Ending	; if yes, branch
    3207/    30B4 : 0C40 009E           		cmpi.w	#$9E,d0		; is sound $9E being played?
    3208/    30B8 : 6720                		beq.s	LevSel_Credits	; if yes, branch
    3209/    30BA :                     
    3210/    30BA :                     LevSel_NoCheat:
    3211/    30BA : 0C40 0094           		cmpi.w	#$94,d0		; is sound $80-$94 being played?
    3212/    30BE : 6506                		bcs.s	LevSel_PlaySnd	; if yes, branch
    3213/    30C0 : 0C40 00A0           		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
    3214/    30C4 : 65B0                		bcs.s	LevelSelect	; if yes, branch
    3215/    30C6 :                     
    3216/    30C6 :                     LevSel_PlaySnd:
    3217/    30C6 : 6100 E0BA           		bsr.w	PlaySound_Special
    3218/    30CA : 60AA                		bra.s	LevelSelect
    3219/    30CC :                     ; ===========================================================================
    3220/    30CC :                     
    3221/    30CC :                     LevSel_Ending:				; XREF: LevelSelect
    3222/    30CC : 11FC 0018 F600      		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
    3223/    30D2 : 31FC 0600 FE10      		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
    3224/    30D8 : 4E75                		rts	
    3225/    30DA :                     ; ===========================================================================
    3226/    30DA :                     
    3227/    30DA :                     LevSel_Credits:				; XREF: LevelSelect
    3228/    30DA : 11FC 001C F600      		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
    3229/    30E0 : 103C 0091           		move.b	#$91,d0
    3230/    30E4 : 6100 E09C           		bsr.w	PlaySound_Special ; play credits music
    3231/    30E8 : 31FC 0000 FFF4      		move.w	#0,($FFFFFFF4).w
    3232/    30EE : 4E75                		rts	
    3233/    30F0 :                     ; ===========================================================================
    3234/    30F0 :                     
    3235/    30F0 :                     LevSel_Level_SS:			; XREF: LevelSelect
    3236/    30F0 : D040                		add.w	d0,d0
    3237/    30F2 : 303B 006C           		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
    3238/    30F6 : 6B00 FF7E           		bmi.w	LevelSelect
    3239/    30FA : 0C40 0700           		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
    3240/    30FE : 6620                		bne.s	LevSel_Level	; if not, branch
    3241/    3100 : 11FC 0010 F600      		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
    3242/    3106 : 4278 FE10           		clr.w	($FFFFFE10).w	; clear	level
    3243/    310A : 11FC 0003 FE12      		move.b	#3,($FFFFFE12).w ; set lives to	3
    3244/    3110 : 7000                		moveq	#0,d0
    3245/    3112 : 31C0 FE20           		move.w	d0,($FFFFFE20).w ; clear rings
    3246/    3116 : 21C0 FE22           		move.l	d0,($FFFFFE22).w ; clear time
    3247/    311A : 21C0 FE26           		move.l	d0,($FFFFFE26).w ; clear score
    3248/    311E : 4E75                		rts	
    3249/    3120 :                     ; ===========================================================================
    3250/    3120 :                     
    3251/    3120 :                     LevSel_Level:				; XREF: LevSel_Level_SS
    3252/    3120 : 0240 3FFF           		andi.w	#$3FFF,d0
    3253/    3124 : 31C0 FE10           		move.w	d0,($FFFFFE10).w ; set level number
    3254/    3128 :                     
    3255/    3128 :                     PlayLevel:				; XREF: ROM:00003246j ...
    3256/    3128 : 11FC 000C F600      		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
    3257/    312E : 11FC 0003 FE12      		move.b	#3,($FFFFFE12).w ; set lives to	3
    3258/    3134 : 7000                		moveq	#0,d0
    3259/    3136 : 31C0 FE20           		move.w	d0,($FFFFFE20).w ; clear rings
    3260/    313A : 21C0 FE22           		move.l	d0,($FFFFFE22).w ; clear time
    3261/    313E : 21C0 FE26           		move.l	d0,($FFFFFE26).w ; clear score
    3262/    3142 : 11C0 FE16           		move.b	d0,($FFFFFE16).w ; clear special stage number
    3263/    3146 : 11C0 FE57           		move.b	d0,($FFFFFE57).w ; clear emeralds
    3264/    314A : 21C0 FE58           		move.l	d0,($FFFFFE58).w ; clear emeralds
    3265/    314E : 21C0 FE5C           		move.l	d0,($FFFFFE5C).w ; clear emeralds
    3266/    3152 : 11C0 FE18           		move.b	d0,($FFFFFE18).w ; clear continues
    3267/    3156 : 103C 00E0           		move.b	#$E0,d0
    3268/    315A : 6100 E026           		bsr.w	PlaySound_Special ; fade out music
    3269/    315E : 4E75                		rts	
    3270/    3160 :                     ; ===========================================================================
    3271/    3160 :                     ; ---------------------------------------------------------------------------
    3272/    3160 :                     ; Level	select - level pointers
    3273/    3160 :                     ; ---------------------------------------------------------------------------
    3274/    3160 :                     LSelectPointers:
    3275/    3160 :                     		binclude	"_misc/ls_point.bin"
    3276/    318A : (MACRO)              		even
    3277/    318A :                     ; ---------------------------------------------------------------------------
    3278/    318A :                     ; Level	select codes
    3279/    318A :                     ; ---------------------------------------------------------------------------
    3280/    318A :                     LevelSelectCode_J:
    3281/    318A :                     		binclude	"_misc/ls_jcode.bin"
    3282/    3190 : (MACRO)              		even
    3283/    3190 :                     
    3284/    3190 :                     LevelSelectCode_US:
    3285/    3190 :                     		binclude	"_misc/ls_ucode.bin"
    3286/    3196 : (MACRO)              		even
    3287/    3196 :                     ; ===========================================================================
    3288/    3196 :                     
    3289/    3196 :                     ; ---------------------------------------------------------------------------
    3290/    3196 :                     ; Demo mode
    3291/    3196 :                     ; ---------------------------------------------------------------------------
    3292/    3196 :                     
    3293/    3196 :                     Demo:					; XREF: TitleScreen
    3294/    3196 : 31FC 001E F614      		move.w	#$1E,($FFFFF614).w
    3295/    319C :                     
    3296/    319C :                     loc_33B6:				; XREF: loc_33E4
    3297/    319C : 11FC 0004 F62A      		move.b	#4,($FFFFF62A).w
    3298/    31A2 : 6100 F5EA           		bsr.w	DelayProgram
    3299/    31A6 : 6100 2F2C           		bsr.w	DeformBgLayer
    3300/    31AA : 6100 E576           		bsr.w	PalCycle_Load
    3301/    31AE : 6100 E222           		bsr.w	RunPLC_RAM
    3302/    31B2 : 3038 D008           		move.w	($FFFFD008).w,d0
    3303/    31B6 : 5440                		addq.w	#2,d0
    3304/    31B8 : 31C0 D008           		move.w	d0,($FFFFD008).w
    3305/    31BC : 0C40 1C00           		cmpi.w	#$1C00,d0
    3306/    31C0 : 6508                		bcs.s	loc_33E4
    3307/    31C2 : 11FC 0000 F600      		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
    3308/    31C8 : 4E75                		rts	
    3309/    31CA :                     ; ===========================================================================
    3310/    31CA :                     
    3311/    31CA :                     loc_33E4:				; XREF: Demo
    3312/    31CA : 0238 0080 F605      		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
    3313/    31D0 : 6600 FE56           		bne.w	Title_ChkLevSel	; if yes, branch
    3314/    31D4 : 4A78 F614           		tst.w	($FFFFF614).w
    3315/    31D8 : 6600 FFC2           		bne.w	loc_33B6
    3316/    31DC : 103C 00E0           		move.b	#$E0,d0
    3317/    31E0 : 6100 DFA0           		bsr.w	PlaySound_Special ; fade out music
    3318/    31E4 : 3038 FFF2           		move.w	($FFFFFFF2).w,d0 ; load	demo number
    3319/    31E8 : 0240 0007           		andi.w	#7,d0
    3320/    31EC : D040                		add.w	d0,d0
    3321/    31EE : 303B 004E           		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
    3322/    31F2 : 31C0 FE10           		move.w	d0,($FFFFFE10).w
    3323/    31F6 : 5278 FFF2           		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
    3324/    31FA : 0C78 0004 FFF2      		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
    3325/    3200 : 6506                		bcs.s	loc_3422	; if yes, branch
    3326/    3202 : 31FC 0000 FFF2      		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
    3327/    3208 :                     
    3328/    3208 :                     loc_3422:
    3329/    3208 : 31FC 0001 FFF0      		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
    3330/    320E : 11FC 0008 F600      		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
    3331/    3214 : 0C40 0600           		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
    3332/    3218 : 660E                		bne.s	Demo_Level	; if not, branch
    3333/    321A : 11FC 0010 F600      		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
    3334/    3220 : 4278 FE10           		clr.w	($FFFFFE10).w	; clear	level number
    3335/    3224 : 4238 FE16           		clr.b	($FFFFFE16).w	; clear	special	stage number
    3336/    3228 :                     
    3337/    3228 :                     Demo_Level:
    3338/    3228 : 11FC 0003 FE12      		move.b	#3,($FFFFFE12).w ; set lives to	3
    3339/    322E : 7000                		moveq	#0,d0
    3340/    3230 : 31C0 FE20           		move.w	d0,($FFFFFE20).w ; clear rings
    3341/    3234 : 21C0 FE22           		move.l	d0,($FFFFFE22).w ; clear time
    3342/    3238 : 21C0 FE26           		move.l	d0,($FFFFFE26).w ; clear score
    3343/    323C : 4E75                		rts	
    3344/    323E :                     ; ===========================================================================
    3345/    323E :                     ; ---------------------------------------------------------------------------
    3346/    323E :                     ; Levels used in demos
    3347/    323E :                     ; ---------------------------------------------------------------------------
    3348/    323E :                     Demo_Levels:	binclude	"_misc/dm_ord1.bin"
    3349/    3246 : (MACRO)              		even
    3350/    3246 :                     
    3351/    3246 :                     ; ---------------------------------------------------------------------------
    3352/    3246 :                     ; Subroutine to	change what you're selecting in the level select
    3353/    3246 :                     ; ---------------------------------------------------------------------------
    3354/    3246 :                     
    3355/    3246 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    3356/    3246 :                     
    3357/    3246 :                     
    3358/    3246 :                     LevSelControls:				; XREF: LevelSelect
    3359/    3246 : 1238 F605           		move.b	($FFFFF605).w,d1
    3360/    324A : 0201 0003           		andi.b	#3,d1		; is up/down pressed and held?
    3361/    324E : 6606                		bne.s	LevSel_UpDown	; if yes, branch
    3362/    3250 : 5378 FF80           		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
    3363/    3254 : 6A3A                		bpl.s	LevSel_SndTest	; if time remains, branch
    3364/    3256 :                     
    3365/    3256 :                     LevSel_UpDown:
    3366/    3256 : 31FC 000B FF80      		move.w	#$B,($FFFFFF80).w ; reset time delay
    3367/    325C : 1238 F604           		move.b	($FFFFF604).w,d1
    3368/    3260 : 0201 0003           		andi.b	#3,d1		; is up/down pressed?
    3369/    3264 : 672A                		beq.s	LevSel_SndTest	; if not, branch
    3370/    3266 : 3038 FF82           		move.w	($FFFFFF82).w,d0
    3371/    326A : 0801 0000           		btst	#0,d1		; is up	pressed?
    3372/    326E : 6706                		beq.s	LevSel_Down	; if not, branch
    3373/    3270 : 5340                		subq.w	#1,d0		; move up 1 selection
    3374/    3272 : 6402                		bcc.s	LevSel_Down
    3375/    3274 : 7014                		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
    3376/    3276 :                     
    3377/    3276 :                     LevSel_Down:
    3378/    3276 : 0801 0001           		btst	#1,d1		; is down pressed?
    3379/    327A : 670A                		beq.s	LevSel_Refresh	; if not, branch
    3380/    327C : 5240                		addq.w	#1,d0		; move down 1 selection
    3381/    327E : 0C40 0015           		cmpi.w	#$15,d0
    3382/    3282 : 6502                		bcs.s	LevSel_Refresh
    3383/    3284 : 7000                		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
    3384/    3286 :                     
    3385/    3286 :                     LevSel_Refresh:
    3386/    3286 : 31C0 FF82           		move.w	d0,($FFFFFF82).w ; set new selection
    3387/    328A : 6100 0040           		bsr.w	LevSelTextLoad	; refresh text
    3388/    328E : 4E75                		rts	
    3389/    3290 :                     ; ===========================================================================
    3390/    3290 :                     
    3391/    3290 :                     LevSel_SndTest:				; XREF: LevSelControls
    3392/    3290 : 0C78 0014 FF82      		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
    3393/    3296 : 6632                		bne.s	LevSel_NoMove	; if not, branch
    3394/    3298 : 1238 F605           		move.b	($FFFFF605).w,d1
    3395/    329C : 0201 000C           		andi.b	#$C,d1		; is left/right	pressed?
    3396/    32A0 : 6728                		beq.s	LevSel_NoMove	; if not, branch
    3397/    32A2 : 3038 FF84           		move.w	($FFFFFF84).w,d0
    3398/    32A6 : 0801 0002           		btst	#2,d1		; is left pressed?
    3399/    32AA : 6706                		beq.s	LevSel_Right	; if not, branch
    3400/    32AC : 5340                		subq.w	#1,d0		; subtract 1 from sound	test
    3401/    32AE : 6402                		bcc.s	LevSel_Right
    3402/    32B0 : 704F                		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
    3403/    32B2 :                     
    3404/    32B2 :                     LevSel_Right:
    3405/    32B2 : 0801 0003           		btst	#3,d1		; is right pressed?
    3406/    32B6 : 670A                		beq.s	LevSel_Refresh2	; if not, branch
    3407/    32B8 : 5240                		addq.w	#1,d0		; add 1	to sound test
    3408/    32BA : 0C40 0050           		cmpi.w	#$50,d0
    3409/    32BE : 6502                		bcs.s	LevSel_Refresh2
    3410/    32C0 : 7000                		moveq	#0,d0		; if sound test	moves above $4F, set to	0
    3411/    32C2 :                     
    3412/    32C2 :                     LevSel_Refresh2:
    3413/    32C2 : 31C0 FF84           		move.w	d0,($FFFFFF84).w ; set sound test number
    3414/    32C6 : 6100 0004           		bsr.w	LevSelTextLoad	; refresh text
    3415/    32CA :                     
    3416/    32CA :                     LevSel_NoMove:
    3417/    32CA : 4E75                		rts	
    3418/    32CC :                     ; End of function LevSelControls
    3419/    32CC :                     
    3420/    32CC :                     ; ---------------------------------------------------------------------------
    3421/    32CC :                     ; Subroutine to load level select text
    3422/    32CC :                     ; ---------------------------------------------------------------------------
    3423/    32CC :                     
    3424/    32CC :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    3425/    32CC :                     
    3426/    32CC :                     
    3427/    32CC :                     LevSelTextLoad:				; XREF: TitleScreen
    3428/    32CC : 43F9 0000 3388      		lea	(LevelMenuText).l,a1
    3429/    32D2 : 4DF9 00C0 0000      		lea	($C00000).l,a6
    3430/    32D8 : 283C 6210 0003      		move.l	#$62100003,d4	; screen position (text)
    3431/    32DE : 363C E680           		move.w	#$E680,d3	; VRAM setting
    3432/    32E2 : 7214                		moveq	#$14,d1		; number of lines of text
    3433/    32E4 :                     
    3434/    32E4 :                     loc_34FE:				; XREF: LevSelTextLoad+26j
    3435/    32E4 : 2D44 0004           		move.l	d4,4(a6)
    3436/    32E8 : 6100 0082           		bsr.w	LevSel_ChgLine
    3437/    32EC : 0684 0080 0000      		addi.l	#$800000,d4
    3438/    32F2 : 51C9 FFF0           		dbf	d1,loc_34FE
    3439/    32F6 : 7000                		moveq	#0,d0
    3440/    32F8 : 3038 FF82           		move.w	($FFFFFF82).w,d0
    3441/    32FC : 3200                		move.w	d0,d1
    3442/    32FE : 283C 6210 0003      		move.l	#$62100003,d4
    3443/    3304 : EF48                		lsl.w	#7,d0
    3444/    3306 : 4840                		swap	d0
    3445/    3308 : D880                		add.l	d0,d4
    3446/    330A : 43F9 0000 3388      		lea	(LevelMenuText).l,a1
    3447/    3310 : E749                		lsl.w	#3,d1
    3448/    3312 : 3001                		move.w	d1,d0
    3449/    3314 : D241                		add.w	d1,d1
    3450/    3316 : D240                		add.w	d0,d1
    3451/    3318 : D2C1                		adda.w	d1,a1
    3452/    331A : 363C C680           		move.w	#$C680,d3
    3453/    331E : 2D44 0004           		move.l	d4,4(a6)
    3454/    3322 : 6100 0048           		bsr.w	LevSel_ChgLine
    3455/    3326 : 363C E680           		move.w	#$E680,d3
    3456/    332A : 0C78 0014 FF82      		cmpi.w	#$14,($FFFFFF82).w
    3457/    3330 : 6604                		bne.s	loc_3550
    3458/    3332 : 363C C680           		move.w	#$C680,d3
    3459/    3336 :                     
    3460/    3336 :                     loc_3550:
    3461/    3336 : 23FC 6C30 0003      		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
             333C : 00C0 0004          
    3462/    3340 : 3038 FF84           		move.w	($FFFFFF84).w,d0
    3463/    3344 : 0640 0080           		addi.w	#$80,d0
    3464/    3348 : 1400                		move.b	d0,d2
    3465/    334A : E808                		lsr.b	#4,d0
    3466/    334C : 6100 000A           		bsr.w	LevSel_ChgSnd
    3467/    3350 : 1002                		move.b	d2,d0
    3468/    3352 : 6100 0004           		bsr.w	LevSel_ChgSnd
    3469/    3356 : 4E75                		rts	
    3470/    3358 :                     ; End of function LevSelTextLoad
    3471/    3358 :                     
    3472/    3358 :                     
    3473/    3358 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    3474/    3358 :                     
    3475/    3358 :                     
    3476/    3358 :                     LevSel_ChgSnd:				; XREF: LevSelTextLoad
    3477/    3358 : 0240 000F           		andi.w	#$F,d0
    3478/    335C : 0C00 000A           		cmpi.b	#$A,d0
    3479/    3360 : 6504                		bcs.s	loc_3580
    3480/    3362 : 0600 0007           		addi.b	#7,d0
    3481/    3366 :                     
    3482/    3366 :                     loc_3580:
    3483/    3366 : D043                		add.w	d3,d0
    3484/    3368 : 3C80                		move.w	d0,(a6)
    3485/    336A : 4E75                		rts	
    3486/    336C :                     ; End of function LevSel_ChgSnd
    3487/    336C :                     
    3488/    336C :                     
    3489/    336C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    3490/    336C :                     
    3491/    336C :                     
    3492/    336C :                     LevSel_ChgLine:				; XREF: LevSelTextLoad
    3493/    336C : 7417                		moveq	#$17,d2		; number of characters per line
    3494/    336E :                     
    3495/    336E :                     loc_3588:
    3496/    336E : 7000                		moveq	#0,d0
    3497/    3370 : 1019                		move.b	(a1)+,d0
    3498/    3372 : 6A0A                		bpl.s	loc_3598
    3499/    3374 : 3CBC 0000           		move.w	#0,(a6)
    3500/    3378 : 51CA FFF4           		dbf	d2,loc_3588
    3501/    337C : 4E75                		rts	
    3502/    337E :                     ; ===========================================================================
    3503/    337E :                     
    3504/    337E :                     loc_3598:				; XREF: LevSel_ChgLine
    3505/    337E : D043                		add.w	d3,d0
    3506/    3380 : 3C80                		move.w	d0,(a6)
    3507/    3382 : 51CA FFEA           		dbf	d2,loc_3588
    3508/    3386 : 4E75                		rts	
    3509/    3388 :                     ; End of function LevSel_ChgLine
    3510/    3388 :                     
    3511/    3388 :                     ; ===========================================================================
    3512/    3388 :                     ; ---------------------------------------------------------------------------
    3513/    3388 :                     ; Level	select menu text
    3514/    3388 :                     ; ---------------------------------------------------------------------------
    3515/    3388 :                     LevelMenuText:	binclude	"_misc/menutext.bin"
    3516/    3580 : (MACRO)              		even
    3517/    3580 :                     ; ---------------------------------------------------------------------------
    3518/    3580 :                     ; Music	playlist
    3519/    3580 :                     ; ---------------------------------------------------------------------------
    3520/    3580 :                     MusicList:	binclude	"_misc/muslist1.bin"
    3521/    3588 : (MACRO)              		even
    3522/    3588 :                     ; ===========================================================================
    3523/    3588 :                     
    3524/    3588 :                     ; ---------------------------------------------------------------------------
    3525/    3588 :                     ; Level
    3526/    3588 :                     ; ---------------------------------------------------------------------------
    3527/    3588 :                     
    3528/    3588 :                     Level:					; XREF: GameModeArray
    3529/    3588 : 08F8 0007 F600      		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
    3530/    358E : 4A78 FFF0           		tst.w	($FFFFFFF0).w
    3531/    3592 : 6B08                		bmi.s	loc_37B6
    3532/    3594 : 103C 00E0           		move.b	#$E0,d0
    3533/    3598 : 6100 DBE8           		bsr.w	PlaySound_Special ; fade out music
    3534/    359C :                     
    3535/    359C :                     loc_37B6:
    3536/    359C : 6100 DE26           		bsr.w	ClearPLC
    3537/    35A0 : 6100 E696           		bsr.w	Pal_FadeFrom
    3538/    35A4 : 4A78 FFF0           		tst.w	($FFFFFFF0).w
    3539/    35A8 : 6B3E                		bmi.s	Level_ClrRam
    3540/    35AA : 46FC 2700           		move	#$2700,sr
    3541/    35AE : 23FC 7000 0002      		move.l	#$70000002,($C00004).l
             35B4 : 00C0 0004          
    3542/    35B8 : 41F9 0003 8CC0      		lea	(Nem_TitleCard).l,a0 ; load title card patterns
    3543/    35BE : 6100 DC66           		bsr.w	NemDec
    3544/    35C2 : 46FC 2300           		move	#$2300,sr
    3545/    35C6 : 7000                		moveq	#0,d0
    3546/    35C8 : 1038 FE10           		move.b	($FFFFFE10).w,d0
    3547/    35CC : E948                		lsl.w	#4,d0
    3548/    35CE : 45F9 0001 D5FC      		lea	(MainLoadBlocks).l,a2
    3549/    35D4 : 45F2 0000           		lea	(a2,d0.w),a2
    3550/    35D8 : 7000                		moveq	#0,d0
    3551/    35DA : 1012                		move.b	(a2),d0
    3552/    35DC : 6704                		beq.s	loc_37FC
    3553/    35DE : 6100 DD86           		bsr.w	LoadPLC		; load level patterns
    3554/    35E2 :                     
    3555/    35E2 :                     loc_37FC:
    3556/    35E2 : 7001                		moveq	#1,d0
    3557/    35E4 : 6100 DD80           		bsr.w	LoadPLC		; load standard	patterns
    3558/    35E8 :                     
    3559/    35E8 :                     Level_ClrRam:
    3560/    35E8 : 43F8 D000           		lea	($FFFFD000).w,a1
    3561/    35EC : 7000                		moveq	#0,d0
    3562/    35EE : 323C 07FF           		move.w	#$7FF,d1
    3563/    35F2 :                     
    3564/    35F2 :                     Level_ClrObjRam:
    3565/    35F2 : 22C0                		move.l	d0,(a1)+
    3566/    35F4 : 51C9 FFFC           		dbf	d1,Level_ClrObjRam ; clear object RAM
    3567/    35F8 :                     
    3568/    35F8 : 43F8 F628           		lea	($FFFFF628).w,a1
    3569/    35FC : 7000                		moveq	#0,d0
    3570/    35FE : 323C 0015           		move.w	#$15,d1
    3571/    3602 :                     
    3572/    3602 :                     Level_ClrVars:
    3573/    3602 : 22C0                		move.l	d0,(a1)+
    3574/    3604 : 51C9 FFFC           		dbf	d1,Level_ClrVars ; clear misc variables
    3575/    3608 :                     
    3576/    3608 : 43F8 F700           		lea	($FFFFF700).w,a1
    3577/    360C : 7000                		moveq	#0,d0
    3578/    360E : 323C 003F           		move.w	#$3F,d1
    3579/    3612 :                     
    3580/    3612 :                     Level_ClrVars2:
    3581/    3612 : 22C0                		move.l	d0,(a1)+
    3582/    3614 : 51C9 FFFC           		dbf	d1,Level_ClrVars2 ; clear misc variables
    3583/    3618 :                     
    3584/    3618 : 43F8 FE60           		lea	($FFFFFE60).w,a1
    3585/    361C : 7000                		moveq	#0,d0
    3586/    361E : 323C 0047           		move.w	#$47,d1
    3587/    3622 :                     
    3588/    3622 :                     Level_ClrVars3:
    3589/    3622 : 22C0                		move.l	d0,(a1)+
    3590/    3624 : 51C9 FFFC           		dbf	d1,Level_ClrVars3 ; clear object variables
    3591/    3628 :                     
    3592/    3628 : 46FC 2700           		move	#$2700,sr
    3593/    362C : 6100 DA7C           		bsr.w	ClearScreen
    3594/    3630 : 4DF9 00C0 0004      		lea	($C00004).l,a6
    3595/    3636 : 3CBC 8B03           		move.w	#$8B03,(a6)
    3596/    363A : 3CBC 8230           		move.w	#$8230,(a6)
    3597/    363E : 3CBC 8407           		move.w	#$8407,(a6)
    3598/    3642 : 3CBC 857C           		move.w	#$857C,(a6)
    3599/    3646 : 3CBC 9001           		move.w	#$9001,(a6)
    3600/    364A : 3CBC 8004           		move.w	#$8004,(a6)
    3601/    364E : 3CBC 8720           		move.w	#$8720,(a6)
    3602/    3652 : 31FC 8ADF F624      		move.w	#$8ADF,($FFFFF624).w
    3603/    3658 : 3CB8 F624           		move.w	($FFFFF624).w,(a6)
    3604/    365C : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
    3605/    3662 : 6630                		bne.s	Level_LoadPal	; if not, branch
    3606/    3664 : 3CBC 8014           		move.w	#$8014,(a6)
    3607/    3668 : 7000                		moveq	#0,d0
    3608/    366A : 1038 FE11           		move.b	($FFFFFE11).w,d0
    3609/    366E : D040                		add.w	d0,d0
    3610/    3670 : 43F9 0000 3A10      		lea	(WaterHeight).l,a1 ; load water	height array
    3611/    3676 : 3031 0000           		move.w	(a1,d0.w),d0
    3612/    367A : 31C0 F646           		move.w	d0,($FFFFF646).w ; set water heights
    3613/    367E : 31C0 F648           		move.w	d0,($FFFFF648).w
    3614/    3682 : 31C0 F64A           		move.w	d0,($FFFFF64A).w
    3615/    3686 : 4238 F64D           		clr.b	($FFFFF64D).w	; clear	water routine counter
    3616/    368A : 4238 F64E           		clr.b	($FFFFF64E).w	; clear	water movement
    3617/    368E : 11FC 0001 F64C      		move.b	#1,($FFFFF64C).w ; enable water
    3618/    3694 :                     
    3619/    3694 :                     Level_LoadPal:
    3620/    3694 : 31FC 001E FE14      		move.w	#$1E,($FFFFFE14).w
    3621/    369A : 46FC 2300           		move	#$2300,sr
    3622/    369E : 7003                		moveq	#3,d0
    3623/    36A0 : 6100 E85C           		bsr.w	PalLoad2	; load Sonic's pallet line
    3624/    36A4 : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
    3625/    36AA : 661C                		bne.s	Level_GetBgm	; if not, branch
    3626/    36AC : 700F                		moveq	#$F,d0		; pallet number	$0F (LZ)
    3627/    36AE : 0C38 0003 FE11      		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
    3628/    36B4 : 6602                		bne.s	Level_WaterPal	; if not, branch
    3629/    36B6 : 7010                		moveq	#$10,d0		; pallet number	$10 (SBZ3)
    3630/    36B8 :                     
    3631/    36B8 :                     Level_WaterPal:
    3632/    36B8 : 6100 E85C           		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
    3633/    36BC : 4A38 FE30           		tst.b	($FFFFFE30).w
    3634/    36C0 : 6706                		beq.s	Level_GetBgm
    3635/    36C2 : 11F8 FE53 F64E      		move.b	($FFFFFE53).w,($FFFFF64E).w
    3636/    36C8 :                     
    3637/    36C8 :                     Level_GetBgm:
    3638/    36C8 : 4A78 FFF0           		tst.w	($FFFFFFF0).w
    3639/    36CC : 6B5E                		bmi.s	loc_3946
    3640/    36CE : 7000                		moveq	#0,d0
    3641/    36D0 : 1038 FE10           		move.b	($FFFFFE10).w,d0
    3642/    36D4 : 0C78 0103 FE10      		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3?
    3643/    36DA : 6602                		bne.s	Level_BgmNotLZ4	; if not, branch
    3644/    36DC : 7005                		moveq	#5,d0		; move 5 to d0
    3645/    36DE :                     
    3646/    36DE :                     Level_BgmNotLZ4:
    3647/    36DE : 0C78 0502 FE10      		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
    3648/    36E4 : 6602                		bne.s	Level_PlayBgm	; if not, branch
    3649/    36E6 : 7006                		moveq	#6,d0		; move 6 to d0
    3650/    36E8 :                     
    3651/    36E8 :                     Level_PlayBgm:
    3652/    36E8 : 43F9 0000 3580      		lea	(MusicList).l,a1 ; load	music playlist
    3653/    36EE : 1031 0000           		move.b	(a1,d0.w),d0	; add d0 to a1
    3654/    36F2 : 6100 DA88           		bsr.w	PlaySound	; play music
    3655/    36F6 : 11FC 0034 D080      		move.b	#$34,($FFFFD080).w ; load title	card object
    3656/    36FC :                     
    3657/    36FC :                     Level_TtlCard:
    3658/    36FC : 11FC 000C F62A      		move.b	#$C,($FFFFF62A).w
    3659/    3702 : 6100 F08A           		bsr.w	DelayProgram
    3660/    3706 : 4EB9 0000 D106      		jsr	ObjectsLoad
    3661/    370C : 4EB9 0000 D42C      		jsr	BuildSprites
    3662/    3712 : 6100 DCBE           		bsr.w	RunPLC_RAM
    3663/    3716 : 3038 D108           		move.w	($FFFFD108).w,d0
    3664/    371A : B078 D130           		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
    3665/    371E : 66DC                		bne.s	Level_TtlCard	; if not, branch
    3666/    3720 : 4AB8 F680           		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
    3667/    3724 : 66D6                		bne.s	Level_TtlCard	; if yes, branch
    3668/    3726 : 4EB9 0001 C87E      		jsr	Hud_Base
    3669/    372C :                     
    3670/    372C :                     loc_3946:
    3671/    372C : 7003                		moveq	#3,d0
    3672/    372E : 6100 E7B2           		bsr.w	PalLoad1	; load Sonic's pallet line
    3673/    3732 : 6100 25B4           		bsr.w	LevelSizeLoad
    3674/    3736 : 6100 299C           		bsr.w	DeformBgLayer
    3675/    373A : 08F8 0002 F754      		bset	#2,($FFFFF754).w
    3676/    3740 : 6100 33AC           		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
    3677/    3744 : 6100 335A           		bsr.w	LoadTilesFromStart
    3678/    3748 : 4EB9 0001 4A3C      		jsr	FloorLog_Unk
    3679/    374E : 6100 07AA           		bsr.w	ColIndexLoad
    3680/    3752 : 6100 0262           		bsr.w	LZWaterEffects
    3681/    3756 : 11FC 0001 D000      		move.b	#1,($FFFFD000).w ; load	Sonic object
    3682/    375C : 4A78 FFF0           		tst.w	($FFFFFFF0).w
    3683/    3760 : 6B06                		bmi.s	Level_ChkDebug
    3684/    3762 : 11FC 0021 D040      		move.b	#$21,($FFFFD040).w ; load HUD object
    3685/    3768 :                     
    3686/    3768 :                     Level_ChkDebug:
    3687/    3768 : 4A38 FFE2           		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
    3688/    376C : 670E                		beq.s	Level_ChkWater	; if not, branch
    3689/    376E : 0838 0006 F604      		btst	#6,($FFFFF604).w ; is A	button pressed?
    3690/    3774 : 6706                		beq.s	Level_ChkWater	; if not, branch
    3691/    3776 : 11FC 0001 FFFA      		move.b	#1,($FFFFFFFA).w ; enable debug	mode
    3692/    377C :                     
    3693/    377C :                     Level_ChkWater:
    3694/    377C : 31FC 0000 F602      		move.w	#0,($FFFFF602).w
    3695/    3782 : 31FC 0000 F604      		move.w	#0,($FFFFF604).w
    3696/    3788 : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
    3697/    378E : 6618                		bne.s	Level_LoadObj	; if not, branch
    3698/    3790 : 11FC 001B D780      		move.b	#$1B,($FFFFD780).w ; load water	surface	object
    3699/    3796 : 31FC 0060 D788      		move.w	#$60,($FFFFD788).w
    3700/    379C : 11FC 001B D7C0      		move.b	#$1B,($FFFFD7C0).w
    3701/    37A2 : 31FC 0120 D7C8      		move.w	#$120,($FFFFD7C8).w
    3702/    37A8 :                     
    3703/    37A8 :                     Level_LoadObj:
    3704/    37A8 : 4EB9 0000 D6A8      		jsr	ObjPosLoad
    3705/    37AE : 4EB9 0000 D106      		jsr	ObjectsLoad
    3706/    37B4 : 4EB9 0000 D42C      		jsr	BuildSprites
    3707/    37BA : 7000                		moveq	#0,d0
    3708/    37BC : 4A38 FE30           		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
    3709/    37C0 : 660C                		bne.s	loc_39E8	; if yes, branch
    3710/    37C2 : 31C0 FE20           		move.w	d0,($FFFFFE20).w ; clear rings
    3711/    37C6 : 21C0 FE22           		move.l	d0,($FFFFFE22).w ; clear time
    3712/    37CA : 11C0 FE1B           		move.b	d0,($FFFFFE1B).w ; clear lives counter
    3713/    37CE :                     
    3714/    37CE :                     loc_39E8:
    3715/    37CE : 11C0 FE1A           		move.b	d0,($FFFFFE1A).w
    3716/    37D2 : 11C0 FE2C           		move.b	d0,($FFFFFE2C).w ; clear shield
    3717/    37D6 : 11C0 FE2D           		move.b	d0,($FFFFFE2D).w ; clear invincibility
    3718/    37DA : 11C0 FE2E           		move.b	d0,($FFFFFE2E).w ; clear speed shoes
    3719/    37DE : 11C0 FE2F           		move.b	d0,($FFFFFE2F).w
    3720/    37E2 : 31C0 FE08           		move.w	d0,($FFFFFE08).w
    3721/    37E6 : 31C0 FE02           		move.w	d0,($FFFFFE02).w
    3722/    37EA : 31C0 FE04           		move.w	d0,($FFFFFE04).w
    3723/    37EE : 6100 0754           		bsr.w	OscillateNumInit
    3724/    37F2 : 11FC 0001 FE1F      		move.b	#1,($FFFFFE1F).w ; update score	counter
    3725/    37F8 : 11FC 0001 FE1D      		move.b	#1,($FFFFFE1D).w ; update rings	counter
    3726/    37FE : 11FC 0001 FE1E      		move.b	#1,($FFFFFE1E).w ; update time counter
    3727/    3804 : 31FC 0000 F790      		move.w	#0,($FFFFF790).w
    3728/    380A : 43F9 0000 3E8A      		lea	(Demo_Index).l,a1 ; load demo data
    3729/    3810 : 7000                		moveq	#0,d0
    3730/    3812 : 1038 FE10           		move.b	($FFFFFE10).w,d0
    3731/    3816 : E548                		lsl.w	#2,d0
    3732/    3818 : 2271 0000           		movea.l	(a1,d0.w),a1
    3733/    381C : 4A78 FFF0           		tst.w	($FFFFFFF0).w	; is demo mode on?
    3734/    3820 : 6A12                		bpl.s	Level_Demo	; if yes, branch
    3735/    3822 : 43F9 0000 3EAA      		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
    3736/    3828 : 3038 FFF4           		move.w	($FFFFFFF4).w,d0
    3737/    382C : 5340                		subq.w	#1,d0
    3738/    382E : E548                		lsl.w	#2,d0
    3739/    3830 : 2271 0000           		movea.l	(a1,d0.w),a1
    3740/    3834 :                     
    3741/    3834 :                     Level_Demo:
    3742/    3834 : 11E9 0001 F792      		move.b	1(a1),($FFFFF792).w ; load key press duration
    3743/    383A : 5338 F792           		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
    3744/    383E : 31FC 0708 F614      		move.w	#1800,($FFFFF614).w
    3745/    3844 : 4A78 FFF0           		tst.w	($FFFFFFF0).w
    3746/    3848 : 6A14                		bpl.s	Level_ChkWaterPal
    3747/    384A : 31FC 021C F614      		move.w	#540,($FFFFF614).w
    3748/    3850 : 0C78 0004 FFF4      		cmpi.w	#4,($FFFFFFF4).w
    3749/    3856 : 6606                		bne.s	Level_ChkWaterPal
    3750/    3858 : 31FC 01FE F614      		move.w	#510,($FFFFF614).w
    3751/    385E :                     
    3752/    385E :                     Level_ChkWaterPal:
    3753/    385E : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
    3754/    3864 : 6610                		bne.s	Level_Delay	; if not, branch
    3755/    3866 : 700B                		moveq	#$B,d0		; pallet $0B (LZ underwater)
    3756/    3868 : 0C38 0003 FE11      		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
    3757/    386E : 6602                		bne.s	Level_WaterPal2	; if not, branch
    3758/    3870 : 700D                		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
    3759/    3872 :                     
    3760/    3872 :                     Level_WaterPal2:
    3761/    3872 : 6100 E6BE           		bsr.w	PalLoad4_Water
    3762/    3876 :                     
    3763/    3876 :                     Level_Delay:
    3764/    3876 : 323C 0003           		move.w	#3,d1
    3765/    387A :                     
    3766/    387A :                     Level_DelayLoop:
    3767/    387A : 11FC 0008 F62A      		move.b	#8,($FFFFF62A).w
    3768/    3880 : 6100 EF0C           		bsr.w	DelayProgram
    3769/    3884 : 51C9 FFF4           		dbf	d1,Level_DelayLoop
    3770/    3888 :                     
    3771/    3888 : 31FC 202F F626      		move.w	#$202F,($FFFFF626).w
    3772/    388E : 6100 E308           		bsr.w	Pal_FadeTo2
    3773/    3892 : 4A78 FFF0           		tst.w	($FFFFFFF0).w
    3774/    3896 : 6B12                		bmi.s	Level_ClrCardArt
    3775/    3898 : 5438 D0A4           		addq.b	#2,($FFFFD0A4).w ; make	title card move
    3776/    389C : 5838 D0E4           		addq.b	#4,($FFFFD0E4).w
    3777/    38A0 : 5838 D124           		addq.b	#4,($FFFFD124).w
    3778/    38A4 : 5838 D164           		addq.b	#4,($FFFFD164).w
    3779/    38A8 : 6018                		bra.s	Level_StartGame
    3780/    38AA :                     ; ===========================================================================
    3781/    38AA :                     
    3782/    38AA :                     Level_ClrCardArt:
    3783/    38AA : 7002                		moveq	#2,d0
    3784/    38AC : 4EB9 0000 1366      		jsr	(LoadPLC).l	; load explosion patterns
    3785/    38B2 : 7000                		moveq	#0,d0
    3786/    38B4 : 1038 FE10           		move.b	($FFFFFE10).w,d0
    3787/    38B8 : 0640 0015           		addi.w	#$15,d0
    3788/    38BC : 4EB9 0000 1366      		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
    3789/    38C2 :                     
    3790/    38C2 :                     Level_StartGame:
    3791/    38C2 : 08B8 0007 F600      		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
    3792/    38C8 :                     
    3793/    38C8 :                     ; ---------------------------------------------------------------------------
    3794/    38C8 :                     ; Main level loop (when	all title card and loading sequences are finished)
    3795/    38C8 :                     ; ---------------------------------------------------------------------------
    3796/    38C8 :                     
    3797/    38C8 :                     Level_MainLoop:
    3798/    38C8 : 6100 D8C4           		bsr.w	PauseGame
    3799/    38CC : 11FC 0008 F62A      		move.b	#8,($FFFFF62A).w
    3800/    38D2 : 6100 EEBA           		bsr.w	DelayProgram
    3801/    38D6 : 5278 FE04           		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
    3802/    38DA : 6100 04FE           		bsr.w	MoveSonicInDemo
    3803/    38DE : 6100 00D6           		bsr.w	LZWaterEffects
    3804/    38E2 : 4EB9 0000 D106      		jsr	ObjectsLoad
    3805/    38E8 : 4A78 FE08           		tst.w	($FFFFFE08).w
    3806/    38EC : 6608                		bne.s	loc_3B10
    3807/    38EE : 0C38 0006 D024      		cmpi.b	#6,($FFFFD024).w
    3808/    38F4 : 6404                		bcc.s	loc_3B14
    3809/    38F6 :                     
    3810/    38F6 :                     loc_3B10:
    3811/    38F6 : 6100 27DC           		bsr.w	DeformBgLayer
    3812/    38FA :                     
    3813/    38FA :                     loc_3B14:
    3814/    38FA : 4EB9 0000 D42C      		jsr	BuildSprites
    3815/    3900 : 4EB9 0000 D6A8      		jsr	ObjPosLoad
    3816/    3906 : 6100 DE1A           		bsr.w	PalCycle_Load
    3817/    390A : 6100 DAC6           		bsr.w	RunPLC_RAM
    3818/    390E : 6100 068A           		bsr.w	OscillateNumDo
    3819/    3912 : 6100 0716           		bsr.w	ChangeRingFrame
    3820/    3916 : 6100 0780           		bsr.w	SignpostArtLoad
    3821/    391A : 0C38 0008 F600      		cmpi.b	#8,($FFFFF600).w
    3822/    3920 : 6714                		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
    3823/    3922 : 4A78 FE02           		tst.w	($FFFFFE02).w	; is the level set to restart?
    3824/    3926 : 6600 FC60           		bne.w	Level		; if yes, branch
    3825/    392A : 0C38 000C F600      		cmpi.b	#$C,($FFFFF600).w
    3826/    3930 : 6700 FF96           		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
    3827/    3934 : 4E75                		rts	
    3828/    3936 :                     ; ===========================================================================
    3829/    3936 :                     
    3830/    3936 :                     Level_ChkDemo:				; XREF: Level_MainLoop
    3831/    3936 : 4A78 FE02           		tst.w	($FFFFFE02).w	; is level set to restart?
    3832/    393A : 6618                		bne.s	Level_EndDemo	; if yes, branch
    3833/    393C : 4A78 F614           		tst.w	($FFFFF614).w	; is there time	left on	the demo?
    3834/    3940 : 6712                		beq.s	Level_EndDemo	; if not, branch
    3835/    3942 : 0C38 0008 F600      		cmpi.b	#8,($FFFFF600).w
    3836/    3948 : 6700 FF7E           		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
    3837/    394C : 11FC 0000 F600      		move.b	#0,($FFFFF600).w ; go to Sega screen
    3838/    3952 : 4E75                		rts	
    3839/    3954 :                     ; ===========================================================================
    3840/    3954 :                     
    3841/    3954 :                     Level_EndDemo:				; XREF: Level_ChkDemo
    3842/    3954 : 0C38 0008 F600      		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
    3843/    395A : 6612                		bne.s	loc_3B88	; if not, branch
    3844/    395C : 11FC 0000 F600      		move.b	#0,($FFFFF600).w ; go to Sega screen
    3845/    3962 : 4A78 FFF0           		tst.w	($FFFFFFF0).w	; is demo mode on?
    3846/    3966 : 6A06                		bpl.s	loc_3B88	; if yes, branch
    3847/    3968 : 11FC 001C F600      		move.b	#$1C,($FFFFF600).w ; go	to credits
    3848/    396E :                     
    3849/    396E :                     loc_3B88:
    3850/    396E : 31FC 003C F614      		move.w	#$3C,($FFFFF614).w
    3851/    3974 : 31FC 003F F626      		move.w	#$3F,($FFFFF626).w
    3852/    397A : 4278 F794           		clr.w	($FFFFF794).w
    3853/    397E :                     
    3854/    397E :                     loc_3B98:
    3855/    397E : 11FC 0008 F62A      		move.b	#8,($FFFFF62A).w
    3856/    3984 : 6100 EE08           		bsr.w	DelayProgram
    3857/    3988 : 6100 0450           		bsr.w	MoveSonicInDemo
    3858/    398C : 4EB9 0000 D106      		jsr	ObjectsLoad
    3859/    3992 : 4EB9 0000 D42C      		jsr	BuildSprites
    3860/    3998 : 4EB9 0000 D6A8      		jsr	ObjPosLoad
    3861/    399E : 5378 F794           		subq.w	#1,($FFFFF794).w
    3862/    39A2 : 6A0A                		bpl.s	loc_3BC8
    3863/    39A4 : 31FC 0002 F794      		move.w	#2,($FFFFF794).w
    3864/    39AA : 6100 E2AC           		bsr.w	Pal_FadeOut
    3865/    39AE :                     
    3866/    39AE :                     loc_3BC8:
    3867/    39AE : 4A78 F614           		tst.w	($FFFFF614).w
    3868/    39B2 : 66CA                		bne.s	loc_3B98
    3869/    39B4 : 4E75                		rts	
    3870/    39B6 :                     ; ===========================================================================
    3871/    39B6 :                     ; ---------------------------------------------------------------------------
    3872/    39B6 :                     ; Subroutine to	do special water effects in Labyrinth Zone
    3873/    39B6 :                     ; ---------------------------------------------------------------------------
    3874/    39B6 :                     
    3875/    39B6 :                     LZWaterEffects:				; XREF: Level
    3876/    39B6 : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
    3877/    39BC : 6650                		bne.s	locret_3C28	; if not, branch
    3878/    39BE : 0C38 0006 D024      		cmpi.b	#6,($FFFFD024).w
    3879/    39C4 : 640C                		bcc.s	LZMoveWater
    3880/    39C6 : 6100 0252           		bsr.w	LZWindTunnels
    3881/    39CA : 6100 0350           		bsr.w	LZWaterSlides
    3882/    39CE : 6100 0048           		bsr.w	LZDynamicWater
    3883/    39D2 :                     
    3884/    39D2 :                     LZMoveWater:
    3885/    39D2 : 4238 F64E           		clr.b	($FFFFF64E).w
    3886/    39D6 : 7000                		moveq	#0,d0
    3887/    39D8 : 1038 FE60           		move.b	($FFFFFE60).w,d0
    3888/    39DC : E248                		lsr.w	#1,d0
    3889/    39DE : D078 F648           		add.w	($FFFFF648).w,d0
    3890/    39E2 : 31C0 F646           		move.w	d0,($FFFFF646).w
    3891/    39E6 : 3038 F646           		move.w	($FFFFF646).w,d0
    3892/    39EA : 9078 F704           		sub.w	($FFFFF704).w,d0
    3893/    39EE : 6410                		bcc.s	loc_3C1A
    3894/    39F0 : 4A40                		tst.w	d0
    3895/    39F2 : 6A0C                		bpl.s	loc_3C1A
    3896/    39F4 : 11FC 00DF F625      		move.b	#-$21,($FFFFF625).w
    3897/    39FA : 11FC 0001 F64E      		move.b	#1,($FFFFF64E).w
    3898/    3A00 :                     
    3899/    3A00 :                     loc_3C1A:
    3900/    3A00 : 0C40 00DF           		cmpi.w	#$DF,d0
    3901/    3A04 : 6504                		bcs.s	loc_3C24
    3902/    3A06 : 303C 00DF           		move.w	#$DF,d0
    3903/    3A0A :                     
    3904/    3A0A :                     loc_3C24:
    3905/    3A0A : 11C0 F625           		move.b	d0,($FFFFF625).w
    3906/    3A0E :                     
    3907/    3A0E :                     locret_3C28:
    3908/    3A0E : 4E75                		rts	
    3909/    3A10 :                     ; ===========================================================================
    3910/    3A10 :                     ; ---------------------------------------------------------------------------
    3911/    3A10 :                     ; Labyrinth default water heights
    3912/    3A10 :                     ; ---------------------------------------------------------------------------
    3913/    3A10 :                     WaterHeight:	binclude	"_misc/lz_heigh.bin"
    3914/    3A18 : (MACRO)              		even
    3915/    3A18 :                     ; ===========================================================================
    3916/    3A18 :                     
    3917/    3A18 :                     ; ---------------------------------------------------------------------------
    3918/    3A18 :                     ; Labyrinth dynamic water routines
    3919/    3A18 :                     ; ---------------------------------------------------------------------------
    3920/    3A18 :                     
    3921/    3A18 :                     LZDynamicWater:				; XREF: LZWaterEffects
    3922/    3A18 : 7000                		moveq	#0,d0
    3923/    3A1A : 1038 FE11           		move.b	($FFFFFE11).w,d0
    3924/    3A1E : D040                		add.w	d0,d0
    3925/    3A20 : 303B 0020           		move.w	DynWater_Index(pc,d0.w),d0
    3926/    3A24 : 4EBB 001C           		jsr	DynWater_Index(pc,d0.w)
    3927/    3A28 : 7200                		moveq	#0,d1
    3928/    3A2A : 1238 F64C           		move.b	($FFFFF64C).w,d1
    3929/    3A2E : 3038 F64A           		move.w	($FFFFF64A).w,d0
    3930/    3A32 : 9078 F648           		sub.w	($FFFFF648).w,d0
    3931/    3A36 : 6708                		beq.s	locret_3C5A
    3932/    3A38 : 6402                		bcc.s	loc_3C56
    3933/    3A3A : 4441                		neg.w	d1
    3934/    3A3C :                     
    3935/    3A3C :                     loc_3C56:
    3936/    3A3C : D378 F648           		add.w	d1,($FFFFF648).w
    3937/    3A40 :                     
    3938/    3A40 :                     locret_3C5A:
    3939/    3A40 : 4E75                		rts	
    3940/    3A42 :                     ; ===========================================================================
    3941/    3A42 : 0008                DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
    3942/    3A44 : 009A                		dc.w DynWater_LZ2-DynWater_Index
    3943/    3A46 : 00BC                		dc.w DynWater_LZ3-DynWater_Index
    3944/    3A48 : 01C2                		dc.w DynWater_SBZ3-DynWater_Index
    3945/    3A4A :                     ; ===========================================================================
    3946/    3A4A :                     
    3947/    3A4A :                     DynWater_LZ1:				; XREF: DynWater_Index
    3948/    3A4A : 3038 F700           		move.w	($FFFFF700).w,d0
    3949/    3A4E : 1438 F64D           		move.b	($FFFFF64D).w,d2
    3950/    3A52 : 6662                		bne.s	loc_3CD0
    3951/    3A54 : 323C 00B8           		move.w	#$B8,d1
    3952/    3A58 : 0C40 0600           		cmpi.w	#$600,d0
    3953/    3A5C : 653C                		bcs.s	loc_3CB4
    3954/    3A5E : 323C 0108           		move.w	#$108,d1
    3955/    3A62 : 0C78 0200 D00C      		cmpi.w	#$200,($FFFFD00C).w
    3956/    3A68 : 6536                		bcs.s	loc_3CBA
    3957/    3A6A : 0C40 0C00           		cmpi.w	#$C00,d0
    3958/    3A6E : 652A                		bcs.s	loc_3CB4
    3959/    3A70 : 323C 0318           		move.w	#$318,d1
    3960/    3A74 : 0C40 1080           		cmpi.w	#$1080,d0
    3961/    3A78 : 6520                		bcs.s	loc_3CB4
    3962/    3A7A : 11FC 0080 F7E5      		move.b	#-$80,($FFFFF7E5).w
    3963/    3A80 : 323C 05C8           		move.w	#$5C8,d1
    3964/    3A84 : 0C40 1380           		cmpi.w	#$1380,d0
    3965/    3A88 : 6510                		bcs.s	loc_3CB4
    3966/    3A8A : 323C 03A8           		move.w	#$3A8,d1
    3967/    3A8E : B278 F648           		cmp.w	($FFFFF648).w,d1
    3968/    3A92 : 6606                		bne.s	loc_3CB4
    3969/    3A94 : 11FC 0001 F64D      		move.b	#1,($FFFFF64D).w
    3970/    3A9A :                     
    3971/    3A9A :                     loc_3CB4:
    3972/    3A9A : 31C1 F64A           		move.w	d1,($FFFFF64A).w
    3973/    3A9E : 4E75                		rts	
    3974/    3AA0 :                     ; ===========================================================================
    3975/    3AA0 :                     
    3976/    3AA0 :                     loc_3CBA:				; XREF: DynWater_LZ1
    3977/    3AA0 : 0C40 0C80           		cmpi.w	#$C80,d0
    3978/    3AA4 : 65F4                		bcs.s	loc_3CB4
    3979/    3AA6 : 323C 00E8           		move.w	#$E8,d1
    3980/    3AAA : 0C40 1500           		cmpi.w	#$1500,d0
    3981/    3AAE : 65EA                		bcs.s	loc_3CB4
    3982/    3AB0 : 323C 0108           		move.w	#$108,d1
    3983/    3AB4 : 60E4                		bra.s	loc_3CB4
    3984/    3AB6 :                     ; ===========================================================================
    3985/    3AB6 :                     
    3986/    3AB6 :                     loc_3CD0:				; XREF: DynWater_LZ1
    3987/    3AB6 : 5302                		subq.b	#1,d2
    3988/    3AB8 : 6620                		bne.s	locret_3CF4
    3989/    3ABA : 0C78 02E0 D00C      		cmpi.w	#$2E0,($FFFFD00C).w
    3990/    3AC0 : 6418                		bcc.s	locret_3CF4
    3991/    3AC2 : 323C 03A8           		move.w	#$3A8,d1
    3992/    3AC6 : 0C40 1300           		cmpi.w	#$1300,d0
    3993/    3ACA : 650A                		bcs.s	loc_3CF0
    3994/    3ACC : 323C 0108           		move.w	#$108,d1
    3995/    3AD0 : 11FC 0002 F64D      		move.b	#2,($FFFFF64D).w
    3996/    3AD6 :                     
    3997/    3AD6 :                     loc_3CF0:
    3998/    3AD6 : 31C1 F64A           		move.w	d1,($FFFFF64A).w
    3999/    3ADA :                     
    4000/    3ADA :                     locret_3CF4:
    4001/    3ADA : 4E75                		rts	
    4002/    3ADC :                     ; ===========================================================================
    4003/    3ADC :                     
    4004/    3ADC :                     DynWater_LZ2:				; XREF: DynWater_Index
    4005/    3ADC : 3038 F700           		move.w	($FFFFF700).w,d0
    4006/    3AE0 : 323C 0328           		move.w	#$328,d1
    4007/    3AE4 : 0C40 0500           		cmpi.w	#$500,d0
    4008/    3AE8 : 650E                		bcs.s	loc_3D12
    4009/    3AEA : 323C 03C8           		move.w	#$3C8,d1
    4010/    3AEE : 0C40 0B00           		cmpi.w	#$B00,d0
    4011/    3AF2 : 6504                		bcs.s	loc_3D12
    4012/    3AF4 : 323C 0428           		move.w	#$428,d1
    4013/    3AF8 :                     
    4014/    3AF8 :                     loc_3D12:
    4015/    3AF8 : 31C1 F64A           		move.w	d1,($FFFFF64A).w
    4016/    3AFC : 4E75                		rts	
    4017/    3AFE :                     ; ===========================================================================
    4018/    3AFE :                     
    4019/    3AFE :                     DynWater_LZ3:				; XREF: DynWater_Index
    4020/    3AFE : 3038 F700           		move.w	($FFFFF700).w,d0
    4021/    3B02 : 1438 F64D           		move.b	($FFFFF64D).w,d2
    4022/    3B06 : 663E                		bne.s	loc_3D5E
    4023/    3B08 : 323C 0900           		move.w	#$900,d1
    4024/    3B0C : 0C40 0600           		cmpi.w	#$600,d0
    4025/    3B10 : 652A                		bcs.s	loc_3D54
    4026/    3B12 : 0C78 03C0 D00C      		cmpi.w	#$3C0,($FFFFD00C).w
    4027/    3B18 : 6522                		bcs.s	loc_3D54
    4028/    3B1A : 0C78 0600 D00C      		cmpi.w	#$600,($FFFFD00C).w
    4029/    3B20 : 641A                		bcc.s	loc_3D54
    4030/    3B22 : 323C 04C8           		move.w	#$4C8,d1
    4031/    3B26 : 21FC 0006 FFC2      		move.l	#Level_LZ3,($FFFFA400).w		; MJ: Set normal version of act 3's layout to be read
             3B2C : A400             
    4032/    3B2E : 11FC 0001 F64D      		move.b	#1,($FFFFF64D).w
    4033/    3B34 : 303C 00B7           		move.w	#$B7,d0
    4034/    3B38 : 6100 D648           		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
    4035/    3B3C :                     
    4036/    3B3C :                     loc_3D54:
    4037/    3B3C : 31C1 F64A           		move.w	d1,($FFFFF64A).w
    4038/    3B40 : 31C1 F648           		move.w	d1,($FFFFF648).w
    4039/    3B44 : 4E75                		rts	
    4040/    3B46 :                     ; ===========================================================================
    4041/    3B46 :                     
    4042/    3B46 :                     loc_3D5E:				; XREF: DynWater_LZ3
    4043/    3B46 : 5302                		subq.b	#1,d2
    4044/    3B48 : 6646                		bne.s	loc_3DA8
    4045/    3B4A : 323C 04C8           		move.w	#$4C8,d1
    4046/    3B4E : 0C40 0770           		cmpi.w	#$770,d0
    4047/    3B52 : 6536                		bcs.s	loc_3DA2
    4048/    3B54 : 323C 0308           		move.w	#$308,d1
    4049/    3B58 : 0C40 1400           		cmpi.w	#$1400,d0
    4050/    3B5C : 652C                		bcs.s	loc_3DA2
    4051/    3B5E : 0C78 0508 F64A      		cmpi.w	#$508,($FFFFF64A).w
    4052/    3B64 : 6710                		beq.s	loc_3D8E
    4053/    3B66 : 0C78 0600 D00C      		cmpi.w	#$600,($FFFFD00C).w
    4054/    3B6C : 6408                		bcc.s	loc_3D8E
    4055/    3B6E : 0C78 0280 D00C      		cmpi.w	#$280,($FFFFD00C).w
    4056/    3B74 : 6414                		bcc.s	loc_3DA2
    4057/    3B76 :                     
    4058/    3B76 :                     loc_3D8E:
    4059/    3B76 : 323C 0508           		move.w	#$508,d1
    4060/    3B7A : 31C1 F648           		move.w	d1,($FFFFF648).w
    4061/    3B7E : 0C40 1770           		cmpi.w	#$1770,d0
    4062/    3B82 : 6506                		bcs.s	loc_3DA2
    4063/    3B84 : 11FC 0002 F64D      		move.b	#2,($FFFFF64D).w
    4064/    3B8A :                     
    4065/    3B8A :                     loc_3DA2:
    4066/    3B8A : 31C1 F64A           		move.w	d1,($FFFFF64A).w
    4067/    3B8E : 4E75                		rts	
    4068/    3B90 :                     ; ===========================================================================
    4069/    3B90 :                     
    4070/    3B90 :                     loc_3DA8:
    4071/    3B90 : 5302                		subq.b	#1,d2
    4072/    3B92 : 6626                		bne.s	loc_3DD2
    4073/    3B94 : 323C 0508           		move.w	#$508,d1
    4074/    3B98 : 0C40 1860           		cmpi.w	#$1860,d0
    4075/    3B9C : 6516                		bcs.s	loc_3DCC
    4076/    3B9E : 323C 0188           		move.w	#$188,d1
    4077/    3BA2 : 0C40 1AF0           		cmpi.w	#$1AF0,d0
    4078/    3BA6 : 6406                		bcc.s	loc_3DC6
    4079/    3BA8 : B278 F648           		cmp.w	($FFFFF648).w,d1
    4080/    3BAC : 6606                		bne.s	loc_3DCC
    4081/    3BAE :                     
    4082/    3BAE :                     loc_3DC6:
    4083/    3BAE : 11FC 0003 F64D      		move.b	#3,($FFFFF64D).w
    4084/    3BB4 :                     
    4085/    3BB4 :                     loc_3DCC:
    4086/    3BB4 : 31C1 F64A           		move.w	d1,($FFFFF64A).w
    4087/    3BB8 : 4E75                		rts	
    4088/    3BBA :                     ; ===========================================================================
    4089/    3BBA :                     
    4090/    3BBA :                     loc_3DD2:
    4091/    3BBA : 5302                		subq.b	#1,d2
    4092/    3BBC : 6638                		bne.s	loc_3E0E
    4093/    3BBE : 323C 0188           		move.w	#$188,d1
    4094/    3BC2 : 0C40 1AF0           		cmpi.w	#$1AF0,d0
    4095/    3BC6 : 6524                		bcs.s	loc_3E04
    4096/    3BC8 : 323C 0900           		move.w	#$900,d1
    4097/    3BCC : 0C40 1BC0           		cmpi.w	#$1BC0,d0
    4098/    3BD0 : 651A                		bcs.s	loc_3E04
    4099/    3BD2 : 11FC 0004 F64D      		move.b	#4,($FFFFF64D).w
    4100/    3BD8 : 31FC 0608 F64A      		move.w	#$608,($FFFFF64A).w
    4101/    3BDE : 31FC 07C0 F648      		move.w	#$7C0,($FFFFF648).w
    4102/    3BE4 : 11FC 0001 F7E8      		move.b	#1,($FFFFF7E8).w
    4103/    3BEA : 4E75                		rts	
    4104/    3BEC :                     ; ===========================================================================
    4105/    3BEC :                     
    4106/    3BEC :                     loc_3E04:
    4107/    3BEC : 31C1 F64A           		move.w	d1,($FFFFF64A).w
    4108/    3BF0 : 31C1 F648           		move.w	d1,($FFFFF648).w
    4109/    3BF4 : 4E75                		rts	
    4110/    3BF6 :                     ; ===========================================================================
    4111/    3BF6 :                     
    4112/    3BF6 :                     loc_3E0E:
    4113/    3BF6 : 0C40 1E00           		cmpi.w	#$1E00,d0
    4114/    3BFA : 6506                		bcs.s	locret_3E1A
    4115/    3BFC : 31FC 0128 F64A      		move.w	#$128,($FFFFF64A).w
    4116/    3C02 :                     
    4117/    3C02 :                     locret_3E1A:
    4118/    3C02 : 4E75                		rts	
    4119/    3C04 :                     ; ===========================================================================
    4120/    3C04 :                     
    4121/    3C04 :                     DynWater_SBZ3:				; XREF: DynWater_Index
    4122/    3C04 : 323C 0228           		move.w	#$228,d1
    4123/    3C08 : 0C78 0F00 F700      		cmpi.w	#$F00,($FFFFF700).w
    4124/    3C0E : 6504                		bcs.s	loc_3E2C
    4125/    3C10 : 323C 04C8           		move.w	#$4C8,d1
    4126/    3C14 :                     
    4127/    3C14 :                     loc_3E2C:
    4128/    3C14 : 31C1 F64A           		move.w	d1,($FFFFF64A).w
    4129/    3C18 : 4E75                		rts
    4130/    3C1A :                     
    4131/    3C1A :                     ; ---------------------------------------------------------------------------
    4132/    3C1A :                     ; Labyrinth Zone "wind tunnels"	subroutine
    4133/    3C1A :                     ; ---------------------------------------------------------------------------
    4134/    3C1A :                     
    4135/    3C1A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    4136/    3C1A :                     
    4137/    3C1A :                     
    4138/    3C1A :                     LZWindTunnels:				; XREF: LZWaterEffects
    4139/    3C1A : 4A78 FE08           		tst.w	($FFFFFE08).w	; is debug mode	being used?
    4140/    3C1E : 6600 00D2           		bne.w	locret_3F0A	; if yes, branch
    4141/    3C22 : 45F9 0000 3CFC      		lea	(LZWind_Data).l,a2
    4142/    3C28 : 7000                		moveq	#0,d0
    4143/    3C2A : 1038 FE11           		move.b	($FFFFFE11).w,d0
    4144/    3C2E : E748                		lsl.w	#3,d0
    4145/    3C30 : D4C0                		adda.w	d0,a2
    4146/    3C32 : 7200                		moveq	#0,d1
    4147/    3C34 : 4A38 FE11           		tst.b	($FFFFFE11).w
    4148/    3C38 : 6604                		bne.s	loc_3E56
    4149/    3C3A : 7201                		moveq	#1,d1
    4150/    3C3C : 514A                		subq.w	#8,a2
    4151/    3C3E :                     
    4152/    3C3E :                     loc_3E56:
    4153/    3C3E : 43F8 D000           		lea	($FFFFD000).w,a1
    4154/    3C42 :                     
    4155/    3C42 :                     LZWind_Loop:
    4156/    3C42 : 3029 0008           		move.w	8(a1),d0
    4157/    3C46 : B052                		cmp.w	(a2),d0
    4158/    3C48 : 6500 0092           		bcs.w	loc_3EF4
    4159/    3C4C : B06A 0004           		cmp.w	4(a2),d0
    4160/    3C50 : 6400 008A           		bcc.w	loc_3EF4
    4161/    3C54 : 3429 000C           		move.w	$C(a1),d2
    4162/    3C58 : B46A 0002           		cmp.w	2(a2),d2
    4163/    3C5C : 657E                		bcs.s	loc_3EF4
    4164/    3C5E : B46A 0006           		cmp.w	6(a2),d2
    4165/    3C62 : 6478                		bcc.s	loc_3EF4
    4166/    3C64 : 1038 FE0F           		move.b	($FFFFFE0F).w,d0
    4167/    3C68 : 0200 003F           		andi.b	#$3F,d0
    4168/    3C6C : 660A                		bne.s	loc_3E90
    4169/    3C6E : 303C 00D0           		move.w	#$D0,d0
    4170/    3C72 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play rushing water sound
    4171/    3C78 :                     
    4172/    3C78 :                     loc_3E90:
    4173/    3C78 : 4A38 F7C9           		tst.b	($FFFFF7C9).w
    4174/    3C7C : 6600 0074           		bne.w	locret_3F0A
    4175/    3C80 : 0C29 0004 0024      		cmpi.b	#4,$24(a1)
    4176/    3C86 : 6466                		bcc.s	loc_3F06
    4177/    3C88 : 11FC 0001 F7C7      		move.b	#1,($FFFFF7C7).w
    4178/    3C8E : 0440 0080           		subi.w	#$80,d0
    4179/    3C92 : B052                		cmp.w	(a2),d0
    4180/    3C94 : 6410                		bcc.s	LZWind_Move
    4181/    3C96 : 7002                		moveq	#2,d0
    4182/    3C98 : 0C38 0001 FE11      		cmpi.b	#1,($FFFFFE11).w
    4183/    3C9E : 6602                		bne.s	loc_3EBA
    4184/    3CA0 : 4440                		neg.w	d0
    4185/    3CA2 :                     
    4186/    3CA2 :                     loc_3EBA:
    4187/    3CA2 : D169 000C           		add.w	d0,$C(a1)
    4188/    3CA6 :                     
    4189/    3CA6 :                     LZWind_Move:
    4190/    3CA6 : 5869 0008           		addq.w	#4,8(a1)
    4191/    3CAA : 337C 0400 0010      		move.w	#$400,$10(a1)	; move Sonic horizontally
    4192/    3CB0 : 337C 0000 0012      		move.w	#0,$12(a1)
    4193/    3CB6 : 137C 000F 001C      		move.b	#$F,$1C(a1)	; use floating animation
    4194/    3CBC : 08E9 0001 0022      		bset	#1,$22(a1)
    4195/    3CC2 : 0838 0000 F602      		btst	#0,($FFFFF602).w ; is up pressed?
    4196/    3CC8 : 6704                		beq.s	LZWind_MoveDown	; if not, branch
    4197/    3CCA : 5369 000C           		subq.w	#1,$C(a1)	; move Sonic up
    4198/    3CCE :                     
    4199/    3CCE :                     LZWind_MoveDown:
    4200/    3CCE : 0838 0001 F602      		btst	#1,($FFFFF602).w ; is down being pressed?
    4201/    3CD4 : 6704                		beq.s	locret_3EF2	; if not, branch
    4202/    3CD6 : 5269 000C           		addq.w	#1,$C(a1)	; move Sonic down
    4203/    3CDA :                     
    4204/    3CDA :                     locret_3EF2:
    4205/    3CDA : 4E75                		rts	
    4206/    3CDC :                     ; ===========================================================================
    4207/    3CDC :                     
    4208/    3CDC :                     loc_3EF4:				; XREF: LZWindTunnels
    4209/    3CDC : 504A                		addq.w	#8,a2
    4210/    3CDE : 51C9 FF62           		dbf	d1,LZWind_Loop
    4211/    3CE2 : 4A38 F7C7           		tst.b	($FFFFF7C7).w
    4212/    3CE6 : 670A                		beq.s	locret_3F0A
    4213/    3CE8 : 137C 0000 001C      		move.b	#0,$1C(a1)
    4214/    3CEE :                     
    4215/    3CEE :                     loc_3F06:
    4216/    3CEE : 4238 F7C7           		clr.b	($FFFFF7C7).w
    4217/    3CF2 :                     
    4218/    3CF2 :                     locret_3F0A:
    4219/    3CF2 : 4E75                		rts	
    4220/    3CF4 :                     ; End of function LZWindTunnels
    4221/    3CF4 :                     
    4222/    3CF4 :                     ; ===========================================================================
    4223/    3CF4 : 0A80 0300 0C10      		dc.w $A80, $300, $C10, $380
             3CFA : 0380             
    4224/    3CFC : 0F80 0100 1410      LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
             3D02 : 0180 0460 0400 
             3D08 : 0710 0480 0A20    
    4225/    3D0E : 0600 1610 06E0      		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
             3D14 : 0C80 0600 13D0 
             3D1A : 0680             
    4226/    3D1C :                     					; XREF: LZWindTunnels
    4227/    3D1C : (MACRO)              		even
    4228/    3D1C :                     
    4229/    3D1C :                     ; ---------------------------------------------------------------------------
    4230/    3D1C :                     ; Labyrinth Zone water slide subroutine
    4231/    3D1C :                     ; ---------------------------------------------------------------------------
    4232/    3D1C :                     
    4233/    3D1C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    4234/    3D1C :                     
    4235/    3D1C :                     
    4236/    3D1C :                     LZWaterSlides:				; XREF: LZWaterEffects
    4237/    3D1C : 43F8 D000           		lea	($FFFFD000).w,a1
    4238/    3D20 : 0829 0001 0022      		btst	#1,$22(a1)
    4239/    3D26 : 6630                		bne.s	loc_3F6A
    4240/    3D28 : 3029 000C           		move.w	$0C(a1),d0				; MJ: Load Y position
    4241/    3D2C : 3229 0008           		move.w	$08(a1),d1				; MJ: Load X position
    4242/    3D30 : C07C 0780           		and.w	#$0780,d0				; MJ: keep Y position within 800 pixels (in multiples of 80)
    4243/    3D34 : E348                		lsl.w	#$01,d0					; MJ: multiply by 2 (Because every 80 bytes switch from FG to BG..)
    4244/    3D36 : EE49                		lsr.w	#$07,d1					; MJ: divide X position by 80 (00 = 0, 80 = 1, etc)
    4245/    3D38 : C23C 007F           		and.b	#$7F,d1					; MJ: keep within 4000 pixels (4000 / 80 = 80)
    4246/    3D3C : D041                		add.w	d1,d0					; MJ: add together
    4247/    3D3E : 2478 A400           		movea.l	($FFFFA400).w,a2			; MJ: Load address of layout
    4248/    3D42 : 1032 0000           		move.b	(a2,d0.w),d0				; MJ: collect correct chunk ID based on the position of Sonic
    4249/    3D46 : 45FA 0066           		lea	Slide_Chunks(pc),a2
    4250/    3D4A : 7200                		moveq	#$00,d1					; MJ: clear d2
    4251/    3D4C : 6006                		bra	LZLoadChunk				; MJ: continue
    4252/    3D4E :                     
    4253/    3D4E :                     LZFindChunk:
    4254/    3D4E : B002                		cmp.b	d2,d0					; MJ: does the chunk match?
    4255/    3D50 : 6718                		beq	LZSlide_Move				; MJ: if so, branch
    4256/    3D52 : 5241                		addq.w	#$01,d1					; MJ: increase counter
    4257/    3D54 :                     
    4258/    3D54 :                     LZLoadChunk:
    4259/    3D54 : 141A                		move.b	(a2)+,d2				; MJ: load chunk ID
    4260/    3D56 : 66F6                		bne	LZFindChunk				; MJ: if it's not null, branch
    4261/    3D58 :                     
    4262/    3D58 :                     loc_3F6A:
    4263/    3D58 : 4A38 F7CA           		tst.b	($FFFFF7CA).w
    4264/    3D5C : 670A                		beq.s	locret_3F7A
    4265/    3D5E : 337C 0005 003E      		move.w	#5,$3E(a1)
    4266/    3D64 : 4238 F7CA           		clr.b	($FFFFF7CA).w
    4267/    3D68 :                     
    4268/    3D68 :                     locret_3F7A:
    4269/    3D68 : 4E75                		rts	
    4270/    3D6A :                     ; ===========================================================================
    4271/    3D6A :                     
    4272/    3D6A :                     LZSlide_Move:				; XREF: LZWaterSlides
    4273/    3D6A : 0C41 0003           		cmpi.w	#3,d1
    4274/    3D6E : 6402                		bcc.s	loc_3F84
    4275/    3D70 : 4E71                		nop	
    4276/    3D72 :                     
    4277/    3D72 :                     loc_3F84:
    4278/    3D72 : 08A9 0000 0022      		bclr	#0,$22(a1)
    4279/    3D78 : 103B 104A           		move.b	Slide_Speeds(pc,d1.w),d0
    4280/    3D7C : 1340 0014           		move.b	d0,$14(a1)
    4281/    3D80 : 6A06                		bpl.s	loc_3F9A
    4282/    3D82 : 08E9 0000 0022      		bset	#0,$22(a1)
    4283/    3D88 :                     
    4284/    3D88 :                     loc_3F9A:
    4285/    3D88 : 4229 0015           		clr.b	$15(a1)
    4286/    3D8C : 137C 001B 001C      		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
    4287/    3D92 : 11FC 0001 F7CA      		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
    4288/    3D98 : 1038 FE0F           		move.b	($FFFFFE0F).w,d0
    4289/    3D9C : 0200 001F           		andi.b	#$1F,d0
    4290/    3DA0 : 660A                		bne.s	locret_3FBE
    4291/    3DA2 : 303C 00D0           		move.w	#$D0,d0
    4292/    3DA6 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play water sound
    4293/    3DAC :                     
    4294/    3DAC :                     locret_3FBE:
    4295/    3DAC : 4E75                		rts	
    4296/    3DAE :                     ; End of function LZWaterSlides
    4297/    3DAE :                     
    4298/    3DAE :                     ; ===========================================================================
    4299/    3DAE :                     ; ---------------------------------------------------------------------------
    4300/    3DAE : 0506 090A           Slide_Chunks:	dc.b	$05,$06,$09,$0A				; MJ: Chunks to read (128x128 ID's)
    4301/    3DB2 : FAFB FCFD           		dc.b	$FA,$FB,$FC,$FD
    4302/    3DB6 : 0B0C 0D0E           		dc.b	$0B,$0C,$0D,$0E
    4303/    3DBA : 1516 F8F9           		dc.b	$15,$16,$F8,$F9
    4304/    3DBE : 191A 1B1C           		dc.b	$19,$1A,$1B,$1C
    4305/    3DC2 : 17                  		dc.b	$17
    4306/    3DC3 : 00                  		dc.b	$00					; MJ: End marker
    4307/    3DC4 : (MACRO)              		even
    4308/    3DC4 :                     ; ---------------------------------------------------------------------------
    4309/    3DC4 : 0A0A 0A0A           Slide_Speeds:	dc.b	$0A,$0A,$0A,$0A				; MJ: Values for speed, format XX00 = Speed in $14(a-)
    4310/    3DC8 : F6F6 F6F6           		dc.b	$F6,$F6,$F6,$F6
    4311/    3DCC : 0B0B 0B0B           		dc.b	$0B,$0B,$0B,$0B
    4312/    3DD0 : F5F5 F5F5           		dc.b	$F5,$F5,$F5,$F5
    4313/    3DD4 : F4F4 F4F4           		dc.b	$F4,$F4,$F4,$F4
    4314/    3DD8 : F5                  		dc.b	$F5
    4315/    3DD9 : (MACRO)              		even
    4315/    3DD9 : 00                                          dc.b 0 ;ds.b 1 
    4316/    3DDA :                     ; ---------------------------------------------------------------------------
    4317/    3DDA :                     ; ===========================================================================
    4318/    3DDA :                     ; ---------------------------------------------------------------------------
    4319/    3DDA :                     ; Subroutine to	move Sonic in demo mode
    4320/    3DDA :                     ; ---------------------------------------------------------------------------
    4321/    3DDA :                     
    4322/    3DDA :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    4323/    3DDA :                     
    4324/    3DDA :                     
    4325/    3DDA :                     MoveSonicInDemo:			; XREF: Level_MainLoop; et al
    4326/    3DDA : 4A78 FFF0           		tst.w	($FFFFFFF0).w	; is demo mode on?
    4327/    3DDE : 663A                		bne.s	MoveDemo_On	; if yes, branch
    4328/    3DE0 : 4E75                		rts	
    4329/    3DE2 :                     ; ===========================================================================
    4330/    3DE2 :                     
    4331/    3DE2 :                     ; This is an unused subroutine for recording a demo
    4332/    3DE2 :                     
    4333/    3DE2 :                     MoveDemo_Record:
    4334/    3DE2 : 43F9 0008 0000      		lea	($80000).l,a1
    4335/    3DE8 : 3038 F790           		move.w	($FFFFF790).w,d0
    4336/    3DEC : D2C0                		adda.w	d0,a1
    4337/    3DEE : 1038 F604           		move.b	($FFFFF604).w,d0
    4338/    3DF2 : B011                		cmp.b	(a1),d0
    4339/    3DF4 : 660E                		bne.s	loc_3FFA
    4340/    3DF6 : 5229 0001           		addq.b	#1,1(a1)
    4341/    3DFA : 0C29 00FF 0001      		cmpi.b	#$FF,1(a1)
    4342/    3E00 : 6702                		beq.s	loc_3FFA
    4343/    3E02 : 4E75                		rts	
    4344/    3E04 :                     ; ===========================================================================
    4345/    3E04 :                     
    4346/    3E04 :                     loc_3FFA:				; XREF: MoveDemo_Record
    4347/    3E04 : 1340 0002           		move.b	d0,2(a1)
    4348/    3E08 : 137C 0000 0003      		move.b	#0,3(a1)
    4349/    3E0E : 5478 F790           		addq.w	#2,($FFFFF790).w
    4350/    3E12 : 0278 03FF F790      		andi.w	#$3FF,($FFFFF790).w
    4351/    3E18 : 4E75                		rts	
    4352/    3E1A :                     ; ===========================================================================
    4353/    3E1A :                     
    4354/    3E1A :                     MoveDemo_On:				; XREF: MoveSonicInDemo
    4355/    3E1A : 4A38 F604           		tst.b	($FFFFF604).w
    4356/    3E1E : 6A0C                		bpl.s	loc_4022
    4357/    3E20 : 4A78 FFF0           		tst.w	($FFFFFFF0).w
    4358/    3E24 : 6B06                		bmi.s	loc_4022
    4359/    3E26 : 11FC 0004 F600      		move.b	#4,($FFFFF600).w
    4360/    3E2C :                     
    4361/    3E2C :                     loc_4022:
    4362/    3E2C : 43F9 0000 3E8A      		lea	(Demo_Index).l,a1
    4363/    3E32 : 7000                		moveq	#0,d0
    4364/    3E34 : 1038 FE10           		move.b	($FFFFFE10).w,d0
    4365/    3E38 : 0C38 0010 F600      		cmpi.b	#$10,($FFFFF600).w
    4366/    3E3E : 6602                		bne.s	loc_4038
    4367/    3E40 : 7006                		moveq	#6,d0
    4368/    3E42 :                     
    4369/    3E42 :                     loc_4038:
    4370/    3E42 : E548                		lsl.w	#2,d0
    4371/    3E44 : 2271 0000           		movea.l	(a1,d0.w),a1
    4372/    3E48 : 4A78 FFF0           		tst.w	($FFFFFFF0).w
    4373/    3E4C : 6A12                		bpl.s	loc_4056
    4374/    3E4E : 43F9 0000 3EAA      		lea	(Demo_EndIndex).l,a1
    4375/    3E54 : 3038 FFF4           		move.w	($FFFFFFF4).w,d0
    4376/    3E58 : 5340                		subq.w	#1,d0
    4377/    3E5A : E548                		lsl.w	#2,d0
    4378/    3E5C : 2271 0000           		movea.l	(a1,d0.w),a1
    4379/    3E60 :                     
    4380/    3E60 :                     loc_4056:
    4381/    3E60 : 3038 F790           		move.w	($FFFFF790).w,d0
    4382/    3E64 : D2C0                		adda.w	d0,a1
    4383/    3E66 : 1011                		move.b	(a1),d0
    4384/    3E68 : 41F8 F604           		lea	($FFFFF604).w,a0
    4385/    3E6C : 1200                		move.b	d0,d1
    4386/    3E6E : 1410                		move.b	(a0),d2
    4387/    3E70 : B500                		eor.b	d2,d0
    4388/    3E72 : 10C1                		move.b	d1,(a0)+
    4389/    3E74 : C001                		and.b	d1,d0
    4390/    3E76 : 10C0                		move.b	d0,(a0)+
    4391/    3E78 : 5338 F792           		subq.b	#1,($FFFFF792).w
    4392/    3E7C : 640A                		bcc.s	locret_407E
    4393/    3E7E : 11E9 0003 F792      		move.b	3(a1),($FFFFF792).w
    4394/    3E84 : 5478 F790           		addq.w	#2,($FFFFF790).w
    4395/    3E88 :                     
    4396/    3E88 :                     locret_407E:
    4397/    3E88 : 4E75                		rts	
    4398/    3E8A :                     ; End of function MoveSonicInDemo
    4399/    3E8A :                     
    4400/    3E8A :                     ; ===========================================================================
    4401/    3E8A :                     ; ---------------------------------------------------------------------------
    4402/    3E8A :                     ; Demo sequence	pointers
    4403/    3E8A :                     ; ---------------------------------------------------------------------------
    4404/    3E8A :                     Demo_Index:
    4405/    3E8A :                     	include "_includes-ASM/Demo pointers for intro.asm"
(1)    1/    3E8A :                     ; ---------------------------------------------------------------------------
(1)    2/    3E8A :                     ; Demo sequence	pointers
(1)    3/    3E8A :                     ; ---------------------------------------------------------------------------
(1)    4/    3E8A : 0000 40D0           	dc.l Demo_GHZ
(1)    5/    3E8E : 0000 40D0           	dc.l Demo_GHZ
(1)    6/    3E92 : 0000 4150           	dc.l Demo_MZ
(1)    7/    3E96 : 0000 4150           	dc.l Demo_MZ
(1)    8/    3E9A : 0000 4280           	dc.l Demo_SYZ
(1)    9/    3E9E : 0000 4280           	dc.l Demo_SYZ
(1)   10/    3EA2 : 0000 4300           	dc.l Demo_SS
(1)   11/    3EA6 : 0000 4300           	dc.l Demo_SS
    4406/    3EAA :                     
    4407/    3EAA :                     Demo_EndIndex:
    4408/    3EAA :                     	include "_includes-ASM/Demo pointers for ending.asm"
(1)    1/    3EAA :                     ; ---------------------------------------------------------------------------
(1)    2/    3EAA :                     ; Demo (ending) sequence pointers
(1)    3/    3EAA :                     ; ---------------------------------------------------------------------------
(1)    4/    3EAA : 0000 5B7A           	dc.l Demo_EndGHZ1
(1)    5/    3EAE : 0000 5BA8           	dc.l Demo_EndMZ
(1)    6/    3EB2 : 0000 5BE8           	dc.l Demo_EndSYZ
(1)    7/    3EB6 : 0000 5C18           	dc.l Demo_EndLZ
(1)    8/    3EBA : 0000 5C48           	dc.l Demo_EndSLZ
(1)    9/    3EBE : 0000 5C68           	dc.l Demo_EndSBZ1
(1)   10/    3EC2 : 0000 5C88           	dc.l Demo_EndSBZ2
(1)   11/    3EC6 : 0000 5CB8           	dc.l Demo_EndGHZ2
    4409/    3ECA :                     
    4410/    3ECA : 008B 0837 0042      		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
             3ED0 : 085C 006A 085F 
             3ED6 : 002F 082C          
    4411/    3EDA : 0021 0803 2830      		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
             3EE0 : 0808 002E 0815 
             3EE6 : 000F 0846          
    4412/    3EEA : 001A 08FF 08CA      		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
             3EF0 : 0000 0000 0000 
             3EF6 : 0000 0000          
    4413/    3EFA : (MACRO)              		even
    4414/    3EFA :                     
    4415/    3EFA :                     ; ---------------------------------------------------------------------------
    4416/    3EFA :                     ; Collision index loading subroutine
    4417/    3EFA :                     ; ---------------------------------------------------------------------------
    4418/    3EFA :                     
    4419/    3EFA :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    4420/    3EFA :                     
    4421/    3EFA :                     
    4422/    3EFA :                     ColIndexLoad:				; XREF: Level
    4423/    3EFA : 7000                		moveq	#0,d0
    4424/    3EFC : 1038 FE10           		move.b	($FFFFFE10).w,d0
    4425/    3F00 : E748                		lsl.w	#$03,d0					; MJ: multiply by 8 not 4
    4426/    3F02 : 21FB 0010 FFD0      		move.l	ColPointers(pc,d0.w),($FFFFFFD0).w	; MJ: get first collision set
    4427/    3F08 : D07C 0004           		add.w	#$04,d0					; MJ: increase to next location
    4428/    3F0C : 21FB 0006 FFD4      		move.l	ColPointers(pc,d0.w),($FFFFFFD4).w	; MJ: get second collision set
    4429/    3F12 : 4E75                		rts	
    4430/    3F14 :                     ; End of function ColIndexLoad
    4431/    3F14 :                     
    4432/    3F14 :                     ; ===========================================================================
    4433/    3F14 :                     ; ---------------------------------------------------------------------------
    4434/    3F14 :                     ; Collision index pointers
    4435/    3F14 :                     ; ---------------------------------------------------------------------------
    4436/    3F14 :                     ColPointers:
    4437/    3F14 :                     	include "_includes-ASM/Collision index pointers.asm"
(1)    1/    3F14 :                     ; ---------------------------------------------------------------------------
(1)    2/    3F14 :                     ; Collision index pointers
(1)    3/    3F14 :                     ; ---------------------------------------------------------------------------
(1)    4/    3F14 : 0006 61A6           	dc.l Col_GHZ_1
(1)    5/    3F18 : 0006 635E           	dc.l Col_GHZ_2
(1)    6/    3F1C : 0006 6516           	dc.l Col_LZ_1
(1)    7/    3F20 : 0006 65DA           	dc.l Col_LZ_2
(1)    8/    3F24 : 0006 669E           	dc.l Col_MZ_1
(1)    9/    3F28 : 0006 682E           	dc.l Col_MZ_2
(1)   10/    3F2C : 0006 69BE           	dc.l Col_SLZ_1
(1)   11/    3F30 : 0006 6B5C           	dc.l Col_SLZ_2
(1)   12/    3F34 : 0006 6CFA           	dc.l Col_SYZ_1
(1)   13/    3F38 : 0006 6EEE           	dc.l Col_SYZ_2
(1)   14/    3F3C : 0006 70E2           	dc.l Col_SBZ_1
(1)   15/    3F40 : 0006 733A           	dc.l Col_SBZ_2
    4438/    3F44 :                     
    4439/    3F44 :                     ; ---------------------------------------------------------------------------
    4440/    3F44 :                     ; Oscillating number subroutine
    4441/    3F44 :                     ; ---------------------------------------------------------------------------
    4442/    3F44 :                     
    4443/    3F44 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    4444/    3F44 :                     
    4445/    3F44 :                     
    4446/    3F44 :                     OscillateNumInit:			; XREF: Level
    4447/    3F44 : 43F8 FE5E           		lea	($FFFFFE5E).w,a1
    4448/    3F48 : 45F9 0000 3F58      		lea	(Osc_Data).l,a2
    4449/    3F4E : 7220                		moveq	#$20,d1
    4450/    3F50 :                     
    4451/    3F50 :                     Osc_Loop:
    4452/    3F50 : 32DA                		move.w	(a2)+,(a1)+
    4453/    3F52 : 51C9 FFFC           		dbf	d1,Osc_Loop
    4454/    3F56 : 4E75                		rts	
    4455/    3F58 :                     ; End of function OscillateNumInit
    4456/    3F58 :                     
    4457/    3F58 :                     ; ===========================================================================
    4458/    3F58 : 007C 0080           Osc_Data:	dc.w $7C, $80		; baseline values
    4459/    3F5C : 0000 0080           		dc.w 0,	$80
    4460/    3F60 : 0000 0080           		dc.w 0,	$80
    4461/    3F64 : 0000 0080           		dc.w 0,	$80
    4462/    3F68 : 0000 0080           		dc.w 0,	$80
    4463/    3F6C : 0000 0080           		dc.w 0,	$80
    4464/    3F70 : 0000 0080           		dc.w 0,	$80
    4465/    3F74 : 0000 0080           		dc.w 0,	$80
    4466/    3F78 : 0000 0080           		dc.w 0,	$80
    4467/    3F7C : 0000 50F0           		dc.w 0,	$50F0
    4468/    3F80 : 011E 2080           		dc.w $11E, $2080
    4469/    3F84 : 00B4 3080           		dc.w $B4, $3080
    4470/    3F88 : 010E 5080           		dc.w $10E, $5080
    4471/    3F8C : 01C2 7080           		dc.w $1C2, $7080
    4472/    3F90 : 0276 0080           		dc.w $276, $80
    4473/    3F94 : 0000 0080           		dc.w 0,	$80
    4474/    3F98 : 0000                		dc.w 0
    4475/    3F9A : (MACRO)              		even
    4476/    3F9A :                     
    4477/    3F9A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    4478/    3F9A :                     
    4479/    3F9A :                     
    4480/    3F9A :                     OscillateNumDo:				; XREF: Level
    4481/    3F9A : 0C38 0006 D024      		cmpi.b	#6,($FFFFD024).w
    4482/    3FA0 : 6446                		bcc.s	locret_41C4
    4483/    3FA2 : 43F8 FE5E           		lea	($FFFFFE5E).w,a1
    4484/    3FA6 : 45F9 0000 3FEA      		lea	(Osc_Data2).l,a2
    4485/    3FAC : 3619                		move.w	(a1)+,d3
    4486/    3FAE : 720F                		moveq	#$F,d1
    4487/    3FB0 :                     
    4488/    3FB0 :                     loc_4184:
    4489/    3FB0 : 341A                		move.w	(a2)+,d2
    4490/    3FB2 : 381A                		move.w	(a2)+,d4
    4491/    3FB4 : 0303                		btst	d1,d3
    4492/    3FB6 : 6614                		bne.s	loc_41A4
    4493/    3FB8 : 3029 0002           		move.w	2(a1),d0
    4494/    3FBC : D042                		add.w	d2,d0
    4495/    3FBE : 3340 0002           		move.w	d0,2(a1)
    4496/    3FC2 : D151                		add.w	d0,0(a1)
    4497/    3FC4 : B811                		cmp.b	0(a1),d4
    4498/    3FC6 : 6216                		bhi.s	loc_41BA
    4499/    3FC8 : 03C3                		bset	d1,d3
    4500/    3FCA : 6012                		bra.s	loc_41BA
    4501/    3FCC :                     ; ===========================================================================
    4502/    3FCC :                     
    4503/    3FCC :                     loc_41A4:				; XREF: OscillateNumDo
    4504/    3FCC : 3029 0002           		move.w	2(a1),d0
    4505/    3FD0 : 9042                		sub.w	d2,d0
    4506/    3FD2 : 3340 0002           		move.w	d0,2(a1)
    4507/    3FD6 : D151                		add.w	d0,0(a1)
    4508/    3FD8 : B811                		cmp.b	0(a1),d4
    4509/    3FDA : 6302                		bls.s	loc_41BA
    4510/    3FDC : 0383                		bclr	d1,d3
    4511/    3FDE :                     
    4512/    3FDE :                     loc_41BA:
    4513/    3FDE : 5849                		addq.w	#4,a1
    4514/    3FE0 : 51C9 FFCE           		dbf	d1,loc_4184
    4515/    3FE4 : 31C3 FE5E           		move.w	d3,($FFFFFE5E).w
    4516/    3FE8 :                     
    4517/    3FE8 :                     locret_41C4:
    4518/    3FE8 : 4E75                		rts	
    4519/    3FEA :                     ; End of function OscillateNumDo
    4520/    3FEA :                     
    4521/    3FEA :                     ; ===========================================================================
    4522/    3FEA : 0002 0010           Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
    4523/    3FEE : 0002 0018           		dc.w 2,	$18
    4524/    3FF2 : 0002 0020           		dc.w 2,	$20
    4525/    3FF6 : 0002 0030           		dc.w 2,	$30
    4526/    3FFA : 0004 0020           		dc.w 4,	$20
    4527/    3FFE : 0008 0008           		dc.w 8,	8
    4528/    4002 : 0008 0040           		dc.w 8,	$40
    4529/    4006 : 0004 0040           		dc.w 4,	$40
    4530/    400A : 0002 0050           		dc.w 2,	$50
    4531/    400E : 0002 0050           		dc.w 2,	$50
    4532/    4012 : 0002 0020           		dc.w 2,	$20
    4533/    4016 : 0003 0030           		dc.w 3,	$30
    4534/    401A : 0005 0050           		dc.w 5,	$50
    4535/    401E : 0007 0070           		dc.w 7,	$70
    4536/    4022 : 0002 0010           		dc.w 2,	$10
    4537/    4026 : 0002 0010           		dc.w 2,	$10
    4538/    402A : (MACRO)              		even
    4539/    402A :                     
    4540/    402A :                     ; ---------------------------------------------------------------------------
    4541/    402A :                     ; Subroutine to	change object animation	variables (rings, giant	rings)
    4542/    402A :                     ; ---------------------------------------------------------------------------
    4543/    402A :                     
    4544/    402A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    4545/    402A :                     
    4546/    402A :                     
    4547/    402A :                     ChangeRingFrame:			; XREF: Level
    4548/    402A : 5338 FEC0           		subq.b	#1,($FFFFFEC0).w
    4549/    402E : 6A10                		bpl.s	loc_421C
    4550/    4030 : 11FC 000B FEC0      		move.b	#$B,($FFFFFEC0).w
    4551/    4036 : 5338 FEC1           		subq.b	#1,($FFFFFEC1).w
    4552/    403A : 0238 0007 FEC1      		andi.b	#7,($FFFFFEC1).w
    4553/    4040 :                     
    4554/    4040 :                     loc_421C:
    4555/    4040 : 5338 FEC2           		subq.b	#1,($FFFFFEC2).w
    4556/    4044 : 6A10                		bpl.s	loc_4232
    4557/    4046 : 11FC 0007 FEC2      		move.b	#7,($FFFFFEC2).w
    4558/    404C : 5238 FEC3           		addq.b	#1,($FFFFFEC3).w
    4559/    4050 : 0238 0003 FEC3      		andi.b	#3,($FFFFFEC3).w
    4560/    4056 :                     
    4561/    4056 :                     loc_4232:
    4562/    4056 : 5338 FEC4           		subq.b	#1,($FFFFFEC4).w
    4563/    405A : 6A18                		bpl.s	loc_4250
    4564/    405C : 11FC 0007 FEC4      		move.b	#7,($FFFFFEC4).w
    4565/    4062 : 5238 FEC5           		addq.b	#1,($FFFFFEC5).w
    4566/    4066 : 0C38 0006 FEC5      		cmpi.b	#6,($FFFFFEC5).w
    4567/    406C : 6506                		bcs.s	loc_4250
    4568/    406E : 11FC 0000 FEC5      		move.b	#0,($FFFFFEC5).w
    4569/    4074 :                     
    4570/    4074 :                     loc_4250:
    4571/    4074 : 4A38 FEC6           		tst.b	($FFFFFEC6).w
    4572/    4078 : 671C                		beq.s	locret_4272
    4573/    407A : 7000                		moveq	#0,d0
    4574/    407C : 1038 FEC6           		move.b	($FFFFFEC6).w,d0
    4575/    4080 : D078 FEC8           		add.w	($FFFFFEC8).w,d0
    4576/    4084 : 31C0 FEC8           		move.w	d0,($FFFFFEC8).w
    4577/    4088 : EF58                		rol.w	#7,d0
    4578/    408A : 0240 0003           		andi.w	#3,d0
    4579/    408E : 11C0 FEC7           		move.b	d0,($FFFFFEC7).w
    4580/    4092 : 5338 FEC6           		subq.b	#1,($FFFFFEC6).w
    4581/    4096 :                     
    4582/    4096 :                     locret_4272:
    4583/    4096 : 4E75                		rts	
    4584/    4098 :                     ; End of function ChangeRingFrame
    4585/    4098 :                     
    4586/    4098 :                     ; ---------------------------------------------------------------------------
    4587/    4098 :                     ; End-of-act signpost pattern loading subroutine
    4588/    4098 :                     ; ---------------------------------------------------------------------------
    4589/    4098 :                     
    4590/    4098 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    4591/    4098 :                     
    4592/    4098 :                     
    4593/    4098 :                     SignpostArtLoad:			; XREF: Level
    4594/    4098 : 4A78 FE08           		tst.w	($FFFFFE08).w	; is debug mode	being used?
    4595/    409C : 6600 0030           		bne.w	Signpost_Exit	; if yes, branch
    4596/    40A0 : 0C38 0002 FE11      		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
    4597/    40A6 : 6726                		beq.s	Signpost_Exit	; if yes, branch
    4598/    40A8 : 3038 F700           		move.w	($FFFFF700).w,d0
    4599/    40AC : 3238 F72A           		move.w	($FFFFF72A).w,d1
    4600/    40B0 : 0441 0100           		subi.w	#$100,d1
    4601/    40B4 : B041                		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
    4602/    40B6 : 6D16                		blt.s	Signpost_Exit	; if not, branch
    4603/    40B8 : 4A38 FE1E           		tst.b	($FFFFFE1E).w
    4604/    40BC : 6710                		beq.s	Signpost_Exit
    4605/    40BE : B278 F728           		cmp.w	($FFFFF728).w,d1
    4606/    40C2 : 670A                		beq.s	Signpost_Exit
    4607/    40C4 : 31C1 F728           		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
    4608/    40C8 : 7012                		moveq	#$12,d0
    4609/    40CA : 6000 D2CC           		bra.w	LoadPLC2	; load signpost	patterns
    4610/    40CE :                     ; ===========================================================================
    4611/    40CE :                     
    4612/    40CE :                     Signpost_Exit:
    4613/    40CE : 4E75                		rts	
    4614/    40D0 :                     ; End of function SignpostArtLoad
    4615/    40D0 :                     
    4616/    40D0 :                     ; ===========================================================================
    4617/    40D0 :                     Demo_GHZ:	binclude	"_demodata/i_ghz.bin"
    4618/    4150 :                     Demo_MZ:	binclude	"_demodata/i_mz.bin"
    4619/    4280 :                     Demo_SYZ:	binclude	"_demodata/i_syz.bin"
    4620/    4300 :                     Demo_SS:	binclude	"_demodata/i_ss.bin"
    4621/    4400 :                     ; ===========================================================================
    4622/    4400 :                     
    4623/    4400 :                     ; ---------------------------------------------------------------------------
    4624/    4400 :                     ; Special Stage
    4625/    4400 :                     ; ---------------------------------------------------------------------------
    4626/    4400 :                     
    4627/    4400 :                     SpecialStage:				; XREF: GameModeArray
    4628/    4400 : 303C 00CA           		move.w	#$CA,d0
    4629/    4404 : 6100 CD7C           		bsr.w	PlaySound_Special ; play special stage entry sound
    4630/    4408 : 6100 D958           		bsr.w	Pal_MakeFlash
    4631/    440C : 46FC 2700           		move	#$2700,sr
    4632/    4410 : 4DF9 00C0 0004      		lea	($C00004).l,a6
    4633/    4416 : 3CBC 8B03           		move.w	#$8B03,(a6)
    4634/    441A : 3CBC 8004           		move.w	#$8004,(a6)
    4635/    441E : 31FC 8AAF F624      		move.w	#$8AAF,($FFFFF624).w
    4636/    4424 : 3CBC 9011           		move.w	#$9011,(a6)
    4637/    4428 : 3038 F60C           		move.w	($FFFFF60C).w,d0
    4638/    442C : 0200 00BF           		andi.b	#$BF,d0
    4639/    4430 : 33C0 00C0 0004      		move.w	d0,($C00004).l
    4640/    4436 : 6100 CC72           		bsr.w	ClearScreen
    4641/    443A : 46FC 2300           		move	#$2300,sr
    4642/    443E : 4BF9 00C0 0004      		lea	($C00004).l,a5
    4643/    4444 : 3ABC 8F01           		move.w	#$8F01,(a5)
    4644/    4448 : 2ABC 946F 93FF      		move.l	#$946F93FF,(a5)
    4645/    444E : 3ABC 9780           		move.w	#$9780,(a5)
    4646/    4452 : 2ABC 5000 0081      		move.l	#$50000081,(a5)
    4647/    4458 : 33FC 0000 00C0      		move.w	#0,($C00000).l
             445E : 0000             
    4648/    4460 :                     
    4649/    4460 :                     loc_463C:
    4650/    4460 : 3215                		move.w	(a5),d1
    4651/    4462 : 0801 0001           		btst	#1,d1
    4652/    4466 : 66F8                		bne.s	loc_463C
    4653/    4468 : 3ABC 8F02           		move.w	#$8F02,(a5)
    4654/    446C : 6100 0252           		bsr.w	SS_BGLoad
    4655/    4470 : 7014                		moveq	#$14,d0
    4656/    4472 : 6100 D05E           		bsr.w	RunPLC_ROM	; load special stage patterns
    4657/    4476 : 43F8 D000           		lea	($FFFFD000).w,a1
    4658/    447A : 7000                		moveq	#0,d0
    4659/    447C : 323C 07FF           		move.w	#$7FF,d1
    4660/    4480 :                     
    4661/    4480 :                     SS_ClrObjRam:
    4662/    4480 : 22C0                		move.l	d0,(a1)+
    4663/    4482 : 51C9 FFFC           		dbf	d1,SS_ClrObjRam	; clear	the object RAM
    4664/    4486 :                     
    4665/    4486 : 43F8 F700           		lea	($FFFFF700).w,a1
    4666/    448A : 7000                		moveq	#0,d0
    4667/    448C : 323C 003F           		move.w	#$3F,d1
    4668/    4490 :                     
    4669/    4490 :                     SS_ClrRam:
    4670/    4490 : 22C0                		move.l	d0,(a1)+
    4671/    4492 : 51C9 FFFC           		dbf	d1,SS_ClrRam	; clear	variables
    4672/    4496 :                     
    4673/    4496 : 43F8 FE60           		lea	($FFFFFE60).w,a1
    4674/    449A : 7000                		moveq	#0,d0
    4675/    449C : 323C 0027           		move.w	#$27,d1
    4676/    44A0 :                     
    4677/    44A0 :                     SS_ClrRam2:
    4678/    44A0 : 22C0                		move.l	d0,(a1)+
    4679/    44A2 : 51C9 FFFC           		dbf	d1,SS_ClrRam2	; clear	variables
    4680/    44A6 :                     
    4681/    44A6 : 43F8 AA00           		lea	($FFFFAA00).w,a1
    4682/    44AA : 7000                		moveq	#0,d0
    4683/    44AC : 323C 007F           		move.w	#$7F,d1
    4684/    44B0 :                     
    4685/    44B0 :                     SS_ClrNemRam:
    4686/    44B0 : 22C0                		move.l	d0,(a1)+
    4687/    44B2 : 51C9 FFFC           		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
    4688/    44B6 :                     
    4689/    44B6 : 4238 F64E           		clr.b	($FFFFF64E).w
    4690/    44BA : 4278 FE02           		clr.w	($FFFFFE02).w
    4691/    44BE : 700A                		moveq	#$A,d0
    4692/    44C0 : 6100 DA20           		bsr.w	PalLoad1	; load special stage pallet
    4693/    44C4 : 4EB9 0001 B444      		jsr	SS_Load
    4694/    44CA : 21FC 0000 0000      		move.l	#0,($FFFFF700).w
             44D0 : F700             
    4695/    44D2 : 21FC 0000 0000      		move.l	#0,($FFFFF704).w
             44D8 : F704             
    4696/    44DA : 11FC 0009 D000      		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
    4697/    44E0 : 6100 02A4           		bsr.w	PalCycle_SS
    4698/    44E4 : 4278 F780           		clr.w	($FFFFF780).w	; set stage angle to "upright"
    4699/    44E8 : 31FC 0040 F782      		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
    4700/    44EE : 303C 0089           		move.w	#$89,d0
    4701/    44F2 : 6100 CC88           		bsr.w	PlaySound	; play special stage BG	music
    4702/    44F6 : 31FC 0000 F790      		move.w	#0,($FFFFF790).w
    4703/    44FC : 43F9 0000 3E8A      		lea	(Demo_Index).l,a1
    4704/    4502 : 7006                		moveq	#6,d0
    4705/    4504 : E548                		lsl.w	#2,d0
    4706/    4506 : 2271 0000           		movea.l	(a1,d0.w),a1
    4707/    450A : 11E9 0001 F792      		move.b	1(a1),($FFFFF792).w
    4708/    4510 : 5338 F792           		subq.b	#1,($FFFFF792).w
    4709/    4514 : 4278 FE20           		clr.w	($FFFFFE20).w
    4710/    4518 : 4238 FE1B           		clr.b	($FFFFFE1B).w
    4711/    451C : 31FC 0000 FE08      		move.w	#0,($FFFFFE08).w
    4712/    4522 : 31FC 0708 F614      		move.w	#1800,($FFFFF614).w
    4713/    4528 : 4A38 FFE2           		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
    4714/    452C : 670E                		beq.s	SS_NoDebug	; if not, branch
    4715/    452E : 0838 0006 F604      		btst	#6,($FFFFF604).w ; is A	button pressed?
    4716/    4534 : 6706                		beq.s	SS_NoDebug	; if not, branch
    4717/    4536 : 11FC 0001 FFFA      		move.b	#1,($FFFFFFFA).w ; enable debug	mode
    4718/    453C :                     
    4719/    453C :                     SS_NoDebug:
    4720/    453C : 3038 F60C           		move.w	($FFFFF60C).w,d0
    4721/    4540 : 0000 0040           		ori.b	#$40,d0
    4722/    4544 : 33C0 00C0 0004      		move.w	d0,($C00004).l
    4723/    454A : 6100 D76A           		bsr.w	Pal_MakeWhite
    4724/    454E :                     
    4725/    454E :                     ; ---------------------------------------------------------------------------
    4726/    454E :                     ; Main Special Stage loop
    4727/    454E :                     ; ---------------------------------------------------------------------------
    4728/    454E :                     
    4729/    454E :                     SS_MainLoop:
    4730/    454E : 6100 CC3E           		bsr.w	PauseGame
    4731/    4552 : 11FC 000A F62A      		move.b	#$A,($FFFFF62A).w
    4732/    4558 : 6100 E234           		bsr.w	DelayProgram
    4733/    455C : 6100 F87C           		bsr.w	MoveSonicInDemo
    4734/    4560 : 31F8 F604 F602      		move.w	($FFFFF604).w,($FFFFF602).w
    4735/    4566 : 4EB9 0000 D106      		jsr	ObjectsLoad
    4736/    456C : 4EB9 0000 D42C      		jsr	BuildSprites
    4737/    4572 : 4EB9 0001 AF16      		jsr	SS_ShowLayout
    4738/    4578 : 6100 048E           		bsr.w	SS_BGAnimate
    4739/    457C : 4A78 FFF0           		tst.w	($FFFFFFF0).w	; is demo mode on?
    4740/    4580 : 6708                		beq.s	SS_ChkEnd	; if not, branch
    4741/    4582 : 4A78 F614           		tst.w	($FFFFF614).w	; is there time	left on	the demo?
    4742/    4586 : 6700 0130           		beq.w	SS_ToSegaScreen	; if not, branch
    4743/    458A :                     
    4744/    458A :                     SS_ChkEnd:
    4745/    458A : 0C38 0010 F600      		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
    4746/    4590 : 6700 FFBC           		beq.w	SS_MainLoop	; if yes, branch
    4747/    4594 :                     
    4748/    4594 : 4A78 FFF0           		tst.w	($FFFFFFF0).w	; is demo mode on?
    4749/    4598 : 6600 011E           		bne.w	SS_ToSegaScreen	; if yes, branch
    4750/    459C : 11FC 000C F600      		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
    4751/    45A2 : 0C78 0503 FE10      		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
    4752/    45A8 : 6504                		bcs.s	SS_End		; if not, branch
    4753/    45AA : 4278 FE10           		clr.w	($FFFFFE10).w	; set to GHZ1
    4754/    45AE :                     
    4755/    45AE :                     SS_End:
    4756/    45AE : 31FC 003C F614      		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
    4757/    45B4 : 31FC 003F F626      		move.w	#$3F,($FFFFF626).w
    4758/    45BA : 4278 F794           		clr.w	($FFFFF794).w
    4759/    45BE :                     
    4760/    45BE :                     SS_EndLoop:
    4761/    45BE : 11FC 0016 F62A      		move.b	#$16,($FFFFF62A).w
    4762/    45C4 : 6100 E1C8           		bsr.w	DelayProgram
    4763/    45C8 : 6100 F810           		bsr.w	MoveSonicInDemo
    4764/    45CC : 31F8 F604 F602      		move.w	($FFFFF604).w,($FFFFF602).w
    4765/    45D2 : 4EB9 0000 D106      		jsr	ObjectsLoad
    4766/    45D8 : 4EB9 0000 D42C      		jsr	BuildSprites
    4767/    45DE : 4EB9 0001 AF16      		jsr	SS_ShowLayout
    4768/    45E4 : 6100 0422           		bsr.w	SS_BGAnimate
    4769/    45E8 : 5378 F794           		subq.w	#1,($FFFFF794).w
    4770/    45EC : 6A0A                		bpl.s	loc_47D4
    4771/    45EE : 31FC 0002 F794      		move.w	#2,($FFFFF794).w
    4772/    45F4 : 6100 D78C           		bsr.w	Pal_ToWhite
    4773/    45F8 :                     
    4774/    45F8 :                     loc_47D4:
    4775/    45F8 : 4A78 F614           		tst.w	($FFFFF614).w
    4776/    45FC : 66C0                		bne.s	SS_EndLoop
    4777/    45FE :                     
    4778/    45FE : 46FC 2700           		move	#$2700,sr
    4779/    4602 : 4DF9 00C0 0004      		lea	($C00004).l,a6
    4780/    4608 : 3CBC 8230           		move.w	#$8230,(a6)
    4781/    460C : 3CBC 8407           		move.w	#$8407,(a6)
    4782/    4610 : 3CBC 9001           		move.w	#$9001,(a6)
    4783/    4614 : 6100 CA94           		bsr.w	ClearScreen
    4784/    4618 : 23FC 7000 0002      		move.l	#$70000002,($C00004).l
             461E : 00C0 0004          
    4785/    4622 : 41F9 0003 8CC0      		lea	(Nem_TitleCard).l,a0 ; load title card patterns
    4786/    4628 : 6100 CBFC           		bsr.w	NemDec
    4787/    462C : 4EB9 0001 C87E      		jsr	Hud_Base
    4788/    4632 : 46FC 2300           		move	#$2300,sr
    4789/    4636 : 7011                		moveq	#$11,d0
    4790/    4638 : 6100 D8C4           		bsr.w	PalLoad2	; load results screen pallet
    4791/    463C : 7000                		moveq	#0,d0
    4792/    463E : 6100 CD58           		bsr.w	LoadPLC2
    4793/    4642 : 701B                		moveq	#$1B,d0
    4794/    4644 : 6100 CD20           		bsr.w	LoadPLC		; load results screen patterns
    4795/    4648 : 11FC 0001 FE1F      		move.b	#1,($FFFFFE1F).w ; update score	counter
    4796/    464E : 11FC 0001 F7D6      		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
    4797/    4654 : 3038 FE20           		move.w	($FFFFFE20).w,d0
    4798/    4658 : C0FC 000A           		mulu.w	#10,d0		; multiply rings by 10
    4799/    465C : 31C0 F7D4           		move.w	d0,($FFFFF7D4).w ; set rings bonus
    4800/    4660 : 303C 008E           		move.w	#$8E,d0
    4801/    4664 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play end-of-level music
    4802/    466A : 43F8 D000           		lea	($FFFFD000).w,a1
    4803/    466E : 7000                		moveq	#0,d0
    4804/    4670 : 323C 07FF           		move.w	#$7FF,d1
    4805/    4674 :                     
    4806/    4674 :                     SS_EndClrObjRam:
    4807/    4674 : 22C0                		move.l	d0,(a1)+
    4808/    4676 : 51C9 FFFC           		dbf	d1,SS_EndClrObjRam ; clear object RAM
    4809/    467A :                     
    4810/    467A : 11FC 007E D5C0      		move.b	#$7E,($FFFFD5C0).w ; load results screen object
    4811/    4680 :                     
    4812/    4680 :                     SS_NormalExit:
    4813/    4680 : 6100 CB0C           		bsr.w	PauseGame
    4814/    4684 : 11FC 000C F62A      		move.b	#$C,($FFFFF62A).w
    4815/    468A : 6100 E102           		bsr.w	DelayProgram
    4816/    468E : 4EB9 0000 D106      		jsr	ObjectsLoad
    4817/    4694 : 4EB9 0000 D42C      		jsr	BuildSprites
    4818/    469A : 6100 CD36           		bsr.w	RunPLC_RAM
    4819/    469E : 4A78 FE02           		tst.w	($FFFFFE02).w
    4820/    46A2 : 67DC                		beq.s	SS_NormalExit
    4821/    46A4 : 4AB8 F680           		tst.l	($FFFFF680).w
    4822/    46A8 : 66D6                		bne.s	SS_NormalExit
    4823/    46AA : 303C 00CA           		move.w	#$CA,d0
    4824/    46AE : 6100 CAD2           		bsr.w	PlaySound_Special ; play special stage exit sound
    4825/    46B2 : 6100 D6AE           		bsr.w	Pal_MakeFlash
    4826/    46B6 : 4E75                		rts	
    4827/    46B8 :                     ; ===========================================================================
    4828/    46B8 :                     
    4829/    46B8 :                     SS_ToSegaScreen:
    4830/    46B8 : 11FC 0000 F600      		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
    4831/    46BE : 4E75                		rts
    4832/    46C0 :                     
    4833/    46C0 :                     ; ---------------------------------------------------------------------------
    4834/    46C0 :                     ; Special stage	background loading subroutine
    4835/    46C0 :                     ; ---------------------------------------------------------------------------
    4836/    46C0 :                     
    4837/    46C0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    4838/    46C0 :                     
    4839/    46C0 :                     
    4840/    46C0 :                     SS_BGLoad:				; XREF: SpecialStage
    4841/    46C0 : 43F9 00FF 0000      		lea	($FF0000).l,a1
    4842/    46C6 : 41F9 0002 CE82      		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
    4843/    46CC : 303C 4051           		move.w	#$4051,d0
    4844/    46D0 : 6100 CE32           		bsr.w	EniDec
    4845/    46D4 : 263C 5000 0001      		move.l	#$50000001,d3
    4846/    46DA : 45F9 00FF 0080      		lea	($FF0080).l,a2
    4847/    46E0 : 7E06                		moveq	#6,d7
    4848/    46E2 :                     
    4849/    46E2 :                     loc_48BE:
    4850/    46E2 : 2003                		move.l	d3,d0
    4851/    46E4 : 7C03                		moveq	#3,d6
    4852/    46E6 : 7800                		moveq	#0,d4
    4853/    46E8 : 0C47 0003           		cmpi.w	#3,d7
    4854/    46EC : 6402                		bcc.s	loc_48CC
    4855/    46EE : 7801                		moveq	#1,d4
    4856/    46F0 :                     
    4857/    46F0 :                     loc_48CC:
    4858/    46F0 : 7A07                		moveq	#7,d5
    4859/    46F2 :                     
    4860/    46F2 :                     loc_48CE:
    4861/    46F2 : 224A                		movea.l	a2,a1
    4862/    46F4 : 0A04 0001           		eori.b	#1,d4
    4863/    46F8 : 660C                		bne.s	loc_48E2
    4864/    46FA : 0C47 0006           		cmpi.w	#6,d7
    4865/    46FE : 6616                		bne.s	loc_48F2
    4866/    4700 : 43F9 00FF 0000      		lea	($FF0000).l,a1
    4867/    4706 :                     
    4868/    4706 :                     loc_48E2:
    4869/    4706 : 48E7 F800           		movem.l	d0-d4,-(sp)
    4870/    470A : 7207                		moveq	#7,d1
    4871/    470C : 7407                		moveq	#7,d2
    4872/    470E : 6100 CAF6           		bsr.w	ShowVDPGraphics
    4873/    4712 : 4CDF 001F           		movem.l	(sp)+,d0-d4
    4874/    4716 :                     
    4875/    4716 :                     loc_48F2:
    4876/    4716 : 0680 0010 0000      		addi.l	#$100000,d0
    4877/    471C : 51CD FFD4           		dbf	d5,loc_48CE
    4878/    4720 : 0680 0380 0000      		addi.l	#$3800000,d0
    4879/    4726 : 0A04 0001           		eori.b	#1,d4
    4880/    472A : 51CE FFC4           		dbf	d6,loc_48CC
    4881/    472E : 0683 1000 0000      		addi.l	#$10000000,d3
    4882/    4734 : 6A0A                		bpl.s	loc_491C
    4883/    4736 : 4843                		swap	d3
    4884/    4738 : 0683 0000 C000      		addi.l	#$C000,d3
    4885/    473E : 4843                		swap	d3
    4886/    4740 :                     
    4887/    4740 :                     loc_491C:
    4888/    4740 : D4FC 0080           		adda.w	#$80,a2
    4889/    4744 : 51CF FF9C           		dbf	d7,loc_48BE
    4890/    4748 : 43F9 00FF 0000      		lea	($FF0000).l,a1
    4891/    474E : 41F9 0002 DC46      		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
    4892/    4754 : 303C 4000           		move.w	#$4000,d0
    4893/    4758 : 6100 CDAA           		bsr.w	EniDec
    4894/    475C : 43F9 00FF 0000      		lea	($FF0000).l,a1
    4895/    4762 : 203C 4000 0003      		move.l	#$40000003,d0
    4896/    4768 : 723F                		moveq	#$3F,d1
    4897/    476A : 741F                		moveq	#$1F,d2
    4898/    476C : 6100 CA98           		bsr.w	ShowVDPGraphics
    4899/    4770 : 43F9 00FF 0000      		lea	($FF0000).l,a1
    4900/    4776 : 203C 5000 0003      		move.l	#$50000003,d0
    4901/    477C : 723F                		moveq	#$3F,d1
    4902/    477E : 743F                		moveq	#$3F,d2
    4903/    4780 : 6100 CA84           		bsr.w	ShowVDPGraphics
    4904/    4784 : 4E75                		rts	
    4905/    4786 :                     ; End of function SS_BGLoad
    4906/    4786 :                     
    4907/    4786 :                     ; ---------------------------------------------------------------------------
    4908/    4786 :                     ; Pallet cycling routine - special stage
    4909/    4786 :                     ; ---------------------------------------------------------------------------
    4910/    4786 :                     
    4911/    4786 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    4912/    4786 :                     
    4913/    4786 :                     
    4914/    4786 :                     PalCycle_SS:				; XREF: loc_DA6; SpecialStage
    4915/    4786 : 4A78 F63A           		tst.w	($FFFFF63A).w
    4916/    478A : 667E                		bne.s	locret_49E6
    4917/    478C : 5378 F79C           		subq.w	#1,($FFFFF79C).w
    4918/    4790 : 6A78                		bpl.s	locret_49E6
    4919/    4792 : 4DF9 00C0 0004      		lea	($C00004).l,a6
    4920/    4798 : 3038 F79A           		move.w	($FFFFF79A).w,d0
    4921/    479C : 5278 F79A           		addq.w	#1,($FFFFF79A).w
    4922/    47A0 : 0240 001F           		andi.w	#$1F,d0
    4923/    47A4 : E548                		lsl.w	#2,d0
    4924/    47A6 : 41F9 0000 4860      		lea	(byte_4A3C).l,a0
    4925/    47AC : D0C0                		adda.w	d0,a0
    4926/    47AE : 1018                		move.b	(a0)+,d0
    4927/    47B0 : 6A04                		bpl.s	loc_4992
    4928/    47B2 : 303C 01FF           		move.w	#$1FF,d0
    4929/    47B6 :                     
    4930/    47B6 :                     loc_4992:
    4931/    47B6 : 31C0 F79C           		move.w	d0,($FFFFF79C).w
    4932/    47BA : 7000                		moveq	#0,d0
    4933/    47BC : 1018                		move.b	(a0)+,d0
    4934/    47BE : 31C0 F7A0           		move.w	d0,($FFFFF7A0).w
    4935/    47C2 : 43F9 0000 48E0      		lea	(byte_4ABC).l,a1
    4936/    47C8 : 43F1 0000           		lea	(a1,d0.w),a1
    4937/    47CC : 303C 8200           		move.w	#-$7E00,d0
    4938/    47D0 : 1019                		move.b	(a1)+,d0
    4939/    47D2 : 3C80                		move.w	d0,(a6)
    4940/    47D4 : 11D1 F616           		move.b	(a1),($FFFFF616).w
    4941/    47D8 : 303C 8400           		move.w	#-$7C00,d0
    4942/    47DC : 1018                		move.b	(a0)+,d0
    4943/    47DE : 3C80                		move.w	d0,(a6)
    4944/    47E0 : 23FC 4000 0010      		move.l	#$40000010,($C00004).l
             47E6 : 00C0 0004          
    4945/    47EA : 23F8 F616 00C0      		move.l	($FFFFF616).w,($C00000).l
             47F0 : 0000             
    4946/    47F2 : 7000                		moveq	#0,d0
    4947/    47F4 : 1018                		move.b	(a0)+,d0
    4948/    47F6 : 6B14                		bmi.s	loc_49E8
    4949/    47F8 : 43F9 0000 48EE      		lea	(Pal_SSCyc1).l,a1
    4950/    47FE : D2C0                		adda.w	d0,a1
    4951/    4800 : 45F8 FB4E           		lea	($FFFFFB4E).w,a2
    4952/    4804 : 24D9                		move.l	(a1)+,(a2)+
    4953/    4806 : 24D9                		move.l	(a1)+,(a2)+
    4954/    4808 : 24D9                		move.l	(a1)+,(a2)+
    4955/    480A :                     
    4956/    480A :                     locret_49E6:
    4957/    480A : 4E75                		rts	
    4958/    480C :                     ; ===========================================================================
    4959/    480C :                     
    4960/    480C :                     loc_49E8:				; XREF: PalCycle_SS
    4961/    480C : 3238 F79E           		move.w	($FFFFF79E).w,d1
    4962/    4810 : 0C40 008A           		cmpi.w	#$8A,d0
    4963/    4814 : 6502                		bcs.s	loc_49F4
    4964/    4816 : 5241                		addq.w	#1,d1
    4965/    4818 :                     
    4966/    4818 :                     loc_49F4:
    4967/    4818 : C2FC 002A           		mulu.w	#$2A,d1
    4968/    481C : 43F9 0000 4936      		lea	(Pal_SSCyc2).l,a1
    4969/    4822 : D2C1                		adda.w	d1,a1
    4970/    4824 : 0240 007F           		andi.w	#$7F,d0
    4971/    4828 : 0880 0000           		bclr	#0,d0
    4972/    482C : 670E                		beq.s	loc_4A18
    4973/    482E : 45F8 FB6E           		lea	($FFFFFB6E).w,a2
    4974/    4832 : 24D1                		move.l	(a1),(a2)+
    4975/    4834 : 24E9 0004           		move.l	4(a1),(a2)+
    4976/    4838 : 24E9 0008           		move.l	8(a1),(a2)+
    4977/    483C :                     
    4978/    483C :                     loc_4A18:
    4979/    483C : D2FC 000C           		adda.w	#$C,a1
    4980/    4840 : 45F8 FB5A           		lea	($FFFFFB5A).w,a2
    4981/    4844 : 0C40 000A           		cmpi.w	#$A,d0
    4982/    4848 : 6508                		bcs.s	loc_4A2E
    4983/    484A : 0440 000A           		subi.w	#$A,d0
    4984/    484E : 45F8 FB7A           		lea	($FFFFFB7A).w,a2
    4985/    4852 :                     
    4986/    4852 :                     loc_4A2E:
    4987/    4852 : 3200                		move.w	d0,d1
    4988/    4854 : D040                		add.w	d0,d0
    4989/    4856 : D041                		add.w	d1,d0
    4990/    4858 : D2C0                		adda.w	d0,a1
    4991/    485A : 24D9                		move.l	(a1)+,(a2)+
    4992/    485C : 34D9                		move.w	(a1)+,(a2)+
    4993/    485E : 4E75                		rts	
    4994/    4860 :                     ; End of function PalCycle_SS
    4995/    4860 :                     
    4996/    4860 :                     ; ===========================================================================
    4997/    4860 : 0300 0792 0300      byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
             4866 : 0790 0300 078E 
             486C : 0300 078C          
    4998/    4870 :                     					; XREF: PalCycle_SS
    4999/    4870 : 0300 078B 0300      		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
             4876 : 0780 0300 0782 
             487C : 0300 0784          
    5000/    4880 : 0300 0786 0300      		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
             4886 : 0788 0708 0700 
             488C : 070A 070C          
    5001/    4890 : FF0C 0718 FF0C      		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
             4896 : 0718 070A 070C 
             489C : 0708 0700          
    5002/    48A0 : 0300 0688 0300      		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
             48A6 : 0686 0300 0684 
             48AC : 0300 0682          
    5003/    48B0 : 0300 0681 0300      		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
             48B6 : 068A 0300 068C 
             48BC : 0300 068E          
    5004/    48C0 : 0300 0690 0300      		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
             48C6 : 0692 0702 0624 
             48CC : 0704 0630          
    5005/    48D0 : FF06 063C FF06      		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
             48D6 : 063C 0704 0630 
             48DC : 0702 0624          
    5006/    48E0 : (MACRO)              		even
    5007/    48E0 : 1001 1800 1801      byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
             48E6 : 2000 2001 2800 
             48EC : 2801             
    5008/    48EE :                     					; XREF: PalCycle_SS
    5009/    48EE : (MACRO)              		even
    5010/    48EE :                     
    5011/    48EE :                     Pal_SSCyc1:	binclude	"_binary-files/palletes/c_ss_1.bin"
    5012/    4936 : (MACRO)              		even
    5013/    4936 :                     Pal_SSCyc2:	binclude	"_binary-files/palletes/c_ss_2.bin"
    5014/    4A08 : (MACRO)              		even
    5015/    4A08 :                     
    5016/    4A08 :                     ; ---------------------------------------------------------------------------
    5017/    4A08 :                     ; Subroutine to	make the special stage background animated
    5018/    4A08 :                     ; ---------------------------------------------------------------------------
    5019/    4A08 :                     
    5020/    4A08 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    5021/    4A08 :                     
    5022/    4A08 :                     
    5023/    4A08 :                     SS_BGAnimate:				; XREF: SpecialStage
    5024/    4A08 : 3038 F7A0           		move.w	($FFFFF7A0).w,d0
    5025/    4A0C : 660C                		bne.s	loc_4BF6
    5026/    4A0E : 31FC 0000 F70C      		move.w	#0,($FFFFF70C).w
    5027/    4A14 : 31F8 F70C F618      		move.w	($FFFFF70C).w,($FFFFF618).w
    5028/    4A1A :                     
    5029/    4A1A :                     loc_4BF6:
    5030/    4A1A : 0C40 0008           		cmpi.w	#8,d0
    5031/    4A1E : 6452                		bcc.s	loc_4C4E
    5032/    4A20 : 0C40 0006           		cmpi.w	#6,d0
    5033/    4A24 : 660E                		bne.s	loc_4C10
    5034/    4A26 : 5278 F718           		addq.w	#1,($FFFFF718).w
    5035/    4A2A : 5278 F70C           		addq.w	#1,($FFFFF70C).w
    5036/    4A2E : 31F8 F70C F618      		move.w	($FFFFF70C).w,($FFFFF618).w
    5037/    4A34 :                     
    5038/    4A34 :                     loc_4C10:
    5039/    4A34 : 7000                		moveq	#0,d0
    5040/    4A36 : 3038 F708           		move.w	($FFFFF708).w,d0
    5041/    4A3A : 4440                		neg.w	d0
    5042/    4A3C : 4840                		swap	d0
    5043/    4A3E : 43F9 0000 4AF0      		lea	(byte_4CCC).l,a1
    5044/    4A44 : 47F8 AA00           		lea	($FFFFAA00).w,a3
    5045/    4A48 : 7609                		moveq	#9,d3
    5046/    4A4A :                     
    5047/    4A4A :                     loc_4C26:
    5048/    4A4A : 302B 0002           		move.w	2(a3),d0
    5049/    4A4E : 6100 DD70           		bsr.w	CalcSine
    5050/    4A52 : 7400                		moveq	#0,d2
    5051/    4A54 : 1419                		move.b	(a1)+,d2
    5052/    4A56 : C1C2                		muls.w	d2,d0
    5053/    4A58 : E080                		asr.l	#8,d0
    5054/    4A5A : 36C0                		move.w	d0,(a3)+
    5055/    4A5C : 1419                		move.b	(a1)+,d2
    5056/    4A5E : 4882                		ext.w	d2
    5057/    4A60 : D55B                		add.w	d2,(a3)+
    5058/    4A62 : 51CB FFE6           		dbf	d3,loc_4C26
    5059/    4A66 : 47F8 AA00           		lea	($FFFFAA00).w,a3
    5060/    4A6A : 45F9 0000 4ADC      		lea	(byte_4CB8).l,a2
    5061/    4A70 : 6030                		bra.s	loc_4C7E
    5062/    4A72 :                     ; ===========================================================================
    5063/    4A72 :                     
    5064/    4A72 :                     loc_4C4E:				; XREF: SS_BGAnimate
    5065/    4A72 : 0C40 000C           		cmpi.w	#$C,d0
    5066/    4A76 : 6620                		bne.s	loc_4C74
    5067/    4A78 : 5378 F718           		subq.w	#1,($FFFFF718).w
    5068/    4A7C : 47F8 AB00           		lea	($FFFFAB00).w,a3
    5069/    4A80 : 243C 0001 8000      		move.l	#$18000,d2
    5070/    4A86 : 7206                		moveq	#6,d1
    5071/    4A88 :                     
    5072/    4A88 :                     loc_4C64:
    5073/    4A88 : 2013                		move.l	(a3),d0
    5074/    4A8A : 9082                		sub.l	d2,d0
    5075/    4A8C : 26C0                		move.l	d0,(a3)+
    5076/    4A8E : 0482 0000 2000      		subi.l	#$2000,d2
    5077/    4A94 : 51C9 FFF2           		dbf	d1,loc_4C64
    5078/    4A98 :                     
    5079/    4A98 :                     loc_4C74:
    5080/    4A98 : 47F8 AB00           		lea	($FFFFAB00).w,a3
    5081/    4A9C : 45F9 0000 4AE8      		lea	(byte_4CC4).l,a2
    5082/    4AA2 :                     
    5083/    4AA2 :                     loc_4C7E:
    5084/    4AA2 : 43F8 CC00           		lea	($FFFFCC00).w,a1
    5085/    4AA6 : 3038 F718           		move.w	($FFFFF718).w,d0
    5086/    4AAA : 4440                		neg.w	d0
    5087/    4AAC : 4840                		swap	d0
    5088/    4AAE : 7600                		moveq	#0,d3
    5089/    4AB0 : 161A                		move.b	(a2)+,d3
    5090/    4AB2 : 3438 F70C           		move.w	($FFFFF70C).w,d2
    5091/    4AB6 : 4442                		neg.w	d2
    5092/    4AB8 : 0242 00FF           		andi.w	#$FF,d2
    5093/    4ABC : E54A                		lsl.w	#2,d2
    5094/    4ABE :                     
    5095/    4ABE :                     loc_4C9A:
    5096/    4ABE : 301B                		move.w	(a3)+,d0
    5097/    4AC0 : 544B                		addq.w	#2,a3
    5098/    4AC2 : 7200                		moveq	#0,d1
    5099/    4AC4 : 121A                		move.b	(a2)+,d1
    5100/    4AC6 : 5341                		subq.w	#1,d1
    5101/    4AC8 :                     
    5102/    4AC8 :                     loc_4CA4:
    5103/    4AC8 : 2380 2000           		move.l	d0,(a1,d2.w)
    5104/    4ACC : 5842                		addq.w	#4,d2
    5105/    4ACE : 0242 03FC           		andi.w	#$3FC,d2
    5106/    4AD2 : 51C9 FFF4           		dbf	d1,loc_4CA4
    5107/    4AD6 : 51CB FFE6           		dbf	d3,loc_4C9A
    5108/    4ADA : 4E75                		rts	
    5109/    4ADC :                     ; End of function SS_BGAnimate
    5110/    4ADC :                     
    5111/    4ADC :                     ; ===========================================================================
    5112/    4ADC : 0928 1810 2818      byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
             4AE2 : 1030 1808 1000    
    5113/    4AE8 : (MACRO)              		even
    5114/    4AE8 : 0630 3030 2818      byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
             4AEE : 1818             
    5115/    4AF0 : (MACRO)              		even
    5116/    4AF0 : 0802 04FF 0203      byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
             4AF6 : 08FF 0402 0203 
             4AFC : 08FD 0402 0203 
             4B02 : 02FF             
    5117/    4B04 : (MACRO)              		even
    5118/    4B04 :                     					; XREF: SS_BGAnimate
    5119/    4B04 :                     ; ===========================================================================
    5120/    4B04 :                     
    5121/    4B04 :                     ; ---------------------------------------------------------------------------
    5122/    4B04 :                     ; Continue screen
    5123/    4B04 :                     ; ---------------------------------------------------------------------------
    5124/    4B04 :                     
    5125/    4B04 :                     ContinueScreen:				; XREF: GameModeArray
    5126/    4B04 : 6100 D132           		bsr.w	Pal_FadeFrom
    5127/    4B08 : 46FC 2700           		move	#$2700,sr
    5128/    4B0C : 3038 F60C           		move.w	($FFFFF60C).w,d0
    5129/    4B10 : 0200 00BF           		andi.b	#$BF,d0
    5130/    4B14 : 33C0 00C0 0004      		move.w	d0,($C00004).l
    5131/    4B1A : 4DF9 00C0 0004      		lea	($C00004).l,a6
    5132/    4B20 : 3CBC 8004           		move.w	#$8004,(a6)
    5133/    4B24 : 3CBC 8700           		move.w	#$8700,(a6)
    5134/    4B28 : 6100 C580           		bsr.w	ClearScreen
    5135/    4B2C : 43F8 D000           		lea	($FFFFD000).w,a1
    5136/    4B30 : 7000                		moveq	#0,d0
    5137/    4B32 : 323C 07FF           		move.w	#$7FF,d1
    5138/    4B36 :                     
    5139/    4B36 :                     Cont_ClrObjRam:
    5140/    4B36 : 22C0                		move.l	d0,(a1)+
    5141/    4B38 : 51C9 FFFC           		dbf	d1,Cont_ClrObjRam ; clear object RAM
    5142/    4B3C :                     
    5143/    4B3C : 23FC 7000 0002      		move.l	#$70000002,($C00004).l
             4B42 : 00C0 0004          
    5144/    4B46 : 41F9 0003 8CC0      		lea	(Nem_TitleCard).l,a0 ; load title card patterns
    5145/    4B4C : 6100 C6D8           		bsr.w	NemDec
    5146/    4B50 : 23FC 6000 0002      		move.l	#$60000002,($C00004).l
             4B56 : 00C0 0004          
    5147/    4B5A : 41F9 0003 AE56      		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
    5148/    4B60 : 6100 C6C4           		bsr.w	NemDec
    5149/    4B64 : 23FC 6A20 0002      		move.l	#$6A200002,($C00004).l
             4B6A : 00C0 0004          
    5150/    4B6E : 41F9 0003 B106      		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
    5151/    4B74 : 6100 C6B0           		bsr.w	NemDec
    5152/    4B78 : 720A                		moveq	#10,d1
    5153/    4B7A : 4EB9 0001 C994      		jsr	ContScrCounter	; run countdown	(start from 10)
    5154/    4B80 : 7012                		moveq	#$12,d0
    5155/    4B82 : 6100 D35E           		bsr.w	PalLoad1	; load continue	screen pallet
    5156/    4B86 : 103C 0090           		move.b	#$90,d0
    5157/    4B8A : 6100 C5F0           		bsr.w	PlaySound	; play continue	music
    5158/    4B8E : 31FC 0293 F614      		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
    5159/    4B94 : 42B8 F700           		clr.l	($FFFFF700).w
    5160/    4B98 : 21FC 0100 0000      		move.l	#$1000000,($FFFFF704).w
             4B9E : F704             
    5161/    4BA0 : 11FC 0081 D000      		move.b	#$81,($FFFFD000).w ; load Sonic	object
    5162/    4BA6 : 11FC 0080 D040      		move.b	#$80,($FFFFD040).w ; load continue screen objects
    5163/    4BAC : 11FC 0080 D080      		move.b	#$80,($FFFFD080).w
    5164/    4BB2 : 11FC 0003 D098      		move.b	#3,($FFFFD098).w
    5165/    4BB8 : 11FC 0004 D09A      		move.b	#4,($FFFFD09A).w
    5166/    4BBE : 11FC 0080 D0C0      		move.b	#$80,($FFFFD0C0).w
    5167/    4BC4 : 11FC 0004 D0E4      		move.b	#4,($FFFFD0E4).w
    5168/    4BCA : 4EB9 0000 D106      		jsr	ObjectsLoad
    5169/    4BD0 : 4EB9 0000 D42C      		jsr	BuildSprites
    5170/    4BD6 : 3038 F60C           		move.w	($FFFFF60C).w,d0
    5171/    4BDA : 0000 0040           		ori.b	#$40,d0
    5172/    4BDE : 33C0 00C0 0004      		move.w	d0,($C00004).l
    5173/    4BE4 : 6100 CFAC           		bsr.w	Pal_FadeTo
    5174/    4BE8 :                     
    5175/    4BE8 :                     ; ---------------------------------------------------------------------------
    5176/    4BE8 :                     ; Continue screen main loop
    5177/    4BE8 :                     ; ---------------------------------------------------------------------------
    5178/    4BE8 :                     
    5179/    4BE8 :                     Cont_MainLoop:
    5180/    4BE8 : 11FC 0016 F62A      		move.b	#$16,($FFFFF62A).w
    5181/    4BEE : 6100 DB9E           		bsr.w	DelayProgram
    5182/    4BF2 : 0C38 0006 D024      		cmpi.b	#6,($FFFFD024).w
    5183/    4BF8 : 641C                		bcc.s	loc_4DF2
    5184/    4BFA : 46FC 2700           		move	#$2700,sr
    5185/    4BFE : 3238 F614           		move.w	($FFFFF614).w,d1
    5186/    4C02 : 82FC 003C           		divu.w	#$3C,d1
    5187/    4C06 : 0281 0000 000F      		andi.l	#$F,d1
    5188/    4C0C : 4EB9 0001 C994      		jsr	ContScrCounter
    5189/    4C12 : 46FC 2300           		move	#$2300,sr
    5190/    4C16 :                     
    5191/    4C16 :                     loc_4DF2:
    5192/    4C16 : 4EB9 0000 D106      		jsr	ObjectsLoad
    5193/    4C1C : 4EB9 0000 D42C      		jsr	BuildSprites
    5194/    4C22 : 0C78 0180 D008      		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
    5195/    4C28 : 6418                		bcc.s	Cont_GotoLevel	; if yes, branch
    5196/    4C2A : 0C38 0006 D024      		cmpi.b	#6,($FFFFD024).w
    5197/    4C30 : 64B6                		bcc.s	Cont_MainLoop
    5198/    4C32 : 4A78 F614           		tst.w	($FFFFF614).w
    5199/    4C36 : 6600 FFB0           		bne.w	Cont_MainLoop
    5200/    4C3A : 11FC 0000 F600      		move.b	#0,($FFFFF600).w ; go to Sega screen
    5201/    4C40 : 4E75                		rts	
    5202/    4C42 :                     ; ===========================================================================
    5203/    4C42 :                     
    5204/    4C42 :                     Cont_GotoLevel:				; XREF: Cont_MainLoop
    5205/    4C42 : 11FC 000C F600      		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
    5206/    4C48 : 11FC 0003 FE12      		move.b	#3,($FFFFFE12).w ; set lives to	3
    5207/    4C4E : 7000                		moveq	#0,d0
    5208/    4C50 : 31C0 FE20           		move.w	d0,($FFFFFE20).w ; clear rings
    5209/    4C54 : 21C0 FE22           		move.l	d0,($FFFFFE22).w ; clear time
    5210/    4C58 : 21C0 FE26           		move.l	d0,($FFFFFE26).w ; clear score
    5211/    4C5C : 11C0 FE30           		move.b	d0,($FFFFFE30).w ; clear lamppost count
    5212/    4C60 : 5338 FE18           		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
    5213/    4C64 : 4E75                		rts	
    5214/    4C66 :                     ; ===========================================================================
    5215/    4C66 :                     
    5216/    4C66 :                     ; ---------------------------------------------------------------------------
    5217/    4C66 :                     ; Object 80 - Continue screen elements
    5218/    4C66 :                     ; ---------------------------------------------------------------------------
    5219/    4C66 :                     
    5220/    4C66 :                     Obj80:					; XREF: Obj_Index
    5221/    4C66 : 7000                		moveq	#0,d0
    5222/    4C68 : 1028 0024           		move.b	$24(a0),d0
    5223/    4C6C : 323B 0006           		move.w	Obj80_Index(pc,d0.w),d1
    5224/    4C70 : 4EFB 1002           		jmp	Obj80_Index(pc,d1.w)
    5225/    4C74 :                     ; ===========================================================================
    5226/    4C74 : 0008                Obj80_Index:	dc.w Obj80_Main-Obj80_Index
    5227/    4C76 : 0038                		dc.w Obj80_Display-Obj80_Index
    5228/    4C78 : 005C                		dc.w Obj80_MakeMiniSonic-Obj80_Index
    5229/    4C7A : 00CE                		dc.w Obj80_ChkType-Obj80_Index
    5230/    4C7C :                     ; ===========================================================================
    5231/    4C7C :                     
    5232/    4C7C :                     Obj80_Main:				; XREF: Obj80_Index
    5233/    4C7C : 5428 0024           		addq.b	#2,$24(a0)
    5234/    4C80 : 217C 0000 4E78      		move.l	#Map_obj80,4(a0)
             4C86 : 0004             
    5235/    4C88 : 317C 8500 0002      		move.w	#$8500,2(a0)
    5236/    4C8E : 117C 0000 0001      		move.b	#0,1(a0)
    5237/    4C94 : 117C 003C 0019      		move.b	#$3C,$19(a0)
    5238/    4C9A : 317C 0120 0008      		move.w	#$120,8(a0)
    5239/    4CA0 : 317C 00C0 000A      		move.w	#$C0,$A(a0)
    5240/    4CA6 : 31FC 0000 FE20      		move.w	#0,($FFFFFE20).w ; clear rings
    5241/    4CAC :                     
    5242/    4CAC :                     Obj80_Display:				; XREF: Obj80_Index
    5243/    4CAC : 4EF9 0000 D3D2      		jmp	DisplaySprite
    5244/    4CB2 :                     ; ===========================================================================
    5245/    4CB2 :                     Obj80_MiniSonicPos:
    5246/    4CB2 : 0116 012A 0102      		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
             4CB8 : 013E 00EE 0152 
             4CBE : 00DA 0166 00C6    
    5247/    4CC4 : 017A 00B2 018E      		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
             4CCA : 009E 01A2 008A    
    5248/    4CD0 :                     ; ===========================================================================
    5249/    4CD0 :                     
    5250/    4CD0 :                     Obj80_MakeMiniSonic:			; XREF: Obj80_Index
    5251/    4CD0 : 2248                		movea.l	a0,a1
    5252/    4CD2 : 45F9 0000 4CB2      		lea	(Obj80_MiniSonicPos).l,a2
    5253/    4CD8 : 7200                		moveq	#0,d1
    5254/    4CDA : 1238 FE18           		move.b	($FFFFFE18).w,d1
    5255/    4CDE : 5501                		subq.b	#2,d1
    5256/    4CE0 : 6406                		bcc.s	loc_4EC4
    5257/    4CE2 : 4EF9 0000 D40E      		jmp	DeleteObject
    5258/    4CE8 :                     ; ===========================================================================
    5259/    4CE8 :                     
    5260/    4CE8 :                     loc_4EC4:				; XREF: Obj80_MakeMiniSonic
    5261/    4CE8 : 7601                		moveq	#1,d3
    5262/    4CEA : 0C01 000E           		cmpi.b	#$E,d1
    5263/    4CEE : 6504                		bcs.s	loc_4ED0
    5264/    4CF0 : 7600                		moveq	#0,d3
    5265/    4CF2 : 720E                		moveq	#$E,d1
    5266/    4CF4 :                     
    5267/    4CF4 :                     loc_4ED0:
    5268/    4CF4 : 1401                		move.b	d1,d2
    5269/    4CF6 : 0202 0001           		andi.b	#1,d2
    5270/    4CFA :                     
    5271/    4CFA :                     Obj80_MiniSonLoop:
    5272/    4CFA : 12BC 0080           		move.b	#$80,0(a1)	; load mini Sonic object
    5273/    4CFE : 335A 0008           		move.w	(a2)+,8(a1)
    5274/    4D02 : 4A02                		tst.b	d2
    5275/    4D04 : 6706                		beq.s	loc_4EEA
    5276/    4D06 : 0469 000A 0008      		subi.w	#$A,8(a1)
    5277/    4D0C :                     
    5278/    4D0C :                     loc_4EEA:
    5279/    4D0C : 337C 00D0 000A      		move.w	#$D0,$A(a1)
    5280/    4D12 : 137C 0006 001A      		move.b	#6,$1A(a1)
    5281/    4D18 : 137C 0006 0024      		move.b	#6,$24(a1)
    5282/    4D1E : 237C 0000 4E78      		move.l	#Map_obj80,4(a1)
             4D24 : 0004             
    5283/    4D26 : 337C 8551 0002      		move.w	#$8551,2(a1)
    5284/    4D2C : 137C 0000 0001      		move.b	#0,1(a1)
    5285/    4D32 : 43E9 0040           		lea	$40(a1),a1
    5286/    4D36 : 51C9 FFC2           		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
    5287/    4D3A : 43E9 FFC0           		lea	-$40(a1),a1
    5288/    4D3E : 1343 0028           		move.b	d3,$28(a1)
    5289/    4D42 :                     
    5290/    4D42 :                     Obj80_ChkType:				; XREF: Obj80_Index
    5291/    4D42 : 4A28 0028           		tst.b	$28(a0)
    5292/    4D46 : 671A                		beq.s	loc_4F40
    5293/    4D48 : 0C38 0006 D024      		cmpi.b	#6,($FFFFD024).w
    5294/    4D4E : 6512                		bcs.s	loc_4F40
    5295/    4D50 : 1038 FE0F           		move.b	($FFFFFE0F).w,d0
    5296/    4D54 : 0200 0001           		andi.b	#1,d0
    5297/    4D58 : 6608                		bne.s	loc_4F40
    5298/    4D5A : 4A78 D010           		tst.w	($FFFFD010).w
    5299/    4D5E : 6618                		bne.s	Obj80_Delete
    5300/    4D60 : 4E75                		rts	
    5301/    4D62 :                     ; ===========================================================================
    5302/    4D62 :                     
    5303/    4D62 :                     loc_4F40:				; XREF: Obj80_ChkType
    5304/    4D62 : 1038 FE0F           		move.b	($FFFFFE0F).w,d0
    5305/    4D66 : 0200 000F           		andi.b	#$F,d0
    5306/    4D6A : 6606                		bne.s	Obj80_Display2
    5307/    4D6C : 0868 0000 001A      		bchg	#0,$1A(a0)
    5308/    4D72 :                     
    5309/    4D72 :                     Obj80_Display2:
    5310/    4D72 : 4EF9 0000 D3D2      		jmp	DisplaySprite
    5311/    4D78 :                     ; ===========================================================================
    5312/    4D78 :                     
    5313/    4D78 :                     Obj80_Delete:				; XREF: Obj80_ChkType
    5314/    4D78 : 4EF9 0000 D40E      		jmp	DeleteObject
    5315/    4D7E :                     ; ===========================================================================
    5316/    4D7E :                     
    5317/    4D7E :                     ; ---------------------------------------------------------------------------
    5318/    4D7E :                     ; Object 81 - Sonic on the continue screen
    5319/    4D7E :                     ; ---------------------------------------------------------------------------
    5320/    4D7E :                     
    5321/    4D7E :                     Obj81:					; XREF: Obj_Index
    5322/    4D7E : 7000                		moveq	#0,d0
    5323/    4D80 : 1028 0024           		move.b	$24(a0),d0
    5324/    4D84 : 323B 000C           		move.w	Obj81_Index(pc,d0.w),d1
    5325/    4D88 : 4EBB 1008           		jsr	Obj81_Index(pc,d1.w)
    5326/    4D8C : 4EF9 0000 D3D2      		jmp	DisplaySprite
    5327/    4D92 :                     ; ===========================================================================
    5328/    4D92 : 0008                Obj81_Index:	dc.w Obj81_Main-Obj81_Index
    5329/    4D94 : 003E                		dc.w Obj81_ChkLand-Obj81_Index
    5330/    4D96 : 0076                		dc.w Obj81_Animate-Obj81_Index
    5331/    4D98 : 00B0                		dc.w Obj81_Run-Obj81_Index
    5332/    4D9A :                     ; ===========================================================================
    5333/    4D9A :                     
    5334/    4D9A :                     Obj81_Main:				; XREF: Obj81_Index
    5335/    4D9A : 5428 0024           		addq.b	#2,$24(a0)
    5336/    4D9E : 317C 00A0 0008      		move.w	#$A0,8(a0)
    5337/    4DA4 : 317C 00C0 000C      		move.w	#$C0,$C(a0)
    5338/    4DAA : 217C 0002 1148      		move.l	#Map_Sonic,4(a0)
             4DB0 : 0004             
    5339/    4DB2 : 317C 0780 0002      		move.w	#$780,2(a0)
    5340/    4DB8 : 117C 0004 0001      		move.b	#4,1(a0)
    5341/    4DBE : 117C 0002 0018      		move.b	#2,$18(a0)
    5342/    4DC4 : 117C 001D 001C      		move.b	#$1D,$1C(a0)	; use "floating" animation
    5343/    4DCA : 317C 0400 0012      		move.w	#$400,$12(a0)	; make Sonic fall from above
    5344/    4DD0 :                     
    5345/    4DD0 :                     Obj81_ChkLand:				; XREF: Obj81_Index
    5346/    4DD0 : 0C68 01A0 000C      		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
    5347/    4DD6 : 661E                		bne.s	Obj81_ShowFall	; if not, branch
    5348/    4DD8 : 5428 0024           		addq.b	#2,$24(a0)
    5349/    4DDC : 4268 0012           		clr.w	$12(a0)		; stop Sonic falling
    5350/    4DE0 : 217C 0000 4E78      		move.l	#Map_obj80,4(a0)
             4DE6 : 0004             
    5351/    4DE8 : 317C 8500 0002      		move.w	#$8500,2(a0)
    5352/    4DEE : 117C 0000 001C      		move.b	#0,$1C(a0)
    5353/    4DF4 : 6012                		bra.s	Obj81_Animate
    5354/    4DF6 :                     ; ===========================================================================
    5355/    4DF6 :                     
    5356/    4DF6 :                     Obj81_ShowFall:				; XREF: Obj81_ChkLand
    5357/    4DF6 : 4EB9 0000 D3AC      		jsr	SpeedToPos
    5358/    4DFC : 4EB9 0001 3784      		jsr	Sonic_Animate
    5359/    4E02 : 4EF9 0001 39FE      		jmp	LoadSonicDynPLC
    5360/    4E08 :                     ; ===========================================================================
    5361/    4E08 :                     
    5362/    4E08 :                     Obj81_Animate:				; XREF: Obj81_Index
    5363/    4E08 : 4A38 F605           		tst.b	($FFFFF605).w	; is any button	pressed?
    5364/    4E0C : 6B0C                		bmi.s	Obj81_GetUp	; if yes, branch
    5365/    4E0E : 43F9 0000 4E6A      		lea	(Ani_obj81).l,a1
    5366/    4E14 : 4EF9 0000 A4FE      		jmp	AnimateSprite
    5367/    4E1A :                     ; ===========================================================================
    5368/    4E1A :                     
    5369/    4E1A :                     Obj81_GetUp:				; XREF: Obj81_Animate
    5370/    4E1A : 5428 0024           		addq.b	#2,$24(a0)
    5371/    4E1E : 217C 0002 1148      		move.l	#Map_Sonic,4(a0)
             4E24 : 0004             
    5372/    4E26 : 317C 0780 0002      		move.w	#$780,2(a0)
    5373/    4E2C : 117C 001E 001C      		move.b	#$1E,$1C(a0)	; use "getting up" animation
    5374/    4E32 : 4268 0014           		clr.w	$14(a0)
    5375/    4E36 : 5168 000C           		subq.w	#8,$C(a0)
    5376/    4E3A : 103C 00E0           		move.b	#$E0,d0
    5377/    4E3E : 6100 C342           		bsr.w	PlaySound_Special ; fade out music
    5378/    4E42 :                     
    5379/    4E42 :                     Obj81_Run:				; XREF: Obj81_Index
    5380/    4E42 : 0C68 0800 0014      		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
    5381/    4E48 : 6608                		bne.s	Obj81_AddSpeed	; if too low, branch
    5382/    4E4A : 317C 1000 0010      		move.w	#$1000,$10(a0)	; move Sonic to	the right
    5383/    4E50 : 6006                		bra.s	Obj81_ShowRun
    5384/    4E52 :                     ; ===========================================================================
    5385/    4E52 :                     
    5386/    4E52 :                     Obj81_AddSpeed:				; XREF: Obj81_Run
    5387/    4E52 : 0668 0020 0014      		addi.w	#$20,$14(a0)	; increase "run	speed"
    5388/    4E58 :                     
    5389/    4E58 :                     Obj81_ShowRun:				; XREF: Obj81_Run
    5390/    4E58 : 4EB9 0000 D3AC      		jsr	SpeedToPos
    5391/    4E5E : 4EB9 0001 3784      		jsr	Sonic_Animate
    5392/    4E64 : 4EF9 0001 39FE      		jmp	LoadSonicDynPLC
    5393/    4E6A :                     ; ===========================================================================
    5394/    4E6A :                     Ani_obj81:
    5395/    4E6A :                     	include "_animations/obj81.asm"
(1)    1/    4E6A :                     ; ---------------------------------------------------------------------------
(1)    2/    4E6A :                     ; Animation script - Sonic on the continue screen
(1)    3/    4E6A :                     ; ---------------------------------------------------------------------------
(1)    4/    4E6A : 0002                		dc.w byte_504A-Ani_obj81
(1)    5/    4E6C : 0401 0101 0102      byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
             4E72 : 0202 0303 FF       
(1)    6/    4E77 : (MACRO)              		even
(1)    6/    4E77 : 00                                          dc.b 0 ;ds.b 1 
    5396/    4E78 :                     
    5397/    4E78 :                     ; ---------------------------------------------------------------------------
    5398/    4E78 :                     ; Sprite mappings - Continue screen
    5399/    4E78 :                     ; ---------------------------------------------------------------------------
    5400/    4E78 :                     Map_obj80:
    5401/    4E78 :                     	include "_mappings/obj80.asm"
(1)    1/    4E78 :                     ; ---------------------------------------------------------------------------
(1)    2/    4E78 :                     ; Sprite mappings - Continue screen
(1)    3/    4E78 :                     ; ---------------------------------------------------------------------------
(1)    4/    4E78 : 0010 0048           		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
(1)    5/    4E7C : 0058 0068           		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
(1)    6/    4E80 : 0078 0083           		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
(1)    7/    4E84 : 0083 0089           		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
(1)    8/    4E88 : 0B                  byte_5066:	dc.b $B
(1)    9/    4E89 : F805 0088 C4        		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
(1)   10/    4E8E : F805 00B2 D4        		dc.b $F8, 5, 0,	$B2, $D4
(1)   11/    4E93 : F805 00AE E4        		dc.b $F8, 5, 0,	$AE, $E4
(1)   12/    4E98 : F805 00C2 F4        		dc.b $F8, 5, 0,	$C2, $F4
(1)   13/    4E9D : F801 00A0 04        		dc.b $F8, 1, 0,	$A0, 4
(1)   14/    4EA2 : F805 00AE 0C        		dc.b $F8, 5, 0,	$AE, $C
(1)   15/    4EA7 : F805 00C6 1C        		dc.b $F8, 5, 0,	$C6, $1C
(1)   16/    4EAC : F805 0090 2C        		dc.b $F8, 5, 0,	$90, $2C
(1)   17/    4EB1 : 3805 2021 E8        		dc.b $38, 5, $20, $21, $E8
(1)   18/    4EB6 : 3805 2021 08        		dc.b $38, 5, $20, $21, 8
(1)   19/    4EBB : 3605 01FC F8        		dc.b $36, 5, 1,	$FC, $F8
(1)   20/    4EC0 : 03                  byte_509E:	dc.b 3
(1)   21/    4EC1 : 0405 0015 FC        		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
(1)   22/    4EC6 : F40A 0006 EC        		dc.b $F4, $A, 0, 6, $EC
(1)   23/    4ECB : F406 000F 04        		dc.b $F4, 6, 0,	$F, 4
(1)   24/    4ED0 : 03                  byte_50AE:	dc.b 3
(1)   25/    4ED1 : 0405 0019 FC        		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
(1)   26/    4ED6 : F40A 0006 EC        		dc.b $F4, $A, 0, 6, $EC
(1)   27/    4EDB : F406 000F 04        		dc.b $F4, 6, 0,	$F, 4
(1)   28/    4EE0 : 03                  byte_50BE:	dc.b 3
(1)   29/    4EE1 : 0405 001D FC        		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
(1)   30/    4EE6 : F40A 0006 EC        		dc.b $F4, $A, 0, 6, $EC
(1)   31/    4EEB : F406 000F 04        		dc.b $F4, 6, 0,	$F, 4
(1)   32/    4EF0 : 02                  byte_50CE:	dc.b 2
(1)   33/    4EF1 : 6009 2000 E8        		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
(1)   34/    4EF6 : 6009 2800 00        		dc.b $60, 9, $28, 0, 0
(1)   35/    4EFB : 01                  byte_50D9:	dc.b 1
(1)   36/    4EFC : 0006 0012 00        		dc.b 0,	6, 0, $12, 0	; mini Sonic
(1)   37/    4F01 : 01                  byte_50DF:	dc.b 1
(1)   38/    4F02 : 0006 0018 00        		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
(1)   39/    4F07 : (MACRO)              		even
(1)   39/    4F07 : 00                                          dc.b 0 ;ds.b 1 
    5402/    4F08 :                     
    5403/    4F08 :                     ; ===========================================================================
    5404/    4F08 :                     ; ---------------------------------------------------------------------------
    5405/    4F08 :                     ; Ending sequence in Green Hill	Zone
    5406/    4F08 :                     ; ---------------------------------------------------------------------------
    5407/    4F08 :                     
    5408/    4F08 :                     EndingSequence:				; XREF: GameModeArray
    5409/    4F08 : 103C 00E4           		move.b	#$E4,d0
    5410/    4F0C : 6100 C274           		bsr.w	PlaySound_Special ; stop music
    5411/    4F10 : 6100 CD26           		bsr.w	Pal_FadeFrom
    5412/    4F14 : 43F8 D000           		lea	($FFFFD000).w,a1
    5413/    4F18 : 7000                		moveq	#0,d0
    5414/    4F1A : 323C 07FF           		move.w	#$7FF,d1
    5415/    4F1E :                     
    5416/    4F1E :                     End_ClrObjRam:
    5417/    4F1E : 22C0                		move.l	d0,(a1)+
    5418/    4F20 : 51C9 FFFC           		dbf	d1,End_ClrObjRam ; clear object	RAM
    5419/    4F24 :                     
    5420/    4F24 : 43F8 F628           		lea	($FFFFF628).w,a1
    5421/    4F28 : 7000                		moveq	#0,d0
    5422/    4F2A : 323C 0015           		move.w	#$15,d1
    5423/    4F2E :                     
    5424/    4F2E :                     End_ClrRam:
    5425/    4F2E : 22C0                		move.l	d0,(a1)+
    5426/    4F30 : 51C9 FFFC           		dbf	d1,End_ClrRam	; clear	variables
    5427/    4F34 :                     
    5428/    4F34 : 43F8 F700           		lea	($FFFFF700).w,a1
    5429/    4F38 : 7000                		moveq	#0,d0
    5430/    4F3A : 323C 003F           		move.w	#$3F,d1
    5431/    4F3E :                     
    5432/    4F3E :                     End_ClrRam2:
    5433/    4F3E : 22C0                		move.l	d0,(a1)+
    5434/    4F40 : 51C9 FFFC           		dbf	d1,End_ClrRam2	; clear	variables
    5435/    4F44 :                     
    5436/    4F44 : 43F8 FE60           		lea	($FFFFFE60).w,a1
    5437/    4F48 : 7000                		moveq	#0,d0
    5438/    4F4A : 323C 0047           		move.w	#$47,d1
    5439/    4F4E :                     
    5440/    4F4E :                     End_ClrRam3:
    5441/    4F4E : 22C0                		move.l	d0,(a1)+
    5442/    4F50 : 51C9 FFFC           		dbf	d1,End_ClrRam3	; clear	variables
    5443/    4F54 :                     
    5444/    4F54 : 46FC 2700           		move	#$2700,sr
    5445/    4F58 : 3038 F60C           		move.w	($FFFFF60C).w,d0
    5446/    4F5C : 0200 00BF           		andi.b	#$BF,d0
    5447/    4F60 : 33C0 00C0 0004      		move.w	d0,($C00004).l
    5448/    4F66 : 6100 C142           		bsr.w	ClearScreen
    5449/    4F6A : 4DF9 00C0 0004      		lea	($C00004).l,a6
    5450/    4F70 : 3CBC 8B03           		move.w	#$8B03,(a6)
    5451/    4F74 : 3CBC 8230           		move.w	#$8230,(a6)
    5452/    4F78 : 3CBC 8407           		move.w	#$8407,(a6)
    5453/    4F7C : 3CBC 857C           		move.w	#$857C,(a6)
    5454/    4F80 : 3CBC 9001           		move.w	#$9001,(a6)
    5455/    4F84 : 3CBC 8004           		move.w	#$8004,(a6)
    5456/    4F88 : 3CBC 8720           		move.w	#$8720,(a6)
    5457/    4F8C : 31FC 8ADF F624      		move.w	#$8ADF,($FFFFF624).w
    5458/    4F92 : 3CB8 F624           		move.w	($FFFFF624).w,(a6)
    5459/    4F96 : 31FC 001E FE14      		move.w	#$1E,($FFFFFE14).w
    5460/    4F9C : 31FC 0600 FE10      		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
    5461/    4FA2 : 0C38 0006 FE57      		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
    5462/    4FA8 : 6706                		beq.s	End_LoadData	; if yes, branch
    5463/    4FAA : 31FC 0601 FE10      		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
    5464/    4FB0 :                     
    5465/    4FB0 :                     End_LoadData:
    5466/    4FB0 : 701C                		moveq	#$1C,d0
    5467/    4FB2 : 6100 C51E           		bsr.w	RunPLC_ROM	; load ending sequence patterns
    5468/    4FB6 : 4EB9 0001 C87E      		jsr	Hud_Base
    5469/    4FBC : 6100 0D2A           		bsr.w	LevelSizeLoad
    5470/    4FC0 : 6100 1112           		bsr.w	DeformBgLayer
    5471/    4FC4 : 08F8 0002 F754      		bset	#2,($FFFFF754).w
    5472/    4FCA : 6100 1B22           		bsr.w	MainLoadBlockLoad
    5473/    4FCE : 6100 1AD0           		bsr.w	LoadTilesFromStart
    5474/    4FD2 :                     	;	move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
    5475/    4FD2 : 21FC 0006 61A6      		move.l	#Col_GHZ_1,($FFFFFFD0).w			; MJ: Set first collision for ending
             4FD8 : FFD0             
    5476/    4FDA : 21FC 0006 635E      		move.l	#Col_GHZ_2,($FFFFFFD4).w			; MJ: Set second collision for ending
             4FE0 : FFD4             
    5477/    4FE2 : 46FC 2300           		move	#$2300,sr
    5478/    4FE6 : 41F9 0006 3008      		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
    5479/    4FEC : 43F8 9400           		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
    5480/    4FF0 : 6100 C690           		bsr.w	KosDec
    5481/    4FF4 : 7003                		moveq	#3,d0
    5482/    4FF6 : 6100 CEEA           		bsr.w	PalLoad1	; load Sonic's pallet
    5483/    4FFA : 303C 008B           		move.w	#$8B,d0
    5484/    4FFE : 6100 C17C           		bsr.w	PlaySound	; play ending sequence music
    5485/    5002 : 0838 0006 F604      		btst	#6,($FFFFF604).w ; is button A pressed?
    5486/    5008 : 6706                		beq.s	End_LoadSonic	; if not, branch
    5487/    500A : 11FC 0001 FFFA      		move.b	#1,($FFFFFFFA).w ; enable debug	mode
    5488/    5010 :                     
    5489/    5010 :                     End_LoadSonic:
    5490/    5010 : 11FC 0001 D000      		move.b	#1,($FFFFD000).w ; load	Sonic object
    5491/    5016 : 08F8 0000 D022      		bset	#0,($FFFFD022).w ; make	Sonic face left
    5492/    501C : 11FC 0001 F7CC      		move.b	#1,($FFFFF7CC).w ; lock	controls
    5493/    5022 : 31FC 0400 F602      		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
    5494/    5028 : 31FC F800 D014      		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
    5495/    502E : 11FC 0021 D040      		move.b	#$21,($FFFFD040).w ; load HUD object
    5496/    5034 : 4EB9 0000 D6A8      		jsr	ObjPosLoad
    5497/    503A : 4EB9 0000 D106      		jsr	ObjectsLoad
    5498/    5040 : 4EB9 0000 D42C      		jsr	BuildSprites
    5499/    5046 : 7000                		moveq	#0,d0
    5500/    5048 : 31C0 FE20           		move.w	d0,($FFFFFE20).w
    5501/    504C : 21C0 FE22           		move.l	d0,($FFFFFE22).w
    5502/    5050 : 11C0 FE1B           		move.b	d0,($FFFFFE1B).w
    5503/    5054 : 11C0 FE2C           		move.b	d0,($FFFFFE2C).w
    5504/    5058 : 11C0 FE2D           		move.b	d0,($FFFFFE2D).w
    5505/    505C : 11C0 FE2E           		move.b	d0,($FFFFFE2E).w
    5506/    5060 : 11C0 FE2F           		move.b	d0,($FFFFFE2F).w
    5507/    5064 : 31C0 FE08           		move.w	d0,($FFFFFE08).w
    5508/    5068 : 31C0 FE02           		move.w	d0,($FFFFFE02).w
    5509/    506C : 31C0 FE04           		move.w	d0,($FFFFFE04).w
    5510/    5070 : 6100 EED2           		bsr.w	OscillateNumInit
    5511/    5074 : 11FC 0001 FE1F      		move.b	#1,($FFFFFE1F).w
    5512/    507A : 11FC 0001 FE1D      		move.b	#1,($FFFFFE1D).w
    5513/    5080 : 11FC 0000 FE1E      		move.b	#0,($FFFFFE1E).w
    5514/    5086 : 31FC 0708 F614      		move.w	#1800,($FFFFF614).w
    5515/    508C : 11FC 0018 F62A      		move.b	#$18,($FFFFF62A).w
    5516/    5092 : 6100 D6FA           		bsr.w	DelayProgram
    5517/    5096 : 3038 F60C           		move.w	($FFFFF60C).w,d0
    5518/    509A : 0000 0040           		ori.b	#$40,d0
    5519/    509E : 33C0 00C0 0004      		move.w	d0,($C00004).l
    5520/    50A4 : 31FC 003F F626      		move.w	#$3F,($FFFFF626).w
    5521/    50AA : 6100 CAE6           		bsr.w	Pal_FadeTo
    5522/    50AE :                     
    5523/    50AE :                     ; ---------------------------------------------------------------------------
    5524/    50AE :                     ; Main ending sequence loop
    5525/    50AE :                     ; ---------------------------------------------------------------------------
    5526/    50AE :                     
    5527/    50AE :                     End_MainLoop:
    5528/    50AE : 6100 C0DE           		bsr.w	PauseGame
    5529/    50B2 : 11FC 0018 F62A      		move.b	#$18,($FFFFF62A).w
    5530/    50B8 : 6100 D6D4           		bsr.w	DelayProgram
    5531/    50BC : 5278 FE04           		addq.w	#1,($FFFFFE04).w
    5532/    50C0 : 6100 00D8           		bsr.w	End_MoveSonic
    5533/    50C4 : 4EB9 0000 D106      		jsr	ObjectsLoad
    5534/    50CA : 6100 1008           		bsr.w	DeformBgLayer
    5535/    50CE : 4EB9 0000 D42C      		jsr	BuildSprites
    5536/    50D4 : 4EB9 0000 D6A8      		jsr	ObjPosLoad
    5537/    50DA : 6100 C646           		bsr.w	PalCycle_Load
    5538/    50DE : 6100 EEBA           		bsr.w	OscillateNumDo
    5539/    50E2 : 6100 EF46           		bsr.w	ChangeRingFrame
    5540/    50E6 : 0C38 0018 F600      		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
    5541/    50EC : 6716                		beq.s	loc_52DA	; if yes, branch
    5542/    50EE : 11FC 001C F600      		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
    5543/    50F4 : 103C 0091           		move.b	#$91,d0
    5544/    50F8 : 6100 C088           		bsr.w	PlaySound_Special ; play credits music
    5545/    50FC : 31FC 0000 FFF4      		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
    5546/    5102 : 4E75                		rts	
    5547/    5104 :                     ; ===========================================================================
    5548/    5104 :                     
    5549/    5104 :                     loc_52DA:
    5550/    5104 : 4A78 FE02           		tst.w	($FFFFFE02).w	; is level set to restart?
    5551/    5108 : 6700 FFA4           		beq.w	End_MainLoop	; if not, branch
    5552/    510C :                     
    5553/    510C : 4278 FE02           		clr.w	($FFFFFE02).w
    5554/    5110 : 31FC 003F F626      		move.w	#$3F,($FFFFF626).w
    5555/    5116 : 4278 F794           		clr.w	($FFFFF794).w
    5556/    511A :                     
    5557/    511A :                     End_AllEmlds:				; XREF: loc_5334
    5558/    511A : 6100 C072           		bsr.w	PauseGame
    5559/    511E : 11FC 0018 F62A      		move.b	#$18,($FFFFF62A).w
    5560/    5124 : 6100 D668           		bsr.w	DelayProgram
    5561/    5128 : 5278 FE04           		addq.w	#1,($FFFFFE04).w
    5562/    512C : 6100 006C           		bsr.w	End_MoveSonic
    5563/    5130 : 4EB9 0000 D106      		jsr	ObjectsLoad
    5564/    5136 : 6100 0F9C           		bsr.w	DeformBgLayer
    5565/    513A : 4EB9 0000 D42C      		jsr	BuildSprites
    5566/    5140 : 4EB9 0000 D6A8      		jsr	ObjPosLoad
    5567/    5146 : 6100 EE52           		bsr.w	OscillateNumDo
    5568/    514A : 6100 EEDE           		bsr.w	ChangeRingFrame
    5569/    514E : 5378 F794           		subq.w	#1,($FFFFF794).w
    5570/    5152 : 6A0A                		bpl.s	loc_5334
    5571/    5154 : 31FC 0002 F794      		move.w	#2,($FFFFF794).w
    5572/    515A : 6100 CC26           		bsr.w	Pal_ToWhite
    5573/    515E :                     
    5574/    515E :                     loc_5334:
    5575/    515E : 4A78 FE02           		tst.w	($FFFFFE02).w
    5576/    5162 : 6700 FFB6           		beq.w	End_AllEmlds
    5577/    5166 : 4278 FE02           		clr.w	($FFFFFE02).w
    5578/    516A : 31FC 2E2F A480      		move.w	#$2E2F,($FFFFA480).w ; modify level layout
    5579/    5170 : 4BF9 00C0 0004      		lea	($C00004).l,a5
    5580/    5176 : 4DF9 00C0 0000      		lea	($C00000).l,a6
    5581/    517C : 47F8 F700           		lea	($FFFFF700).w,a3
    5582/    5180 : 2878 A400           		movea.l	($FFFFA400).w,a4			; MJ: Load address of layout
    5583/    5184 : 343C 4000           		move.w	#$4000,d2
    5584/    5188 : 6100 193C           		bsr.w	LoadTilesFromStart2
    5585/    518C : 7013                		moveq	#$13,d0
    5586/    518E : 6100 CD52           		bsr.w	PalLoad1	; load ending pallet
    5587/    5192 : 6100 CB22           		bsr.w	Pal_MakeWhite
    5588/    5196 : 6000 FF16           		bra.w	End_MainLoop
    5589/    519A :                     
    5590/    519A :                     ; ---------------------------------------------------------------------------
    5591/    519A :                     ; Subroutine controlling Sonic on the ending sequence
    5592/    519A :                     ; ---------------------------------------------------------------------------
    5593/    519A :                     
    5594/    519A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    5595/    519A :                     
    5596/    519A :                     
    5597/    519A :                     End_MoveSonic:				; XREF: End_MainLoop
    5598/    519A : 1038 F7D7           		move.b	($FFFFF7D7).w,d0
    5599/    519E : 661A                		bne.s	End_MoveSonic2
    5600/    51A0 : 0C78 0090 D008      		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
    5601/    51A6 : 6462                		bcc.s	End_MoveSonExit	; if not, branch
    5602/    51A8 : 5438 F7D7           		addq.b	#2,($FFFFF7D7).w
    5603/    51AC : 11FC 0001 F7CC      		move.b	#1,($FFFFF7CC).w ; lock	player's controls
    5604/    51B2 : 31FC 0800 F602      		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
    5605/    51B8 : 4E75                		rts	
    5606/    51BA :                     ; ===========================================================================
    5607/    51BA :                     
    5608/    51BA :                     End_MoveSonic2:				; XREF: End_MoveSonic
    5609/    51BA : 5500                		subq.b	#2,d0
    5610/    51BC : 6634                		bne.s	End_MoveSonic3
    5611/    51BE : 0C78 00A0 D008      		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
    5612/    51C4 : 6544                		bcs.s	End_MoveSonExit	; if not, branch
    5613/    51C6 : 5438 F7D7           		addq.b	#2,($FFFFF7D7).w
    5614/    51CA : 7000                		moveq	#0,d0
    5615/    51CC : 11C0 F7CC           		move.b	d0,($FFFFF7CC).w
    5616/    51D0 : 31C0 F602           		move.w	d0,($FFFFF602).w ; stop	Sonic moving
    5617/    51D4 : 31C0 D014           		move.w	d0,($FFFFD014).w
    5618/    51D8 : 11FC 0081 F7C8      		move.b	#$81,($FFFFF7C8).w
    5619/    51DE : 11FC 0003 D01A      		move.b	#3,($FFFFD01A).w
    5620/    51E4 : 31FC 0505 D01C      		move.w	#$505,($FFFFD01C).w ; use "standing" animation
    5621/    51EA : 11FC 0003 D01E      		move.b	#3,($FFFFD01E).w
    5622/    51F0 : 4E75                		rts	
    5623/    51F2 :                     ; ===========================================================================
    5624/    51F2 :                     
    5625/    51F2 :                     End_MoveSonic3:				; XREF: End_MoveSonic
    5626/    51F2 : 5500                		subq.b	#2,d0
    5627/    51F4 : 6614                		bne.s	End_MoveSonExit
    5628/    51F6 : 5438 F7D7           		addq.b	#2,($FFFFF7D7).w
    5629/    51FA : 31FC 00A0 D008      		move.w	#$A0,($FFFFD008).w
    5630/    5200 : 11FC 0087 D000      		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
    5631/    5206 : 4278 D024           		clr.w	($FFFFD024).w
    5632/    520A :                     
    5633/    520A :                     End_MoveSonExit:
    5634/    520A : 4E75                		rts	
    5635/    520C :                     ; End of function End_MoveSonic
    5636/    520C :                     
    5637/    520C :                     ; ===========================================================================
    5638/    520C :                     ; ---------------------------------------------------------------------------
    5639/    520C :                     ; Object 87 - Sonic on ending sequence
    5640/    520C :                     ; ---------------------------------------------------------------------------
    5641/    520C :                     
    5642/    520C :                     Obj87:					; XREF: Obj_Index
    5643/    520C : 7000                		moveq	#0,d0
    5644/    520E : 1028 0025           		move.b	$25(a0),d0
    5645/    5212 : 323B 000C           		move.w	Obj87_Index(pc,d0.w),d1
    5646/    5216 : 4EBB 1008           		jsr	Obj87_Index(pc,d1.w)
    5647/    521A : 4EF9 0000 D3D2      		jmp	DisplaySprite
    5648/    5220 :                     ; ===========================================================================
    5649/    5220 : 0014 0058           Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
    5650/    5224 : 00D6 0070           		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
    5651/    5228 : 008C 00D6           		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
    5652/    522C : 00B8 00D6           		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
    5653/    5230 : 00E2 00D6           		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
    5654/    5234 :                     ; ===========================================================================
    5655/    5234 :                     
    5656/    5234 :                     Obj87_Main:				; XREF: Obj87_Index
    5657/    5234 : 0C38 0006 FE57      		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
    5658/    523A : 670E                		beq.s	Obj87_Main2	; if yes, branch
    5659/    523C : 0628 0010 0025      		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
    5660/    5242 : 317C 00D8 0030      		move.w	#$D8,$30(a0)
    5661/    5248 : 4E75                		rts	
    5662/    524A :                     ; ===========================================================================
    5663/    524A :                     
    5664/    524A :                     Obj87_Main2:				; XREF: Obj87_Main
    5665/    524A : 5428 0025           		addq.b	#2,$25(a0)
    5666/    524E : 217C 0000 54AA      		move.l	#Map_obj87,4(a0)
             5254 : 0004             
    5667/    5256 : 317C 03E1 0002      		move.w	#$3E1,2(a0)
    5668/    525C : 117C 0004 0001      		move.b	#4,1(a0)
    5669/    5262 : 4228 0022           		clr.b	$22(a0)
    5670/    5266 : 117C 0002 0018      		move.b	#2,$18(a0)
    5671/    526C : 117C 0000 001A      		move.b	#0,$1A(a0)
    5672/    5272 : 317C 0050 0030      		move.w	#$50,$30(a0)	; set duration for Sonic to pause
    5673/    5278 :                     
    5674/    5278 :                     Obj87_MakeEmlds:			; XREF: Obj87_Index
    5675/    5278 : 5368 0030           		subq.w	#1,$30(a0)	; subtract 1 from duration
    5676/    527C : 6610                		bne.s	Obj87_Wait
    5677/    527E : 5428 0025           		addq.b	#2,$25(a0)
    5678/    5282 : 317C 0001 001C      		move.w	#1,$1C(a0)
    5679/    5288 : 11FC 0088 D400      		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
    5680/    528E :                     
    5681/    528E :                     Obj87_Wait:
    5682/    528E : 4E75                		rts	
    5683/    5290 :                     ; ===========================================================================
    5684/    5290 :                     
    5685/    5290 :                     Obj87_LookUp:				; XREF: Obj87_Index
    5686/    5290 : 0C79 2000 00FF      		cmpi.w	#$2000,($FFD43C).l
             5296 : D43C             
    5687/    5298 : 6610                		bne.s	locret_5480
    5688/    529A : 31FC 0001 FE02      		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
    5689/    52A0 : 317C 005A 0030      		move.w	#$5A,$30(a0)
    5690/    52A6 : 5428 0025           		addq.b	#2,$25(a0)
    5691/    52AA :                     
    5692/    52AA :                     locret_5480:
    5693/    52AA : 4E75                		rts	
    5694/    52AC :                     ; ===========================================================================
    5695/    52AC :                     
    5696/    52AC :                     Obj87_ClrObjRam:			; XREF: Obj87_Index
    5697/    52AC : 5368 0030           		subq.w	#1,$30(a0)
    5698/    52B0 : 6624                		bne.s	Obj87_Wait2
    5699/    52B2 : 43F8 D400           		lea	($FFFFD400).w,a1
    5700/    52B6 : 323C 00FF           		move.w	#$FF,d1
    5701/    52BA :                     
    5702/    52BA :                     Obj87_ClrLoop:
    5703/    52BA : 4299                		clr.l	(a1)+
    5704/    52BC : 51C9 FFFC           		dbf	d1,Obj87_ClrLoop ; clear the object RAM
    5705/    52C0 : 31FC 0001 FE02      		move.w	#1,($FFFFFE02).w
    5706/    52C6 : 5428 0025           		addq.b	#2,$25(a0)
    5707/    52CA : 117C 0001 001C      		move.b	#1,$1C(a0)
    5708/    52D0 : 317C 003C 0030      		move.w	#$3C,$30(a0)
    5709/    52D6 :                     
    5710/    52D6 :                     Obj87_Wait2:
    5711/    52D6 : 4E75                		rts	
    5712/    52D8 :                     ; ===========================================================================
    5713/    52D8 :                     
    5714/    52D8 :                     Obj87_MakeLogo:				; XREF: Obj87_Index
    5715/    52D8 : 5368 0030           		subq.w	#1,$30(a0)
    5716/    52DC : 6616                		bne.s	Obj87_Wait3
    5717/    52DE : 5428 0025           		addq.b	#2,$25(a0)
    5718/    52E2 : 317C 00B4 0030      		move.w	#$B4,$30(a0)
    5719/    52E8 : 117C 0002 001C      		move.b	#2,$1C(a0)
    5720/    52EE : 11FC 0089 D400      		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
    5721/    52F4 :                     
    5722/    52F4 :                     Obj87_Wait3:
    5723/    52F4 : 4E75                		rts	
    5724/    52F6 :                     ; ===========================================================================
    5725/    52F6 :                     
    5726/    52F6 :                     Obj87_Animate:				; XREF: Obj87_Index
    5727/    52F6 : 43F9 0000 5340      		lea	(Ani_obj87).l,a1
    5728/    52FC : 4EF9 0000 A4FE      		jmp	AnimateSprite
    5729/    5302 :                     ; ===========================================================================
    5730/    5302 :                     
    5731/    5302 :                     Obj87_Leap:				; XREF: Obj87_Index
    5732/    5302 : 5368 0030           		subq.w	#1,$30(a0)
    5733/    5306 : 6636                		bne.s	Obj87_Wait4
    5734/    5308 : 5428 0025           		addq.b	#2,$25(a0)
    5735/    530C : 217C 0000 54AA      		move.l	#Map_obj87,4(a0)
             5312 : 0004             
    5736/    5314 : 317C 03E1 0002      		move.w	#$3E1,2(a0)
    5737/    531A : 117C 0004 0001      		move.b	#4,1(a0)
    5738/    5320 : 4228 0022           		clr.b	$22(a0)
    5739/    5324 : 117C 0002 0018      		move.b	#2,$18(a0)
    5740/    532A : 117C 0005 001A      		move.b	#5,$1A(a0)
    5741/    5330 : 117C 0002 001C      		move.b	#2,$1C(a0)	; use "leaping"	animation
    5742/    5336 : 11FC 0089 D400      		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
    5743/    533C : 60B8                		bra.s	Obj87_Animate
    5744/    533E :                     ; ===========================================================================
    5745/    533E :                     
    5746/    533E :                     Obj87_Wait4:				; XREF: Obj87_Leap
    5747/    533E : 4E75                		rts	
    5748/    5340 :                     ; ===========================================================================
    5749/    5340 :                     Ani_obj87:
    5750/    5340 :                     	include "_animations/obj87.asm"
(1)    1/    5340 :                     ; ---------------------------------------------------------------------------
(1)    2/    5340 :                     ; Animation script - Sonic on the ending sequence
(1)    3/    5340 :                     ; ---------------------------------------------------------------------------
(1)    4/    5340 : 0006                		dc.w byte_551C-Ani_obj87
(1)    5/    5342 : 0014                		dc.w byte_552A-Ani_obj87
(1)    6/    5344 : 001E                		dc.w byte_5534-Ani_obj87
(1)    7/    5346 : 0301 0001 0001      byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
             534C : 0001 0001 0001 
             5352 : 02FA             
(1)    8/    5354 : 0503 0403 0403      byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
             535A : 0403 FA00          
(1)    9/    535E : 0305 0505 0607      byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
             5364 : FE01             
(1)   10/    5366 : (MACRO)              		even
    5751/    5366 :                     
    5752/    5366 :                     ; ===========================================================================
    5753/    5366 :                     ; ---------------------------------------------------------------------------
    5754/    5366 :                     ; Object 88 - chaos emeralds on	the ending sequence
    5755/    5366 :                     ; ---------------------------------------------------------------------------
    5756/    5366 :                     
    5757/    5366 :                     Obj88:					; XREF: Obj_Index
    5758/    5366 : 7000                		moveq	#0,d0
    5759/    5368 : 1028 0024           		move.b	$24(a0),d0
    5760/    536C : 323B 000C           		move.w	Obj88_Index(pc,d0.w),d1
    5761/    5370 : 4EBB 1008           		jsr	Obj88_Index(pc,d1.w)
    5762/    5374 : 4EF9 0000 D3D2      		jmp	DisplaySprite
    5763/    537A :                     ; ===========================================================================
    5764/    537A : 0004                Obj88_Index:	dc.w Obj88_Main-Obj88_Index
    5765/    537C : 006C                		dc.w Obj88_Move-Obj88_Index
    5766/    537E :                     ; ===========================================================================
    5767/    537E :                     
    5768/    537E :                     Obj88_Main:				; XREF: Obj88_Index
    5769/    537E : 0C38 0002 D01A      		cmpi.b	#2,($FFFFD01A).w
    5770/    5384 : 6704                		beq.s	Obj88_Main2
    5771/    5386 : 588F                		addq.l	#4,sp
    5772/    5388 : 4E75                		rts	
    5773/    538A :                     ; ===========================================================================
    5774/    538A :                     
    5775/    538A :                     Obj88_Main2:				; XREF: Obj88_Main
    5776/    538A : 3178 D008 0008      		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
    5777/    5390 : 3178 D00C 000C      		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
    5778/    5396 : 2248                		movea.l	a0,a1
    5779/    5398 : 7600                		moveq	#0,d3
    5780/    539A : 7401                		moveq	#1,d2
    5781/    539C : 7205                		moveq	#5,d1
    5782/    539E :                     
    5783/    539E :                     Obj88_MainLoop:
    5784/    539E : 12BC 0088           		move.b	#$88,(a1)	; load chaos emerald object
    5785/    53A2 : 5429 0024           		addq.b	#2,$24(a1)
    5786/    53A6 : 237C 0000 55A4      		move.l	#Map_obj88,4(a1)
             53AC : 0004             
    5787/    53AE : 337C 03C5 0002      		move.w	#$3C5,2(a1)
    5788/    53B4 : 137C 0004 0001      		move.b	#4,1(a1)
    5789/    53BA : 137C 0001 0018      		move.b	#1,$18(a1)
    5790/    53C0 : 3368 0008 0038      		move.w	8(a0),$38(a1)
    5791/    53C6 : 3368 000C 003A      		move.w	$C(a0),$3A(a1)
    5792/    53CC : 1342 001C           		move.b	d2,$1C(a1)
    5793/    53D0 : 1342 001A           		move.b	d2,$1A(a1)
    5794/    53D4 : 5202                		addq.b	#1,d2
    5795/    53D6 : 1343 0026           		move.b	d3,$26(a1)
    5796/    53DA : 0603 002A           		addi.b	#$2A,d3
    5797/    53DE : 43E9 0040           		lea	$40(a1),a1
    5798/    53E2 : 51C9 FFBA           		dbf	d1,Obj88_MainLoop ; repeat 5 more times
    5799/    53E6 :                     
    5800/    53E6 :                     Obj88_Move:				; XREF: Obj88_Index
    5801/    53E6 : 3028 003E           		move.w	$3E(a0),d0
    5802/    53EA : D168 0026           		add.w	d0,$26(a0)
    5803/    53EE : 1028 0026           		move.b	$26(a0),d0
    5804/    53F2 : 4EB9 0000 27C0      		jsr	(CalcSine).l
    5805/    53F8 : 7800                		moveq	#0,d4
    5806/    53FA : 1828 003C           		move.b	$3C(a0),d4
    5807/    53FE : C3C4                		muls.w	d4,d1
    5808/    5400 : E081                		asr.l	#8,d1
    5809/    5402 : C1C4                		muls.w	d4,d0
    5810/    5404 : E080                		asr.l	#8,d0
    5811/    5406 : D268 0038           		add.w	$38(a0),d1
    5812/    540A : D068 003A           		add.w	$3A(a0),d0
    5813/    540E : 3141 0008           		move.w	d1,8(a0)
    5814/    5412 : 3140 000C           		move.w	d0,$C(a0)
    5815/    5416 : 0C68 2000 003C      		cmpi.w	#$2000,$3C(a0)
    5816/    541C : 6706                		beq.s	loc_55FA
    5817/    541E : 0668 0020 003C      		addi.w	#$20,$3C(a0)
    5818/    5424 :                     
    5819/    5424 :                     loc_55FA:
    5820/    5424 : 0C68 2000 003E      		cmpi.w	#$2000,$3E(a0)
    5821/    542A : 6706                		beq.s	loc_5608
    5822/    542C : 0668 0020 003E      		addi.w	#$20,$3E(a0)
    5823/    5432 :                     
    5824/    5432 :                     loc_5608:
    5825/    5432 : 0C68 0140 003A      		cmpi.w	#$140,$3A(a0)
    5826/    5438 : 6704                		beq.s	locret_5614
    5827/    543A : 5368 003A           		subq.w	#1,$3A(a0)
    5828/    543E :                     
    5829/    543E :                     locret_5614:
    5830/    543E : 4E75                		rts	
    5831/    5440 :                     ; ===========================================================================
    5832/    5440 :                     ; ---------------------------------------------------------------------------
    5833/    5440 :                     ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
    5834/    5440 :                     ; ---------------------------------------------------------------------------
    5835/    5440 :                     
    5836/    5440 :                     Obj89:					; XREF: Obj_Index
    5837/    5440 : 7000                		moveq	#0,d0
    5838/    5442 : 1028 0024           		move.b	$24(a0),d0
    5839/    5446 : 323B 0006           		move.w	Obj89_Index(pc,d0.w),d1
    5840/    544A : 4EFB 1002           		jmp	Obj89_Index(pc,d1.w)
    5841/    544E :                     ; ===========================================================================
    5842/    544E : 0006                Obj89_Index:	dc.w Obj89_Main-Obj89_Index
    5843/    5450 : 0030                		dc.w Obj89_Move-Obj89_Index
    5844/    5452 : 004C                		dc.w Obj89_GotoCredits-Obj89_Index
    5845/    5454 :                     ; ===========================================================================
    5846/    5454 :                     
    5847/    5454 :                     Obj89_Main:				; XREF: Obj89_Index
    5848/    5454 : 5428 0024           		addq.b	#2,$24(a0)
    5849/    5458 : 317C FFE0 0008      		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
    5850/    545E : 317C 00D8 000A      		move.w	#$D8,$A(a0)
    5851/    5464 : 217C 0000 55DC      		move.l	#Map_obj89,4(a0)
             546A : 0004             
    5852/    546C : 317C 05C5 0002      		move.w	#$5C5,2(a0)
    5853/    5472 : 117C 0000 0001      		move.b	#0,1(a0)
    5854/    5478 : 117C 0000 0018      		move.b	#0,$18(a0)
    5855/    547E :                     
    5856/    547E :                     Obj89_Move:				; XREF: Obj89_Index
    5857/    547E : 0C68 00C0 0008      		cmpi.w	#$C0,8(a0)	; has object reached $C0?
    5858/    5484 : 670A                		beq.s	Obj89_Delay	; if yes, branch
    5859/    5486 : 0668 0010 0008      		addi.w	#$10,8(a0)	; move object to the right
    5860/    548C : 6000 7F44           		bra.w	DisplaySprite
    5861/    5490 :                     ; ===========================================================================
    5862/    5490 :                     
    5863/    5490 :                     Obj89_Delay:				; XREF: Obj89_Move
    5864/    5490 : 5428 0024           		addq.b	#2,$24(a0)
    5865/    5494 : 317C 0078 0030      		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
    5866/    549A :                     
    5867/    549A :                     Obj89_GotoCredits:			; XREF: Obj89_Index
    5868/    549A : 5368 0030           		subq.w	#1,$30(a0)	; subtract 1 from duration
    5869/    549E : 6A06                		bpl.s	Obj89_Display
    5870/    54A0 : 11FC 001C F600      		move.b	#$1C,($FFFFF600).w ; exit to credits
    5871/    54A6 :                     
    5872/    54A6 :                     Obj89_Display:
    5873/    54A6 : 6000 7F2A           		bra.w	DisplaySprite
    5874/    54AA :                     ; ===========================================================================
    5875/    54AA :                     ; ---------------------------------------------------------------------------
    5876/    54AA :                     ; Sprite mappings - Sonic on the ending	sequence
    5877/    54AA :                     ; ---------------------------------------------------------------------------
    5878/    54AA :                     Map_obj87:
    5879/    54AA :                     	include "_mappings/obj87.asm"
(1)    1/    54AA :                     ; ---------------------------------------------------------------------------
(1)    2/    54AA :                     ; Sprite mappings - Sonic on the ending	sequence
(1)    3/    54AA :                     ; ---------------------------------------------------------------------------
(1)    4/    54AA : 0010 001B           		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
(1)    5/    54AE : 002B 0036           		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
(1)    6/    54B2 : 0041 004C           		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
(1)    7/    54B6 : 005C 0080           		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
(1)    8/    54BA : 02                  byte_5690:	dc.b 2
(1)    9/    54BB : EC0B 0000 F8        		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
(1)   10/    54C0 : 0C0C 000C F0        		dc.b $C, $C, 0,	$C, $F0
(1)   11/    54C5 : 03                  byte_569B:	dc.b 3
(1)   12/    54C6 : FC0D 0010 F0        		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
(1)   13/    54CB : EC0B 0000 F8        		dc.b $EC, $B, 0, 0, $F8
(1)   14/    54D0 : 0C0C 000C F0        		dc.b $C, $C, 0,	$C, $F0
(1)   15/    54D5 : 02                  byte_56AB:	dc.b 2
(1)   16/    54D6 : EC09 0018 F8        		dc.b $EC, 9, 0,	$18, $F8 ; looking up
(1)   17/    54DB : FC0E 001E F0        		dc.b $FC, $E, 0, $1E, $F0
(1)   18/    54E0 : 02                  byte_56B6:	dc.b 2
(1)   19/    54E1 : EC09 002A F8        		dc.b $EC, 9, 0,	$2A, $F8 ; confused
(1)   20/    54E6 : FC0E 0030 F0        		dc.b $FC, $E, 0, $30, $F0
(1)   21/    54EB : 02                  byte_56C1:	dc.b 2
(1)   22/    54EC : EC09 082A F0        		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
(1)   23/    54F1 : FC0E 0830 F0        		dc.b $FC, $E, 8, $30, $F0
(1)   24/    54F6 : 03                  byte_56CC:	dc.b 3
(1)   25/    54F7 : EC06 003C F0        		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
(1)   26/    54FC : EC06 083C 00        		dc.b $EC, 6, 8,	$3C, 0
(1)   27/    5501 : 040D 0042 F0        		dc.b 4,	$D, 0, $42, $F0
(1)   28/    5506 : 07                  byte_56DC:	dc.b 7
(1)   29/    5507 : B20C 004A F8        		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
(1)   30/    550C : BA0F 004E F0        		dc.b $BA, $F, 0, $4E, $F0
(1)   31/    5511 : BA05 005E 10        		dc.b $BA, 5, 0,	$5E, $10
(1)   32/    5516 : CA02 0062 10        		dc.b $CA, 2, 0,	$62, $10
(1)   33/    551B : DA0C 0065 F0        		dc.b $DA, $C, 0, $65, $F0
(1)   34/    5520 : E208 0069 F8        		dc.b $E2, 8, 0,	$69, $F8
(1)   35/    5525 : EA05 006C F8        		dc.b $EA, 5, 0,	$6C, $F8
(1)   36/    552A : 18                  byte_5700:	dc.b $18
(1)   37/    552B : 800F 0070 F8        		dc.b $80, $F, 0, $70, $F8 ; leaping #3
(1)   38/    5530 : 900B 0080 E0        		dc.b $90, $B, 0, $80, $E0
(1)   39/    5535 : 900B 008C 18        		dc.b $90, $B, 0, $8C, $18
(1)   40/    553A : 980B 0098 30        		dc.b $98, $B, 0, $98, $30
(1)   41/    553F : A00F 00A4 58        		dc.b $A0, $F, 0, $A4, $58
(1)   42/    5544 : 8800 00B4 F0        		dc.b $88, 0, 0,	$B4, $F0
(1)   43/    5549 : 8005 00B5 18        		dc.b $80, 5, 0,	$B5, $18
(1)   44/    554E : A00F 00B9 F8        		dc.b $A0, $F, 0, $B9, $F8
(1)   45/    5553 : B00B 00C9 E0        		dc.b $B0, $B, 0, $C9, $E0
(1)   46/    5558 : B80F 00D5 38        		dc.b $B8, $F, 0, $D5, $38
(1)   47/    555D : A805 00E5 48        		dc.b $A8, 5, 0,	$E5, $48
(1)   48/    5562 : C002 00E9 58        		dc.b $C0, 2, 0,	$E9, $58
(1)   49/    5567 : C00F 00EC F8        		dc.b $C0, $F, 0, $EC, $F8
(1)   50/    556C : B80F 00FC 18        		dc.b $B8, $F, 0, $FC, $18
(1)   51/    5571 : B008 010C 18        		dc.b $B0, 8, 1,	$C, $18
(1)   52/    5576 : D80D 010F 30        		dc.b $D8, $D, 1, $F, $30
(1)   53/    557B : D808 0117 18        		dc.b $D8, 8, 1,	$17, $18
(1)   54/    5580 : D80F 011A D8        		dc.b $D8, $F, 1, $1A, $D8
(1)   55/    5585 : E00D 012A F8        		dc.b $E0, $D, 1, $2A, $F8
(1)   56/    558A : E000 0132 28        		dc.b $E0, 0, 1,	$32, $28
(1)   57/    558F : D004 0133 E0        		dc.b $D0, 4, 1,	$33, $E0
(1)   58/    5594 : E805 0135 C8        		dc.b $E8, 5, 1,	$35, $C8
(1)   59/    5599 : F80C 0139 C8        		dc.b $F8, $C, 1, $39, $C8
(1)   60/    559E : F006 013D F8        		dc.b $F0, 6, 1,	$3D, $F8
(1)   61/    55A3 : (MACRO)              		even
(1)   61/    55A3 : 00                                          dc.b 0 ;ds.b 1 
    5880/    55A4 :                     
    5881/    55A4 :                     ; ---------------------------------------------------------------------------
    5882/    55A4 :                     ; Sprite mappings - chaos emeralds on the ending sequence
    5883/    55A4 :                     ; ---------------------------------------------------------------------------
    5884/    55A4 :                     Map_obj88:
    5885/    55A4 :                     	include "_mappings/obj88.asm"
(1)    1/    55A4 :                     ; ---------------------------------------------------------------------------
(1)    2/    55A4 :                     ; Sprite mappings - chaos emeralds on the ending sequence
(1)    3/    55A4 :                     ; ---------------------------------------------------------------------------
(1)    4/    55A4 : 000E 0014           		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
(1)    5/    55A8 : 001A 0020           		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
(1)    6/    55AC : 0026 002C           		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
(1)    7/    55B0 : 0032                		dc.w byte_57AC-Map_obj88
(1)    8/    55B2 : 01                  byte_5788:	dc.b 1
(1)    9/    55B3 : F805 0000 F8        		dc.b $F8, 5, 0,	0, $F8
(1)   10/    55B8 : 01                  byte_578E:	dc.b 1
(1)   11/    55B9 : F805 0004 F8        		dc.b $F8, 5, 0,	4, $F8
(1)   12/    55BE : 01                  byte_5794:	dc.b 1
(1)   13/    55BF : F805 4010 F8        		dc.b $F8, 5, $40, $10, $F8
(1)   14/    55C4 : 01                  byte_579A:	dc.b 1
(1)   15/    55C5 : F805 2018 F8        		dc.b $F8, 5, $20, $18, $F8
(1)   16/    55CA : 01                  byte_57A0:	dc.b 1
(1)   17/    55CB : F805 4014 F8        		dc.b $F8, 5, $40, $14, $F8
(1)   18/    55D0 : 01                  byte_57A6:	dc.b 1
(1)   19/    55D1 : F805 0008 F8        		dc.b $F8, 5, 0,	8, $F8
(1)   20/    55D6 : 01                  byte_57AC:	dc.b 1
(1)   21/    55D7 : F805 000C F8        		dc.b $F8, 5, 0,	$C, $F8
(1)   22/    55DC : (MACRO)              		even
    5886/    55DC :                     
    5887/    55DC :                     ; ---------------------------------------------------------------------------
    5888/    55DC :                     ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
    5889/    55DC :                     ; ---------------------------------------------------------------------------
    5890/    55DC :                     Map_obj89:
    5891/    55DC :                     	include "_mappings/obj89.asm"
(1)    1/    55DC :                     ; ---------------------------------------------------------------------------
(1)    2/    55DC :                     ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
(1)    3/    55DC :                     ; ---------------------------------------------------------------------------
(1)    4/    55DC : 0002                		dc.w byte_57B4-Map_obj89
(1)    5/    55DE : 03                  byte_57B4:	dc.b 3
(1)    6/    55DF : F00F 0000 D0        		dc.b $F0, $F, 0, 0, $D0
(1)    7/    55E4 : F00F 0010 F0        		dc.b $F0, $F, 0, $10, $F0
(1)    8/    55E9 : F00F 0020 10        		dc.b $F0, $F, 0, $20, $10
(1)    9/    55EE : (MACRO)              		even
    5892/    55EE :                     
    5893/    55EE :                     ; ===========================================================================
    5894/    55EE :                     ; ---------------------------------------------------------------------------
    5895/    55EE :                     ; Credits ending sequence
    5896/    55EE :                     ; ---------------------------------------------------------------------------
    5897/    55EE :                     
    5898/    55EE :                     Credits:				; XREF: GameModeArray
    5899/    55EE : 6100 BDD4           		bsr.w	ClearPLC
    5900/    55F2 : 6100 C644           		bsr.w	Pal_FadeFrom
    5901/    55F6 : 4DF9 00C0 0004      		lea	($C00004).l,a6
    5902/    55FC : 3CBC 8004           		move.w	#$8004,(a6)
    5903/    5600 : 3CBC 8230           		move.w	#$8230,(a6)
    5904/    5604 : 3CBC 8407           		move.w	#$8407,(a6)
    5905/    5608 : 3CBC 9001           		move.w	#$9001,(a6)
    5906/    560C : 3CBC 9200           		move.w	#$9200,(a6)
    5907/    5610 : 3CBC 8B03           		move.w	#$8B03,(a6)
    5908/    5614 : 3CBC 8720           		move.w	#$8720,(a6)
    5909/    5618 : 4238 F64E           		clr.b	($FFFFF64E).w
    5910/    561C : 6100 BA8C           		bsr.w	ClearScreen
    5911/    5620 : 43F8 D000           		lea	($FFFFD000).w,a1
    5912/    5624 : 7000                		moveq	#0,d0
    5913/    5626 : 323C 07FF           		move.w	#$7FF,d1
    5914/    562A :                     
    5915/    562A :                     Cred_ClrObjRam:
    5916/    562A : 22C0                		move.l	d0,(a1)+
    5917/    562C : 51C9 FFFC           		dbf	d1,Cred_ClrObjRam ; clear object RAM
    5918/    5630 :                     
    5919/    5630 : 23FC 7400 0002      		move.l	#$74000002,($C00004).l
             5636 : 00C0 0004          
    5920/    563A : 41F9 0006 3820      		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
    5921/    5640 : 6100 BBE4           		bsr.w	NemDec
    5922/    5644 : 43F8 FB80           		lea	($FFFFFB80).w,a1
    5923/    5648 : 7000                		moveq	#0,d0
    5924/    564A : 323C 001F           		move.w	#$1F,d1
    5925/    564E :                     
    5926/    564E :                     Cred_ClrPallet:
    5927/    564E : 22C0                		move.l	d0,(a1)+
    5928/    5650 : 51C9 FFFC           		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
    5929/    5654 :                     
    5930/    5654 : 7003                		moveq	#3,d0
    5931/    5656 : 6100 C88A           		bsr.w	PalLoad1	; load Sonic's pallet
    5932/    565A : 11FC 008A D080      		move.b	#$8A,($FFFFD080).w ; load credits object
    5933/    5660 : 4EB9 0000 D106      		jsr	ObjectsLoad
    5934/    5666 : 4EB9 0000 D42C      		jsr	BuildSprites
    5935/    566C : 6100 0054           		bsr.w	EndingDemoLoad
    5936/    5670 : 7000                		moveq	#0,d0
    5937/    5672 : 1038 FE10           		move.b	($FFFFFE10).w,d0
    5938/    5676 : E948                		lsl.w	#4,d0
    5939/    5678 : 45F9 0001 D5FC      		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
    5940/    567E : 45F2 0000           		lea	(a2,d0.w),a2
    5941/    5682 : 7000                		moveq	#0,d0
    5942/    5684 : 1012                		move.b	(a2),d0
    5943/    5686 : 6704                		beq.s	loc_5862
    5944/    5688 : 6100 BCDC           		bsr.w	LoadPLC		; load level patterns
    5945/    568C :                     
    5946/    568C :                     loc_5862:
    5947/    568C : 7001                		moveq	#1,d0
    5948/    568E : 6100 BCD6           		bsr.w	LoadPLC		; load standard	level patterns
    5949/    5692 : 31FC 0078 F614      		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
    5950/    5698 : 6100 C4F8           		bsr.w	Pal_FadeTo
    5951/    569C :                     
    5952/    569C :                     Cred_WaitLoop:
    5953/    569C : 11FC 0004 F62A      		move.b	#4,($FFFFF62A).w
    5954/    56A2 : 6100 D0EA           		bsr.w	DelayProgram
    5955/    56A6 : 6100 BD2A           		bsr.w	RunPLC_RAM
    5956/    56AA : 4A78 F614           		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
    5957/    56AE : 66EC                		bne.s	Cred_WaitLoop	; if not, branch
    5958/    56B0 : 4AB8 F680           		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
    5959/    56B4 : 66E6                		bne.s	Cred_WaitLoop	; if not, branch
    5960/    56B6 : 0C78 0009 FFF4      		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
    5961/    56BC : 6700 0098           		beq.w	TryAgainEnd	; if yes, branch
    5962/    56C0 : 4E75                		rts	
    5963/    56C2 :                     
    5964/    56C2 :                     ; ---------------------------------------------------------------------------
    5965/    56C2 :                     ; Ending sequence demo loading subroutine
    5966/    56C2 :                     ; ---------------------------------------------------------------------------
    5967/    56C2 :                     
    5968/    56C2 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    5969/    56C2 :                     
    5970/    56C2 :                     
    5971/    56C2 :                     EndingDemoLoad:				; XREF: Credits
    5972/    56C2 : 3038 FFF4           		move.w	($FFFFFFF4).w,d0
    5973/    56C6 : 0240 000F           		andi.w	#$F,d0
    5974/    56CA : D040                		add.w	d0,d0
    5975/    56CC : 303B 0054           		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
    5976/    56D0 : 31C0 FE10           		move.w	d0,($FFFFFE10).w ; set level from level	array
    5977/    56D4 : 5278 FFF4           		addq.w	#1,($FFFFFFF4).w
    5978/    56D8 : 0C78 0009 FFF4      		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
    5979/    56DE : 6440                		bcc.s	EndDemo_Exit	; if yes, branch
    5980/    56E0 : 31FC 8001 FFF0      		move.w	#$8001,($FFFFFFF0).w ; force demo mode
    5981/    56E6 : 11FC 0008 F600      		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
    5982/    56EC : 11FC 0003 FE12      		move.b	#3,($FFFFFE12).w ; set lives to	3
    5983/    56F2 : 7000                		moveq	#0,d0
    5984/    56F4 : 31C0 FE20           		move.w	d0,($FFFFFE20).w ; clear rings
    5985/    56F8 : 21C0 FE22           		move.l	d0,($FFFFFE22).w ; clear time
    5986/    56FC : 21C0 FE26           		move.l	d0,($FFFFFE26).w ; clear score
    5987/    5700 : 11C0 FE30           		move.b	d0,($FFFFFE30).w ; clear lamppost counter
    5988/    5704 : 0C78 0004 FFF4      		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
    5989/    570A : 6614                		bne.s	EndDemo_Exit	; if not, branch
    5990/    570C : 43F9 0000 5732      		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
    5991/    5712 : 45F8 FE30           		lea	($FFFFFE30).w,a2
    5992/    5716 : 303C 0008           		move.w	#8,d0
    5993/    571A :                     
    5994/    571A :                     EndDemo_LampLoad:
    5995/    571A : 24D9                		move.l	(a1)+,(a2)+
    5996/    571C : 51C8 FFFC           		dbf	d0,EndDemo_LampLoad
    5997/    5720 :                     
    5998/    5720 :                     EndDemo_Exit:
    5999/    5720 : 4E75                		rts	
    6000/    5722 :                     ; End of function EndingDemoLoad
    6001/    5722 :                     
    6002/    5722 :                     ; ===========================================================================
    6003/    5722 :                     ; ---------------------------------------------------------------------------
    6004/    5722 :                     ; Levels used in the end sequence demos
    6005/    5722 :                     ; ---------------------------------------------------------------------------
    6006/    5722 :                     EndDemo_Levels:	binclude	"_misc/dm_ord2.bin"
    6007/    5732 :                     
    6008/    5732 :                     ; ---------------------------------------------------------------------------
    6009/    5732 :                     ; Lamppost variables in the end sequence demo (Star Light Zone)
    6010/    5732 :                     ; ---------------------------------------------------------------------------
    6011/    5732 :                     EndDemo_LampVar:
    6012/    5732 : 0101                		dc.b 1,	1		; XREF: EndingDemoLoad
    6013/    5734 : 0A00 062C 000D      		dc.w $A00, $62C, $D
    6014/    573A : 0000 0000           		dc.l 0
    6015/    573E : 0000                		dc.b 0,	0
    6016/    5740 : 0800 0957 05CC      		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
             5746 : 04AB 03A6 0000 
             574C : 028C 0000 0000 
             5752 : 0308             
    6017/    5754 : 0101                		dc.b 1,	1
    6018/    5756 :                     ; ===========================================================================
    6019/    5756 :                     ; ---------------------------------------------------------------------------
    6020/    5756 :                     ; "TRY AGAIN" and "END"	screens
    6021/    5756 :                     ; ---------------------------------------------------------------------------
    6022/    5756 :                     
    6023/    5756 :                     TryAgainEnd:				; XREF: Credits
    6024/    5756 : 6100 BC6C           		bsr.w	ClearPLC
    6025/    575A : 6100 C4DC           		bsr.w	Pal_FadeFrom
    6026/    575E : 4DF9 00C0 0004      		lea	($C00004).l,a6
    6027/    5764 : 3CBC 8004           		move.w	#$8004,(a6)
    6028/    5768 : 3CBC 8230           		move.w	#$8230,(a6)
    6029/    576C : 3CBC 8407           		move.w	#$8407,(a6)
    6030/    5770 : 3CBC 9001           		move.w	#$9001,(a6)
    6031/    5774 : 3CBC 9200           		move.w	#$9200,(a6)
    6032/    5778 : 3CBC 8B03           		move.w	#$8B03,(a6)
    6033/    577C : 3CBC 8720           		move.w	#$8720,(a6)
    6034/    5780 : 4238 F64E           		clr.b	($FFFFF64E).w
    6035/    5784 : 6100 B924           		bsr.w	ClearScreen
    6036/    5788 : 43F8 D000           		lea	($FFFFD000).w,a1
    6037/    578C : 7000                		moveq	#0,d0
    6038/    578E : 323C 07FF           		move.w	#$7FF,d1
    6039/    5792 :                     
    6040/    5792 :                     TryAg_ClrObjRam:
    6041/    5792 : 22C0                		move.l	d0,(a1)+
    6042/    5794 : 51C9 FFFC           		dbf	d1,TryAg_ClrObjRam ; clear object RAM
    6043/    5798 :                     
    6044/    5798 : 701D                		moveq	#$1D,d0
    6045/    579A : 6100 BD36           		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
    6046/    579E : 43F8 FB80           		lea	($FFFFFB80).w,a1
    6047/    57A2 : 7000                		moveq	#0,d0
    6048/    57A4 : 323C 001F           		move.w	#$1F,d1
    6049/    57A8 :                     
    6050/    57A8 :                     TryAg_ClrPallet:
    6051/    57A8 : 22C0                		move.l	d0,(a1)+
    6052/    57AA : 51C9 FFFC           		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
    6053/    57AE :                     
    6054/    57AE : 7013                		moveq	#$13,d0
    6055/    57B0 : 6100 C730           		bsr.w	PalLoad1	; load ending pallet
    6056/    57B4 : 4278 FBC0           		clr.w	($FFFFFBC0).w
    6057/    57B8 : 11FC 008B D080      		move.b	#$8B,($FFFFD080).w ; load Eggman object
    6058/    57BE : 4EB9 0000 D106      		jsr	ObjectsLoad
    6059/    57C4 : 4EB9 0000 D42C      		jsr	BuildSprites
    6060/    57CA : 31FC 0708 F614      		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
    6061/    57D0 : 6100 C3C0           		bsr.w	Pal_FadeTo
    6062/    57D4 :                     
    6063/    57D4 :                     ; ---------------------------------------------------------------------------
    6064/    57D4 :                     ; "TRY AGAIN" and "END"	screen main loop
    6065/    57D4 :                     ; ---------------------------------------------------------------------------
    6066/    57D4 :                     TryAg_MainLoop:
    6067/    57D4 : 6100 B9B8           		bsr.w	PauseGame
    6068/    57D8 : 11FC 0004 F62A      		move.b	#4,($FFFFF62A).w
    6069/    57DE : 6100 CFAE           		bsr.w	DelayProgram
    6070/    57E2 : 4EB9 0000 D106      		jsr	ObjectsLoad
    6071/    57E8 : 4EB9 0000 D42C      		jsr	BuildSprites
    6072/    57EE : 0238 0080 F605      		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
    6073/    57F4 : 660E                		bne.s	TryAg_Exit	; if yes, branch
    6074/    57F6 : 4A78 F614           		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
    6075/    57FA : 6708                		beq.s	TryAg_Exit	; if yes, branch
    6076/    57FC : 0C38 001C F600      		cmpi.b	#$1C,($FFFFF600).w
    6077/    5802 : 67D0                		beq.s	TryAg_MainLoop
    6078/    5804 :                     
    6079/    5804 :                     TryAg_Exit:
    6080/    5804 : 11FC 0000 F600      		move.b	#0,($FFFFF600).w ; go to Sega screen
    6081/    580A : 4E75                		rts	
    6082/    580C :                     
    6083/    580C :                     ; ===========================================================================
    6084/    580C :                     ; ---------------------------------------------------------------------------
    6085/    580C :                     ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
    6086/    580C :                     ; ---------------------------------------------------------------------------
    6087/    580C :                     
    6088/    580C :                     Obj8B:					; XREF: Obj_Index
    6089/    580C : 7000                		moveq	#0,d0
    6090/    580E : 1028 0024           		move.b	$24(a0),d0
    6091/    5812 : 323B 000C           		move.w	Obj8B_Index(pc,d0.w),d1
    6092/    5816 : 4EBB 1008           		jsr	Obj8B_Index(pc,d1.w)
    6093/    581A : 4EF9 0000 D3D2      		jmp	DisplaySprite
    6094/    5820 :                     ; ===========================================================================
    6095/    5820 : 0008                Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
    6096/    5822 : 0058                		dc.w Obj8B_Animate-Obj8B_Index
    6097/    5824 : 0064                		dc.w Obj8B_Juggle-Obj8B_Index
    6098/    5826 : 0098                		dc.w loc_5A8E-Obj8B_Index
    6099/    5828 :                     ; ===========================================================================
    6100/    5828 :                     
    6101/    5828 :                     Obj8B_Main:				; XREF: Obj8B_Index
    6102/    5828 : 5428 0024           		addq.b	#2,$24(a0)
    6103/    582C : 317C 0120 0008      		move.w	#$120,8(a0)
    6104/    5832 : 317C 00F4 000A      		move.w	#$F4,$A(a0)
    6105/    5838 : 217C 0000 59E6      		move.l	#Map_obj8B,4(a0)
             583E : 0004             
    6106/    5840 : 317C 03E1 0002      		move.w	#$3E1,2(a0)
    6107/    5846 : 117C 0000 0001      		move.b	#0,1(a0)
    6108/    584C : 117C 0002 0018      		move.b	#2,$18(a0)
    6109/    5852 : 117C 0002 001C      		move.b	#2,$1C(a0)	; use "END" animation
    6110/    5858 : 0C38 0006 FE57      		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
    6111/    585E : 6718                		beq.s	Obj8B_Animate	; if yes, branch
    6112/    5860 : 11FC 008A D0C0      		move.b	#$8A,($FFFFD0C0).w ; load credits object
    6113/    5866 : 31FC 0009 FFF4      		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
    6114/    586C : 11FC 008C D800      		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
    6115/    5872 : 117C 0000 001C      		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
    6116/    5878 :                     
    6117/    5878 :                     Obj8B_Animate:				; XREF: Obj8B_Index
    6118/    5878 : 43F9 0000 58CC      		lea	(Ani_obj8B).l,a1
    6119/    587E : 4EF9 0000 A4FE      		jmp	AnimateSprite
    6120/    5884 :                     ; ===========================================================================
    6121/    5884 :                     
    6122/    5884 :                     Obj8B_Juggle:				; XREF: Obj8B_Index
    6123/    5884 : 5428 0024           		addq.b	#2,$24(a0)
    6124/    5888 : 7002                		moveq	#2,d0
    6125/    588A : 0828 0000 001C      		btst	#0,$1C(a0)
    6126/    5890 : 6702                		beq.s	loc_5A6A
    6127/    5892 : 4440                		neg.w	d0
    6128/    5894 :                     
    6129/    5894 :                     loc_5A6A:
    6130/    5894 : 43F8 D800           		lea	($FFFFD800).w,a1
    6131/    5898 : 7205                		moveq	#5,d1
    6132/    589A :                     
    6133/    589A :                     loc_5A70:
    6134/    589A : 1340 003E           		move.b	d0,$3E(a1)
    6135/    589E : 3400                		move.w	d0,d2
    6136/    58A0 : E742                		asl.w	#3,d2
    6137/    58A2 : D529 0026           		add.b	d2,$26(a1)
    6138/    58A6 : 43E9 0040           		lea	$40(a1),a1
    6139/    58AA : 51C9 FFEE           		dbf	d1,loc_5A70
    6140/    58AE : 5228 001A           		addq.b	#1,$1A(a0)
    6141/    58B2 : 317C 0070 0030      		move.w	#112,$30(a0)
    6142/    58B8 :                     
    6143/    58B8 :                     loc_5A8E:				; XREF: Obj8B_Index
    6144/    58B8 : 5368 0030           		subq.w	#1,$30(a0)
    6145/    58BC : 6A0C                		bpl.s	locret_5AA0
    6146/    58BE : 0868 0000 001C      		bchg	#0,$1C(a0)
    6147/    58C4 : 117C 0002 0024      		move.b	#2,$24(a0)
    6148/    58CA :                     
    6149/    58CA :                     locret_5AA0:
    6150/    58CA : 4E75                		rts	
    6151/    58CC :                     ; ===========================================================================
    6152/    58CC :                     Ani_obj8B:
    6153/    58CC :                     	include "_animations/obj8B.asm"
(1)    1/    58CC :                     ; ---------------------------------------------------------------------------
(1)    2/    58CC :                     ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
(1)    3/    58CC :                     ; ---------------------------------------------------------------------------
(1)    4/    58CC : 0006                		dc.w byte_5AA8-Ani_obj8B
(1)    5/    58CE : 000A                		dc.w byte_5AAC-Ani_obj8B
(1)    6/    58D0 : 000E                		dc.w byte_5AB0-Ani_obj8B
(1)    7/    58D2 : 0500 FC01           byte_5AA8:	dc.b 5,	0, $FC,	1
(1)    8/    58D6 : 0502 FC03           byte_5AAC:	dc.b 5,	2, $FC,	3
(1)    9/    58DA : 0704 0506 0504      byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
             58E0 : 0506 0504 0506 
             58E6 : 0507 0506 05FF    
(1)   10/    58EC : (MACRO)              		even
    6154/    58EC :                     
    6155/    58EC :                     ; ===========================================================================
    6156/    58EC :                     ; ---------------------------------------------------------------------------
    6157/    58EC :                     ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
    6158/    58EC :                     ; ---------------------------------------------------------------------------
    6159/    58EC :                     
    6160/    58EC :                     Obj8C:					; XREF: Obj_Index
    6161/    58EC : 7000                		moveq	#0,d0
    6162/    58EE : 1028 0024           		move.b	$24(a0),d0
    6163/    58F2 : 323B 000C           		move.w	Obj8C_Index(pc,d0.w),d1
    6164/    58F6 : 4EBB 1008           		jsr	Obj8C_Index(pc,d1.w)
    6165/    58FA : 4EF9 0000 D3D2      		jmp	DisplaySprite
    6166/    5900 :                     ; ===========================================================================
    6167/    5900 : 0004                Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
    6168/    5902 : 0090                		dc.w Obj8C_Move-Obj8C_Index
    6169/    5904 :                     ; ===========================================================================
    6170/    5904 :                     
    6171/    5904 :                     Obj8C_Main:				; XREF: Obj8C_Index
    6172/    5904 : 2248                		movea.l	a0,a1
    6173/    5906 : 7400                		moveq	#0,d2
    6174/    5908 : 7600                		moveq	#0,d3
    6175/    590A : 7205                		moveq	#5,d1
    6176/    590C : 9238 FE57           		sub.b	($FFFFFE57).w,d1
    6177/    5910 :                     
    6178/    5910 :                     Obj8C_MakeEms:				; XREF: loc_5B42
    6179/    5910 : 12BC 008C           		move.b	#$8C,(a1)	; load emerald object
    6180/    5914 : 5429 0024           		addq.b	#2,$24(a1)
    6181/    5918 : 237C 0000 55A4      		move.l	#Map_obj88,4(a1)
             591E : 0004             
    6182/    5920 : 337C 03C5 0002      		move.w	#$3C5,2(a1)
    6183/    5926 : 137C 0000 0001      		move.b	#0,1(a1)
    6184/    592C : 137C 0001 0018      		move.b	#1,$18(a1)
    6185/    5932 : 337C 0104 0008      		move.w	#$104,8(a1)
    6186/    5938 : 337C 0120 0038      		move.w	#$120,$38(a1)
    6187/    593E : 337C 00EC 000A      		move.w	#$EC,$A(a1)
    6188/    5944 : 3369 000A 003A      		move.w	$A(a1),$3A(a1)
    6189/    594A : 137C 001C 003C      		move.b	#$1C,$3C(a1)
    6190/    5950 : 47F8 FE58           		lea	($FFFFFE58).w,a3
    6191/    5954 :                     
    6192/    5954 :                     Obj8C_ChkEms:
    6193/    5954 : 7000                		moveq	#0,d0
    6194/    5956 : 1038 FE57           		move.b	($FFFFFE57).w,d0
    6195/    595A : 5340                		subq.w	#1,d0
    6196/    595C : 650E                		bcs.s	loc_5B42
    6197/    595E :                     
    6198/    595E :                     Obj8C_ChkEmLoop:
    6199/    595E : B433 0000           		cmp.b	(a3,d0.w),d2
    6200/    5962 : 6604                		bne.s	loc_5B3E
    6201/    5964 : 5202                		addq.b	#1,d2
    6202/    5966 : 60EC                		bra.s	Obj8C_ChkEms
    6203/    5968 :                     ; ===========================================================================
    6204/    5968 :                     
    6205/    5968 :                     loc_5B3E:
    6206/    5968 : 51C8 FFF4           		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
    6207/    596C :                     
    6208/    596C :                     loc_5B42:
    6209/    596C : 1342 001A           		move.b	d2,$1A(a1)
    6210/    5970 : 5229 001A           		addq.b	#1,$1A(a1)
    6211/    5974 : 5202                		addq.b	#1,d2
    6212/    5976 : 137C 0080 0026      		move.b	#$80,$26(a1)
    6213/    597C : 1343 001E           		move.b	d3,$1E(a1)
    6214/    5980 : 1343 001F           		move.b	d3,$1F(a1)
    6215/    5984 : 0643 000A           		addi.w	#$A,d3
    6216/    5988 : 43E9 0040           		lea	$40(a1),a1
    6217/    598C : 51C9 FF82           		dbf	d1,Obj8C_MakeEms
    6218/    5990 :                     
    6219/    5990 :                     Obj8C_Move:				; XREF: Obj8C_Index
    6220/    5990 : 4A68 003E           		tst.w	$3E(a0)
    6221/    5994 : 674E                		beq.s	locret_5BBA
    6222/    5996 : 4A28 001E           		tst.b	$1E(a0)
    6223/    599A : 6706                		beq.s	loc_5B78
    6224/    599C : 5328 001E           		subq.b	#1,$1E(a0)
    6225/    59A0 : 6608                		bne.s	loc_5B80
    6226/    59A2 :                     
    6227/    59A2 :                     loc_5B78:
    6228/    59A2 : 3028 003E           		move.w	$3E(a0),d0
    6229/    59A6 : D168 0026           		add.w	d0,$26(a0)
    6230/    59AA :                     
    6231/    59AA :                     loc_5B80:
    6232/    59AA : 1028 0026           		move.b	$26(a0),d0
    6233/    59AE : 6706                		beq.s	loc_5B8C
    6234/    59B0 : 0C00 0080           		cmpi.b	#$80,d0
    6235/    59B4 : 660A                		bne.s	loc_5B96
    6236/    59B6 :                     
    6237/    59B6 :                     loc_5B8C:
    6238/    59B6 : 4268 003E           		clr.w	$3E(a0)
    6239/    59BA : 1168 001F 001E      		move.b	$1F(a0),$1E(a0)
    6240/    59C0 :                     
    6241/    59C0 :                     loc_5B96:
    6242/    59C0 : 4EB9 0000 27C0      		jsr	(CalcSine).l
    6243/    59C6 : 7800                		moveq	#0,d4
    6244/    59C8 : 1828 003C           		move.b	$3C(a0),d4
    6245/    59CC : C3C4                		muls.w	d4,d1
    6246/    59CE : E081                		asr.l	#8,d1
    6247/    59D0 : C1C4                		muls.w	d4,d0
    6248/    59D2 : E080                		asr.l	#8,d0
    6249/    59D4 : D268 0038           		add.w	$38(a0),d1
    6250/    59D8 : D068 003A           		add.w	$3A(a0),d0
    6251/    59DC : 3141 0008           		move.w	d1,8(a0)
    6252/    59E0 : 3140 000A           		move.w	d0,$A(a0)
    6253/    59E4 :                     
    6254/    59E4 :                     locret_5BBA:
    6255/    59E4 : 4E75                		rts	
    6256/    59E6 :                     ; ===========================================================================
    6257/    59E6 :                     ; ---------------------------------------------------------------------------
    6258/    59E6 :                     ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
    6259/    59E6 :                     ; ---------------------------------------------------------------------------
    6260/    59E6 :                     Map_obj8B:
    6261/    59E6 :                     	include "_mappings/obj8B.asm"
(1)    1/    59E6 :                     ; ---------------------------------------------------------------------------
(1)    2/    59E6 :                     ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
(1)    3/    59E6 :                     ; ---------------------------------------------------------------------------
(1)    4/    59E6 : 0010 0039           		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
(1)    5/    59EA : 0062 008B           		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
(1)    6/    59EE : 00B4 00F1           		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
(1)    7/    59F2 : 0124 0157           		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
(1)    8/    59F6 : 08                  byte_5BCC:	dc.b 8
(1)    9/    59F7 : E905 0000 F0        		dc.b $E9, 5, 0,	0, $F0
(1)   10/    59FC : F90C 0004 E0        		dc.b $F9, $C, 0, 4, $E0
(1)   11/    5A01 : E904 0008 00        		dc.b $E9, 4, 0,	8, 0
(1)   12/    5A06 : F10D 000A 00        		dc.b $F1, $D, 0, $A, 0
(1)   13/    5A0B : 0106 0023 F0        		dc.b 1,	6, 0, $23, $F0
(1)   14/    5A10 : 0106 0823 00        		dc.b 1,	6, 8, $23, 0
(1)   15/    5A15 : 1804 0029 EC        		dc.b $18, 4, 0,	$29, $EC
(1)   16/    5A1A : 1804 0829 04        		dc.b $18, 4, 8,	$29, 4
(1)   17/    5A1F : 08                  byte_5BF5:	dc.b 8
(1)   18/    5A20 : E80D 0012 E0        		dc.b $E8, $D, 0, $12, $E0
(1)   19/    5A25 : F808 001A E8        		dc.b $F8, 8, 0,	$1A, $E8
(1)   20/    5A2A : E805 0800 00        		dc.b $E8, 5, 8,	0, 0
(1)   21/    5A2F : F80C 0804 00        		dc.b $F8, $C, 8, 4, 0
(1)   22/    5A34 : 0006 001D F0        		dc.b 0,	6, 0, $1D, $F0
(1)   23/    5A39 : 0006 081D 00        		dc.b 0,	6, 8, $1D, 0
(1)   24/    5A3E : 1804 0029 EC        		dc.b $18, 4, 0,	$29, $EC
(1)   25/    5A43 : 1804 0829 04        		dc.b $18, 4, 8,	$29, 4
(1)   26/    5A48 : 08                  byte_5C1E:	dc.b 8
(1)   27/    5A49 : E904 0808 F0        		dc.b $E9, 4, 8,	8, $F0
(1)   28/    5A4E : F10D 080A E0        		dc.b $F1, $D, 8, $A, $E0
(1)   29/    5A53 : E905 0800 00        		dc.b $E9, 5, 8,	0, 0
(1)   30/    5A58 : F90C 0804 00        		dc.b $F9, $C, 8, 4, 0
(1)   31/    5A5D : 0106 0023 F0        		dc.b 1,	6, 0, $23, $F0
(1)   32/    5A62 : 0106 0823 00        		dc.b 1,	6, 8, $23, 0
(1)   33/    5A67 : 1804 0029 EC        		dc.b $18, 4, 0,	$29, $EC
(1)   34/    5A6C : 1804 0829 04        		dc.b $18, 4, 8,	$29, 4
(1)   35/    5A71 : 08                  byte_5C47:	dc.b 8
(1)   36/    5A72 : E805 0000 F0        		dc.b $E8, 5, 0,	0, $F0
(1)   37/    5A77 : F80C 0004 E0        		dc.b $F8, $C, 0, 4, $E0
(1)   38/    5A7C : E80D 0812 00        		dc.b $E8, $D, 8, $12, 0
(1)   39/    5A81 : F808 081A 00        		dc.b $F8, 8, 8,	$1A, 0
(1)   40/    5A86 : 0006 001D F0        		dc.b 0,	6, 0, $1D, $F0
(1)   41/    5A8B : 0006 081D 00        		dc.b 0,	6, 8, $1D, 0
(1)   42/    5A90 : 1804 0029 EC        		dc.b $18, 4, 0,	$29, $EC
(1)   43/    5A95 : 1804 0829 04        		dc.b $18, 4, 8,	$29, 4
(1)   44/    5A9A : 0C                  byte_5C70:	dc.b $C
(1)   45/    5A9B : ED0A 002B E8        		dc.b $ED, $A, 0, $2B, $E8
(1)   46/    5AA0 : F500 0034 E0        		dc.b $F5, 0, 0,	$34, $E0
(1)   47/    5AA5 : 0504 0035 F0        		dc.b 5,	4, 0, $35, $F0
(1)   48/    5AAA : 0D08 0037 E8        		dc.b $D, 8, 0, $37, $E8
(1)   49/    5AAF : ED0A 082B 00        		dc.b $ED, $A, 8, $2B, 0
(1)   50/    5AB4 : F500 0834 18        		dc.b $F5, 0, 8,	$34, $18
(1)   51/    5AB9 : 0504 0835 00        		dc.b 5,	4, 8, $35, 0
(1)   52/    5ABE : 0D08 0837 00        		dc.b $D, 8, 8, $37, 0
(1)   53/    5AC3 : 100D 0073 E0        		dc.b $10, $D, 0, $73, $E0
(1)   54/    5AC8 : 100D 007B 00        		dc.b $10, $D, 0, $7B, 0
(1)   55/    5ACD : 1C0C 005B E0        		dc.b $1C, $C, 0, $5B, $E0
(1)   56/    5AD2 : 1C0C 085B 00        		dc.b $1C, $C, 8, $5B, 0
(1)   57/    5AD7 : 0A                  byte_5CAD:	dc.b $A
(1)   58/    5AD8 : D207 003A F0        		dc.b $D2, 7, 0,	$3A, $F0
(1)   59/    5ADD : DA00 0042 E8        		dc.b $DA, 0, 0,	$42, $E8
(1)   60/    5AE2 : F207 0043 F0        		dc.b $F2, 7, 0,	$43, $F0
(1)   61/    5AE7 : D207 083A 00        		dc.b $D2, 7, 8,	$3A, 0
(1)   62/    5AEC : DA00 0842 10        		dc.b $DA, 0, 8,	$42, $10
(1)   63/    5AF1 : F207 0843 00        		dc.b $F2, 7, 8,	$43, 0
(1)   64/    5AF6 : 100D 0067 E8        		dc.b $10, $D, 0, $67, $E8
(1)   65/    5AFB : 1005 006F 08        		dc.b $10, 5, 0,	$6F, 8
(1)   66/    5B00 : 1C0C 005F E0        		dc.b $1C, $C, 0, $5F, $E0
(1)   67/    5B05 : 1C0C 085F 00        		dc.b $1C, $C, 8, $5F, 0
(1)   68/    5B0A : 0A                  byte_5CE0:	dc.b $A
(1)   69/    5B0B : C40B 004B E8        		dc.b $C4, $B, 0, $4B, $E8
(1)   70/    5B10 : E408 0057 E8        		dc.b $E4, 8, 0,	$57, $E8
(1)   71/    5B15 : EC00 005A F0        		dc.b $EC, 0, 0,	$5A, $F0
(1)   72/    5B1A : C40B 084B 00        		dc.b $C4, $B, 8, $4B, 0
(1)   73/    5B1F : E408 0857 00        		dc.b $E4, 8, 8,	$57, 0
(1)   74/    5B24 : EC00 085A 08        		dc.b $EC, 0, 8,	$5A, 8
(1)   75/    5B29 : 100D 0067 E8        		dc.b $10, $D, 0, $67, $E8
(1)   76/    5B2E : 1005 006F 08        		dc.b $10, 5, 0,	$6F, 8
(1)   77/    5B33 : 1C0C 0063 E0        		dc.b $1C, $C, 0, $63, $E0
(1)   78/    5B38 : 1C0C 0863 00        		dc.b $1C, $C, 8, $63, 0
(1)   79/    5B3D : 0C                  byte_5D13:	dc.b $C
(1)   80/    5B3E : F40A 002B E8        		dc.b $F4, $A, 0, $2B, $E8
(1)   81/    5B43 : FC00 0034 E0        		dc.b $FC, 0, 0,	$34, $E0
(1)   82/    5B48 : 0C04 0035 F0        		dc.b $C, 4, 0, $35, $F0
(1)   83/    5B4D : 1408 0037 E8        		dc.b $14, 8, 0,	$37, $E8
(1)   84/    5B52 : F40A 082B 00        		dc.b $F4, $A, 8, $2B, 0
(1)   85/    5B57 : FC00 0834 18        		dc.b $FC, 0, 8,	$34, $18
(1)   86/    5B5C : 0C04 0835 00        		dc.b $C, 4, 8, $35, 0
(1)   87/    5B61 : 1408 0837 00        		dc.b $14, 8, 8,	$37, 0
(1)   88/    5B66 : 180C 0083 E0        		dc.b $18, $C, 0, $83, $E0
(1)   89/    5B6B : 180C 0087 00        		dc.b $18, $C, 0, $87, 0
(1)   90/    5B70 : 1C0C 005B E0        		dc.b $1C, $C, 0, $5B, $E0
(1)   91/    5B75 : 1C0C 085B 00        		dc.b $1C, $C, 8, $5B, 0
(1)   92/    5B7A : (MACRO)              		even
    6262/    5B7A :                     
    6263/    5B7A :                     ; ---------------------------------------------------------------------------
    6264/    5B7A :                     ; Ending sequence demos
    6265/    5B7A :                     ; ---------------------------------------------------------------------------
    6266/    5B7A :                     Demo_EndGHZ1:	binclude	"_demodata/e_ghz1.bin"
    6267/    5BA8 : (MACRO)              		even
    6268/    5BA8 :                     Demo_EndMZ:	binclude	"_demodata/e_mz.bin"
    6269/    5BE8 : (MACRO)              		even
    6270/    5BE8 :                     Demo_EndSYZ:	binclude	"_demodata/e_syz.bin"
    6271/    5C18 : (MACRO)              		even
    6272/    5C18 :                     Demo_EndLZ:	binclude	"_demodata/e_lz.bin"
    6273/    5C48 : (MACRO)              		even
    6274/    5C48 :                     Demo_EndSLZ:	binclude	"_demodata/e_slz.bin"
    6275/    5C68 : (MACRO)              		even
    6276/    5C68 :                     Demo_EndSBZ1:	binclude	"_demodata/e_sbz1.bin"
    6277/    5C88 : (MACRO)              		even
    6278/    5C88 :                     Demo_EndSBZ2:	binclude	"_demodata/e_sbz2.bin"
    6279/    5CB8 : (MACRO)              		even
    6280/    5CB8 :                     Demo_EndGHZ2:	binclude	"_demodata/e_ghz2.bin"
    6281/    5CE8 : (MACRO)              		even
    6282/    5CE8 :                     
    6283/    5CE8 :                     ; ---------------------------------------------------------------------------
    6284/    5CE8 :                     ; Subroutine to	load level boundaries and start	locations
    6285/    5CE8 :                     ; ---------------------------------------------------------------------------
    6286/    5CE8 :                     
    6287/    5CE8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    6288/    5CE8 :                     
    6289/    5CE8 :                     
    6290/    5CE8 :                     LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
    6291/    5CE8 : 7000                		moveq	#0,d0
    6292/    5CEA : 11C0 F740           		move.b	d0,($FFFFF740).w
    6293/    5CEE : 11C0 F741           		move.b	d0,($FFFFF741).w
    6294/    5CF2 : 11C0 F746           		move.b	d0,($FFFFF746).w
    6295/    5CF6 : 11C0 F748           		move.b	d0,($FFFFF748).w
    6296/    5CFA : 11C0 F742           		move.b	d0,($FFFFF742).w
    6297/    5CFE : 3038 FE10           		move.w	($FFFFFE10).w,d0
    6298/    5D02 : ED08                		lsl.b	#6,d0
    6299/    5D04 : E848                		lsr.w	#4,d0
    6300/    5D06 : 3200                		move.w	d0,d1
    6301/    5D08 : D040                		add.w	d0,d0
    6302/    5D0A : D041                		add.w	d1,d0
    6303/    5D0C : 41FB 0038           		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
    6304/    5D10 : 3018                		move.w	(a0)+,d0
    6305/    5D12 : 31C0 F730           		move.w	d0,($FFFFF730).w
    6306/    5D16 : 2018                		move.l	(a0)+,d0
    6307/    5D18 : 21C0 F728           		move.l	d0,($FFFFF728).w
    6308/    5D1C : 21C0 F720           		move.l	d0,($FFFFF720).w
    6309/    5D20 : 2018                		move.l	(a0)+,d0
    6310/    5D22 : 21C0 F72C           		move.l	d0,($FFFFF72C).w
    6311/    5D26 : 21C0 F724           		move.l	d0,($FFFFF724).w
    6312/    5D2A : 3038 F728           		move.w	($FFFFF728).w,d0
    6313/    5D2E : 0640 0240           		addi.w	#$240,d0
    6314/    5D32 : 31C0 F732           		move.w	d0,($FFFFF732).w
    6315/    5D36 : 31FC 1010 F74A      		move.w	#$1010,($FFFFF74A).w
    6316/    5D3C : 3018                		move.w	(a0)+,d0
    6317/    5D3E : 31C0 F73E           		move.w	d0,($FFFFF73E).w
    6318/    5D42 : 6000 0172           		bra.w	LevSz_ChkLamp
    6319/    5D46 :                     ; ===========================================================================
    6320/    5D46 :                     ; ---------------------------------------------------------------------------
    6321/    5D46 :                     ; Level size array and ending start location array
    6322/    5D46 :                     ; ---------------------------------------------------------------------------
    6323/    5D46 :                     LevelSizeArray:	binclude	"_misc/lvl_size.bin"
    6324/    5E96 : (MACRO)              		even
    6325/    5E96 :                     
    6326/    5E96 :                     EndingStLocArray:
    6327/    5E96 :                     		binclude	"_misc/sloc_end.bin"
    6328/    5EB6 : (MACRO)              		even
    6329/    5EB6 :                     
    6330/    5EB6 :                     ; ===========================================================================
    6331/    5EB6 :                     
    6332/    5EB6 :                     LevSz_ChkLamp:				; XREF: LevelSizeLoad
    6333/    5EB6 : 4A38 FE30           		tst.b	($FFFFFE30).w	; have any lampposts been hit?
    6334/    5EBA : 6710                		beq.s	LevSz_StartLoc	; if not, branch
    6335/    5EBC : 4EB9 0001 6E32      		jsr	Obj79_LoadInfo
    6336/    5EC2 : 3238 D008           		move.w	($FFFFD008).w,d1
    6337/    5EC6 : 3038 D00C           		move.w	($FFFFD00C).w,d0
    6338/    5ECA : 6052                		bra.s	loc_60D0
    6339/    5ECC :                     ; ===========================================================================
    6340/    5ECC :                     
    6341/    5ECC :                     LevSz_StartLoc:				; XREF: LevelSizeLoad
    6342/    5ECC : 3038 FE10           		move.w	($FFFFFE10).w,d0
    6343/    5ED0 : ED08                		lsl.b	#6,d0
    6344/    5ED2 : E848                		lsr.w	#4,d0
    6345/    5ED4 : 43F9 0000 5F60      		lea	(StartLocArray).l,a1			; MJ: load location array
    6346/    5EDA : 43F1 0000           		lea	(a1,d0.w),a1				; MJ: load Sonic's start location address
    6347/    5EDE : 4A78 FFF0           		tst.w	($FFFFFFF0).w	; is demo mode on?
    6348/    5EE2 : 6A0C                		bpl.s	LevSz_SonicPos	; if not, branch
    6349/    5EE4 : 3038 FFF4           		move.w	($FFFFFFF4).w,d0
    6350/    5EE8 : 5340                		subq.w	#1,d0
    6351/    5EEA : E548                		lsl.w	#2,d0
    6352/    5EEC : 43FB 00A8           		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
    6353/    5EF0 :                     
    6354/    5EF0 :                     LevSz_SonicPos:
    6355/    5EF0 : 7200                		moveq	#0,d1
    6356/    5EF2 : 3219                		move.w	(a1)+,d1
    6357/    5EF4 : 31C1 D008           		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
    6358/    5EF8 : 7000                		moveq	#0,d0
    6359/    5EFA : 3011                		move.w	(a1),d0
    6360/    5EFC : 31C0 D00C           		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
    6361/    5F00 : 1438 F600           		move.b	($FFFFF600).w,d2			; MJ: load game mode
    6362/    5F04 : 0242 00FC           		andi.w	#$00FC,d2				; MJ: keep in range
    6363/    5F08 : 0C02 0004           		cmpi.b	#$04,d2					; MJ: is screen mode at title?
    6364/    5F0C : 6610                		bne	loc_60D0				; MJ: if not, branch
    6365/    5F0E : 323C 0050           		move.w	#$0050,d1				; MJ: set positions for title screen
    6366/    5F12 : 303C 03B0           		move.w	#$03B0,d0				; MJ: ''
    6367/    5F16 : 31C1 D008           		move.w	d1,($FFFFD008).w			; MJ: save to object 1 so title screen follows
    6368/    5F1A : 31C0 D00C           		move.w	d0,($FFFFD00C).w			; MJ: ''
    6369/    5F1E :                     
    6370/    5F1E :                     loc_60D0:				; XREF: LevSz_ChkLamp
    6371/    5F1E : 0441 00A0           		subi.w	#$A0,d1
    6372/    5F22 : 6402                		bcc.s	loc_60D8
    6373/    5F24 : 7200                		moveq	#0,d1
    6374/    5F26 :                     
    6375/    5F26 :                     loc_60D8:
    6376/    5F26 : 3438 F72A           		move.w	($FFFFF72A).w,d2
    6377/    5F2A : B242                		cmp.w	d2,d1
    6378/    5F2C : 6502                		bcs.s	loc_60E2
    6379/    5F2E : 3202                		move.w	d2,d1
    6380/    5F30 :                     
    6381/    5F30 :                     loc_60E2:
    6382/    5F30 : 31C1 F700           		move.w	d1,($FFFFF700).w
    6383/    5F34 : 0440 0060           		subi.w	#$60,d0
    6384/    5F38 : 6402                		bcc.s	loc_60EE
    6385/    5F3A : 7000                		moveq	#0,d0
    6386/    5F3C :                     
    6387/    5F3C :                     loc_60EE:
    6388/    5F3C : B078 F72E           		cmp.w	($FFFFF72E).w,d0
    6389/    5F40 : 6D04                		blt.s	loc_60F8
    6390/    5F42 : 3038 F72E           		move.w	($FFFFF72E).w,d0
    6391/    5F46 :                     
    6392/    5F46 :                     loc_60F8:
    6393/    5F46 : 31C0 F704           		move.w	d0,($FFFFF704).w
    6394/    5F4A : 6100 00EE           		bsr.w	BgScrollSpeed
    6395/    5F4E : 7000                		moveq	#0,d0
    6396/    5F50 : 1038 FE10           		move.b	($FFFFFE10).w,d0
    6397/    5F54 : E508                		lsl.b	#2,d0
    6398/    5F56 : 21FB 0078 F7AC      		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
    6399/    5F5C : 6000 008E           		bra.w	LevSz_Unk
    6400/    5F60 :                     
    6401/    5F60 :                     ; ===========================================================================
    6402/    5F60 :                     ; ---------------------------------------------------------------------------
    6403/    5F60 :                     ; MJ: Sonic start location array
    6404/    5F60 :                     ; ---------------------------------------------------------------------------
    6405/    5F60 :                     
    6406/    5F60 :                     StartLocArray:	binclude	"_level-data/start-position/ghz1.bin"
    6407/    5F64 :                     		binclude	"_level-data/start-position/ghz2.bin"
    6408/    5F68 :                     		binclude	"_level-data/start-position/ghz3.bin"
    6409/    5F6C :                     		binclude	"_level-data/start-position/ghz4.bin"
    6410/    5F70 :                     		binclude	"_level-data/start-position/lz1.bin"
    6411/    5F74 :                     		binclude	"_level-data/start-position/lz2.bin"
    6412/    5F78 :                     		binclude	"_level-data/start-position/lz3.bin"
    6413/    5F7C :                     		binclude	"_level-data/start-position/lz4.bin"
    6414/    5F80 :                     		binclude	"_level-data/start-position/mz1.bin"
    6415/    5F84 :                     		binclude	"_level-data/start-position/mz2.bin"
    6416/    5F88 :                     		binclude	"_level-data/start-position/mz3.bin"
    6417/    5F8C :                     		binclude	"_level-data/start-position/mz4.bin"
    6418/    5F90 :                     		binclude	"_level-data/start-position/slz1.bin"
    6419/    5F94 :                     		binclude	"_level-data/start-position/slz2.bin"
    6420/    5F98 :                     		binclude	"_level-data/start-position/slz3.bin"
    6421/    5F9C :                     		binclude	"_level-data/start-position/slz4.bin"
    6422/    5FA0 :                     		binclude	"_level-data/start-position/syz1.bin"
    6423/    5FA4 :                     		binclude	"_level-data/start-position/syz2.bin"
    6424/    5FA8 :                     		binclude	"_level-data/start-position/syz3.bin"
    6425/    5FAC :                     		binclude	"_level-data/start-position/syz4.bin"
    6426/    5FB0 :                     		binclude	"_level-data/start-position/sbz1.bin"
    6427/    5FB4 :                     		binclude	"_level-data/start-position/sbz2.bin"
    6428/    5FB8 :                     		binclude	"_level-data/start-position/sbz3.bin"
    6429/    5FBC :                     		binclude	"_level-data/start-position/sbz4.bin"
    6430/    5FC0 :                     		binclude	"_level-data/start-position/end1.bin"
    6431/    5FC4 :                     		binclude	"_level-data/start-position/end2.bin"
    6432/    5FC8 :                     		binclude	"_level-data/start-position/end3.bin"
    6433/    5FCC :                     		binclude	"_level-data/start-position/end4.bin"
    6434/    5FD0 : (MACRO)              		even
    6435/    5FD0 :                     
    6436/    5FD0 :                     ; ===========================================================================
    6437/    5FD0 :                     ; ---------------------------------------------------------------------------
    6438/    5FD0 :                     ; Which	256x256	tiles contain loops or roll-tunnels
    6439/    5FD0 :                     ; ---------------------------------------------------------------------------
    6440/    5FD0 :                     ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
    6441/    5FD0 :                     ; loop,	loop, tunnel, tunnel
    6442/    5FD0 :                     ; ---------------------------------------------------------------------------
    6443/    5FD0 :                     LoopTileNums:	binclude	"_misc/loopnums.bin"
    6444/    5FEC : (MACRO)              		even
    6445/    5FEC :                     
    6446/    5FEC :                     ; ===========================================================================
    6447/    5FEC :                     
    6448/    5FEC :                     LevSz_Unk:				; XREF: LevelSizeLoad
    6449/    5FEC : 7000                		moveq	#0,d0
    6450/    5FEE : 1038 FE10           		move.b	($FFFFFE10).w,d0
    6451/    5FF2 : E748                		lsl.w	#3,d0
    6452/    5FF4 : 43FB 000C           		lea	dword_61B4(pc,d0.w),a1
    6453/    5FF8 : 45F8 F7F0           		lea	($FFFFF7F0).w,a2
    6454/    5FFC : 24D9                		move.l	(a1)+,(a2)+
    6455/    5FFE : 24D9                		move.l	(a1)+,(a2)+
    6456/    6000 : 4E75                		rts	
    6457/    6002 :                     ; End of function LevelSizeLoad
    6458/    6002 :                     
    6459/    6002 :                     ; ===========================================================================
    6460/    6002 : 0070 0100 0100      dword_61B4:	dc.l $700100, $1000100
             6008 : 0100             
    6461/    600A : 0800 0100 0100      		dc.l $8000100, $1000000
             6010 : 0000             
    6462/    6012 : 0800 0100 0100      		dc.l $8000100, $1000000
             6018 : 0000             
    6463/    601A : 0800 0100 0100      		dc.l $8000100, $1000000
             6020 : 0000             
    6464/    6022 : 0800 0100 0100      		dc.l $8000100, $1000000
             6028 : 0000             
    6465/    602A : 0800 0100 0100      		dc.l $8000100, $1000000
             6030 : 0000             
    6466/    6032 : 0070 0100 0100      		dc.l $700100, $1000100
             6038 : 0100             
    6467/    603A :                     
    6468/    603A :                     ; ---------------------------------------------------------------------------
    6469/    603A :                     ; Subroutine to	set scroll speed of some backgrounds
    6470/    603A :                     ; ---------------------------------------------------------------------------
    6471/    603A :                     
    6472/    603A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    6473/    603A :                     
    6474/    603A :                     
    6475/    603A :                     BgScrollSpeed:				; XREF: LevelSizeLoad
    6476/    603A : 4A38 FE30           		tst.b	($FFFFFE30).w
    6477/    603E : 6614                		bne.s	loc_6206
    6478/    6040 : 31C0 F70C           		move.w	d0,($FFFFF70C).w
    6479/    6044 : 31C0 F714           		move.w	d0,($FFFFF714).w
    6480/    6048 : 31C1 F708           		move.w	d1,($FFFFF708).w
    6481/    604C : 31C1 F710           		move.w	d1,($FFFFF710).w
    6482/    6050 : 31C1 F718           		move.w	d1,($FFFFF718).w
    6483/    6054 :                     
    6484/    6054 :                     loc_6206:
    6485/    6054 : 7400                		moveq	#0,d2
    6486/    6056 : 1438 FE10           		move.b	($FFFFFE10).w,d2
    6487/    605A : D442                		add.w	d2,d2
    6488/    605C : 343B 2006           		move.w	BgScroll_Index(pc,d2.w),d2
    6489/    6060 : 4EFB 2002           		jmp	BgScroll_Index(pc,d2.w)
    6490/    6064 :                     ; End of function BgScrollSpeed
    6491/    6064 :                     
    6492/    6064 :                     ; ===========================================================================
    6493/    6064 : 000E 0012           BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
    6494/    6068 : 001A 001C           		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
    6495/    606C : 0028 003C           		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
    6496/    6070 : 0048                		dc.w BgScroll_End-BgScroll_Index
    6497/    6072 :                     ; ===========================================================================
    6498/    6072 :                     
    6499/    6072 :                     BgScroll_GHZ:				; XREF: BgScroll_Index
    6500/    6072 : 6000 00C6           		bra.w	Deform_GHZ
    6501/    6076 :                     ; ===========================================================================
    6502/    6076 :                     
    6503/    6076 :                     BgScroll_LZ:				; XREF: BgScroll_Index
    6504/    6076 : E280                		asr.l	#1,d0
    6505/    6078 : 31C0 F70C           		move.w	d0,($FFFFF70C).w
    6506/    607C : 4E75                		rts	
    6507/    607E :                     ; ===========================================================================
    6508/    607E :                     
    6509/    607E :                     BgScroll_MZ:				; XREF: BgScroll_Index
    6510/    607E : 4E75                		rts	
    6511/    6080 :                     ; ===========================================================================
    6512/    6080 :                     
    6513/    6080 :                     BgScroll_SLZ:				; XREF: BgScroll_Index
    6514/    6080 : E280                		asr.l	#1,d0
    6515/    6082 : 0640 00C0           		addi.w	#$C0,d0
    6516/    6086 : 31C0 F70C           		move.w	d0,($FFFFF70C).w
    6517/    608A : 4E75                		rts	
    6518/    608C :                     ; ===========================================================================
    6519/    608C :                     
    6520/    608C :                     BgScroll_SYZ:				; XREF: BgScroll_Index
    6521/    608C : E980                		asl.l	#4,d0
    6522/    608E : 2400                		move.l	d0,d2
    6523/    6090 : E380                		asl.l	#1,d0
    6524/    6092 : D082                		add.l	d2,d0
    6525/    6094 : E080                		asr.l	#8,d0
    6526/    6096 : 31C0 F70C           		move.w	d0,($FFFFF70C).w
    6527/    609A : 31C0 F714           		move.w	d0,($FFFFF714).w
    6528/    609E : 4E75                		rts	
    6529/    60A0 :                     ; ===========================================================================
    6530/    60A0 :                     
    6531/    60A0 :                     BgScroll_SBZ:				; XREF: BgScroll_Index
    6532/    60A0 : E980                		asl.l	#4,d0
    6533/    60A2 : E380                		asl.l	#1,d0
    6534/    60A4 : E080                		asr.l	#8,d0
    6535/    60A6 : 31C0 F70C           		move.w	d0,($FFFFF70C).w
    6536/    60AA : 4E75                		rts	
    6537/    60AC :                     ; ===========================================================================
    6538/    60AC :                     
    6539/    60AC :                     BgScroll_End:				; XREF: BgScroll_Index
    6540/    60AC : 31FC 001E F70C      		move.w	#$1E,($FFFFF70C).w
    6541/    60B2 : 31FC 001E F714      		move.w	#$1E,($FFFFF714).w
    6542/    60B8 : 4E75                		rts	
    6543/    60BA :                     ; ===========================================================================
    6544/    60BA : 31FC 00A8 F708      		move.w	#$A8,($FFFFF708).w
    6545/    60C0 : 31FC 001E F70C      		move.w	#$1E,($FFFFF70C).w
    6546/    60C6 : 31FC FFC0 F710      		move.w	#-$40,($FFFFF710).w
    6547/    60CC : 31FC 001E F714      		move.w	#$1E,($FFFFF714).w
    6548/    60D2 : 4E75                		rts
    6549/    60D4 :                     
    6550/    60D4 :                     ; ---------------------------------------------------------------------------
    6551/    60D4 :                     ; Background layer deformation subroutines
    6552/    60D4 :                     ; ---------------------------------------------------------------------------
    6553/    60D4 :                     
    6554/    60D4 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    6555/    60D4 :                     
    6556/    60D4 :                     
    6557/    60D4 :                     DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
    6558/    60D4 : 4A38 F744           		tst.b	($FFFFF744).w
    6559/    60D8 : 6702                		beq.s	loc_628E
    6560/    60DA : 4E75                		rts	
    6561/    60DC :                     ; ===========================================================================
    6562/    60DC :                     
    6563/    60DC :                     loc_628E:
    6564/    60DC : 4278 F754           		clr.w	($FFFFF754).w
    6565/    60E0 : 4278 F756           		clr.w	($FFFFF756).w
    6566/    60E4 : 4278 F758           		clr.w	($FFFFF758).w
    6567/    60E8 : 4278 F75A           		clr.w	($FFFFF75A).w
    6568/    60EC : 6100 02DE           		bsr.w	ScrollHoriz
    6569/    60F0 : 6100 0372           		bsr.w	ScrollVertical
    6570/    60F4 : 6100 0A8A           		bsr.w	DynScrResizeLoad
    6571/    60F8 : 31F8 F700 F61A      		move.w	($FFFFF700).w,($FFFFF61A).w
    6572/    60FE : 31F8 F704 F616      		move.w	($FFFFF704).w,($FFFFF616).w
    6573/    6104 : 31F8 F708 F61C      		move.w	($FFFFF708).w,($FFFFF61C).w
    6574/    610A : 31F8 F70C F618      		move.w	($FFFFF70C).w,($FFFFF618).w
    6575/    6110 : 31F8 F718 F620      		move.w	($FFFFF718).w,($FFFFF620).w
    6576/    6116 : 31F8 F71C F61E      		move.w	($FFFFF71C).w,($FFFFF61E).w
    6577/    611C : 7000                		moveq	#0,d0
    6578/    611E : 1038 FE10           		move.b	($FFFFFE10).w,d0
    6579/    6122 : D040                		add.w	d0,d0
    6580/    6124 : 303B 0006           		move.w	Deform_Index(pc,d0.w),d0
    6581/    6128 : 4EFB 0002           		jmp	Deform_Index(pc,d0.w)
    6582/    612C :                     ; End of function DeformBgLayer
    6583/    612C :                     
    6584/    612C :                     ; ===========================================================================
    6585/    612C :                     ; ---------------------------------------------------------------------------
    6586/    612C :                     ; Offset index for background layer deformation	code
    6587/    612C :                     ; ---------------------------------------------------------------------------
    6588/    612C : 000E 00B8           Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
    6589/    6130 : 00F8 0150           		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
    6590/    6134 : 0228 0266           		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
    6591/    6138 : 000E                		dc.w Deform_GHZ-Deform_Index
    6592/    613A :                     ; ---------------------------------------------------------------------------
    6593/    613A :                     ; Green	Hill Zone background layer deformation code
    6594/    613A :                     ; ---------------------------------------------------------------------------
    6595/    613A :                     
    6596/    613A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    6597/    613A :                     
    6598/    613A :                     
    6599/    613A :                     Deform_GHZ:				; XREF: Deform_Index
    6600/    613A : 3838 F73A           		move.w	($FFFFF73A).w,d4
    6601/    613E : 48C4                		ext.l	d4
    6602/    6140 : EB84                		asl.l	#5,d4
    6603/    6142 : 2204                		move.l	d4,d1
    6604/    6144 : E384                		asl.l	#1,d4
    6605/    6146 : D881                		add.l	d1,d4
    6606/    6148 : 7A00                		moveq	#0,d5
    6607/    614A : 6100 046A           		bsr.w	ScrollBlock1
    6608/    614E : 6100 0542           		bsr.w	ScrollBlock4
    6609/    6152 : 43F8 CC00           		lea	($FFFFCC00).w,a1
    6610/    6156 : 3038 F704           		move.w	($FFFFF704).w,d0
    6611/    615A : 0240 07FF           		andi.w	#$7FF,d0
    6612/    615E : EA48                		lsr.w	#5,d0
    6613/    6160 : 4440                		neg.w	d0
    6614/    6162 : 0640 0026           		addi.w	#$26,d0
    6615/    6166 : 31C0 F714           		move.w	d0,($FFFFF714).w
    6616/    616A : 3800                		move.w	d0,d4
    6617/    616C : 6100 04F4           		bsr.w	ScrollBlock3
    6618/    6170 : 31F8 F70C F618      		move.w	($FFFFF70C).w,($FFFFF618).w
    6619/    6176 : 323C 006F           		move.w	#$6F,d1
    6620/    617A : 9244                		sub.w	d4,d1
    6621/    617C : 3038 F700           		move.w	($FFFFF700).w,d0
    6622/    6180 : 0C38 0004 F600      		cmpi.b	#4,($FFFFF600).w
    6623/    6186 : 6602                		bne.s	loc_633C
    6624/    6188 : 7000                		moveq	#0,d0
    6625/    618A :                     
    6626/    618A :                     loc_633C:
    6627/    618A : 4440                		neg.w	d0
    6628/    618C : 4840                		swap	d0
    6629/    618E : 3038 F708           		move.w	($FFFFF708).w,d0
    6630/    6192 : 4440                		neg.w	d0
    6631/    6194 :                     
    6632/    6194 :                     loc_6346:
    6633/    6194 : 22C0                		move.l	d0,(a1)+
    6634/    6196 : 51C9 FFFC           		dbf	d1,loc_6346
    6635/    619A : 323C 0027           		move.w	#$27,d1
    6636/    619E : 3038 F710           		move.w	($FFFFF710).w,d0
    6637/    61A2 : 4440                		neg.w	d0
    6638/    61A4 :                     
    6639/    61A4 :                     loc_6356:
    6640/    61A4 : 22C0                		move.l	d0,(a1)+
    6641/    61A6 : 51C9 FFFC           		dbf	d1,loc_6356
    6642/    61AA : 3038 F710           		move.w	($FFFFF710).w,d0
    6643/    61AE : 0640 0000           		addi.w	#0,d0
    6644/    61B2 : 3438 F700           		move.w	($FFFFF700).w,d2
    6645/    61B6 : 0642 FE00           		addi.w	#-$200,d2
    6646/    61BA : 9440                		sub.w	d0,d2
    6647/    61BC : 48C2                		ext.l	d2
    6648/    61BE : E182                		asl.l	#8,d2
    6649/    61C0 : 85FC 0068           		divs.w	#$68,d2
    6650/    61C4 : 48C2                		ext.l	d2
    6651/    61C6 : E182                		asl.l	#8,d2
    6652/    61C8 : 7600                		moveq	#0,d3
    6653/    61CA : 3600                		move.w	d0,d3
    6654/    61CC : 323C 0047           		move.w	#$47,d1
    6655/    61D0 : D244                		add.w	d4,d1
    6656/    61D2 :                     
    6657/    61D2 :                     loc_6384:
    6658/    61D2 : 3003                		move.w	d3,d0
    6659/    61D4 : 4440                		neg.w	d0
    6660/    61D6 : 22C0                		move.l	d0,(a1)+
    6661/    61D8 : 4843                		swap	d3
    6662/    61DA : D682                		add.l	d2,d3
    6663/    61DC : 4843                		swap	d3
    6664/    61DE : 51C9 FFF2           		dbf	d1,loc_6384
    6665/    61E2 : 4E75                		rts	
    6666/    61E4 :                     ; End of function Deform_GHZ
    6667/    61E4 :                     
    6668/    61E4 :                     ; ---------------------------------------------------------------------------
    6669/    61E4 :                     ; Labyrinth Zone background layer deformation code
    6670/    61E4 :                     ; ---------------------------------------------------------------------------
    6671/    61E4 :                     
    6672/    61E4 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    6673/    61E4 :                     
    6674/    61E4 :                     
    6675/    61E4 :                     Deform_LZ:				; XREF: Deform_Index
    6676/    61E4 : 3838 F73A           		move.w	($FFFFF73A).w,d4
    6677/    61E8 : 48C4                		ext.l	d4
    6678/    61EA : EF84                		asl.l	#7,d4
    6679/    61EC : 3A38 F73C           		move.w	($FFFFF73C).w,d5
    6680/    61F0 : 48C5                		ext.l	d5
    6681/    61F2 : EF85                		asl.l	#7,d5
    6682/    61F4 : 6100 03C0           		bsr.w	ScrollBlock1
    6683/    61F8 : 31F8 F70C F618      		move.w	($FFFFF70C).w,($FFFFF618).w
    6684/    61FE : 43F8 CC00           		lea	($FFFFCC00).w,a1
    6685/    6202 : 323C 00DF           		move.w	#$DF,d1
    6686/    6206 : 3038 F700           		move.w	($FFFFF700).w,d0
    6687/    620A : 4440                		neg.w	d0
    6688/    620C : 4840                		swap	d0
    6689/    620E : 3038 F708           		move.w	($FFFFF708).w,d0
    6690/    6212 : 4440                		neg.w	d0
    6691/    6214 :                     
    6692/    6214 :                     loc_63C6:
    6693/    6214 : 22C0                		move.l	d0,(a1)+
    6694/    6216 : 51C9 FFFC           		dbf	d1,loc_63C6
    6695/    621A : 3038 F646           		move.w	($FFFFF646).w,d0
    6696/    621E : 9078 F704           		sub.w	($FFFFF704).w,d0
    6697/    6222 : 4E75                		rts	
    6698/    6224 :                     ; End of function Deform_LZ
    6699/    6224 :                     
    6700/    6224 :                     ; ---------------------------------------------------------------------------
    6701/    6224 :                     ; Marble Zone background layer deformation code
    6702/    6224 :                     ; ---------------------------------------------------------------------------
    6703/    6224 :                     
    6704/    6224 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    6705/    6224 :                     
    6706/    6224 :                     
    6707/    6224 :                     Deform_MZ:				; XREF: Deform_Index
    6708/    6224 : 3838 F73A           		move.w	($FFFFF73A).w,d4
    6709/    6228 : 48C4                		ext.l	d4
    6710/    622A : ED84                		asl.l	#6,d4
    6711/    622C : 2204                		move.l	d4,d1
    6712/    622E : E384                		asl.l	#1,d4
    6713/    6230 : D881                		add.l	d1,d4
    6714/    6232 : 7A00                		moveq	#0,d5
    6715/    6234 : 6100 0380           		bsr.w	ScrollBlock1
    6716/    6238 : 303C 0200           		move.w	#$200,d0
    6717/    623C : 3238 F704           		move.w	($FFFFF704).w,d1
    6718/    6240 : 0441 01C8           		subi.w	#$1C8,d1
    6719/    6244 : 650A                		bcs.s	loc_6402
    6720/    6246 : 3401                		move.w	d1,d2
    6721/    6248 : D241                		add.w	d1,d1
    6722/    624A : D242                		add.w	d2,d1
    6723/    624C : E441                		asr.w	#2,d1
    6724/    624E : D041                		add.w	d1,d0
    6725/    6250 :                     
    6726/    6250 :                     loc_6402:
    6727/    6250 : 31C0 F714           		move.w	d0,($FFFFF714).w
    6728/    6254 : 6100 040C           		bsr.w	ScrollBlock3
    6729/    6258 : 31F8 F70C F618      		move.w	($FFFFF70C).w,($FFFFF618).w
    6730/    625E : 43F8 CC00           		lea	($FFFFCC00).w,a1
    6731/    6262 : 323C 00DF           		move.w	#$DF,d1
    6732/    6266 : 3038 F700           		move.w	($FFFFF700).w,d0
    6733/    626A : 4440                		neg.w	d0
    6734/    626C : 4840                		swap	d0
    6735/    626E : 3038 F708           		move.w	($FFFFF708).w,d0
    6736/    6272 : 4440                		neg.w	d0
    6737/    6274 :                     
    6738/    6274 :                     loc_6426:
    6739/    6274 : 22C0                		move.l	d0,(a1)+
    6740/    6276 : 51C9 FFFC           		dbf	d1,loc_6426
    6741/    627A : 4E75                		rts	
    6742/    627C :                     ; End of function Deform_MZ
    6743/    627C :                     
    6744/    627C :                     ; ---------------------------------------------------------------------------
    6745/    627C :                     ; Star Light Zone background layer deformation code
    6746/    627C :                     ; ---------------------------------------------------------------------------
    6747/    627C :                     
    6748/    627C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    6749/    627C :                     
    6750/    627C :                     
    6751/    627C :                     Deform_SLZ:				; XREF: Deform_Index
    6752/    627C : 3838 F73A           		move.w	($FFFFF73A).w,d4
    6753/    6280 : 48C4                		ext.l	d4
    6754/    6282 : EF84                		asl.l	#7,d4
    6755/    6284 : 3A38 F73C           		move.w	($FFFFF73C).w,d5
    6756/    6288 : 48C5                		ext.l	d5
    6757/    628A : EF85                		asl.l	#7,d5
    6758/    628C : 6100 0392           		bsr.w	ScrollBlock2
    6759/    6290 : 31F8 F70C F618      		move.w	($FFFFF70C).w,($FFFFF618).w
    6760/    6296 : 6100 005E           		bsr.w	Deform_SLZ_2
    6761/    629A : 45F8 A800           		lea	($FFFFA800).w,a2
    6762/    629E : 3038 F70C           		move.w	($FFFFF70C).w,d0
    6763/    62A2 : 3400                		move.w	d0,d2
    6764/    62A4 : 0440 00C0           		subi.w	#$C0,d0
    6765/    62A8 : 0240 03F0           		andi.w	#$3F0,d0
    6766/    62AC : E648                		lsr.w	#3,d0
    6767/    62AE : 45F2 0000           		lea	(a2,d0.w),a2
    6768/    62B2 : 43F8 CC00           		lea	($FFFFCC00).w,a1
    6769/    62B6 : 323C 000E           		move.w	#$E,d1
    6770/    62BA : 3038 F700           		move.w	($FFFFF700).w,d0
    6771/    62BE : 4440                		neg.w	d0
    6772/    62C0 : 4840                		swap	d0
    6773/    62C2 : 0242 000F           		andi.w	#$F,d2
    6774/    62C6 : D442                		add.w	d2,d2
    6775/    62C8 : 301A                		move.w	(a2)+,d0
    6776/    62CA : 4EFB 2004           		jmp	loc_6482(pc,d2.w)
    6777/    62CE :                     ; ===========================================================================
    6778/    62CE :                     
    6779/    62CE :                     loc_6480:				; XREF: Deform_SLZ
    6780/    62CE : 301A                		move.w	(a2)+,d0
    6781/    62D0 :                     
    6782/    62D0 :                     loc_6482:
    6783/    62D0 : 22C0                		move.l	d0,(a1)+
    6784/    62D2 : 22C0                		move.l	d0,(a1)+
    6785/    62D4 : 22C0                		move.l	d0,(a1)+
    6786/    62D6 : 22C0                		move.l	d0,(a1)+
    6787/    62D8 : 22C0                		move.l	d0,(a1)+
    6788/    62DA : 22C0                		move.l	d0,(a1)+
    6789/    62DC : 22C0                		move.l	d0,(a1)+
    6790/    62DE : 22C0                		move.l	d0,(a1)+
    6791/    62E0 : 22C0                		move.l	d0,(a1)+
    6792/    62E2 : 22C0                		move.l	d0,(a1)+
    6793/    62E4 : 22C0                		move.l	d0,(a1)+
    6794/    62E6 : 22C0                		move.l	d0,(a1)+
    6795/    62E8 : 22C0                		move.l	d0,(a1)+
    6796/    62EA : 22C0                		move.l	d0,(a1)+
    6797/    62EC : 22C0                		move.l	d0,(a1)+
    6798/    62EE : 22C0                		move.l	d0,(a1)+
    6799/    62F0 : 51C9 FFDC           		dbf	d1,loc_6480
    6800/    62F4 : 4E75                		rts	
    6801/    62F6 :                     ; End of function Deform_SLZ
    6802/    62F6 :                     
    6803/    62F6 :                     
    6804/    62F6 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    6805/    62F6 :                     
    6806/    62F6 :                     
    6807/    62F6 :                     Deform_SLZ_2:				; XREF: Deform_SLZ
    6808/    62F6 : 43F8 A800           		lea	($FFFFA800).w,a1
    6809/    62FA : 3438 F700           		move.w	($FFFFF700).w,d2
    6810/    62FE : 4442                		neg.w	d2
    6811/    6300 : 3002                		move.w	d2,d0
    6812/    6302 : E640                		asr.w	#3,d0
    6813/    6304 : 9042                		sub.w	d2,d0
    6814/    6306 : 48C0                		ext.l	d0
    6815/    6308 : E980                		asl.l	#4,d0
    6816/    630A : 81FC 001C           		divs.w	#$1C,d0
    6817/    630E : 48C0                		ext.l	d0
    6818/    6310 : E980                		asl.l	#4,d0
    6819/    6312 : E180                		asl.l	#8,d0
    6820/    6314 : 7600                		moveq	#0,d3
    6821/    6316 : 3602                		move.w	d2,d3
    6822/    6318 : 323C 001B           		move.w	#$1B,d1
    6823/    631C :                     
    6824/    631C :                     loc_64CE:
    6825/    631C : 32C3                		move.w	d3,(a1)+
    6826/    631E : 4843                		swap	d3
    6827/    6320 : D680                		add.l	d0,d3
    6828/    6322 : 4843                		swap	d3
    6829/    6324 : 51C9 FFF6           		dbf	d1,loc_64CE
    6830/    6328 : 3002                		move.w	d2,d0
    6831/    632A : E640                		asr.w	#3,d0
    6832/    632C : 323C 0004           		move.w	#4,d1
    6833/    6330 :                     
    6834/    6330 :                     loc_64E2:
    6835/    6330 : 32C0                		move.w	d0,(a1)+
    6836/    6332 : 51C9 FFFC           		dbf	d1,loc_64E2
    6837/    6336 : 3002                		move.w	d2,d0
    6838/    6338 : E440                		asr.w	#2,d0
    6839/    633A : 323C 0004           		move.w	#4,d1
    6840/    633E :                     
    6841/    633E :                     loc_64F0:
    6842/    633E : 32C0                		move.w	d0,(a1)+
    6843/    6340 : 51C9 FFFC           		dbf	d1,loc_64F0
    6844/    6344 : 3002                		move.w	d2,d0
    6845/    6346 : E240                		asr.w	#1,d0
    6846/    6348 : 323C 001D           		move.w	#$1D,d1
    6847/    634C :                     
    6848/    634C :                     loc_64FE:
    6849/    634C : 32C0                		move.w	d0,(a1)+
    6850/    634E : 51C9 FFFC           		dbf	d1,loc_64FE
    6851/    6352 : 4E75                		rts	
    6852/    6354 :                     ; End of function Deform_SLZ_2
    6853/    6354 :                     
    6854/    6354 :                     ; ---------------------------------------------------------------------------
    6855/    6354 :                     ; Spring Yard Zone background layer deformation	code
    6856/    6354 :                     ; ---------------------------------------------------------------------------
    6857/    6354 :                     
    6858/    6354 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    6859/    6354 :                     
    6860/    6354 :                     
    6861/    6354 :                     Deform_SYZ:				; XREF: Deform_Index
    6862/    6354 : 3838 F73A           		move.w	($FFFFF73A).w,d4
    6863/    6358 : 48C4                		ext.l	d4
    6864/    635A : ED84                		asl.l	#6,d4
    6865/    635C : 3A38 F73C           		move.w	($FFFFF73C).w,d5
    6866/    6360 : 48C5                		ext.l	d5
    6867/    6362 : E985                		asl.l	#4,d5
    6868/    6364 : 2205                		move.l	d5,d1
    6869/    6366 : E385                		asl.l	#1,d5
    6870/    6368 : DA81                		add.l	d1,d5
    6871/    636A : 6100 024A           		bsr.w	ScrollBlock1
    6872/    636E : 31F8 F70C F618      		move.w	($FFFFF70C).w,($FFFFF618).w
    6873/    6374 : 43F8 CC00           		lea	($FFFFCC00).w,a1
    6874/    6378 : 323C 00DF           		move.w	#$DF,d1
    6875/    637C : 3038 F700           		move.w	($FFFFF700).w,d0
    6876/    6380 : 4440                		neg.w	d0
    6877/    6382 : 4840                		swap	d0
    6878/    6384 : 3038 F708           		move.w	($FFFFF708).w,d0
    6879/    6388 : 4440                		neg.w	d0
    6880/    638A :                     
    6881/    638A :                     loc_653C:
    6882/    638A : 22C0                		move.l	d0,(a1)+
    6883/    638C : 51C9 FFFC           		dbf	d1,loc_653C
    6884/    6390 : 4E75                		rts	
    6885/    6392 :                     ; End of function Deform_SYZ
    6886/    6392 :                     
    6887/    6392 :                     ; ---------------------------------------------------------------------------
    6888/    6392 :                     ; Scrap	Brain Zone background layer deformation	code
    6889/    6392 :                     ; ---------------------------------------------------------------------------
    6890/    6392 :                     
    6891/    6392 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    6892/    6392 :                     
    6893/    6392 :                     
    6894/    6392 :                     Deform_SBZ:				; XREF: Deform_Index
    6895/    6392 : 3838 F73A           		move.w	($FFFFF73A).w,d4
    6896/    6396 : 48C4                		ext.l	d4
    6897/    6398 : ED84                		asl.l	#6,d4
    6898/    639A : 3A38 F73C           		move.w	($FFFFF73C).w,d5
    6899/    639E : 48C5                		ext.l	d5
    6900/    63A0 : E985                		asl.l	#4,d5
    6901/    63A2 : E385                		asl.l	#1,d5
    6902/    63A4 : 6100 0210           		bsr.w	ScrollBlock1
    6903/    63A8 : 31F8 F70C F618      		move.w	($FFFFF70C).w,($FFFFF618).w
    6904/    63AE : 43F8 CC00           		lea	($FFFFCC00).w,a1
    6905/    63B2 : 323C 00DF           		move.w	#$DF,d1
    6906/    63B6 : 3038 F700           		move.w	($FFFFF700).w,d0
    6907/    63BA : 4440                		neg.w	d0
    6908/    63BC : 4840                		swap	d0
    6909/    63BE : 3038 F708           		move.w	($FFFFF708).w,d0
    6910/    63C2 : 4440                		neg.w	d0
    6911/    63C4 :                     
    6912/    63C4 :                     loc_6576:
    6913/    63C4 : 22C0                		move.l	d0,(a1)+
    6914/    63C6 : 51C9 FFFC           		dbf	d1,loc_6576
    6915/    63CA : 4E75                		rts	
    6916/    63CC :                     ; End of function Deform_SBZ
    6917/    63CC :                     
    6918/    63CC :                     ; ---------------------------------------------------------------------------
    6919/    63CC :                     ; Subroutine to	scroll the level horizontally as Sonic moves
    6920/    63CC :                     ; ---------------------------------------------------------------------------
    6921/    63CC :                     
    6922/    63CC :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    6923/    63CC :                     
    6924/    63CC :                     
    6925/    63CC :                     ScrollHoriz:				; XREF: DeformBgLayer
    6926/    63CC : 3838 F700           		move.w	($FFFFF700).w,d4
    6927/    63D0 : 612E                		bsr.s	ScrollHoriz2
    6928/    63D2 : 3038 F700           		move.w	($FFFFF700).w,d0
    6929/    63D6 : 0240 0010           		andi.w	#$10,d0
    6930/    63DA : 1238 F74A           		move.b	($FFFFF74A).w,d1
    6931/    63DE : B300                		eor.b	d1,d0
    6932/    63E0 : 661C                		bne.s	locret_65B0
    6933/    63E2 : 0A38 0010 F74A      		eori.b	#$10,($FFFFF74A).w
    6934/    63E8 : 3038 F700           		move.w	($FFFFF700).w,d0
    6935/    63EC : 9044                		sub.w	d4,d0
    6936/    63EE : 6A08                		bpl.s	loc_65AA
    6937/    63F0 : 08F8 0002 F754      		bset	#2,($FFFFF754).w
    6938/    63F6 : 4E75                		rts	
    6939/    63F8 :                     ; ===========================================================================
    6940/    63F8 :                     
    6941/    63F8 :                     loc_65AA:
    6942/    63F8 : 08F8 0003 F754      		bset	#3,($FFFFF754).w
    6943/    63FE :                     
    6944/    63FE :                     locret_65B0:
    6945/    63FE : 4E75                		rts	
    6946/    6400 :                     ; End of function ScrollHoriz
    6947/    6400 :                     
    6948/    6400 :                     
    6949/    6400 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    6950/    6400 :                     
    6951/    6400 :                     
    6952/    6400 :                     ScrollHoriz2:				; XREF: ScrollHoriz
    6953/    6400 : 3038 D008           		move.w	($FFFFD008).w,d0
    6954/    6404 : 9078 F700           		sub.w	($FFFFF700).w,d0
    6955/    6408 : 0440 0090           		subi.w	#$90,d0
    6956/    640C : 6536                		bcs.s	loc_65F6
    6957/    640E : 0440 0010           		subi.w	#$10,d0
    6958/    6412 : 6406                		bcc.s	loc_65CC
    6959/    6414 : 4278 F73A           		clr.w	($FFFFF73A).w
    6960/    6418 : 4E75                		rts	
    6961/    641A :                     ; ===========================================================================
    6962/    641A :                     
    6963/    641A :                     loc_65CC:
    6964/    641A : 0C40 0010           		cmpi.w	#$10,d0
    6965/    641E : 6504                		bcs.s	loc_65D6
    6966/    6420 : 303C 0010           		move.w	#$10,d0
    6967/    6424 :                     
    6968/    6424 :                     loc_65D6:
    6969/    6424 : D078 F700           		add.w	($FFFFF700).w,d0
    6970/    6428 : B078 F72A           		cmp.w	($FFFFF72A).w,d0
    6971/    642C : 6D04                		blt.s	loc_65E4
    6972/    642E : 3038 F72A           		move.w	($FFFFF72A).w,d0
    6973/    6432 :                     
    6974/    6432 :                     loc_65E4:
    6975/    6432 : 3200                		move.w	d0,d1
    6976/    6434 : 9278 F700           		sub.w	($FFFFF700).w,d1
    6977/    6438 : E141                		asl.w	#8,d1
    6978/    643A : 31C0 F700           		move.w	d0,($FFFFF700).w
    6979/    643E : 31C1 F73A           		move.w	d1,($FFFFF73A).w
    6980/    6442 : 4E75                		rts	
    6981/    6444 :                     ; ===========================================================================
    6982/    6444 :                     
    6983/    6444 :                     loc_65F6:				; XREF: ScrollHoriz2
    6984/    6444 : D078 F700           		add.w	($FFFFF700).w,d0
    6985/    6448 : B078 F728           		cmp.w	($FFFFF728).w,d0
    6986/    644C : 6EE4                		bgt.s	loc_65E4
    6987/    644E : 3038 F728           		move.w	($FFFFF728).w,d0
    6988/    6452 : 60DE                		bra.s	loc_65E4
    6989/    6454 :                     ; End of function ScrollHoriz2
    6990/    6454 :                     
    6991/    6454 :                     ; ===========================================================================
    6992/    6454 : 4A40                		tst.w	d0
    6993/    6456 : 6A06                		bpl.s	loc_6610
    6994/    6458 : 303C FFFE           		move.w	#-2,d0
    6995/    645C : 60E6                		bra.s	loc_65F6
    6996/    645E :                     ; ===========================================================================
    6997/    645E :                     
    6998/    645E :                     loc_6610:
    6999/    645E : 303C 0002           		move.w	#2,d0
    7000/    6462 : 60B6                		bra.s	loc_65CC
    7001/    6464 :                     
    7002/    6464 :                     ; ---------------------------------------------------------------------------
    7003/    6464 :                     ; Subroutine to	scroll the level vertically as Sonic moves
    7004/    6464 :                     ; ---------------------------------------------------------------------------
    7005/    6464 :                     
    7006/    6464 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7007/    6464 :                     
    7008/    6464 :                     
    7009/    6464 :                     ScrollVertical:				; XREF: DeformBgLayer
    7010/    6464 : 7200                		moveq	#0,d1
    7011/    6466 : 3038 D00C           		move.w	($FFFFD00C).w,d0
    7012/    646A : 9078 F704           		sub.w	($FFFFF704).w,d0
    7013/    646E : 0838 0002 D022      		btst	#2,($FFFFD022).w
    7014/    6474 : 6702                		beq.s	loc_662A
    7015/    6476 : 5B40                		subq.w	#5,d0
    7016/    6478 :                     
    7017/    6478 :                     loc_662A:
    7018/    6478 : 0838 0001 D022      		btst	#1,($FFFFD022).w
    7019/    647E : 6718                		beq.s	loc_664A
    7020/    6480 : 0640 0020           		addi.w	#$20,d0
    7021/    6484 : 9078 F73E           		sub.w	($FFFFF73E).w,d0
    7022/    6488 : 655A                		bcs.s	loc_6696
    7023/    648A : 0440 0040           		subi.w	#$40,d0
    7024/    648E : 6454                		bcc.s	loc_6696
    7025/    6490 : 4A38 F75C           		tst.b	($FFFFF75C).w
    7026/    6494 : 6660                		bne.s	loc_66A8
    7027/    6496 : 600C                		bra.s	loc_6656
    7028/    6498 :                     ; ===========================================================================
    7029/    6498 :                     
    7030/    6498 :                     loc_664A:
    7031/    6498 : 9078 F73E           		sub.w	($FFFFF73E).w,d0
    7032/    649C : 660C                		bne.s	loc_665C
    7033/    649E : 4A38 F75C           		tst.b	($FFFFF75C).w
    7034/    64A2 : 6652                		bne.s	loc_66A8
    7035/    64A4 :                     
    7036/    64A4 :                     loc_6656:
    7037/    64A4 : 4278 F73C           		clr.w	($FFFFF73C).w
    7038/    64A8 : 4E75                		rts	
    7039/    64AA :                     ; ===========================================================================
    7040/    64AA :                     
    7041/    64AA :                     loc_665C:
    7042/    64AA : 0C78 0060 F73E      		cmpi.w	#$60,($FFFFF73E).w
    7043/    64B0 : 6620                		bne.s	loc_6684
    7044/    64B2 : 3238 D014           		move.w	($FFFFD014).w,d1
    7045/    64B6 : 6A02                		bpl.s	loc_666C
    7046/    64B8 : 4441                		neg.w	d1
    7047/    64BA :                     
    7048/    64BA :                     loc_666C:
    7049/    64BA : 0C41 0800           		cmpi.w	#$800,d1
    7050/    64BE : 6424                		bcc.s	loc_6696
    7051/    64C0 : 323C 0600           		move.w	#$600,d1
    7052/    64C4 : 0C40 0006           		cmpi.w	#6,d0
    7053/    64C8 : 6E7A                		bgt.s	loc_66F6
    7054/    64CA : 0C40 FFFA           		cmpi.w	#-6,d0
    7055/    64CE : 6D3E                		blt.s	loc_66C0
    7056/    64D0 : 602A                		bra.s	loc_66AE
    7057/    64D2 :                     ; ===========================================================================
    7058/    64D2 :                     
    7059/    64D2 :                     loc_6684:
    7060/    64D2 : 323C 0200           		move.w	#$200,d1
    7061/    64D6 : 0C40 0002           		cmpi.w	#2,d0
    7062/    64DA : 6E68                		bgt.s	loc_66F6
    7063/    64DC : 0C40 FFFE           		cmpi.w	#-2,d0
    7064/    64E0 : 6D2C                		blt.s	loc_66C0
    7065/    64E2 : 6018                		bra.s	loc_66AE
    7066/    64E4 :                     ; ===========================================================================
    7067/    64E4 :                     
    7068/    64E4 :                     loc_6696:
    7069/    64E4 : 323C 1000           		move.w	#$1000,d1
    7070/    64E8 : 0C40 0010           		cmpi.w	#$10,d0
    7071/    64EC : 6E56                		bgt.s	loc_66F6
    7072/    64EE : 0C40 FFF0           		cmpi.w	#-$10,d0
    7073/    64F2 : 6D1A                		blt.s	loc_66C0
    7074/    64F4 : 6006                		bra.s	loc_66AE
    7075/    64F6 :                     ; ===========================================================================
    7076/    64F6 :                     
    7077/    64F6 :                     loc_66A8:
    7078/    64F6 : 7000                		moveq	#0,d0
    7079/    64F8 : 11C0 F75C           		move.b	d0,($FFFFF75C).w
    7080/    64FC :                     
    7081/    64FC :                     loc_66AE:
    7082/    64FC : 7200                		moveq	#0,d1
    7083/    64FE : 3200                		move.w	d0,d1
    7084/    6500 : D278 F704           		add.w	($FFFFF704).w,d1
    7085/    6504 : 4A40                		tst.w	d0
    7086/    6506 : 6A00 0046           		bpl.w	loc_6700
    7087/    650A : 6000 000E           		bra.w	loc_66CC
    7088/    650E :                     ; ===========================================================================
    7089/    650E :                     
    7090/    650E :                     loc_66C0:
    7091/    650E : 4441                		neg.w	d1
    7092/    6510 : 48C1                		ext.l	d1
    7093/    6512 : E181                		asl.l	#8,d1
    7094/    6514 : D2B8 F704           		add.l	($FFFFF704).w,d1
    7095/    6518 : 4841                		swap	d1
    7096/    651A :                     
    7097/    651A :                     loc_66CC:
    7098/    651A : B278 F72C           		cmp.w	($FFFFF72C).w,d1
    7099/    651E : 6E52                		bgt.s	loc_6724
    7100/    6520 : 0C41 FF00           		cmpi.w	#-$100,d1
    7101/    6524 : 6E18                		bgt.s	loc_66F0
    7102/    6526 : 0241 07FF           		andi.w	#$7FF,d1
    7103/    652A : 0278 07FF D00C      		andi.w	#$7FF,($FFFFD00C).w
    7104/    6530 : 0278 07FF F704      		andi.w	#$7FF,($FFFFF704).w
    7105/    6536 : 0278 03FF F70C      		andi.w	#$3FF,($FFFFF70C).w
    7106/    653C : 6034                		bra.s	loc_6724
    7107/    653E :                     ; ===========================================================================
    7108/    653E :                     
    7109/    653E :                     loc_66F0:
    7110/    653E : 3238 F72C           		move.w	($FFFFF72C).w,d1
    7111/    6542 : 602E                		bra.s	loc_6724
    7112/    6544 :                     ; ===========================================================================
    7113/    6544 :                     
    7114/    6544 :                     loc_66F6:
    7115/    6544 : 48C1                		ext.l	d1
    7116/    6546 : E181                		asl.l	#8,d1
    7117/    6548 : D2B8 F704           		add.l	($FFFFF704).w,d1
    7118/    654C : 4841                		swap	d1
    7119/    654E :                     
    7120/    654E :                     loc_6700:
    7121/    654E : B278 F72E           		cmp.w	($FFFFF72E).w,d1
    7122/    6552 : 6D1E                		blt.s	loc_6724
    7123/    6554 : 0441 0800           		subi.w	#$800,d1
    7124/    6558 : 6514                		bcs.s	loc_6720
    7125/    655A : 0278 07FF D00C      		andi.w	#$7FF,($FFFFD00C).w
    7126/    6560 : 0478 0800 F704      		subi.w	#$800,($FFFFF704).w
    7127/    6566 : 0278 03FF F70C      		andi.w	#$3FF,($FFFFF70C).w
    7128/    656C : 6004                		bra.s	loc_6724
    7129/    656E :                     ; ===========================================================================
    7130/    656E :                     
    7131/    656E :                     loc_6720:
    7132/    656E : 3238 F72E           		move.w	($FFFFF72E).w,d1
    7133/    6572 :                     
    7134/    6572 :                     loc_6724:
    7135/    6572 : 3838 F704           		move.w	($FFFFF704).w,d4
    7136/    6576 : 4841                		swap	d1
    7137/    6578 : 2601                		move.l	d1,d3
    7138/    657A : 96B8 F704           		sub.l	($FFFFF704).w,d3
    7139/    657E : E09B                		ror.l	#8,d3
    7140/    6580 : 31C3 F73C           		move.w	d3,($FFFFF73C).w
    7141/    6584 : 21C1 F704           		move.l	d1,($FFFFF704).w
    7142/    6588 : 3038 F704           		move.w	($FFFFF704).w,d0
    7143/    658C : 0240 0010           		andi.w	#$10,d0
    7144/    6590 : 1238 F74B           		move.b	($FFFFF74B).w,d1
    7145/    6594 : B300                		eor.b	d1,d0
    7146/    6596 : 661C                		bne.s	locret_6766
    7147/    6598 : 0A38 0010 F74B      		eori.b	#$10,($FFFFF74B).w
    7148/    659E : 3038 F704           		move.w	($FFFFF704).w,d0
    7149/    65A2 : 9044                		sub.w	d4,d0
    7150/    65A4 : 6A08                		bpl.s	loc_6760
    7151/    65A6 : 08F8 0000 F754      		bset	#0,($FFFFF754).w
    7152/    65AC : 4E75                		rts	
    7153/    65AE :                     ; ===========================================================================
    7154/    65AE :                     
    7155/    65AE :                     loc_6760:
    7156/    65AE : 08F8 0001 F754      		bset	#1,($FFFFF754).w
    7157/    65B4 :                     
    7158/    65B4 :                     locret_6766:
    7159/    65B4 : 4E75                		rts	
    7160/    65B6 :                     ; End of function ScrollVertical
    7161/    65B6 :                     
    7162/    65B6 :                     
    7163/    65B6 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7164/    65B6 :                     
    7165/    65B6 :                     
    7166/    65B6 :                     ScrollBlock1:				; XREF: Deform_GHZ; et al
    7167/    65B6 : 2438 F708           		move.l	($FFFFF708).w,d2
    7168/    65BA : 2002                		move.l	d2,d0
    7169/    65BC : D084                		add.l	d4,d0
    7170/    65BE : 21C0 F708           		move.l	d0,($FFFFF708).w
    7171/    65C2 : 2200                		move.l	d0,d1
    7172/    65C4 : 4841                		swap	d1
    7173/    65C6 : 0241 0010           		andi.w	#$10,d1
    7174/    65CA : 1638 F74C           		move.b	($FFFFF74C).w,d3
    7175/    65CE : B701                		eor.b	d3,d1
    7176/    65D0 : 6618                		bne.s	loc_679C
    7177/    65D2 : 0A38 0010 F74C      		eori.b	#$10,($FFFFF74C).w
    7178/    65D8 : 9082                		sub.l	d2,d0
    7179/    65DA : 6A08                		bpl.s	loc_6796
    7180/    65DC : 08F8 0002 F756      		bset	#2,($FFFFF756).w
    7181/    65E2 : 6006                		bra.s	loc_679C
    7182/    65E4 :                     ; ===========================================================================
    7183/    65E4 :                     
    7184/    65E4 :                     loc_6796:
    7185/    65E4 : 08F8 0003 F756      		bset	#3,($FFFFF756).w
    7186/    65EA :                     
    7187/    65EA :                     loc_679C:
    7188/    65EA : 2638 F70C           		move.l	($FFFFF70C).w,d3
    7189/    65EE : 2003                		move.l	d3,d0
    7190/    65F0 : D085                		add.l	d5,d0
    7191/    65F2 : 21C0 F70C           		move.l	d0,($FFFFF70C).w
    7192/    65F6 : 2200                		move.l	d0,d1
    7193/    65F8 : 4841                		swap	d1
    7194/    65FA : 0241 0010           		andi.w	#$10,d1
    7195/    65FE : 1438 F74D           		move.b	($FFFFF74D).w,d2
    7196/    6602 : B501                		eor.b	d2,d1
    7197/    6604 : 6618                		bne.s	locret_67D0
    7198/    6606 : 0A38 0010 F74D      		eori.b	#$10,($FFFFF74D).w
    7199/    660C : 9083                		sub.l	d3,d0
    7200/    660E : 6A08                		bpl.s	loc_67CA
    7201/    6610 : 08F8 0000 F756      		bset	#0,($FFFFF756).w
    7202/    6616 : 4E75                		rts	
    7203/    6618 :                     ; ===========================================================================
    7204/    6618 :                     
    7205/    6618 :                     loc_67CA:
    7206/    6618 : 08F8 0001 F756      		bset	#1,($FFFFF756).w
    7207/    661E :                     
    7208/    661E :                     locret_67D0:
    7209/    661E : 4E75                		rts	
    7210/    6620 :                     ; End of function ScrollBlock1
    7211/    6620 :                     
    7212/    6620 :                     
    7213/    6620 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7214/    6620 :                     
    7215/    6620 :                     
    7216/    6620 :                     ScrollBlock2:				; XREF: Deform_SLZ
    7217/    6620 : 2438 F708           		move.l	($FFFFF708).w,d2
    7218/    6624 : 2002                		move.l	d2,d0
    7219/    6626 : D084                		add.l	d4,d0
    7220/    6628 : 21C0 F708           		move.l	d0,($FFFFF708).w
    7221/    662C : 2638 F70C           		move.l	($FFFFF70C).w,d3
    7222/    6630 : 2003                		move.l	d3,d0
    7223/    6632 : D085                		add.l	d5,d0
    7224/    6634 : 21C0 F70C           		move.l	d0,($FFFFF70C).w
    7225/    6638 : 2200                		move.l	d0,d1
    7226/    663A : 4841                		swap	d1
    7227/    663C : 0241 0010           		andi.w	#$10,d1
    7228/    6640 : 1438 F74D           		move.b	($FFFFF74D).w,d2
    7229/    6644 : B501                		eor.b	d2,d1
    7230/    6646 : 6618                		bne.s	locret_6812
    7231/    6648 : 0A38 0010 F74D      		eori.b	#$10,($FFFFF74D).w
    7232/    664E : 9083                		sub.l	d3,d0
    7233/    6650 : 6A08                		bpl.s	loc_680C
    7234/    6652 : 08F8 0000 F756      		bset	#0,($FFFFF756).w
    7235/    6658 : 4E75                		rts	
    7236/    665A :                     ; ===========================================================================
    7237/    665A :                     
    7238/    665A :                     loc_680C:
    7239/    665A : 08F8 0001 F756      		bset	#1,($FFFFF756).w
    7240/    6660 :                     
    7241/    6660 :                     locret_6812:
    7242/    6660 : 4E75                		rts	
    7243/    6662 :                     ; End of function ScrollBlock2
    7244/    6662 :                     
    7245/    6662 :                     
    7246/    6662 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7247/    6662 :                     
    7248/    6662 :                     
    7249/    6662 :                     ScrollBlock3:				; XREF: Deform_GHZ; et al
    7250/    6662 : 3638 F70C           		move.w	($FFFFF70C).w,d3
    7251/    6666 : 31C0 F70C           		move.w	d0,($FFFFF70C).w
    7252/    666A : 3200                		move.w	d0,d1
    7253/    666C : 0241 0010           		andi.w	#$10,d1
    7254/    6670 : 1438 F74D           		move.b	($FFFFF74D).w,d2
    7255/    6674 : B501                		eor.b	d2,d1
    7256/    6676 : 6618                		bne.s	locret_6842
    7257/    6678 : 0A38 0010 F74D      		eori.b	#$10,($FFFFF74D).w
    7258/    667E : 9043                		sub.w	d3,d0
    7259/    6680 : 6A08                		bpl.s	loc_683C
    7260/    6682 : 08F8 0000 F756      		bset	#0,($FFFFF756).w
    7261/    6688 : 4E75                		rts	
    7262/    668A :                     ; ===========================================================================
    7263/    668A :                     
    7264/    668A :                     loc_683C:
    7265/    668A : 08F8 0001 F756      		bset	#1,($FFFFF756).w
    7266/    6690 :                     
    7267/    6690 :                     locret_6842:
    7268/    6690 : 4E75                		rts	
    7269/    6692 :                     ; End of function ScrollBlock3
    7270/    6692 :                     
    7271/    6692 :                     
    7272/    6692 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7273/    6692 :                     
    7274/    6692 :                     
    7275/    6692 :                     ScrollBlock4:				; XREF: Deform_GHZ
    7276/    6692 : 3438 F710           		move.w	($FFFFF710).w,d2
    7277/    6696 : 3638 F714           		move.w	($FFFFF714).w,d3
    7278/    669A : 3038 F73A           		move.w	($FFFFF73A).w,d0
    7279/    669E : 48C0                		ext.l	d0
    7280/    66A0 : EF80                		asl.l	#7,d0
    7281/    66A2 : D1B8 F710           		add.l	d0,($FFFFF710).w
    7282/    66A6 : 3038 F710           		move.w	($FFFFF710).w,d0
    7283/    66AA : 0240 0010           		andi.w	#$10,d0
    7284/    66AE : 1238 F74E           		move.b	($FFFFF74E).w,d1
    7285/    66B2 : B300                		eor.b	d1,d0
    7286/    66B4 : 661C                		bne.s	locret_6884
    7287/    66B6 : 0A38 0010 F74E      		eori.b	#$10,($FFFFF74E).w
    7288/    66BC : 3038 F710           		move.w	($FFFFF710).w,d0
    7289/    66C0 : 9042                		sub.w	d2,d0
    7290/    66C2 : 6A08                		bpl.s	loc_687E
    7291/    66C4 : 08F8 0002 F758      		bset	#2,($FFFFF758).w
    7292/    66CA : 6006                		bra.s	locret_6884
    7293/    66CC :                     ; ===========================================================================
    7294/    66CC :                     
    7295/    66CC :                     loc_687E:
    7296/    66CC : 08F8 0003 F758      		bset	#3,($FFFFF758).w
    7297/    66D2 :                     
    7298/    66D2 :                     locret_6884:
    7299/    66D2 : 4E75                		rts	
    7300/    66D4 :                     ; End of function ScrollBlock4
    7301/    66D4 :                     
    7302/    66D4 :                     
    7303/    66D4 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7304/    66D4 :                     
    7305/    66D4 :                     
    7306/    66D4 :                     sub_6886:				; XREF: loc_C44
    7307/    66D4 : 4BF9 00C0 0004      		lea	($C00004).l,a5
    7308/    66DA : 4DF9 00C0 0000      		lea	($C00000).l,a6
    7309/    66E0 : 45F8 F756           		lea	($FFFFF756).w,a2
    7310/    66E4 : 47F8 F708           		lea	($FFFFF708).w,a3
    7311/    66E8 : 2878 A404           		movea.l	($FFFFA404).w,a4			; MJ: Load address of layout BG
    7312/    66EC : 343C 6000           		move.w	#$6000,d2
    7313/    66F0 : 6100 00B0           		bsr.w	sub_6954
    7314/    66F4 : 45F8 F758           		lea	($FFFFF758).w,a2
    7315/    66F8 : 47F8 F710           		lea	($FFFFF710).w,a3
    7316/    66FC : 6000 0144           		bra.w	sub_69F4
    7317/    6700 :                     ; End of function sub_6886
    7318/    6700 :                     
    7319/    6700 :                     ; ---------------------------------------------------------------------------
    7320/    6700 :                     ; Subroutine to	display	correct	tiles as you move
    7321/    6700 :                     ; ---------------------------------------------------------------------------
    7322/    6700 :                     
    7323/    6700 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7324/    6700 :                     
    7325/    6700 :                     
    7326/    6700 :                     LoadTilesAsYouMove:			; XREF: Demo_Time
    7327/    6700 : 4BF9 00C0 0004      		lea	($C00004).l,a5
    7328/    6706 : 4DF9 00C0 0000      		lea	($C00000).l,a6
    7329/    670C : 45F8 FF32           		lea	($FFFFFF32).w,a2
    7330/    6710 : 47F8 FF18           		lea	($FFFFFF18).w,a3
    7331/    6714 : 2878 A404           		movea.l	($FFFFA404).w,a4			; MJ: Load address of layout BG
    7332/    6718 : 343C 6000           		move.w	#$6000,d2
    7333/    671C : 6100 0084           		bsr.w	sub_6954
    7334/    6720 : 45F8 FF34           		lea	($FFFFFF34).w,a2
    7335/    6724 : 47F8 FF20           		lea	($FFFFFF20).w,a3
    7336/    6728 : 6100 0118           		bsr.w	sub_69F4
    7337/    672C : 45F8 FF30           		lea	($FFFFFF30).w,a2
    7338/    6730 : 47F8 FF10           		lea	($FFFFFF10).w,a3
    7339/    6734 : 2878 A400           		movea.l	($FFFFA400).w,a4			; MJ: Load address of layout
    7340/    6738 : 343C 4000           		move.w	#$4000,d2
    7341/    673C : 4A12                		tst.b	(a2)
    7342/    673E : 6760                		beq.s	locret_6952
    7343/    6740 : 0892 0000           		bclr	#0,(a2)
    7344/    6744 : 6710                		beq.s	loc_6908
    7345/    6746 : 78F0                		moveq	#-$10,d4
    7346/    6748 : 7AF0                		moveq	#-$10,d5
    7347/    674A : 6100 031C           		bsr.w	sub_6C20
    7348/    674E : 78F0                		moveq	#-$10,d4
    7349/    6750 : 7AF0                		moveq	#-$10,d5
    7350/    6752 : 6100 01D2           		bsr.w	sub_6AD8
    7351/    6756 :                     
    7352/    6756 :                     loc_6908:
    7353/    6756 : 0892 0001           		bclr	#1,(a2)
    7354/    675A : 6714                		beq.s	loc_6922
    7355/    675C : 383C 00E0           		move.w	#$E0,d4
    7356/    6760 : 7AF0                		moveq	#-$10,d5
    7357/    6762 : 6100 0304           		bsr.w	sub_6C20
    7358/    6766 : 383C 00E0           		move.w	#$E0,d4
    7359/    676A : 7AF0                		moveq	#-$10,d5
    7360/    676C : 6100 01B8           		bsr.w	sub_6AD8
    7361/    6770 :                     
    7362/    6770 :                     loc_6922:
    7363/    6770 : 0892 0002           		bclr	#2,(a2)
    7364/    6774 : 6710                		beq.s	loc_6938
    7365/    6776 : 78F0                		moveq	#-$10,d4
    7366/    6778 : 7AF0                		moveq	#-$10,d5
    7367/    677A : 6100 02EC           		bsr.w	sub_6C20
    7368/    677E : 78F0                		moveq	#-$10,d4
    7369/    6780 : 7AF0                		moveq	#-$10,d5
    7370/    6782 : 6100 01CE           		bsr.w	sub_6B04
    7371/    6786 :                     
    7372/    6786 :                     loc_6938:
    7373/    6786 : 0892 0003           		bclr	#3,(a2)
    7374/    678A : 6714                		beq.s	locret_6952
    7375/    678C : 78F0                		moveq	#-$10,d4
    7376/    678E : 3A3C 0140           		move.w	#$140,d5
    7377/    6792 : 6100 02D4           		bsr.w	sub_6C20
    7378/    6796 : 78F0                		moveq	#-$10,d4
    7379/    6798 : 3A3C 0140           		move.w	#$140,d5
    7380/    679C : 6100 01B4           		bsr.w	sub_6B04
    7381/    67A0 :                     
    7382/    67A0 :                     locret_6952:
    7383/    67A0 : 4E75                		rts	
    7384/    67A2 :                     ; End of function LoadTilesAsYouMove
    7385/    67A2 :                     
    7386/    67A2 :                     
    7387/    67A2 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7388/    67A2 :                     
    7389/    67A2 :                     
    7390/    67A2 :                     sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
    7391/    67A2 : 4A12                		tst.b	(a2)
    7392/    67A4 : 6700 009A           		beq.w	locret_69F2
    7393/    67A8 : 0892 0000           		bclr	#0,(a2)
    7394/    67AC : 6712                		beq.s	loc_6972
    7395/    67AE : 78F0                		moveq	#-$10,d4
    7396/    67B0 : 7AF0                		moveq	#-$10,d5
    7397/    67B2 : 6100 02B4           		bsr.w	sub_6C20
    7398/    67B6 : 78F0                		moveq	#-$10,d4
    7399/    67B8 : 7AF0                		moveq	#-$10,d5
    7400/    67BA : 7C1F                		moveq	#$1F,d6
    7401/    67BC : 6100 016A           		bsr.w	sub_6ADA
    7402/    67C0 :                     
    7403/    67C0 :                     loc_6972:
    7404/    67C0 : 0892 0001           		bclr	#1,(a2)
    7405/    67C4 : 6716                		beq.s	loc_698E
    7406/    67C6 : 383C 00E0           		move.w	#$E0,d4
    7407/    67CA : 7AF0                		moveq	#-$10,d5
    7408/    67CC : 6100 029A           		bsr.w	sub_6C20
    7409/    67D0 : 383C 00E0           		move.w	#$E0,d4
    7410/    67D4 : 7AF0                		moveq	#-$10,d5
    7411/    67D6 : 7C1F                		moveq	#$1F,d6
    7412/    67D8 : 6100 014E           		bsr.w	sub_6ADA
    7413/    67DC :                     
    7414/    67DC :                     loc_698E:
    7415/    67DC : 0892 0002           		bclr	#2,(a2)
    7416/    67E0 : 672A                		beq.s	loc_69BE
    7417/    67E2 : 78F0                		moveq	#-$10,d4
    7418/    67E4 : 7AF0                		moveq	#-$10,d5
    7419/    67E6 : 6100 0280           		bsr.w	sub_6C20
    7420/    67EA : 78F0                		moveq	#-$10,d4
    7421/    67EC : 7AF0                		moveq	#-$10,d5
    7422/    67EE : 3C38 F7F0           		move.w	($FFFFF7F0).w,d6
    7423/    67F2 : 322B 0004           		move.w	4(a3),d1
    7424/    67F6 : 0241 FFF0           		andi.w	#-$10,d1
    7425/    67FA : 9C41                		sub.w	d1,d6
    7426/    67FC : 6D0E                		blt.s	loc_69BE
    7427/    67FE : E84E                		lsr.w	#4,d6
    7428/    6800 : 0C46 000F           		cmpi.w	#$F,d6
    7429/    6804 : 6502                		bcs.s	loc_69BA
    7430/    6806 : 7C0F                		moveq	#$F,d6
    7431/    6808 :                     
    7432/    6808 :                     loc_69BA:
    7433/    6808 : 6100 014A           		bsr.w	sub_6B06
    7434/    680C :                     
    7435/    680C :                     loc_69BE:
    7436/    680C : 0892 0003           		bclr	#3,(a2)
    7437/    6810 : 672E                		beq.s	locret_69F2
    7438/    6812 : 78F0                		moveq	#-$10,d4
    7439/    6814 : 3A3C 0140           		move.w	#$140,d5
    7440/    6818 : 6100 024E           		bsr.w	sub_6C20
    7441/    681C : 78F0                		moveq	#-$10,d4
    7442/    681E : 3A3C 0140           		move.w	#$140,d5
    7443/    6822 : 3C38 F7F0           		move.w	($FFFFF7F0).w,d6
    7444/    6826 : 322B 0004           		move.w	4(a3),d1
    7445/    682A : 0241 FFF0           		andi.w	#-$10,d1
    7446/    682E : 9C41                		sub.w	d1,d6
    7447/    6830 : 6D0E                		blt.s	locret_69F2
    7448/    6832 : E84E                		lsr.w	#4,d6
    7449/    6834 : 0C46 000F           		cmpi.w	#$F,d6
    7450/    6838 : 6502                		bcs.s	loc_69EE
    7451/    683A : 7C0F                		moveq	#$F,d6
    7452/    683C :                     
    7453/    683C :                     loc_69EE:
    7454/    683C : 6100 0116           		bsr.w	sub_6B06
    7455/    6840 :                     
    7456/    6840 :                     locret_69F2:
    7457/    6840 : 4E75                		rts	
    7458/    6842 :                     ; End of function sub_6954
    7459/    6842 :                     
    7460/    6842 :                     
    7461/    6842 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7462/    6842 :                     
    7463/    6842 :                     
    7464/    6842 :                     sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
    7465/    6842 : 4A12                		tst.b	(a2)
    7466/    6844 : 6700 0088           		beq.w	locret_6A80
    7467/    6848 : 0892 0002           		bclr	#2,(a2)
    7468/    684C : 673E                		beq.s	loc_6A3E
    7469/    684E : 0C53 0010           		cmpi.w	#$10,(a3)
    7470/    6852 : 6538                		bcs.s	loc_6A3E
    7471/    6854 : 3838 F7F0           		move.w	($FFFFF7F0).w,d4
    7472/    6858 : 322B 0004           		move.w	4(a3),d1
    7473/    685C : 0241 FFF0           		andi.w	#-$10,d1
    7474/    6860 : 9841                		sub.w	d1,d4
    7475/    6862 : 3F04                		move.w	d4,-(sp)
    7476/    6864 : 7AF0                		moveq	#-$10,d5
    7477/    6866 : 6100 0200           		bsr.w	sub_6C20
    7478/    686A : 381F                		move.w	(sp)+,d4
    7479/    686C : 7AF0                		moveq	#-$10,d5
    7480/    686E : 3C38 F7F0           		move.w	($FFFFF7F0).w,d6
    7481/    6872 : 322B 0004           		move.w	4(a3),d1
    7482/    6876 : 0241 FFF0           		andi.w	#-$10,d1
    7483/    687A : 9C41                		sub.w	d1,d6
    7484/    687C : 6D0E                		blt.s	loc_6A3E
    7485/    687E : E84E                		lsr.w	#4,d6
    7486/    6880 : 0446 000E           		subi.w	#$E,d6
    7487/    6884 : 6406                		bcc.s	loc_6A3E
    7488/    6886 : 4446                		neg.w	d6
    7489/    6888 : 6100 00CA           		bsr.w	sub_6B06
    7490/    688C :                     
    7491/    688C :                     loc_6A3E:
    7492/    688C : 0892 0003           		bclr	#3,(a2)
    7493/    6890 : 673C                		beq.s	locret_6A80
    7494/    6892 : 3838 F7F0           		move.w	($FFFFF7F0).w,d4
    7495/    6896 : 322B 0004           		move.w	4(a3),d1
    7496/    689A : 0241 FFF0           		andi.w	#-$10,d1
    7497/    689E : 9841                		sub.w	d1,d4
    7498/    68A0 : 3F04                		move.w	d4,-(sp)
    7499/    68A2 : 3A3C 0140           		move.w	#$140,d5
    7500/    68A6 : 6100 01C0           		bsr.w	sub_6C20
    7501/    68AA : 381F                		move.w	(sp)+,d4
    7502/    68AC : 3A3C 0140           		move.w	#$140,d5
    7503/    68B0 : 3C38 F7F0           		move.w	($FFFFF7F0).w,d6
    7504/    68B4 : 322B 0004           		move.w	4(a3),d1
    7505/    68B8 : 0241 FFF0           		andi.w	#-$10,d1
    7506/    68BC : 9C41                		sub.w	d1,d6
    7507/    68BE : 6D0E                		blt.s	locret_6A80
    7508/    68C0 : E84E                		lsr.w	#4,d6
    7509/    68C2 : 0446 000E           		subi.w	#$E,d6
    7510/    68C6 : 6406                		bcc.s	locret_6A80
    7511/    68C8 : 4446                		neg.w	d6
    7512/    68CA : 6100 0088           		bsr.w	sub_6B06
    7513/    68CE :                     
    7514/    68CE :                     locret_6A80:
    7515/    68CE : 4E75                		rts	
    7516/    68D0 :                     ; End of function sub_69F4
    7517/    68D0 :                     
    7518/    68D0 :                     ; ===========================================================================
    7519/    68D0 : 4A12                		tst.b	(a2)
    7520/    68D2 : 6750                		beq.s	locret_6AD6
    7521/    68D4 : 0892 0002           		bclr	#2,(a2)
    7522/    68D8 : 6720                		beq.s	loc_6AAC
    7523/    68DA : 383C 00D0           		move.w	#$D0,d4
    7524/    68DE : 322B 0004           		move.w	4(a3),d1
    7525/    68E2 : 0241 FFF0           		andi.w	#-$10,d1
    7526/    68E6 : 9841                		sub.w	d1,d4
    7527/    68E8 : 3F04                		move.w	d4,-(sp)
    7528/    68EA : 7AF0                		moveq	#-$10,d5
    7529/    68EC : 6100 0196           		bsr.w	sub_6C3C
    7530/    68F0 : 381F                		move.w	(sp)+,d4
    7531/    68F2 : 7AF0                		moveq	#-$10,d5
    7532/    68F4 : 7C02                		moveq	#2,d6
    7533/    68F6 : 6100 005C           		bsr.w	sub_6B06
    7534/    68FA :                     
    7535/    68FA :                     loc_6AAC:
    7536/    68FA : 0892 0003           		bclr	#3,(a2)
    7537/    68FE : 6724                		beq.s	locret_6AD6
    7538/    6900 : 383C 00D0           		move.w	#$D0,d4
    7539/    6904 : 322B 0004           		move.w	4(a3),d1
    7540/    6908 : 0241 FFF0           		andi.w	#-$10,d1
    7541/    690C : 9841                		sub.w	d1,d4
    7542/    690E : 3F04                		move.w	d4,-(sp)
    7543/    6910 : 3A3C 0140           		move.w	#$140,d5
    7544/    6914 : 6100 016E           		bsr.w	sub_6C3C
    7545/    6918 : 381F                		move.w	(sp)+,d4
    7546/    691A : 3A3C 0140           		move.w	#$140,d5
    7547/    691E : 7C02                		moveq	#2,d6
    7548/    6920 : 6100 0032           		bsr.w	sub_6B06
    7549/    6924 :                     
    7550/    6924 :                     locret_6AD6:
    7551/    6924 : 4E75                		rts	
    7552/    6926 :                     
    7553/    6926 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7554/    6926 :                     
    7555/    6926 :                     
    7556/    6926 :                     sub_6AD8:				; XREF: LoadTilesAsYouMove
    7557/    6926 : 7C15                		moveq	#$15,d6
    7558/    6928 :                     ; End of function sub_6AD8
    7559/    6928 :                     
    7560/    6928 :                     
    7561/    6928 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7562/    6928 :                     
    7563/    6928 :                     
    7564/    6928 :                     sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
    7565/    6928 : 2E3C 0080 0000      		move.l	#$800000,d7
    7566/    692E : 2200                		move.l	d0,d1
    7567/    6930 :                     
    7568/    6930 :                     loc_6AE2:
    7569/    6930 : 48E7 0C00           		movem.l	d4-d5,-(sp)
    7570/    6934 : 6100 00EE           		bsr.w	sub_6BD6
    7571/    6938 : 2001                		move.l	d1,d0
    7572/    693A : 6100 0044           		bsr.w	sub_6B32
    7573/    693E : 5801                		addq.b	#4,d1
    7574/    6940 : 0201 007F           		andi.b	#$7F,d1
    7575/    6944 : 4CDF 0030           		movem.l	(sp)+,d4-d5
    7576/    6948 : 0645 0010           		addi.w	#$10,d5
    7577/    694C : 51CE FFE2           		dbf	d6,loc_6AE2
    7578/    6950 : 4E75                		rts	
    7579/    6952 :                     ; End of function sub_6ADA
    7580/    6952 :                     
    7581/    6952 :                     
    7582/    6952 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7583/    6952 :                     
    7584/    6952 :                     
    7585/    6952 :                     sub_6B04:				; XREF: LoadTilesAsYouMove
    7586/    6952 : 7C0F                		moveq	#$F,d6
    7587/    6954 :                     ; End of function sub_6B04
    7588/    6954 :                     
    7589/    6954 :                     
    7590/    6954 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7591/    6954 :                     ; main draw section
    7592/    6954 :                     
    7593/    6954 :                     sub_6B06:
    7594/    6954 : 2E3C 0080 0000      		move.l	#$800000,d7
    7595/    695A : 2200                		move.l	d0,d1
    7596/    695C :                     
    7597/    695C :                     loc_6B0E:
    7598/    695C : 48E7 0C00           		movem.l	d4-d5,-(sp)
    7599/    6960 : 6100 00C2           		bsr.w	sub_6BD6
    7600/    6964 : 2001                		move.l	d1,d0
    7601/    6966 : 6100 0018           		bsr.w	sub_6B32
    7602/    696A : 0641 0100           		addi.w	#$100,d1
    7603/    696E : 0241 0FFF           		andi.w	#$FFF,d1
    7604/    6972 : 4CDF 0030           		movem.l	(sp)+,d4-d5
    7605/    6976 : 0644 0010           		addi.w	#$10,d4
    7606/    697A : 51CE FFE0           		dbf	d6,loc_6B0E
    7607/    697E : 4E75                		rts	
    7608/    6980 :                     ; End of function sub_6B06
    7609/    6980 :                     
    7610/    6980 :                     
    7611/    6980 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7612/    6980 :                     
    7613/    6980 :                     
    7614/    6980 :                     sub_6B32:				; XREF: sub_6ADA; sub_6B06
    7615/    6980 : 8042                		or.w	d2,d0
    7616/    6982 : 4840                		swap	d0
    7617/    6984 : 0810 0003           		btst	#3,(a0)					; MJ: checking bit 3 not 4 (Flip)
    7618/    6988 : 6632                		bne.s	loc_6B6E
    7619/    698A : 0810 0002           		btst	#2,(a0)					; MJ: checking bit 2 not 3 (Mirror)
    7620/    698E : 660C                		bne.s	loc_6B4E
    7621/    6990 : 2A80                		move.l	d0,(a5)
    7622/    6992 : 2C99                		move.l	(a1)+,(a6)
    7623/    6994 : D087                		add.l	d7,d0
    7624/    6996 : 2A80                		move.l	d0,(a5)
    7625/    6998 : 2C99                		move.l	(a1)+,(a6)
    7626/    699A : 4E75                		rts	
    7627/    699C :                     ; ===========================================================================
    7628/    699C :                     
    7629/    699C :                     loc_6B4E:
    7630/    699C : 2A80                		move.l	d0,(a5)
    7631/    699E : 2819                		move.l	(a1)+,d4
    7632/    69A0 : 0A84 0800 0800      		eori.l	#$8000800,d4
    7633/    69A6 : 4844                		swap	d4
    7634/    69A8 : 2C84                		move.l	d4,(a6)
    7635/    69AA : D087                		add.l	d7,d0
    7636/    69AC : 2A80                		move.l	d0,(a5)
    7637/    69AE : 2819                		move.l	(a1)+,d4
    7638/    69B0 : 0A84 0800 0800      		eori.l	#$8000800,d4
    7639/    69B6 : 4844                		swap	d4
    7640/    69B8 : 2C84                		move.l	d4,(a6)
    7641/    69BA : 4E75                		rts	
    7642/    69BC :                     ; ===========================================================================
    7643/    69BC :                     
    7644/    69BC :                     loc_6B6E:
    7645/    69BC : 0810 0002           		btst	#2,(a0) 				; MJ: checking bit 2 not 3 (Mirror)
    7646/    69C0 : 661C                		bne.s	loc_6B90
    7647/    69C2 : 2A80                		move.l	d0,(a5)
    7648/    69C4 : 2A19                		move.l	(a1)+,d5
    7649/    69C6 : 2819                		move.l	(a1)+,d4
    7650/    69C8 : 0A84 1000 1000      		eori.l	#$10001000,d4
    7651/    69CE : 2C84                		move.l	d4,(a6)
    7652/    69D0 : D087                		add.l	d7,d0
    7653/    69D2 : 2A80                		move.l	d0,(a5)
    7654/    69D4 : 0A85 1000 1000      		eori.l	#$10001000,d5
    7655/    69DA : 2C85                		move.l	d5,(a6)
    7656/    69DC : 4E75                		rts	
    7657/    69DE :                     ; ===========================================================================
    7658/    69DE :                     
    7659/    69DE :                     loc_6B90:
    7660/    69DE : 2A80                		move.l	d0,(a5)
    7661/    69E0 : 2A19                		move.l	(a1)+,d5
    7662/    69E2 : 2819                		move.l	(a1)+,d4
    7663/    69E4 : 0A84 1800 1800      		eori.l	#$18001800,d4
    7664/    69EA : 4844                		swap	d4
    7665/    69EC : 2C84                		move.l	d4,(a6)
    7666/    69EE : D087                		add.l	d7,d0
    7667/    69F0 : 2A80                		move.l	d0,(a5)
    7668/    69F2 : 0A85 1800 1800      		eori.l	#$18001800,d5
    7669/    69F8 : 4845                		swap	d5
    7670/    69FA : 2C85                		move.l	d5,(a6)
    7671/    69FC : 4E75                		rts	
    7672/    69FE :                     ; End of function sub_6B32
    7673/    69FE :                     
    7674/    69FE :                     ; ===========================================================================
    7675/    69FE : 4E75                		rts	
    7676/    6A00 :                     ; ===========================================================================
    7677/    6A00 : 2A80                		move.l	d0,(a5)
    7678/    6A02 : 3A3C 2000           		move.w	#$2000,d5
    7679/    6A06 : 3819                		move.w	(a1)+,d4
    7680/    6A08 : D845                		add.w	d5,d4
    7681/    6A0A : 3C84                		move.w	d4,(a6)
    7682/    6A0C : 3819                		move.w	(a1)+,d4
    7683/    6A0E : D845                		add.w	d5,d4
    7684/    6A10 : 3C84                		move.w	d4,(a6)
    7685/    6A12 : D087                		add.l	d7,d0
    7686/    6A14 : 2A80                		move.l	d0,(a5)
    7687/    6A16 : 3819                		move.w	(a1)+,d4
    7688/    6A18 : D845                		add.w	d5,d4
    7689/    6A1A : 3C84                		move.w	d4,(a6)
    7690/    6A1C : 3819                		move.w	(a1)+,d4
    7691/    6A1E : D845                		add.w	d5,d4
    7692/    6A20 : 3C84                		move.w	d4,(a6)
    7693/    6A22 : 4E75                		rts	
    7694/    6A24 :                     
    7695/    6A24 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7696/    6A24 :                     ; Reading from layout
    7697/    6A24 :                     
    7698/    6A24 :                     sub_6BD6:
    7699/    6A24 : 43F8 B000           		lea	($FFFFB000).w,a1			; MJ: load Block's location
    7700/    6A28 : D86B 0004           		add.w	4(a3),d4				; MJ: load Y position to d4
    7701/    6A2C : DA53                		add.w	(a3),d5					; MJ: load X position to d5
    7702/    6A2E : 3604                		move.w	d4,d3					; MJ: copy Y position to d3
    7703/    6A30 : 0243 0780           		andi.w	#$780,d3				; MJ: get within 780 (Not 380) (E00 pixels (not 700)) in multiples of 80
    7704/    6A34 : E64D                		lsr.w	#3,d5					; MJ: divide X position by 8
    7705/    6A36 : 3005                		move.w	d5,d0					; MJ: copy to d0
    7706/    6A38 : E848                		lsr.w	#4,d0					; MJ: divide by 10 (Not 20)
    7707/    6A3A : 0240 007F           		andi.w	#$7F,d0					; MJ: get within 7F
    7708/    6A3E : E34B                		lsl.w	#$01,d3					; MJ: multiply by 2 (So it skips the BG)
    7709/    6A40 : D043                		add.w	d3,d0					; MJ: add calc'd Y pos
    7710/    6A42 : 76FF                		moveq	#-1,d3					; MJ: prepare FFFF in d3
    7711/    6A44 : 1634 0000           		move.b	(a4,d0.w),d3				; MJ: collect correct chunk ID from layout
    7712/    6A48 : 0243 00FF           		andi.w	#$FF,d3					; MJ: keep within 7F
    7713/    6A4C : EF4B                		lsl.w	#$07,d3					; MJ: multiply by 80
    7714/    6A4E : 0244 0070           		andi.w	#$0070,d4				; MJ: keep Y pos within 80 pixels
    7715/    6A52 : 0245 000E           		andi.w	#$000E,d5				; MJ: keep X pos within 10
    7716/    6A56 : D644                		add.w	d4,d3					; MJ: add calc'd Y pos to ror'd d3
    7717/    6A58 : D645                		add.w	d5,d3					; MJ: add calc'd X pos to ror'd d3
    7718/    6A5A : 2043                		movea.l	d3,a0					; MJ: set address (Chunk to read)
    7719/    6A5C : 3610                		move.w	(a0),d3
    7720/    6A5E : 0243 03FF           		andi.w	#$3FF,d3
    7721/    6A62 : E74B                		lsl.w	#3,d3
    7722/    6A64 : D2C3                		adda.w	d3,a1
    7723/    6A66 :                     
    7724/    6A66 :                     locret_6C1E:
    7725/    6A66 : 4E75                		rts	
    7726/    6A68 :                     ; End of function sub_6BD6
    7727/    6A68 :                     
    7728/    6A68 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7729/    6A68 :                     ; getting VRam location
    7730/    6A68 :                     
    7731/    6A68 :                     sub_6C20:
    7732/    6A68 : D86B 0004           		add.w	4(a3),d4
    7733/    6A6C : DA53                		add.w	(a3),d5
    7734/    6A6E : 0244 00F0           		andi.w	#$F0,d4
    7735/    6A72 : 0245 01F0           		andi.w	#$1F0,d5
    7736/    6A76 : E94C                		lsl.w	#4,d4
    7737/    6A78 : E44D                		lsr.w	#2,d5
    7738/    6A7A : D845                		add.w	d5,d4
    7739/    6A7C : 7003                		moveq	#3,d0
    7740/    6A7E : 4840                		swap	d0
    7741/    6A80 : 3004                		move.w	d4,d0
    7742/    6A82 : 4E75                		rts	
    7743/    6A84 :                     ; End of function sub_6C20
    7744/    6A84 :                     
    7745/    6A84 :                     
    7746/    6A84 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7747/    6A84 :                     ; not used
    7748/    6A84 :                     
    7749/    6A84 :                     
    7750/    6A84 :                     sub_6C3C:
    7751/    6A84 : D86B 0004           		add.w	4(a3),d4
    7752/    6A88 : DA53                		add.w	(a3),d5
    7753/    6A8A : 0244 00F0           		andi.w	#$F0,d4
    7754/    6A8E : 0245 01F0           		andi.w	#$1F0,d5
    7755/    6A92 : E94C                		lsl.w	#4,d4
    7756/    6A94 : E44D                		lsr.w	#2,d5
    7757/    6A96 : D845                		add.w	d5,d4
    7758/    6A98 : 7002                		moveq	#2,d0
    7759/    6A9A : 4840                		swap	d0
    7760/    6A9C : 3004                		move.w	d4,d0
    7761/    6A9E : 4E75                		rts	
    7762/    6AA0 :                     ; End of function sub_6C3C
    7763/    6AA0 :                     
    7764/    6AA0 :                     ; ---------------------------------------------------------------------------
    7765/    6AA0 :                     ; Subroutine to	load tiles as soon as the level	appears
    7766/    6AA0 :                     ; ---------------------------------------------------------------------------
    7767/    6AA0 :                     
    7768/    6AA0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7769/    6AA0 :                     
    7770/    6AA0 :                     
    7771/    6AA0 :                     LoadTilesFromStart:			; XREF: Level; EndingSequence
    7772/    6AA0 : 4BF9 00C0 0004      		lea	($C00004).l,a5
    7773/    6AA6 : 4DF9 00C0 0000      		lea	($C00000).l,a6
    7774/    6AAC : 47F8 F700           		lea	($FFFFF700).w,a3
    7775/    6AB0 : 2878 A400           		movea.l	($FFFFA400).w,a4			; MJ: Load address of layout
    7776/    6AB4 : 343C 4000           		move.w	#$4000,d2
    7777/    6AB8 : 610C                		bsr.s	LoadTilesFromStart2
    7778/    6ABA : 47F8 F708           		lea	($FFFFF708).w,a3
    7779/    6ABE : 2878 A404           		movea.l	($FFFFA404).w,a4			; MJ: Load address of layout BG
    7780/    6AC2 : 343C 6000           		move.w	#$6000,d2
    7781/    6AC6 :                     ; End of function LoadTilesFromStart
    7782/    6AC6 :                     
    7783/    6AC6 :                     
    7784/    6AC6 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7785/    6AC6 :                     
    7786/    6AC6 :                     
    7787/    6AC6 :                     LoadTilesFromStart2:			; XREF: LoadTilesFromStart
    7788/    6AC6 : 78F0                		moveq	#-$10,d4
    7789/    6AC8 : 7C0F                		moveq	#$F,d6
    7790/    6ACA :                     
    7791/    6ACA :                     loc_6C82:
    7792/    6ACA : 48E7 0E00           		movem.l	d4-d6,-(sp)
    7793/    6ACE : 7A00                		moveq	#0,d5
    7794/    6AD0 : 3204                		move.w	d4,d1
    7795/    6AD2 : 6100 FF94           		bsr.w	sub_6C20
    7796/    6AD6 : 3801                		move.w	d1,d4
    7797/    6AD8 : 7A00                		moveq	#0,d5
    7798/    6ADA : 7C1F                		moveq	#$1F,d6
    7799/    6ADC : 6100 FE4A           		bsr.w	sub_6ADA
    7800/    6AE0 : 4CDF 0070           		movem.l	(sp)+,d4-d6
    7801/    6AE4 : 0644 0010           		addi.w	#$10,d4
    7802/    6AE8 : 51CE FFE0           		dbf	d6,loc_6C82
    7803/    6AEC : 4E75                		rts	
    7804/    6AEE :                     ; End of function LoadTilesFromStart2
    7805/    6AEE :                     
    7806/    6AEE :                     ; ---------------------------------------------------------------------------
    7807/    6AEE :                     ; Main Load Block loading subroutine
    7808/    6AEE :                     ; ---------------------------------------------------------------------------
    7809/    6AEE :                     
    7810/    6AEE :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7811/    6AEE :                     
    7812/    6AEE :                     
    7813/    6AEE :                     MainLoadBlockLoad:			; XREF: Level; EndingSequence
    7814/    6AEE : 7000                		moveq	#0,d0
    7815/    6AF0 : 1038 FE10           		move.b	($FFFFFE10).w,d0
    7816/    6AF4 : E948                		lsl.w	#4,d0
    7817/    6AF6 : 45F9 0001 D5FC      		lea	(MainLoadBlocks).l,a2
    7818/    6AFC : 45F2 0000           		lea	(a2,d0.w),a2
    7819/    6B00 : 2F0A                		move.l	a2,-(sp)
    7820/    6B02 : 588A                		addq.l	#4,a2
    7821/    6B04 : 205A                		movea.l	(a2)+,a0
    7822/    6B06 : 43F8 B000           		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
    7823/    6B0A : 303C 0000           		move.w	#0,d0
    7824/    6B0E : 6100 A9F4           		bsr.w	EniDec
    7825/    6B12 : 205A                		movea.l	(a2)+,a0
    7826/    6B14 : 43F9 00FF 0000      		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
    7827/    6B1A : 6100 AB66           		bsr.w	KosDec
    7828/    6B1E : 6100 003A           		bsr.w	LevelLayoutLoad
    7829/    6B22 : 301A                		move.w	(a2)+,d0
    7830/    6B24 : 3012                		move.w	(a2),d0
    7831/    6B26 : 0240 00FF           		andi.w	#$FF,d0
    7832/    6B2A : 0C78 0103 FE10      		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
    7833/    6B30 : 6602                		bne.s	MLB_ChkSBZPal	; if not, branch
    7834/    6B32 : 700C                		moveq	#$C,d0		; use SB3 pallet
    7835/    6B34 :                     
    7836/    6B34 :                     MLB_ChkSBZPal:
    7837/    6B34 : 0C78 0501 FE10      		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
    7838/    6B3A : 6708                		beq.s	MLB_UsePal0E	; if yes, branch
    7839/    6B3C : 0C78 0502 FE10      		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
    7840/    6B42 : 6602                		bne.s	MLB_NormalPal	; if not, branch
    7841/    6B44 :                     
    7842/    6B44 :                     MLB_UsePal0E:
    7843/    6B44 : 700E                		moveq	#$E,d0		; use SBZ2/FZ pallet
    7844/    6B46 :                     
    7845/    6B46 :                     MLB_NormalPal:
    7846/    6B46 : 6100 B39A           		bsr.w	PalLoad1	; load pallet (based on	d0)
    7847/    6B4A : 245F                		movea.l	(sp)+,a2
    7848/    6B4C : 584A                		addq.w	#4,a2
    7849/    6B4E : 7000                		moveq	#0,d0
    7850/    6B50 : 1012                		move.b	(a2),d0
    7851/    6B52 : 6704                		beq.s	locret_6D10
    7852/    6B54 : 6100 A810           		bsr.w	LoadPLC		; load pattern load cues
    7853/    6B58 :                     
    7854/    6B58 :                     locret_6D10:
    7855/    6B58 : 4E75                		rts	
    7856/    6B5A :                     ; End of function MainLoadBlockLoad
    7857/    6B5A :                     
    7858/    6B5A :                     ; ---------------------------------------------------------------------------
    7859/    6B5A :                     ; Level	layout loading subroutine
    7860/    6B5A :                     ; ---------------------------------------------------------------------------
    7861/    6B5A :                     
    7862/    6B5A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7863/    6B5A :                     ; This method now releases free ram space from A408 - A7FF
    7864/    6B5A :                     
    7865/    6B5A :                     LevelLayoutLoad:
    7866/    6B5A : 3038 FE10           		move.w	($FFFFFE10).w,d0
    7867/    6B5E : ED08                		lsl.b	#6,d0
    7868/    6B60 : E848                		lsr.w	#4,d0
    7869/    6B62 : 3400                		move.w	d0,d2
    7870/    6B64 : D040                		add.w	d0,d0
    7871/    6B66 : D042                		add.w	d2,d0
    7872/    6B68 : 43F9 0006 AD36      		lea	(Level_Index).l,a1
    7873/    6B6E : 2271 0000           		movea.l	(a1,d0.w),a1				; MJ: moving the address strait to a1 rather than adding a word to an address
    7874/    6B72 : 21C9 A400           		move.l	a1,($FFFFA400).w			; MJ: save location of layout to $FFFFA400
    7875/    6B76 : D2FC 0080           		adda.w	#$0080,a1				; MJ: add 80 (As the BG line is always after the FG line)
    7876/    6B7A : 21C9 A404           		move.l	a1,($FFFFA404).w			; MJ: save location of layout to $FFFFA404
    7877/    6B7E : 4E75                		rts						; MJ: Return
    7878/    6B80 :                     
    7879/    6B80 :                     ; End of function LevelLayoutLoad2
    7880/    6B80 :                     
    7881/    6B80 :                     ; ---------------------------------------------------------------------------
    7882/    6B80 :                     ; Dynamic screen resize	loading	subroutine
    7883/    6B80 :                     ; ---------------------------------------------------------------------------
    7884/    6B80 :                     
    7885/    6B80 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    7886/    6B80 :                     
    7887/    6B80 :                     
    7888/    6B80 :                     DynScrResizeLoad:			; XREF: DeformBgLayer
    7889/    6B80 : 7000                		moveq	#0,d0
    7890/    6B82 : 1038 FE10           		move.b	($FFFFFE10).w,d0
    7891/    6B86 : D040                		add.w	d0,d0
    7892/    6B88 : 303B 005A           		move.w	Resize_Index(pc,d0.w),d0
    7893/    6B8C : 4EBB 0056           		jsr	Resize_Index(pc,d0.w)
    7894/    6B90 : 7202                		moveq	#2,d1
    7895/    6B92 : 3038 F726           		move.w	($FFFFF726).w,d0
    7896/    6B96 : 9078 F72E           		sub.w	($FFFFF72E).w,d0
    7897/    6B9A : 6722                		beq.s	locret_6DAA
    7898/    6B9C : 6422                		bcc.s	loc_6DAC
    7899/    6B9E : 4441                		neg.w	d1
    7900/    6BA0 : 3038 F704           		move.w	($FFFFF704).w,d0
    7901/    6BA4 : B078 F726           		cmp.w	($FFFFF726).w,d0
    7902/    6BA8 : 630A                		bls.s	loc_6DA0
    7903/    6BAA : 31C0 F72E           		move.w	d0,($FFFFF72E).w
    7904/    6BAE : 0278 FFFE F72E      		andi.w	#-2,($FFFFF72E).w
    7905/    6BB4 :                     
    7906/    6BB4 :                     loc_6DA0:
    7907/    6BB4 : D378 F72E           		add.w	d1,($FFFFF72E).w
    7908/    6BB8 : 11FC 0001 F75C      		move.b	#1,($FFFFF75C).w
    7909/    6BBE :                     
    7910/    6BBE :                     locret_6DAA:
    7911/    6BBE : 4E75                		rts	
    7912/    6BC0 :                     ; ===========================================================================
    7913/    6BC0 :                     
    7914/    6BC0 :                     loc_6DAC:				; XREF: DynScrResizeLoad
    7915/    6BC0 : 3038 F704           		move.w	($FFFFF704).w,d0
    7916/    6BC4 : 5040                		addq.w	#8,d0
    7917/    6BC6 : B078 F72E           		cmp.w	($FFFFF72E).w,d0
    7918/    6BCA : 650C                		bcs.s	loc_6DC4
    7919/    6BCC : 0838 0001 D022      		btst	#1,($FFFFD022).w
    7920/    6BD2 : 6704                		beq.s	loc_6DC4
    7921/    6BD4 : D241                		add.w	d1,d1
    7922/    6BD6 : D241                		add.w	d1,d1
    7923/    6BD8 :                     
    7924/    6BD8 :                     loc_6DC4:
    7925/    6BD8 : D378 F72E           		add.w	d1,($FFFFF72E).w
    7926/    6BDC : 11FC 0001 F75C      		move.b	#1,($FFFFF75C).w
    7927/    6BE2 : 4E75                		rts	
    7928/    6BE4 :                     ; End of function DynScrResizeLoad
    7929/    6BE4 :                     
    7930/    6BE4 :                     ; ===========================================================================
    7931/    6BE4 :                     ; ---------------------------------------------------------------------------
    7932/    6BE4 :                     ; Offset index for dynamic screen resizing
    7933/    6BE4 :                     ; ---------------------------------------------------------------------------
    7934/    6BE4 : 000E 0120           Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
    7935/    6BE8 : 01C0 0322           		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
    7936/    6BEC : 0398 043A           		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
    7937/    6BF0 : 0556                		dc.w Resize_Ending-Resize_Index
    7938/    6BF2 :                     ; ===========================================================================
    7939/    6BF2 :                     ; ---------------------------------------------------------------------------
    7940/    6BF2 :                     ; Green	Hill Zone dynamic screen resizing
    7941/    6BF2 :                     ; ---------------------------------------------------------------------------
    7942/    6BF2 :                     
    7943/    6BF2 :                     Resize_GHZ:				; XREF: Resize_Index
    7944/    6BF2 : 7000                		moveq	#0,d0
    7945/    6BF4 : 1038 FE11           		move.b	($FFFFFE11).w,d0
    7946/    6BF8 : D040                		add.w	d0,d0
    7947/    6BFA : 303B 0006           		move.w	Resize_GHZx(pc,d0.w),d0
    7948/    6BFE : 4EFB 0002           		jmp	Resize_GHZx(pc,d0.w)
    7949/    6C02 :                     ; ===========================================================================
    7950/    6C02 : 0006                Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
    7951/    6C04 : 001C                		dc.w Resize_GHZ2-Resize_GHZx
    7952/    6C06 : 004E                		dc.w Resize_GHZ3-Resize_GHZx
    7953/    6C08 :                     ; ===========================================================================
    7954/    6C08 :                     
    7955/    6C08 :                     Resize_GHZ1:
    7956/    6C08 : 31FC 0300 F726      		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
    7957/    6C0E : 0C78 1780 F700      		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
    7958/    6C14 : 6506                		bcs.s	locret_6E08	; if not, branch
    7959/    6C16 : 31FC 0400 F726      		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
    7960/    6C1C :                     
    7961/    6C1C :                     locret_6E08:
    7962/    6C1C : 4E75                		rts	
    7963/    6C1E :                     ; ===========================================================================
    7964/    6C1E :                     
    7965/    6C1E :                     Resize_GHZ2:
    7966/    6C1E : 31FC 0300 F726      		move.w	#$300,($FFFFF726).w
    7967/    6C24 : 0C78 0ED0 F700      		cmpi.w	#$ED0,($FFFFF700).w
    7968/    6C2A : 6522                		bcs.s	locret_6E3A
    7969/    6C2C : 31FC 0200 F726      		move.w	#$200,($FFFFF726).w
    7970/    6C32 : 0C78 1600 F700      		cmpi.w	#$1600,($FFFFF700).w
    7971/    6C38 : 6514                		bcs.s	locret_6E3A
    7972/    6C3A : 31FC 0400 F726      		move.w	#$400,($FFFFF726).w
    7973/    6C40 : 0C78 1D60 F700      		cmpi.w	#$1D60,($FFFFF700).w
    7974/    6C46 : 6506                		bcs.s	locret_6E3A
    7975/    6C48 : 31FC 0300 F726      		move.w	#$300,($FFFFF726).w
    7976/    6C4E :                     
    7977/    6C4E :                     locret_6E3A:
    7978/    6C4E : 4E75                		rts	
    7979/    6C50 :                     ; ===========================================================================
    7980/    6C50 :                     
    7981/    6C50 :                     Resize_GHZ3:
    7982/    6C50 : 7000                		moveq	#0,d0
    7983/    6C52 : 1038 F742           		move.b	($FFFFF742).w,d0
    7984/    6C56 : 303B 0006           		move.w	off_6E4A(pc,d0.w),d0
    7985/    6C5A : 4EFB 0002           		jmp	off_6E4A(pc,d0.w)
    7986/    6C5E :                     ; ===========================================================================
    7987/    6C5E : 0006                off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
    7988/    6C60 : 005A                		dc.w Resize_GHZ3boss-off_6E4A
    7989/    6C62 : 009E                		dc.w Resize_GHZ3end-off_6E4A
    7990/    6C64 :                     ; ===========================================================================
    7991/    6C64 :                     
    7992/    6C64 :                     Resize_GHZ3main:
    7993/    6C64 : 31FC 0300 F726      		move.w	#$300,($FFFFF726).w
    7994/    6C6A : 0C78 0380 F700      		cmpi.w	#$380,($FFFFF700).w
    7995/    6C70 : 6538                		bcs.s	locret_6E96
    7996/    6C72 : 31FC 0310 F726      		move.w	#$310,($FFFFF726).w
    7997/    6C78 : 0C78 0960 F700      		cmpi.w	#$960,($FFFFF700).w
    7998/    6C7E : 652A                		bcs.s	locret_6E96
    7999/    6C80 : 0C78 0280 F704      		cmpi.w	#$280,($FFFFF704).w
    8000/    6C86 : 6524                		bcs.s	loc_6E98
    8001/    6C88 : 31FC 0400 F726      		move.w	#$400,($FFFFF726).w
    8002/    6C8E : 0C78 1380 F700      		cmpi.w	#$1380,($FFFFF700).w
    8003/    6C94 : 640C                		bcc.s	loc_6E8E
    8004/    6C96 : 31FC 04C0 F726      		move.w	#$4C0,($FFFFF726).w
    8005/    6C9C : 31FC 04C0 F72E      		move.w	#$4C0,($FFFFF72E).w
    8006/    6CA2 :                     
    8007/    6CA2 :                     loc_6E8E:
    8008/    6CA2 : 0C78 1700 F700      		cmpi.w	#$1700,($FFFFF700).w
    8009/    6CA8 : 6402                		bcc.s	loc_6E98
    8010/    6CAA :                     
    8011/    6CAA :                     locret_6E96:
    8012/    6CAA : 4E75                		rts	
    8013/    6CAC :                     ; ===========================================================================
    8014/    6CAC :                     
    8015/    6CAC :                     loc_6E98:
    8016/    6CAC : 31FC 0300 F726      		move.w	#$300,($FFFFF726).w
    8017/    6CB2 : 5438 F742           		addq.b	#2,($FFFFF742).w
    8018/    6CB6 : 4E75                		rts	
    8019/    6CB8 :                     ; ===========================================================================
    8020/    6CB8 :                     
    8021/    6CB8 :                     Resize_GHZ3boss:
    8022/    6CB8 : 0C78 0960 F700      		cmpi.w	#$960,($FFFFF700).w
    8023/    6CBE : 6404                		bcc.s	loc_6EB0
    8024/    6CC0 : 5538 F742           		subq.b	#2,($FFFFF742).w
    8025/    6CC4 :                     
    8026/    6CC4 :                     loc_6EB0:
    8027/    6CC4 : 0C78 2960 F700      		cmpi.w	#$2960,($FFFFF700).w
    8028/    6CCA : 652E                		bcs.s	locret_6EE8
    8029/    6CCC : 6100 6B8A           		bsr.w	SingleObjLoad
    8030/    6CD0 : 6610                		bne.s	loc_6ED0
    8031/    6CD2 : 12BC 003D           		move.b	#$3D,0(a1)	; load GHZ boss	object
    8032/    6CD6 : 337C 2A60 0008      		move.w	#$2A60,8(a1)
    8033/    6CDC : 337C 0280 000C      		move.w	#$280,$C(a1)
    8034/    6CE2 :                     
    8035/    6CE2 :                     loc_6ED0:
    8036/    6CE2 : 303C 008C           		move.w	#$8C,d0
    8037/    6CE6 : 6100 A494           		bsr.w	PlaySound	; play boss music
    8038/    6CEA : 11FC 0001 F7AA      		move.b	#1,($FFFFF7AA).w ; lock	screen
    8039/    6CF0 : 5438 F742           		addq.b	#2,($FFFFF742).w
    8040/    6CF4 : 7011                		moveq	#$11,d0
    8041/    6CF6 : 6000 A66E           		bra.w	LoadPLC		; load boss patterns
    8042/    6CFA :                     ; ===========================================================================
    8043/    6CFA :                     
    8044/    6CFA :                     locret_6EE8:
    8045/    6CFA : 4E75                		rts	
    8046/    6CFC :                     ; ===========================================================================
    8047/    6CFC :                     
    8048/    6CFC :                     Resize_GHZ3end:
    8049/    6CFC : 31F8 F700 F728      		move.w	($FFFFF700).w,($FFFFF728).w
    8050/    6D02 : 4E75                		rts	
    8051/    6D04 :                     ; ===========================================================================
    8052/    6D04 :                     ; ---------------------------------------------------------------------------
    8053/    6D04 :                     ; Labyrinth Zone dynamic screen	resizing
    8054/    6D04 :                     ; ---------------------------------------------------------------------------
    8055/    6D04 :                     
    8056/    6D04 :                     Resize_LZ:				; XREF: Resize_Index
    8057/    6D04 : 7000                		moveq	#0,d0
    8058/    6D06 : 1038 FE11           		move.b	($FFFFFE11).w,d0
    8059/    6D0A : D040                		add.w	d0,d0
    8060/    6D0C : 303B 0006           		move.w	Resize_LZx(pc,d0.w),d0
    8061/    6D10 : 4EFB 0002           		jmp	Resize_LZx(pc,d0.w)
    8062/    6D14 :                     ; ===========================================================================
    8063/    6D14 : 0008                Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
    8064/    6D16 : 0008                		dc.w Resize_LZ12-Resize_LZx
    8065/    6D18 : 000A                		dc.w Resize_LZ3-Resize_LZx
    8066/    6D1A : 0068                		dc.w Resize_SBZ3-Resize_LZx
    8067/    6D1C :                     ; ===========================================================================
    8068/    6D1C :                     
    8069/    6D1C :                     Resize_LZ12:
    8070/    6D1C : 4E75                		rts	
    8071/    6D1E :                     ; ===========================================================================
    8072/    6D1E :                     
    8073/    6D1E :                     Resize_LZ3:
    8074/    6D1E : 4A38 F7EF           		tst.b	($FFFFF7EF).w				; has switch $F	been pressed?
    8075/    6D22 : 671C                		beq.s	loc_6F28				; if not, branch
    8076/    6D24 : 2038 A400           		move.l	($FFFFA400).w,d0			; MJ: load layout being read currently
    8077/    6D28 : B0BC 0007 0FC2      		cmp.l	#Level_LZ3_WALL,d0			; MJ: is it already set to wall version?
    8078/    6D2E : 6710                		beq.s	loc_6F28				; MJ: if so, branch to skip
    8079/    6D30 : 21FC 0007 0FC2      		move.l	#Level_LZ3_WALL,($FFFFA400).w		; MJ: Set wall version of act 3's layout to be read
             6D36 : A400             
    8080/    6D38 : 303C 00B7           		move.w	#$B7,d0
    8081/    6D3C : 6100 A444           		bsr.w	PlaySound_Special ; play rumbling sound
    8082/    6D40 :                     
    8083/    6D40 :                     loc_6F28:
    8084/    6D40 : 4A38 F742           		tst.b	($FFFFF742).w
    8085/    6D44 : 6634                		bne.s	locret_6F64
    8086/    6D46 : 0C78 1CA0 F700      		cmpi.w	#$1CA0,($FFFFF700).w
    8087/    6D4C : 652A                		bcs.s	locret_6F62
    8088/    6D4E : 0C78 0600 F704      		cmpi.w	#$600,($FFFFF704).w
    8089/    6D54 : 6422                		bcc.s	locret_6F62
    8090/    6D56 : 6100 6B00           		bsr.w	SingleObjLoad
    8091/    6D5A : 6604                		bne.s	loc_6F4A
    8092/    6D5C : 12BC 0077           		move.b	#$77,0(a1)	; load LZ boss object
    8093/    6D60 :                     
    8094/    6D60 :                     loc_6F4A:
    8095/    6D60 : 303C 008C           		move.w	#$8C,d0
    8096/    6D64 : 6100 A416           		bsr.w	PlaySound	; play boss music
    8097/    6D68 : 11FC 0001 F7AA      		move.b	#1,($FFFFF7AA).w ; lock	screen
    8098/    6D6E : 5438 F742           		addq.b	#2,($FFFFF742).w
    8099/    6D72 : 7011                		moveq	#$11,d0
    8100/    6D74 : 6000 A5F0           		bra.w	LoadPLC		; load boss patterns
    8101/    6D78 :                     ; ===========================================================================
    8102/    6D78 :                     
    8103/    6D78 :                     locret_6F62:
    8104/    6D78 : 4E75                		rts	
    8105/    6D7A :                     ; ===========================================================================
    8106/    6D7A :                     
    8107/    6D7A :                     locret_6F64:
    8108/    6D7A : 4E75                		rts	
    8109/    6D7C :                     ; ===========================================================================
    8110/    6D7C :                     
    8111/    6D7C :                     Resize_SBZ3:
    8112/    6D7C : 0C78 0D00 F700      		cmpi.w	#$D00,($FFFFF700).w
    8113/    6D82 : 651E                		bcs.s	locret_6F8C
    8114/    6D84 : 0C78 0018 D00C      		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
    8115/    6D8A : 6416                		bcc.s	locret_6F8C	; if not, branch
    8116/    6D8C : 4238 FE30           		clr.b	($FFFFFE30).w
    8117/    6D90 : 31FC 0001 FE02      		move.w	#1,($FFFFFE02).w ; restart level
    8118/    6D96 : 31FC 0502 FE10      		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
    8119/    6D9C : 11FC 0001 F7C8      		move.b	#1,($FFFFF7C8).w ; freeze Sonic
    8120/    6DA2 :                     
    8121/    6DA2 :                     locret_6F8C:
    8122/    6DA2 : 4E75                		rts	
    8123/    6DA4 :                     ; ===========================================================================
    8124/    6DA4 :                     ; ---------------------------------------------------------------------------
    8125/    6DA4 :                     ; Marble Zone dynamic screen resizing
    8126/    6DA4 :                     ; ---------------------------------------------------------------------------
    8127/    6DA4 :                     
    8128/    6DA4 :                     Resize_MZ:				; XREF: Resize_Index
    8129/    6DA4 : 7000                		moveq	#0,d0
    8130/    6DA6 : 1038 FE11           		move.b	($FFFFFE11).w,d0
    8131/    6DAA : D040                		add.w	d0,d0
    8132/    6DAC : 303B 0006           		move.w	Resize_MZx(pc,d0.w),d0
    8133/    6DB0 : 4EFB 0002           		jmp	Resize_MZx(pc,d0.w)
    8134/    6DB4 :                     ; ===========================================================================
    8135/    6DB4 : 0006                Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
    8136/    6DB6 : 00D6                		dc.w Resize_MZ2-Resize_MZx
    8137/    6DB8 : 00EC                		dc.w Resize_MZ3-Resize_MZx
    8138/    6DBA :                     ; ===========================================================================
    8139/    6DBA :                     
    8140/    6DBA :                     Resize_MZ1:
    8141/    6DBA : 7000                		moveq	#0,d0
    8142/    6DBC : 1038 F742           		move.b	($FFFFF742).w,d0
    8143/    6DC0 : 303B 0006           		move.w	off_6FB2(pc,d0.w),d0
    8144/    6DC4 : 4EFB 0002           		jmp	off_6FB2(pc,d0.w)
    8145/    6DC8 :                     ; ===========================================================================
    8146/    6DC8 : 0008                off_6FB2:	dc.w loc_6FBA-off_6FB2
    8147/    6DCA : 0038                		dc.w loc_6FEA-off_6FB2
    8148/    6DCC : 007C                		dc.w loc_702E-off_6FB2
    8149/    6DCE : 009E                		dc.w loc_7050-off_6FB2
    8150/    6DD0 :                     ; ===========================================================================
    8151/    6DD0 :                     
    8152/    6DD0 :                     loc_6FBA:
    8153/    6DD0 : 31FC 01D0 F726      		move.w	#$1D0,($FFFFF726).w
    8154/    6DD6 : 0C78 0700 F700      		cmpi.w	#$700,($FFFFF700).w
    8155/    6DDC : 6520                		bcs.s	locret_6FE8
    8156/    6DDE : 31FC 0220 F726      		move.w	#$220,($FFFFF726).w
    8157/    6DE4 : 0C78 0D00 F700      		cmpi.w	#$D00,($FFFFF700).w
    8158/    6DEA : 6512                		bcs.s	locret_6FE8
    8159/    6DEC : 31FC 0340 F726      		move.w	#$340,($FFFFF726).w
    8160/    6DF2 : 0C78 0340 F704      		cmpi.w	#$340,($FFFFF704).w
    8161/    6DF8 : 6504                		bcs.s	locret_6FE8
    8162/    6DFA : 5438 F742           		addq.b	#2,($FFFFF742).w
    8163/    6DFE :                     
    8164/    6DFE :                     locret_6FE8:
    8165/    6DFE : 4E75                		rts	
    8166/    6E00 :                     ; ===========================================================================
    8167/    6E00 :                     
    8168/    6E00 :                     loc_6FEA:
    8169/    6E00 : 0C78 0340 F704      		cmpi.w	#$340,($FFFFF704).w
    8170/    6E06 : 6406                		bcc.s	loc_6FF8
    8171/    6E08 : 5538 F742           		subq.b	#2,($FFFFF742).w
    8172/    6E0C : 4E75                		rts	
    8173/    6E0E :                     ; ===========================================================================
    8174/    6E0E :                     
    8175/    6E0E :                     loc_6FF8:
    8176/    6E0E : 31FC 0000 F72C      		move.w	#0,($FFFFF72C).w
    8177/    6E14 : 0C78 0E00 F700      		cmpi.w	#$E00,($FFFFF700).w
    8178/    6E1A : 6426                		bcc.s	locret_702C
    8179/    6E1C : 31FC 0340 F72C      		move.w	#$340,($FFFFF72C).w
    8180/    6E22 : 31FC 0340 F726      		move.w	#$340,($FFFFF726).w
    8181/    6E28 : 0C78 0A90 F700      		cmpi.w	#$A90,($FFFFF700).w
    8182/    6E2E : 6412                		bcc.s	locret_702C
    8183/    6E30 : 31FC 0500 F726      		move.w	#$500,($FFFFF726).w
    8184/    6E36 : 0C78 0370 F704      		cmpi.w	#$370,($FFFFF704).w
    8185/    6E3C : 6504                		bcs.s	locret_702C
    8186/    6E3E : 5438 F742           		addq.b	#2,($FFFFF742).w
    8187/    6E42 :                     
    8188/    6E42 :                     locret_702C:
    8189/    6E42 : 4E75                		rts	
    8190/    6E44 :                     ; ===========================================================================
    8191/    6E44 :                     
    8192/    6E44 :                     loc_702E:
    8193/    6E44 : 0C78 0370 F704      		cmpi.w	#$370,($FFFFF704).w
    8194/    6E4A : 6406                		bcc.s	loc_703C
    8195/    6E4C : 5538 F742           		subq.b	#2,($FFFFF742).w
    8196/    6E50 : 4E75                		rts	
    8197/    6E52 :                     ; ===========================================================================
    8198/    6E52 :                     
    8199/    6E52 :                     loc_703C:
    8200/    6E52 : 0C78 0500 F704      		cmpi.w	#$500,($FFFFF704).w
    8201/    6E58 : 650A                		bcs.s	locret_704E
    8202/    6E5A : 31FC 0500 F72C      		move.w	#$500,($FFFFF72C).w
    8203/    6E60 : 5438 F742           		addq.b	#2,($FFFFF742).w
    8204/    6E64 :                     
    8205/    6E64 :                     locret_704E:
    8206/    6E64 : 4E75                		rts	
    8207/    6E66 :                     ; ===========================================================================
    8208/    6E66 :                     
    8209/    6E66 :                     loc_7050:
    8210/    6E66 : 0C78 0E70 F700      		cmpi.w	#$E70,($FFFFF700).w
    8211/    6E6C : 651A                		bcs.s	locret_7072
    8212/    6E6E : 31FC 0000 F72C      		move.w	#0,($FFFFF72C).w
    8213/    6E74 : 31FC 0500 F726      		move.w	#$500,($FFFFF726).w
    8214/    6E7A : 0C78 1430 F700      		cmpi.w	#$1430,($FFFFF700).w
    8215/    6E80 : 6506                		bcs.s	locret_7072
    8216/    6E82 : 31FC 0210 F726      		move.w	#$210,($FFFFF726).w
    8217/    6E88 :                     
    8218/    6E88 :                     locret_7072:
    8219/    6E88 : 4E75                		rts	
    8220/    6E8A :                     ; ===========================================================================
    8221/    6E8A :                     
    8222/    6E8A :                     Resize_MZ2:
    8223/    6E8A : 31FC 0520 F726      		move.w	#$520,($FFFFF726).w
    8224/    6E90 : 0C78 1700 F700      		cmpi.w	#$1700,($FFFFF700).w
    8225/    6E96 : 6506                		bcs.s	locret_7088
    8226/    6E98 : 31FC 0200 F726      		move.w	#$200,($FFFFF726).w
    8227/    6E9E :                     
    8228/    6E9E :                     locret_7088:
    8229/    6E9E : 4E75                		rts	
    8230/    6EA0 :                     ; ===========================================================================
    8231/    6EA0 :                     
    8232/    6EA0 :                     Resize_MZ3:
    8233/    6EA0 : 7000                		moveq	#0,d0
    8234/    6EA2 : 1038 F742           		move.b	($FFFFF742).w,d0
    8235/    6EA6 : 303B 0006           		move.w	off_7098(pc,d0.w),d0
    8236/    6EAA : 4EFB 0002           		jmp	off_7098(pc,d0.w)
    8237/    6EAE :                     ; ===========================================================================
    8238/    6EAE : 0004                off_7098:	dc.w Resize_MZ3boss-off_7098
    8239/    6EB0 : 0050                		dc.w Resize_MZ3end-off_7098
    8240/    6EB2 :                     ; ===========================================================================
    8241/    6EB2 :                     
    8242/    6EB2 :                     Resize_MZ3boss:
    8243/    6EB2 : 31FC 0720 F726      		move.w	#$720,($FFFFF726).w
    8244/    6EB8 : 0C78 1560 F700      		cmpi.w	#$1560,($FFFFF700).w
    8245/    6EBE : 653C                		bcs.s	locret_70E8
    8246/    6EC0 : 31FC 0210 F726      		move.w	#$210,($FFFFF726).w
    8247/    6EC6 : 0C78 17F0 F700      		cmpi.w	#$17F0,($FFFFF700).w
    8248/    6ECC : 652E                		bcs.s	locret_70E8
    8249/    6ECE : 6100 6988           		bsr.w	SingleObjLoad
    8250/    6ED2 : 6610                		bne.s	loc_70D0
    8251/    6ED4 : 12BC 0073           		move.b	#$73,0(a1)	; load MZ boss object
    8252/    6ED8 : 337C 19F0 0008      		move.w	#$19F0,8(a1)
    8253/    6EDE : 337C 022C 000C      		move.w	#$22C,$C(a1)
    8254/    6EE4 :                     
    8255/    6EE4 :                     loc_70D0:
    8256/    6EE4 : 303C 008C           		move.w	#$8C,d0
    8257/    6EE8 : 6100 A292           		bsr.w	PlaySound	; play boss music
    8258/    6EEC : 11FC 0001 F7AA      		move.b	#1,($FFFFF7AA).w ; lock	screen
    8259/    6EF2 : 5438 F742           		addq.b	#2,($FFFFF742).w
    8260/    6EF6 : 7011                		moveq	#$11,d0
    8261/    6EF8 : 6000 A46C           		bra.w	LoadPLC		; load boss patterns
    8262/    6EFC :                     ; ===========================================================================
    8263/    6EFC :                     
    8264/    6EFC :                     locret_70E8:
    8265/    6EFC : 4E75                		rts	
    8266/    6EFE :                     ; ===========================================================================
    8267/    6EFE :                     
    8268/    6EFE :                     Resize_MZ3end:
    8269/    6EFE : 31F8 F700 F728      		move.w	($FFFFF700).w,($FFFFF728).w
    8270/    6F04 : 4E75                		rts	
    8271/    6F06 :                     ; ===========================================================================
    8272/    6F06 :                     ; ---------------------------------------------------------------------------
    8273/    6F06 :                     ; Star Light Zone dynamic screen resizing
    8274/    6F06 :                     ; ---------------------------------------------------------------------------
    8275/    6F06 :                     
    8276/    6F06 :                     Resize_SLZ:				; XREF: Resize_Index
    8277/    6F06 : 7000                		moveq	#0,d0
    8278/    6F08 : 1038 FE11           		move.b	($FFFFFE11).w,d0
    8279/    6F0C : D040                		add.w	d0,d0
    8280/    6F0E : 303B 0006           		move.w	Resize_SLZx(pc,d0.w),d0
    8281/    6F12 : 4EFB 0002           		jmp	Resize_SLZx(pc,d0.w)
    8282/    6F16 :                     ; ===========================================================================
    8283/    6F16 : 0006                Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
    8284/    6F18 : 0006                		dc.w Resize_SLZ12-Resize_SLZx
    8285/    6F1A : 0008                		dc.w Resize_SLZ3-Resize_SLZx
    8286/    6F1C :                     ; ===========================================================================
    8287/    6F1C :                     
    8288/    6F1C :                     Resize_SLZ12:
    8289/    6F1C : 4E75                		rts	
    8290/    6F1E :                     ; ===========================================================================
    8291/    6F1E :                     
    8292/    6F1E :                     Resize_SLZ3:
    8293/    6F1E : 7000                		moveq	#0,d0
    8294/    6F20 : 1038 F742           		move.b	($FFFFF742).w,d0
    8295/    6F24 : 303B 0006           		move.w	off_7118(pc,d0.w),d0
    8296/    6F28 : 4EFB 0002           		jmp	off_7118(pc,d0.w)
    8297/    6F2C :                     ; ===========================================================================
    8298/    6F2C : 0006                off_7118:	dc.w Resize_SLZ3main-off_7118
    8299/    6F2E : 001A                		dc.w Resize_SLZ3boss-off_7118
    8300/    6F30 : 0046                		dc.w Resize_SLZ3end-off_7118
    8301/    6F32 :                     ; ===========================================================================
    8302/    6F32 :                     
    8303/    6F32 :                     Resize_SLZ3main:
    8304/    6F32 : 0C78 1E70 F700      		cmpi.w	#$1E70,($FFFFF700).w
    8305/    6F38 : 650A                		bcs.s	locret_7130
    8306/    6F3A : 31FC 0210 F726      		move.w	#$210,($FFFFF726).w
    8307/    6F40 : 5438 F742           		addq.b	#2,($FFFFF742).w
    8308/    6F44 :                     
    8309/    6F44 :                     locret_7130:
    8310/    6F44 : 4E75                		rts	
    8311/    6F46 :                     ; ===========================================================================
    8312/    6F46 :                     
    8313/    6F46 :                     Resize_SLZ3boss:
    8314/    6F46 : 0C78 2000 F700      		cmpi.w	#$2000,($FFFFF700).w
    8315/    6F4C : 6522                		bcs.s	locret_715C
    8316/    6F4E : 6100 6908           		bsr.w	SingleObjLoad
    8317/    6F52 : 6604                		bne.s	loc_7144
    8318/    6F54 : 12BC 007A           		move.b	#$7A,(a1)	; load SLZ boss	object
    8319/    6F58 :                     
    8320/    6F58 :                     loc_7144:
    8321/    6F58 : 303C 008C           		move.w	#$8C,d0
    8322/    6F5C : 6100 A21E           		bsr.w	PlaySound	; play boss music
    8323/    6F60 : 11FC 0001 F7AA      		move.b	#1,($FFFFF7AA).w ; lock	screen
    8324/    6F66 : 5438 F742           		addq.b	#2,($FFFFF742).w
    8325/    6F6A : 7011                		moveq	#$11,d0
    8326/    6F6C : 6000 A3F8           		bra.w	LoadPLC		; load boss patterns
    8327/    6F70 :                     ; ===========================================================================
    8328/    6F70 :                     
    8329/    6F70 :                     locret_715C:
    8330/    6F70 : 4E75                		rts	
    8331/    6F72 :                     ; ===========================================================================
    8332/    6F72 :                     
    8333/    6F72 :                     Resize_SLZ3end:
    8334/    6F72 : 31F8 F700 F728      		move.w	($FFFFF700).w,($FFFFF728).w
    8335/    6F78 : 4E75                		rts
    8336/    6F7A : 4E75                		rts
    8337/    6F7C :                     ; ===========================================================================
    8338/    6F7C :                     ; ---------------------------------------------------------------------------
    8339/    6F7C :                     ; Spring Yard Zone dynamic screen resizing
    8340/    6F7C :                     ; ---------------------------------------------------------------------------
    8341/    6F7C :                     
    8342/    6F7C :                     Resize_SYZ:				; XREF: Resize_Index
    8343/    6F7C : 7000                		moveq	#0,d0
    8344/    6F7E : 1038 FE11           		move.b	($FFFFFE11).w,d0
    8345/    6F82 : D040                		add.w	d0,d0
    8346/    6F84 : 303B 0006           		move.w	Resize_SYZx(pc,d0.w),d0
    8347/    6F88 : 4EFB 0002           		jmp	Resize_SYZx(pc,d0.w)
    8348/    6F8C :                     ; ===========================================================================
    8349/    6F8C : 0006                Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
    8350/    6F8E : 0008                		dc.w Resize_SYZ2-Resize_SYZx
    8351/    6F90 : 002C                		dc.w Resize_SYZ3-Resize_SYZx
    8352/    6F92 :                     ; ===========================================================================
    8353/    6F92 :                     
    8354/    6F92 :                     Resize_SYZ1:
    8355/    6F92 : 4E75                		rts	
    8356/    6F94 :                     ; ===========================================================================
    8357/    6F94 :                     
    8358/    6F94 :                     Resize_SYZ2:
    8359/    6F94 : 31FC 0520 F726      		move.w	#$520,($FFFFF726).w
    8360/    6F9A : 0C78 25A0 F700      		cmpi.w	#$25A0,($FFFFF700).w
    8361/    6FA0 : 6514                		bcs.s	locret_71A2
    8362/    6FA2 : 31FC 0420 F726      		move.w	#$420,($FFFFF726).w
    8363/    6FA8 : 0C78 04D0 D00C      		cmpi.w	#$4D0,($FFFFD00C).w
    8364/    6FAE : 6506                		bcs.s	locret_71A2
    8365/    6FB0 : 31FC 0520 F726      		move.w	#$520,($FFFFF726).w
    8366/    6FB6 :                     
    8367/    6FB6 :                     locret_71A2:
    8368/    6FB6 : 4E75                		rts	
    8369/    6FB8 :                     ; ===========================================================================
    8370/    6FB8 :                     
    8371/    6FB8 :                     Resize_SYZ3:
    8372/    6FB8 : 7000                		moveq	#0,d0
    8373/    6FBA : 1038 F742           		move.b	($FFFFF742).w,d0
    8374/    6FBE : 303B 0006           		move.w	off_71B2(pc,d0.w),d0
    8375/    6FC2 : 4EFB 0002           		jmp	off_71B2(pc,d0.w)
    8376/    6FC6 :                     ; ===========================================================================
    8377/    6FC6 : 0006                off_71B2:	dc.w Resize_SYZ3main-off_71B2
    8378/    6FC8 : 001E                		dc.w Resize_SYZ3boss-off_71B2
    8379/    6FCA : 0050                		dc.w Resize_SYZ3end-off_71B2
    8380/    6FCC :                     ; ===========================================================================
    8381/    6FCC :                     
    8382/    6FCC :                     Resize_SYZ3main:
    8383/    6FCC : 0C78 2AC0 F700      		cmpi.w	#$2AC0,($FFFFF700).w
    8384/    6FD2 : 650E                		bcs.s	locret_71CE
    8385/    6FD4 : 6100 6882           		bsr.w	SingleObjLoad
    8386/    6FD8 : 6608                		bne.s	locret_71CE
    8387/    6FDA : 12BC 0076           		move.b	#$76,(a1)	; load blocks that boss	picks up
    8388/    6FDE : 5438 F742           		addq.b	#2,($FFFFF742).w
    8389/    6FE2 :                     
    8390/    6FE2 :                     locret_71CE:
    8391/    6FE2 : 4E75                		rts	
    8392/    6FE4 :                     ; ===========================================================================
    8393/    6FE4 :                     
    8394/    6FE4 :                     Resize_SYZ3boss:
    8395/    6FE4 : 0C78 2C00 F700      		cmpi.w	#$2C00,($FFFFF700).w
    8396/    6FEA : 6528                		bcs.s	locret_7200
    8397/    6FEC : 31FC 04CC F726      		move.w	#$4CC,($FFFFF726).w
    8398/    6FF2 : 6100 6864           		bsr.w	SingleObjLoad
    8399/    6FF6 : 6608                		bne.s	loc_71EC
    8400/    6FF8 : 12BC 0075           		move.b	#$75,(a1)	; load SYZ boss	object
    8401/    6FFC : 5438 F742           		addq.b	#2,($FFFFF742).w
    8402/    7000 :                     
    8403/    7000 :                     loc_71EC:
    8404/    7000 : 303C 008C           		move.w	#$8C,d0
    8405/    7004 : 6100 A176           		bsr.w	PlaySound	; play boss music
    8406/    7008 : 11FC 0001 F7AA      		move.b	#1,($FFFFF7AA).w ; lock	screen
    8407/    700E : 7011                		moveq	#$11,d0
    8408/    7010 : 6000 A354           		bra.w	LoadPLC		; load boss patterns
    8409/    7014 :                     ; ===========================================================================
    8410/    7014 :                     
    8411/    7014 :                     locret_7200:
    8412/    7014 : 4E75                		rts	
    8413/    7016 :                     ; ===========================================================================
    8414/    7016 :                     
    8415/    7016 :                     Resize_SYZ3end:
    8416/    7016 : 31F8 F700 F728      		move.w	($FFFFF700).w,($FFFFF728).w
    8417/    701C : 4E75                		rts	
    8418/    701E :                     ; ===========================================================================
    8419/    701E :                     ; ---------------------------------------------------------------------------
    8420/    701E :                     ; Scrap	Brain Zone dynamic screen resizing
    8421/    701E :                     ; ---------------------------------------------------------------------------
    8422/    701E :                     
    8423/    701E :                     Resize_SBZ:				; XREF: Resize_Index
    8424/    701E : 7000                		moveq	#0,d0
    8425/    7020 : 1038 FE11           		move.b	($FFFFFE11).w,d0
    8426/    7024 : D040                		add.w	d0,d0
    8427/    7026 : 303B 0006           		move.w	Resize_SBZx(pc,d0.w),d0
    8428/    702A : 4EFB 0002           		jmp	Resize_SBZx(pc,d0.w)
    8429/    702E :                     ; ===========================================================================
    8430/    702E : 0006                Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
    8431/    7030 : 002A                		dc.w Resize_SBZ2-Resize_SBZx
    8432/    7032 : 00B0                		dc.w Resize_FZ-Resize_SBZx
    8433/    7034 :                     ; ===========================================================================
    8434/    7034 :                     
    8435/    7034 :                     Resize_SBZ1:
    8436/    7034 : 31FC 0720 F726      		move.w	#$720,($FFFFF726).w
    8437/    703A : 0C78 1880 F700      		cmpi.w	#$1880,($FFFFF700).w
    8438/    7040 : 6514                		bcs.s	locret_7242
    8439/    7042 : 31FC 0620 F726      		move.w	#$620,($FFFFF726).w
    8440/    7048 : 0C78 2000 F700      		cmpi.w	#$2000,($FFFFF700).w
    8441/    704E : 6506                		bcs.s	locret_7242
    8442/    7050 : 31FC 02A0 F726      		move.w	#$2A0,($FFFFF726).w
    8443/    7056 :                     
    8444/    7056 :                     locret_7242:
    8445/    7056 : 4E75                		rts	
    8446/    7058 :                     ; ===========================================================================
    8447/    7058 :                     
    8448/    7058 :                     Resize_SBZ2:
    8449/    7058 : 7000                		moveq	#0,d0
    8450/    705A : 1038 F742           		move.b	($FFFFF742).w,d0
    8451/    705E : 303B 0006           		move.w	off_7252(pc,d0.w),d0
    8452/    7062 : 4EFB 0002           		jmp	off_7252(pc,d0.w)
    8453/    7066 :                     ; ===========================================================================
    8454/    7066 : 0008                off_7252:	dc.w Resize_SBZ2main-off_7252
    8455/    7068 : 002A                		dc.w Resize_SBZ2boss-off_7252
    8456/    706A : 0048                		dc.w Resize_SBZ2boss2-off_7252
    8457/    706C : 0066                		dc.w Resize_SBZ2end-off_7252
    8458/    706E :                     ; ===========================================================================
    8459/    706E :                     
    8460/    706E :                     Resize_SBZ2main:
    8461/    706E : 31FC 0800 F726      		move.w	#$800,($FFFFF726).w
    8462/    7074 : 0C78 1800 F700      		cmpi.w	#$1800,($FFFFF700).w
    8463/    707A : 6512                		bcs.s	locret_727A
    8464/    707C : 31FC 0510 F726      		move.w	#$510,($FFFFF726).w
    8465/    7082 : 0C78 1E00 F700      		cmpi.w	#$1E00,($FFFFF700).w
    8466/    7088 : 6504                		bcs.s	locret_727A
    8467/    708A : 5438 F742           		addq.b	#2,($FFFFF742).w
    8468/    708E :                     
    8469/    708E :                     locret_727A:
    8470/    708E : 4E75                		rts	
    8471/    7090 :                     ; ===========================================================================
    8472/    7090 :                     
    8473/    7090 :                     Resize_SBZ2boss:
    8474/    7090 : 0C78 1EB0 F700      		cmpi.w	#$1EB0,($FFFFF700).w
    8475/    7096 : 6514                		bcs.s	locret_7298
    8476/    7098 : 6100 67BE           		bsr.w	SingleObjLoad
    8477/    709C : 660E                		bne.s	locret_7298
    8478/    709E : 12BC 0083           		move.b	#$83,(a1)	; load collapsing block	object
    8479/    70A2 : 5438 F742           		addq.b	#2,($FFFFF742).w
    8480/    70A6 : 701E                		moveq	#$1E,d0
    8481/    70A8 : 6000 A2BC           		bra.w	LoadPLC		; load SBZ2 Eggman patterns
    8482/    70AC :                     ; ===========================================================================
    8483/    70AC :                     
    8484/    70AC :                     locret_7298:
    8485/    70AC : 4E75                		rts	
    8486/    70AE :                     ; ===========================================================================
    8487/    70AE :                     
    8488/    70AE :                     Resize_SBZ2boss2:
    8489/    70AE : 0C78 1F60 F700      		cmpi.w	#$1F60,($FFFFF700).w
    8490/    70B4 : 6514                		bcs.s	loc_72B6
    8491/    70B6 : 6100 67A0           		bsr.w	SingleObjLoad
    8492/    70BA : 6608                		bne.s	loc_72B0
    8493/    70BC : 12BC 0082           		move.b	#$82,(a1)	; load SBZ2 Eggman object
    8494/    70C0 : 5438 F742           		addq.b	#2,($FFFFF742).w
    8495/    70C4 :                     
    8496/    70C4 :                     loc_72B0:
    8497/    70C4 : 11FC 0001 F7AA      		move.b	#1,($FFFFF7AA).w ; lock	screen
    8498/    70CA :                     
    8499/    70CA :                     loc_72B6:
    8500/    70CA : 600A                		bra.s	loc_72C2
    8501/    70CC :                     ; ===========================================================================
    8502/    70CC :                     
    8503/    70CC :                     Resize_SBZ2end:
    8504/    70CC : 0C78 2050 F700      		cmpi.w	#$2050,($FFFFF700).w
    8505/    70D2 : 6502                		bcs.s	loc_72C2
    8506/    70D4 : 4E75                		rts	
    8507/    70D6 :                     ; ===========================================================================
    8508/    70D6 :                     
    8509/    70D6 :                     loc_72C2:
    8510/    70D6 : 31F8 F700 F728      		move.w	($FFFFF700).w,($FFFFF728).w
    8511/    70DC : 4E75                		rts	
    8512/    70DE :                     ; ===========================================================================
    8513/    70DE :                     
    8514/    70DE :                     Resize_FZ:
    8515/    70DE : 7000                		moveq	#0,d0
    8516/    70E0 : 1038 F742           		move.b	($FFFFF742).w,d0
    8517/    70E4 : 303B 0006           		move.w	off_72D8(pc,d0.w),d0
    8518/    70E8 : 4EFB 0002           		jmp	off_72D8(pc,d0.w)
    8519/    70EC :                     ; ===========================================================================
    8520/    70EC : 000A 001E           off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
    8521/    70F0 : 003C 004A           		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
    8522/    70F4 : 004C                		dc.w Resize_FZend2-off_72D8
    8523/    70F6 :                     ; ===========================================================================
    8524/    70F6 :                     
    8525/    70F6 :                     Resize_FZmain:
    8526/    70F6 : 0C78 2148 F700      		cmpi.w	#$2148,($FFFFF700).w
    8527/    70FC : 650A                		bcs.s	loc_72F4
    8528/    70FE : 5438 F742           		addq.b	#2,($FFFFF742).w
    8529/    7102 : 701F                		moveq	#$1F,d0
    8530/    7104 : 6100 A260           		bsr.w	LoadPLC		; load FZ boss patterns
    8531/    7108 :                     
    8532/    7108 :                     loc_72F4:
    8533/    7108 : 60CC                		bra.s	loc_72C2
    8534/    710A :                     ; ===========================================================================
    8535/    710A :                     
    8536/    710A :                     Resize_FZboss:
    8537/    710A : 0C78 2300 F700      		cmpi.w	#$2300,($FFFFF700).w
    8538/    7110 : 6514                		bcs.s	loc_7312
    8539/    7112 : 6100 6744           		bsr.w	SingleObjLoad
    8540/    7116 : 660E                		bne.s	loc_7312
    8541/    7118 : 12BC 0085           		move.b	#$85,(a1)	; load FZ boss object
    8542/    711C : 5438 F742           		addq.b	#2,($FFFFF742).w
    8543/    7120 : 11FC 0001 F7AA      		move.b	#1,($FFFFF7AA).w ; lock	screen
    8544/    7126 :                     
    8545/    7126 :                     loc_7312:
    8546/    7126 : 60AE                		bra.s	loc_72C2
    8547/    7128 :                     ; ===========================================================================
    8548/    7128 :                     
    8549/    7128 :                     Resize_FZend:
    8550/    7128 : 0C78 2450 F700      		cmpi.w	#$2450,($FFFFF700).w
    8551/    712E : 6504                		bcs.s	loc_7320
    8552/    7130 : 5438 F742           		addq.b	#2,($FFFFF742).w
    8553/    7134 :                     
    8554/    7134 :                     loc_7320:
    8555/    7134 : 60A0                		bra.s	loc_72C2
    8556/    7136 :                     ; ===========================================================================
    8557/    7136 :                     
    8558/    7136 :                     locret_7322:
    8559/    7136 : 4E75                		rts	
    8560/    7138 :                     ; ===========================================================================
    8561/    7138 :                     
    8562/    7138 :                     Resize_FZend2:
    8563/    7138 : 609C                		bra.s	loc_72C2
    8564/    713A :                     ; ===========================================================================
    8565/    713A :                     ; ---------------------------------------------------------------------------
    8566/    713A :                     ; Ending sequence dynamic screen resizing (empty)
    8567/    713A :                     ; ---------------------------------------------------------------------------
    8568/    713A :                     
    8569/    713A :                     Resize_Ending:				; XREF: Resize_Index
    8570/    713A : 4E75                		rts	
    8571/    713C :                     ; ===========================================================================
    8572/    713C :                     ; ---------------------------------------------------------------------------
    8573/    713C :                     ; Object 11 - GHZ bridge
    8574/    713C :                     ; ---------------------------------------------------------------------------
    8575/    713C :                     
    8576/    713C :                     Obj11:					; XREF: Obj_Index
    8577/    713C : 7000                		moveq	#0,d0
    8578/    713E : 1028 0024           		move.b	$24(a0),d0
    8579/    7142 : 323B 0006           		move.w	Obj11_Index(pc,d0.w),d1
    8580/    7146 : 4EFB 1002           		jmp	Obj11_Index(pc,d1.w)
    8581/    714A :                     ; ===========================================================================
    8582/    714A : 000C 00CA           Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
    8583/    714E : 024E 05EE           		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
    8584/    7152 : 05EE 05F4           		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
    8585/    7156 :                     ; ===========================================================================
    8586/    7156 :                     
    8587/    7156 :                     Obj11_Main:				; XREF: Obj11_Index
    8588/    7156 : 5428 0024           		addq.b	#2,$24(a0)
    8589/    715A : 217C 0000 7744      		move.l	#Map_obj11,4(a0)
             7160 : 0004             
    8590/    7162 : 317C 438E 0002      		move.w	#$438E,2(a0)
    8591/    7168 : 117C 0004 0001      		move.b	#4,1(a0)
    8592/    716E : 117C 0003 0018      		move.b	#3,$18(a0)
    8593/    7174 : 117C 0080 0019      		move.b	#$80,$19(a0)
    8594/    717A : 3428 000C           		move.w	$C(a0),d2
    8595/    717E : 3628 0008           		move.w	8(a0),d3
    8596/    7182 : 1810                		move.b	0(a0),d4	; copy object number ($11) to d4
    8597/    7184 : 45E8 0028           		lea	$28(a0),a2	; copy bridge subtype to a2
    8598/    7188 : 7200                		moveq	#0,d1
    8599/    718A : 1212                		move.b	(a2),d1		; copy a2 to d1
    8600/    718C : 14FC 0000           		move.b	#0,(a2)+
    8601/    7190 : 3001                		move.w	d1,d0
    8602/    7192 : E248                		lsr.w	#1,d0
    8603/    7194 : E948                		lsl.w	#4,d0
    8604/    7196 : 9640                		sub.w	d0,d3
    8605/    7198 : 5501                		subq.b	#2,d1
    8606/    719A : 6578                		bcs.s	Obj11_Action
    8607/    719C :                     
    8608/    719C :                     Obj11_MakeBdg:
    8609/    719C : 6100 66BA           		bsr.w	SingleObjLoad
    8610/    71A0 : 6672                		bne.s	Obj11_Action
    8611/    71A2 : 5228 0028           		addq.b	#1,$28(a0)
    8612/    71A6 : B668 0008           		cmp.w	8(a0),d3
    8613/    71AA : 661E                		bne.s	loc_73B8
    8614/    71AC : 0643 0010           		addi.w	#$10,d3
    8615/    71B0 : 3142 000C           		move.w	d2,$C(a0)
    8616/    71B4 : 3142 003C           		move.w	d2,$3C(a0)
    8617/    71B8 : 3A08                		move.w	a0,d5
    8618/    71BA : 0445 D000           		subi.w	#-$3000,d5
    8619/    71BE : EC4D                		lsr.w	#6,d5
    8620/    71C0 : 0245 007F           		andi.w	#$7F,d5
    8621/    71C4 : 14C5                		move.b	d5,(a2)+
    8622/    71C6 : 5228 0028           		addq.b	#1,$28(a0)
    8623/    71CA :                     
    8624/    71CA :                     loc_73B8:				; XREF: ROM:00007398j
    8625/    71CA : 3A09                		move.w	a1,d5
    8626/    71CC : 0445 D000           		subi.w	#-$3000,d5
    8627/    71D0 : EC4D                		lsr.w	#6,d5
    8628/    71D2 : 0245 007F           		andi.w	#$7F,d5
    8629/    71D6 : 14C5                		move.b	d5,(a2)+
    8630/    71D8 : 137C 000A 0024      		move.b	#$A,$24(a1)
    8631/    71DE : 1284                		move.b	d4,0(a1)	; load bridge object (d4 = $11)
    8632/    71E0 : 3342 000C           		move.w	d2,$C(a1)
    8633/    71E4 : 3342 003C           		move.w	d2,$3C(a1)
    8634/    71E8 : 3343 0008           		move.w	d3,8(a1)
    8635/    71EC : 237C 0000 7744      		move.l	#Map_obj11,4(a1)
             71F2 : 0004             
    8636/    71F4 : 337C 438E 0002      		move.w	#$438E,2(a1)
    8637/    71FA : 137C 0004 0001      		move.b	#4,1(a1)
    8638/    7200 : 137C 0003 0018      		move.b	#3,$18(a1)
    8639/    7206 : 137C 0008 0019      		move.b	#8,$19(a1)
    8640/    720C : 0643 0010           		addi.w	#$10,d3
    8641/    7210 : 51C9 FF8A           		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
    8642/    7214 :                     
    8643/    7214 :                     Obj11_Action:				; XREF: Obj11_Index
    8644/    7214 : 6116                		bsr.s	Obj11_Solid
    8645/    7216 : 4A28 003E           		tst.b	$3E(a0)
    8646/    721A : 6708                		beq.s	Obj11_Display
    8647/    721C : 5928 003E           		subq.b	#4,$3E(a0)
    8648/    7220 : 6100 020E           		bsr.w	Obj11_Bend
    8649/    7224 :                     
    8650/    7224 :                     Obj11_Display:
    8651/    7224 : 6100 61AC           		bsr.w	DisplaySprite
    8652/    7228 : 6000 04C2           		bra.w	Obj11_ChkDel
    8653/    722C :                     
    8654/    722C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    8655/    722C :                     
    8656/    722C :                     
    8657/    722C :                     Obj11_Solid:				; XREF: Obj11_Action
    8658/    722C : 7200                		moveq	#0,d1
    8659/    722E : 1228 0028           		move.b	$28(a0),d1
    8660/    7232 : E749                		lsl.w	#3,d1
    8661/    7234 : 3401                		move.w	d1,d2
    8662/    7236 : 5041                		addq.w	#8,d1
    8663/    7238 : D442                		add.w	d2,d2
    8664/    723A : 43F8 D000           		lea	($FFFFD000).w,a1
    8665/    723E : 4A69 0012           		tst.w	$12(a1)
    8666/    7242 : 6B00 00EA           		bmi.w	locret_751E
    8667/    7246 : 3029 0008           		move.w	8(a1),d0
    8668/    724A : 9068 0008           		sub.w	8(a0),d0
    8669/    724E : D041                		add.w	d1,d0
    8670/    7250 : 6B00 00DC           		bmi.w	locret_751E
    8671/    7254 : B042                		cmp.w	d2,d0
    8672/    7256 : 6400 00D6           		bcc.w	locret_751E
    8673/    725A : 6022                		bra.s	Platform2
    8674/    725C :                     ; End of function Obj11_Solid
    8675/    725C :                     
    8676/    725C :                     ; ---------------------------------------------------------------------------
    8677/    725C :                     ; Platform subroutine
    8678/    725C :                     ; ---------------------------------------------------------------------------
    8679/    725C :                     
    8680/    725C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    8681/    725C :                     
    8682/    725C :                     
    8683/    725C :                     PlatformObject:
    8684/    725C : 43F8 D000           		lea	($FFFFD000).w,a1
    8685/    7260 : 4A69 0012           		tst.w	$12(a1)
    8686/    7264 : 6B00 00C8           		bmi.w	locret_751E
    8687/    7268 : 3029 0008           		move.w	8(a1),d0
    8688/    726C : 9068 0008           		sub.w	8(a0),d0
    8689/    7270 : D041                		add.w	d1,d0
    8690/    7272 : 6B00 00BA           		bmi.w	locret_751E
    8691/    7276 : D241                		add.w	d1,d1
    8692/    7278 : B041                		cmp.w	d1,d0
    8693/    727A : 6400 00B2           		bcc.w	locret_751E
    8694/    727E :                     
    8695/    727E :                     Platform2:
    8696/    727E : 3028 000C           		move.w	$C(a0),d0
    8697/    7282 : 5140                		subq.w	#8,d0
    8698/    7284 :                     
    8699/    7284 :                     Platform3:
    8700/    7284 : 3429 000C           		move.w	$C(a1),d2
    8701/    7288 : 1229 0016           		move.b	$16(a1),d1
    8702/    728C : 4881                		ext.w	d1
    8703/    728E : D242                		add.w	d2,d1
    8704/    7290 : 5841                		addq.w	#4,d1
    8705/    7292 : 9041                		sub.w	d1,d0
    8706/    7294 : 6200 0098           		bhi.w	locret_751E
    8707/    7298 : 0C40 FFF0           		cmpi.w	#-$10,d0
    8708/    729C : 6500 0090           		bcs.w	locret_751E
    8709/    72A0 : 4A38 F7C8           		tst.b	($FFFFF7C8).w
    8710/    72A4 : 6B00 0088           		bmi.w	locret_751E
    8711/    72A8 : 0C29 0006 0024      		cmpi.b	#6,$24(a1)
    8712/    72AE : 6400 007E           		bcc.w	locret_751E
    8713/    72B2 : D440                		add.w	d0,d2
    8714/    72B4 : 5642                		addq.w	#3,d2
    8715/    72B6 : 3342 000C           		move.w	d2,$C(a1)
    8716/    72BA : 5428 0024           		addq.b	#2,$24(a0)
    8717/    72BE :                     
    8718/    72BE :                     loc_74AE:
    8719/    72BE : 0829 0003 0022      		btst	#3,$22(a1)
    8720/    72C4 : 6726                		beq.s	loc_74DC
    8721/    72C6 : 7000                		moveq	#0,d0
    8722/    72C8 : 1029 003D           		move.b	$3D(a1),d0
    8723/    72CC : ED48                		lsl.w	#6,d0
    8724/    72CE : 0680 00FF D000      		addi.l	#$FFD000,d0
    8725/    72D4 : 2440                		movea.l	d0,a2
    8726/    72D6 : 08AA 0003 0022      		bclr	#3,$22(a2)
    8727/    72DC : 422A 0025           		clr.b	$25(a2)
    8728/    72E0 : 0C2A 0004 0024      		cmpi.b	#4,$24(a2)
    8729/    72E6 : 6604                		bne.s	loc_74DC
    8730/    72E8 : 552A 0024           		subq.b	#2,$24(a2)
    8731/    72EC :                     
    8732/    72EC :                     loc_74DC:
    8733/    72EC : 3008                		move.w	a0,d0
    8734/    72EE : 0440 D000           		subi.w	#-$3000,d0
    8735/    72F2 : EC48                		lsr.w	#6,d0
    8736/    72F4 : 0240 007F           		andi.w	#$7F,d0
    8737/    72F8 : 1340 003D           		move.b	d0,$3D(a1)
    8738/    72FC : 137C 0000 0026      		move.b	#0,$26(a1)
    8739/    7302 : 337C 0000 0012      		move.w	#0,$12(a1)
    8740/    7308 : 3369 0010 0014      		move.w	$10(a1),$14(a1)
    8741/    730E : 0829 0001 0022      		btst	#1,$22(a1)
    8742/    7314 : 670C                		beq.s	loc_7512
    8743/    7316 : 2F08                		move.l	a0,-(sp)
    8744/    7318 : 2049                		movea.l	a1,a0
    8745/    731A : 4EB9 0001 3542      		jsr	Sonic_ResetOnFloor
    8746/    7320 : 205F                		movea.l	(sp)+,a0
    8747/    7322 :                     
    8748/    7322 :                     loc_7512:
    8749/    7322 : 08E9 0003 0022      		bset	#3,$22(a1)
    8750/    7328 : 08E8 0003 0022      		bset	#3,$22(a0)
    8751/    732E :                     
    8752/    732E :                     locret_751E:
    8753/    732E : 4E75                		rts	
    8754/    7330 :                     ; End of function PlatformObject
    8755/    7330 :                     
    8756/    7330 :                     ; ---------------------------------------------------------------------------
    8757/    7330 :                     ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
    8758/    7330 :                     ; ---------------------------------------------------------------------------
    8759/    7330 :                     
    8760/    7330 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    8761/    7330 :                     
    8762/    7330 :                     
    8763/    7330 :                     SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
    8764/    7330 : 43F8 D000           		lea	($FFFFD000).w,a1
    8765/    7334 : 4A69 0012           		tst.w	$12(a1)
    8766/    7338 : 6B00 FFF4           		bmi.w	locret_751E
    8767/    733C : 3029 0008           		move.w	8(a1),d0
    8768/    7340 : 9068 0008           		sub.w	8(a0),d0
    8769/    7344 : D041                		add.w	d1,d0
    8770/    7346 : 6BE6                		bmi.s	locret_751E
    8771/    7348 : D241                		add.w	d1,d1
    8772/    734A : B041                		cmp.w	d1,d0
    8773/    734C : 64E0                		bcc.s	locret_751E
    8774/    734E : 0828 0000 0001      		btst	#0,1(a0)
    8775/    7354 : 6704                		beq.s	loc_754A
    8776/    7356 : 4640                		not.w	d0
    8777/    7358 : D041                		add.w	d1,d0
    8778/    735A :                     
    8779/    735A :                     loc_754A:
    8780/    735A : E248                		lsr.w	#1,d0
    8781/    735C : 7600                		moveq	#0,d3
    8782/    735E : 1632 0000           		move.b	(a2,d0.w),d3
    8783/    7362 : 3028 000C           		move.w	$C(a0),d0
    8784/    7366 : 9043                		sub.w	d3,d0
    8785/    7368 : 6000 FF1A           		bra.w	Platform3
    8786/    736C :                     ; End of function SlopeObject
    8787/    736C :                     
    8788/    736C :                     
    8789/    736C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    8790/    736C :                     
    8791/    736C :                     
    8792/    736C :                     Obj15_Solid:				; XREF: Obj15_SetSolid
    8793/    736C : 43F8 D000           		lea	($FFFFD000).w,a1
    8794/    7370 : 4A69 0012           		tst.w	$12(a1)
    8795/    7374 : 6B00 FFB8           		bmi.w	locret_751E
    8796/    7378 : 3029 0008           		move.w	8(a1),d0
    8797/    737C : 9068 0008           		sub.w	8(a0),d0
    8798/    7380 : D041                		add.w	d1,d0
    8799/    7382 : 6B00 FFAA           		bmi.w	locret_751E
    8800/    7386 : D241                		add.w	d1,d1
    8801/    7388 : B041                		cmp.w	d1,d0
    8802/    738A : 6400 FFA2           		bcc.w	locret_751E
    8803/    738E : 3028 000C           		move.w	$C(a0),d0
    8804/    7392 : 9043                		sub.w	d3,d0
    8805/    7394 : 6000 FEEE           		bra.w	Platform3
    8806/    7398 :                     ; End of function Obj15_Solid
    8807/    7398 :                     
    8808/    7398 :                     ; ===========================================================================
    8809/    7398 :                     
    8810/    7398 :                     Obj11_Action2:				; XREF: Obj11_Index
    8811/    7398 : 6108                		bsr.s	Obj11_WalkOff
    8812/    739A : 6100 6036           		bsr.w	DisplaySprite
    8813/    739E : 6000 034C           		bra.w	Obj11_ChkDel
    8814/    73A2 :                     
    8815/    73A2 :                     ; ---------------------------------------------------------------------------
    8816/    73A2 :                     ; Subroutine allowing Sonic to walk off a bridge
    8817/    73A2 :                     ; ---------------------------------------------------------------------------
    8818/    73A2 :                     
    8819/    73A2 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    8820/    73A2 :                     
    8821/    73A2 :                     
    8822/    73A2 :                     Obj11_WalkOff:				; XREF: Obj11_Action2
    8823/    73A2 : 7200                		moveq	#0,d1
    8824/    73A4 : 1228 0028           		move.b	$28(a0),d1
    8825/    73A8 : E749                		lsl.w	#3,d1
    8826/    73AA : 3401                		move.w	d1,d2
    8827/    73AC : 5041                		addq.w	#8,d1
    8828/    73AE : 6122                		bsr.s	ExitPlatform2
    8829/    73B0 : 641C                		bcc.s	locret_75BE
    8830/    73B2 : E848                		lsr.w	#4,d0
    8831/    73B4 : 1140 003F           		move.b	d0,$3F(a0)
    8832/    73B8 : 1028 003E           		move.b	$3E(a0),d0
    8833/    73BC : 0C00 0040           		cmpi.b	#$40,d0
    8834/    73C0 : 6704                		beq.s	loc_75B6
    8835/    73C2 : 5828 003E           		addq.b	#4,$3E(a0)
    8836/    73C6 :                     
    8837/    73C6 :                     loc_75B6:
    8838/    73C6 : 6100 0068           		bsr.w	Obj11_Bend
    8839/    73CA : 6100 0038           		bsr.w	Obj11_MoveSonic
    8840/    73CE :                     
    8841/    73CE :                     locret_75BE:
    8842/    73CE : 4E75                		rts	
    8843/    73D0 :                     ; End of function Obj11_WalkOff
    8844/    73D0 :                     
    8845/    73D0 :                     ; ---------------------------------------------------------------------------
    8846/    73D0 :                     ; Subroutine allowing Sonic to walk or jump off	a platform
    8847/    73D0 :                     ; ---------------------------------------------------------------------------
    8848/    73D0 :                     
    8849/    73D0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    8850/    73D0 :                     
    8851/    73D0 :                     
    8852/    73D0 :                     ExitPlatform:
    8853/    73D0 : 3401                		move.w	d1,d2
    8854/    73D2 :                     
    8855/    73D2 :                     ExitPlatform2:
    8856/    73D2 : D442                		add.w	d2,d2
    8857/    73D4 : 43F8 D000           		lea	($FFFFD000).w,a1
    8858/    73D8 : 0829 0001 0022      		btst	#1,$22(a1)
    8859/    73DE : 6610                		bne.s	loc_75E0
    8860/    73E0 : 3029 0008           		move.w	8(a1),d0
    8861/    73E4 : 9068 0008           		sub.w	8(a0),d0
    8862/    73E8 : D041                		add.w	d1,d0
    8863/    73EA : 6B04                		bmi.s	loc_75E0
    8864/    73EC : B042                		cmp.w	d2,d0
    8865/    73EE : 6512                		bcs.s	locret_75F2
    8866/    73F0 :                     
    8867/    73F0 :                     loc_75E0:
    8868/    73F0 : 08A9 0003 0022      		bclr	#3,$22(a1)
    8869/    73F6 : 117C 0002 0024      		move.b	#2,$24(a0)
    8870/    73FC : 08A8 0003 0022      		bclr	#3,$22(a0)
    8871/    7402 :                     
    8872/    7402 :                     locret_75F2:
    8873/    7402 : 4E75                		rts	
    8874/    7404 :                     ; End of function ExitPlatform
    8875/    7404 :                     
    8876/    7404 :                     
    8877/    7404 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    8878/    7404 :                     
    8879/    7404 :                     
    8880/    7404 :                     Obj11_MoveSonic:			; XREF: Obj11_WalkOff
    8881/    7404 : 7000                		moveq	#0,d0
    8882/    7406 : 1028 003F           		move.b	$3F(a0),d0
    8883/    740A : 1030 0029           		move.b	$29(a0,d0.w),d0
    8884/    740E : ED48                		lsl.w	#6,d0
    8885/    7410 : 0680 00FF D000      		addi.l	#$FFD000,d0
    8886/    7416 : 2440                		movea.l	d0,a2
    8887/    7418 : 43F8 D000           		lea	($FFFFD000).w,a1
    8888/    741C : 302A 000C           		move.w	$C(a2),d0
    8889/    7420 : 5140                		subq.w	#8,d0
    8890/    7422 : 7200                		moveq	#0,d1
    8891/    7424 : 1229 0016           		move.b	$16(a1),d1
    8892/    7428 : 9041                		sub.w	d1,d0
    8893/    742A : 3340 000C           		move.w	d0,$C(a1)	; change Sonic's position on y-axis
    8894/    742E : 4E75                		rts	
    8895/    7430 :                     ; End of function Obj11_MoveSonic
    8896/    7430 :                     
    8897/    7430 :                     
    8898/    7430 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    8899/    7430 :                     
    8900/    7430 :                     
    8901/    7430 :                     Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
    8902/    7430 : 1028 003E           		move.b	$3E(a0),d0
    8903/    7434 : 6100 B38A           		bsr.w	CalcSine
    8904/    7438 : 3800                		move.w	d0,d4
    8905/    743A : 49F9 0000 75EC      		lea	(Obj11_BendData2).l,a4
    8906/    7440 : 7000                		moveq	#0,d0
    8907/    7442 : 1028 0028           		move.b	$28(a0),d0
    8908/    7446 : E948                		lsl.w	#4,d0
    8909/    7448 : 7600                		moveq	#0,d3
    8910/    744A : 1628 003F           		move.b	$3F(a0),d3
    8911/    744E : 3403                		move.w	d3,d2
    8912/    7450 : D640                		add.w	d0,d3
    8913/    7452 : 7A00                		moveq	#0,d5
    8914/    7454 : 4BF9 0000 74DC      		lea	(Obj11_BendData).l,a5
    8915/    745A : 1A35 3000           		move.b	(a5,d3.w),d5
    8916/    745E : 0243 000F           		andi.w	#$F,d3
    8917/    7462 : E94B                		lsl.w	#4,d3
    8918/    7464 : 47F4 3000           		lea	(a4,d3.w),a3
    8919/    7468 : 45E8 0029           		lea	$29(a0),a2
    8920/    746C :                     
    8921/    746C :                     loc_765C:
    8922/    746C : 7000                		moveq	#0,d0
    8923/    746E : 101A                		move.b	(a2)+,d0
    8924/    7470 : ED48                		lsl.w	#6,d0
    8925/    7472 : 0680 00FF D000      		addi.l	#$FFD000,d0
    8926/    7478 : 2240                		movea.l	d0,a1
    8927/    747A : 7000                		moveq	#0,d0
    8928/    747C : 101B                		move.b	(a3)+,d0
    8929/    747E : 5240                		addq.w	#1,d0
    8930/    7480 : C0C5                		mulu.w	d5,d0
    8931/    7482 : C0C4                		mulu.w	d4,d0
    8932/    7484 : 4840                		swap	d0
    8933/    7486 : D069 003C           		add.w	$3C(a1),d0
    8934/    748A : 3340 000C           		move.w	d0,$C(a1)
    8935/    748E : 51CA FFDC           		dbf	d2,loc_765C
    8936/    7492 : 7000                		moveq	#0,d0
    8937/    7494 : 1028 0028           		move.b	$28(a0),d0
    8938/    7498 : 7600                		moveq	#0,d3
    8939/    749A : 1628 003F           		move.b	$3F(a0),d3
    8940/    749E : 5203                		addq.b	#1,d3
    8941/    74A0 : 9600                		sub.b	d0,d3
    8942/    74A2 : 4403                		neg.b	d3
    8943/    74A4 : 6B34                		bmi.s	locret_76CA
    8944/    74A6 : 3403                		move.w	d3,d2
    8945/    74A8 : E94B                		lsl.w	#4,d3
    8946/    74AA : 47F4 3000           		lea	(a4,d3.w),a3
    8947/    74AE : D6C2                		adda.w	d2,a3
    8948/    74B0 : 5342                		subq.w	#1,d2
    8949/    74B2 : 6526                		bcs.s	locret_76CA
    8950/    74B4 :                     
    8951/    74B4 :                     loc_76A4:
    8952/    74B4 : 7000                		moveq	#0,d0
    8953/    74B6 : 101A                		move.b	(a2)+,d0
    8954/    74B8 : ED48                		lsl.w	#6,d0
    8955/    74BA : 0680 00FF D000      		addi.l	#$FFD000,d0
    8956/    74C0 : 2240                		movea.l	d0,a1
    8957/    74C2 : 7000                		moveq	#0,d0
    8958/    74C4 : 1023                		move.b	-(a3),d0
    8959/    74C6 : 5240                		addq.w	#1,d0
    8960/    74C8 : C0C5                		mulu.w	d5,d0
    8961/    74CA : C0C4                		mulu.w	d4,d0
    8962/    74CC : 4840                		swap	d0
    8963/    74CE : D069 003C           		add.w	$3C(a1),d0
    8964/    74D2 : 3340 000C           		move.w	d0,$C(a1)
    8965/    74D6 : 51CA FFDC           		dbf	d2,loc_76A4
    8966/    74DA :                     
    8967/    74DA :                     locret_76CA:
    8968/    74DA : 4E75                		rts	
    8969/    74DC :                     ; End of function Obj11_Bend
    8970/    74DC :                     
    8971/    74DC :                     ; ===========================================================================
    8972/    74DC :                     ; ---------------------------------------------------------------------------
    8973/    74DC :                     ; GHZ bridge-bending data
    8974/    74DC :                     ; (Defines how the bridge bends	when Sonic walks across	it)
    8975/    74DC :                     ; ---------------------------------------------------------------------------
    8976/    74DC :                     Obj11_BendData:	binclude	"_misc/ghzbend1.bin"
    8977/    75EC : (MACRO)              		even
    8978/    75EC :                     Obj11_BendData2:binclude	"_misc/ghzbend2.bin"
    8979/    76EC : (MACRO)              		even
    8980/    76EC :                     
    8981/    76EC :                     ; ===========================================================================
    8982/    76EC :                     
    8983/    76EC :                     Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
    8984/    76EC : 3028 0008           		move.w	8(a0),d0
    8985/    76F0 : 0240 FF80           		andi.w	#$FF80,d0
    8986/    76F4 : 3238 F700           		move.w	($FFFFF700).w,d1
    8987/    76F8 : 0441 0080           		subi.w	#$80,d1
    8988/    76FC : 0241 FF80           		andi.w	#$FF80,d1
    8989/    7700 : 9041                		sub.w	d1,d0
    8990/    7702 : 0C40 0280           		cmpi.w	#$280,d0
    8991/    7706 : 6200 0004           		bhi.w	Obj11_DelAll
    8992/    770A : 4E75                		rts	
    8993/    770C :                     ; ===========================================================================
    8994/    770C :                     
    8995/    770C :                     Obj11_DelAll:				; XREF: Obj11_ChkDel
    8996/    770C : 7400                		moveq	#0,d2
    8997/    770E : 45E8 0028           		lea	$28(a0),a2	; load bridge length
    8998/    7712 : 141A                		move.b	(a2)+,d2	; move bridge length to	d2
    8999/    7714 : 5302                		subq.b	#1,d2		; subtract 1
    9000/    7716 : 651A                		bcs.s	Obj11_Delete
    9001/    7718 :                     
    9002/    7718 :                     Obj11_DelLoop:
    9003/    7718 : 7000                		moveq	#0,d0
    9004/    771A : 101A                		move.b	(a2)+,d0
    9005/    771C : ED48                		lsl.w	#6,d0
    9006/    771E : 0680 00FF D000      		addi.l	#$FFD000,d0
    9007/    7724 : 2240                		movea.l	d0,a1
    9008/    7726 : B048                		cmp.w	a0,d0
    9009/    7728 : 6704                		beq.s	loc_791E
    9010/    772A : 6100 5CE4           		bsr.w	DeleteObject2
    9011/    772E :                     
    9012/    772E :                     loc_791E:
    9013/    772E : 51CA FFE8           		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
    9014/    7732 :                     
    9015/    7732 :                     Obj11_Delete:
    9016/    7732 : 6100 5CDA           		bsr.w	DeleteObject
    9017/    7736 : 4E75                		rts	
    9018/    7738 :                     ; ===========================================================================
    9019/    7738 :                     
    9020/    7738 :                     Obj11_Delete2:				; XREF: Obj11_Index
    9021/    7738 : 6100 5CD4           		bsr.w	DeleteObject
    9022/    773C : 4E75                		rts	
    9023/    773E :                     ; ===========================================================================
    9024/    773E :                     
    9025/    773E :                     Obj11_Display2:				; XREF: Obj11_Index
    9026/    773E : 6100 5C92           		bsr.w	DisplaySprite
    9027/    7742 : 4E75                		rts	
    9028/    7744 :                     ; ===========================================================================
    9029/    7744 :                     ; ---------------------------------------------------------------------------
    9030/    7744 :                     ; Sprite mappings - GHZ	bridge
    9031/    7744 :                     ; ---------------------------------------------------------------------------
    9032/    7744 :                     Map_obj11:
    9033/    7744 :                     	include "_mappings/obj11.asm"
(1)    1/    7744 :                     ; ---------------------------------------------------------------------------
(1)    2/    7744 :                     ; Sprite mappings - GHZ	bridge
(1)    3/    7744 :                     ; ---------------------------------------------------------------------------
(1)    4/    7744 : 0006 000C           		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
(1)    5/    7748 : 0017                		dc.w byte_794B-Map_obj11
(1)    6/    774A : 01                  byte_793A:	dc.b 1
(1)    7/    774B : F805 0000 F8        		dc.b $F8, 5, 0,	0, $F8
(1)    8/    7750 : 02                  byte_7940:	dc.b 2
(1)    9/    7751 : F804 0004 F0        		dc.b $F8, 4, 0,	4, $F0
(1)   10/    7756 : 000C 0006 F0        		dc.b 0,	$C, 0, 6, $F0
(1)   11/    775B : 01                  byte_794B:	dc.b 1
(1)   12/    775C : FC04 0008 F8        		dc.b $FC, 4, 0,	8, $F8
(1)   13/    7761 : (MACRO)              		even
(1)   13/    7761 : 00                                          dc.b 0 ;ds.b 1 
    9034/    7762 :                     
    9035/    7762 :                     ; ===========================================================================
    9036/    7762 :                     ; ---------------------------------------------------------------------------
    9037/    7762 :                     ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
    9038/    7762 :                     ;	    - spiked ball on a chain (SBZ)
    9039/    7762 :                     ; ---------------------------------------------------------------------------
    9040/    7762 :                     
    9041/    7762 :                     Obj15:					; XREF: Obj_Index
    9042/    7762 : 7000                		moveq	#0,d0
    9043/    7764 : 1028 0024           		move.b	$24(a0),d0
    9044/    7768 : 323B 0006           		move.w	Obj15_Index(pc,d0.w),d1
    9045/    776C : 4EFB 1002           		jmp	Obj15_Index(pc,d1.w)
    9046/    7770 :                     ; ===========================================================================
    9047/    7770 : 000E 0178           Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
    9048/    7774 : 0194 02DA           		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
    9049/    7778 : 02DA 02E0           		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
    9050/    777C : 0188                		dc.w Obj15_Action-Obj15_Index
    9051/    777E :                     ; ===========================================================================
    9052/    777E :                     
    9053/    777E :                     Obj15_Main:				; XREF: Obj15_Index
    9054/    777E : 5428 0024           		addq.b	#2,$24(a0)
    9055/    7782 : 217C 0000 7A54      		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
             7788 : 0004             
    9056/    778A : 317C 4380 0002      		move.w	#$4380,2(a0)
    9057/    7790 : 117C 0004 0001      		move.b	#4,1(a0)
    9058/    7796 : 117C 0003 0018      		move.b	#3,$18(a0)
    9059/    779C : 117C 0018 0019      		move.b	#$18,$19(a0)
    9060/    77A2 : 117C 0008 0016      		move.b	#8,$16(a0)
    9061/    77A8 : 3168 000C 0038      		move.w	$C(a0),$38(a0)
    9062/    77AE : 3168 0008 003A      		move.w	8(a0),$3A(a0)
    9063/    77B4 : 0C38 0003 FE10      		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
    9064/    77BA : 6620                		bne.s	Obj15_NotSLZ
    9065/    77BC : 217C 0000 7A72      		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
             77C2 : 0004             
    9066/    77C4 : 317C 43DC 0002      		move.w	#$43DC,2(a0)
    9067/    77CA : 117C 0020 0019      		move.b	#$20,$19(a0)
    9068/    77D0 : 117C 0010 0016      		move.b	#$10,$16(a0)
    9069/    77D6 : 117C 0099 0020      		move.b	#$99,$20(a0)
    9070/    77DC :                     
    9071/    77DC :                     Obj15_NotSLZ:
    9072/    77DC : 0C38 0005 FE10      		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
    9073/    77E2 : 6626                		bne.s	Obj15_SetLength
    9074/    77E4 : 217C 0001 0856      		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
             77EA : 0004             
    9075/    77EC : 317C 0391 0002      		move.w	#$391,2(a0)
    9076/    77F2 : 117C 0018 0019      		move.b	#$18,$19(a0)
    9077/    77F8 : 117C 0018 0016      		move.b	#$18,$16(a0)
    9078/    77FE : 117C 0086 0020      		move.b	#$86,$20(a0)
    9079/    7804 : 117C 000C 0024      		move.b	#$C,$24(a0)
    9080/    780A :                     
    9081/    780A :                     Obj15_SetLength:
    9082/    780A : 1810                		move.b	0(a0),d4
    9083/    780C : 7200                		moveq	#0,d1
    9084/    780E : 45E8 0028           		lea	$28(a0),a2	; move chain length to a2
    9085/    7812 : 1212                		move.b	(a2),d1		; move a2 to d1
    9086/    7814 : 3F01                		move.w	d1,-(sp)
    9087/    7816 : 0241 000F           		andi.w	#$F,d1
    9088/    781A : 14FC 0000           		move.b	#0,(a2)+
    9089/    781E : 3601                		move.w	d1,d3
    9090/    7820 : E94B                		lsl.w	#4,d3
    9091/    7822 : 5003                		addq.b	#8,d3
    9092/    7824 : 1143 003C           		move.b	d3,$3C(a0)
    9093/    7828 : 5103                		subq.b	#8,d3
    9094/    782A : 4A28 001A           		tst.b	$1A(a0)
    9095/    782E : 6704                		beq.s	Obj15_MakeChain
    9096/    7830 : 5003                		addq.b	#8,d3
    9097/    7832 : 5341                		subq.w	#1,d1
    9098/    7834 :                     
    9099/    7834 :                     Obj15_MakeChain:
    9100/    7834 : 6100 6022           		bsr.w	SingleObjLoad
    9101/    7838 : 6664                		bne.s	loc_7A92
    9102/    783A : 5228 0028           		addq.b	#1,$28(a0)
    9103/    783E : 3A09                		move.w	a1,d5
    9104/    7840 : 0445 D000           		subi.w	#-$3000,d5
    9105/    7844 : EC4D                		lsr.w	#6,d5
    9106/    7846 : 0245 007F           		andi.w	#$7F,d5
    9107/    784A : 14C5                		move.b	d5,(a2)+
    9108/    784C : 137C 000A 0024      		move.b	#$A,$24(a1)
    9109/    7852 : 1284                		move.b	d4,0(a1)	; load swinging	object
    9110/    7854 : 2368 0004 0004      		move.l	4(a0),4(a1)
    9111/    785A : 3368 0002 0002      		move.w	2(a0),2(a1)
    9112/    7860 : 08A9 0006 0002      		bclr	#6,2(a1)
    9113/    7866 : 137C 0004 0001      		move.b	#4,1(a1)
    9114/    786C : 137C 0004 0018      		move.b	#4,$18(a1)
    9115/    7872 : 137C 0008 0019      		move.b	#8,$19(a1)
    9116/    7878 : 137C 0001 001A      		move.b	#1,$1A(a1)
    9117/    787E : 1343 003C           		move.b	d3,$3C(a1)
    9118/    7882 : 0403 0010           		subi.b	#$10,d3
    9119/    7886 : 6412                		bcc.s	loc_7A8E
    9120/    7888 : 137C 0002 001A      		move.b	#2,$1A(a1)
    9121/    788E : 137C 0003 0018      		move.b	#3,$18(a1)
    9122/    7894 : 08E9 0006 0002      		bset	#6,2(a1)
    9123/    789A :                     
    9124/    789A :                     loc_7A8E:
    9125/    789A : 51C9 FF98           		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
    9126/    789E :                     
    9127/    789E :                     loc_7A92:
    9128/    789E : 3A08                		move.w	a0,d5
    9129/    78A0 : 0445 D000           		subi.w	#-$3000,d5
    9130/    78A4 : EC4D                		lsr.w	#6,d5
    9131/    78A6 : 0245 007F           		andi.w	#$7F,d5
    9132/    78AA : 14C5                		move.b	d5,(a2)+
    9133/    78AC : 317C 4080 0026      		move.w	#$4080,$26(a0)
    9134/    78B2 : 317C FE00 003E      		move.w	#-$200,$3E(a0)
    9135/    78B8 : 321F                		move.w	(sp)+,d1
    9136/    78BA : 0801 0004           		btst	#4,d1		; is object type $8X ?
    9137/    78BE : 6720                		beq.s	loc_7AD4	; if not, branch
    9138/    78C0 : 217C 0000 7FB2      		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
             78C6 : 0004             
    9139/    78C8 : 317C 43AA 0002      		move.w	#$43AA,2(a0)
    9140/    78CE : 117C 0001 001A      		move.b	#1,$1A(a0)
    9141/    78D4 : 117C 0002 0018      		move.b	#2,$18(a0)
    9142/    78DA : 117C 0081 0020      		move.b	#$81,$20(a0)	; make object hurt when	touched
    9143/    78E0 :                     
    9144/    78E0 :                     loc_7AD4:
    9145/    78E0 : 0C38 0005 FE10      		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
    9146/    78E6 : 6710                		beq.s	Obj15_Action	; if yes, branch
    9147/    78E8 :                     
    9148/    78E8 :                     Obj15_SetSolid:				; XREF: Obj15_Index
    9149/    78E8 : 7200                		moveq	#0,d1
    9150/    78EA : 1228 0019           		move.b	$19(a0),d1
    9151/    78EE : 7600                		moveq	#0,d3
    9152/    78F0 : 1628 0016           		move.b	$16(a0),d3
    9153/    78F4 : 6100 FA76           		bsr.w	Obj15_Solid
    9154/    78F8 :                     
    9155/    78F8 :                     Obj15_Action:				; XREF: Obj15_Index
    9156/    78F8 : 6100 0076           		bsr.w	Obj15_Move
    9157/    78FC : 6100 5AD4           		bsr.w	DisplaySprite
    9158/    7900 : 6000 0108           		bra.w	Obj15_ChkDel
    9159/    7904 :                     ; ===========================================================================
    9160/    7904 :                     
    9161/    7904 :                     Obj15_Action2:				; XREF: Obj15_Index
    9162/    7904 : 7200                		moveq	#0,d1
    9163/    7906 : 1228 0019           		move.b	$19(a0),d1
    9164/    790A : 6100 FAC4           		bsr.w	ExitPlatform
    9165/    790E : 3F28 0008           		move.w	8(a0),-(sp)
    9166/    7912 : 6100 005C           		bsr.w	Obj15_Move
    9167/    7916 : 341F                		move.w	(sp)+,d2
    9168/    7918 : 7600                		moveq	#0,d3
    9169/    791A : 1628 0016           		move.b	$16(a0),d3
    9170/    791E : 5203                		addq.b	#1,d3
    9171/    7920 : 6100 000C           		bsr.w	MvSonicOnPtfm
    9172/    7924 : 6100 5AAC           		bsr.w	DisplaySprite
    9173/    7928 : 6000 00E0           		bra.w	Obj15_ChkDel
    9174/    792C :                     
    9175/    792C : 4E75                		rts
    9176/    792E :                     
    9177/    792E :                     ; ---------------------------------------------------------------------------
    9178/    792E :                     ; Subroutine to	change Sonic's position with a platform
    9179/    792E :                     ; ---------------------------------------------------------------------------
    9180/    792E :                     
    9181/    792E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    9182/    792E :                     
    9183/    792E :                     
    9184/    792E :                     MvSonicOnPtfm:
    9185/    792E : 43F8 D000           		lea	($FFFFD000).w,a1
    9186/    7932 : 3028 000C           		move.w	$C(a0),d0
    9187/    7936 : 9043                		sub.w	d3,d0
    9188/    7938 : 600C                		bra.s	MvSonic2
    9189/    793A :                     ; End of function MvSonicOnPtfm
    9190/    793A :                     
    9191/    793A :                     ; ---------------------------------------------------------------------------
    9192/    793A :                     ; Subroutine to	change Sonic's position with a platform
    9193/    793A :                     ; ---------------------------------------------------------------------------
    9194/    793A :                     
    9195/    793A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    9196/    793A :                     
    9197/    793A :                     
    9198/    793A :                     MvSonicOnPtfm2:
    9199/    793A : 43F8 D000           		lea	($FFFFD000).w,a1
    9200/    793E : 3028 000C           		move.w	$C(a0),d0
    9201/    7942 : 0440 0009           		subi.w	#9,d0
    9202/    7946 :                     
    9203/    7946 :                     MvSonic2:
    9204/    7946 : 4A38 F7C8           		tst.b	($FFFFF7C8).w
    9205/    794A : 6B22                		bmi.s	locret_7B62
    9206/    794C : 0C38 0006 D024      		cmpi.b	#6,($FFFFD024).w
    9207/    7952 : 641A                		bcc.s	locret_7B62
    9208/    7954 : 4A78 FE08           		tst.w	($FFFFFE08).w
    9209/    7958 : 6614                		bne.s	locret_7B62
    9210/    795A : 7200                		moveq	#0,d1
    9211/    795C : 1229 0016           		move.b	$16(a1),d1
    9212/    7960 : 9041                		sub.w	d1,d0
    9213/    7962 : 3340 000C           		move.w	d0,$C(a1)
    9214/    7966 : 9468 0008           		sub.w	8(a0),d2
    9215/    796A : 9569 0008           		sub.w	d2,8(a1)
    9216/    796E :                     
    9217/    796E :                     locret_7B62:
    9218/    796E : 4E75                		rts	
    9219/    7970 :                     ; End of function MvSonicOnPtfm2
    9220/    7970 :                     
    9221/    7970 :                     
    9222/    7970 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    9223/    7970 :                     
    9224/    7970 :                     
    9225/    7970 :                     Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
    9226/    7970 : 1038 FE78           		move.b	($FFFFFE78).w,d0
    9227/    7974 : 323C 0080           		move.w	#$80,d1
    9228/    7978 : 0828 0000 0022      		btst	#0,$22(a0)
    9229/    797E : 6704                		beq.s	loc_7B78
    9230/    7980 : 4440                		neg.w	d0
    9231/    7982 : D041                		add.w	d1,d0
    9232/    7984 :                     
    9233/    7984 :                     loc_7B78:
    9234/    7984 : 6040                		bra.s	Obj15_Move2
    9235/    7986 :                     ; End of function Obj15_Move
    9236/    7986 :                     
    9237/    7986 :                     
    9238/    7986 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    9239/    7986 :                     
    9240/    7986 :                     
    9241/    7986 :                     Obj48_Move:				; XREF: Obj48_Display2
    9242/    7986 : 4A28 003D           		tst.b	$3D(a0)
    9243/    798A : 661C                		bne.s	loc_7B9C
    9244/    798C : 3028 003E           		move.w	$3E(a0),d0
    9245/    7990 : 5040                		addq.w	#8,d0
    9246/    7992 : 3140 003E           		move.w	d0,$3E(a0)
    9247/    7996 : D168 0026           		add.w	d0,$26(a0)
    9248/    799A : 0C40 0200           		cmpi.w	#$200,d0
    9249/    799E : 6622                		bne.s	loc_7BB6
    9250/    79A0 : 117C 0001 003D      		move.b	#1,$3D(a0)
    9251/    79A6 : 601A                		bra.s	loc_7BB6
    9252/    79A8 :                     ; ===========================================================================
    9253/    79A8 :                     
    9254/    79A8 :                     loc_7B9C:
    9255/    79A8 : 3028 003E           		move.w	$3E(a0),d0
    9256/    79AC : 5140                		subq.w	#8,d0
    9257/    79AE : 3140 003E           		move.w	d0,$3E(a0)
    9258/    79B2 : D168 0026           		add.w	d0,$26(a0)
    9259/    79B6 : 0C40 FE00           		cmpi.w	#-$200,d0
    9260/    79BA : 6606                		bne.s	loc_7BB6
    9261/    79BC : 117C 0000 003D      		move.b	#0,$3D(a0)
    9262/    79C2 :                     
    9263/    79C2 :                     loc_7BB6:
    9264/    79C2 : 1028 0026           		move.b	$26(a0),d0
    9265/    79C6 :                     ; End of function Obj48_Move
    9266/    79C6 :                     
    9267/    79C6 :                     
    9268/    79C6 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    9269/    79C6 :                     
    9270/    79C6 :                     
    9271/    79C6 :                     Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
    9272/    79C6 : 6100 ADF8           		bsr.w	CalcSine
    9273/    79CA : 3428 0038           		move.w	$38(a0),d2
    9274/    79CE : 3628 003A           		move.w	$3A(a0),d3
    9275/    79D2 : 45E8 0028           		lea	$28(a0),a2
    9276/    79D6 : 7C00                		moveq	#0,d6
    9277/    79D8 : 1C1A                		move.b	(a2)+,d6
    9278/    79DA :                     
    9279/    79DA :                     loc_7BCE:
    9280/    79DA : 7800                		moveq	#0,d4
    9281/    79DC : 181A                		move.b	(a2)+,d4
    9282/    79DE : ED4C                		lsl.w	#6,d4
    9283/    79E0 : 0684 00FF D000      		addi.l	#$FFD000,d4
    9284/    79E6 : 2244                		movea.l	d4,a1
    9285/    79E8 : 7800                		moveq	#0,d4
    9286/    79EA : 1829 003C           		move.b	$3C(a1),d4
    9287/    79EE : 2A04                		move.l	d4,d5
    9288/    79F0 : C9C0                		muls.w	d0,d4
    9289/    79F2 : E084                		asr.l	#8,d4
    9290/    79F4 : CBC1                		muls.w	d1,d5
    9291/    79F6 : E085                		asr.l	#8,d5
    9292/    79F8 : D842                		add.w	d2,d4
    9293/    79FA : DA43                		add.w	d3,d5
    9294/    79FC : 3344 000C           		move.w	d4,$C(a1)
    9295/    7A00 : 3345 0008           		move.w	d5,8(a1)
    9296/    7A04 : 51CE FFD4           		dbf	d6,loc_7BCE
    9297/    7A08 : 4E75                		rts	
    9298/    7A0A :                     ; End of function Obj15_Move2
    9299/    7A0A :                     
    9300/    7A0A :                     ; ===========================================================================
    9301/    7A0A :                     
    9302/    7A0A :                     Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
    9303/    7A0A : 3028 003A           		move.w	$3A(a0),d0
    9304/    7A0E : 0240 FF80           		andi.w	#$FF80,d0
    9305/    7A12 : 3238 F700           		move.w	($FFFFF700).w,d1
    9306/    7A16 : 0441 0080           		subi.w	#$80,d1
    9307/    7A1A : 0241 FF80           		andi.w	#$FF80,d1
    9308/    7A1E : 9041                		sub.w	d1,d0
    9309/    7A20 : 0C40 0280           		cmpi.w	#$280,d0
    9310/    7A24 : 6200 0004           		bhi.w	Obj15_DelAll
    9311/    7A28 : 4E75                		rts	
    9312/    7A2A :                     ; ===========================================================================
    9313/    7A2A :                     
    9314/    7A2A :                     Obj15_DelAll:				; XREF: Obj15_ChkDel
    9315/    7A2A : 7400                		moveq	#0,d2
    9316/    7A2C : 45E8 0028           		lea	$28(a0),a2
    9317/    7A30 : 141A                		move.b	(a2)+,d2
    9318/    7A32 :                     
    9319/    7A32 :                     Obj15_DelLoop:
    9320/    7A32 : 7000                		moveq	#0,d0
    9321/    7A34 : 101A                		move.b	(a2)+,d0
    9322/    7A36 : ED48                		lsl.w	#6,d0
    9323/    7A38 : 0680 00FF D000      		addi.l	#$FFD000,d0
    9324/    7A3E : 2240                		movea.l	d0,a1
    9325/    7A40 : 6100 59CE           		bsr.w	DeleteObject2
    9326/    7A44 : 51CA FFEC           		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
    9327/    7A48 : 4E75                		rts	
    9328/    7A4A :                     ; ===========================================================================
    9329/    7A4A :                     
    9330/    7A4A :                     Obj15_Delete:				; XREF: Obj15_Index
    9331/    7A4A : 6100 59C2           		bsr.w	DeleteObject
    9332/    7A4E : 4E75                		rts	
    9333/    7A50 :                     ; ===========================================================================
    9334/    7A50 :                     
    9335/    7A50 :                     Obj15_Display:				; XREF: Obj15_Index
    9336/    7A50 : 6000 5980           		bra.w	DisplaySprite
    9337/    7A54 :                     ; ===========================================================================
    9338/    7A54 :                     ; ---------------------------------------------------------------------------
    9339/    7A54 :                     ; Sprite mappings - GHZ	and MZ swinging	platforms
    9340/    7A54 :                     ; ---------------------------------------------------------------------------
    9341/    7A54 :                     Map_obj15:
    9342/    7A54 :                     	include "_mappings/obj15ghz.asm"
(1)    1/    7A54 :                     ; ---------------------------------------------------------------------------
(1)    2/    7A54 :                     ; Sprite mappings - GHZ	and MZ swinging	platforms
(1)    3/    7A54 :                     ; ---------------------------------------------------------------------------
(1)    4/    7A54 : 0006                		dc.w byte_7C4E-Map_obj15
(1)    5/    7A56 : 0011                		dc.w byte_7C59-Map_obj15
(1)    6/    7A58 : 0017                		dc.w byte_7C5F-Map_obj15
(1)    7/    7A5A : 02                  byte_7C4E:	dc.b 2
(1)    8/    7A5B : F809 0004 E8        		dc.b $F8, 9, 0,	4, $E8
(1)    9/    7A60 : F809 0004 00        		dc.b $F8, 9, 0,	4, 0
(1)   10/    7A65 : 01                  byte_7C59:	dc.b 1
(1)   11/    7A66 : F805 0000 F8        		dc.b $F8, 5, 0,	0, $F8
(1)   12/    7A6B : 01                  byte_7C5F:	dc.b 1
(1)   13/    7A6C : F805 000A F8        		dc.b $F8, 5, 0,	$A, $F8
(1)   14/    7A71 : (MACRO)              		even
(1)   14/    7A71 : 00                                          dc.b 0 ;ds.b 1 
    9343/    7A72 :                     
    9344/    7A72 :                     ; ---------------------------------------------------------------------------
    9345/    7A72 :                     ; Sprite mappings - SLZ	swinging platforms
    9346/    7A72 :                     ; ---------------------------------------------------------------------------
    9347/    7A72 :                     Map_obj15a:
    9348/    7A72 :                     	include "_mappings/obj15slz.asm"
(1)    1/    7A72 :                     ; ---------------------------------------------------------------------------
(1)    2/    7A72 :                     ; Sprite mappings - SLZ	swinging platforms
(1)    3/    7A72 :                     ; ---------------------------------------------------------------------------
(1)    4/    7A72 : 0006                		dc.w byte_7C6C-Map_obj15a
(1)    5/    7A74 : 002F                		dc.w byte_7C95-Map_obj15a
(1)    6/    7A76 : 0035                		dc.w byte_7C9B-Map_obj15a
(1)    7/    7A78 : 08                  byte_7C6C:	dc.b 8
(1)    8/    7A79 : F00F 0004 E0        		dc.b $F0, $F, 0, 4, $E0
(1)    9/    7A7E : F00F 0804 00        		dc.b $F0, $F, 8, 4, 0
(1)   10/    7A83 : F005 0014 D0        		dc.b $F0, 5, 0,	$14, $D0
(1)   11/    7A88 : F005 0814 20        		dc.b $F0, 5, 8,	$14, $20
(1)   12/    7A8D : 1004 0018 E0        		dc.b $10, 4, 0,	$18, $E0
(1)   13/    7A92 : 1004 0818 10        		dc.b $10, 4, 8,	$18, $10
(1)   14/    7A97 : 1001 001A F8        		dc.b $10, 1, 0,	$1A, $F8
(1)   15/    7A9C : 1001 081A 00        		dc.b $10, 1, 8,	$1A, 0
(1)   16/    7AA1 : 01                  byte_7C95:	dc.b 1
(1)   17/    7AA2 : F805 4000 F8        		dc.b $F8, 5, $40, 0, $F8
(1)   18/    7AA7 : 01                  byte_7C9B:	dc.b 1
(1)   19/    7AA8 : F805 001C F8        		dc.b $F8, 5, 0,	$1C, $F8
(1)   20/    7AAD : (MACRO)              		even
(1)   20/    7AAD : 00                                          dc.b 0 ;ds.b 1 
    9349/    7AAE :                     
    9350/    7AAE :                     ; ===========================================================================
    9351/    7AAE :                     ; ---------------------------------------------------------------------------
    9352/    7AAE :                     ; Object 17 - helix of spikes on a pole	(GHZ)
    9353/    7AAE :                     ; ---------------------------------------------------------------------------
    9354/    7AAE :                     
    9355/    7AAE :                     Obj17:					; XREF: Obj_Index
    9356/    7AAE : 7000                		moveq	#0,d0
    9357/    7AB0 : 1028 0024           		move.b	$24(a0),d0
    9358/    7AB4 : 323B 0006           		move.w	Obj17_Index(pc,d0.w),d1
    9359/    7AB8 : 4EFB 1002           		jmp	Obj17_Index(pc,d1.w)
    9360/    7ABC :                     ; ===========================================================================
    9361/    7ABC : 000A                Obj17_Index:	dc.w Obj17_Main-Obj17_Index
    9362/    7ABE : 00C8                		dc.w Obj17_Action-Obj17_Index
    9363/    7AC0 : 00C8                		dc.w Obj17_Action-Obj17_Index
    9364/    7AC2 : 0136                		dc.w Obj17_Delete-Obj17_Index
    9365/    7AC4 : 013C                		dc.w Obj17_Display-Obj17_Index
    9366/    7AC6 :                     ; ===========================================================================
    9367/    7AC6 :                     
    9368/    7AC6 :                     Obj17_Main:				; XREF: Obj17_Index
    9369/    7AC6 : 5428 0024           		addq.b	#2,$24(a0)
    9370/    7ACA : 217C 0000 7C00      		move.l	#Map_obj17,4(a0)
             7AD0 : 0004             
    9371/    7AD2 : 317C 4398 0002      		move.w	#$4398,2(a0)
    9372/    7AD8 : 117C 0007 0022      		move.b	#7,$22(a0)
    9373/    7ADE : 117C 0004 0001      		move.b	#4,1(a0)
    9374/    7AE4 : 117C 0003 0018      		move.b	#3,$18(a0)
    9375/    7AEA : 117C 0008 0019      		move.b	#8,$19(a0)
    9376/    7AF0 : 3428 000C           		move.w	$C(a0),d2
    9377/    7AF4 : 3628 0008           		move.w	8(a0),d3
    9378/    7AF8 : 1810                		move.b	0(a0),d4
    9379/    7AFA : 45E8 0028           		lea	$28(a0),a2	; move helix length to a2
    9380/    7AFE : 7200                		moveq	#0,d1
    9381/    7B00 : 1212                		move.b	(a2),d1		; move a2 to d1
    9382/    7B02 : 14FC 0000           		move.b	#0,(a2)+
    9383/    7B06 : 3001                		move.w	d1,d0
    9384/    7B08 : E248                		lsr.w	#1,d0
    9385/    7B0A : E948                		lsl.w	#4,d0
    9386/    7B0C : 9640                		sub.w	d0,d3
    9387/    7B0E : 5501                		subq.b	#2,d1
    9388/    7B10 : 6572                		bcs.s	Obj17_Action
    9389/    7B12 : 7C00                		moveq	#0,d6
    9390/    7B14 :                     
    9391/    7B14 :                     Obj17_MakeHelix:
    9392/    7B14 : 6100 5D42           		bsr.w	SingleObjLoad
    9393/    7B18 : 666A                		bne.s	Obj17_Action
    9394/    7B1A : 5228 0028           		addq.b	#1,$28(a0)
    9395/    7B1E : 3A09                		move.w	a1,d5
    9396/    7B20 : 0445 D000           		subi.w	#$D000,d5
    9397/    7B24 : EC4D                		lsr.w	#6,d5
    9398/    7B26 : 0245 007F           		andi.w	#$7F,d5
    9399/    7B2A : 14C5                		move.b	d5,(a2)+
    9400/    7B2C : 137C 0008 0024      		move.b	#8,$24(a1)
    9401/    7B32 : 1284                		move.b	d4,0(a1)
    9402/    7B34 : 3342 000C           		move.w	d2,$C(a1)
    9403/    7B38 : 3343 0008           		move.w	d3,8(a1)
    9404/    7B3C : 2368 0004 0004      		move.l	4(a0),4(a1)
    9405/    7B42 : 337C 4398 0002      		move.w	#$4398,2(a1)
    9406/    7B48 : 137C 0004 0001      		move.b	#4,1(a1)
    9407/    7B4E : 137C 0003 0018      		move.b	#3,$18(a1)
    9408/    7B54 : 137C 0008 0019      		move.b	#8,$19(a1)
    9409/    7B5A : 1346 003E           		move.b	d6,$3E(a1)
    9410/    7B5E : 5206                		addq.b	#1,d6
    9411/    7B60 : 0206 0007           		andi.b	#7,d6
    9412/    7B64 : 0643 0010           		addi.w	#$10,d3
    9413/    7B68 : B668 0008           		cmp.w	8(a0),d3
    9414/    7B6C : 6612                		bne.s	loc_7D78
    9415/    7B6E : 1146 003E           		move.b	d6,$3E(a0)
    9416/    7B72 : 5206                		addq.b	#1,d6
    9417/    7B74 : 0206 0007           		andi.b	#7,d6
    9418/    7B78 : 0643 0010           		addi.w	#$10,d3
    9419/    7B7C : 5228 0028           		addq.b	#1,$28(a0)
    9420/    7B80 :                     
    9421/    7B80 :                     loc_7D78:
    9422/    7B80 : 51C9 FF92           		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
    9423/    7B84 :                     
    9424/    7B84 :                     Obj17_Action:				; XREF: Obj17_Index
    9425/    7B84 : 6100 000A           		bsr.w	Obj17_RotateSpikes
    9426/    7B88 : 6100 5848           		bsr.w	DisplaySprite
    9427/    7B8C : 6000 0022           		bra.w	Obj17_ChkDel
    9428/    7B90 :                     
    9429/    7B90 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    9430/    7B90 :                     
    9431/    7B90 :                     
    9432/    7B90 :                     Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
    9433/    7B90 : 1038 FEC1           		move.b	($FFFFFEC1).w,d0
    9434/    7B94 : 117C 0000 0020      		move.b	#0,$20(a0)	; make object harmless
    9435/    7B9A : D028 003E           		add.b	$3E(a0),d0
    9436/    7B9E : 0200 0007           		andi.b	#7,d0
    9437/    7BA2 : 1140 001A           		move.b	d0,$1A(a0)	; change current frame
    9438/    7BA6 : 6606                		bne.s	locret_7DA6
    9439/    7BA8 : 117C 0084 0020      		move.b	#$84,$20(a0)	; make object harmful
    9440/    7BAE :                     
    9441/    7BAE :                     locret_7DA6:
    9442/    7BAE : 4E75                		rts	
    9443/    7BB0 :                     ; End of function Obj17_RotateSpikes
    9444/    7BB0 :                     
    9445/    7BB0 :                     ; ===========================================================================
    9446/    7BB0 :                     
    9447/    7BB0 :                     Obj17_ChkDel:				; XREF: Obj17_Action
    9448/    7BB0 : 3028 0008           		move.w	8(a0),d0
    9449/    7BB4 : 0240 FF80           		andi.w	#$FF80,d0
    9450/    7BB8 : 3238 F700           		move.w	($FFFFF700).w,d1
    9451/    7BBC : 0441 0080           		subi.w	#$80,d1
    9452/    7BC0 : 0241 FF80           		andi.w	#$FF80,d1
    9453/    7BC4 : 9041                		sub.w	d1,d0
    9454/    7BC6 : 0C40 0280           		cmpi.w	#$280,d0
    9455/    7BCA : 6200 0004           		bhi.w	Obj17_DelAll
    9456/    7BCE : 4E75                		rts	
    9457/    7BD0 :                     ; ===========================================================================
    9458/    7BD0 :                     
    9459/    7BD0 :                     Obj17_DelAll:				; XREF: Obj17_ChkDel
    9460/    7BD0 : 7400                		moveq	#0,d2
    9461/    7BD2 : 45E8 0028           		lea	$28(a0),a2	; move helix length to a2
    9462/    7BD6 : 141A                		move.b	(a2)+,d2	; move a2 to d2
    9463/    7BD8 : 5502                		subq.b	#2,d2
    9464/    7BDA : 6516                		bcs.s	Obj17_Delete
    9465/    7BDC :                     
    9466/    7BDC :                     Obj17_DelLoop:
    9467/    7BDC : 7000                		moveq	#0,d0
    9468/    7BDE : 101A                		move.b	(a2)+,d0
    9469/    7BE0 : ED48                		lsl.w	#6,d0
    9470/    7BE2 : 0680 00FF D000      		addi.l	#$FFD000,d0
    9471/    7BE8 : 2240                		movea.l	d0,a1
    9472/    7BEA : 6100 5824           		bsr.w	DeleteObject2	; delete object
    9473/    7BEE : 51CA FFEC           		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
    9474/    7BF2 :                     
    9475/    7BF2 :                     Obj17_Delete:				; XREF: Obj17_Index
    9476/    7BF2 : 6100 581A           		bsr.w	DeleteObject
    9477/    7BF6 : 4E75                		rts	
    9478/    7BF8 :                     ; ===========================================================================
    9479/    7BF8 :                     
    9480/    7BF8 :                     Obj17_Display:				; XREF: Obj17_Index
    9481/    7BF8 : 6100 FF96           		bsr.w	Obj17_RotateSpikes
    9482/    7BFC : 6000 57D4           		bra.w	DisplaySprite
    9483/    7C00 :                     ; ===========================================================================
    9484/    7C00 :                     ; ---------------------------------------------------------------------------
    9485/    7C00 :                     ; Sprite mappings - helix of spikes on a pole (GHZ)
    9486/    7C00 :                     ; ---------------------------------------------------------------------------
    9487/    7C00 :                     Map_obj17:
    9488/    7C00 :                     	include "_mappings/obj17.asm"
(1)    1/    7C00 :                     ; ---------------------------------------------------------------------------
(1)    2/    7C00 :                     ; Sprite mappings - helix of spikes on a pole (GHZ)
(1)    3/    7C00 :                     ; ---------------------------------------------------------------------------
(1)    4/    7C00 : 0010 0016           		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
(1)    5/    7C04 : 001C 0022           		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
(1)    6/    7C08 : 0028 002E           		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
(1)    7/    7C0C : 0036 0034           		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
(1)    8/    7C10 : 01                  byte_7E08:	dc.b 1
(1)    9/    7C11 : F001 0000 FC        		dc.b $F0, 1, 0,	0, $FC
(1)   10/    7C16 : 01                  byte_7E0E:	dc.b 1
(1)   11/    7C17 : F505 0002 F8        		dc.b $F5, 5, 0,	2, $F8
(1)   12/    7C1C : 01                  byte_7E14:	dc.b 1
(1)   13/    7C1D : F805 0006 F8        		dc.b $F8, 5, 0,	6, $F8
(1)   14/    7C22 : 01                  byte_7E1A:	dc.b 1
(1)   15/    7C23 : FB05 000A F8        		dc.b $FB, 5, 0,	$A, $F8
(1)   16/    7C28 : 01                  byte_7E20:	dc.b 1
(1)   17/    7C29 : 0001 000E FC        		dc.b 0,	1, 0, $E, $FC
(1)   18/    7C2E : 01                  byte_7E26:	dc.b 1
(1)   19/    7C2F : 0400 0010 FD        		dc.b 4,	0, 0, $10, $FD
(1)   20/    7C34 : 01                  byte_7E2C:	dc.b 1
(1)   21/    7C35 : F400 0011 FD        byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
(1)   22/    7C3A : (MACRO)              		even
    9489/    7C3A :                     
    9490/    7C3A :                     ; ===========================================================================
    9491/    7C3A :                     ; ---------------------------------------------------------------------------
    9492/    7C3A :                     ; Object 18 - platforms	(GHZ, SYZ, SLZ)
    9493/    7C3A :                     ; ---------------------------------------------------------------------------
    9494/    7C3A :                     
    9495/    7C3A :                     Obj18:					; XREF: Obj_Index
    9496/    7C3A : 7000                		moveq	#0,d0
    9497/    7C3C : 1028 0024           		move.b	$24(a0),d0
    9498/    7C40 : 323B 0006           		move.w	Obj18_Index(pc,d0.w),d1
    9499/    7C44 : 4EFB 1002           		jmp	Obj18_Index(pc,d1.w)
    9500/    7C48 :                     ; ===========================================================================
    9501/    7C48 : 000A                Obj18_Index:	dc.w Obj18_Main-Obj18_Index
    9502/    7C4A : 0096                		dc.w Obj18_Solid-Obj18_Index
    9503/    7C4C : 00BA                		dc.w Obj18_Action2-Obj18_Index
    9504/    7C4E : 02B6                		dc.w Obj18_Delete-Obj18_Index
    9505/    7C50 : 00AA                		dc.w Obj18_Action-Obj18_Index
    9506/    7C52 :                     ; ===========================================================================
    9507/    7C52 :                     
    9508/    7C52 :                     Obj18_Main:				; XREF: Obj18_Index
    9509/    7C52 : 5428 0024           		addq.b	#2,$24(a0)
    9510/    7C56 : 317C 4000 0002      		move.w	#$4000,2(a0)
    9511/    7C5C : 217C 0000 7F44      		move.l	#Map_obj18,4(a0)
             7C62 : 0004             
    9512/    7C64 : 117C 0020 0019      		move.b	#$20,$19(a0)
    9513/    7C6A : 0C38 0004 FE10      		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
    9514/    7C70 : 660E                		bne.s	Obj18_NotSYZ
    9515/    7C72 : 217C 0000 7F90      		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
             7C78 : 0004             
    9516/    7C7A : 117C 0020 0019      		move.b	#$20,$19(a0)
    9517/    7C80 :                     
    9518/    7C80 :                     Obj18_NotSYZ:
    9519/    7C80 : 0C38 0003 FE10      		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
    9520/    7C86 : 661A                		bne.s	Obj18_NotSLZ
    9521/    7C88 : 217C 0000 7FA2      		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
             7C8E : 0004             
    9522/    7C90 : 117C 0020 0019      		move.b	#$20,$19(a0)
    9523/    7C96 : 317C 4000 0002      		move.w	#$4000,2(a0)
    9524/    7C9C : 117C 0003 0028      		move.b	#3,$28(a0)
    9525/    7CA2 :                     
    9526/    7CA2 :                     Obj18_NotSLZ:
    9527/    7CA2 : 117C 0004 0001      		move.b	#4,1(a0)
    9528/    7CA8 : 117C 0004 0018      		move.b	#4,$18(a0)
    9529/    7CAE : 3168 000C 002C      		move.w	$C(a0),$2C(a0)
    9530/    7CB4 : 3168 000C 0034      		move.w	$C(a0),$34(a0)
    9531/    7CBA : 3168 0008 0032      		move.w	8(a0),$32(a0)
    9532/    7CC0 : 317C 0080 0026      		move.w	#$80,$26(a0)
    9533/    7CC6 : 7200                		moveq	#0,d1
    9534/    7CC8 : 1028 0028           		move.b	$28(a0),d0
    9535/    7CCC : 0C00 000A           		cmpi.b	#$A,d0		; is object type $A (large platform)?
    9536/    7CD0 : 6608                		bne.s	Obj18_SetFrame	; if not, branch
    9537/    7CD2 : 5201                		addq.b	#1,d1		; use frame #1
    9538/    7CD4 : 117C 0020 0019      		move.b	#$20,$19(a0)	; set width
    9539/    7CDA :                     
    9540/    7CDA :                     Obj18_SetFrame:
    9541/    7CDA : 1141 001A           		move.b	d1,$1A(a0)	; set frame to d1
    9542/    7CDE :                     
    9543/    7CDE :                     Obj18_Solid:				; XREF: Obj18_Index
    9544/    7CDE : 4A28 0038           		tst.b	$38(a0)
    9545/    7CE2 : 6704                		beq.s	loc_7EE0
    9546/    7CE4 : 5928 0038           		subq.b	#4,$38(a0)
    9547/    7CE8 :                     
    9548/    7CE8 :                     loc_7EE0:
    9549/    7CE8 : 7200                		moveq	#0,d1
    9550/    7CEA : 1228 0019           		move.b	$19(a0),d1
    9551/    7CEE : 6100 F56C           		bsr.w	PlatformObject
    9552/    7CF2 :                     
    9553/    7CF2 :                     Obj18_Action:				; XREF: Obj18_Index
    9554/    7CF2 : 6100 005A           		bsr.w	Obj18_Move
    9555/    7CF6 : 6100 003C           		bsr.w	Obj18_Nudge
    9556/    7CFA : 6100 56D6           		bsr.w	DisplaySprite
    9557/    7CFE : 6000 01E0           		bra.w	Obj18_ChkDel
    9558/    7D02 :                     ; ===========================================================================
    9559/    7D02 :                     
    9560/    7D02 :                     Obj18_Action2:				; XREF: Obj18_Index
    9561/    7D02 : 0C28 0040 0038      		cmpi.b	#$40,$38(a0)
    9562/    7D08 : 6704                		beq.s	loc_7F06
    9563/    7D0A : 5828 0038           		addq.b	#4,$38(a0)
    9564/    7D0E :                     
    9565/    7D0E :                     loc_7F06:
    9566/    7D0E : 7200                		moveq	#0,d1
    9567/    7D10 : 1228 0019           		move.b	$19(a0),d1
    9568/    7D14 : 6100 F6BA           		bsr.w	ExitPlatform
    9569/    7D18 : 3F28 0008           		move.w	8(a0),-(sp)
    9570/    7D1C : 6100 0030           		bsr.w	Obj18_Move
    9571/    7D20 : 6100 0012           		bsr.w	Obj18_Nudge
    9572/    7D24 : 341F                		move.w	(sp)+,d2
    9573/    7D26 : 6100 FC12           		bsr.w	MvSonicOnPtfm2
    9574/    7D2A : 6100 56A6           		bsr.w	DisplaySprite
    9575/    7D2E : 6000 01B0           		bra.w	Obj18_ChkDel
    9576/    7D32 :                     
    9577/    7D32 : 4E75                		rts
    9578/    7D34 :                     
    9579/    7D34 :                     ; ---------------------------------------------------------------------------
    9580/    7D34 :                     ; Subroutine to	move platform slightly when you	stand on it
    9581/    7D34 :                     ; ---------------------------------------------------------------------------
    9582/    7D34 :                     
    9583/    7D34 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    9584/    7D34 :                     
    9585/    7D34 :                     
    9586/    7D34 :                     Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
    9587/    7D34 : 1028 0038           		move.b	$38(a0),d0
    9588/    7D38 : 6100 AA86           		bsr.w	CalcSine
    9589/    7D3C : 323C 0400           		move.w	#$400,d1
    9590/    7D40 : C1C1                		muls.w	d1,d0
    9591/    7D42 : 4840                		swap	d0
    9592/    7D44 : D068 002C           		add.w	$2C(a0),d0
    9593/    7D48 : 3140 000C           		move.w	d0,$C(a0)
    9594/    7D4C : 4E75                		rts	
    9595/    7D4E :                     ; End of function Obj18_Nudge
    9596/    7D4E :                     
    9597/    7D4E :                     ; ---------------------------------------------------------------------------
    9598/    7D4E :                     ; Subroutine to	move platforms
    9599/    7D4E :                     ; ---------------------------------------------------------------------------
    9600/    7D4E :                     
    9601/    7D4E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    9602/    7D4E :                     
    9603/    7D4E :                     
    9604/    7D4E :                     Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
    9605/    7D4E : 7000                		moveq	#0,d0
    9606/    7D50 : 1028 0028           		move.b	$28(a0),d0
    9607/    7D54 : 0240 000F           		andi.w	#$F,d0
    9608/    7D58 : D040                		add.w	d0,d0
    9609/    7D5A : 323B 0006           		move.w	Obj18_TypeIndex(pc,d0.w),d1
    9610/    7D5E : 4EFB 1002           		jmp	Obj18_TypeIndex(pc,d1.w)
    9611/    7D62 :                     ; End of function Obj18_Move
    9612/    7D62 :                     
    9613/    7D62 :                     ; ===========================================================================
    9614/    7D62 : 001A 002C           Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
    9615/    7D66 : 0072 008A           		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
    9616/    7D6A : 00B2 001C           		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
    9617/    7D6E : 0062 011C           		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
    9618/    7D72 : 0148 001A           		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
    9619/    7D76 : 0160 0054           		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
    9620/    7D7A : 0044                		dc.w Obj18_Type0C-Obj18_TypeIndex
    9621/    7D7C :                     ; ===========================================================================
    9622/    7D7C :                     
    9623/    7D7C :                     Obj18_Type00:
    9624/    7D7C : 4E75                		rts			; platform 00 doesn't move
    9625/    7D7E :                     ; ===========================================================================
    9626/    7D7E :                     
    9627/    7D7E :                     Obj18_Type05:
    9628/    7D7E : 3028 0032           		move.w	$32(a0),d0
    9629/    7D82 : 1228 0026           		move.b	$26(a0),d1	; load platform-motion variable
    9630/    7D86 : 4401                		neg.b	d1		; reverse platform-motion
    9631/    7D88 : 0601 0040           		addi.b	#$40,d1
    9632/    7D8C : 600C                		bra.s	Obj18_01_Move
    9633/    7D8E :                     ; ===========================================================================
    9634/    7D8E :                     
    9635/    7D8E :                     Obj18_Type01:
    9636/    7D8E : 3028 0032           		move.w	$32(a0),d0
    9637/    7D92 : 1228 0026           		move.b	$26(a0),d1	; load platform-motion variable
    9638/    7D96 : 0401 0040           		subi.b	#$40,d1
    9639/    7D9A :                     
    9640/    7D9A :                     Obj18_01_Move:
    9641/    7D9A : 4881                		ext.w	d1
    9642/    7D9C : D041                		add.w	d1,d0
    9643/    7D9E : 3140 0008           		move.w	d0,8(a0)	; change position on x-axis
    9644/    7DA2 : 6000 0134           		bra.w	Obj18_ChgMotion
    9645/    7DA6 :                     ; ===========================================================================
    9646/    7DA6 :                     
    9647/    7DA6 :                     Obj18_Type0C:
    9648/    7DA6 : 3028 0034           		move.w	$34(a0),d0
    9649/    7DAA : 1238 FE6C           		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
    9650/    7DAE : 4401                		neg.b	d1		; reverse platform-motion
    9651/    7DB0 : 0601 0030           		addi.b	#$30,d1
    9652/    7DB4 : 602A                		bra.s	Obj18_02_Move
    9653/    7DB6 :                     ; ===========================================================================
    9654/    7DB6 :                     
    9655/    7DB6 :                     Obj18_Type0B:
    9656/    7DB6 : 3028 0034           		move.w	$34(a0),d0
    9657/    7DBA : 1238 FE6C           		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
    9658/    7DBE : 0401 0030           		subi.b	#$30,d1
    9659/    7DC2 : 601C                		bra.s	Obj18_02_Move
    9660/    7DC4 :                     ; ===========================================================================
    9661/    7DC4 :                     
    9662/    7DC4 :                     Obj18_Type06:
    9663/    7DC4 : 3028 0034           		move.w	$34(a0),d0
    9664/    7DC8 : 1228 0026           		move.b	$26(a0),d1	; load platform-motion variable
    9665/    7DCC : 4401                		neg.b	d1		; reverse platform-motion
    9666/    7DCE : 0601 0040           		addi.b	#$40,d1
    9667/    7DD2 : 600C                		bra.s	Obj18_02_Move
    9668/    7DD4 :                     ; ===========================================================================
    9669/    7DD4 :                     
    9670/    7DD4 :                     Obj18_Type02:
    9671/    7DD4 : 3028 0034           		move.w	$34(a0),d0
    9672/    7DD8 : 1228 0026           		move.b	$26(a0),d1	; load platform-motion variable
    9673/    7DDC : 0401 0040           		subi.b	#$40,d1
    9674/    7DE0 :                     
    9675/    7DE0 :                     Obj18_02_Move:
    9676/    7DE0 : 4881                		ext.w	d1
    9677/    7DE2 : D041                		add.w	d1,d0
    9678/    7DE4 : 3140 002C           		move.w	d0,$2C(a0)	; change position on y-axis
    9679/    7DE8 : 6000 00EE           		bra.w	Obj18_ChgMotion
    9680/    7DEC :                     ; ===========================================================================
    9681/    7DEC :                     
    9682/    7DEC :                     Obj18_Type03:
    9683/    7DEC : 4A68 003A           		tst.w	$3A(a0)		; is time delay	set?
    9684/    7DF0 : 6610                		bne.s	Obj18_03_Wait	; if yes, branch
    9685/    7DF2 : 0828 0003 0022      		btst	#3,$22(a0)	; is Sonic standing on the platform?
    9686/    7DF8 : 6706                		beq.s	Obj18_03_NoMove	; if not, branch
    9687/    7DFA : 317C 001E 003A      		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
    9688/    7E00 :                     
    9689/    7E00 :                     Obj18_03_NoMove:
    9690/    7E00 : 4E75                		rts	
    9691/    7E02 :                     ; ===========================================================================
    9692/    7E02 :                     
    9693/    7E02 :                     Obj18_03_Wait:
    9694/    7E02 : 5368 003A           		subq.w	#1,$3A(a0)	; subtract 1 from time
    9695/    7E06 : 66F8                		bne.s	Obj18_03_NoMove	; if time is > 0, branch
    9696/    7E08 : 317C 0020 003A      		move.w	#32,$3A(a0)
    9697/    7E0E : 5228 0028           		addq.b	#1,$28(a0)	; change to type 04 (falling)
    9698/    7E12 : 4E75                		rts	
    9699/    7E14 :                     ; ===========================================================================
    9700/    7E14 :                     
    9701/    7E14 :                     Obj18_Type04:
    9702/    7E14 : 4A68 003A           		tst.w	$3A(a0)
    9703/    7E18 : 6736                		beq.s	loc_8048
    9704/    7E1A : 5368 003A           		subq.w	#1,$3A(a0)
    9705/    7E1E : 6630                		bne.s	loc_8048
    9706/    7E20 : 0828 0003 0022      		btst	#3,$22(a0)
    9707/    7E26 : 6722                		beq.s	loc_8042
    9708/    7E28 : 08E9 0001 0022      		bset	#1,$22(a1)
    9709/    7E2E : 08A9 0003 0022      		bclr	#3,$22(a1)
    9710/    7E34 : 137C 0002 0024      		move.b	#2,$24(a1)
    9711/    7E3A : 08A8 0003 0022      		bclr	#3,$22(a0)
    9712/    7E40 : 4228 0025           		clr.b	$25(a0)
    9713/    7E44 : 3368 0012 0012      		move.w	$12(a0),$12(a1)
    9714/    7E4A :                     
    9715/    7E4A :                     loc_8042:
    9716/    7E4A : 117C 0008 0024      		move.b	#8,$24(a0)
    9717/    7E50 :                     
    9718/    7E50 :                     loc_8048:
    9719/    7E50 : 2628 002C           		move.l	$2C(a0),d3
    9720/    7E54 : 3028 0012           		move.w	$12(a0),d0
    9721/    7E58 : 48C0                		ext.l	d0
    9722/    7E5A : E180                		asl.l	#8,d0
    9723/    7E5C : D680                		add.l	d0,d3
    9724/    7E5E : 2143 002C           		move.l	d3,$2C(a0)
    9725/    7E62 : 0668 0038 0012      		addi.w	#$38,$12(a0)
    9726/    7E68 : 3038 F72E           		move.w	($FFFFF72E).w,d0
    9727/    7E6C : 0640 00E0           		addi.w	#$E0,d0
    9728/    7E70 : B068 002C           		cmp.w	$2C(a0),d0
    9729/    7E74 : 6406                		bcc.s	locret_8074
    9730/    7E76 : 117C 0006 0024      		move.b	#6,$24(a0)
    9731/    7E7C :                     
    9732/    7E7C :                     locret_8074:
    9733/    7E7C : 4E75                		rts	
    9734/    7E7E :                     ; ===========================================================================
    9735/    7E7E :                     
    9736/    7E7E :                     Obj18_Type07:
    9737/    7E7E : 4A68 003A           		tst.w	$3A(a0)		; is time delay	set?
    9738/    7E82 : 661A                		bne.s	Obj18_07_Wait	; if yes, branch
    9739/    7E84 : 45F8 F7E0           		lea	($FFFFF7E0).w,a2 ; load	switch statuses
    9740/    7E88 : 7000                		moveq	#0,d0
    9741/    7E8A : 1028 0028           		move.b	$28(a0),d0	; move object type ($x7) to d0
    9742/    7E8E : E848                		lsr.w	#4,d0		; divide d0 by 8, round	down
    9743/    7E90 : 4A32 0000           		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
    9744/    7E94 : 6706                		beq.s	Obj18_07_NoMove	; if not, branch
    9745/    7E96 : 317C 003C 003A      		move.w	#60,$3A(a0)	; set time delay to 1 second
    9746/    7E9C :                     
    9747/    7E9C :                     Obj18_07_NoMove:
    9748/    7E9C : 4E75                		rts	
    9749/    7E9E :                     ; ===========================================================================
    9750/    7E9E :                     
    9751/    7E9E :                     Obj18_07_Wait:
    9752/    7E9E : 5368 003A           		subq.w	#1,$3A(a0)	; subtract 1 from time delay
    9753/    7EA2 : 66F8                		bne.s	Obj18_07_NoMove	; if time is > 0, branch
    9754/    7EA4 : 5228 0028           		addq.b	#1,$28(a0)	; change to type 08
    9755/    7EA8 : 4E75                		rts	
    9756/    7EAA :                     ; ===========================================================================
    9757/    7EAA :                     
    9758/    7EAA :                     Obj18_Type08:
    9759/    7EAA : 5568 002C           		subq.w	#2,$2C(a0)	; move platform	up
    9760/    7EAE : 3028 0034           		move.w	$34(a0),d0
    9761/    7EB2 : 0440 0200           		subi.w	#$200,d0
    9762/    7EB6 : B068 002C           		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
    9763/    7EBA : 6604                		bne.s	Obj18_08_NoStop	; if not, branch
    9764/    7EBC : 4228 0028           		clr.b	$28(a0)		; change to type 00 (stop moving)
    9765/    7EC0 :                     
    9766/    7EC0 :                     Obj18_08_NoStop:
    9767/    7EC0 : 4E75                		rts	
    9768/    7EC2 :                     ; ===========================================================================
    9769/    7EC2 :                     
    9770/    7EC2 :                     Obj18_Type0A:
    9771/    7EC2 : 3028 0034           		move.w	$34(a0),d0
    9772/    7EC6 : 1228 0026           		move.b	$26(a0),d1	; load platform-motion variable
    9773/    7ECA : 0401 0040           		subi.b	#$40,d1
    9774/    7ECE : 4881                		ext.w	d1
    9775/    7ED0 : E241                		asr.w	#1,d1
    9776/    7ED2 : D041                		add.w	d1,d0
    9777/    7ED4 : 3140 002C           		move.w	d0,$2C(a0)	; change position on y-axis
    9778/    7ED8 :                     
    9779/    7ED8 :                     Obj18_ChgMotion:
    9780/    7ED8 : 1178 FE78 0026      		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
    9781/    7EDE : 4E75                		rts	
    9782/    7EE0 :                     ; ===========================================================================
    9783/    7EE0 :                     
    9784/    7EE0 :                     Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
    9785/    7EE0 : 3028 0032           		move.w	$32(a0),d0
    9786/    7EE4 : 0240 FF80           		andi.w	#$FF80,d0
    9787/    7EE8 : 3238 F700           		move.w	($FFFFF700).w,d1
    9788/    7EEC : 0441 0080           		subi.w	#$80,d1
    9789/    7EF0 : 0241 FF80           		andi.w	#$FF80,d1
    9790/    7EF4 : 9041                		sub.w	d1,d0
    9791/    7EF6 : 0C40 0280           		cmpi.w	#$280,d0
    9792/    7EFA : 6202                		bhi.s	Obj18_Delete
    9793/    7EFC : 4E75                		rts	
    9794/    7EFE :                     ; ===========================================================================
    9795/    7EFE :                     
    9796/    7EFE :                     Obj18_Delete:				; XREF: Obj18_Index
    9797/    7EFE : 6000 550E           		bra.w	DeleteObject
    9798/    7F02 :                     ; ===========================================================================
    9799/    7F02 :                     ; ---------------------------------------------------------------------------
    9800/    7F02 :                     ; Sprite mappings - unused
    9801/    7F02 :                     ; ---------------------------------------------------------------------------
    9802/    7F02 :                     Map_obj18x:
    9803/    7F02 :                     	include "_mappings/obj18x.asm"
(1)    1/    7F02 :                     ; ---------------------------------------------------------------------------
(1)    2/    7F02 :                     ; Sprite mappings - unused
(1)    3/    7F02 :                     ; ---------------------------------------------------------------------------
(1)    4/    7F02 : 0004                		dc.w byte_80FE-Map_obj18x
(1)    5/    7F04 : 000F                		dc.w byte_8109-Map_obj18x
(1)    6/    7F06 : 02                  byte_80FE:	dc.b 2
(1)    7/    7F07 : F40B 003C E8        		dc.b $F4, $B, 0, $3C, $E8
(1)    8/    7F0C : F40B 0048 00        		dc.b $F4, $B, 0, $48, 0
(1)    9/    7F11 : 0A                  byte_8109:	dc.b $A
(1)   10/    7F12 : F40F 00CA E0        		dc.b $F4, $F, 0, $CA, $E0
(1)   11/    7F17 : 040F 00DA E0        		dc.b 4,	$F, 0, $DA, $E0
(1)   12/    7F1C : 240F 00DA E0        		dc.b $24, $F, 0, $DA, $E0
(1)   13/    7F21 : 440F 00DA E0        		dc.b $44, $F, 0, $DA, $E0
(1)   14/    7F26 : 640F 00DA E0        		dc.b $64, $F, 0, $DA, $E0
(1)   15/    7F2B : F40F 08CA 00        		dc.b $F4, $F, 8, $CA, 0
(1)   16/    7F30 : 040F 08DA 00        		dc.b 4,	$F, 8, $DA, 0
(1)   17/    7F35 : 240F 08DA 00        		dc.b $24, $F, 8, $DA, 0
(1)   18/    7F3A : 440F 08DA 00        		dc.b $44, $F, 8, $DA, 0
(1)   19/    7F3F : 640F 08DA 00        		dc.b $64, $F, 8, $DA, 0
(1)   20/    7F44 : (MACRO)              		even
    9804/    7F44 :                     
    9805/    7F44 :                     ; ---------------------------------------------------------------------------
    9806/    7F44 :                     ; Sprite mappings - GHZ	platforms
    9807/    7F44 :                     ; ---------------------------------------------------------------------------
    9808/    7F44 :                     Map_obj18:
    9809/    7F44 :                     	include "_mappings/obj18ghz.asm"
(1)    1/    7F44 :                     ; ---------------------------------------------------------------------------
(1)    2/    7F44 :                     ; Sprite mappings - GHZ	platforms
(1)    3/    7F44 :                     ; ---------------------------------------------------------------------------
(1)    4/    7F44 : 0004                		dc.w byte_8140-Map_obj18
(1)    5/    7F46 : 0019                		dc.w byte_8155-Map_obj18
(1)    6/    7F48 : 04                  byte_8140:	dc.b 4
(1)    7/    7F49 : F40B 003B E0        		dc.b $F4, $B, 0, $3B, $E0 ; small platform
(1)    8/    7F4E : F407 003F F8        		dc.b $F4, 7, 0,	$3F, $F8
(1)    9/    7F53 : F407 003F 08        		dc.b $F4, 7, 0,	$3F, 8
(1)   10/    7F58 : F403 0047 18        		dc.b $F4, 3, 0,	$47, $18
(1)   11/    7F5D : 0A                  byte_8155:	dc.b $A
(1)   12/    7F5E : F40F 00C5 E0        		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
(1)   13/    7F63 : 040F 00D5 E0        		dc.b 4,	$F, 0, $D5, $E0
(1)   14/    7F68 : 240F 00D5 E0        		dc.b $24, $F, 0, $D5, $E0
(1)   15/    7F6D : 440F 00D5 E0        		dc.b $44, $F, 0, $D5, $E0
(1)   16/    7F72 : 640F 00D5 E0        		dc.b $64, $F, 0, $D5, $E0
(1)   17/    7F77 : F40F 08C5 00        		dc.b $F4, $F, 8, $C5, 0
(1)   18/    7F7C : 040F 08D5 00        		dc.b 4,	$F, 8, $D5, 0
(1)   19/    7F81 : 240F 08D5 00        		dc.b $24, $F, 8, $D5, 0
(1)   20/    7F86 : 440F 08D5 00        		dc.b $44, $F, 8, $D5, 0
(1)   21/    7F8B : 640F 08D5 00        		dc.b $64, $F, 8, $D5, 0
(1)   22/    7F90 : (MACRO)              		even
    9810/    7F90 :                     
    9811/    7F90 :                     ; ---------------------------------------------------------------------------
    9812/    7F90 :                     ; Sprite mappings - SYZ	platforms
    9813/    7F90 :                     ; ---------------------------------------------------------------------------
    9814/    7F90 :                     Map_obj18a:
    9815/    7F90 :                     	include "_mappings/obj18syz.asm"
(1)    1/    7F90 :                     ; ---------------------------------------------------------------------------
(1)    2/    7F90 :                     ; Sprite mappings - SYZ	platforms
(1)    3/    7F90 :                     ; ---------------------------------------------------------------------------
(1)    4/    7F90 : 0002                		dc.w byte_818A-Map_obj18a
(1)    5/    7F92 : 03                  byte_818A:	dc.b 3
(1)    6/    7F93 : F60B 0049 E0        		dc.b $F6, $B, 0, $49, $E0
(1)    7/    7F98 : F607 0051 F8        		dc.b $F6, 7, 0,	$51, $F8
(1)    8/    7F9D : F60B 0055 08        		dc.b $F6, $B, 0, $55, 8
(1)    9/    7FA2 : (MACRO)              		even
    9816/    7FA2 :                     
    9817/    7FA2 :                     ; ---------------------------------------------------------------------------
    9818/    7FA2 :                     ; Sprite mappings - SLZ	platforms
    9819/    7FA2 :                     ; ---------------------------------------------------------------------------
    9820/    7FA2 :                     Map_obj18b:
    9821/    7FA2 :                     	include "_mappings/obj18slz.asm"
(1)    1/    7FA2 :                     ; ---------------------------------------------------------------------------
(1)    2/    7FA2 :                     ; Sprite mappings - SLZ	platforms
(1)    3/    7FA2 :                     ; ---------------------------------------------------------------------------
(1)    4/    7FA2 : 0002                		dc.w byte_819C-Map_obj18b
(1)    5/    7FA4 : 02                  byte_819C:	dc.b 2
(1)    6/    7FA5 : F80F 0021 E0        		dc.b $F8, $F, 0, $21, $E0
(1)    7/    7FAA : F80F 0021 00        		dc.b $F8, $F, 0, $21, 0
(1)    8/    7FAF : (MACRO)              		even
(1)    8/    7FAF : 00                                          dc.b 0 ;ds.b 1 
    9822/    7FB0 :                     
    9823/    7FB0 :                     ; ===========================================================================
    9824/    7FB0 :                     ; ---------------------------------------------------------------------------
    9825/    7FB0 :                     ; Object 19 - blank
    9826/    7FB0 :                     ; ---------------------------------------------------------------------------
    9827/    7FB0 :                     
    9828/    7FB0 :                     Obj19:					; XREF: Obj_Index
    9829/    7FB0 : 4E75                		rts	
    9830/    7FB2 :                     ; ===========================================================================
    9831/    7FB2 :                     ; ---------------------------------------------------------------------------
    9832/    7FB2 :                     ; Sprite mappings - swinging ball on a chain from GHZ boss
    9833/    7FB2 :                     ; ---------------------------------------------------------------------------
    9834/    7FB2 :                     Map_obj48:
    9835/    7FB2 :                     	include "_mappings/obj48.asm"
(1)    1/    7FB2 :                     ; ---------------------------------------------------------------------------
(1)    2/    7FB2 :                     ; Sprite mappings - swinging ball on a chain from GHZ boss
(1)    3/    7FB2 :                     ; ---------------------------------------------------------------------------
(1)    4/    7FB2 : 0008 0027           		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
(1)    5/    7FB6 : 003C 0051           		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
(1)    6/    7FBA : 06                  byte_81B2:	dc.b 6
(1)    7/    7FBB : F004 0024 F0        		dc.b $F0, 4, 0,	$24, $F0
(1)    8/    7FC0 : F804 1024 F0        		dc.b $F8, 4, $10, $24, $F0
(1)    9/    7FC5 : E80A 0000 E8        		dc.b $E8, $A, 0, 0, $E8
(1)   10/    7FCA : E80A 0800 00        		dc.b $E8, $A, 8, 0, 0
(1)   11/    7FCF : 000A 1000 E8        		dc.b 0,	$A, $10, 0, $E8
(1)   12/    7FD4 : 000A 1800 00        		dc.b 0,	$A, $18, 0, 0
(1)   13/    7FD9 : 04                  byte_81D1:	dc.b 4
(1)   14/    7FDA : E80A 0009 E8        		dc.b $E8, $A, 0, 9, $E8
(1)   15/    7FDF : E80A 0809 00        		dc.b $E8, $A, 8, 9, 0
(1)   16/    7FE4 : 000A 1009 E8        		dc.b 0,	$A, $10, 9, $E8
(1)   17/    7FE9 : 000A 1809 00        		dc.b 0,	$A, $18, 9, 0
(1)   18/    7FEE : 04                  byte_81E6:	dc.b 4
(1)   19/    7FEF : E80A 0012 E8        		dc.b $E8, $A, 0, $12, $E8
(1)   20/    7FF4 : E80A 001B 00        		dc.b $E8, $A, 0, $1B, 0
(1)   21/    7FF9 : 000A 181B E8        		dc.b 0,	$A, $18, $1B, $E8
(1)   22/    7FFE : 000A 1812 00        		dc.b 0,	$A, $18, $12, 0
(1)   23/    8003 : 04                  byte_81FB:	dc.b 4
(1)   24/    8004 : E80A 081B E8        		dc.b $E8, $A, 8, $1B, $E8
(1)   25/    8009 : E80A 0812 00        		dc.b $E8, $A, 8, $12, 0
(1)   26/    800E : 000A 1012 E8        		dc.b 0,	$A, $10, $12, $E8
(1)   27/    8013 : 000A 101B 00        		dc.b 0,	$A, $10, $1B, 0
(1)   28/    8018 : (MACRO)              		even
    9836/    8018 :                     
    9837/    8018 :                     ; ===========================================================================
    9838/    8018 :                     ; ---------------------------------------------------------------------------
    9839/    8018 :                     ; Object 1A - GHZ collapsing ledge
    9840/    8018 :                     ; ---------------------------------------------------------------------------
    9841/    8018 :                     
    9842/    8018 :                     Obj1A:					; XREF: Obj_Index
    9843/    8018 : 7000                		moveq	#0,d0
    9844/    801A : 1028 0024           		move.b	$24(a0),d0
    9845/    801E : 323B 0006           		move.w	Obj1A_Index(pc,d0.w),d1
    9846/    8022 : 4EFB 1002           		jmp	Obj1A_Index(pc,d1.w)
    9847/    8026 :                     ; ===========================================================================
    9848/    8026 : 000C 0048           Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
    9849/    802A : 006C 009C           		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
    9850/    802E : 00FC 007E           		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
    9851/    8032 :                     ; ===========================================================================
    9852/    8032 :                     
    9853/    8032 :                     Obj1A_Main:				; XREF: Obj1A_Index
    9854/    8032 : 5428 0024           		addq.b	#2,$24(a0)
    9855/    8036 : 217C 0000 83A4      		move.l	#Map_obj1A,4(a0)
             803C : 0004             
    9856/    803E : 317C 4000 0002      		move.w	#$4000,2(a0)
    9857/    8044 : 0028 0004 0001      		ori.b	#4,1(a0)
    9858/    804A : 117C 0004 0018      		move.b	#4,$18(a0)
    9859/    8050 : 117C 0007 0038      		move.b	#7,$38(a0)	; set time delay for collapse
    9860/    8056 : 117C 0064 0019      		move.b	#$64,$19(a0)
    9861/    805C : 1168 0028 001A      		move.b	$28(a0),$1A(a0)
    9862/    8062 : 117C 0038 0016      		move.b	#$38,$16(a0)
    9863/    8068 : 08E8 0004 0001      		bset	#4,1(a0)
    9864/    806E :                     
    9865/    806E :                     Obj1A_ChkTouch:				; XREF: Obj1A_Index
    9866/    806E : 4A28 003A           		tst.b	$3A(a0)		; has Sonic touched the	platform?
    9867/    8072 : 670C                		beq.s	Obj1A_Slope	; if not, branch
    9868/    8074 : 4A28 0038           		tst.b	$38(a0)		; has time reached zero?
    9869/    8078 : 6700 0202           		beq.w	Obj1A_Collapse	; if yes, branch
    9870/    807C : 5328 0038           		subq.b	#1,$38(a0)	; subtract 1 from time
    9871/    8080 :                     
    9872/    8080 :                     Obj1A_Slope:
    9873/    8080 : 323C 0030           		move.w	#$30,d1
    9874/    8084 : 45F9 0000 8374      		lea	(Obj1A_SlopeData).l,a2
    9875/    808A : 6100 F2A4           		bsr.w	SlopeObject
    9876/    808E : 6000 73DA           		bra.w	MarkObjGone
    9877/    8092 :                     ; ===========================================================================
    9878/    8092 :                     
    9879/    8092 :                     Obj1A_Touch:				; XREF: Obj1A_Index
    9880/    8092 : 4A28 0038           		tst.b	$38(a0)
    9881/    8096 : 6700 01EA           		beq.w	loc_847A
    9882/    809A : 117C 0001 003A      		move.b	#1,$3A(a0)	; set object as	"touched"
    9883/    80A0 : 5328 0038           		subq.b	#1,$38(a0)
    9884/    80A4 :                     
    9885/    80A4 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
    9886/    80A4 :                     
    9887/    80A4 :                     
    9888/    80A4 :                     Obj1A_WalkOff:				; XREF: Obj1A_Index
    9889/    80A4 : 323C 0030           		move.w	#$30,d1
    9890/    80A8 : 6100 F326           		bsr.w	ExitPlatform
    9891/    80AC : 323C 0030           		move.w	#$30,d1
    9892/    80B0 : 45F9 0000 8374      		lea	(Obj1A_SlopeData).l,a2
    9893/    80B6 : 3428 0008           		move.w	8(a0),d2
    9894/    80BA : 6100 0272           		bsr.w	SlopeObject2
    9895/    80BE : 6000 73AA           		bra.w	MarkObjGone
    9896/    80C2 :                     ; End of function Obj1A_WalkOff
    9897/    80C2 :                     
    9898/    80C2 :                     ; ===========================================================================
    9899/    80C2 :                     
    9900/    80C2 :                     Obj1A_Display:				; XREF: Obj1A_Index
    9901/    80C2 : 4A28 0038           		tst.b	$38(a0)		; has time delay reached zero?
    9902/    80C6 : 674A                		beq.s	Obj1A_TimeZero	; if yes, branch
    9903/    80C8 : 4A28 003A           		tst.b	$3A(a0)		; has Sonic touched the	object?
    9904/    80CC : 6600 000A           		bne.w	loc_82D0	; if yes, branch
    9905/    80D0 : 5328 0038           		subq.b	#1,$38(a0)	; subtract 1 from time
    9906/    80D4 : 6000 52FC           		bra.w	DisplaySprite
    9907/    80D8 :                     ; ===========================================================================
    9908/    80D8 :                     
    9909/    80D8 :                     loc_82D0:				; XREF: Obj1A_Display
    9910/    80D8 : 5328 0038           		subq.b	#1,$38(a0)
    9911/    80DC : 6100 FFC6           		bsr.w	Obj1A_WalkOff
    9912/    80E0 : 43F8 D000           		lea	($FFFFD000).w,a1
    9913/    80E4 : 0829 0003 0022      		btst	#3,$22(a1)
    9914/    80EA : 6718                		beq.s	loc_82FC
    9915/    80EC : 4A28 0038           		tst.b	$38(a0)
    9916/    80F0 : 661E                		bne.s	locret_8308
    9917/    80F2 : 08A9 0003 0022      		bclr	#3,$22(a1)
    9918/    80F8 : 08A9 0005 0022      		bclr	#5,$22(a1)
    9919/    80FE : 137C 0001 001D      		move.b	#1,$1D(a1)
    9920/    8104 :                     
    9921/    8104 :                     loc_82FC:
    9922/    8104 : 117C 0000 003A      		move.b	#0,$3A(a0)
    9923/    810A : 117C 0006 0024      		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
    9924/    8110 :                     
    9925/    8110 :                     locret_8308:
    9926/    8110 : 4E75                		rts	
    9927/    8112 :                     ; ===========================================================================
    9928/    8112 :                     
    9929/    8112 :                     Obj1A_TimeZero:				; XREF: Obj1A_Display
    9930/    8112 : 6100 526C           		bsr.w	ObjectFall
    9931/    8116 : 6100 52BA           		bsr.w	DisplaySprite
    9932/    811A : 4A28 0001           		tst.b	1(a0)
    9933/    811E : 6A02                		bpl.s	Obj1A_Delete
    9934/    8120 : 4E75                		rts	
    9935/    8122 :                     ; ===========================================================================
    9936/    8122 :                     
    9937/    8122 :                     Obj1A_Delete:				; XREF: Obj1A_Index
    9938/    8122 : 6100 52EA           		bsr.w	DeleteObject
    9939/    8126 : 4E75                		rts	
    9940/    8128 :                     ; ===========================================================================
    9941/    8128 :                     ; ---------------------------------------------------------------------------
    9942/    8128 :                     ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
    9943/    8128 :                     ; ---------------------------------------------------------------------------
    9944/    8128 :                     
    9945/    8128 :                     Obj53:					; XREF: Obj_Index
    9946/    8128 : 7000                		moveq	#0,d0
    9947/    812A : 1028 0024           		move.b	$24(a0),d0
    9948/    812E : 323B 0006           		move.w	Obj53_Index(pc,d0.w),d1
    9949/    8132 : 4EFB 1002           		jmp	Obj53_Index(pc,d1.w)
    9950/    8136 :                     ; ===========================================================================
    9951/    8136 : 000C 0056           Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
    9952/    813A : 0098 00BE           		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
    9953/    813E : 011E 00AA           		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
    9954/    8142 :                     ; ===========================================================================
    9955/    8142 :                     
    9956/    8142 :                     Obj53_Main:				; XREF: Obj53_Index
    9957/    8142 : 5428 0024           		addq.b	#2,$24(a0)
    9958/    8146 : 217C 0000 854A      		move.l	#Map_obj53,4(a0)
             814C : 0004             
    9959/    814E : 317C 42B8 0002      		move.w	#$42B8,2(a0)
    9960/    8154 : 0C38 0003 FE10      		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
    9961/    815A : 660A                		bne.s	Obj53_NotSLZ
    9962/    815C : 317C 44E0 0002      		move.w	#$44E0,2(a0)	; SLZ specific code
    9963/    8162 : 5428 001A           		addq.b	#2,$1A(a0)
    9964/    8166 :                     
    9965/    8166 :                     Obj53_NotSLZ:
    9966/    8166 : 0C38 0005 FE10      		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
    9967/    816C : 6606                		bne.s	Obj53_NotSBZ
    9968/    816E : 317C 43F5 0002      		move.w	#$43F5,2(a0)	; SBZ specific code
    9969/    8174 :                     
    9970/    8174 :                     Obj53_NotSBZ:
    9971/    8174 : 0028 0004 0001      		ori.b	#4,1(a0)
    9972/    817A : 117C 0004 0018      		move.b	#4,$18(a0)
    9973/    8180 : 117C 0007 0038      		move.b	#7,$38(a0)
    9974/    8186 : 117C 0044 0019      		move.b	#$44,$19(a0)
    9975/    818C :                     
    9976/    818C :                     Obj53_ChkTouch:				; XREF: Obj53_Index
    9977/    818C : 4A28 003A           		tst.b	$3A(a0)		; has Sonic touched the	object?
    9978/    8190 : 670C                		beq.s	Obj53_Solid	; if not, branch
    9979/    8192 : 4A28 0038           		tst.b	$38(a0)		; has time delay reached zero?
    9980/    8196 : 6700 00C2           		beq.w	Obj53_Collapse	; if yes, branch
    9981/    819A : 5328 0038           		subq.b	#1,$38(a0)	; subtract 1 from time
    9982/    819E :                     
    9983/    819E :                     Obj53_Solid:
    9984/    819E : 323C 0020           		move.w	#$20,d1
    9985/    81A2 : 6100 F0B8           		bsr.w	PlatformObject
    9986/    81A6 : 4A28 0028           		tst.b	$28(a0)
    9987/    81AA : 6A1E                		bpl.s	Obj53_MarkAsGone
    9988/    81AC : 0829 0003 0022      		btst	#3,$22(a1)
    9989/    81B2 : 6716                		beq.s	Obj53_MarkAsGone
    9990/    81B4 : 08A8 0000 0001      		bclr	#0,1(a0)
    9991/    81BA : 3029 0008           		move.w	8(a1),d0
    9992/    81BE : 9068 0008           		sub.w	8(a0),d0
    9993/    81C2 : 6406                		bcc.s	Obj53_MarkAsGone
    9994/    81C4 : 08E8 0000 0001      		bset	#0,1(a0)
    9995/    81CA :                     
    9996/    81CA :                     Obj53_MarkAsGone:
    9997/    81CA : 6000 729E           		bra.w	MarkObjGone
    9998/    81CE :                     ; ===========================================================================
    9999/    81CE :                     
   10000/    81CE :                     Obj53_Touch:				; XREF: Obj53_Index
   10001/    81CE : 4A28 0038           		tst.b	$38(a0)
   10002/    81D2 : 6700 008C           		beq.w	loc_8458
   10003/    81D6 : 117C 0001 003A      		move.b	#1,$3A(a0)	; set object as	"touched"
   10004/    81DC : 5328 0038           		subq.b	#1,$38(a0)
   10005/    81E0 :                     
   10006/    81E0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   10007/    81E0 :                     
   10008/    81E0 :                     
   10009/    81E0 :                     Obj53_WalkOff:				; XREF: Obj53_Index
   10010/    81E0 : 323C 0020           		move.w	#$20,d1
   10011/    81E4 : 6100 F1EA           		bsr.w	ExitPlatform
   10012/    81E8 : 3428 0008           		move.w	8(a0),d2
   10013/    81EC : 6100 F74C           		bsr.w	MvSonicOnPtfm2
   10014/    81F0 : 6000 7278           		bra.w	MarkObjGone
   10015/    81F4 :                     ; End of function Obj53_WalkOff
   10016/    81F4 :                     
   10017/    81F4 :                     ; ===========================================================================
   10018/    81F4 :                     
   10019/    81F4 :                     Obj53_Display:				; XREF: Obj53_Index
   10020/    81F4 : 4A28 0038           		tst.b	$38(a0)		; has time delay reached zero?
   10021/    81F8 : 674A                		beq.s	Obj53_TimeZero	; if yes, branch
   10022/    81FA : 4A28 003A           		tst.b	$3A(a0)		; has Sonic touched the	object?
   10023/    81FE : 6600 000A           		bne.w	loc_8402	; if yes, branch
   10024/    8202 : 5328 0038           		subq.b	#1,$38(a0)	; subtract 1 from time
   10025/    8206 : 6000 51CA           		bra.w	DisplaySprite
   10026/    820A :                     ; ===========================================================================
   10027/    820A :                     
   10028/    820A :                     loc_8402:
   10029/    820A : 5328 0038           		subq.b	#1,$38(a0)
   10030/    820E : 6100 FFD0           		bsr.w	Obj53_WalkOff
   10031/    8212 : 43F8 D000           		lea	($FFFFD000).w,a1
   10032/    8216 : 0829 0003 0022      		btst	#3,$22(a1)
   10033/    821C : 6718                		beq.s	loc_842E
   10034/    821E : 4A28 0038           		tst.b	$38(a0)
   10035/    8222 : 661E                		bne.s	locret_843A
   10036/    8224 : 08A9 0003 0022      		bclr	#3,$22(a1)
   10037/    822A : 08A9 0005 0022      		bclr	#5,$22(a1)
   10038/    8230 : 137C 0001 001D      		move.b	#1,$1D(a1)
   10039/    8236 :                     
   10040/    8236 :                     loc_842E:
   10041/    8236 : 117C 0000 003A      		move.b	#0,$3A(a0)
   10042/    823C : 117C 0006 0024      		move.b	#6,$24(a0)	; run "Obj53_Display" routine
   10043/    8242 :                     
   10044/    8242 :                     locret_843A:
   10045/    8242 : 4E75                		rts	
   10046/    8244 :                     ; ===========================================================================
   10047/    8244 :                     
   10048/    8244 :                     Obj53_TimeZero:				; XREF: Obj53_Display
   10049/    8244 : 6100 513A           		bsr.w	ObjectFall
   10050/    8248 : 6100 5188           		bsr.w	DisplaySprite
   10051/    824C : 4A28 0001           		tst.b	1(a0)
   10052/    8250 : 6A02                		bpl.s	Obj53_Delete
   10053/    8252 : 4E75                		rts	
   10054/    8254 :                     ; ===========================================================================
   10055/    8254 :                     
   10056/    8254 :                     Obj53_Delete:				; XREF: Obj53_Index
   10057/    8254 : 6100 51B8           		bsr.w	DeleteObject
   10058/    8258 : 4E75                		rts	
   10059/    825A :                     ; ===========================================================================
   10060/    825A :                     
   10061/    825A :                     Obj53_Collapse:				; XREF: Obj53_ChkTouch
   10062/    825A : 117C 0000 003A      		move.b	#0,$3A(a0)
   10063/    8260 :                     
   10064/    8260 :                     loc_8458:				; XREF: Obj53_Touch
   10065/    8260 : 49F9 0000 831E      		lea	(Obj53_Data2).l,a4
   10066/    8266 : 0828 0000 0028      		btst	#0,$28(a0)
   10067/    826C : 6706                		beq.s	loc_846C
   10068/    826E : 49F9 0000 8326      		lea	(Obj53_Data3).l,a4
   10069/    8274 :                     
   10070/    8274 :                     loc_846C:
   10071/    8274 : 7207                		moveq	#7,d1
   10072/    8276 : 5228 001A           		addq.b	#1,$1A(a0)
   10073/    827A : 6012                		bra.s	loc_8486
   10074/    827C :                     ; ===========================================================================
   10075/    827C :                     
   10076/    827C :                     Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
   10077/    827C : 117C 0000 003A      		move.b	#0,$3A(a0)
   10078/    8282 :                     
   10079/    8282 :                     loc_847A:				; XREF: Obj1A_Touch
   10080/    8282 : 49F9 0000 8304      		lea	(Obj53_Data1).l,a4
   10081/    8288 : 7218                		moveq	#$18,d1
   10082/    828A : 5428 001A           		addq.b	#2,$1A(a0)
   10083/    828E :                     
   10084/    828E :                     loc_8486:				; XREF: Obj53_Collapse
   10085/    828E : 7000                		moveq	#0,d0
   10086/    8290 : 1028 001A           		move.b	$1A(a0),d0
   10087/    8294 : D040                		add.w	d0,d0
   10088/    8296 : 2668 0004           		movea.l	4(a0),a3
   10089/    829A : D6F3 0000           		adda.w	(a3,d0.w),a3
   10090/    829E : 524B                		addq.w	#1,a3
   10091/    82A0 : 08E8 0005 0001      		bset	#5,1(a0)
   10092/    82A6 : 1810                		move.b	0(a0),d4
   10093/    82A8 : 1A28 0001           		move.b	1(a0),d5
   10094/    82AC : 2248                		movea.l	a0,a1
   10095/    82AE : 6008                		bra.s	loc_84B2
   10096/    82B0 :                     ; ===========================================================================
   10097/    82B0 :                     
   10098/    82B0 :                     loc_84AA:
   10099/    82B0 : 6100 55A6           		bsr.w	SingleObjLoad
   10100/    82B4 : 6640                		bne.s	loc_84F2
   10101/    82B6 : 5A4B                		addq.w	#5,a3
   10102/    82B8 :                     
   10103/    82B8 :                     loc_84B2:
   10104/    82B8 : 137C 0006 0024      		move.b	#6,$24(a1)
   10105/    82BE : 1284                		move.b	d4,0(a1)
   10106/    82C0 : 234B 0004           		move.l	a3,4(a1)
   10107/    82C4 : 1345 0001           		move.b	d5,1(a1)
   10108/    82C8 : 3368 0008 0008      		move.w	8(a0),8(a1)
   10109/    82CE : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   10110/    82D4 : 3368 0002 0002      		move.w	2(a0),2(a1)
   10111/    82DA : 1368 0018 0018      		move.b	$18(a0),$18(a1)
   10112/    82E0 : 1368 0019 0019      		move.b	$19(a0),$19(a1)
   10113/    82E6 : 135C 0038           		move.b	(a4)+,$38(a1)
   10114/    82EA : B3C8                		cmpa.l	a0,a1
   10115/    82EC : 6404                		bcc.s	loc_84EE
   10116/    82EE : 6100 5100           		bsr.w	DisplaySprite2
   10117/    82F2 :                     
   10118/    82F2 :                     loc_84EE:
   10119/    82F2 : 51C9 FFBC           		dbf	d1,loc_84AA
   10120/    82F6 :                     
   10121/    82F6 :                     loc_84F2:
   10122/    82F6 : 6100 50DA           		bsr.w	DisplaySprite
   10123/    82FA : 303C 00B9           		move.w	#$B9,d0
   10124/    82FE : 4EF9 0000 1182      		jmp	(PlaySound_Special).l ;	play collapsing	sound
   10125/    8304 :                     ; ===========================================================================
   10126/    8304 :                     ; ---------------------------------------------------------------------------
   10127/    8304 :                     ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
   10128/    8304 :                     ; ---------------------------------------------------------------------------
   10129/    8304 : 1C18 1410 1A16      Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
             830A : 120E 0A06 1814 
             8310 : 100C 0804          
   10130/    8314 : 1612 0E0A 0602      		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
             831A : 1410 0C00          
   10131/    831E : 1E16 0E06 1A12      Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
             8324 : 0A02             
   10132/    8326 : 161E 1A12 060E      Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
             832C : 0A02             
   10133/    832E :                     
   10134/    832E :                     ; ---------------------------------------------------------------------------
   10135/    832E :                     ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
   10136/    832E :                     ; ---------------------------------------------------------------------------
   10137/    832E :                     
   10138/    832E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   10139/    832E :                     
   10140/    832E :                     
   10141/    832E :                     SlopeObject2:				; XREF: Obj1A_WalkOff; et al
   10142/    832E : 43F8 D000           		lea	($FFFFD000).w,a1
   10143/    8332 : 0829 0003 0022      		btst	#3,$22(a1)
   10144/    8338 : 6738                		beq.s	locret_856E
   10145/    833A : 3029 0008           		move.w	8(a1),d0
   10146/    833E : 9068 0008           		sub.w	8(a0),d0
   10147/    8342 : D041                		add.w	d1,d0
   10148/    8344 : E248                		lsr.w	#1,d0
   10149/    8346 : 0828 0000 0001      		btst	#0,1(a0)
   10150/    834C : 6704                		beq.s	loc_854E
   10151/    834E : 4640                		not.w	d0
   10152/    8350 : D041                		add.w	d1,d0
   10153/    8352 :                     
   10154/    8352 :                     loc_854E:
   10155/    8352 : 7200                		moveq	#0,d1
   10156/    8354 : 1232 0000           		move.b	(a2,d0.w),d1
   10157/    8358 : 3028 000C           		move.w	$C(a0),d0
   10158/    835C : 9041                		sub.w	d1,d0
   10159/    835E : 7200                		moveq	#0,d1
   10160/    8360 : 1229 0016           		move.b	$16(a1),d1
   10161/    8364 : 9041                		sub.w	d1,d0
   10162/    8366 : 3340 000C           		move.w	d0,$C(a1)
   10163/    836A : 9468 0008           		sub.w	8(a0),d2
   10164/    836E : 9569 0008           		sub.w	d2,8(a1)
   10165/    8372 :                     
   10166/    8372 :                     locret_856E:
   10167/    8372 : 4E75                		rts	
   10168/    8374 :                     ; End of function SlopeObject2
   10169/    8374 :                     
   10170/    8374 :                     ; ===========================================================================
   10171/    8374 :                     ; ---------------------------------------------------------------------------
   10172/    8374 :                     ; Collision data for GHZ collapsing ledge
   10173/    8374 :                     ; ---------------------------------------------------------------------------
   10174/    8374 :                     Obj1A_SlopeData:
   10175/    8374 :                     		binclude	"_misc/ghzledge.bin"
   10176/    83A4 : (MACRO)              		even
   10177/    83A4 :                     
   10178/    83A4 :                     ; ---------------------------------------------------------------------------
   10179/    83A4 :                     ; Sprite mappings - GHZ	collapsing ledge
   10180/    83A4 :                     ; ---------------------------------------------------------------------------
   10181/    83A4 :                     Map_obj1A:
   10182/    83A4 :                     	include "_mappings/obj1A.asm"
(1)    1/    83A4 :                     ; ---------------------------------------------------------------------------
(1)    2/    83A4 :                     ; Sprite mappings - GHZ	collapsing ledge
(1)    3/    83A4 :                     ; ---------------------------------------------------------------------------
(1)    4/    83A4 : 0008 0059           		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
(1)    5/    83A8 : 00AA 0128           		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
(1)    6/    83AC : 10                  byte_85A8:	dc.b $10
(1)    7/    83AD : C80E 0057 10        		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
(1)    8/    83B2 : D00D 0063 F0        		dc.b $D0, $D, 0, $63, $F0
(1)    9/    83B7 : E00D 006B 10        		dc.b $E0, $D, 0, $6B, $10
(1)   10/    83BC : E00D 0073 F0        		dc.b $E0, $D, 0, $73, $F0
(1)   11/    83C1 : D806 007B E0        		dc.b $D8, 6, 0,	$7B, $E0
(1)   12/    83C6 : D806 0081 D0        		dc.b $D8, 6, 0,	$81, $D0
(1)   13/    83CB : F00D 0087 10        		dc.b $F0, $D, 0, $87, $10
(1)   14/    83D0 : F00D 008F F0        		dc.b $F0, $D, 0, $8F, $F0
(1)   15/    83D5 : F005 0097 E0        		dc.b $F0, 5, 0,	$97, $E0
(1)   16/    83DA : F005 009B D0        		dc.b $F0, 5, 0,	$9B, $D0
(1)   17/    83DF : 000D 009F 10        		dc.b 0,	$D, 0, $9F, $10
(1)   18/    83E4 : 0005 00A7 00        		dc.b 0,	5, 0, $A7, 0
(1)   19/    83E9 : 000D 00AB E0        		dc.b 0,	$D, 0, $AB, $E0
(1)   20/    83EE : 0005 00B3 D0        		dc.b 0,	5, 0, $B3, $D0
(1)   21/    83F3 : 100D 00AB 10        		dc.b $10, $D, 0, $AB, $10
(1)   22/    83F8 : 1005 00B7 00        		dc.b $10, 5, 0,	$B7, 0
(1)   23/    83FD : 10                  byte_85F9:	dc.b $10
(1)   24/    83FE : C80E 0057 10        		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
(1)   25/    8403 : D00D 0063 F0        		dc.b $D0, $D, 0, $63, $F0
(1)   26/    8408 : E00D 006B 10        		dc.b $E0, $D, 0, $6B, $10
(1)   27/    840D : E00D 0073 F0        		dc.b $E0, $D, 0, $73, $F0
(1)   28/    8412 : D806 007B E0        		dc.b $D8, 6, 0,	$7B, $E0
(1)   29/    8417 : D806 00BB D0        		dc.b $D8, 6, 0,	$BB, $D0
(1)   30/    841C : F00D 0087 10        		dc.b $F0, $D, 0, $87, $10
(1)   31/    8421 : F00D 008F F0        		dc.b $F0, $D, 0, $8F, $F0
(1)   32/    8426 : F005 0097 E0        		dc.b $F0, 5, 0,	$97, $E0
(1)   33/    842B : F005 00C1 D0        		dc.b $F0, 5, 0,	$C1, $D0
(1)   34/    8430 : 000D 009F 10        		dc.b 0,	$D, 0, $9F, $10
(1)   35/    8435 : 0005 00A7 00        		dc.b 0,	5, 0, $A7, 0
(1)   36/    843A : 000D 00AB E0        		dc.b 0,	$D, 0, $AB, $E0
(1)   37/    843F : 0005 00B7 D0        		dc.b 0,	5, 0, $B7, $D0
(1)   38/    8444 : 100D 00AB 10        		dc.b $10, $D, 0, $AB, $10
(1)   39/    8449 : 1005 00B7 00        		dc.b $10, 5, 0,	$B7, 0
(1)   40/    844E : 19                  byte_864A:	dc.b $19
(1)   41/    844F : C806 005D 20        		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
(1)   42/    8454 : C806 0057 10        		dc.b $C8, 6, 0,	$57, $10
(1)   43/    8459 : D005 0067 00        		dc.b $D0, 5, 0,	$67, 0
(1)   44/    845E : D005 0063 F0        		dc.b $D0, 5, 0,	$63, $F0
(1)   45/    8463 : E005 006F 20        		dc.b $E0, 5, 0,	$6F, $20
(1)   46/    8468 : E005 006B 10        		dc.b $E0, 5, 0,	$6B, $10
(1)   47/    846D : E005 0077 00        		dc.b $E0, 5, 0,	$77, 0
(1)   48/    8472 : E005 0073 F0        		dc.b $E0, 5, 0,	$73, $F0
(1)   49/    8477 : D806 007B E0        		dc.b $D8, 6, 0,	$7B, $E0
(1)   50/    847C : D806 0081 D0        		dc.b $D8, 6, 0,	$81, $D0
(1)   51/    8481 : F005 008B 20        		dc.b $F0, 5, 0,	$8B, $20
(1)   52/    8486 : F005 0087 10        		dc.b $F0, 5, 0,	$87, $10
(1)   53/    848B : F005 0093 00        		dc.b $F0, 5, 0,	$93, 0
(1)   54/    8490 : F005 008F F0        		dc.b $F0, 5, 0,	$8F, $F0
(1)   55/    8495 : F005 0097 E0        		dc.b $F0, 5, 0,	$97, $E0
(1)   56/    849A : F005 009B D0        		dc.b $F0, 5, 0,	$9B, $D0
(1)   57/    849F : 0005 008B 20        		dc.b 0,	5, 0, $8B, $20
(1)   58/    84A4 : 0005 008B 10        		dc.b 0,	5, 0, $8B, $10
(1)   59/    84A9 : 0005 00A7 00        		dc.b 0,	5, 0, $A7, 0
(1)   60/    84AE : 0005 00AB F0        		dc.b 0,	5, 0, $AB, $F0
(1)   61/    84B3 : 0005 00AB E0        		dc.b 0,	5, 0, $AB, $E0
(1)   62/    84B8 : 0005 00B3 D0        		dc.b 0,	5, 0, $B3, $D0
(1)   63/    84BD : 1005 00AB 20        		dc.b $10, 5, 0,	$AB, $20
(1)   64/    84C2 : 1005 00AB 10        		dc.b $10, 5, 0,	$AB, $10
(1)   65/    84C7 : 1005 00B7 00        		dc.b $10, 5, 0,	$B7, 0
(1)   66/    84CC : 19                  byte_86C8:	dc.b $19
(1)   67/    84CD : C806 005D 20        		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
(1)   68/    84D2 : C806 0057 10        		dc.b $C8, 6, 0,	$57, $10
(1)   69/    84D7 : D005 0067 00        		dc.b $D0, 5, 0,	$67, 0
(1)   70/    84DC : D005 0063 F0        		dc.b $D0, 5, 0,	$63, $F0
(1)   71/    84E1 : E005 006F 20        		dc.b $E0, 5, 0,	$6F, $20
(1)   72/    84E6 : E005 006B 10        		dc.b $E0, 5, 0,	$6B, $10
(1)   73/    84EB : E005 0077 00        		dc.b $E0, 5, 0,	$77, 0
(1)   74/    84F0 : E005 0073 F0        		dc.b $E0, 5, 0,	$73, $F0
(1)   75/    84F5 : D806 007B E0        		dc.b $D8, 6, 0,	$7B, $E0
(1)   76/    84FA : D806 00BB D0        		dc.b $D8, 6, 0,	$BB, $D0
(1)   77/    84FF : F005 008B 20        		dc.b $F0, 5, 0,	$8B, $20
(1)   78/    8504 : F005 0087 10        		dc.b $F0, 5, 0,	$87, $10
(1)   79/    8509 : F005 0093 00        		dc.b $F0, 5, 0,	$93, 0
(1)   80/    850E : F005 008F F0        		dc.b $F0, 5, 0,	$8F, $F0
(1)   81/    8513 : F005 0097 E0        		dc.b $F0, 5, 0,	$97, $E0
(1)   82/    8518 : F005 00C1 D0        		dc.b $F0, 5, 0,	$C1, $D0
(1)   83/    851D : 0005 008B 20        		dc.b 0,	5, 0, $8B, $20
(1)   84/    8522 : 0005 008B 10        		dc.b 0,	5, 0, $8B, $10
(1)   85/    8527 : 0005 00A7 00        		dc.b 0,	5, 0, $A7, 0
(1)   86/    852C : 0005 00AB F0        		dc.b 0,	5, 0, $AB, $F0
(1)   87/    8531 : 0005 00AB E0        		dc.b 0,	5, 0, $AB, $E0
(1)   88/    8536 : 0005 00B7 D0        		dc.b 0,	5, 0, $B7, $D0
(1)   89/    853B : 1005 00AB 20        		dc.b $10, 5, 0,	$AB, $20
(1)   90/    8540 : 1005 00AB 10        		dc.b $10, 5, 0,	$AB, $10
(1)   91/    8545 : 1005 00B7 00        		dc.b $10, 5, 0,	$B7, 0
(1)   92/    854A : (MACRO)              		even
   10183/    854A :                     
   10184/    854A :                     ; ---------------------------------------------------------------------------
   10185/    854A :                     ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
   10186/    854A :                     ; ---------------------------------------------------------------------------
   10187/    854A :                     Map_obj53:
   10188/    854A :                     	include "_mappings/obj53.asm"
(1)    1/    854A :                     ; ---------------------------------------------------------------------------
(1)    2/    854A :                     ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
(1)    3/    854A :                     ; ---------------------------------------------------------------------------
(1)    4/    854A : 0008 001D           		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
(1)    5/    854E : 0046 005B           		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
(1)    6/    8552 : 04                  byte_874E:	dc.b 4
(1)    7/    8553 : F80D 0000 E0        		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
(1)    8/    8558 : 080D 0000 E0        		dc.b 8,	$D, 0, 0, $E0
(1)    9/    855D : F80D 0000 00        		dc.b $F8, $D, 0, 0, 0
(1)   10/    8562 : 080D 0000 00        		dc.b 8,	$D, 0, 0, 0
(1)   11/    8567 : 08                  byte_8763:	dc.b 8
(1)   12/    8568 : F805 0000 E0        		dc.b $F8, 5, 0,	0, $E0
(1)   13/    856D : F805 0000 F0        		dc.b $F8, 5, 0,	0, $F0
(1)   14/    8572 : F805 0000 00        		dc.b $F8, 5, 0,	0, 0
(1)   15/    8577 : F805 0000 10        		dc.b $F8, 5, 0,	0, $10
(1)   16/    857C : 0805 0000 E0        		dc.b 8,	5, 0, 0, $E0
(1)   17/    8581 : 0805 0000 F0        		dc.b 8,	5, 0, 0, $F0
(1)   18/    8586 : 0805 0000 00        		dc.b 8,	5, 0, 0, 0
(1)   19/    858B : 0805 0000 10        		dc.b 8,	5, 0, 0, $10
(1)   20/    8590 : 04                  byte_878C:	dc.b 4
(1)   21/    8591 : F80D 0000 E0        		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
(1)   22/    8596 : 080D 0008 E0        		dc.b 8,	$D, 0, 8, $E0
(1)   23/    859B : F80D 0000 00        		dc.b $F8, $D, 0, 0, 0
(1)   24/    85A0 : 080D 0008 00        		dc.b 8,	$D, 0, 8, 0
(1)   25/    85A5 : 08                  byte_87A1:	dc.b 8
(1)   26/    85A6 : F805 0000 E0        		dc.b $F8, 5, 0,	0, $E0
(1)   27/    85AB : F805 0004 F0        		dc.b $F8, 5, 0,	4, $F0
(1)   28/    85B0 : F805 0000 00        		dc.b $F8, 5, 0,	0, 0
(1)   29/    85B5 : F805 0004 10        		dc.b $F8, 5, 0,	4, $10
(1)   30/    85BA : 0805 0008 E0        		dc.b 8,	5, 0, 8, $E0
(1)   31/    85BF : 0805 000C F0        		dc.b 8,	5, 0, $C, $F0
(1)   32/    85C4 : 0805 0008 00        		dc.b 8,	5, 0, 8, 0
(1)   33/    85C9 : 0805 000C 10        		dc.b 8,	5, 0, $C, $10
(1)   34/    85CE : (MACRO)              		even
   10189/    85CE :                     
   10190/    85CE :                     ; ===========================================================================
   10191/    85CE :                     ; ---------------------------------------------------------------------------
   10192/    85CE :                     ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
   10193/    85CE :                     ; ---------------------------------------------------------------------------
   10194/    85CE :                     
   10195/    85CE :                     Obj1C:					; XREF: Obj_Index
   10196/    85CE : 7000                		moveq	#0,d0
   10197/    85D0 : 1028 0024           		move.b	$24(a0),d0
   10198/    85D4 : 323B 0006           		move.w	Obj1C_Index(pc,d0.w),d1
   10199/    85D8 : 4EFB 1002           		jmp	Obj1C_Index(pc,d1.w)
   10200/    85DC :                     ; ===========================================================================
   10201/    85DC : 0004                Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
   10202/    85DE : 0034                		dc.w Obj1C_ChkDel-Obj1C_Index
   10203/    85E0 :                     ; ===========================================================================
   10204/    85E0 :                     
   10205/    85E0 :                     Obj1C_Main:				; XREF: Obj1C_Index
   10206/    85E0 : 5428 0024           		addq.b	#2,$24(a0)
   10207/    85E4 : 7000                		moveq	#0,d0
   10208/    85E6 : 1028 0028           		move.b	$28(a0),d0	; copy object type to d0
   10209/    85EA : C0FC 000A           		mulu.w	#$A,d0		; multiply by $A
   10210/    85EE : 43FB 0042           		lea	Obj1C_Var(pc,d0.w),a1
   10211/    85F2 : 2159 0004           		move.l	(a1)+,4(a0)
   10212/    85F6 : 3159 0002           		move.w	(a1)+,2(a0)
   10213/    85FA : 0028 0004 0001      		ori.b	#4,1(a0)
   10214/    8600 : 1159 001A           		move.b	(a1)+,$1A(a0)
   10215/    8604 : 1159 0019           		move.b	(a1)+,$19(a0)
   10216/    8608 : 1159 0018           		move.b	(a1)+,$18(a0)
   10217/    860C : 1159 0020           		move.b	(a1)+,$20(a0)
   10218/    8610 :                     
   10219/    8610 :                     Obj1C_ChkDel:				; XREF: Obj1C_Index
   10220/    8610 : 3028 0008           		move.w	8(a0),d0
   10221/    8614 : 0240 FF80           		andi.w	#$FF80,d0
   10222/    8618 : 3238 F700           		move.w	($FFFFF700).w,d1
   10223/    861C : 0441 0080           		subi.w	#$80,d1
   10224/    8620 : 0241 FF80           		andi.w	#$FF80,d1
   10225/    8624 : 9041                		sub.w	d1,d0
   10226/    8626 : 0C40 0280           		cmpi.w	#$280,d0
   10227/    862A : 6200 4DE2           		bhi.w	DeleteObject
   10228/    862E : 6000 4DA2           		bra.w	DisplaySprite
   10229/    8632 :                     ; ===========================================================================
   10230/    8632 :                     ; ---------------------------------------------------------------------------
   10231/    8632 :                     ; Variables for	object $1C are stored in an array
   10232/    8632 :                     ; ---------------------------------------------------------------------------
   10233/    8632 : 0000 865A           Obj1C_Var:	dc.l Map_obj1C		; mappings address
   10234/    8636 : 44D8                		dc.w $44D8		; VRAM setting
   10235/    8638 : 0008 0200           		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
   10236/    863C : 0000 865A           		dc.l Map_obj1C
   10237/    8640 : 44D8                		dc.w $44D8
   10238/    8642 : 0008 0200           		dc.b 0,	8, 2, 0
   10239/    8646 : 0000 865A           		dc.l Map_obj1C
   10240/    864A : 44D8                		dc.w $44D8
   10241/    864C : 0008 0200           		dc.b 0,	8, 2, 0
   10242/    8650 : 0000 7744           		dc.l Map_obj11
   10243/    8654 : 438E                		dc.w $438E
   10244/    8656 : 0110 0100           		dc.b 1,	$10, 1,	0
   10245/    865A :                     ; ---------------------------------------------------------------------------
   10246/    865A :                     ; Sprite mappings - SLZ	lava thrower
   10247/    865A :                     ; ---------------------------------------------------------------------------
   10248/    865A :                     Map_obj1C:
   10249/    865A :                     	include "_mappings/obj1C.asm"
(1)    1/    865A :                     ; ---------------------------------------------------------------------------
(1)    2/    865A :                     ; Sprite mappings - SLZ	lava thrower
(1)    3/    865A :                     ; ---------------------------------------------------------------------------
(1)    4/    865A : 0002                		dc.w byte_8858-Map_obj1C
(1)    5/    865C : 01                  byte_8858:	dc.b 1
(1)    6/    865D : F007 0000 F8        		dc.b $F0, 7, 0,	0, $F8
(1)    7/    8662 : (MACRO)              		even
   10250/    8662 :                     
   10251/    8662 :                     ; ===========================================================================
   10252/    8662 :                     ; ---------------------------------------------------------------------------
   10253/    8662 :                     ; Object 1D - switch that activates when Sonic touches it
   10254/    8662 :                     ; (this	is not used anywhere in	the game)
   10255/    8662 :                     ; ---------------------------------------------------------------------------
   10256/    8662 :                     
   10257/    8662 :                     Obj1D:					; XREF: Obj_Index
   10258/    8662 : 7000                		moveq	#0,d0
   10259/    8664 : 1028 0024           		move.b	$24(a0),d0
   10260/    8668 : 323B 0006           		move.w	Obj1D_Index(pc,d0.w),d1
   10261/    866C : 4EFB 1002           		jmp	Obj1D_Index(pc,d1.w)
   10262/    8670 :                     ; ===========================================================================
   10263/    8670 : 0006                Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
   10264/    8672 : 0030                		dc.w Obj1D_Action-Obj1D_Index
   10265/    8674 : 006E                		dc.w Obj1D_Delete-Obj1D_Index
   10266/    8676 :                     ; ===========================================================================
   10267/    8676 :                     
   10268/    8676 :                     Obj1D_Main:				; XREF: Obj1D_Index
   10269/    8676 : 5428 0024           		addq.b	#2,$24(a0)
   10270/    867A : 217C 0000 8720      		move.l	#Map_obj1D,4(a0)
             8680 : 0004             
   10271/    8682 : 317C 4000 0002      		move.w	#$4000,2(a0)
   10272/    8688 : 117C 0004 0001      		move.b	#4,1(a0)
   10273/    868E : 3168 000C 0030      		move.w	$C(a0),$30(a0)	; save position	on y-axis
   10274/    8694 : 117C 0010 0019      		move.b	#$10,$19(a0)
   10275/    869A : 117C 0005 0018      		move.b	#5,$18(a0)
   10276/    86A0 :                     
   10277/    86A0 :                     Obj1D_Action:				; XREF: Obj1D_Index
   10278/    86A0 : 3168 0030 000C      		move.w	$30(a0),$C(a0)	; restore position on y-axis
   10279/    86A6 : 323C 0010           		move.w	#$10,d1
   10280/    86AA : 6100 0038           		bsr.w	Obj1D_ChkTouch
   10281/    86AE : 670A                		beq.s	Obj1D_ChkDel
   10282/    86B0 : 5468 000C           		addq.w	#2,$C(a0)	; move object 2	pixels
   10283/    86B4 : 7001                		moveq	#1,d0
   10284/    86B6 : 31C0 F7E0           		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
   10285/    86BA :                     
   10286/    86BA :                     Obj1D_ChkDel:
   10287/    86BA : 6100 4D16           		bsr.w	DisplaySprite
   10288/    86BE : 3028 0008           		move.w	8(a0),d0
   10289/    86C2 : 0240 FF80           		andi.w	#$FF80,d0
   10290/    86C6 : 3238 F700           		move.w	($FFFFF700).w,d1
   10291/    86CA : 0441 0080           		subi.w	#$80,d1
   10292/    86CE : 0241 FF80           		andi.w	#$FF80,d1
   10293/    86D2 : 9041                		sub.w	d1,d0
   10294/    86D4 : 0C40 0280           		cmpi.w	#$280,d0
   10295/    86D8 : 6200 0004           		bhi.w	Obj1D_Delete
   10296/    86DC : 4E75                		rts	
   10297/    86DE :                     ; ===========================================================================
   10298/    86DE :                     
   10299/    86DE :                     Obj1D_Delete:				; XREF: Obj1D_Index
   10300/    86DE : 6100 4D2E           		bsr.w	DeleteObject
   10301/    86E2 : 4E75                		rts	
   10302/    86E4 :                     ; ---------------------------------------------------------------------------
   10303/    86E4 :                     ; Subroutine to	check if Sonic touches the object
   10304/    86E4 :                     ; ---------------------------------------------------------------------------
   10305/    86E4 :                     
   10306/    86E4 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   10307/    86E4 :                     
   10308/    86E4 :                     
   10309/    86E4 :                     Obj1D_ChkTouch:				; XREF: Obj1D_Action
   10310/    86E4 : 43F8 D000           		lea	($FFFFD000).w,a1
   10311/    86E8 : 3029 0008           		move.w	8(a1),d0
   10312/    86EC : 9068 0008           		sub.w	8(a0),d0
   10313/    86F0 : D041                		add.w	d1,d0
   10314/    86F2 : 6B28                		bmi.s	loc_8918
   10315/    86F4 : D241                		add.w	d1,d1
   10316/    86F6 : B041                		cmp.w	d1,d0
   10317/    86F8 : 6422                		bcc.s	loc_8918
   10318/    86FA : 3429 000C           		move.w	$C(a1),d2
   10319/    86FE : 1229 0016           		move.b	$16(a1),d1
   10320/    8702 : 4881                		ext.w	d1
   10321/    8704 : D242                		add.w	d2,d1
   10322/    8706 : 3028 000C           		move.w	$C(a0),d0
   10323/    870A : 0440 0010           		subi.w	#$10,d0
   10324/    870E : 9041                		sub.w	d1,d0
   10325/    8710 : 620A                		bhi.s	loc_8918
   10326/    8712 : 0C40 FFF0           		cmpi.w	#-$10,d0
   10327/    8716 : 6504                		bcs.s	loc_8918
   10328/    8718 : 70FF                		moveq	#-1,d0
   10329/    871A : 4E75                		rts	
   10330/    871C :                     ; ===========================================================================
   10331/    871C :                     
   10332/    871C :                     loc_8918:
   10333/    871C : 7000                		moveq	#0,d0
   10334/    871E : 4E75                		rts	
   10335/    8720 :                     ; End of function Obj1D_ChkTouch
   10336/    8720 :                     
   10337/    8720 :                     ; ===========================================================================
   10338/    8720 :                     ; ---------------------------------------------------------------------------
   10339/    8720 :                     ; Sprite mappings - object 1D
   10340/    8720 :                     ; ---------------------------------------------------------------------------
   10341/    8720 :                     Map_obj1D:
   10342/    8720 :                     	include "_mappings/obj1D.asm"
(1)    1/    8720 :                     ; ---------------------------------------------------------------------------
(1)    2/    8720 :                     ; Sprite mappings - object 1D
(1)    3/    8720 :                     ; ---------------------------------------------------------------------------
(1)    4/    8720 : 0002                		dc.w byte_891E-Map_obj1D
(1)    5/    8722 : 04                  byte_891E:	dc.b 4
(1)    6/    8723 : E807 0054 F0        		dc.b $E8, 7, 0,	$54, $F0
(1)    7/    8728 : 0805 005C F0        		dc.b 8,	5, 0, $5C, $F0
(1)    8/    872D : E807 0054 00        		dc.b $E8, 7, 0,	$54, 0
(1)    9/    8732 : 0805 005C 00        		dc.b 8,	5, 0, $5C, 0
(1)   10/    8737 : (MACRO)              		even
(1)   10/    8737 : 00                                          dc.b 0 ;ds.b 1 
   10343/    8738 :                     
   10344/    8738 :                     ; ===========================================================================
   10345/    8738 :                     ; ---------------------------------------------------------------------------
   10346/    8738 :                     ; Object 2A - doors (SBZ)
   10347/    8738 :                     ; ---------------------------------------------------------------------------
   10348/    8738 :                     
   10349/    8738 :                     Obj2A:					; XREF: Obj_Index
   10350/    8738 : 7000                		moveq	#0,d0
   10351/    873A : 1028 0024           		move.b	$24(a0),d0
   10352/    873E : 323B 0006           		move.w	Obj2A_Index(pc,d0.w),d1
   10353/    8742 : 4EFB 1002           		jmp	Obj2A_Index(pc,d1.w)
   10354/    8746 :                     ; ===========================================================================
   10355/    8746 : 0004                Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
   10356/    8748 : 0028                		dc.w Obj2A_OpenShut-Obj2A_Index
   10357/    874A :                     ; ===========================================================================
   10358/    874A :                     
   10359/    874A :                     Obj2A_Main:				; XREF: Obj2A_Index
   10360/    874A : 5428 0024           		addq.b	#2,$24(a0)
   10361/    874E : 217C 0000 87F0      		move.l	#Map_obj2A,4(a0)
             8754 : 0004             
   10362/    8756 : 317C 42E8 0002      		move.w	#$42E8,2(a0)
   10363/    875C : 0028 0004 0001      		ori.b	#4,1(a0)
   10364/    8762 : 117C 0008 0019      		move.b	#8,$19(a0)
   10365/    8768 : 117C 0004 0018      		move.b	#4,$18(a0)
   10366/    876E :                     
   10367/    876E :                     Obj2A_OpenShut:				; XREF: Obj2A_Index
   10368/    876E : 323C 0040           		move.w	#$40,d1
   10369/    8772 : 4228 001C           		clr.b	$1C(a0)		; use "closing"	animation
   10370/    8776 : 3038 D008           		move.w	($FFFFD008).w,d0
   10371/    877A : D041                		add.w	d1,d0
   10372/    877C : B068 0008           		cmp.w	8(a0),d0
   10373/    8780 : 652A                		bcs.s	Obj2A_Animate
   10374/    8782 : 9041                		sub.w	d1,d0
   10375/    8784 : 9041                		sub.w	d1,d0
   10376/    8786 : B068 0008           		cmp.w	8(a0),d0
   10377/    878A : 6420                		bcc.s	Obj2A_Animate
   10378/    878C : D041                		add.w	d1,d0
   10379/    878E : B068 0008           		cmp.w	8(a0),d0
   10380/    8792 : 640A                		bcc.s	loc_899A
   10381/    8794 : 0828 0000 0022      		btst	#0,$22(a0)
   10382/    879A : 6610                		bne.s	Obj2A_Animate
   10383/    879C : 6008                		bra.s	Obj2A_Open
   10384/    879E :                     ; ===========================================================================
   10385/    879E :                     
   10386/    879E :                     loc_899A:				; XREF: Obj2A_OpenShut
   10387/    879E : 0828 0000 0022      		btst	#0,$22(a0)
   10388/    87A4 : 6706                		beq.s	Obj2A_Animate
   10389/    87A6 :                     
   10390/    87A6 :                     Obj2A_Open:				; XREF: Obj2A_OpenShut
   10391/    87A6 : 117C 0001 001C      		move.b	#1,$1C(a0)	; use "opening"	animation
   10392/    87AC :                     
   10393/    87AC :                     Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
   10394/    87AC : 43F9 0000 87D4      		lea	(Ani_obj2A).l,a1
   10395/    87B2 : 6100 1D4A           		bsr.w	AnimateSprite
   10396/    87B6 : 4A28 001A           		tst.b	$1A(a0)		; is the door open?
   10397/    87BA : 6614                		bne.s	Obj2A_MarkAsUsed ; if yes, branch
   10398/    87BC : 323C 0011           		move.w	#$11,d1
   10399/    87C0 : 343C 0020           		move.w	#$20,d2
   10400/    87C4 : 3602                		move.w	d2,d3
   10401/    87C6 : 5243                		addq.w	#1,d3
   10402/    87C8 : 3828 0008           		move.w	8(a0),d4
   10403/    87CC : 6100 6FC4           		bsr.w	SolidObject
   10404/    87D0 :                     
   10405/    87D0 :                     Obj2A_MarkAsUsed:
   10406/    87D0 : 6000 6C98           		bra.w	MarkObjGone
   10407/    87D4 :                     ; ===========================================================================
   10408/    87D4 :                     Ani_obj2A:
   10409/    87D4 :                     	include "_animations/obj2A.asm"
(1)    1/    87D4 :                     ; ---------------------------------------------------------------------------
(1)    2/    87D4 :                     ; Animation script - doors (SBZ)
(1)    3/    87D4 :                     ; ---------------------------------------------------------------------------
(1)    4/    87D4 : 0004                		dc.w Ani_obj2A_Shut-Ani_obj2A
(1)    5/    87D6 : 0010                		dc.w Ani_obj2A_Open-Ani_obj2A
(1)    6/    87D8 : 0008 0706 0504      Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
             87DE : 0302 0100 FE01    
(1)    7/    87E4 : 0000 0102 0304      Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
             87EA : 0506 0708 FE01    
(1)    8/    87F0 : (MACRO)              		even
   10410/    87F0 :                     
   10411/    87F0 :                     ; ---------------------------------------------------------------------------
   10412/    87F0 :                     ; Sprite mappings - doors (SBZ)
   10413/    87F0 :                     ; ---------------------------------------------------------------------------
   10414/    87F0 :                     Map_obj2A:
   10415/    87F0 :                     	include "_mappings/obj2A.asm"
(1)    1/    87F0 :                     ; ---------------------------------------------------------------------------
(1)    2/    87F0 :                     ; Sprite mappings - doors (SBZ)
(1)    3/    87F0 :                     ; ---------------------------------------------------------------------------
(1)    4/    87F0 : 0012 001D           		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
(1)    5/    87F4 : 0028 0033           		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
(1)    6/    87F8 : 003E 0049           		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
(1)    7/    87FC : 0054 005F           		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
(1)    8/    8800 : 006A                		dc.w byte_8A56-Map_obj2A
(1)    9/    8802 : 02                  byte_89FE:	dc.b 2
(1)   10/    8803 : E007 0800 F8        		dc.b $E0, 7, 8,	0, $F8	; door closed
(1)   11/    8808 : 0007 0800 F8        		dc.b 0,	7, 8, 0, $F8
(1)   12/    880D : 02                  byte_8A09:	dc.b 2
(1)   13/    880E : DC07 0800 F8        		dc.b $DC, 7, 8,	0, $F8
(1)   14/    8813 : 0407 0800 F8        		dc.b 4,	7, 8, 0, $F8
(1)   15/    8818 : 02                  byte_8A14:	dc.b 2
(1)   16/    8819 : D807 0800 F8        		dc.b $D8, 7, 8,	0, $F8
(1)   17/    881E : 0807 0800 F8        		dc.b 8,	7, 8, 0, $F8
(1)   18/    8823 : 02                  byte_8A1F:	dc.b 2
(1)   19/    8824 : D407 0800 F8        		dc.b $D4, 7, 8,	0, $F8
(1)   20/    8829 : 0C07 0800 F8        		dc.b $C, 7, 8, 0, $F8
(1)   21/    882E : 02                  byte_8A2A:	dc.b 2
(1)   22/    882F : D007 0800 F8        		dc.b $D0, 7, 8,	0, $F8
(1)   23/    8834 : 1007 0800 F8        		dc.b $10, 7, 8,	0, $F8
(1)   24/    8839 : 02                  byte_8A35:	dc.b 2
(1)   25/    883A : CC07 0800 F8        		dc.b $CC, 7, 8,	0, $F8
(1)   26/    883F : 1407 0800 F8        		dc.b $14, 7, 8,	0, $F8
(1)   27/    8844 : 02                  byte_8A40:	dc.b 2
(1)   28/    8845 : C807 0800 F8        		dc.b $C8, 7, 8,	0, $F8
(1)   29/    884A : 1807 0800 F8        		dc.b $18, 7, 8,	0, $F8
(1)   30/    884F : 02                  byte_8A4B:	dc.b 2
(1)   31/    8850 : C407 0800 F8        		dc.b $C4, 7, 8,	0, $F8
(1)   32/    8855 : 1C07 0800 F8        		dc.b $1C, 7, 8,	0, $F8
(1)   33/    885A : 02                  byte_8A56:	dc.b 2
(1)   34/    885B : C007 0800 F8        		dc.b $C0, 7, 8,	0, $F8	; door fully open
(1)   35/    8860 : 2007 0800 F8        		dc.b $20, 7, 8,	0, $F8
(1)   36/    8865 : (MACRO)              		even
(1)   36/    8865 : 00                                          dc.b 0 ;ds.b 1 
   10416/    8866 :                     
   10417/    8866 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   10418/    8866 :                     
   10419/    8866 :                     
   10420/    8866 :                     Obj44_SolidWall:			; XREF: Obj44_Solid
   10421/    8866 : 6100 0076           		bsr.w	Obj44_SolidWall2
   10422/    886A : 6740                		beq.s	loc_8AA8
   10423/    886C : 6B00 005A           		bmi.w	loc_8AC4
   10424/    8870 : 4A40                		tst.w	d0
   10425/    8872 : 6700 0022           		beq.w	loc_8A92
   10426/    8876 : 6B08                		bmi.s	loc_8A7C
   10427/    8878 : 4A69 0010           		tst.w	$10(a1)
   10428/    887C : 6B18                		bmi.s	loc_8A92
   10429/    887E : 6006                		bra.s	loc_8A82
   10430/    8880 :                     ; ===========================================================================
   10431/    8880 :                     
   10432/    8880 :                     loc_8A7C:
   10433/    8880 : 4A69 0010           		tst.w	$10(a1)
   10434/    8884 : 6A10                		bpl.s	loc_8A92
   10435/    8886 :                     
   10436/    8886 :                     loc_8A82:
   10437/    8886 : 9169 0008           		sub.w	d0,8(a1)
   10438/    888A : 337C 0000 0014      		move.w	#0,$14(a1)
   10439/    8890 : 337C 0000 0010      		move.w	#0,$10(a1)
   10440/    8896 :                     
   10441/    8896 :                     loc_8A92:
   10442/    8896 : 0829 0001 0022      		btst	#1,$22(a1)
   10443/    889C : 661C                		bne.s	loc_8AB6
   10444/    889E : 08E9 0005 0022      		bset	#5,$22(a1)
   10445/    88A4 : 08E8 0005 0022      		bset	#5,$22(a0)
   10446/    88AA : 4E75                		rts	
   10447/    88AC :                     ; ===========================================================================
   10448/    88AC :                     
   10449/    88AC :                     loc_8AA8:
   10450/    88AC : 0828 0005 0022      		btst	#5,$22(a0)
   10451/    88B2 : 6712                		beq.s	locret_8AC2
   10452/    88B4 : 337C 0001 001C      		move.w	#1,$1C(a1)
   10453/    88BA :                     
   10454/    88BA :                     loc_8AB6:
   10455/    88BA : 08A8 0005 0022      		bclr	#5,$22(a0)
   10456/    88C0 : 08A9 0005 0022      		bclr	#5,$22(a1)
   10457/    88C6 :                     
   10458/    88C6 :                     locret_8AC2:
   10459/    88C6 : 4E75                		rts	
   10460/    88C8 :                     ; ===========================================================================
   10461/    88C8 :                     
   10462/    88C8 :                     loc_8AC4:
   10463/    88C8 : 4A69 0012           		tst.w	$12(a1)
   10464/    88CC : 6A0E                		bpl.s	locret_8AD8
   10465/    88CE : 4A43                		tst.w	d3
   10466/    88D0 : 6A0A                		bpl.s	locret_8AD8
   10467/    88D2 : 9769 000C           		sub.w	d3,$C(a1)
   10468/    88D6 : 337C 0000 0012      		move.w	#0,$12(a1)
   10469/    88DC :                     
   10470/    88DC :                     locret_8AD8:
   10471/    88DC : 4E75                		rts	
   10472/    88DE :                     ; End of function Obj44_SolidWall
   10473/    88DE :                     
   10474/    88DE :                     
   10475/    88DE :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   10476/    88DE :                     
   10477/    88DE :                     
   10478/    88DE :                     Obj44_SolidWall2:			; XREF: Obj44_SolidWall
   10479/    88DE : 43F8 D000           		lea	($FFFFD000).w,a1
   10480/    88E2 : 3029 0008           		move.w	8(a1),d0
   10481/    88E6 : 9068 0008           		sub.w	8(a0),d0
   10482/    88EA : D041                		add.w	d1,d0
   10483/    88EC : 6B5E                		bmi.s	loc_8B48
   10484/    88EE : 3601                		move.w	d1,d3
   10485/    88F0 : D643                		add.w	d3,d3
   10486/    88F2 : B043                		cmp.w	d3,d0
   10487/    88F4 : 6256                		bhi.s	loc_8B48
   10488/    88F6 : 1629 0016           		move.b	$16(a1),d3
   10489/    88FA : 4883                		ext.w	d3
   10490/    88FC : D443                		add.w	d3,d2
   10491/    88FE : 3629 000C           		move.w	$C(a1),d3
   10492/    8902 : 9668 000C           		sub.w	$C(a0),d3
   10493/    8906 : D642                		add.w	d2,d3
   10494/    8908 : 6B42                		bmi.s	loc_8B48
   10495/    890A : 3802                		move.w	d2,d4
   10496/    890C : D844                		add.w	d4,d4
   10497/    890E : B644                		cmp.w	d4,d3
   10498/    8910 : 643A                		bcc.s	loc_8B48
   10499/    8912 : 4A38 F7C8           		tst.b	($FFFFF7C8).w
   10500/    8916 : 6B34                		bmi.s	loc_8B48
   10501/    8918 : 0C38 0006 D024      		cmpi.b	#6,($FFFFD024).w
   10502/    891E : 642C                		bcc.s	loc_8B48
   10503/    8920 : 4A78 FE08           		tst.w	($FFFFFE08).w
   10504/    8924 : 6626                		bne.s	loc_8B48
   10505/    8926 : 3A00                		move.w	d0,d5
   10506/    8928 : B240                		cmp.w	d0,d1
   10507/    892A : 6408                		bcc.s	loc_8B30
   10508/    892C : D241                		add.w	d1,d1
   10509/    892E : 9041                		sub.w	d1,d0
   10510/    8930 : 3A00                		move.w	d0,d5
   10511/    8932 : 4445                		neg.w	d5
   10512/    8934 :                     
   10513/    8934 :                     loc_8B30:
   10514/    8934 : 3203                		move.w	d3,d1
   10515/    8936 : B443                		cmp.w	d3,d2
   10516/    8938 : 6406                		bcc.s	loc_8B3C
   10517/    893A : 9644                		sub.w	d4,d3
   10518/    893C : 3203                		move.w	d3,d1
   10519/    893E : 4441                		neg.w	d1
   10520/    8940 :                     
   10521/    8940 :                     loc_8B3C:
   10522/    8940 : BA41                		cmp.w	d1,d5
   10523/    8942 : 6204                		bhi.s	loc_8B44
   10524/    8944 : 7801                		moveq	#1,d4
   10525/    8946 : 4E75                		rts	
   10526/    8948 :                     ; ===========================================================================
   10527/    8948 :                     
   10528/    8948 :                     loc_8B44:
   10529/    8948 : 78FF                		moveq	#-1,d4
   10530/    894A : 4E75                		rts	
   10531/    894C :                     ; ===========================================================================
   10532/    894C :                     
   10533/    894C :                     loc_8B48:
   10534/    894C : 7800                		moveq	#0,d4
   10535/    894E : 4E75                		rts	
   10536/    8950 :                     ; End of function Obj44_SolidWall2
   10537/    8950 :                     
   10538/    8950 :                     ; ===========================================================================
   10539/    8950 :                     ; ---------------------------------------------------------------------------
   10540/    8950 :                     ; Object 1E - Ball Hog enemy (SBZ)
   10541/    8950 :                     ; ---------------------------------------------------------------------------
   10542/    8950 :                     
   10543/    8950 :                     Obj1E:					; XREF: Obj_Index
   10544/    8950 : 7000                		moveq	#0,d0
   10545/    8952 : 1028 0024           		move.b	$24(a0),d0
   10546/    8956 : 323B 0006           		move.w	Obj1E_Index(pc,d0.w),d1
   10547/    895A : 4EFB 1002           		jmp	Obj1E_Index(pc,d1.w)
   10548/    895E :                     ; ===========================================================================
   10549/    895E : 0004                Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
   10550/    8960 : 0054                		dc.w Obj1E_Action-Obj1E_Index
   10551/    8962 :                     ; ===========================================================================
   10552/    8962 :                     
   10553/    8962 :                     Obj1E_Main:				; XREF: Obj1E_Index
   10554/    8962 : 117C 0013 0016      		move.b	#$13,$16(a0)
   10555/    8968 : 117C 0008 0017      		move.b	#8,$17(a0)
   10556/    896E : 217C 0000 8C5E      		move.l	#Map_obj1E,4(a0)
             8974 : 0004             
   10557/    8976 : 317C 2302 0002      		move.w	#$2302,2(a0)
   10558/    897C : 117C 0004 0001      		move.b	#4,1(a0)
   10559/    8982 : 117C 0004 0018      		move.b	#4,$18(a0)
   10560/    8988 : 117C 0005 0020      		move.b	#5,$20(a0)
   10561/    898E : 117C 000C 0019      		move.b	#$C,$19(a0)
   10562/    8994 : 6100 49EA           		bsr.w	ObjectFall
   10563/    8998 : 4EB9 0001 4C08      		jsr	ObjHitFloor
   10564/    899E : 4A41                		tst.w	d1
   10565/    89A0 : 6A0E                		bpl.s	locret_8BAC
   10566/    89A2 : D368 000C           		add.w	d1,$C(a0)
   10567/    89A6 : 317C 0000 0012      		move.w	#0,$12(a0)
   10568/    89AC : 5428 0024           		addq.b	#2,$24(a0)
   10569/    89B0 :                     
   10570/    89B0 :                     locret_8BAC:
   10571/    89B0 : 4E75                		rts	
   10572/    89B2 :                     ; ===========================================================================
   10573/    89B2 :                     
   10574/    89B2 :                     Obj1E_Action:				; XREF: Obj1E_Index
   10575/    89B2 : 43F9 0000 8C44      		lea	(Ani_obj1E).l,a1
   10576/    89B8 : 6100 1B44           		bsr.w	AnimateSprite
   10577/    89BC : 0C28 0001 001A      		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
   10578/    89C2 : 6608                		bne.s	Obj1E_SetBall	; if not, branch
   10579/    89C4 : 4A28 0032           		tst.b	$32(a0)		; is it	set to launch cannonball?
   10580/    89C8 : 670A                		beq.s	Obj1E_MakeBall	; if yes, branch
   10581/    89CA : 6004                		bra.s	Obj1E_MarkAsGone
   10582/    89CC :                     ; ===========================================================================
   10583/    89CC :                     
   10584/    89CC :                     Obj1E_SetBall:				; XREF: Obj1E_Action
   10585/    89CC : 4228 0032           		clr.b	$32(a0)		; set to launch	cannonball
   10586/    89D0 :                     
   10587/    89D0 :                     Obj1E_MarkAsGone:			; XREF: Obj1E_Action
   10588/    89D0 : 6000 6A98           		bra.w	MarkObjGone
   10589/    89D4 :                     ; ===========================================================================
   10590/    89D4 :                     
   10591/    89D4 :                     Obj1E_MakeBall:				; XREF: Obj1E_Action
   10592/    89D4 : 117C 0001 0032      		move.b	#1,$32(a0)
   10593/    89DA : 6100 4E7C           		bsr.w	SingleObjLoad
   10594/    89DE : 663C                		bne.s	loc_8C1A
   10595/    89E0 : 12BC 0020           		move.b	#$20,0(a1)	; load cannonball object ($20)
   10596/    89E4 : 3368 0008 0008      		move.w	8(a0),8(a1)
   10597/    89EA : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   10598/    89F0 : 337C FF00 0010      		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
   10599/    89F6 : 337C 0000 0012      		move.w	#0,$12(a1)
   10600/    89FC : 70FC                		moveq	#-4,d0
   10601/    89FE : 0828 0000 0022      		btst	#0,$22(a0)	; is Ball Hog facing right?
   10602/    8A04 : 6706                		beq.s	loc_8C0A	; if not, branch
   10603/    8A06 : 4440                		neg.w	d0
   10604/    8A08 : 4469 0010           		neg.w	$10(a1)		; cannonball bounces to	the right
   10605/    8A0C :                     
   10606/    8A0C :                     loc_8C0A:
   10607/    8A0C : D169 0008           		add.w	d0,8(a1)
   10608/    8A10 : 0669 000C 000C      		addi.w	#$C,$C(a1)
   10609/    8A16 : 1368 0028 0028      		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
   10610/    8A1C :                     
   10611/    8A1C :                     loc_8C1A:
   10612/    8A1C : 60B2                		bra.s	Obj1E_MarkAsGone
   10613/    8A1E :                     ; ===========================================================================
   10614/    8A1E :                     ; ---------------------------------------------------------------------------
   10615/    8A1E :                     ; Object 20 - cannonball that Ball Hog throws (SBZ)
   10616/    8A1E :                     ; ---------------------------------------------------------------------------
   10617/    8A1E :                     
   10618/    8A1E :                     Obj20:					; XREF: Obj_Index
   10619/    8A1E : 7000                		moveq	#0,d0
   10620/    8A20 : 1028 0024           		move.b	$24(a0),d0
   10621/    8A24 : 323B 0006           		move.w	Obj20_Index(pc,d0.w),d1
   10622/    8A28 : 4EFB 1002           		jmp	Obj20_Index(pc,d1.w)
   10623/    8A2C :                     ; ===========================================================================
   10624/    8A2C : 0004                Obj20_Index:	dc.w Obj20_Main-Obj20_Index
   10625/    8A2E : 0048                		dc.w Obj20_Bounce-Obj20_Index
   10626/    8A30 :                     ; ===========================================================================
   10627/    8A30 :                     
   10628/    8A30 :                     Obj20_Main:				; XREF: Obj20_Index
   10629/    8A30 : 5428 0024           		addq.b	#2,$24(a0)
   10630/    8A34 : 117C 0007 0016      		move.b	#7,$16(a0)
   10631/    8A3A : 217C 0000 8C5E      		move.l	#Map_obj1E,4(a0)
             8A40 : 0004             
   10632/    8A42 : 317C 2302 0002      		move.w	#$2302,2(a0)
   10633/    8A48 : 117C 0004 0001      		move.b	#4,1(a0)
   10634/    8A4E : 117C 0003 0018      		move.b	#3,$18(a0)
   10635/    8A54 : 117C 0087 0020      		move.b	#$87,$20(a0)
   10636/    8A5A : 117C 0008 0019      		move.b	#8,$19(a0)
   10637/    8A60 : 7000                		moveq	#0,d0
   10638/    8A62 : 1028 0028           		move.b	$28(a0),d0	; move object type to d0
   10639/    8A66 : C0FC 003C           		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
   10640/    8A6A : 3140 0030           		move.w	d0,$30(a0)	; set explosion	time
   10641/    8A6E : 117C 0004 001A      		move.b	#4,$1A(a0)
   10642/    8A74 :                     
   10643/    8A74 :                     Obj20_Bounce:				; XREF: Obj20_Index
   10644/    8A74 : 4EB9 0000 D380      		jsr	ObjectFall
   10645/    8A7A : 4A68 0012           		tst.w	$12(a0)
   10646/    8A7E : 6B30                		bmi.s	Obj20_ChkExplode
   10647/    8A80 : 4EB9 0001 4C08      		jsr	ObjHitFloor
   10648/    8A86 : 4A41                		tst.w	d1
   10649/    8A88 : 6A26                		bpl.s	Obj20_ChkExplode
   10650/    8A8A : D368 000C           		add.w	d1,$C(a0)
   10651/    8A8E : 317C FD00 0012      		move.w	#-$300,$12(a0)
   10652/    8A94 : 4A03                		tst.b	d3
   10653/    8A96 : 6718                		beq.s	Obj20_ChkExplode
   10654/    8A98 : 6B0C                		bmi.s	loc_8CA4
   10655/    8A9A : 4A68 0010           		tst.w	$10(a0)
   10656/    8A9E : 6A10                		bpl.s	Obj20_ChkExplode
   10657/    8AA0 : 4468 0010           		neg.w	$10(a0)
   10658/    8AA4 : 600A                		bra.s	Obj20_ChkExplode
   10659/    8AA6 :                     ; ===========================================================================
   10660/    8AA6 :                     
   10661/    8AA6 :                     loc_8CA4:				; XREF: Obj20_Bounce
   10662/    8AA6 : 4A68 0010           		tst.w	$10(a0)
   10663/    8AAA : 6B04                		bmi.s	Obj20_ChkExplode
   10664/    8AAC : 4468 0010           		neg.w	$10(a0)
   10665/    8AB0 :                     
   10666/    8AB0 :                     Obj20_ChkExplode:			; XREF: Obj20_Bounce
   10667/    8AB0 : 5368 0030           		subq.w	#1,$30(a0)	; subtract 1 from explosion time
   10668/    8AB4 : 6A12                		bpl.s	Obj20_Animate	; if time is > 0, branch
   10669/    8AB6 : 10BC 0024           		move.b	#$24,0(a0)
   10670/    8ABA : 10BC 003F           		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
   10671/    8ABE : 117C 0000 0024      		move.b	#0,$24(a0)	; reset	routine	counter
   10672/    8AC4 : 6000 012C           		bra.w	Obj3F		; jump to explosion code
   10673/    8AC8 :                     ; ===========================================================================
   10674/    8AC8 :                     
   10675/    8AC8 :                     Obj20_Animate:				; XREF: Obj20_ChkExplode
   10676/    8AC8 : 5328 001E           		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
   10677/    8ACC : 6A0C                		bpl.s	Obj20_Display
   10678/    8ACE : 117C 0005 001E      		move.b	#5,$1E(a0)	; set frame duration to	5 frames
   10679/    8AD4 : 0868 0000 001A      		bchg	#0,$1A(a0)	; change frame
   10680/    8ADA :                     
   10681/    8ADA :                     Obj20_Display:
   10682/    8ADA : 6100 48F6           		bsr.w	DisplaySprite
   10683/    8ADE : 3038 F72E           		move.w	($FFFFF72E).w,d0
   10684/    8AE2 : 0640 00E0           		addi.w	#$E0,d0
   10685/    8AE6 : B068 000C           		cmp.w	$C(a0),d0	; has object fallen off	the level?
   10686/    8AEA : 6500 4922           		bcs.w	DeleteObject	; if yes, branch
   10687/    8AEE : 4E75                		rts	
   10688/    8AF0 :                     ; ===========================================================================
   10689/    8AF0 :                     ; ---------------------------------------------------------------------------
   10690/    8AF0 :                     ; Object 24 - explosion	from a destroyed monitor
   10691/    8AF0 :                     ; ---------------------------------------------------------------------------
   10692/    8AF0 :                     
   10693/    8AF0 :                     Obj24:					; XREF: Obj_Index
   10694/    8AF0 : 7000                		moveq	#0,d0
   10695/    8AF2 : 1028 0024           		move.b	$24(a0),d0
   10696/    8AF6 : 323B 0006           		move.w	Obj24_Index(pc,d0.w),d1
   10697/    8AFA : 4EFB 1002           		jmp	Obj24_Index(pc,d1.w)
   10698/    8AFE :                     ; ===========================================================================
   10699/    8AFE : 0004                Obj24_Index:	dc.w Obj24_Main-Obj24_Index
   10700/    8B00 : 0044                		dc.w Obj24_Animate-Obj24_Index
   10701/    8B02 :                     ; ===========================================================================
   10702/    8B02 :                     
   10703/    8B02 :                     Obj24_Main:				; XREF: Obj24_Index
   10704/    8B02 : 5428 0024           		addq.b	#2,$24(a0)
   10705/    8B06 : 217C 0000 8CA2      		move.l	#Map_obj24,4(a0)
             8B0C : 0004             
   10706/    8B0E : 317C 041C 0002      		move.w	#$41C,2(a0)
   10707/    8B14 : 117C 0004 0001      		move.b	#4,1(a0)
   10708/    8B1A : 117C 0001 0018      		move.b	#1,$18(a0)
   10709/    8B20 : 117C 0000 0020      		move.b	#0,$20(a0)
   10710/    8B26 : 117C 000C 0019      		move.b	#$C,$19(a0)
   10711/    8B2C : 117C 0009 001E      		move.b	#9,$1E(a0)
   10712/    8B32 : 117C 0000 001A      		move.b	#0,$1A(a0)
   10713/    8B38 : 303C 00A5           		move.w	#$A5,d0
   10714/    8B3C : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play explosion sound
   10715/    8B42 :                     
   10716/    8B42 :                     Obj24_Animate:				; XREF: Obj24_Index
   10717/    8B42 : 5328 001E           		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
   10718/    8B46 : 6A14                		bpl.s	Obj24_Display
   10719/    8B48 : 117C 0009 001E      		move.b	#9,$1E(a0)	; set frame duration to	9 frames
   10720/    8B4E : 5228 001A           		addq.b	#1,$1A(a0)	; next frame
   10721/    8B52 : 0C28 0004 001A      		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
   10722/    8B58 : 6700 48B4           		beq.w	DeleteObject	; if yes, branch
   10723/    8B5C :                     
   10724/    8B5C :                     Obj24_Display:
   10725/    8B5C : 6000 4874           		bra.w	DisplaySprite
   10726/    8B60 :                     ; ===========================================================================
   10727/    8B60 :                     ; ---------------------------------------------------------------------------
   10728/    8B60 :                     ; Object 27 - explosion	from a destroyed enemy
   10729/    8B60 :                     ; ---------------------------------------------------------------------------
   10730/    8B60 :                     
   10731/    8B60 :                     Obj27:					; XREF: Obj_Index
   10732/    8B60 : 7000                		moveq	#0,d0
   10733/    8B62 : 1028 0024           		move.b	$24(a0),d0
   10734/    8B66 : 323B 0006           		move.w	Obj27_Index(pc,d0.w),d1
   10735/    8B6A : 4EFB 1002           		jmp	Obj27_Index(pc,d1.w)
   10736/    8B6E :                     ; ===========================================================================
   10737/    8B6E : 0006                Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
   10738/    8B70 : 0026                		dc.w Obj27_Main-Obj27_Index
   10739/    8B72 : 0066                		dc.w Obj27_Animate-Obj27_Index
   10740/    8B74 :                     ; ===========================================================================
   10741/    8B74 :                     
   10742/    8B74 :                     Obj27_LoadAnimal:			; XREF: Obj27_Index
   10743/    8B74 : 5428 0024           		addq.b	#2,$24(a0)
   10744/    8B78 : 6100 4CDE           		bsr.w	SingleObjLoad
   10745/    8B7C : 6616                		bne.s	Obj27_Main
   10746/    8B7E : 12BC 0028           		move.b	#$28,0(a1)	; load animal object
   10747/    8B82 : 3368 0008 0008      		move.w	8(a0),8(a1)
   10748/    8B88 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   10749/    8B8E : 3368 003E 003E      		move.w	$3E(a0),$3E(a1)
   10750/    8B94 :                     
   10751/    8B94 :                     Obj27_Main:				; XREF: Obj27_Index
   10752/    8B94 : 5428 0024           		addq.b	#2,$24(a0)
   10753/    8B98 : 217C 0000 8CC2      		move.l	#Map_obj27,4(a0)
             8B9E : 0004             
   10754/    8BA0 : 317C 05A0 0002      		move.w	#$5A0,2(a0)
   10755/    8BA6 : 117C 0004 0001      		move.b	#4,1(a0)
   10756/    8BAC : 117C 0001 0018      		move.b	#1,$18(a0)
   10757/    8BB2 : 117C 0000 0020      		move.b	#0,$20(a0)
   10758/    8BB8 : 117C 000C 0019      		move.b	#$C,$19(a0)
   10759/    8BBE : 117C 0007 001E      		move.b	#7,$1E(a0)	; set frame duration to	7 frames
   10760/    8BC4 : 117C 0000 001A      		move.b	#0,$1A(a0)
   10761/    8BCA : 303C 00C1           		move.w	#$C1,d0
   10762/    8BCE : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play breaking enemy sound
   10763/    8BD4 :                     
   10764/    8BD4 :                     Obj27_Animate:				; XREF: Obj27_Index
   10765/    8BD4 : 5328 001E           		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
   10766/    8BD8 : 6A14                		bpl.s	Obj27_Display
   10767/    8BDA : 117C 0007 001E      		move.b	#7,$1E(a0)	; set frame duration to	7 frames
   10768/    8BE0 : 5228 001A           		addq.b	#1,$1A(a0)	; next frame
   10769/    8BE4 : 0C28 0005 001A      		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
   10770/    8BEA : 6700 4822           		beq.w	DeleteObject	; if yes, branch
   10771/    8BEE :                     
   10772/    8BEE :                     Obj27_Display:
   10773/    8BEE : 6000 47E2           		bra.w	DisplaySprite
   10774/    8BF2 :                     ; ===========================================================================
   10775/    8BF2 :                     ; ---------------------------------------------------------------------------
   10776/    8BF2 :                     ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
   10777/    8BF2 :                     ; ---------------------------------------------------------------------------
   10778/    8BF2 :                     
   10779/    8BF2 :                     Obj3F:					; XREF: Obj_Index
   10780/    8BF2 : 7000                		moveq	#0,d0
   10781/    8BF4 : 1028 0024           		move.b	$24(a0),d0
   10782/    8BF8 : 323B 0006           		move.w	Obj3F_Index(pc,d0.w),d1
   10783/    8BFC : 4EFB 1002           		jmp	Obj3F_Index(pc,d1.w)
   10784/    8C00 :                     ; ===========================================================================
   10785/    8C00 : 0004                Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
   10786/    8C02 : FFD4                		dc.w Obj27_Animate-Obj3F_Index
   10787/    8C04 :                     ; ===========================================================================
   10788/    8C04 :                     
   10789/    8C04 :                     Obj3F_Main:				; XREF: Obj3F_Index
   10790/    8C04 : 5428 0024           		addq.b	#2,$24(a0)
   10791/    8C08 : 217C 0000 8D08      		move.l	#Map_obj3F,4(a0)
             8C0E : 0004             
   10792/    8C10 : 317C 05A0 0002      		move.w	#$5A0,2(a0)
   10793/    8C16 : 117C 0004 0001      		move.b	#4,1(a0)
   10794/    8C1C : 117C 0001 0018      		move.b	#1,$18(a0)
   10795/    8C22 : 117C 0000 0020      		move.b	#0,$20(a0)
   10796/    8C28 : 117C 000C 0019      		move.b	#$C,$19(a0)
   10797/    8C2E : 117C 0007 001E      		move.b	#7,$1E(a0)
   10798/    8C34 : 117C 0000 001A      		move.b	#0,$1A(a0)
   10799/    8C3A : 303C 00C4           		move.w	#$C4,d0
   10800/    8C3E : 4EF9 0000 1182      		jmp	(PlaySound_Special).l ;	play exploding bomb sound
   10801/    8C44 :                     ; ===========================================================================
   10802/    8C44 :                     Ani_obj1E:
   10803/    8C44 :                     	include "_animations/obj1E.asm"
(1)    1/    8C44 :                     ; ---------------------------------------------------------------------------
(1)    2/    8C44 :                     ; Animation script - doors (SBZ)
(1)    3/    8C44 :                     ; ---------------------------------------------------------------------------
(1)    4/    8C44 : 0002                		dc.w byte_8E4A-Ani_obj1E
(1)    5/    8C46 : 0900 0002 0203      byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
             8C4C : 0200 0002 0203 
             8C52 : 0200 0002 0203 
             8C58 : 0200 0001 FF       
(1)    6/    8C5D : (MACRO)              		even
(1)    6/    8C5D : 00                                          dc.b 0 ;ds.b 1 
   10804/    8C5E :                     
   10805/    8C5E :                     ; ---------------------------------------------------------------------------
   10806/    8C5E :                     ; Sprite mappings - Ball Hog enemy (SBZ)
   10807/    8C5E :                     ; ---------------------------------------------------------------------------
   10808/    8C5E :                     Map_obj1E:
   10809/    8C5E :                     	include "_mappings/obj1E.asm"
(1)    1/    8C5E :                     ; ---------------------------------------------------------------------------
(1)    2/    8C5E :                     ; Sprite mappings - Ball Hog enemy (SBZ)
(1)    3/    8C5E :                     ; ---------------------------------------------------------------------------
(1)    4/    8C5E : 000C 0017           		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
(1)    5/    8C62 : 0022 002D           		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
(1)    6/    8C66 : 0038 003E           		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
(1)    7/    8C6A : 02                  byte_8E6E:	dc.b 2
(1)    8/    8C6B : EF09 0000 F4        		dc.b $EF, 9, 0,	0, $F4
(1)    9/    8C70 : FF0A 0006 F4        		dc.b $FF, $A, 0, 6, $F4
(1)   10/    8C75 : 02                  byte_8E79:	dc.b 2
(1)   11/    8C76 : EF09 0000 F4        		dc.b $EF, 9, 0,	0, $F4
(1)   12/    8C7B : FF0A 000F F4        		dc.b $FF, $A, 0, $F, $F4
(1)   13/    8C80 : 02                  byte_8E84:	dc.b 2
(1)   14/    8C81 : F409 0000 F4        		dc.b $F4, 9, 0,	0, $F4
(1)   15/    8C86 : 0409 0018 F4        		dc.b 4,	9, 0, $18, $F4
(1)   16/    8C8B : 02                  byte_8E8F:	dc.b 2
(1)   17/    8C8C : E409 0000 F4        		dc.b $E4, 9, 0,	0, $F4
(1)   18/    8C91 : F40A 001E F4        		dc.b $F4, $A, 0, $1E, $F4
(1)   19/    8C96 : 01                  byte_8E9A:	dc.b 1
(1)   20/    8C97 : F805 0027 F8        		dc.b $F8, 5, 0,	$27, $F8
(1)   21/    8C9C : 01                  byte_8EA0:	dc.b 1
(1)   22/    8C9D : F805 002B F8        		dc.b $F8, 5, 0,	$2B, $F8
(1)   23/    8CA2 : (MACRO)              		even
   10810/    8CA2 :                     
   10811/    8CA2 :                     ; ---------------------------------------------------------------------------
   10812/    8CA2 :                     ; Sprite mappings - explosion
   10813/    8CA2 :                     ; ---------------------------------------------------------------------------
   10814/    8CA2 :                     Map_obj24:
   10815/    8CA2 :                     	include "_mappings/obj24.asm"
(1)    1/    8CA2 :                     ; ---------------------------------------------------------------------------
(1)    2/    8CA2 :                     ; Sprite mappings - explosion
(1)    3/    8CA2 :                     ; ---------------------------------------------------------------------------
(1)    4/    8CA2 : 0008 000E           		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
(1)    5/    8CA6 : 0014 001A           		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
(1)    6/    8CAA : 01                  byte_8EAE:	dc.b 1
(1)    7/    8CAB : F40A 0000 F4        		dc.b $F4, $A, 0, 0, $F4
(1)    8/    8CB0 : 01                  byte_8EB4:	dc.b 1
(1)    9/    8CB1 : F40A 0009 F4        		dc.b $F4, $A, 0, 9, $F4
(1)   10/    8CB6 : 01                  byte_8EBA:	dc.b 1
(1)   11/    8CB7 : F40A 0012 F4        		dc.b $F4, $A, 0, $12, $F4
(1)   12/    8CBC : 01                  byte_8EC0:	dc.b 1
(1)   13/    8CBD : F40A 001B F4        		dc.b $F4, $A, 0, $1B, $F4
(1)   14/    8CC2 : (MACRO)              		even
   10816/    8CC2 :                     
   10817/    8CC2 :                     ; ---------------------------------------------------------------------------
   10818/    8CC2 :                     ; Sprite mappings - explosion
   10819/    8CC2 :                     ; ---------------------------------------------------------------------------
   10820/    8CC2 : 000A 0010           Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
   10821/    8CC6 : 0016 001C           		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
   10822/    8CCA : 0031                		dc.w byte_8EF7-Map_obj27
   10823/    8CCC : 01                  byte_8ED0:	dc.b 1
   10824/    8CCD : F809 0000 F4        		dc.b $F8, 9, 0,	0, $F4
   10825/    8CD2 : 01                  byte_8ED6:	dc.b 1
   10826/    8CD3 : F00F 0006 F0        		dc.b $F0, $F, 0, 6, $F0
   10827/    8CD8 : 01                  byte_8EDC:	dc.b 1
   10828/    8CD9 : F00F 0016 F0        		dc.b $F0, $F, 0, $16, $F0
   10829/    8CDE : 04                  byte_8EE2:	dc.b 4
   10830/    8CDF : EC0A 0026 EC        		dc.b $EC, $A, 0, $26, $EC
   10831/    8CE4 : EC05 002F 04        		dc.b $EC, 5, 0,	$2F, 4
   10832/    8CE9 : 0405 182F EC        		dc.b 4,	5, $18,	$2F, $EC
   10833/    8CEE : FC0A 1826 FC        		dc.b $FC, $A, $18, $26,	$FC
   10834/    8CF3 : 04                  byte_8EF7:	dc.b 4
   10835/    8CF4 : EC0A 0033 EC        		dc.b $EC, $A, 0, $33, $EC
   10836/    8CF9 : EC05 003C 04        		dc.b $EC, 5, 0,	$3C, 4
   10837/    8CFE : 0405 183C EC        		dc.b 4,	5, $18,	$3C, $EC
   10838/    8D03 : FC0A 1833 FC        		dc.b $FC, $A, $18, $33,	$FC
   10839/    8D08 : (MACRO)              		even
   10840/    8D08 :                     ; ---------------------------------------------------------------------------
   10841/    8D08 :                     ; Sprite mappings - explosion from when	a boss is destroyed
   10842/    8D08 :                     ; ---------------------------------------------------------------------------
   10843/    8D08 : FFC4                Map_obj3F:	dc.w byte_8ED0-Map_obj3F
   10844/    8D0A : 000A                		dc.w byte_8F16-Map_obj3F
   10845/    8D0C : 0010                		dc.w byte_8F1C-Map_obj3F
   10846/    8D0E : FFD6                		dc.w byte_8EE2-Map_obj3F
   10847/    8D10 : FFEB                		dc.w byte_8EF7-Map_obj3F
   10848/    8D12 : 01                  byte_8F16:	dc.b 1
   10849/    8D13 : F00F 0040 F0        		dc.b $F0, $F, 0, $40, $F0
   10850/    8D18 : 01                  byte_8F1C:	dc.b 1
   10851/    8D19 : F00F 0050 F0        		dc.b $F0, $F, 0, $50, $F0
   10852/    8D1E : (MACRO)              		even
   10853/    8D1E :                     ; ===========================================================================
   10854/    8D1E :                     ; ---------------------------------------------------------------------------
   10855/    8D1E :                     ; Object 28 - animals
   10856/    8D1E :                     ; ---------------------------------------------------------------------------
   10857/    8D1E :                     
   10858/    8D1E :                     Obj28:					; XREF: Obj_Index
   10859/    8D1E : 7000                		moveq	#0,d0
   10860/    8D20 : 1028 0024           		move.b	$24(a0),d0
   10861/    8D24 : 323B 0006           		move.w	Obj28_Index(pc,d0.w),d1
   10862/    8D28 : 4EFB 1002           		jmp	Obj28_Index(pc,d1.w)
   10863/    8D2C :                     ; ===========================================================================
   10864/    8D2C : 00DC 01F8           Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
   10865/    8D30 : 0252 028E           		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
   10866/    8D34 : 0252 0252           		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
   10867/    8D38 : 0252 028E           		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
   10868/    8D3C : 0252 030E           		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
   10869/    8D40 : 032E 032E           		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
   10870/    8D44 : 034E 0388           		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
   10871/    8D48 : 03E2 0400           		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
   10872/    8D4C : 03E2 0400           		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
   10873/    8D50 : 03E2 043E           		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
   10874/    8D54 : 03A4                		dc.w loc_92D6-Obj28_Index
   10875/    8D56 :                     
   10876/    8D56 : 0005 0203 0603      Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
             8D5C : 0405 0401 0001    
   10877/    8D62 :                     
   10878/    8D62 : FE00 FC00           Obj28_Variables:dc.w $FE00, $FC00
   10879/    8D66 : 0000 9260           		dc.l Map_obj28
   10880/    8D6A : FE00 FD00           		dc.w $FE00, $FD00	; horizontal speed, vertical speed
   10881/    8D6E : 0000 9278           		dc.l Map_obj28a		; mappings address
   10882/    8D72 : FE80 FD00           		dc.w $FE80, $FD00
   10883/    8D76 : 0000 9260           		dc.l Map_obj28
   10884/    8D7A : FEC0 FE80           		dc.w $FEC0, $FE80
   10885/    8D7E : 0000 9278           		dc.l Map_obj28a
   10886/    8D82 : FE40 FD00           		dc.w $FE40, $FD00
   10887/    8D86 : 0000 9290           		dc.l Map_obj28b
   10888/    8D8A : FD00 FC00           		dc.w $FD00, $FC00
   10889/    8D8E : 0000 9278           		dc.l Map_obj28a
   10890/    8D92 : FD80 FC80           		dc.w $FD80, $FC80
   10891/    8D96 : 0000 9290           		dc.l Map_obj28b
   10892/    8D9A :                     
   10893/    8D9A : FBC0 FC00 FBC0      Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
             8DA0 : FC00 FBC0 FC00 
             8DA6 : FD00 FC00          
   10894/    8DAA : FD00 FC00 FE80      		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
             8DB0 : FD00 FE80 FD00 
             8DB6 : FEC0 FE80          
   10895/    8DBA : FE40 FD00 FE00      		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
             8DC0 : FD00 FD80 FC80    
   10896/    8DC6 :                     
   10897/    8DC6 : 0000 9278 0000      Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
             8DCC : 9278 0000 9278 
             8DD2 : 0000 9260 0000 
             8DD8 : 9260             
   10898/    8DDA : 0000 9260 0000      		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
             8DE0 : 9260 0000 9278 
             8DE6 : 0000 9290 0000 
             8DEC : 9278             
   10899/    8DEE : 0000 9290           		dc.l Map_obj28b
   10900/    8DF2 :                     
   10901/    8DF2 : 05A5 05A5 05A5      Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
             8DF8 : 0553 0553 0573 
             8DFE : 0573 0585 0593    
   10902/    8E04 : 0565 05B3           		dc.w $565, $5B3
   10903/    8E08 :                     ; ===========================================================================
   10904/    8E08 :                     
   10905/    8E08 :                     Obj28_Ending:				; XREF: Obj28_Index
   10906/    8E08 : 4A28 0028           		tst.b	$28(a0)		; did animal come from a destroyed enemy?
   10907/    8E0C : 6700 0064           		beq.w	Obj28_FromEnemy	; if yes, branch
   10908/    8E10 : 7000                		moveq	#0,d0
   10909/    8E12 : 1028 0028           		move.b	$28(a0),d0	; move object type to d0
   10910/    8E16 : D040                		add.w	d0,d0		; multiply d0 by 2
   10911/    8E18 : 1140 0024           		move.b	d0,$24(a0)	; move d0 to routine counter
   10912/    8E1C : 0440 0014           		subi.w	#$14,d0
   10913/    8E20 : 317B 00D0 0002      		move.w	Obj28_EndVram(pc,d0.w),2(a0)
   10914/    8E26 : D040                		add.w	d0,d0
   10915/    8E28 : 217B 009C 0004      		move.l	Obj28_EndMap(pc,d0.w),4(a0)
   10916/    8E2E : 43FA FF6A           		lea	Obj28_EndSpeed(pc),a1
   10917/    8E32 : 3171 0000 0032      		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
   10918/    8E38 : 3171 0000 0010      		move.w	(a1,d0.w),$10(a0)
   10919/    8E3E : 3171 0002 0034      		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
   10920/    8E44 : 3171 0002 0012      		move.w	2(a1,d0.w),$12(a0)
   10921/    8E4A : 117C 000C 0016      		move.b	#$C,$16(a0)
   10922/    8E50 : 117C 0004 0001      		move.b	#4,1(a0)
   10923/    8E56 : 08E8 0000 0001      		bset	#0,1(a0)
   10924/    8E5C : 117C 0006 0018      		move.b	#6,$18(a0)
   10925/    8E62 : 117C 0008 0019      		move.b	#8,$19(a0)
   10926/    8E68 : 117C 0007 001E      		move.b	#7,$1E(a0)
   10927/    8E6E : 6000 4562           		bra.w	DisplaySprite
   10928/    8E72 :                     ; ===========================================================================
   10929/    8E72 :                     
   10930/    8E72 :                     Obj28_FromEnemy:			; XREF: Obj28_Ending
   10931/    8E72 : 5428 0024           		addq.b	#2,$24(a0)
   10932/    8E76 : 6100 9922           		bsr.w	RandomNumber
   10933/    8E7A : 0240 0001           		andi.w	#1,d0
   10934/    8E7E : 7200                		moveq	#0,d1
   10935/    8E80 : 1238 FE10           		move.b	($FFFFFE10).w,d1
   10936/    8E84 : D241                		add.w	d1,d1
   10937/    8E86 : D240                		add.w	d0,d1
   10938/    8E88 : 43FA FECC           		lea	Obj28_VarIndex(pc),a1
   10939/    8E8C : 1031 1000           		move.b	(a1,d1.w),d0
   10940/    8E90 : 1140 0030           		move.b	d0,$30(a0)
   10941/    8E94 : E748                		lsl.w	#3,d0
   10942/    8E96 : 43FA FECA           		lea	Obj28_Variables(pc),a1
   10943/    8E9A : D2C0                		adda.w	d0,a1
   10944/    8E9C : 3159 0032           		move.w	(a1)+,$32(a0)	; load horizontal speed
   10945/    8EA0 : 3159 0034           		move.w	(a1)+,$34(a0)	; load vertical	speed
   10946/    8EA4 : 2159 0004           		move.l	(a1)+,4(a0)	; load mappings
   10947/    8EA8 : 317C 0580 0002      		move.w	#$580,2(a0)	; VRAM setting for 1st animal
   10948/    8EAE : 0828 0000 0030      		btst	#0,$30(a0)	; is 1st animal	used?
   10949/    8EB4 : 6706                		beq.s	loc_90C0	; if yes, branch
   10950/    8EB6 : 317C 0592 0002      		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
   10951/    8EBC :                     
   10952/    8EBC :                     loc_90C0:
   10953/    8EBC : 117C 000C 0016      		move.b	#$C,$16(a0)
   10954/    8EC2 : 117C 0004 0001      		move.b	#4,1(a0)
   10955/    8EC8 : 08E8 0000 0001      		bset	#0,1(a0)
   10956/    8ECE : 117C 0006 0018      		move.b	#6,$18(a0)
   10957/    8ED4 : 117C 0008 0019      		move.b	#8,$19(a0)
   10958/    8EDA : 117C 0007 001E      		move.b	#7,$1E(a0)
   10959/    8EE0 : 117C 0002 001A      		move.b	#2,$1A(a0)
   10960/    8EE6 : 317C FC00 0012      		move.w	#-$400,$12(a0)
   10961/    8EEC : 4A38 F7A7           		tst.b	($FFFFF7A7).w
   10962/    8EF0 : 6624                		bne.s	loc_911C
   10963/    8EF2 : 6100 4964           		bsr.w	SingleObjLoad
   10964/    8EF6 : 661A                		bne.s	Obj28_Display
   10965/    8EF8 : 12BC 0029           		move.b	#$29,0(a1)	; load points object
   10966/    8EFC : 3368 0008 0008      		move.w	8(a0),8(a1)
   10967/    8F02 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   10968/    8F08 : 3028 003E           		move.w	$3E(a0),d0
   10969/    8F0C : E248                		lsr.w	#1,d0
   10970/    8F0E : 1340 001A           		move.b	d0,$1A(a1)
   10971/    8F12 :                     
   10972/    8F12 :                     Obj28_Display:
   10973/    8F12 : 6000 44BE           		bra.w	DisplaySprite
   10974/    8F16 :                     ; ===========================================================================
   10975/    8F16 :                     
   10976/    8F16 :                     loc_911C:
   10977/    8F16 : 117C 0012 0024      		move.b	#$12,$24(a0)
   10978/    8F1C : 4268 0010           		clr.w	$10(a0)
   10979/    8F20 : 6000 44B0           		bra.w	DisplaySprite
   10980/    8F24 :                     ; ===========================================================================
   10981/    8F24 :                     
   10982/    8F24 :                     loc_912A:				; XREF: Obj28_Index
   10983/    8F24 : 4A28 0001           		tst.b	1(a0)
   10984/    8F28 : 6A00 44E4           		bpl.w	DeleteObject
   10985/    8F2C : 6100 4452           		bsr.w	ObjectFall
   10986/    8F30 : 4A68 0012           		tst.w	$12(a0)
   10987/    8F34 : 6B44                		bmi.s	loc_9180
   10988/    8F36 : 4EB9 0001 4C08      		jsr	ObjHitFloor
   10989/    8F3C : 4A41                		tst.w	d1
   10990/    8F3E : 6A3A                		bpl.s	loc_9180
   10991/    8F40 : D368 000C           		add.w	d1,$C(a0)
   10992/    8F44 : 3168 0032 0010      		move.w	$32(a0),$10(a0)
   10993/    8F4A : 3168 0034 0012      		move.w	$34(a0),$12(a0)
   10994/    8F50 : 117C 0001 001A      		move.b	#1,$1A(a0)
   10995/    8F56 : 1028 0030           		move.b	$30(a0),d0
   10996/    8F5A : D000                		add.b	d0,d0
   10997/    8F5C : 5800                		addq.b	#4,d0
   10998/    8F5E : 1140 0024           		move.b	d0,$24(a0)
   10999/    8F62 : 4A38 F7A7           		tst.b	($FFFFF7A7).w
   11000/    8F66 : 6712                		beq.s	loc_9180
   11001/    8F68 : 0838 0004 FE0F      		btst	#4,($FFFFFE0F).w
   11002/    8F6E : 670A                		beq.s	loc_9180
   11003/    8F70 : 4468 0010           		neg.w	$10(a0)
   11004/    8F74 : 0868 0000 0001      		bchg	#0,1(a0)
   11005/    8F7A :                     
   11006/    8F7A :                     loc_9180:
   11007/    8F7A : 6000 4456           		bra.w	DisplaySprite
   11008/    8F7E :                     ; ===========================================================================
   11009/    8F7E :                     
   11010/    8F7E :                     loc_9184:				; XREF: Obj28_Index
   11011/    8F7E : 6100 4400           		bsr.w	ObjectFall
   11012/    8F82 : 117C 0001 001A      		move.b	#1,$1A(a0)
   11013/    8F88 : 4A68 0012           		tst.w	$12(a0)
   11014/    8F8C : 6B1A                		bmi.s	loc_91AE
   11015/    8F8E : 117C 0000 001A      		move.b	#0,$1A(a0)
   11016/    8F94 : 4EB9 0001 4C08      		jsr	ObjHitFloor
   11017/    8F9A : 4A41                		tst.w	d1
   11018/    8F9C : 6A0A                		bpl.s	loc_91AE
   11019/    8F9E : D368 000C           		add.w	d1,$C(a0)
   11020/    8FA2 : 3168 0034 0012      		move.w	$34(a0),$12(a0)
   11021/    8FA8 :                     
   11022/    8FA8 :                     loc_91AE:
   11023/    8FA8 : 4A28 0028           		tst.b	$28(a0)
   11024/    8FAC : 6670                		bne.s	loc_9224
   11025/    8FAE : 4A28 0001           		tst.b	1(a0)
   11026/    8FB2 : 6A00 445A           		bpl.w	DeleteObject
   11027/    8FB6 : 6000 441A           		bra.w	DisplaySprite
   11028/    8FBA :                     ; ===========================================================================
   11029/    8FBA :                     
   11030/    8FBA :                     loc_91C0:				; XREF: Obj28_Index
   11031/    8FBA : 6100 43F0           		bsr.w	SpeedToPos
   11032/    8FBE : 0668 0018 0012      		addi.w	#$18,$12(a0)
   11033/    8FC4 : 4A68 0012           		tst.w	$12(a0)
   11034/    8FC8 : 6B2C                		bmi.s	loc_91FC
   11035/    8FCA : 4EB9 0001 4C08      		jsr	ObjHitFloor
   11036/    8FD0 : 4A41                		tst.w	d1
   11037/    8FD2 : 6A22                		bpl.s	loc_91FC
   11038/    8FD4 : D368 000C           		add.w	d1,$C(a0)
   11039/    8FD8 : 3168 0034 0012      		move.w	$34(a0),$12(a0)
   11040/    8FDE : 4A28 0028           		tst.b	$28(a0)
   11041/    8FE2 : 6712                		beq.s	loc_91FC
   11042/    8FE4 : 0C28 000A 0028      		cmpi.b	#$A,$28(a0)
   11043/    8FEA : 670A                		beq.s	loc_91FC
   11044/    8FEC : 4468 0010           		neg.w	$10(a0)
   11045/    8FF0 : 0868 0000 0001      		bchg	#0,1(a0)
   11046/    8FF6 :                     
   11047/    8FF6 :                     loc_91FC:
   11048/    8FF6 : 5328 001E           		subq.b	#1,$1E(a0)
   11049/    8FFA : 6A10                		bpl.s	loc_9212
   11050/    8FFC : 117C 0001 001E      		move.b	#1,$1E(a0)
   11051/    9002 : 5228 001A           		addq.b	#1,$1A(a0)
   11052/    9006 : 0228 0001 001A      		andi.b	#1,$1A(a0)
   11053/    900C :                     
   11054/    900C :                     loc_9212:
   11055/    900C : 4A28 0028           		tst.b	$28(a0)
   11056/    9010 : 660C                		bne.s	loc_9224
   11057/    9012 : 4A28 0001           		tst.b	1(a0)
   11058/    9016 : 6A00 43F6           		bpl.w	DeleteObject
   11059/    901A : 6000 43B6           		bra.w	DisplaySprite
   11060/    901E :                     ; ===========================================================================
   11061/    901E :                     
   11062/    901E :                     loc_9224:				; XREF: Obj28_Index
   11063/    901E : 3028 0008           		move.w	8(a0),d0
   11064/    9022 : 9078 D008           		sub.w	($FFFFD008).w,d0
   11065/    9026 : 650E                		bcs.s	loc_923C
   11066/    9028 : 0440 0180           		subi.w	#$180,d0
   11067/    902C : 6A08                		bpl.s	loc_923C
   11068/    902E : 4A28 0001           		tst.b	1(a0)
   11069/    9032 : 6A00 43DA           		bpl.w	DeleteObject
   11070/    9036 :                     
   11071/    9036 :                     loc_923C:
   11072/    9036 : 6000 439A           		bra.w	DisplaySprite
   11073/    903A :                     ; ===========================================================================
   11074/    903A :                     
   11075/    903A :                     loc_9240:				; XREF: Obj28_Index
   11076/    903A : 4A28 0001           		tst.b	1(a0)
   11077/    903E : 6A00 43CE           		bpl.w	DeleteObject
   11078/    9042 : 5368 0036           		subq.w	#1,$36(a0)
   11079/    9046 : 6600 000E           		bne.w	loc_925C
   11080/    904A : 117C 0002 0024      		move.b	#2,$24(a0)
   11081/    9050 : 117C 0003 0018      		move.b	#3,$18(a0)
   11082/    9056 :                     
   11083/    9056 :                     loc_925C:
   11084/    9056 : 6000 437A           		bra.w	DisplaySprite
   11085/    905A :                     ; ===========================================================================
   11086/    905A :                     
   11087/    905A :                     loc_9260:				; XREF: Obj28_Index
   11088/    905A : 6100 01A2           		bsr.w	sub_9404
   11089/    905E : 6416                		bcc.s	loc_927C
   11090/    9060 : 3168 0032 0010      		move.w	$32(a0),$10(a0)
   11091/    9066 : 3168 0034 0012      		move.w	$34(a0),$12(a0)
   11092/    906C : 117C 000E 0024      		move.b	#$E,$24(a0)
   11093/    9072 : 6000 FF46           		bra.w	loc_91C0
   11094/    9076 :                     ; ===========================================================================
   11095/    9076 :                     
   11096/    9076 :                     loc_927C:
   11097/    9076 : 6000 FFA6           		bra.w	loc_9224
   11098/    907A :                     ; ===========================================================================
   11099/    907A :                     
   11100/    907A :                     loc_9280:				; XREF: Obj28_Index
   11101/    907A : 6100 0182           		bsr.w	sub_9404
   11102/    907E : 6A30                		bpl.s	loc_92B6
   11103/    9080 : 4268 0010           		clr.w	$10(a0)
   11104/    9084 : 4268 0032           		clr.w	$32(a0)
   11105/    9088 : 6100 4322           		bsr.w	SpeedToPos
   11106/    908C : 0668 0018 0012      		addi.w	#$18,$12(a0)
   11107/    9092 : 6100 012A           		bsr.w	loc_93C4
   11108/    9096 : 6100 014E           		bsr.w	loc_93EC
   11109/    909A : 5328 001E           		subq.b	#1,$1E(a0)
   11110/    909E : 6A10                		bpl.s	loc_92B6
   11111/    90A0 : 117C 0001 001E      		move.b	#1,$1E(a0)
   11112/    90A6 : 5228 001A           		addq.b	#1,$1A(a0)
   11113/    90AA : 0228 0001 001A      		andi.b	#1,$1A(a0)
   11114/    90B0 :                     
   11115/    90B0 :                     loc_92B6:
   11116/    90B0 : 6000 FF6C           		bra.w	loc_9224
   11117/    90B4 :                     ; ===========================================================================
   11118/    90B4 :                     
   11119/    90B4 :                     loc_92BA:				; XREF: Obj28_Index
   11120/    90B4 : 6100 0148           		bsr.w	sub_9404
   11121/    90B8 : 6A50                		bpl.s	loc_9310
   11122/    90BA : 3168 0032 0010      		move.w	$32(a0),$10(a0)
   11123/    90C0 : 3168 0034 0012      		move.w	$34(a0),$12(a0)
   11124/    90C6 : 117C 0004 0024      		move.b	#4,$24(a0)
   11125/    90CC : 6000 FEB0           		bra.w	loc_9184
   11126/    90D0 :                     ; ===========================================================================
   11127/    90D0 :                     
   11128/    90D0 :                     loc_92D6:				; XREF: Obj28_Index
   11129/    90D0 : 6100 42AE           		bsr.w	ObjectFall
   11130/    90D4 : 117C 0001 001A      		move.b	#1,$1A(a0)
   11131/    90DA : 4A68 0012           		tst.w	$12(a0)
   11132/    90DE : 6B2A                		bmi.s	loc_9310
   11133/    90E0 : 117C 0000 001A      		move.b	#0,$1A(a0)
   11134/    90E6 : 4EB9 0001 4C08      		jsr	ObjHitFloor
   11135/    90EC : 4A41                		tst.w	d1
   11136/    90EE : 6A1A                		bpl.s	loc_9310
   11137/    90F0 : 4628 0029           		not.b	$29(a0)
   11138/    90F4 : 660A                		bne.s	loc_9306
   11139/    90F6 : 4468 0010           		neg.w	$10(a0)
   11140/    90FA : 0868 0000 0001      		bchg	#0,1(a0)
   11141/    9100 :                     
   11142/    9100 :                     loc_9306:
   11143/    9100 : D368 000C           		add.w	d1,$C(a0)
   11144/    9104 : 3168 0034 0012      		move.w	$34(a0),$12(a0)
   11145/    910A :                     
   11146/    910A :                     loc_9310:
   11147/    910A : 6000 FF12           		bra.w	loc_9224
   11148/    910E :                     ; ===========================================================================
   11149/    910E :                     
   11150/    910E :                     loc_9314:				; XREF: Obj28_Index
   11151/    910E : 6100 00EE           		bsr.w	sub_9404
   11152/    9112 : 6A14                		bpl.s	loc_932E
   11153/    9114 : 4268 0010           		clr.w	$10(a0)
   11154/    9118 : 4268 0032           		clr.w	$32(a0)
   11155/    911C : 6100 4262           		bsr.w	ObjectFall
   11156/    9120 : 6100 009C           		bsr.w	loc_93C4
   11157/    9124 : 6100 00C0           		bsr.w	loc_93EC
   11158/    9128 :                     
   11159/    9128 :                     loc_932E:
   11160/    9128 : 6000 FEF4           		bra.w	loc_9224
   11161/    912C :                     ; ===========================================================================
   11162/    912C :                     
   11163/    912C :                     loc_9332:				; XREF: Obj28_Index
   11164/    912C : 6100 00D0           		bsr.w	sub_9404
   11165/    9130 : 6A34                		bpl.s	loc_936C
   11166/    9132 : 6100 424C           		bsr.w	ObjectFall
   11167/    9136 : 117C 0001 001A      		move.b	#1,$1A(a0)
   11168/    913C : 4A68 0012           		tst.w	$12(a0)
   11169/    9140 : 6B24                		bmi.s	loc_936C
   11170/    9142 : 117C 0000 001A      		move.b	#0,$1A(a0)
   11171/    9148 : 4EB9 0001 4C08      		jsr	ObjHitFloor
   11172/    914E : 4A41                		tst.w	d1
   11173/    9150 : 6A14                		bpl.s	loc_936C
   11174/    9152 : 4468 0010           		neg.w	$10(a0)
   11175/    9156 : 0868 0000 0001      		bchg	#0,1(a0)
   11176/    915C : D368 000C           		add.w	d1,$C(a0)
   11177/    9160 : 3168 0034 0012      		move.w	$34(a0),$12(a0)
   11178/    9166 :                     
   11179/    9166 :                     loc_936C:
   11180/    9166 : 6000 FEB6           		bra.w	loc_9224
   11181/    916A :                     ; ===========================================================================
   11182/    916A :                     
   11183/    916A :                     loc_9370:				; XREF: Obj28_Index
   11184/    916A : 6100 0092           		bsr.w	sub_9404
   11185/    916E : 6A4A                		bpl.s	loc_93C0
   11186/    9170 : 6100 423A           		bsr.w	SpeedToPos
   11187/    9174 : 0668 0018 0012      		addi.w	#$18,$12(a0)
   11188/    917A : 4A68 0012           		tst.w	$12(a0)
   11189/    917E : 6B24                		bmi.s	loc_93AA
   11190/    9180 : 4EB9 0001 4C08      		jsr	ObjHitFloor
   11191/    9186 : 4A41                		tst.w	d1
   11192/    9188 : 6A1A                		bpl.s	loc_93AA
   11193/    918A : 4628 0029           		not.b	$29(a0)
   11194/    918E : 660A                		bne.s	loc_93A0
   11195/    9190 : 4468 0010           		neg.w	$10(a0)
   11196/    9194 : 0868 0000 0001      		bchg	#0,1(a0)
   11197/    919A :                     
   11198/    919A :                     loc_93A0:
   11199/    919A : D368 000C           		add.w	d1,$C(a0)
   11200/    919E : 3168 0034 0012      		move.w	$34(a0),$12(a0)
   11201/    91A4 :                     
   11202/    91A4 :                     loc_93AA:
   11203/    91A4 : 5328 001E           		subq.b	#1,$1E(a0)
   11204/    91A8 : 6A10                		bpl.s	loc_93C0
   11205/    91AA : 117C 0001 001E      		move.b	#1,$1E(a0)
   11206/    91B0 : 5228 001A           		addq.b	#1,$1A(a0)
   11207/    91B4 : 0228 0001 001A      		andi.b	#1,$1A(a0)
   11208/    91BA :                     
   11209/    91BA :                     loc_93C0:
   11210/    91BA : 6000 FE62           		bra.w	loc_9224
   11211/    91BE :                     ; ===========================================================================
   11212/    91BE :                     
   11213/    91BE :                     loc_93C4:
   11214/    91BE : 117C 0001 001A      		move.b	#1,$1A(a0)
   11215/    91C4 : 4A68 0012           		tst.w	$12(a0)
   11216/    91C8 : 6B1A                		bmi.s	locret_93EA
   11217/    91CA : 117C 0000 001A      		move.b	#0,$1A(a0)
   11218/    91D0 : 4EB9 0001 4C08      		jsr	ObjHitFloor
   11219/    91D6 : 4A41                		tst.w	d1
   11220/    91D8 : 6A0A                		bpl.s	locret_93EA
   11221/    91DA : D368 000C           		add.w	d1,$C(a0)
   11222/    91DE : 3168 0034 0012      		move.w	$34(a0),$12(a0)
   11223/    91E4 :                     
   11224/    91E4 :                     locret_93EA:
   11225/    91E4 : 4E75                		rts	
   11226/    91E6 :                     ; ===========================================================================
   11227/    91E6 :                     
   11228/    91E6 :                     loc_93EC:
   11229/    91E6 : 08E8 0000 0001      		bset	#0,1(a0)
   11230/    91EC : 3028 0008           		move.w	8(a0),d0
   11231/    91F0 : 9078 D008           		sub.w	($FFFFD008).w,d0
   11232/    91F4 : 6406                		bcc.s	locret_9402
   11233/    91F6 : 08A8 0000 0001      		bclr	#0,1(a0)
   11234/    91FC :                     
   11235/    91FC :                     locret_9402:
   11236/    91FC : 4E75                		rts	
   11237/    91FE :                     
   11238/    91FE :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   11239/    91FE :                     
   11240/    91FE :                     
   11241/    91FE :                     sub_9404:
   11242/    91FE : 3038 D008           		move.w	($FFFFD008).w,d0
   11243/    9202 : 9068 0008           		sub.w	8(a0),d0
   11244/    9206 : 0440 00B8           		subi.w	#$B8,d0
   11245/    920A : 4E75                		rts	
   11246/    920C :                     ; End of function sub_9404
   11247/    920C :                     
   11248/    920C :                     ; ===========================================================================
   11249/    920C :                     ; ---------------------------------------------------------------------------
   11250/    920C :                     ; Object 29 - points that appear when you destroy something
   11251/    920C :                     ; ---------------------------------------------------------------------------
   11252/    920C :                     
   11253/    920C :                     Obj29:					; XREF: Obj_Index
   11254/    920C : 7000                		moveq	#0,d0
   11255/    920E : 1028 0024           		move.b	$24(a0),d0
   11256/    9212 : 323B 000A           		move.w	Obj29_Index(pc,d0.w),d1
   11257/    9216 : 4EBB 1006           		jsr	Obj29_Index(pc,d1.w)
   11258/    921A : 6000 41B6           		bra.w	DisplaySprite
   11259/    921E :                     ; ===========================================================================
   11260/    921E : 0004                Obj29_Index:	dc.w Obj29_Main-Obj29_Index
   11261/    9220 : 002E                		dc.w Obj29_Slower-Obj29_Index
   11262/    9222 :                     ; ===========================================================================
   11263/    9222 :                     
   11264/    9222 :                     Obj29_Main:				; XREF: Obj29_Index
   11265/    9222 : 5428 0024           		addq.b	#2,$24(a0)
   11266/    9226 : 217C 0000 92A8      		move.l	#Map_obj29,4(a0)
             922C : 0004             
   11267/    922E : 317C 2797 0002      		move.w	#$2797,2(a0)
   11268/    9234 : 117C 0004 0001      		move.b	#4,1(a0)
   11269/    923A : 117C 0001 0018      		move.b	#1,$18(a0)
   11270/    9240 : 117C 0008 0019      		move.b	#8,$19(a0)
   11271/    9246 : 317C FD00 0012      		move.w	#-$300,$12(a0)	; move object upwards
   11272/    924C :                     
   11273/    924C :                     Obj29_Slower:				; XREF: Obj29_Index
   11274/    924C : 4A68 0012           		tst.w	$12(a0)		; is object moving?
   11275/    9250 : 6A00 41BC           		bpl.w	DeleteObject	; if not, branch
   11276/    9254 : 6100 4156           		bsr.w	SpeedToPos
   11277/    9258 : 0668 0018 0012      		addi.w	#$18,$12(a0)	; reduce object	speed
   11278/    925E : 4E75                		rts	
   11279/    9260 :                     ; ===========================================================================
   11280/    9260 :                     ; ---------------------------------------------------------------------------
   11281/    9260 :                     ; Sprite mappings - animals
   11282/    9260 :                     ; ---------------------------------------------------------------------------
   11283/    9260 :                     Map_obj28:
   11284/    9260 :                     	include "_mappings/obj28.asm"
(1)    1/    9260 :                     ; ---------------------------------------------------------------------------
(1)    2/    9260 :                     ; Sprite mappings - animals
(1)    3/    9260 :                     ; ---------------------------------------------------------------------------
(1)    4/    9260 : 000C                		dc.w byte_9472-Map_obj28
(1)    5/    9262 : 0012                		dc.w byte_9478-Map_obj28
(1)    6/    9264 : 0006                		dc.w byte_946C-Map_obj28
(1)    7/    9266 : 01                  byte_946C:	dc.b 1
(1)    8/    9267 : F406 0000 F8        		dc.b $F4, 6, 0,	0, $F8
(1)    9/    926C : 01                  byte_9472:	dc.b 1
(1)   10/    926D : F406 0006 F8        		dc.b $F4, 6, 0,	6, $F8
(1)   11/    9272 : 01                  byte_9478:	dc.b 1
(1)   12/    9273 : F406 000C F8        		dc.b $F4, 6, 0,	$C, $F8
(1)   13/    9278 : (MACRO)              		even
   11285/    9278 :                     
   11286/    9278 :                     Map_obj28a:
   11287/    9278 :                     	include "_mappings/obj28a.asm"
(1)    1/    9278 :                     ; ---------------------------------------------------------------------------
(1)    2/    9278 :                     ; Sprite mappings - animals
(1)    3/    9278 :                     ; ---------------------------------------------------------------------------
(1)    4/    9278 : 000C                		dc.w byte_948A-Map_obj28a
(1)    5/    927A : 0012                		dc.w byte_9490-Map_obj28a
(1)    6/    927C : 0006                		dc.w byte_9484-Map_obj28a
(1)    7/    927E : 01                  byte_9484:	dc.b 1
(1)    8/    927F : F406 0000 F8        		dc.b $F4, 6, 0,	0, $F8
(1)    9/    9284 : 01                  byte_948A:	dc.b 1
(1)   10/    9285 : FC05 0006 F8        		dc.b $FC, 5, 0,	6, $F8
(1)   11/    928A : 01                  byte_9490:	dc.b 1
(1)   12/    928B : FC05 000A F8        		dc.b $FC, 5, 0,	$A, $F8
(1)   13/    9290 : (MACRO)              		even
   11288/    9290 :                     
   11289/    9290 :                     Map_obj28b:
   11290/    9290 :                     	include "_mappings/obj28b.asm"
(1)    1/    9290 :                     ; ---------------------------------------------------------------------------
(1)    2/    9290 :                     ; Sprite mappings - animals
(1)    3/    9290 :                     ; ---------------------------------------------------------------------------
(1)    4/    9290 : 000C                		dc.w byte_94A2-Map_obj28b
(1)    5/    9292 : 0012                		dc.w byte_94A8-Map_obj28b
(1)    6/    9294 : 0006                		dc.w byte_949C-Map_obj28b
(1)    7/    9296 : 01                  byte_949C:	dc.b 1
(1)    8/    9297 : F406 0000 F8        		dc.b $F4, 6, 0,	0, $F8
(1)    9/    929C : 01                  byte_94A2:	dc.b 1
(1)   10/    929D : FC09 0006 F4        		dc.b $FC, 9, 0,	6, $F4
(1)   11/    92A2 : 01                  byte_94A8:	dc.b 1
(1)   12/    92A3 : FC09 000C F4        		dc.b $FC, 9, 0,	$C, $F4
(1)   13/    92A8 : (MACRO)              		even
   11291/    92A8 :                     
   11292/    92A8 :                     ; ---------------------------------------------------------------------------
   11293/    92A8 :                     ; Sprite mappings - points that	appear when you	destroy	something
   11294/    92A8 :                     ; ---------------------------------------------------------------------------
   11295/    92A8 :                     Map_obj29:
   11296/    92A8 :                     	include "_mappings/obj29.asm"
(1)    1/    92A8 :                     ; ---------------------------------------------------------------------------
(1)    2/    92A8 :                     ; Sprite mappings - points that	appear when you	destroy	something
(1)    3/    92A8 :                     ; ---------------------------------------------------------------------------
(1)    4/    92A8 : 000E 0014           		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
(1)    5/    92AC : 001A 0020           		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
(1)    6/    92B0 : 0026 002C           		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
(1)    7/    92B4 : 0037                		dc.w byte_94E5-Map_obj29
(1)    8/    92B6 : 01                  byte_94BC:	dc.b 1
(1)    9/    92B7 : FC04 0000 F8        		dc.b $FC, 4, 0,	0, $F8	; 100 points
(1)   10/    92BC : 01                  byte_94C2:	dc.b 1
(1)   11/    92BD : FC04 0002 F8        		dc.b $FC, 4, 0,	2, $F8	; 200 points
(1)   12/    92C2 : 01                  byte_94C8:	dc.b 1
(1)   13/    92C3 : FC04 0004 F8        		dc.b $FC, 4, 0,	4, $F8	; 500 points
(1)   14/    92C8 : 01                  byte_94CE:	dc.b 1
(1)   15/    92C9 : FC08 0006 F8        		dc.b $FC, 8, 0,	6, $F8	; 1000 points
(1)   16/    92CE : 01                  byte_94D4:	dc.b 1
(1)   17/    92CF : FC00 0006 FC        		dc.b $FC, 0, 0,	6, $FC	; 10 points
(1)   18/    92D4 : 02                  byte_94DA:	dc.b 2
(1)   19/    92D5 : FC08 0006 F4        		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
(1)   20/    92DA : FC04 0007 01        		dc.b $FC, 4, 0,	7, 1
(1)   21/    92DF : 02                  byte_94E5:	dc.b 2
(1)   22/    92E0 : FC08 0006 F4        		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
(1)   23/    92E5 : FC04 0007 06        		dc.b $FC, 4, 0,	7, 6
(1)   24/    92EA : (MACRO)              		even
   11297/    92EA :                     
   11298/    92EA :                     ; ===========================================================================
   11299/    92EA :                     ; ---------------------------------------------------------------------------
   11300/    92EA :                     ; Object 1F - Crabmeat enemy (GHZ, SYZ)
   11301/    92EA :                     ; ---------------------------------------------------------------------------
   11302/    92EA :                     
   11303/    92EA :                     Obj1F:					; XREF: Obj_Index
   11304/    92EA : 7000                		moveq	#0,d0
   11305/    92EC : 1028 0024           		move.b	$24(a0),d0
   11306/    92F0 : 323B 0006           		move.w	Obj1F_Index(pc,d0.w),d1
   11307/    92F4 : 4EFB 1002           		jmp	Obj1F_Index(pc,d1.w)
   11308/    92F8 :                     ; ===========================================================================
   11309/    92F8 : 000A                Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
   11310/    92FA : 005E                		dc.w Obj1F_Action-Obj1F_Index
   11311/    92FC : 01B6                		dc.w Obj1F_Delete-Obj1F_Index
   11312/    92FE : 01BC                		dc.w Obj1F_BallMain-Obj1F_Index
   11313/    9300 : 01F2                		dc.w Obj1F_BallMove-Obj1F_Index
   11314/    9302 :                     ; ===========================================================================
   11315/    9302 :                     
   11316/    9302 :                     Obj1F_Main:				; XREF: Obj1F_Index
   11317/    9302 : 117C 0010 0016      		move.b	#$10,$16(a0)
   11318/    9308 : 117C 0008 0017      		move.b	#8,$17(a0)
   11319/    930E : 217C 0000 9546      		move.l	#Map_obj1F,4(a0)
             9314 : 0004             
   11320/    9316 : 317C 0400 0002      		move.w	#$400,2(a0)
   11321/    931C : 117C 0004 0001      		move.b	#4,1(a0)
   11322/    9322 : 117C 0003 0018      		move.b	#3,$18(a0)
   11323/    9328 : 117C 0006 0020      		move.b	#6,$20(a0)
   11324/    932E : 117C 0015 0019      		move.b	#$15,$19(a0)
   11325/    9334 : 6100 404A           		bsr.w	ObjectFall
   11326/    9338 : 4EB9 0001 4C08      		jsr	ObjHitFloor
   11327/    933E : 4A41                		tst.w	d1
   11328/    9340 : 6A12                		bpl.s	locret_955A
   11329/    9342 : D368 000C           		add.w	d1,$C(a0)
   11330/    9346 : 1143 0026           		move.b	d3,$26(a0)
   11331/    934A : 317C 0000 0012      		move.w	#0,$12(a0)
   11332/    9350 : 5428 0024           		addq.b	#2,$24(a0)
   11333/    9354 :                     
   11334/    9354 :                     locret_955A:
   11335/    9354 : 4E75                		rts	
   11336/    9356 :                     ; ===========================================================================
   11337/    9356 :                     
   11338/    9356 :                     Obj1F_Action:				; XREF: Obj1F_Index
   11339/    9356 : 7000                		moveq	#0,d0
   11340/    9358 : 1028 0025           		move.b	$25(a0),d0
   11341/    935C : 323B 0014           		move.w	Obj1F_Index2(pc,d0.w),d1
   11342/    9360 : 4EBB 1010           		jsr	Obj1F_Index2(pc,d1.w)
   11343/    9364 : 43F9 0000 9510      		lea	(Ani_obj1F).l,a1
   11344/    936A : 6100 1192           		bsr.w	AnimateSprite
   11345/    936E : 6000 60FA           		bra.w	MarkObjGone
   11346/    9372 :                     ; ===========================================================================
   11347/    9372 : 0004                Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
   11348/    9374 : 009E                		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
   11349/    9376 :                     ; ===========================================================================
   11350/    9376 :                     
   11351/    9376 :                     Obj1F_WaitFire:				; XREF: Obj1F_Index2
   11352/    9376 : 5368 0030           		subq.w	#1,$30(a0)	; subtract 1 from time delay
   11353/    937A : 6A34                		bpl.s	locret_95B6
   11354/    937C : 4A28 0001           		tst.b	1(a0)
   11355/    9380 : 6A08                		bpl.s	Obj1F_Move
   11356/    9382 : 0868 0001 0032      		bchg	#1,$32(a0)
   11357/    9388 : 6628                		bne.s	Obj1F_MakeFire
   11358/    938A :                     
   11359/    938A :                     Obj1F_Move:
   11360/    938A : 5428 0025           		addq.b	#2,$25(a0)
   11361/    938E : 317C 007F 0030      		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
   11362/    9394 : 317C 0080 0010      		move.w	#$80,$10(a0)	; move Crabmeat	to the right
   11363/    939A : 6100 00E2           		bsr.w	Obj1F_SetAni
   11364/    939E : 5600                		addq.b	#3,d0
   11365/    93A0 : 1140 001C           		move.b	d0,$1C(a0)
   11366/    93A4 : 0868 0000 0022      		bchg	#0,$22(a0)
   11367/    93AA : 6604                		bne.s	locret_95B6
   11368/    93AC : 4468 0010           		neg.w	$10(a0)		; change direction
   11369/    93B0 :                     
   11370/    93B0 :                     locret_95B6:
   11371/    93B0 : 4E75                		rts	
   11372/    93B2 :                     ; ===========================================================================
   11373/    93B2 :                     
   11374/    93B2 :                     Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
   11375/    93B2 : 317C 003B 0030      		move.w	#$3B,$30(a0)
   11376/    93B8 : 117C 0006 001C      		move.b	#6,$1C(a0)	; use firing animation
   11377/    93BE : 6100 4498           		bsr.w	SingleObjLoad
   11378/    93C2 : 6622                		bne.s	Obj1F_MakeFire2
   11379/    93C4 : 12BC 001F           		move.b	#$1F,0(a1)	; load left fireball
   11380/    93C8 : 137C 0006 0024      		move.b	#6,$24(a1)
   11381/    93CE : 3368 0008 0008      		move.w	8(a0),8(a1)
   11382/    93D4 : 0469 0010 0008      		subi.w	#$10,8(a1)
   11383/    93DA : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   11384/    93E0 : 337C FF00 0010      		move.w	#-$100,$10(a1)
   11385/    93E6 :                     
   11386/    93E6 :                     Obj1F_MakeFire2:
   11387/    93E6 : 6100 4470           		bsr.w	SingleObjLoad
   11388/    93EA : 6622                		bne.s	locret_9618
   11389/    93EC : 12BC 001F           		move.b	#$1F,0(a1)	; load right fireball
   11390/    93F0 : 137C 0006 0024      		move.b	#6,$24(a1)
   11391/    93F6 : 3368 0008 0008      		move.w	8(a0),8(a1)
   11392/    93FC : 0669 0010 0008      		addi.w	#$10,8(a1)
   11393/    9402 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   11394/    9408 : 337C 0100 0010      		move.w	#$100,$10(a1)
   11395/    940E :                     
   11396/    940E :                     locret_9618:
   11397/    940E : 4E75                		rts	
   11398/    9410 :                     ; ===========================================================================
   11399/    9410 :                     
   11400/    9410 :                     Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
   11401/    9410 : 5368 0030           		subq.w	#1,$30(a0)
   11402/    9414 : 6B4E                		bmi.s	loc_966E
   11403/    9416 : 6100 3F94           		bsr.w	SpeedToPos
   11404/    941A : 0868 0000 0032      		bchg	#0,$32(a0)
   11405/    9420 : 6628                		bne.s	loc_9654
   11406/    9422 : 3628 0008           		move.w	8(a0),d3
   11407/    9426 : 0643 0010           		addi.w	#$10,d3
   11408/    942A : 0828 0000 0022      		btst	#0,$22(a0)
   11409/    9430 : 6704                		beq.s	loc_9640
   11410/    9432 : 0443 0020           		subi.w	#$20,d3
   11411/    9436 :                     
   11412/    9436 :                     loc_9640:
   11413/    9436 : 4EB9 0001 4C0C      		jsr	ObjHitFloor2
   11414/    943C : 0C41 FFF8           		cmpi.w	#-8,d1
   11415/    9440 : 6D22                		blt.s	loc_966E
   11416/    9442 : 0C41 000C           		cmpi.w	#$C,d1
   11417/    9446 : 6C1C                		bge.s	loc_966E
   11418/    9448 : 4E75                		rts	
   11419/    944A :                     ; ===========================================================================
   11420/    944A :                     
   11421/    944A :                     loc_9654:				; XREF: Obj1F_WalkOnFloor
   11422/    944A : 4EB9 0001 4C08      		jsr	ObjHitFloor
   11423/    9450 : D368 000C           		add.w	d1,$C(a0)
   11424/    9454 : 1143 0026           		move.b	d3,$26(a0)
   11425/    9458 : 6100 0024           		bsr.w	Obj1F_SetAni
   11426/    945C : 5600                		addq.b	#3,d0
   11427/    945E : 1140 001C           		move.b	d0,$1C(a0)
   11428/    9462 : 4E75                		rts	
   11429/    9464 :                     ; ===========================================================================
   11430/    9464 :                     
   11431/    9464 :                     loc_966E:				; XREF: Obj1F_WalkOnFloor
   11432/    9464 : 5528 0025           		subq.b	#2,$25(a0)
   11433/    9468 : 317C 003B 0030      		move.w	#59,$30(a0)
   11434/    946E : 317C 0000 0010      		move.w	#0,$10(a0)
   11435/    9474 : 6100 0008           		bsr.w	Obj1F_SetAni
   11436/    9478 : 1140 001C           		move.b	d0,$1C(a0)
   11437/    947C : 4E75                		rts	
   11438/    947E :                     ; ---------------------------------------------------------------------------
   11439/    947E :                     ; Subroutine to	set the	correct	animation for a	Crabmeat
   11440/    947E :                     ; ---------------------------------------------------------------------------
   11441/    947E :                     
   11442/    947E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   11443/    947E :                     
   11444/    947E :                     
   11445/    947E :                     Obj1F_SetAni:				; XREF: loc_966E
   11446/    947E : 7000                		moveq	#0,d0
   11447/    9480 : 1628 0026           		move.b	$26(a0),d3
   11448/    9484 : 6B14                		bmi.s	loc_96A4
   11449/    9486 : 0C03 0006           		cmpi.b	#6,d3
   11450/    948A : 650C                		bcs.s	locret_96A2
   11451/    948C : 7001                		moveq	#1,d0
   11452/    948E : 0828 0000 0022      		btst	#0,$22(a0)
   11453/    9494 : 6602                		bne.s	locret_96A2
   11454/    9496 : 7002                		moveq	#2,d0
   11455/    9498 :                     
   11456/    9498 :                     locret_96A2:
   11457/    9498 : 4E75                		rts	
   11458/    949A :                     ; ===========================================================================
   11459/    949A :                     
   11460/    949A :                     loc_96A4:				; XREF: Obj1F_SetAni
   11461/    949A : 0C03 00FA           		cmpi.b	#-6,d3
   11462/    949E : 620C                		bhi.s	locret_96B6
   11463/    94A0 : 7002                		moveq	#2,d0
   11464/    94A2 : 0828 0000 0022      		btst	#0,$22(a0)
   11465/    94A8 : 6602                		bne.s	locret_96B6
   11466/    94AA : 7001                		moveq	#1,d0
   11467/    94AC :                     
   11468/    94AC :                     locret_96B6:
   11469/    94AC : 4E75                		rts	
   11470/    94AE :                     ; End of function Obj1F_SetAni
   11471/    94AE :                     
   11472/    94AE :                     ; ===========================================================================
   11473/    94AE :                     
   11474/    94AE :                     Obj1F_Delete:				; XREF: Obj1F_Index
   11475/    94AE : 6100 3F5E           		bsr.w	DeleteObject
   11476/    94B2 : 4E75                		rts	
   11477/    94B4 :                     ; ===========================================================================
   11478/    94B4 :                     ; ---------------------------------------------------------------------------
   11479/    94B4 :                     ; Sub-object - missile that the	Crabmeat throws
   11480/    94B4 :                     ; ---------------------------------------------------------------------------
   11481/    94B4 :                     
   11482/    94B4 :                     Obj1F_BallMain:				; XREF: Obj1F_Index
   11483/    94B4 : 5428 0024           		addq.b	#2,$24(a0)
   11484/    94B8 : 217C 0000 9546      		move.l	#Map_obj1F,4(a0)
             94BE : 0004             
   11485/    94C0 : 317C 0400 0002      		move.w	#$400,2(a0)
   11486/    94C6 : 117C 0004 0001      		move.b	#4,1(a0)
   11487/    94CC : 117C 0003 0018      		move.b	#3,$18(a0)
   11488/    94D2 : 117C 0087 0020      		move.b	#$87,$20(a0)
   11489/    94D8 : 117C 0008 0019      		move.b	#8,$19(a0)
   11490/    94DE : 317C FC00 0012      		move.w	#-$400,$12(a0)
   11491/    94E4 : 117C 0007 001C      		move.b	#7,$1C(a0)
   11492/    94EA :                     
   11493/    94EA :                     Obj1F_BallMove:				; XREF: Obj1F_Index
   11494/    94EA : 43F9 0000 9510      		lea	(Ani_obj1F).l,a1
   11495/    94F0 : 6100 100C           		bsr.w	AnimateSprite
   11496/    94F4 : 6100 3E8A           		bsr.w	ObjectFall
   11497/    94F8 : 6100 3ED8           		bsr.w	DisplaySprite
   11498/    94FC : 3038 F72E           		move.w	($FFFFF72E).w,d0
   11499/    9500 : 0640 00E0           		addi.w	#$E0,d0
   11500/    9504 : B068 000C           		cmp.w	$C(a0),d0	; has object moved below the level boundary?
   11501/    9508 : 6502                		bcs.s	Obj1F_Delete2	; if yes, branch
   11502/    950A : 4E75                		rts	
   11503/    950C :                     ; ===========================================================================
   11504/    950C :                     
   11505/    950C :                     Obj1F_Delete2:
   11506/    950C : 6000 3F00           		bra.w	DeleteObject
   11507/    9510 :                     ; ===========================================================================
   11508/    9510 :                     Ani_obj1F:
   11509/    9510 :                     	include "_animations/obj1F.asm"
(1)    1/    9510 :                     ; ---------------------------------------------------------------------------
(1)    2/    9510 :                     ; Animation script - Crabmeat enemy
(1)    3/    9510 :                     ; ---------------------------------------------------------------------------
(1)    4/    9510 : 0010 0014 0018      		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
(1)    5/    9516 : 001C 0022 0028      		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
(1)    6/    951C : 002E 0032           		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
(1)    7/    9520 : 0F00 FF00           byte_972A:	dc.b $F, 0, $FF, 0
(1)    8/    9524 : 0F02 FF00           byte_972E:	dc.b $F, 2, $FF, 0
(1)    9/    9528 : 0F22 FF00           byte_9732:	dc.b $F, $22, $FF, 0
(1)   10/    952C : 0F01 2100 FF00      byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
(1)   11/    9532 : 0F21 0302 FF00      byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
(1)   12/    9538 : 0F01 2322 FF00      byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
(1)   13/    953E : 0F04 FF00           byte_9748:	dc.b $F, 4, $FF, 0
(1)   14/    9542 : 0105 06FF           byte_974C:	dc.b 1,	5, 6, $FF
(1)   15/    9546 : (MACRO)              		even
   11510/    9546 :                     
   11511/    9546 :                     ; ---------------------------------------------------------------------------
   11512/    9546 :                     ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
   11513/    9546 :                     ; ---------------------------------------------------------------------------
   11514/    9546 :                     Map_obj1F:
   11515/    9546 :                     	include "_mappings/obj1F.asm"
(1)    1/    9546 :                     ; ---------------------------------------------------------------------------
(1)    2/    9546 :                     ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
(1)    3/    9546 :                     ; ---------------------------------------------------------------------------
(1)    4/    9546 : 000E 0023           		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
(1)    5/    954A : 0038 004D           		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
(1)    6/    954E : 0062 0081           		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
(1)    7/    9552 : 0087                		dc.w byte_97D7-Map_obj1F
(1)    8/    9554 : 04                  byte_975E:	dc.b 4
(1)    9/    9555 : F009 0000 E8        		dc.b $F0, 9, 0,	0, $E8
(1)   10/    955A : F009 0800 00        		dc.b $F0, 9, 8,	0, 0
(1)   11/    955F : 0005 0006 F0        		dc.b 0,	5, 0, 6, $F0
(1)   12/    9564 : 0005 0806 00        		dc.b 0,	5, 8, 6, 0
(1)   13/    9569 : 04                  byte_9773:	dc.b 4
(1)   14/    956A : F009 000A E8        		dc.b $F0, 9, 0,	$A, $E8
(1)   15/    956F : F009 0010 00        		dc.b $F0, 9, 0,	$10, 0
(1)   16/    9574 : 0005 0016 F0        		dc.b 0,	5, 0, $16, $F0
(1)   17/    9579 : 0009 001A 00        		dc.b 0,	9, 0, $1A, 0
(1)   18/    957E : 04                  byte_9788:	dc.b 4
(1)   19/    957F : EC09 0000 E8        		dc.b $EC, 9, 0,	0, $E8
(1)   20/    9584 : EC09 0800 00        		dc.b $EC, 9, 8,	0, 0
(1)   21/    9589 : FC05 0806 00        		dc.b $FC, 5, 8,	6, 0
(1)   22/    958E : FC06 0020 F0        		dc.b $FC, 6, 0,	$20, $F0
(1)   23/    9593 : 04                  byte_979D:	dc.b 4
(1)   24/    9594 : EC09 000A E8        		dc.b $EC, 9, 0,	$A, $E8
(1)   25/    9599 : EC09 0010 00        		dc.b $EC, 9, 0,	$10, 0
(1)   26/    959E : FC09 0026 00        		dc.b $FC, 9, 0,	$26, 0
(1)   27/    95A3 : FC06 002C F0        		dc.b $FC, 6, 0,	$2C, $F0
(1)   28/    95A8 : 06                  byte_97B2:	dc.b 6
(1)   29/    95A9 : F004 0032 F0        		dc.b $F0, 4, 0,	$32, $F0
(1)   30/    95AE : F004 0832 00        		dc.b $F0, 4, 8,	$32, 0
(1)   31/    95B3 : F809 0034 E8        		dc.b $F8, 9, 0,	$34, $E8
(1)   32/    95B8 : F809 0834 00        		dc.b $F8, 9, 8,	$34, 0
(1)   33/    95BD : 0804 003A F0        		dc.b 8,	4, 0, $3A, $F0
(1)   34/    95C2 : 0804 083A 00        		dc.b 8,	4, 8, $3A, 0
(1)   35/    95C7 : 01                  byte_97D1:	dc.b 1
(1)   36/    95C8 : F805 003C F8        		dc.b $F8, 5, 0,	$3C, $F8
(1)   37/    95CD : 01                  byte_97D7:	dc.b 1
(1)   38/    95CE : F805 0040 F8        		dc.b $F8, 5, 0,	$40, $F8
(1)   39/    95D3 : (MACRO)              		even
(1)   39/    95D3 : 00                                          dc.b 0 ;ds.b 1 
   11516/    95D4 :                     
   11517/    95D4 :                     ; ===========================================================================
   11518/    95D4 :                     ; ---------------------------------------------------------------------------
   11519/    95D4 :                     ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
   11520/    95D4 :                     ; ---------------------------------------------------------------------------
   11521/    95D4 :                     
   11522/    95D4 :                     Obj22:					; XREF: Obj_Index
   11523/    95D4 : 7000                		moveq	#0,d0
   11524/    95D6 : 1028 0024           		move.b	$24(a0),d0
   11525/    95DA : 323B 0006           		move.w	Obj22_Index(pc,d0.w),d1
   11526/    95DE : 4EFB 1002           		jmp	Obj22_Index(pc,d1.w)
   11527/    95E2 :                     ; ===========================================================================
   11528/    95E2 : 0006                Obj22_Index:	dc.w Obj22_Main-Obj22_Index
   11529/    95E4 : 0030                		dc.w Obj22_Action-Obj22_Index
   11530/    95E6 : 013E                		dc.w Obj22_Delete-Obj22_Index
   11531/    95E8 :                     ; ===========================================================================
   11532/    95E8 :                     
   11533/    95E8 :                     Obj22_Main:				; XREF: Obj22_Index
   11534/    95E8 : 5428 0024           		addq.b	#2,$24(a0)
   11535/    95EC : 217C 0000 9826      		move.l	#Map_obj22,4(a0)
             95F2 : 0004             
   11536/    95F4 : 317C 0444 0002      		move.w	#$444,2(a0)
   11537/    95FA : 117C 0004 0001      		move.b	#4,1(a0)
   11538/    9600 : 117C 0003 0018      		move.b	#3,$18(a0)
   11539/    9606 : 117C 0008 0020      		move.b	#8,$20(a0)
   11540/    960C : 117C 0018 0019      		move.b	#$18,$19(a0)
   11541/    9612 :                     
   11542/    9612 :                     Obj22_Action:				; XREF: Obj22_Index
   11543/    9612 : 7000                		moveq	#0,d0
   11544/    9614 : 1028 0025           		move.b	$25(a0),d0
   11545/    9618 : 323B 0014           		move.w	Obj22_Index2(pc,d0.w),d1
   11546/    961C : 4EBB 1010           		jsr	Obj22_Index2(pc,d1.w)
   11547/    9620 : 43F9 0000 9808      		lea	(Ani_obj22).l,a1
   11548/    9626 : 6100 0ED6           		bsr.w	AnimateSprite
   11549/    962A : 6000 5E3E           		bra.w	MarkObjGone
   11550/    962E :                     ; ===========================================================================
   11551/    962E : 0004                Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
   11552/    9630 : 0098                		dc.w Obj22_ChkNrSonic-Obj22_Index2
   11553/    9632 :                     ; ===========================================================================
   11554/    9632 :                     
   11555/    9632 :                     Obj22_Move:				; XREF: Obj22_Index2
   11556/    9632 : 5368 0032           		subq.w	#1,$32(a0)	; subtract 1 from time delay
   11557/    9636 : 6A2A                		bpl.s	locret_986C	; if time remains, branch
   11558/    9638 : 0828 0001 0034      		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
   11559/    963E : 6624                		bne.s	Obj22_Fire	; if yes, branch
   11560/    9640 : 5428 0025           		addq.b	#2,$25(a0)
   11561/    9644 : 317C 007F 0032      		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
   11562/    964A : 317C 0400 0010      		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
   11563/    9650 : 117C 0001 001C      		move.b	#1,$1C(a0)	; use "flying" animation
   11564/    9656 : 0828 0000 0022      		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
   11565/    965C : 6604                		bne.s	locret_986C	; if not, branch
   11566/    965E : 4468 0010           		neg.w	$10(a0)		; move Buzz Bomber to the left
   11567/    9662 :                     
   11568/    9662 :                     locret_986C:
   11569/    9662 : 4E75                		rts	
   11570/    9664 :                     ; ===========================================================================
   11571/    9664 :                     
   11572/    9664 :                     Obj22_Fire:				; XREF: Obj22_Move
   11573/    9664 : 6100 41F2           		bsr.w	SingleObjLoad
   11574/    9668 : 665A                		bne.s	locret_98D0
   11575/    966A : 12BC 0023           		move.b	#$23,0(a1)	; load missile object
   11576/    966E : 3368 0008 0008      		move.w	8(a0),8(a1)
   11577/    9674 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   11578/    967A : 0669 001C 000C      		addi.w	#$1C,$C(a1)
   11579/    9680 : 337C 0200 0012      		move.w	#$200,$12(a1)	; move missile downwards
   11580/    9686 : 337C 0200 0010      		move.w	#$200,$10(a1)	; move missile to the right
   11581/    968C : 303C 0018           		move.w	#$18,d0
   11582/    9690 : 0828 0000 0022      		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
   11583/    9696 : 6606                		bne.s	loc_98AA	; if not, branch
   11584/    9698 : 4440                		neg.w	d0
   11585/    969A : 4469 0010           		neg.w	$10(a1)		; move missile to the left
   11586/    969E :                     
   11587/    969E :                     loc_98AA:
   11588/    969E : D169 0008           		add.w	d0,8(a1)
   11589/    96A2 : 1368 0022 0022      		move.b	$22(a0),$22(a1)
   11590/    96A8 : 337C 000E 0032      		move.w	#$E,$32(a1)
   11591/    96AE : 2348 003C           		move.l	a0,$3C(a1)
   11592/    96B2 : 117C 0001 0034      		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
   11593/    96B8 : 317C 003B 0032      		move.w	#$3B,$32(a0)
   11594/    96BE : 117C 0002 001C      		move.b	#2,$1C(a0)	; use "firing" animation
   11595/    96C4 :                     
   11596/    96C4 :                     locret_98D0:
   11597/    96C4 : 4E75                		rts	
   11598/    96C6 :                     ; ===========================================================================
   11599/    96C6 :                     
   11600/    96C6 :                     Obj22_ChkNrSonic:			; XREF: Obj22_Index2
   11601/    96C6 : 5368 0032           		subq.w	#1,$32(a0)	; subtract 1 from time delay
   11602/    96CA : 6B30                		bmi.s	Obj22_ChgDir
   11603/    96CC : 6100 3CDE           		bsr.w	SpeedToPos
   11604/    96D0 : 4A28 0034           		tst.b	$34(a0)
   11605/    96D4 : 6648                		bne.s	locret_992A
   11606/    96D6 : 3038 D008           		move.w	($FFFFD008).w,d0
   11607/    96DA : 9068 0008           		sub.w	8(a0),d0
   11608/    96DE : 6A02                		bpl.s	Obj22_SetNrSonic
   11609/    96E0 : 4440                		neg.w	d0
   11610/    96E2 :                     
   11611/    96E2 :                     Obj22_SetNrSonic:
   11612/    96E2 : 0C40 0060           		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
   11613/    96E6 : 6436                		bcc.s	locret_992A	; if not, branch
   11614/    96E8 : 4A28 0001           		tst.b	1(a0)
   11615/    96EC : 6A30                		bpl.s	locret_992A
   11616/    96EE : 117C 0002 0034      		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
   11617/    96F4 : 317C 001D 0032      		move.w	#29,$32(a0)	; set time delay to half a second
   11618/    96FA : 6012                		bra.s	Obj22_Stop
   11619/    96FC :                     ; ===========================================================================
   11620/    96FC :                     
   11621/    96FC :                     Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
   11622/    96FC : 117C 0000 0034      		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
   11623/    9702 : 0868 0000 0022      		bchg	#0,$22(a0)	; change direction
   11624/    9708 : 317C 003B 0032      		move.w	#59,$32(a0)
   11625/    970E :                     
   11626/    970E :                     Obj22_Stop:				; XREF: Obj22_SetNrSonic
   11627/    970E : 5528 0025           		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
   11628/    9712 : 317C 0000 0010      		move.w	#0,$10(a0)	; stop Buzz Bomber moving
   11629/    9718 : 117C 0000 001C      		move.b	#0,$1C(a0)	; use "hovering" animation
   11630/    971E :                     
   11631/    971E :                     locret_992A:
   11632/    971E : 4E75                		rts	
   11633/    9720 :                     ; ===========================================================================
   11634/    9720 :                     
   11635/    9720 :                     Obj22_Delete:				; XREF: Obj22_Index
   11636/    9720 : 6100 3CEC           		bsr.w	DeleteObject
   11637/    9724 : 4E75                		rts	
   11638/    9726 :                     ; ===========================================================================
   11639/    9726 :                     ; ---------------------------------------------------------------------------
   11640/    9726 :                     ; Object 23 - missile that Buzz	Bomber throws
   11641/    9726 :                     ; ---------------------------------------------------------------------------
   11642/    9726 :                     
   11643/    9726 :                     Obj23:					; XREF: Obj_Index
   11644/    9726 : 7000                		moveq	#0,d0
   11645/    9728 : 1028 0024           		move.b	$24(a0),d0
   11646/    972C : 323B 0006           		move.w	Obj23_Index(pc,d0.w),d1
   11647/    9730 : 4EFB 1002           		jmp	Obj23_Index(pc,d1.w)
   11648/    9734 :                     ; ===========================================================================
   11649/    9734 : 000A                Obj23_Index:	dc.w Obj23_Main-Obj23_Index
   11650/    9736 : 0054                		dc.w Obj23_Animate-Obj23_Index
   11651/    9738 : 0070                		dc.w Obj23_FromBuzz-Obj23_Index
   11652/    973A : 00B4                		dc.w Obj23_Delete-Obj23_Index
   11653/    973C : 00BA                		dc.w Obj23_FromNewt-Obj23_Index
   11654/    973E :                     ; ===========================================================================
   11655/    973E :                     
   11656/    973E :                     Obj23_Main:				; XREF: Obj23_Index
   11657/    973E : 5368 0032           		subq.w	#1,$32(a0)
   11658/    9742 : 6A54                		bpl.s	Obj23_ChkCancel
   11659/    9744 : 5428 0024           		addq.b	#2,$24(a0)
   11660/    9748 : 217C 0000 98F6      		move.l	#Map_obj23,4(a0)
             974E : 0004             
   11661/    9750 : 317C 2444 0002      		move.w	#$2444,2(a0)
   11662/    9756 : 117C 0004 0001      		move.b	#4,1(a0)
   11663/    975C : 117C 0003 0018      		move.b	#3,$18(a0)
   11664/    9762 : 117C 0008 0019      		move.b	#8,$19(a0)
   11665/    9768 : 0228 0003 0022      		andi.b	#3,$22(a0)
   11666/    976E : 4A28 0028           		tst.b	$28(a0)		; was object created by	a Newtron?
   11667/    9772 : 6714                		beq.s	Obj23_Animate	; if not, branch
   11668/    9774 : 117C 0008 0024      		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
   11669/    977A : 117C 0087 0020      		move.b	#$87,$20(a0)
   11670/    9780 : 117C 0001 001C      		move.b	#1,$1C(a0)
   11671/    9786 : 6070                		bra.s	Obj23_Animate2
   11672/    9788 :                     ; ===========================================================================
   11673/    9788 :                     
   11674/    9788 :                     Obj23_Animate:				; XREF: Obj23_Index
   11675/    9788 : 610E                		bsr.s	Obj23_ChkCancel
   11676/    978A : 43F9 0000 981A      		lea	(Ani_obj23).l,a1
   11677/    9790 : 6100 0D6C           		bsr.w	AnimateSprite
   11678/    9794 : 6000 3C3C           		bra.w	DisplaySprite
   11679/    9798 :                     ; ---------------------------------------------------------------------------
   11680/    9798 :                     ; Subroutine to	check if the Buzz Bomber which fired the missile has been
   11681/    9798 :                     ; destroyed, and if it has, then cancel	the missile
   11682/    9798 :                     ; ---------------------------------------------------------------------------
   11683/    9798 :                     
   11684/    9798 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   11685/    9798 :                     
   11686/    9798 :                     
   11687/    9798 :                     Obj23_ChkCancel:			; XREF: Obj23_Main
   11688/    9798 : 2268 003C           		movea.l	$3C(a0),a1
   11689/    979C : 0C11 0027           		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
   11690/    97A0 : 6746                		beq.s	Obj23_Delete	; if yes, branch
   11691/    97A2 : 4E75                		rts	
   11692/    97A4 :                     ; End of function Obj23_ChkCancel
   11693/    97A4 :                     
   11694/    97A4 :                     ; ===========================================================================
   11695/    97A4 :                     
   11696/    97A4 :                     Obj23_FromBuzz:				; XREF: Obj23_Index
   11697/    97A4 : 0828 0007 0022      		btst	#7,$22(a0)
   11698/    97AA : 662E                		bne.s	Obj23_Explode
   11699/    97AC : 117C 0087 0020      		move.b	#$87,$20(a0)
   11700/    97B2 : 117C 0001 001C      		move.b	#1,$1C(a0)
   11701/    97B8 : 6100 3BF2           		bsr.w	SpeedToPos
   11702/    97BC : 43F9 0000 981A      		lea	(Ani_obj23).l,a1
   11703/    97C2 : 6100 0D3A           		bsr.w	AnimateSprite
   11704/    97C6 : 6100 3C0A           		bsr.w	DisplaySprite
   11705/    97CA : 3038 F72E           		move.w	($FFFFF72E).w,d0
   11706/    97CE : 0640 00E0           		addi.w	#$E0,d0
   11707/    97D2 : B068 000C           		cmp.w	$C(a0),d0	; has object moved below the level boundary?
   11708/    97D6 : 6510                		bcs.s	Obj23_Delete	; if yes, branch
   11709/    97D8 : 4E75                		rts	
   11710/    97DA :                     ; ===========================================================================
   11711/    97DA :                     
   11712/    97DA :                     Obj23_Explode:				; XREF: Obj23_FromBuzz
   11713/    97DA : 10BC 0024           		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
   11714/    97DE : 117C 0000 0024      		move.b	#0,$24(a0)
   11715/    97E4 : 6000 F30A           		bra.w	Obj24
   11716/    97E8 :                     ; ===========================================================================
   11717/    97E8 :                     
   11718/    97E8 :                     Obj23_Delete:				; XREF: Obj23_Index
   11719/    97E8 : 6100 3C24           		bsr.w	DeleteObject
   11720/    97EC : 4E75                		rts	
   11721/    97EE :                     ; ===========================================================================
   11722/    97EE :                     
   11723/    97EE :                     Obj23_FromNewt:				; XREF: Obj23_Index
   11724/    97EE : 4A28 0001           		tst.b	1(a0)
   11725/    97F2 : 6AF4                		bpl.s	Obj23_Delete
   11726/    97F4 : 6100 3BB6           		bsr.w	SpeedToPos
   11727/    97F8 :                     
   11728/    97F8 :                     Obj23_Animate2:				; XREF: Obj23_Main
   11729/    97F8 : 43F9 0000 981A      		lea	(Ani_obj23).l,a1
   11730/    97FE : 6100 0CFE           		bsr.w	AnimateSprite
   11731/    9802 : 6100 3BCE           		bsr.w	DisplaySprite
   11732/    9806 : 4E75                		rts	
   11733/    9808 :                     ; ===========================================================================
   11734/    9808 :                     Ani_obj22:
   11735/    9808 :                     	include "_animations/obj22.asm"
(1)    1/    9808 :                     ; ---------------------------------------------------------------------------
(1)    2/    9808 :                     ; Animation script - Buzz Bomber enemy
(1)    3/    9808 :                     ; ---------------------------------------------------------------------------
(1)    4/    9808 : 0006                		dc.w byte_9A1E-Ani_obj22
(1)    5/    980A : 000A                		dc.w byte_9A22-Ani_obj22
(1)    6/    980C : 000E                		dc.w byte_9A26-Ani_obj22
(1)    7/    980E : 0100 01FF           byte_9A1E:	dc.b 1,	0, 1, $FF
(1)    8/    9812 : 0102 03FF           byte_9A22:	dc.b 1,	2, 3, $FF
(1)    9/    9816 : 0104 05FF           byte_9A26:	dc.b 1,	4, 5, $FF
(1)   10/    981A : (MACRO)              		even
   11736/    981A :                     
   11737/    981A :                     Ani_obj23:
   11738/    981A :                     	include "_animations/obj23.asm"
(1)    1/    981A :                     ; ---------------------------------------------------------------------------
(1)    2/    981A :                     ; Animation script - missile that Buzz Bomber throws
(1)    3/    981A :                     ; ---------------------------------------------------------------------------
(1)    4/    981A : 0004                		dc.w byte_9A2E-Ani_obj23
(1)    5/    981C : 0008                		dc.w byte_9A32-Ani_obj23
(1)    6/    981E : 0700 01FC           byte_9A2E:	dc.b 7,	0, 1, $FC
(1)    7/    9822 : 0102 03FF           byte_9A32:	dc.b 1,	2, 3, $FF
(1)    8/    9826 : (MACRO)              		even
   11739/    9826 :                     
   11740/    9826 :                     ; ---------------------------------------------------------------------------
   11741/    9826 :                     ; Sprite mappings - Buzz Bomber	enemy
   11742/    9826 :                     ; ---------------------------------------------------------------------------
   11743/    9826 :                     Map_obj22:
   11744/    9826 :                     	include "_mappings/obj22.asm"
(1)    1/    9826 :                     ; ---------------------------------------------------------------------------
(1)    2/    9826 :                     ; Sprite mappings - Buzz Bomber	enemy
(1)    3/    9826 :                     ; ---------------------------------------------------------------------------
(1)    4/    9826 : 000C 002B           		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
(1)    5/    982A : 004A 006E           		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
(1)    6/    982E : 0092 00B1           		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
(1)    7/    9832 : 06                  byte_9A42:	dc.b 6
(1)    8/    9833 : F409 0000 E8        		dc.b $F4, 9, 0,	0, $E8
(1)    9/    9838 : F409 000F 00        		dc.b $F4, 9, 0,	$F, 0
(1)   10/    983D : 0408 0015 E8        		dc.b 4,	8, 0, $15, $E8
(1)   11/    9842 : 0404 0018 00        		dc.b 4,	4, 0, $18, 0
(1)   12/    9847 : F108 001A EC        		dc.b $F1, 8, 0,	$1A, $EC
(1)   13/    984C : F104 001D 04        		dc.b $F1, 4, 0,	$1D, 4
(1)   14/    9851 : 06                  byte_9A61:	dc.b 6
(1)   15/    9852 : F409 0000 E8        		dc.b $F4, 9, 0,	0, $E8
(1)   16/    9857 : F409 000F 00        		dc.b $F4, 9, 0,	$F, 0
(1)   17/    985C : 0408 0015 E8        		dc.b 4,	8, 0, $15, $E8
(1)   18/    9861 : 0404 0018 00        		dc.b 4,	4, 0, $18, 0
(1)   19/    9866 : F408 001F EC        		dc.b $F4, 8, 0,	$1F, $EC
(1)   20/    986B : F404 0022 04        		dc.b $F4, 4, 0,	$22, 4
(1)   21/    9870 : 07                  byte_9A80:	dc.b 7
(1)   22/    9871 : 0400 0030 0C        		dc.b 4,	0, 0, $30, $C
(1)   23/    9876 : F409 0000 E8        		dc.b $F4, 9, 0,	0, $E8
(1)   24/    987B : F409 000F 00        		dc.b $F4, 9, 0,	$F, 0
(1)   25/    9880 : 0408 0015 E8        		dc.b 4,	8, 0, $15, $E8
(1)   26/    9885 : 0404 0018 00        		dc.b 4,	4, 0, $18, 0
(1)   27/    988A : F108 001A EC        		dc.b $F1, 8, 0,	$1A, $EC
(1)   28/    988F : F104 001D 04        		dc.b $F1, 4, 0,	$1D, 4
(1)   29/    9894 : 07                  byte_9AA4:	dc.b 7
(1)   30/    9895 : 0404 0031 0C        		dc.b 4,	4, 0, $31, $C
(1)   31/    989A : F409 0000 E8        		dc.b $F4, 9, 0,	0, $E8
(1)   32/    989F : F409 000F 00        		dc.b $F4, 9, 0,	$F, 0
(1)   33/    98A4 : 0408 0015 E8        		dc.b 4,	8, 0, $15, $E8
(1)   34/    98A9 : 0404 0018 00        		dc.b 4,	4, 0, $18, 0
(1)   35/    98AE : F408 001F EC        		dc.b $F4, 8, 0,	$1F, $EC
(1)   36/    98B3 : F404 0022 04        		dc.b $F4, 4, 0,	$22, 4
(1)   37/    98B8 : 06                  byte_9AC8:	dc.b 6
(1)   38/    98B9 : F40D 0000 EC        		dc.b $F4, $D, 0, 0, $EC
(1)   39/    98BE : 040C 0008 EC        		dc.b 4,	$C, 0, 8, $EC
(1)   40/    98C3 : 0400 000C 0C        		dc.b 4,	0, 0, $C, $C
(1)   41/    98C8 : 0C04 000D F4        		dc.b $C, 4, 0, $D, $F4
(1)   42/    98CD : F108 001A EC        		dc.b $F1, 8, 0,	$1A, $EC
(1)   43/    98D2 : F104 001D 04        		dc.b $F1, 4, 0,	$1D, 4
(1)   44/    98D7 : 04                  byte_9AE7:	dc.b 4
(1)   45/    98D8 : F40D 0000 EC        		dc.b $F4, $D, 0, 0, $EC
(1)   46/    98DD : 040C 0008 EC        		dc.b 4,	$C, 0, 8, $EC
(1)   47/    98E2 : 0400 000C 0C        		dc.b 4,	0, 0, $C, $C
(1)   48/    98E7 : 0C04 000D F4        		dc.b $C, 4, 0, $D, $F4
(1)   49/    98EC : F408 001F EC        		dc.b $F4, 8, 0,	$1F, $EC
(1)   50/    98F1 : F404 0022 04        		dc.b $F4, 4, 0,	$22, 4
(1)   51/    98F6 : (MACRO)              		even
   11745/    98F6 :                     
   11746/    98F6 :                     ; ---------------------------------------------------------------------------
   11747/    98F6 :                     ; Sprite mappings - missile that Buzz Bomber throws
   11748/    98F6 :                     ; ---------------------------------------------------------------------------
   11749/    98F6 :                     Map_obj23:
   11750/    98F6 :                     	include "_mappings/obj23.asm"
(1)    1/    98F6 :                     ; ---------------------------------------------------------------------------
(1)    2/    98F6 :                     ; Sprite mappings - missile that Buzz Bomber throws
(1)    3/    98F6 :                     ; ---------------------------------------------------------------------------
(1)    4/    98F6 : 0008 000E           		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
(1)    5/    98FA : 0014 001A           		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
(1)    6/    98FE : 01                  byte_9B0E:	dc.b 1
(1)    7/    98FF : F805 0024 F8        		dc.b $F8, 5, 0,	$24, $F8
(1)    8/    9904 : 01                  byte_9B14:	dc.b 1
(1)    9/    9905 : F805 0028 F8        		dc.b $F8, 5, 0,	$28, $F8
(1)   10/    990A : 01                  byte_9B1A:	dc.b 1
(1)   11/    990B : F805 002C F8        		dc.b $F8, 5, 0,	$2C, $F8
(1)   12/    9910 : 01                  byte_9B20:	dc.b 1
(1)   13/    9911 : F805 0033 F8        		dc.b $F8, 5, 0,	$33, $F8
(1)   14/    9916 : (MACRO)              		even
   11751/    9916 :                     
   11752/    9916 :                     ; ===========================================================================
   11753/    9916 :                     ; ---------------------------------------------------------------------------
   11754/    9916 :                     ; Object 25 - rings
   11755/    9916 :                     ; ---------------------------------------------------------------------------
   11756/    9916 :                     
   11757/    9916 :                     Obj25:					; XREF: Obj_Index
   11758/    9916 : 7000                		moveq	#0,d0
   11759/    9918 : 1028 0024           		move.b	$24(a0),d0
   11760/    991C : 323B 0006           		move.w	Obj25_Index(pc,d0.w),d1
   11761/    9920 : 4EFB 1002           		jmp	Obj25_Index(pc,d1.w)
   11762/    9924 :                     ; ===========================================================================
   11763/    9924 : 002A                Obj25_Index:	dc.w Obj25_Main-Obj25_Index
   11764/    9926 : 00E0                		dc.w Obj25_Animate-Obj25_Index
   11765/    9928 : 0108                		dc.w Obj25_Collect-Obj25_Index
   11766/    992A : 012E                		dc.w Obj25_Sparkle-Obj25_Index
   11767/    992C : 013C                		dc.w Obj25_Delete-Obj25_Index
   11768/    992E :                     ; ---------------------------------------------------------------------------
   11769/    992E :                     ; Distances between rings (format: horizontal, vertical)
   11770/    992E :                     ; ---------------------------------------------------------------------------
   11771/    992E : 1000                Obj25_PosData:	dc.b $10, 0		; horizontal tight
   11772/    9930 : 1800                		dc.b $18, 0		; horizontal normal
   11773/    9932 : 2000                		dc.b $20, 0		; horizontal wide
   11774/    9934 : 0010                		dc.b 0,	$10		; vertical tight
   11775/    9936 : 0018                		dc.b 0,	$18		; vertical normal
   11776/    9938 : 0020                		dc.b 0,	$20		; vertical wide
   11777/    993A : 1010                		dc.b $10, $10		; diagonal
   11778/    993C : 1818                		dc.b $18, $18
   11779/    993E : 2020                		dc.b $20, $20
   11780/    9940 : F010                		dc.b $F0, $10
   11781/    9942 : E818                		dc.b $E8, $18
   11782/    9944 : E020                		dc.b $E0, $20
   11783/    9946 : 1008                		dc.b $10, 8
   11784/    9948 : 1810                		dc.b $18, $10
   11785/    994A : F008                		dc.b $F0, 8
   11786/    994C : E810                		dc.b $E8, $10
   11787/    994E :                     ; ===========================================================================
   11788/    994E :                     
   11789/    994E :                     Obj25_Main:				; XREF: Obj25_Index
   11790/    994E : 45F8 FC00           		lea	($FFFFFC00).w,a2
   11791/    9952 : 7000                		moveq	#0,d0
   11792/    9954 : 1028 0023           		move.b	$23(a0),d0
   11793/    9958 : 45F2 0002           		lea	2(a2,d0.w),a2
   11794/    995C : 1812                		move.b	(a2),d4
   11795/    995E : 1228 0028           		move.b	$28(a0),d1
   11796/    9962 : 1001                		move.b	d1,d0
   11797/    9964 : 0241 0007           		andi.w	#7,d1
   11798/    9968 : 0C41 0007           		cmpi.w	#7,d1
   11799/    996C : 6602                		bne.s	loc_9B80
   11800/    996E : 7206                		moveq	#6,d1
   11801/    9970 :                     
   11802/    9970 :                     loc_9B80:
   11803/    9970 : 4841                		swap	d1
   11804/    9972 : 323C 0000           		move.w	#0,d1
   11805/    9976 : E808                		lsr.b	#4,d0
   11806/    9978 : D040                		add.w	d0,d0
   11807/    997A : 1A3B 00B2           		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
   11808/    997E : 4885                		ext.w	d5
   11809/    9980 : 1C3B 00AD           		move.b	Obj25_PosData+1(pc,d0.w),d6
   11810/    9984 : 4886                		ext.w	d6
   11811/    9986 : 2248                		movea.l	a0,a1
   11812/    9988 : 3428 0008           		move.w	8(a0),d2
   11813/    998C : 3628 000C           		move.w	$C(a0),d3
   11814/    9990 : E20C                		lsr.b	#1,d4
   11815/    9992 : 655C                		bcs.s	loc_9C02
   11816/    9994 : 0892 0007           		bclr	#7,(a2)
   11817/    9998 : 6010                		bra.s	loc_9BBA
   11818/    999A :                     ; ===========================================================================
   11819/    999A :                     
   11820/    999A :                     Obj25_MakeRings:
   11821/    999A : 4841                		swap	d1
   11822/    999C : E20C                		lsr.b	#1,d4
   11823/    999E : 6550                		bcs.s	loc_9C02
   11824/    99A0 : 0892 0007           		bclr	#7,(a2)
   11825/    99A4 : 6100 3EB2           		bsr.w	SingleObjLoad
   11826/    99A8 : 6652                		bne.s	loc_9C0E
   11827/    99AA :                     
   11828/    99AA :                     loc_9BBA:				; XREF: Obj25_Main
   11829/    99AA : 12BC 0025           		move.b	#$25,0(a1)	; load ring object
   11830/    99AE : 5429 0024           		addq.b	#2,$24(a1)
   11831/    99B2 : 3342 0008           		move.w	d2,8(a1)	; set x-axis position based on d2
   11832/    99B6 : 3368 0008 0032      		move.w	8(a0),$32(a1)
   11833/    99BC : 3343 000C           		move.w	d3,$C(a1)	; set y-axis position based on d3
   11834/    99C0 : 237C 0000 9D7C      		move.l	#Map_obj25,4(a1)
             99C6 : 0004             
   11835/    99C8 : 337C 27B2 0002      		move.w	#$27B2,2(a1)
   11836/    99CE : 137C 0004 0001      		move.b	#4,1(a1)
   11837/    99D4 : 137C 0002 0018      		move.b	#2,$18(a1)
   11838/    99DA : 137C 0047 0020      		move.b	#$47,$20(a1)
   11839/    99E0 : 137C 0008 0019      		move.b	#8,$19(a1)
   11840/    99E6 : 1368 0023 0023      		move.b	$23(a0),$23(a1)
   11841/    99EC : 1341 0034           		move.b	d1,$34(a1)
   11842/    99F0 :                     
   11843/    99F0 :                     loc_9C02:
   11844/    99F0 : 5241                		addq.w	#1,d1
   11845/    99F2 : D445                		add.w	d5,d2		; add ring spacing value to d2
   11846/    99F4 : D646                		add.w	d6,d3		; add ring spacing value to d3
   11847/    99F6 : 4841                		swap	d1
   11848/    99F8 : 51C9 FFA0           		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
   11849/    99FC :                     
   11850/    99FC :                     loc_9C0E:
   11851/    99FC : 0812 0000           		btst	#0,(a2)
   11852/    9A00 : 6600 3A0C           		bne.w	DeleteObject
   11853/    9A04 :                     
   11854/    9A04 :                     Obj25_Animate:				; XREF: Obj25_Index
   11855/    9A04 : 1178 FEC3 001A      		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
   11856/    9A0A : 6100 39C6           		bsr.w	DisplaySprite
   11857/    9A0E : 3028 0032           		move.w	$32(a0),d0
   11858/    9A12 : 0240 FF80           		andi.w	#$FF80,d0
   11859/    9A16 : 3238 F700           		move.w	($FFFFF700).w,d1
   11860/    9A1A : 0441 0080           		subi.w	#$80,d1
   11861/    9A1E : 0241 FF80           		andi.w	#$FF80,d1
   11862/    9A22 : 9041                		sub.w	d1,d0
   11863/    9A24 : 0C40 0280           		cmpi.w	#$280,d0
   11864/    9A28 : 6236                		bhi.s	Obj25_Delete
   11865/    9A2A : 4E75                		rts	
   11866/    9A2C :                     ; ===========================================================================
   11867/    9A2C :                     
   11868/    9A2C :                     Obj25_Collect:				; XREF: Obj25_Index
   11869/    9A2C : 5428 0024           		addq.b	#2,$24(a0)
   11870/    9A30 : 117C 0000 0020      		move.b	#0,$20(a0)
   11871/    9A36 : 117C 0001 0018      		move.b	#1,$18(a0)
   11872/    9A3C : 6100 0026           		bsr.w	CollectRing
   11873/    9A40 : 45F8 FC00           		lea	($FFFFFC00).w,a2
   11874/    9A44 : 7000                		moveq	#0,d0
   11875/    9A46 : 1028 0023           		move.b	$23(a0),d0
   11876/    9A4A : 1228 0034           		move.b	$34(a0),d1
   11877/    9A4E : 03F2 0002           		bset	d1,2(a2,d0.w)
   11878/    9A52 :                     
   11879/    9A52 :                     Obj25_Sparkle:				; XREF: Obj25_Index
   11880/    9A52 : 43F9 0000 9D74      		lea	(Ani_obj25).l,a1
   11881/    9A58 : 6100 0AA4           		bsr.w	AnimateSprite
   11882/    9A5C : 6000 3974           		bra.w	DisplaySprite
   11883/    9A60 :                     ; ===========================================================================
   11884/    9A60 :                     
   11885/    9A60 :                     Obj25_Delete:				; XREF: Obj25_Index
   11886/    9A60 : 6000 39AC           		bra.w	DeleteObject
   11887/    9A64 :                     
   11888/    9A64 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   11889/    9A64 :                     
   11890/    9A64 :                     
   11891/    9A64 :                     CollectRing:				; XREF: Obj25_Collect
   11892/    9A64 : 5278 FE20           		addq.w	#1,($FFFFFE20).w ; add 1 to rings
   11893/    9A68 : 0038 0001 FE1D      		ori.b	#1,($FFFFFE1D).w ; update the rings counter
   11894/    9A6E : 303C 00B5           		move.w	#$B5,d0		; play ring sound
   11895/    9A72 : 0C78 0064 FE20      		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
   11896/    9A78 : 6524                		bcs.s	Obj25_PlaySnd	; if yes, branch
   11897/    9A7A : 08F8 0001 FE1B      		bset	#1,($FFFFFE1B).w ; update lives	counter
   11898/    9A80 : 6710                		beq.s	loc_9CA4
   11899/    9A82 : 0C78 00C8 FE20      		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
   11900/    9A88 : 6514                		bcs.s	Obj25_PlaySnd	; if yes, branch
   11901/    9A8A : 08F8 0002 FE1B      		bset	#2,($FFFFFE1B).w ; update lives	counter
   11902/    9A90 : 660C                		bne.s	Obj25_PlaySnd
   11903/    9A92 :                     
   11904/    9A92 :                     loc_9CA4:
   11905/    9A92 : 5238 FE12           		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
   11906/    9A96 : 5238 FE1C           		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
   11907/    9A9A : 303C 0088           		move.w	#$88,d0		; play extra life music
   11908/    9A9E :                     
   11909/    9A9E :                     Obj25_PlaySnd:
   11910/    9A9E : 4EF9 0000 1182      		jmp	(PlaySound_Special).l
   11911/    9AA4 :                     ; End of function CollectRing
   11912/    9AA4 :                     
   11913/    9AA4 :                     ; ===========================================================================
   11914/    9AA4 :                     ; ---------------------------------------------------------------------------
   11915/    9AA4 :                     ; Object 37 - rings flying out of Sonic	when he's hit
   11916/    9AA4 :                     ; ---------------------------------------------------------------------------
   11917/    9AA4 :                     
   11918/    9AA4 :                     Obj37:					; XREF: Obj_Index
   11919/    9AA4 : 7000                		moveq	#0,d0
   11920/    9AA6 : 1028 0024           		move.b	$24(a0),d0
   11921/    9AAA : 323B 0006           		move.w	Obj37_Index(pc,d0.w),d1
   11922/    9AAE : 4EFB 1002           		jmp	Obj37_Index(pc,d1.w)
   11923/    9AB2 :                     ; ===========================================================================
   11924/    9AB2 : 000A                Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
   11925/    9AB4 : 00C8                		dc.w Obj37_Bounce-Obj37_Index
   11926/    9AB6 : 011A                		dc.w Obj37_Collect-Obj37_Index
   11927/    9AB8 : 012E                		dc.w Obj37_Sparkle-Obj37_Index
   11928/    9ABA : 013C                		dc.w Obj37_Delete-Obj37_Index
   11929/    9ABC :                     ; ===========================================================================
   11930/    9ABC :                     
   11931/    9ABC :                     Obj37_CountRings:			; XREF: Obj37_Index
   11932/    9ABC : 2248                		movea.l	a0,a1
   11933/    9ABE : 7A00                		moveq	#0,d5
   11934/    9AC0 : 3A38 FE20           		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
   11935/    9AC4 : 7020                		moveq	#32,d0
   11936/    9AC6 : BA40                		cmp.w	d0,d5		; do you have 32 or more?
   11937/    9AC8 : 6502                		bcs.s	loc_9CDE	; if not, branch
   11938/    9ACA : 3A00                		move.w	d0,d5		; if yes, set d5 to 32
   11939/    9ACC :                     
   11940/    9ACC :                     loc_9CDE:
   11941/    9ACC : 5345                		subq.w	#1,d5
   11942/    9ACE : 383C 0288           		move.w	#$288,d4
   11943/    9AD2 : 6008                		bra.s	Obj37_MakeRings
   11944/    9AD4 :                     ; ===========================================================================
   11945/    9AD4 :                     
   11946/    9AD4 :                     Obj37_Loop:
   11947/    9AD4 : 6100 3D82           		bsr.w	SingleObjLoad
   11948/    9AD8 : 6600 0084           		bne.w	Obj37_ResetCounter
   11949/    9ADC :                     
   11950/    9ADC :                     Obj37_MakeRings:			; XREF: Obj37_CountRings
   11951/    9ADC : 12BC 0037           		move.b	#$37,0(a1)	; load bouncing	ring object
   11952/    9AE0 : 5429 0024           		addq.b	#2,$24(a1)
   11953/    9AE4 : 137C 0008 0016      		move.b	#8,$16(a1)
   11954/    9AEA : 137C 0008 0017      		move.b	#8,$17(a1)
   11955/    9AF0 : 3368 0008 0008      		move.w	8(a0),8(a1)
   11956/    9AF6 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   11957/    9AFC : 237C 0000 9D7C      		move.l	#Map_obj25,4(a1)
             9B02 : 0004             
   11958/    9B04 : 337C 27B2 0002      		move.w	#$27B2,2(a1)
   11959/    9B0A : 137C 0004 0001      		move.b	#4,1(a1)
   11960/    9B10 : 137C 0003 0018      		move.b	#3,$18(a1)
   11961/    9B16 : 137C 0047 0020      		move.b	#$47,$20(a1)
   11962/    9B1C : 137C 0008 0019      		move.b	#8,$19(a1)
   11963/    9B22 : 11FC 00FF FEC6      		move.b	#-1,($FFFFFEC6).w
   11964/    9B28 : 4A44                		tst.w	d4
   11965/    9B2A : 6B22                		bmi.s	loc_9D62
   11966/    9B2C : 3004                		move.w	d4,d0
   11967/    9B2E : 6100 8C90           		bsr.w	CalcSine
   11968/    9B32 : 3404                		move.w	d4,d2
   11969/    9B34 : E04A                		lsr.w	#8,d2
   11970/    9B36 : E560                		asl.w	d2,d0
   11971/    9B38 : E561                		asl.w	d2,d1
   11972/    9B3A : 3400                		move.w	d0,d2
   11973/    9B3C : 3601                		move.w	d1,d3
   11974/    9B3E : 0604 0010           		addi.b	#$10,d4
   11975/    9B42 : 640A                		bcc.s	loc_9D62
   11976/    9B44 : 0444 0080           		subi.w	#$80,d4
   11977/    9B48 : 6404                		bcc.s	loc_9D62
   11978/    9B4A : 383C 0288           		move.w	#$288,d4
   11979/    9B4E :                     
   11980/    9B4E :                     loc_9D62:
   11981/    9B4E : 3342 0010           		move.w	d2,$10(a1)
   11982/    9B52 : 3343 0012           		move.w	d3,$12(a1)
   11983/    9B56 : 4442                		neg.w	d2
   11984/    9B58 : 4444                		neg.w	d4
   11985/    9B5A : 51CD FF78           		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
   11986/    9B5E :                     
   11987/    9B5E :                     Obj37_ResetCounter:			; XREF: Obj37_Loop
   11988/    9B5E : 31FC 0000 FE20      		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
   11989/    9B64 : 11FC 0080 FE1D      		move.b	#$80,($FFFFFE1D).w ; update ring counter
   11990/    9B6A : 11FC 0000 FE1B      		move.b	#0,($FFFFFE1B).w
   11991/    9B70 : 303C 00C6           		move.w	#$C6,d0
   11992/    9B74 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play ring loss sound
   11993/    9B7A :                     
   11994/    9B7A :                     Obj37_Bounce:				; XREF: Obj37_Index
   11995/    9B7A : 1178 FEC7 001A      		move.b	($FFFFFEC7).w,$1A(a0)
   11996/    9B80 : 6100 382A           		bsr.w	SpeedToPos
   11997/    9B84 : 0668 0018 0012      		addi.w	#$18,$12(a0)
   11998/    9B8A : 6B28                		bmi.s	Obj37_ChkDel
   11999/    9B8C : 1038 FE0F           		move.b	($FFFFFE0F).w,d0
   12000/    9B90 : D007                		add.b	d7,d0
   12001/    9B92 : 0200 0003           		andi.b	#3,d0
   12002/    9B96 : 661C                		bne.s	Obj37_ChkDel
   12003/    9B98 : 4EB9 0001 4C08      		jsr	ObjHitFloor
   12004/    9B9E : 4A41                		tst.w	d1
   12005/    9BA0 : 6A12                		bpl.s	Obj37_ChkDel
   12006/    9BA2 : D368 000C           		add.w	d1,$C(a0)
   12007/    9BA6 : 3028 0012           		move.w	$12(a0),d0
   12008/    9BAA : E440                		asr.w	#2,d0
   12009/    9BAC : 9168 0012           		sub.w	d0,$12(a0)
   12010/    9BB0 : 4468 0012           		neg.w	$12(a0)
   12011/    9BB4 :                     
   12012/    9BB4 :                     Obj37_ChkDel:				; XREF: Obj37_Bounce
   12013/    9BB4 : 4A38 FEC6           		tst.b	($FFFFFEC6).w
   12014/    9BB8 : 6734                		beq.s	Obj37_Delete
   12015/    9BBA : 3038 F72E           		move.w	($FFFFF72E).w,d0
   12016/    9BBE : 0640 00E0           		addi.w	#$E0,d0
   12017/    9BC2 : B068 000C           		cmp.w	$C(a0),d0	; has object moved below level boundary?
   12018/    9BC6 : 6526                		bcs.s	Obj37_Delete	; if yes, branch
   12019/    9BC8 : 6000 3808           		bra.w	DisplaySprite
   12020/    9BCC :                     ; ===========================================================================
   12021/    9BCC :                     
   12022/    9BCC :                     Obj37_Collect:				; XREF: Obj37_Index
   12023/    9BCC : 5428 0024           		addq.b	#2,$24(a0)
   12024/    9BD0 : 117C 0000 0020      		move.b	#0,$20(a0)
   12025/    9BD6 : 117C 0001 0018      		move.b	#1,$18(a0)
   12026/    9BDC : 6100 FE86           		bsr.w	CollectRing
   12027/    9BE0 :                     
   12028/    9BE0 :                     Obj37_Sparkle:				; XREF: Obj37_Index
   12029/    9BE0 : 43F9 0000 9D74      		lea	(Ani_obj25).l,a1
   12030/    9BE6 : 6100 0916           		bsr.w	AnimateSprite
   12031/    9BEA : 6000 37E6           		bra.w	DisplaySprite
   12032/    9BEE :                     ; ===========================================================================
   12033/    9BEE :                     
   12034/    9BEE :                     Obj37_Delete:				; XREF: Obj37_Index
   12035/    9BEE : 6000 381E           		bra.w	DeleteObject
   12036/    9BF2 :                     ; ===========================================================================
   12037/    9BF2 :                     ; ---------------------------------------------------------------------------
   12038/    9BF2 :                     ; Object 4B - giant ring for entry to special stage
   12039/    9BF2 :                     ; ---------------------------------------------------------------------------
   12040/    9BF2 :                     
   12041/    9BF2 :                     Obj4B:					; XREF: Obj_Index
   12042/    9BF2 : 7000                		moveq	#0,d0
   12043/    9BF4 : 1028 0024           		move.b	$24(a0),d0
   12044/    9BF8 : 323B 0006           		move.w	Obj4B_Index(pc,d0.w),d1
   12045/    9BFC : 4EFB 1002           		jmp	Obj4B_Index(pc,d1.w)
   12046/    9C00 :                     ; ===========================================================================
   12047/    9C00 : 0008                Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
   12048/    9C02 : 0052                		dc.w Obj4B_Animate-Obj4B_Index
   12049/    9C04 : 007A                		dc.w Obj4B_Collect-Obj4B_Index
   12050/    9C06 : 00BC                		dc.w Obj4B_Delete-Obj4B_Index
   12051/    9C08 :                     ; ===========================================================================
   12052/    9C08 :                     
   12053/    9C08 :                     Obj4B_Main:				; XREF: Obj4B_Index
   12054/    9C08 : 217C 0000 9DBC      		move.l	#Map_obj4B,4(a0)
             9C0E : 0004             
   12055/    9C10 : 317C 2400 0002      		move.w	#$2400,2(a0)
   12056/    9C16 : 0028 0004 0001      		ori.b	#4,1(a0)
   12057/    9C1C : 117C 0040 0019      		move.b	#$40,$19(a0)
   12058/    9C22 : 4A28 0001           		tst.b	1(a0)
   12059/    9C26 : 6A2A                		bpl.s	Obj4B_Animate
   12060/    9C28 : 0C38 0006 FE57      		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
   12061/    9C2E : 6700 008C           		beq.w	Obj4B_Delete	; if yes, branch
   12062/    9C32 : 0C78 0032 FE20      		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
   12063/    9C38 : 6402                		bcc.s	Obj4B_Okay	; if yes, branch
   12064/    9C3A : 4E75                		rts	
   12065/    9C3C :                     ; ===========================================================================
   12066/    9C3C :                     
   12067/    9C3C :                     Obj4B_Okay:				; XREF: Obj4B_Main
   12068/    9C3C : 5428 0024           		addq.b	#2,$24(a0)
   12069/    9C40 : 117C 0002 0018      		move.b	#2,$18(a0)
   12070/    9C46 : 117C 0052 0020      		move.b	#$52,$20(a0)
   12071/    9C4C : 31FC 0C40 F7BE      		move.w	#$C40,($FFFFF7BE).w
   12072/    9C52 :                     
   12073/    9C52 :                     Obj4B_Animate:				; XREF: Obj4B_Index
   12074/    9C52 : 1178 FEC3 001A      		move.b	($FFFFFEC3).w,$1A(a0)
   12075/    9C58 : 3028 0008           		move.w	8(a0),d0
   12076/    9C5C : 0240 FF80           		andi.w	#$FF80,d0
   12077/    9C60 : 3238 F700           		move.w	($FFFFF700).w,d1
   12078/    9C64 : 0441 0080           		subi.w	#$80,d1
   12079/    9C68 : 0241 FF80           		andi.w	#$FF80,d1
   12080/    9C6C : 9041                		sub.w	d1,d0
   12081/    9C6E : 0C40 0280           		cmpi.w	#$280,d0
   12082/    9C72 : 6200 379A           		bhi.w	DeleteObject
   12083/    9C76 : 6000 375A           		bra.w	DisplaySprite
   12084/    9C7A :                     ; ===========================================================================
   12085/    9C7A :                     
   12086/    9C7A :                     Obj4B_Collect:				; XREF: Obj4B_Index
   12087/    9C7A : 5528 0024           		subq.b	#2,$24(a0)
   12088/    9C7E : 117C 0000 0020      		move.b	#0,$20(a0)
   12089/    9C84 : 6100 3BD2           		bsr.w	SingleObjLoad
   12090/    9C88 : 6600 0026           		bne.w	Obj4B_PlaySnd
   12091/    9C8C : 12BC 007C           		move.b	#$7C,0(a1)	; load giant ring flash	object
   12092/    9C90 : 3368 0008 0008      		move.w	8(a0),8(a1)
   12093/    9C96 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   12094/    9C9C : 2348 003C           		move.l	a0,$3C(a1)
   12095/    9CA0 : 3038 D008           		move.w	($FFFFD008).w,d0
   12096/    9CA4 : B068 0008           		cmp.w	8(a0),d0	; has Sonic come from the left?
   12097/    9CA8 : 6506                		bcs.s	Obj4B_PlaySnd	; if yes, branch
   12098/    9CAA : 08E9 0000 0001      		bset	#0,1(a1)	; reverse flash	object
   12099/    9CB0 :                     
   12100/    9CB0 :                     Obj4B_PlaySnd:
   12101/    9CB0 : 303C 00C3           		move.w	#$C3,d0
   12102/    9CB4 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play giant ring	sound
   12103/    9CBA : 6096                		bra.s	Obj4B_Animate
   12104/    9CBC :                     ; ===========================================================================
   12105/    9CBC :                     
   12106/    9CBC :                     Obj4B_Delete:				; XREF: Obj4B_Index
   12107/    9CBC : 6000 3750           		bra.w	DeleteObject
   12108/    9CC0 :                     ; ===========================================================================
   12109/    9CC0 :                     ; ---------------------------------------------------------------------------
   12110/    9CC0 :                     ; Object 7C - flash effect when	you collect the	giant ring
   12111/    9CC0 :                     ; ---------------------------------------------------------------------------
   12112/    9CC0 :                     
   12113/    9CC0 :                     Obj7C:					; XREF: Obj_Index
   12114/    9CC0 : 7000                		moveq	#0,d0
   12115/    9CC2 : 1028 0024           		move.b	$24(a0),d0
   12116/    9CC6 : 323B 0006           		move.w	Obj7C_Index(pc,d0.w),d1
   12117/    9CCA : 4EFB 1002           		jmp	Obj7C_Index(pc,d1.w)
   12118/    9CCE :                     ; ===========================================================================
   12119/    9CCE : 0006                Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
   12120/    9CD0 : 0030                		dc.w Obj7C_ChkDel-Obj7C_Index
   12121/    9CD2 : 00A2                		dc.w Obj7C_Delete-Obj7C_Index
   12122/    9CD4 :                     ; ===========================================================================
   12123/    9CD4 :                     
   12124/    9CD4 :                     Obj7C_Main:				; XREF: Obj7C_Index
   12125/    9CD4 : 5428 0024           		addq.b	#2,$24(a0)
   12126/    9CD8 : 217C 0000 9E5E      		move.l	#Map_obj7C,4(a0)
             9CDE : 0004             
   12127/    9CE0 : 317C 2462 0002      		move.w	#$2462,2(a0)
   12128/    9CE6 : 0028 0004 0001      		ori.b	#4,1(a0)
   12129/    9CEC : 117C 0000 0018      		move.b	#0,$18(a0)
   12130/    9CF2 : 117C 0020 0019      		move.b	#$20,$19(a0)
   12131/    9CF8 : 117C 00FF 001A      		move.b	#$FF,$1A(a0)
   12132/    9CFE :                     
   12133/    9CFE :                     Obj7C_ChkDel:				; XREF: Obj7C_Index
   12134/    9CFE : 6122                		bsr.s	Obj7C_Collect
   12135/    9D00 : 3028 0008           		move.w	8(a0),d0
   12136/    9D04 : 0240 FF80           		andi.w	#$FF80,d0
   12137/    9D08 : 3238 F700           		move.w	($FFFFF700).w,d1
   12138/    9D0C : 0441 0080           		subi.w	#$80,d1
   12139/    9D10 : 0241 FF80           		andi.w	#$FF80,d1
   12140/    9D14 : 9041                		sub.w	d1,d0
   12141/    9D16 : 0C40 0280           		cmpi.w	#$280,d0
   12142/    9D1A : 6200 36F2           		bhi.w	DeleteObject
   12143/    9D1E : 6000 36B2           		bra.w	DisplaySprite
   12144/    9D22 :                     
   12145/    9D22 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   12146/    9D22 :                     
   12147/    9D22 :                     
   12148/    9D22 :                     Obj7C_Collect:				; XREF: Obj7C_ChkDel
   12149/    9D22 : 5328 001E           		subq.b	#1,$1E(a0)
   12150/    9D26 : 6A38                		bpl.s	locret_9F76
   12151/    9D28 : 117C 0001 001E      		move.b	#1,$1E(a0)
   12152/    9D2E : 5228 001A           		addq.b	#1,$1A(a0)
   12153/    9D32 : 0C28 0008 001A      		cmpi.b	#8,$1A(a0)	; has animation	finished?
   12154/    9D38 : 6428                		bcc.s	Obj7C_End	; if yes, branch
   12155/    9D3A : 0C28 0003 001A      		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
   12156/    9D40 : 661E                		bne.s	locret_9F76	; if not, branch
   12157/    9D42 : 2268 003C           		movea.l	$3C(a0),a1
   12158/    9D46 : 137C 0006 0024      		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
   12159/    9D4C : 11FC 001C D01C      		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
   12160/    9D52 : 11FC 0001 F7CD      		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
   12161/    9D58 : 4238 FE2D           		clr.b	($FFFFFE2D).w	; remove invincibility
   12162/    9D5C : 4238 FE2C           		clr.b	($FFFFFE2C).w	; remove shield
   12163/    9D60 :                     
   12164/    9D60 :                     locret_9F76:
   12165/    9D60 : 4E75                		rts	
   12166/    9D62 :                     ; ===========================================================================
   12167/    9D62 :                     
   12168/    9D62 :                     Obj7C_End:				; XREF: Obj7C_Collect
   12169/    9D62 : 5428 0024           		addq.b	#2,$24(a0)
   12170/    9D66 : 31FC 0000 D000      		move.w	#0,($FFFFD000).w ; remove Sonic	object
   12171/    9D6C : 588F                		addq.l	#4,sp
   12172/    9D6E : 4E75                		rts	
   12173/    9D70 :                     ; End of function Obj7C_Collect
   12174/    9D70 :                     
   12175/    9D70 :                     ; ===========================================================================
   12176/    9D70 :                     
   12177/    9D70 :                     Obj7C_Delete:				; XREF: Obj7C_Index
   12178/    9D70 : 6000 369C           		bra.w	DeleteObject
   12179/    9D74 :                     ; ===========================================================================
   12180/    9D74 :                     Ani_obj25:
   12181/    9D74 :                     	include "_animations/obj25.asm"
(1)    1/    9D74 :                     ; ---------------------------------------------------------------------------
(1)    2/    9D74 :                     ; Animation script - ring
(1)    3/    9D74 :                     ; ---------------------------------------------------------------------------
(1)    4/    9D74 : 0002                		dc.w byte_9F8C-Ani_obj25
(1)    5/    9D76 : 0504 0506 07FC      byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
(1)    6/    9D7C : (MACRO)              		even
   12182/    9D7C :                     
   12183/    9D7C :                     ; ---------------------------------------------------------------------------
   12184/    9D7C :                     ; Sprite mappings - rings
   12185/    9D7C :                     ; ---------------------------------------------------------------------------
   12186/    9D7C :                     Map_obj25:
   12187/    9D7C :                     	include "_mappings/obj25.asm"
(1)    1/    9D7C :                     ; ---------------------------------------------------------------------------
(1)    2/    9D7C :                     ; Sprite mappings - rings
(1)    3/    9D7C :                     ; ---------------------------------------------------------------------------
(1)    4/    9D7C : 0010 0016           		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
(1)    5/    9D80 : 001C 0022           		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
(1)    6/    9D84 : 0028 002E           		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
(1)    7/    9D88 : 0034 003A           		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
(1)    8/    9D8C : 01                  byte_9FA2:	dc.b 1
(1)    9/    9D8D : F805 0000 F8        		dc.b $F8, 5, 0,	0, $F8
(1)   10/    9D92 : 01                  byte_9FA8:	dc.b 1
(1)   11/    9D93 : F805 0004 F8        		dc.b $F8, 5, 0,	4, $F8
(1)   12/    9D98 : 01                  byte_9FAE:	dc.b 1
(1)   13/    9D99 : F801 0008 FC        		dc.b $F8, 1, 0,	8, $FC
(1)   14/    9D9E : 01                  byte_9FB4:	dc.b 1
(1)   15/    9D9F : F805 0804 F8        		dc.b $F8, 5, 8,	4, $F8
(1)   16/    9DA4 : 01                  byte_9FBA:	dc.b 1
(1)   17/    9DA5 : F805 000A F8        		dc.b $F8, 5, 0,	$A, $F8
(1)   18/    9DAA : 01                  byte_9FC0:	dc.b 1
(1)   19/    9DAB : F805 180A F8        		dc.b $F8, 5, $18, $A, $F8
(1)   20/    9DB0 : 01                  byte_9FC6:	dc.b 1
(1)   21/    9DB1 : F805 080A F8        		dc.b $F8, 5, 8,	$A, $F8
(1)   22/    9DB6 : 01                  byte_9FCC:	dc.b 1
(1)   23/    9DB7 : F805 100A F8        		dc.b $F8, 5, $10, $A, $F8
(1)   24/    9DBC : (MACRO)              		even
   12188/    9DBC :                     
   12189/    9DBC :                     ; ---------------------------------------------------------------------------
   12190/    9DBC :                     ; Sprite mappings - giant ring
   12191/    9DBC :                     ; ---------------------------------------------------------------------------
   12192/    9DBC :                     Map_obj4B:
   12193/    9DBC :                     	include "_mappings/obj4B.asm"
(1)    1/    9DBC :                     ; ---------------------------------------------------------------------------
(1)    2/    9DBC :                     ; Sprite mappings - giant ring
(1)    3/    9DBC :                     ; ---------------------------------------------------------------------------
(1)    4/    9DBC : 0008 003B           		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
(1)    5/    9DC0 : 0064 0079           		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
(1)    6/    9DC4 : 0A                  byte_9FDA:	dc.b $A
(1)    7/    9DC5 : E008 0000 E8        		dc.b $E0, 8, 0,	0, $E8
(1)    8/    9DCA : E008 0003 00        		dc.b $E0, 8, 0,	3, 0
(1)    9/    9DCF : E80C 0006 E0        		dc.b $E8, $C, 0, 6, $E0
(1)   10/    9DD4 : E80C 000A 00        		dc.b $E8, $C, 0, $A, 0
(1)   11/    9DD9 : F007 000E E0        		dc.b $F0, 7, 0,	$E, $E0
(1)   12/    9DDE : F007 0016 10        		dc.b $F0, 7, 0,	$16, $10
(1)   13/    9DE3 : 100C 001E E0        		dc.b $10, $C, 0, $1E, $E0
(1)   14/    9DE8 : 100C 0022 00        		dc.b $10, $C, 0, $22, 0
(1)   15/    9DED : 1808 0026 E8        		dc.b $18, 8, 0,	$26, $E8
(1)   16/    9DF2 : 1808 0029 00        		dc.b $18, 8, 0,	$29, 0
(1)   17/    9DF7 : 08                  byte_A00D:	dc.b 8
(1)   18/    9DF8 : E00C 002C F0        		dc.b $E0, $C, 0, $2C, $F0
(1)   19/    9DFD : E808 0030 E8        		dc.b $E8, 8, 0,	$30, $E8
(1)   20/    9E02 : E809 0033 00        		dc.b $E8, 9, 0,	$33, 0
(1)   21/    9E07 : F007 0039 E8        		dc.b $F0, 7, 0,	$39, $E8
(1)   22/    9E0C : F805 0041 08        		dc.b $F8, 5, 0,	$41, 8
(1)   23/    9E11 : 0809 0045 00        		dc.b 8,	9, 0, $45, 0
(1)   24/    9E16 : 1008 004B E8        		dc.b $10, 8, 0,	$4B, $E8
(1)   25/    9E1B : 180C 004E F0        		dc.b $18, $C, 0, $4E, $F0
(1)   26/    9E20 : 04                  byte_A036:	dc.b 4
(1)   27/    9E21 : E007 0052 F4        		dc.b $E0, 7, 0,	$52, $F4
(1)   28/    9E26 : E003 0852 04        		dc.b $E0, 3, 8,	$52, 4
(1)   29/    9E2B : 0007 005A F4        		dc.b 0,	7, 0, $5A, $F4
(1)   30/    9E30 : 0003 085A 04        		dc.b 0,	3, 8, $5A, 4
(1)   31/    9E35 : 08                  byte_A04B:	dc.b 8
(1)   32/    9E36 : E00C 082C F0        		dc.b $E0, $C, 8, $2C, $F0
(1)   33/    9E3B : E808 0830 00        		dc.b $E8, 8, 8,	$30, 0
(1)   34/    9E40 : E809 0833 E8        		dc.b $E8, 9, 8,	$33, $E8
(1)   35/    9E45 : F007 0839 08        		dc.b $F0, 7, 8,	$39, 8
(1)   36/    9E4A : F805 0841 E8        		dc.b $F8, 5, 8,	$41, $E8
(1)   37/    9E4F : 0809 0845 E8        		dc.b 8,	9, 8, $45, $E8
(1)   38/    9E54 : 1008 084B 00        		dc.b $10, 8, 8,	$4B, 0
(1)   39/    9E59 : 180C 084E F0        		dc.b $18, $C, 8, $4E, $F0
(1)   40/    9E5E : (MACRO)              		even
   12194/    9E5E :                     
   12195/    9E5E :                     ; ---------------------------------------------------------------------------
   12196/    9E5E :                     ; Sprite mappings - flash effect when you collect the giant ring
   12197/    9E5E :                     ; ---------------------------------------------------------------------------
   12198/    9E5E :                     Map_obj7C:
   12199/    9E5E :                     	include "_mappings/obj7C.asm"
(1)    1/    9E5E :                     ; ---------------------------------------------------------------------------
(1)    2/    9E5E :                     ; Sprite mappings - flash effect when you collect the giant ring
(1)    3/    9E5E :                     ; ---------------------------------------------------------------------------
(1)    4/    9E5E : 0010 001B           		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
(1)    5/    9E62 : 0030 0045           		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
(1)    6/    9E66 : 005A 006F           		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
(1)    7/    9E6A : 0084 008F           		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
(1)    8/    9E6E : 02                  byte_A084:	dc.b 2
(1)    9/    9E6F : E00F 0000 00        		dc.b $E0, $F, 0, 0, 0
(1)   10/    9E74 : 000F 1000 00        		dc.b 0,	$F, $10, 0, 0
(1)   11/    9E79 : 04                  byte_A08F:	dc.b 4
(1)   12/    9E7A : E00F 0010 F0        		dc.b $E0, $F, 0, $10, $F0
(1)   13/    9E7F : E007 0020 10        		dc.b $E0, 7, 0,	$20, $10
(1)   14/    9E84 : 000F 1010 F0        		dc.b 0,	$F, $10, $10, $F0
(1)   15/    9E89 : 0007 1020 10        		dc.b 0,	7, $10,	$20, $10
(1)   16/    9E8E : 04                  byte_A0A4:	dc.b 4
(1)   17/    9E8F : E00F 0028 E8        		dc.b $E0, $F, 0, $28, $E8
(1)   18/    9E94 : E00B 0038 08        		dc.b $E0, $B, 0, $38, 8
(1)   19/    9E99 : 000F 1028 E8        		dc.b 0,	$F, $10, $28, $E8
(1)   20/    9E9E : 000B 1038 08        		dc.b 0,	$B, $10, $38, 8
(1)   21/    9EA3 : 04                  byte_A0B9:	dc.b 4
(1)   22/    9EA4 : E00F 0834 E0        		dc.b $E0, $F, 8, $34, $E0
(1)   23/    9EA9 : E00F 0034 00        		dc.b $E0, $F, 0, $34, 0
(1)   24/    9EAE : 000F 1834 E0        		dc.b 0,	$F, $18, $34, $E0
(1)   25/    9EB3 : 000F 1034 00        		dc.b 0,	$F, $10, $34, 0
(1)   26/    9EB8 : 04                  byte_A0CE:	dc.b 4
(1)   27/    9EB9 : E00B 0838 E0        		dc.b $E0, $B, 8, $38, $E0
(1)   28/    9EBE : E00F 0828 F8        		dc.b $E0, $F, 8, $28, $F8
(1)   29/    9EC3 : 000B 1838 E0        		dc.b 0,	$B, $18, $38, $E0
(1)   30/    9EC8 : 000F 1828 F8        		dc.b 0,	$F, $18, $28, $F8
(1)   31/    9ECD : 04                  byte_A0E3:	dc.b 4
(1)   32/    9ECE : E007 0820 E0        		dc.b $E0, 7, 8,	$20, $E0
(1)   33/    9ED3 : E00F 0810 F0        		dc.b $E0, $F, 8, $10, $F0
(1)   34/    9ED8 : 0007 1820 E0        		dc.b 0,	7, $18,	$20, $E0
(1)   35/    9EDD : 000F 1810 F0        		dc.b 0,	$F, $18, $10, $F0
(1)   36/    9EE2 : 02                  byte_A0F8:	dc.b 2
(1)   37/    9EE3 : E00F 0800 E0        		dc.b $E0, $F, 8, 0, $E0
(1)   38/    9EE8 : 000F 1800 E0        		dc.b 0,	$F, $18, 0, $E0
(1)   39/    9EED : 04                  byte_A103:	dc.b 4
(1)   40/    9EEE : E00F 0044 E0        		dc.b $E0, $F, 0, $44, $E0
(1)   41/    9EF3 : E00F 0844 00        		dc.b $E0, $F, 8, $44, 0
(1)   42/    9EF8 : 000F 1044 E0        		dc.b 0,	$F, $10, $44, $E0
(1)   43/    9EFD : 000F 1844 00        		dc.b 0,	$F, $18, $44, 0
(1)   44/    9F02 : (MACRO)              		even
   12200/    9F02 :                     
   12201/    9F02 :                     ; ===========================================================================
   12202/    9F02 :                     ; ---------------------------------------------------------------------------
   12203/    9F02 :                     ; Object 26 - monitors
   12204/    9F02 :                     ; ---------------------------------------------------------------------------
   12205/    9F02 :                     
   12206/    9F02 :                     Obj26:					; XREF: Obj_Index
   12207/    9F02 : 7000                		moveq	#0,d0
   12208/    9F04 : 1028 0024           		move.b	$24(a0),d0
   12209/    9F08 : 323B 0006           		move.w	Obj26_Index(pc,d0.w),d1
   12210/    9F0C : 4EFB 1002           		jmp	Obj26_Index(pc,d1.w)
   12211/    9F10 :                     ; ===========================================================================
   12212/    9F10 : 000A                Obj26_Index:	dc.w Obj26_Main-Obj26_Index
   12213/    9F12 : 006C                		dc.w Obj26_Solid-Obj26_Index
   12214/    9F14 : 017E                		dc.w Obj26_BreakOpen-Obj26_Index
   12215/    9F16 : 0150                		dc.w Obj26_Animate-Obj26_Index
   12216/    9F18 : 015A                		dc.w Obj26_Display-Obj26_Index
   12217/    9F1A :                     ; ===========================================================================
   12218/    9F1A :                     
   12219/    9F1A :                     Obj26_Main:				; XREF: Obj26_Index
   12220/    9F1A : 5428 0024           		addq.b	#2,$24(a0)
   12221/    9F1E : 117C 000E 0016      		move.b	#$E,$16(a0)
   12222/    9F24 : 117C 000E 0017      		move.b	#$E,$17(a0)
   12223/    9F2A : 217C 0000 A370      		move.l	#Map_obj26,4(a0)
             9F30 : 0004             
   12224/    9F32 : 317C 0680 0002      		move.w	#$680,2(a0)
   12225/    9F38 : 117C 0004 0001      		move.b	#4,1(a0)
   12226/    9F3E : 117C 0003 0018      		move.b	#3,$18(a0)
   12227/    9F44 : 117C 000F 0019      		move.b	#$F,$19(a0)
   12228/    9F4A : 45F8 FC00           		lea	($FFFFFC00).w,a2
   12229/    9F4E : 7000                		moveq	#0,d0
   12230/    9F50 : 1028 0023           		move.b	$23(a0),d0
   12231/    9F54 : 08B2 0007 0002      		bclr	#7,2(a2,d0.w)
   12232/    9F5A : 0832 0000 0002      		btst	#0,2(a2,d0.w)	; has monitor been broken?
   12233/    9F60 : 670E                		beq.s	Obj26_NotBroken	; if not, branch
   12234/    9F62 : 117C 0008 0024      		move.b	#8,$24(a0)	; run "Obj26_Display" routine
   12235/    9F68 : 117C 000B 001A      		move.b	#$B,$1A(a0)	; use broken monitor frame
   12236/    9F6E : 4E75                		rts	
   12237/    9F70 :                     ; ===========================================================================
   12238/    9F70 :                     
   12239/    9F70 :                     Obj26_NotBroken:			; XREF: Obj26_Main
   12240/    9F70 : 117C 0046 0020      		move.b	#$46,$20(a0)
   12241/    9F76 : 1168 0028 001C      		move.b	$28(a0),$1C(a0)
   12242/    9F7C :                     
   12243/    9F7C :                     Obj26_Solid:				; XREF: Obj26_Index
   12244/    9F7C : 1028 0025           		move.b	$25(a0),d0	; is monitor set to fall?
   12245/    9F80 : 6754                		beq.s	loc_A1EC	; if not, branch
   12246/    9F82 : 5500                		subq.b	#2,d0
   12247/    9F84 : 6630                		bne.s	Obj26_Fall
   12248/    9F86 : 7200                		moveq	#0,d1
   12249/    9F88 : 1228 0019           		move.b	$19(a0),d1
   12250/    9F8C : 0641 000B           		addi.w	#$B,d1
   12251/    9F90 : 6100 D43E           		bsr.w	ExitPlatform
   12252/    9F94 : 0829 0003 0022      		btst	#3,$22(a1)
   12253/    9F9A : 6600 000A           		bne.w	loc_A1BC
   12254/    9F9E : 4228 0025           		clr.b	$25(a0)
   12255/    9FA2 : 6000 00BC           		bra.w	Obj26_Animate
   12256/    9FA6 :                     ; ===========================================================================
   12257/    9FA6 :                     
   12258/    9FA6 :                     loc_A1BC:				; XREF: Obj26_Solid
   12259/    9FA6 : 363C 0010           		move.w	#$10,d3
   12260/    9FAA : 3428 0008           		move.w	8(a0),d2
   12261/    9FAE : 6100 D97E           		bsr.w	MvSonicOnPtfm
   12262/    9FB2 : 6000 00AC           		bra.w	Obj26_Animate
   12263/    9FB6 :                     ; ===========================================================================
   12264/    9FB6 :                     
   12265/    9FB6 :                     Obj26_Fall:				; XREF: Obj26_Solid
   12266/    9FB6 : 6100 33C8           		bsr.w	ObjectFall
   12267/    9FBA : 4EB9 0001 4C08      		jsr	ObjHitFloor
   12268/    9FC0 : 4A41                		tst.w	d1
   12269/    9FC2 : 6A00 009C           		bpl.w	Obj26_Animate
   12270/    9FC6 : D368 000C           		add.w	d1,$C(a0)
   12271/    9FCA : 4268 0012           		clr.w	$12(a0)
   12272/    9FCE : 4228 0025           		clr.b	$25(a0)
   12273/    9FD2 : 6000 008C           		bra.w	Obj26_Animate
   12274/    9FD6 :                     ; ===========================================================================
   12275/    9FD6 :                     
   12276/    9FD6 :                     loc_A1EC:				; XREF: Obj26_Solid
   12277/    9FD6 : 323C 001A           		move.w	#$1A,d1
   12278/    9FDA : 343C 000F           		move.w	#$F,d2
   12279/    9FDE : 6100 0294           		bsr.w	Obj26_SolidSides
   12280/    9FE2 : 6700 0062           		beq.w	loc_A25C
   12281/    9FE6 : 4A69 0012           		tst.w	$12(a1)
   12282/    9FEA : 6B08                		bmi.s	loc_A20A
   12283/    9FEC : 0C29 0002 001C      		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
   12284/    9FF2 : 6752                		beq.s	loc_A25C	; if yes, branch
   12285/    9FF4 :                     
   12286/    9FF4 :                     loc_A20A:
   12287/    9FF4 : 4A41                		tst.w	d1
   12288/    9FF6 : 6A12                		bpl.s	loc_A220
   12289/    9FF8 : 9769 000C           		sub.w	d3,$C(a1)
   12290/    9FFC : 6100 D2C0           		bsr.w	loc_74AE
   12291/    A000 : 117C 0002 0025      		move.b	#2,$25(a0)
   12292/    A006 : 6000 0058           		bra.w	Obj26_Animate
   12293/    A00A :                     ; ===========================================================================
   12294/    A00A :                     
   12295/    A00A :                     loc_A220:
   12296/    A00A : 4A40                		tst.w	d0
   12297/    A00C : 6700 0022           		beq.w	loc_A246
   12298/    A010 : 6B08                		bmi.s	loc_A230
   12299/    A012 : 4A69 0010           		tst.w	$10(a1)
   12300/    A016 : 6B18                		bmi.s	loc_A246
   12301/    A018 : 6006                		bra.s	loc_A236
   12302/    A01A :                     ; ===========================================================================
   12303/    A01A :                     
   12304/    A01A :                     loc_A230:
   12305/    A01A : 4A69 0010           		tst.w	$10(a1)
   12306/    A01E : 6A10                		bpl.s	loc_A246
   12307/    A020 :                     
   12308/    A020 :                     loc_A236:
   12309/    A020 : 9169 0008           		sub.w	d0,8(a1)
   12310/    A024 : 337C 0000 0014      		move.w	#0,$14(a1)
   12311/    A02A : 337C 0000 0010      		move.w	#0,$10(a1)
   12312/    A030 :                     
   12313/    A030 :                     loc_A246:
   12314/    A030 : 0829 0001 0022      		btst	#1,$22(a1)
   12315/    A036 : 661C                		bne.s	loc_A26A
   12316/    A038 : 08E9 0005 0022      		bset	#5,$22(a1)
   12317/    A03E : 08E8 0005 0022      		bset	#5,$22(a0)
   12318/    A044 : 601A                		bra.s	Obj26_Animate
   12319/    A046 :                     ; ===========================================================================
   12320/    A046 :                     
   12321/    A046 :                     loc_A25C:
   12322/    A046 : 0828 0005 0022      		btst	#5,$22(a0)
   12323/    A04C : 6712                		beq.s	Obj26_Animate
   12324/    A04E : 337C 0001 001C      		move.w	#1,$1C(a1)
   12325/    A054 :                     
   12326/    A054 :                     loc_A26A:
   12327/    A054 : 08A8 0005 0022      		bclr	#5,$22(a0)
   12328/    A05A : 08A9 0005 0022      		bclr	#5,$22(a1)
   12329/    A060 :                     
   12330/    A060 :                     Obj26_Animate:				; XREF: Obj26_Index
   12331/    A060 : 43F9 0000 A2EE      		lea	(Ani_obj26).l,a1
   12332/    A066 : 6100 0496           		bsr.w	AnimateSprite
   12333/    A06A :                     
   12334/    A06A :                     Obj26_Display:				; XREF: Obj26_Index
   12335/    A06A : 6100 3366           		bsr.w	DisplaySprite
   12336/    A06E : 3028 0008           		move.w	8(a0),d0
   12337/    A072 : 0240 FF80           		andi.w	#$FF80,d0
   12338/    A076 : 3238 F700           		move.w	($FFFFF700).w,d1
   12339/    A07A : 0441 0080           		subi.w	#$80,d1
   12340/    A07E : 0241 FF80           		andi.w	#$FF80,d1
   12341/    A082 : 9041                		sub.w	d1,d0
   12342/    A084 : 0C40 0280           		cmpi.w	#$280,d0
   12343/    A088 : 6200 3384           		bhi.w	DeleteObject
   12344/    A08C : 4E75                		rts	
   12345/    A08E :                     ; ===========================================================================
   12346/    A08E :                     
   12347/    A08E :                     Obj26_BreakOpen:			; XREF: Obj26_Index
   12348/    A08E : 5428 0024           		addq.b	#2,$24(a0)
   12349/    A092 : 117C 0000 0020      		move.b	#0,$20(a0)
   12350/    A098 : 6100 37BE           		bsr.w	SingleObjLoad
   12351/    A09C : 6616                		bne.s	Obj26_Explode
   12352/    A09E : 12BC 002E           		move.b	#$2E,0(a1)	; load monitor contents	object
   12353/    A0A2 : 3368 0008 0008      		move.w	8(a0),8(a1)
   12354/    A0A8 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   12355/    A0AE : 1368 001C 001C      		move.b	$1C(a0),$1C(a1)
   12356/    A0B4 :                     
   12357/    A0B4 :                     Obj26_Explode:
   12358/    A0B4 : 6100 37A2           		bsr.w	SingleObjLoad
   12359/    A0B8 : 6614                		bne.s	Obj26_SetBroken
   12360/    A0BA : 12BC 0027           		move.b	#$27,0(a1)	; load explosion object
   12361/    A0BE : 5429 0024           		addq.b	#2,$24(a1)
   12362/    A0C2 : 3368 0008 0008      		move.w	8(a0),8(a1)
   12363/    A0C8 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   12364/    A0CE :                     
   12365/    A0CE :                     Obj26_SetBroken:
   12366/    A0CE : 45F8 FC00           		lea	($FFFFFC00).w,a2
   12367/    A0D2 : 7000                		moveq	#0,d0
   12368/    A0D4 : 1028 0023           		move.b	$23(a0),d0
   12369/    A0D8 : 08F2 0000 0002      		bset	#0,2(a2,d0.w)
   12370/    A0DE : 117C 0009 001C      		move.b	#9,$1C(a0)	; set monitor type to broken
   12371/    A0E4 : 6000 32EC           		bra.w	DisplaySprite
   12372/    A0E8 :                     ; ===========================================================================
   12373/    A0E8 :                     ; ---------------------------------------------------------------------------
   12374/    A0E8 :                     ; Object 2E - contents of monitors
   12375/    A0E8 :                     ; ---------------------------------------------------------------------------
   12376/    A0E8 :                     
   12377/    A0E8 :                     Obj2E:					; XREF: Obj_Index
   12378/    A0E8 : 7000                		moveq	#0,d0
   12379/    A0EA : 1028 0024           		move.b	$24(a0),d0
   12380/    A0EE : 323B 000A           		move.w	Obj2E_Index(pc,d0.w),d1
   12381/    A0F2 : 4EBB 1006           		jsr	Obj2E_Index(pc,d1.w)
   12382/    A0F6 : 6000 32DA           		bra.w	DisplaySprite
   12383/    A0FA :                     ; ===========================================================================
   12384/    A0FA : 0006                Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
   12385/    A0FC : 0046                		dc.w Obj2E_Move-Obj2E_Index
   12386/    A0FE : 0170                		dc.w Obj2E_Delete-Obj2E_Index
   12387/    A100 :                     ; ===========================================================================
   12388/    A100 :                     
   12389/    A100 :                     Obj2E_Main:				; XREF: Obj2E_Index
   12390/    A100 : 5428 0024           		addq.b	#2,$24(a0)
   12391/    A104 : 317C 0680 0002      		move.w	#$680,2(a0)
   12392/    A10A : 117C 0024 0001      		move.b	#$24,1(a0)
   12393/    A110 : 117C 0003 0018      		move.b	#3,$18(a0)
   12394/    A116 : 117C 0008 0019      		move.b	#8,$19(a0)
   12395/    A11C : 317C FD00 0012      		move.w	#-$300,$12(a0)
   12396/    A122 : 7000                		moveq	#0,d0
   12397/    A124 : 1028 001C           		move.b	$1C(a0),d0
   12398/    A128 : 5400                		addq.b	#2,d0
   12399/    A12A : 1140 001A           		move.b	d0,$1A(a0)
   12400/    A12E : 227C 0000 A370      		movea.l	#Map_obj26,a1
   12401/    A134 : D000                		add.b	d0,d0
   12402/    A136 : D2F1 0000           		adda.w	(a1,d0.w),a1
   12403/    A13A : 5249                		addq.w	#1,a1
   12404/    A13C : 2149 0004           		move.l	a1,4(a0)
   12405/    A140 :                     
   12406/    A140 :                     Obj2E_Move:				; XREF: Obj2E_Index
   12407/    A140 : 4A68 0012           		tst.w	$12(a0)		; is object moving?
   12408/    A144 : 6A00 000E           		bpl.w	Obj2E_ChkEggman	; if not, branch
   12409/    A148 : 6100 3262           		bsr.w	SpeedToPos
   12410/    A14C : 0668 0018 0012      		addi.w	#$18,$12(a0)	; reduce object	speed
   12411/    A152 : 4E75                		rts	
   12412/    A154 :                     ; ===========================================================================
   12413/    A154 :                     
   12414/    A154 :                     Obj2E_ChkEggman:			; XREF: Obj2E_Move
   12415/    A154 : 5428 0024           		addq.b	#2,$24(a0)
   12416/    A158 : 317C 001D 001E      		move.w	#29,$1E(a0)
   12417/    A15E : 1028 001C           		move.b	$1C(a0),d0
   12418/    A162 : 0C00 0001           		cmpi.b	#1,d0		; does monitor contain Eggman?
   12419/    A166 : 6602                		bne.s	Obj2E_ChkSonic
   12420/    A168 : 4E75                		rts			; Eggman monitor does nothing
   12421/    A16A :                     ; ===========================================================================
   12422/    A16A :                     
   12423/    A16A :                     Obj2E_ChkSonic:
   12424/    A16A : 0C00 0002           		cmpi.b	#2,d0		; does monitor contain Sonic?
   12425/    A16E : 6612                		bne.s	Obj2E_ChkShoes
   12426/    A170 :                     
   12427/    A170 :                     ExtraLife:
   12428/    A170 : 5238 FE12           		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
   12429/    A174 : 5238 FE1C           		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
   12430/    A178 : 303C 0088           		move.w	#$88,d0
   12431/    A17C : 4EF9 0000 117C      		jmp	(PlaySound).l	; play extra life music
   12432/    A182 :                     ; ===========================================================================
   12433/    A182 :                     
   12434/    A182 :                     Obj2E_ChkShoes:
   12435/    A182 : 0C00 0003           		cmpi.b	#3,d0		; does monitor contain speed shoes?
   12436/    A186 : 6628                		bne.s	Obj2E_ChkShield
   12437/    A188 : 11FC 0001 FE2E      		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
   12438/    A18E : 31FC 04B0 D034      		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
   12439/    A194 : 31FC 0C00 F760      		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
   12440/    A19A : 31FC 0018 F762      		move.w	#$18,($FFFFF762).w
   12441/    A1A0 : 31FC 0080 F764      		move.w	#$80,($FFFFF764).w
   12442/    A1A6 : 303C 00E2           		move.w	#$E2,d0
   12443/    A1AA : 4EF9 0000 117C      		jmp	(PlaySound).l	; Speed	up the music
   12444/    A1B0 :                     ; ===========================================================================
   12445/    A1B0 :                     
   12446/    A1B0 :                     Obj2E_ChkShield:
   12447/    A1B0 : 0C00 0004           		cmpi.b	#4,d0		; does monitor contain a shield?
   12448/    A1B4 : 6616                		bne.s	Obj2E_ChkInvinc
   12449/    A1B6 : 11FC 0001 FE2C      		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
   12450/    A1BC : 11FC 0038 D180      		move.b	#$38,($FFFFD180).w ; load shield object	($38)
   12451/    A1C2 : 303C 00AF           		move.w	#$AF,d0
   12452/    A1C6 : 4EF9 0000 117C      		jmp	(PlaySound).l	; play shield sound
   12453/    A1CC :                     ; ===========================================================================
   12454/    A1CC :                     
   12455/    A1CC :                     Obj2E_ChkInvinc:
   12456/    A1CC : 0C00 0005           		cmpi.b	#5,d0		; does monitor contain invincibility?
   12457/    A1D0 : 664E                		bne.s	Obj2E_ChkRings
   12458/    A1D2 : 11FC 0001 FE2D      		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
   12459/    A1D8 : 31FC 04B0 D032      		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
   12460/    A1DE : 11FC 0038 D200      		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
   12461/    A1E4 : 11FC 0001 D21C      		move.b	#1,($FFFFD21C).w
   12462/    A1EA : 11FC 0038 D240      		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
   12463/    A1F0 : 11FC 0002 D25C      		move.b	#2,($FFFFD25C).w
   12464/    A1F6 : 11FC 0038 D280      		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
   12465/    A1FC : 11FC 0003 D29C      		move.b	#3,($FFFFD29C).w
   12466/    A202 : 11FC 0038 D2C0      		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
   12467/    A208 : 11FC 0004 D2DC      		move.b	#4,($FFFFD2DC).w
   12468/    A20E : 4A38 F7AA           		tst.b	($FFFFF7AA).w	; is boss mode on?
   12469/    A212 : 660A                		bne.s	Obj2E_NoMusic	; if yes, branch
   12470/    A214 : 303C 0087           		move.w	#$87,d0
   12471/    A218 : 4EF9 0000 117C      		jmp	(PlaySound).l	; play invincibility music
   12472/    A21E :                     ; ===========================================================================
   12473/    A21E :                     
   12474/    A21E :                     Obj2E_NoMusic:
   12475/    A21E : 4E75                		rts	
   12476/    A220 :                     ; ===========================================================================
   12477/    A220 :                     
   12478/    A220 :                     Obj2E_ChkRings:
   12479/    A220 : 0C00 0006           		cmpi.b	#6,d0		; does monitor contain 10 rings?
   12480/    A224 : 663A                		bne.s	Obj2E_ChkS
   12481/    A226 : 0678 000A FE20      		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
   12482/    A22C : 0038 0001 FE1D      		ori.b	#1,($FFFFFE1D).w ; update the ring counter
   12483/    A232 : 0C78 0064 FE20      		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
   12484/    A238 : 651C                		bcs.s	Obj2E_RingSound
   12485/    A23A : 08F8 0001 FE1B      		bset	#1,($FFFFFE1B).w
   12486/    A240 : 6700 FF2E           		beq.w	ExtraLife
   12487/    A244 : 0C78 00C8 FE20      		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
   12488/    A24A : 650A                		bcs.s	Obj2E_RingSound
   12489/    A24C : 08F8 0002 FE1B      		bset	#2,($FFFFFE1B).w
   12490/    A252 : 6700 FF1C           		beq.w	ExtraLife
   12491/    A256 :                     
   12492/    A256 :                     Obj2E_RingSound:
   12493/    A256 : 303C 00B5           		move.w	#$B5,d0
   12494/    A25A : 4EF9 0000 117C      		jmp	(PlaySound).l	; play ring sound
   12495/    A260 :                     ; ===========================================================================
   12496/    A260 :                     
   12497/    A260 :                     Obj2E_ChkS:
   12498/    A260 : 0C00 0007           		cmpi.b	#7,d0		; does monitor contain 'S'
   12499/    A264 : 6602                		bne.s	Obj2E_ChkEnd
   12500/    A266 : 4E71                		nop	
   12501/    A268 :                     
   12502/    A268 :                     Obj2E_ChkEnd:
   12503/    A268 : 4E75                		rts			; 'S' and goggles monitors do nothing
   12504/    A26A :                     ; ===========================================================================
   12505/    A26A :                     
   12506/    A26A :                     Obj2E_Delete:				; XREF: Obj2E_Index
   12507/    A26A : 5368 001E           		subq.w	#1,$1E(a0)
   12508/    A26E : 6B00 319E           		bmi.w	DeleteObject
   12509/    A272 : 4E75                		rts	
   12510/    A274 :                     ; ---------------------------------------------------------------------------
   12511/    A274 :                     ; Subroutine to	make the sides of a monitor solid
   12512/    A274 :                     ; ---------------------------------------------------------------------------
   12513/    A274 :                     
   12514/    A274 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   12515/    A274 :                     
   12516/    A274 :                     
   12517/    A274 :                     Obj26_SolidSides:			; XREF: loc_A1EC
   12518/    A274 : 43F8 D000           		lea	($FFFFD000).w,a1
   12519/    A278 : 3029 0008           		move.w	8(a1),d0
   12520/    A27C : 9068 0008           		sub.w	8(a0),d0
   12521/    A280 : D041                		add.w	d1,d0
   12522/    A282 : 6B48                		bmi.s	loc_A4E6
   12523/    A284 : 3601                		move.w	d1,d3
   12524/    A286 : D643                		add.w	d3,d3
   12525/    A288 : B043                		cmp.w	d3,d0
   12526/    A28A : 6240                		bhi.s	loc_A4E6
   12527/    A28C : 1629 0016           		move.b	$16(a1),d3
   12528/    A290 : 4883                		ext.w	d3
   12529/    A292 : D443                		add.w	d3,d2
   12530/    A294 : 3629 000C           		move.w	$C(a1),d3
   12531/    A298 : 9668 000C           		sub.w	$C(a0),d3
   12532/    A29C : D642                		add.w	d2,d3
   12533/    A29E : 6B2C                		bmi.s	loc_A4E6
   12534/    A2A0 : D442                		add.w	d2,d2
   12535/    A2A2 : B642                		cmp.w	d2,d3
   12536/    A2A4 : 6426                		bcc.s	loc_A4E6
   12537/    A2A6 : 4A38 F7C8           		tst.b	($FFFFF7C8).w
   12538/    A2AA : 6B20                		bmi.s	loc_A4E6
   12539/    A2AC : 0C38 0006 D024      		cmpi.b	#6,($FFFFD024).w
   12540/    A2B2 : 6418                		bcc.s	loc_A4E6
   12541/    A2B4 : 4A78 FE08           		tst.w	($FFFFFE08).w
   12542/    A2B8 : 6612                		bne.s	loc_A4E6
   12543/    A2BA : B240                		cmp.w	d0,d1
   12544/    A2BC : 6404                		bcc.s	loc_A4DC
   12545/    A2BE : D241                		add.w	d1,d1
   12546/    A2C0 : 9041                		sub.w	d1,d0
   12547/    A2C2 :                     
   12548/    A2C2 :                     loc_A4DC:
   12549/    A2C2 : 0C43 0010           		cmpi.w	#$10,d3
   12550/    A2C6 : 6508                		bcs.s	loc_A4EA
   12551/    A2C8 :                     
   12552/    A2C8 :                     loc_A4E2:
   12553/    A2C8 : 7201                		moveq	#1,d1
   12554/    A2CA : 4E75                		rts	
   12555/    A2CC :                     ; ===========================================================================
   12556/    A2CC :                     
   12557/    A2CC :                     loc_A4E6:
   12558/    A2CC : 7200                		moveq	#0,d1
   12559/    A2CE : 4E75                		rts	
   12560/    A2D0 :                     ; ===========================================================================
   12561/    A2D0 :                     
   12562/    A2D0 :                     loc_A4EA:
   12563/    A2D0 : 7200                		moveq	#0,d1
   12564/    A2D2 : 1228 0019           		move.b	$19(a0),d1
   12565/    A2D6 : 5841                		addq.w	#4,d1
   12566/    A2D8 : 3401                		move.w	d1,d2
   12567/    A2DA : D442                		add.w	d2,d2
   12568/    A2DC : D269 0008           		add.w	8(a1),d1
   12569/    A2E0 : 9268 0008           		sub.w	8(a0),d1
   12570/    A2E4 : 6BE2                		bmi.s	loc_A4E2
   12571/    A2E6 : B242                		cmp.w	d2,d1
   12572/    A2E8 : 64DE                		bcc.s	loc_A4E2
   12573/    A2EA : 72FF                		moveq	#-1,d1
   12574/    A2EC : 4E75                		rts	
   12575/    A2EE :                     ; End of function Obj26_SolidSides
   12576/    A2EE :                     
   12577/    A2EE :                     ; ===========================================================================
   12578/    A2EE :                     Ani_obj26:
   12579/    A2EE :                     	include "_animations/obj26.asm"
(1)    1/    A2EE :                     ; ---------------------------------------------------------------------------
(1)    2/    A2EE :                     ; Animation script - monitors
(1)    3/    A2EE :                     ; ---------------------------------------------------------------------------
(1)    4/    A2EE : 0014 001A 0026      		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
(1)    5/    A2F4 : 0032 003E 004A      		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
(1)    6/    A2FA : 0056 0062 006E      		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
(1)    7/    A300 : 007A                		dc.w byte_A582-Ani_obj26
(1)    8/    A302 : 0100 0102 FF00      byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
(1)    9/    A308 : 0100 0303 0103      byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
             A30E : 0302 0303 FF00    
(1)   10/    A314 : 0100 0404 0104      byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
             A31A : 0402 0404 FF00    
(1)   11/    A320 : 0100 0505 0105      byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
             A326 : 0502 0505 FF00    
(1)   12/    A32C : 0100 0606 0106      byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
             A332 : 0602 0606 FF00    
(1)   13/    A338 : 0100 0707 0107      byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
             A33E : 0702 0707 FF00    
(1)   14/    A344 : 0100 0808 0108      byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
             A34A : 0802 0808 FF00    
(1)   15/    A350 : 0100 0909 0109      byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
             A356 : 0902 0909 FF00    
(1)   16/    A35C : 0100 0A0A 010A      byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
             A362 : 0A02 0A0A FF00    
(1)   17/    A368 : 0200 0102 0BFE      byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
             A36E : 0100             
(1)   18/    A370 : (MACRO)              		even
   12580/    A370 :                     
   12581/    A370 :                     ; ---------------------------------------------------------------------------
   12582/    A370 :                     ; Sprite mappings - monitors
   12583/    A370 :                     ; ---------------------------------------------------------------------------
   12584/    A370 :                     Map_obj26:
   12585/    A370 :                     	include "_mappings/obj26.asm"
(1)    1/    A370 :                     ; ---------------------------------------------------------------------------
(1)    2/    A370 :                     ; Sprite mappings - monitors
(1)    3/    A370 :                     ; ---------------------------------------------------------------------------
(1)    4/    A370 : 0018 001E           		dc.w byte_A5A2-Map_obj26, byte_A5A8-Map_obj26
(1)    5/    A374 : 0029 0034           		dc.w byte_A5B3-Map_obj26, byte_A5BE-Map_obj26
(1)    6/    A378 : 003F 004A           		dc.w byte_A5C9-Map_obj26, byte_A5D4-Map_obj26
(1)    7/    A37C : 0055 0060           		dc.w byte_A5DF-Map_obj26, byte_A5EA-Map_obj26
(1)    8/    A380 : 006B 0076           		dc.w byte_A5F5-Map_obj26, byte_A600-Map_obj26
(1)    9/    A384 : 0081 008C           		dc.w byte_A60B-Map_obj26, byte_A616-Map_obj26
(1)   10/    A388 : 01                  byte_A5A2:	dc.b 1			; static monitor
(1)   11/    A389 : EF0F 0000 F0        		dc.b $EF, $F, 0, 0, $F0
(1)   12/    A38E : 02                  byte_A5A8:	dc.b 2			; static monitor
(1)   13/    A38F : F505 0010 F8        		dc.b $F5, 5, 0,	$10, $F8
(1)   14/    A394 : EF0F 0000 F0        		dc.b $EF, $F, 0, 0, $F0
(1)   15/    A399 : 02                  byte_A5B3:	dc.b 2			; static monitor
(1)   16/    A39A : F505 0014 F8        		dc.b $F5, 5, 0,	$14, $F8
(1)   17/    A39F : EF0F 0000 F0        		dc.b $EF, $F, 0, 0, $F0
(1)   18/    A3A4 : 02                  byte_A5BE:	dc.b 2			; Eggman monitor
(1)   19/    A3A5 : F505 0018 F8        		dc.b $F5, 5, 0,	$18, $F8
(1)   20/    A3AA : EF0F 0000 F0        		dc.b $EF, $F, 0, 0, $F0
(1)   21/    A3AF : 02                  byte_A5C9:	dc.b 2			; Sonic	monitor
(1)   22/    A3B0 : F505 001C F8        		dc.b $F5, 5, 0,	$1C, $F8
(1)   23/    A3B5 : EF0F 0000 F0        		dc.b $EF, $F, 0, 0, $F0
(1)   24/    A3BA : 02                  byte_A5D4:	dc.b 2			; speed	shoes monitor
(1)   25/    A3BB : F505 0024 F8        		dc.b $F5, 5, 0,	$24, $F8
(1)   26/    A3C0 : EF0F 0000 F0        		dc.b $EF, $F, 0, 0, $F0
(1)   27/    A3C5 : 02                  byte_A5DF:	dc.b 2			; shield monitor
(1)   28/    A3C6 : F505 0028 F8        		dc.b $F5, 5, 0,	$28, $F8
(1)   29/    A3CB : EF0F 0000 F0        		dc.b $EF, $F, 0, 0, $F0
(1)   30/    A3D0 : 02                  byte_A5EA:	dc.b 2			; invincibility	monitor
(1)   31/    A3D1 : F505 002C F8        		dc.b $F5, 5, 0,	$2C, $F8
(1)   32/    A3D6 : EF0F 0000 F0        		dc.b $EF, $F, 0, 0, $F0
(1)   33/    A3DB : 02                  byte_A5F5:	dc.b 2			; 10 rings monitor
(1)   34/    A3DC : F505 0030 F8        		dc.b $F5, 5, 0,	$30, $F8
(1)   35/    A3E1 : EF0F 0000 F0        		dc.b $EF, $F, 0, 0, $F0
(1)   36/    A3E6 : 02                  byte_A600:	dc.b 2			; 'S' monitor
(1)   37/    A3E7 : F505 0034 F8        byte_A601:	dc.b $F5, 5, 0,	$34, $F8
(1)   38/    A3EC : EF0F 0000 F0        		dc.b $EF, $F, 0, 0, $F0
(1)   39/    A3F1 : 02                  byte_A60B:	dc.b 2			; goggles monitor
(1)   40/    A3F2 : F505 0020 F8        		dc.b $F5, 5, 0,	$20, $F8
(1)   41/    A3F7 : EF0F 0000 F0        		dc.b $EF, $F, 0, 0, $F0
(1)   42/    A3FC : 01                  byte_A616:	dc.b 1			; broken monitor
(1)   43/    A3FD : FF0D 0038 F0        		dc.b $FF, $D, 0, $38, $F0
(1)   44/    A402 : (MACRO)              		even
   12586/    A402 :                     
   12587/    A402 :                     ; ===========================================================================
   12588/    A402 :                     ; ---------------------------------------------------------------------------
   12589/    A402 :                     ; Object 0E - Sonic on the title screen
   12590/    A402 :                     ; ---------------------------------------------------------------------------
   12591/    A402 :                     
   12592/    A402 :                     Obj0E:					; XREF: Obj_Index
   12593/    A402 : 7000                		moveq	#0,d0
   12594/    A404 : 1028 0024           		move.b	$24(a0),d0
   12595/    A408 : 323B 0006           		move.w	Obj0E_Index(pc,d0.w),d1
   12596/    A40C : 4EFB 1002           		jmp	Obj0E_Index(pc,d1.w)
   12597/    A410 :                     ; ===========================================================================
   12598/    A410 : 0008                Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
   12599/    A412 : 003C                		dc.w Obj0E_Delay-Obj0E_Index
   12600/    A414 : 004C                		dc.w Obj0E_Move-Obj0E_Index
   12601/    A416 : 0062                		dc.w Obj0E_Animate-Obj0E_Index
   12602/    A418 :                     ; ===========================================================================
   12603/    A418 :                     
   12604/    A418 :                     Obj0E_Main:				; XREF: Obj0E_Index
   12605/    A418 : 5428 0024           		addq.b	#2,$24(a0)
   12606/    A41C : 317C 00F0 0008      		move.w	#$F0,8(a0)
   12607/    A422 : 317C 00DE 000A      		move.w	#$DE,$A(a0)
   12608/    A428 : 217C 0000 A66E      		move.l	#Map_obj0E,4(a0)
             A42E : 0004             
   12609/    A430 : 317C 2300 0002      		move.w	#$2300,2(a0)
   12610/    A436 : 117C 0001 0018      		move.b	#1,$18(a0)
   12611/    A43C : 117C 001D 001F      		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
   12612/    A442 : 43F9 0000 A4EA      		lea	(Ani_obj0E).l,a1
   12613/    A448 : 6100 00B4           		bsr.w	AnimateSprite
   12614/    A44C :                     
   12615/    A44C :                     Obj0E_Delay:				; XREF: Obj0E_Index
   12616/    A44C : 5328 001F           		subq.b	#1,$1F(a0)	; subtract 1 from time delay
   12617/    A450 : 6A08                		bpl.s	Obj0E_Wait	; if time remains, branch
   12618/    A452 : 5428 0024           		addq.b	#2,$24(a0)	; go to	next routine
   12619/    A456 : 6000 2F7A           		bra.w	DisplaySprite
   12620/    A45A :                     ; ===========================================================================
   12621/    A45A :                     
   12622/    A45A :                     Obj0E_Wait:				; XREF: Obj0E_Delay
   12623/    A45A : 4E75                		rts	
   12624/    A45C :                     ; ===========================================================================
   12625/    A45C :                     
   12626/    A45C :                     Obj0E_Move:				; XREF: Obj0E_Index
   12627/    A45C : 5168 000A           		subq.w	#8,$A(a0)
   12628/    A460 : 0C68 0096 000A      		cmpi.w	#$96,$A(a0)
   12629/    A466 : 6604                		bne.s	Obj0E_Display
   12630/    A468 : 5428 0024           		addq.b	#2,$24(a0)
   12631/    A46C :                     
   12632/    A46C :                     Obj0E_Display:
   12633/    A46C : 6000 2F64           		bra.w	DisplaySprite
   12634/    A470 :                     ; ===========================================================================
   12635/    A470 : 4E75                		rts	
   12636/    A472 :                     ; ===========================================================================
   12637/    A472 :                     
   12638/    A472 :                     Obj0E_Animate:				; XREF: Obj0E_Index
   12639/    A472 : 43F9 0000 A4EA      		lea	(Ani_obj0E).l,a1
   12640/    A478 : 6100 0084           		bsr.w	AnimateSprite
   12641/    A47C : 6000 2F54           		bra.w	DisplaySprite
   12642/    A480 :                     ; ===========================================================================
   12643/    A480 : 4E75                		rts	
   12644/    A482 :                     ; ===========================================================================
   12645/    A482 :                     ; ---------------------------------------------------------------------------
   12646/    A482 :                     ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
   12647/    A482 :                     ; ---------------------------------------------------------------------------
   12648/    A482 :                     
   12649/    A482 :                     Obj0F:					; XREF: Obj_Index
   12650/    A482 : 7000                		moveq	#0,d0
   12651/    A484 : 1028 0024           		move.b	$24(a0),d0
   12652/    A488 : 323B 000A           		move.w	Obj0F_Index(pc,d0.w),d1
   12653/    A48C : 4EBB 1006           		jsr	Obj0F_Index(pc,d1.w)
   12654/    A490 : 6000 2F40           		bra.w	DisplaySprite
   12655/    A494 :                     ; ===========================================================================
   12656/    A494 : 0006                Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
   12657/    A496 : 004C                		dc.w Obj0F_PrsStart-Obj0F_Index
   12658/    A498 : 004A                		dc.w locret_A6F8-Obj0F_Index
   12659/    A49A :                     ; ===========================================================================
   12660/    A49A :                     
   12661/    A49A :                     Obj0F_Main:				; XREF: Obj0F_Index
   12662/    A49A : 5428 0024           		addq.b	#2,$24(a0)
   12663/    A49E : 317C 00D0 0008      		move.w	#$D0,8(a0)
   12664/    A4A4 : 317C 0130 000A      		move.w	#$130,$A(a0)
   12665/    A4AA : 217C 0000 A5AA      		move.l	#Map_obj0F,4(a0)
             A4B0 : 0004             
   12666/    A4B2 : 317C 0200 0002      		move.w	#$200,2(a0)
   12667/    A4B8 : 0C28 0002 001A      		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
   12668/    A4BE : 6520                		bcs.s	Obj0F_PrsStart	; if yes, branch
   12669/    A4C0 : 5428 0024           		addq.b	#2,$24(a0)
   12670/    A4C4 : 0C28 0003 001A      		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
   12671/    A4CA : 6612                		bne.s	locret_A6F8	; if not, branch
   12672/    A4CC : 317C 2510 0002      		move.w	#$2510,2(a0)	; "TM" specific	code
   12673/    A4D2 : 317C 0170 0008      		move.w	#$170,8(a0)
   12674/    A4D8 : 317C 00F8 000A      		move.w	#$F8,$A(a0)
   12675/    A4DE :                     
   12676/    A4DE :                     locret_A6F8:				; XREF: Obj0F_Index
   12677/    A4DE : 4E75                		rts	
   12678/    A4E0 :                     ; ===========================================================================
   12679/    A4E0 :                     
   12680/    A4E0 :                     Obj0F_PrsStart:				; XREF: Obj0F_Index
   12681/    A4E0 : 43F9 0000 A4F8      		lea	(Ani_obj0F).l,a1
   12682/    A4E6 : 6000 0016           		bra.w	AnimateSprite
   12683/    A4EA :                     ; ===========================================================================
   12684/    A4EA :                     Ani_obj0E:
   12685/    A4EA :                     	include "_animations/obj0E.asm"
(1)    1/    A4EA :                     ; ---------------------------------------------------------------------------
(1)    2/    A4EA :                     ; Animation script - Sonic on the title screen
(1)    3/    A4EA :                     ; ---------------------------------------------------------------------------
(1)    4/    A4EA : 0002                		dc.w byte_A706-Ani_obj0E
(1)    5/    A4EC : 0700 0102 0304      byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
             A4F2 : 0506 07FE 0200    
(1)    6/    A4F8 : (MACRO)              		even
   12686/    A4F8 :                     
   12687/    A4F8 :                     Ani_obj0F:
   12688/    A4F8 :                     	include "_animations/obj0F.asm"
(1)    1/    A4F8 :                     ; ---------------------------------------------------------------------------
(1)    2/    A4F8 :                     ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
(1)    3/    A4F8 :                     ; ---------------------------------------------------------------------------
(1)    4/    A4F8 : 0002                		dc.w byte_A714-Ani_obj0F
(1)    5/    A4FA : 1F00 01FF           byte_A714:	dc.b $1F, 0, 1,	$FF
(1)    6/    A4FE : (MACRO)              		even
   12689/    A4FE :                     
   12690/    A4FE :                     ; ---------------------------------------------------------------------------
   12691/    A4FE :                     ; Subroutine to	animate	a sprite using an animation script
   12692/    A4FE :                     ; ---------------------------------------------------------------------------
   12693/    A4FE :                     
   12694/    A4FE :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   12695/    A4FE :                     
   12696/    A4FE :                     
   12697/    A4FE :                     AnimateSprite:
   12698/    A4FE : 7000                		moveq	#0,d0
   12699/    A500 : 1028 001C           		move.b	$1C(a0),d0	; move animation number	to d0
   12700/    A504 : B028 001D           		cmp.b	$1D(a0),d0	; is animation set to restart?
   12701/    A508 : 6710                		beq.s	Anim_Run	; if not, branch
   12702/    A50A : 1140 001D           		move.b	d0,$1D(a0)	; set to "no restart"
   12703/    A50E : 117C 0000 001B      		move.b	#0,$1B(a0)	; reset	animation
   12704/    A514 : 117C 0000 001E      		move.b	#0,$1E(a0)	; reset	frame duration
   12705/    A51A :                     
   12706/    A51A :                     Anim_Run:
   12707/    A51A : 5328 001E           		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
   12708/    A51E : 6A3A                		bpl.s	Anim_Wait	; if time remains, branch
   12709/    A520 : D040                		add.w	d0,d0
   12710/    A522 : D2F1 0000           		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
   12711/    A526 : 1151 001E           		move.b	(a1),$1E(a0)	; load frame duration
   12712/    A52A : 7200                		moveq	#0,d1
   12713/    A52C : 1228 001B           		move.b	$1B(a0),d1	; load current frame number
   12714/    A530 : 1031 1001           		move.b	1(a1,d1.w),d0	; read sprite number from script
   12715/    A534 : 6B26                		bmi.s	Anim_End_FF	; if animation is complete, branch
   12716/    A536 :                     
   12717/    A536 :                     Anim_Next:
   12718/    A536 : 1200                		move.b	d0,d1
   12719/    A538 : 0200 001F           		andi.b	#$1F,d0
   12720/    A53C : 1140 001A           		move.b	d0,$1A(a0)	; load sprite number
   12721/    A540 : 1028 0022           		move.b	$22(a0),d0
   12722/    A544 : E719                		rol.b	#3,d1
   12723/    A546 : B101                		eor.b	d0,d1
   12724/    A548 : 0201 0003           		andi.b	#3,d1
   12725/    A54C : 0228 00FC 0001      		andi.b	#$FC,1(a0)
   12726/    A552 : 8328 0001           		or.b	d1,1(a0)
   12727/    A556 : 5228 001B           		addq.b	#1,$1B(a0)	; next frame number
   12728/    A55A :                     
   12729/    A55A :                     Anim_Wait:
   12730/    A55A : 4E75                		rts	
   12731/    A55C :                     ; ===========================================================================
   12732/    A55C :                     
   12733/    A55C :                     Anim_End_FF:
   12734/    A55C : 5200                		addq.b	#1,d0		; is the end flag = $FF	?
   12735/    A55E : 660C                		bne.s	Anim_End_FE	; if not, branch
   12736/    A560 : 117C 0000 001B      		move.b	#0,$1B(a0)	; restart the animation
   12737/    A566 : 1029 0001           		move.b	1(a1),d0	; read sprite number
   12738/    A56A : 60CA                		bra.s	Anim_Next
   12739/    A56C :                     ; ===========================================================================
   12740/    A56C :                     
   12741/    A56C :                     Anim_End_FE:
   12742/    A56C : 5200                		addq.b	#1,d0		; is the end flag = $FE	?
   12743/    A56E : 6610                		bne.s	Anim_End_FD	; if not, branch
   12744/    A570 : 1031 1002           		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
   12745/    A574 : 9128 001B           		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
   12746/    A578 : 9200                		sub.b	d0,d1
   12747/    A57A : 1031 1001           		move.b	1(a1,d1.w),d0	; read sprite number
   12748/    A57E : 60B6                		bra.s	Anim_Next
   12749/    A580 :                     ; ===========================================================================
   12750/    A580 :                     
   12751/    A580 :                     Anim_End_FD:
   12752/    A580 : 5200                		addq.b	#1,d0		; is the end flag = $FD	?
   12753/    A582 : 6606                		bne.s	Anim_End_FC	; if not, branch
   12754/    A584 : 1171 1002 001C      		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
   12755/    A58A :                     
   12756/    A58A :                     Anim_End_FC:
   12757/    A58A : 5200                		addq.b	#1,d0		; is the end flag = $FC	?
   12758/    A58C : 6604                		bne.s	Anim_End_FB	; if not, branch
   12759/    A58E : 5428 0024           		addq.b	#2,$24(a0)	; jump to next routine
   12760/    A592 :                     
   12761/    A592 :                     Anim_End_FB:
   12762/    A592 : 5200                		addq.b	#1,d0		; is the end flag = $FB	?
   12763/    A594 : 660A                		bne.s	Anim_End_FA	; if not, branch
   12764/    A596 : 117C 0000 001B      		move.b	#0,$1B(a0)	; reset	animation
   12765/    A59C : 4228 0025           		clr.b	$25(a0)		; reset	2nd routine counter
   12766/    A5A0 :                     
   12767/    A5A0 :                     Anim_End_FA:
   12768/    A5A0 : 5200                		addq.b	#1,d0		; is the end flag = $FA	?
   12769/    A5A2 : 6604                		bne.s	Anim_End	; if not, branch
   12770/    A5A4 : 5428 0025           		addq.b	#2,$25(a0)	; jump to next routine
   12771/    A5A8 :                     
   12772/    A5A8 :                     Anim_End:
   12773/    A5A8 : 4E75                		rts	
   12774/    A5AA :                     ; End of function AnimateSprite
   12775/    A5AA :                     
   12776/    A5AA :                     ; ===========================================================================
   12777/    A5AA :                     ; ---------------------------------------------------------------------------
   12778/    A5AA :                     ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
   12779/    A5AA :                     ; ---------------------------------------------------------------------------
   12780/    A5AA :                     Map_obj0F:
   12781/    A5AA :                     	include "_mappings/obj0F.asm"
(1)    1/    A5AA :                     ; ---------------------------------------------------------------------------
(1)    2/    A5AA :                     ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
(1)    3/    A5AA :                     ; ---------------------------------------------------------------------------
(1)    4/    A5AA : 0009                		dc.w byte_A7CD-Map_obj0F
(1)    5/    A5AC : 0008                		dc.w byte_A7CC-Map_obj0F
(1)    6/    A5AE : 0027                		dc.w byte_A7EB-Map_obj0F
(1)    7/    A5B0 : 00BE                		dc.w byte_A882-Map_obj0F
(1)    8/    A5B2 : 06                  byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
(1)    9/    A5B3 : 000C 00F0 00        byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
(1)   10/    A5B8 : 0000 00F3 20        		dc.b 0,	0, 0, $F3, $20
(1)   11/    A5BD : 0000 00F3 30        		dc.b 0,	0, 0, $F3, $30
(1)   12/    A5C2 : 000C 00F4 38        		dc.b 0,	$C, 0, $F4, $38
(1)   13/    A5C7 : 0008 00F8 60        		dc.b 0,	8, 0, $F8, $60
(1)   14/    A5CC : 0008 00FB 78        		dc.b 0,	8, 0, $FB, $78
(1)   15/    A5D1 : 1E                  byte_A7EB:	dc.b $1E		; sprite list filler
(1)   16/    A5D2 : B80F 0000 80        		dc.b $B8, $F, 0, 0, $80
(1)   17/    A5D7 : B80F 0000 80        		dc.b $B8, $F, 0, 0, $80
(1)   18/    A5DC : B80F 0000 80        		dc.b $B8, $F, 0, 0, $80
(1)   19/    A5E1 : B80F 0000 80        		dc.b $B8, $F, 0, 0, $80
(1)   20/    A5E6 : B80F 0000 80        		dc.b $B8, $F, 0, 0, $80
(1)   21/    A5EB : B80F 0000 80        		dc.b $B8, $F, 0, 0, $80
(1)   22/    A5F0 : B80F 0000 80        		dc.b $B8, $F, 0, 0, $80
(1)   23/    A5F5 : B80F 0000 80        		dc.b $B8, $F, 0, 0, $80
(1)   24/    A5FA : B80F 0000 80        		dc.b $B8, $F, 0, 0, $80
(1)   25/    A5FF : B80F 0000 80        		dc.b $B8, $F, 0, 0, $80
(1)   26/    A604 : D80F 0000 80        		dc.b $D8, $F, 0, 0, $80
(1)   27/    A609 : D80F 0000 80        		dc.b $D8, $F, 0, 0, $80
(1)   28/    A60E : D80F 0000 80        		dc.b $D8, $F, 0, 0, $80
(1)   29/    A613 : D80F 0000 80        		dc.b $D8, $F, 0, 0, $80
(1)   30/    A618 : D80F 0000 80        		dc.b $D8, $F, 0, 0, $80
(1)   31/    A61D : D80F 0000 80        		dc.b $D8, $F, 0, 0, $80
(1)   32/    A622 : D80F 0000 80        		dc.b $D8, $F, 0, 0, $80
(1)   33/    A627 : D80F 0000 80        		dc.b $D8, $F, 0, 0, $80
(1)   34/    A62C : D80F 0000 80        		dc.b $D8, $F, 0, 0, $80
(1)   35/    A631 : D80F 0000 80        		dc.b $D8, $F, 0, 0, $80
(1)   36/    A636 : F80F 0000 80        		dc.b $F8, $F, 0, 0, $80
(1)   37/    A63B : F80F 0000 80        		dc.b $F8, $F, 0, 0, $80
(1)   38/    A640 : F80F 0000 80        		dc.b $F8, $F, 0, 0, $80
(1)   39/    A645 : F80F 0000 80        		dc.b $F8, $F, 0, 0, $80
(1)   40/    A64A : F80F 0000 80        		dc.b $F8, $F, 0, 0, $80
(1)   41/    A64F : F80F 0000 80        		dc.b $F8, $F, 0, 0, $80
(1)   42/    A654 : F80F 0000 80        		dc.b $F8, $F, 0, 0, $80
(1)   43/    A659 : F80F 0000 80        		dc.b $F8, $F, 0, 0, $80
(1)   44/    A65E : F80F 0000 80        		dc.b $F8, $F, 0, 0, $80
(1)   45/    A663 : F80F 0000 80        		dc.b $F8, $F, 0, 0, $80
(1)   46/    A668 : 01                  byte_A882:	dc.b 1			; "TM"
(1)   47/    A669 : FC04 0000 F8        		dc.b $FC, 4, 0,	0, $F8
(1)   48/    A66E : (MACRO)              		even
   12782/    A66E :                     
   12783/    A66E :                     ; ---------------------------------------------------------------------------
   12784/    A66E :                     ; Sprite mappings - Sonic on the title screen
   12785/    A66E :                     ; ---------------------------------------------------------------------------
   12786/    A66E :                     Map_obj0E:
   12787/    A66E :                     	include "_mappings/obj0E.asm"
(1)    1/    A66E :                     ; ---------------------------------------------------------------------------
(1)    2/    A66E :                     ; Sprite mappings - Sonic on the title screen
(1)    3/    A66E :                     ; ---------------------------------------------------------------------------
(1)    4/    A66E : 0010                		dc.w byte_A898-Map_obj0E
(1)    5/    A670 : 0043                		dc.w byte_A8CB-Map_obj0E
(1)    6/    A672 : 008F                		dc.w byte_A917-Map_obj0E
(1)    7/    A674 : 00E5                		dc.w byte_A96D-Map_obj0E
(1)    8/    A676 : 0127                		dc.w byte_A9AF-Map_obj0E
(1)    9/    A678 : 015F                		dc.w byte_A9E7-Map_obj0E
(1)   10/    A67A : 01BF                		dc.w byte_AA47-Map_obj0E
(1)   11/    A67C : 0229                		dc.w byte_AAB1-Map_obj0E
(1)   12/    A67E : 0A                  byte_A898:	dc.b $A
(1)   13/    A67F : 0808 0000 08        		dc.b 8,	8, 0, 0, 8
(1)   14/    A684 : 100F 0003 08        		dc.b $10, $F, 0, 3, 8
(1)   15/    A689 : 100F 0013 28        		dc.b $10, $F, 0, $13, $28
(1)   16/    A68E : 300E 0023 08        		dc.b $30, $E, 0, $23, 8
(1)   17/    A693 : 300E 002F 28        		dc.b $30, $E, 0, $2F, $28
(1)   18/    A698 : 480D 003B 00        		dc.b $48, $D, 0, $3B, 0
(1)   19/    A69D : 4809 0043 20        		dc.b $48, 9, 0,	$43, $20
(1)   20/    A6A2 : 4800 0049 38        		dc.b $48, 0, 0,	$49, $38
(1)   21/    A6A7 : 580C 004A 08        		dc.b $58, $C, 0, $4A, 8
(1)   22/    A6AC : 5800 004E 28        		dc.b $58, 0, 0,	$4E, $28
(1)   23/    A6B1 : 0F                  byte_A8CB:	dc.b $F
(1)   24/    A6B2 : 480E 01BD 20        		dc.b $48, $E, 1, $BD, $20
(1)   25/    A6B7 : 3805 01C9 38        		dc.b $38, 5, 1,	$C9, $38
(1)   26/    A6BC : 4000 01CD 30        		dc.b $40, 0, 1,	$CD, $30
(1)   27/    A6C1 : 4800 01CE 40        		dc.b $48, 0, 1,	$CE, $40
(1)   28/    A6C6 : 6000 01CF 20        		dc.b $60, 0, 1,	$CF, $20
(1)   29/    A6CB : 100E 004F 08        		dc.b $10, $E, 0, $4F, 8
(1)   30/    A6D0 : 100E 005B 28        		dc.b $10, $E, 0, $5B, $28
(1)   31/    A6D5 : 1801 0067 48        		dc.b $18, 1, 0,	$67, $48
(1)   32/    A6DA : 2802 0069 00        		dc.b $28, 2, 0,	$69, 0
(1)   33/    A6DF : 280F 006C 08        		dc.b $28, $F, 0, $6C, 8
(1)   34/    A6E4 : 280F 007C 28        		dc.b $28, $F, 0, $7C, $28
(1)   35/    A6E9 : 3002 008C 48        		dc.b $30, 2, 0,	$8C, $48
(1)   36/    A6EE : 480E 008F 10        		dc.b $48, $E, 0, $8F, $10
(1)   37/    A6F3 : 4809 009B 30        		dc.b $48, 9, 0,	$9B, $30
(1)   38/    A6F8 : 5804 00A1 30        		dc.b $58, 4, 0,	$A1, $30
(1)   39/    A6FD : 11                  byte_A917:	dc.b $11
(1)   40/    A6FE : 380E 01BD 28        		dc.b $38, $E, 1, $BD, $28
(1)   41/    A703 : 2805 01C9 40        		dc.b $28, 5, 1,	$C9, $40
(1)   42/    A708 : 3000 01CD 38        		dc.b $30, 0, 1,	$CD, $38
(1)   43/    A70D : 3800 01CE 48        		dc.b $38, 0, 1,	$CE, $48
(1)   44/    A712 : 5000 01CF 28        		dc.b $50, 0, 1,	$CF, $28
(1)   45/    A717 : 200F 01A9 08        		dc.b $20, $F, 1, $A9, 8
(1)   46/    A71C : 2003 01B9 28        		dc.b $20, 3, 1,	$B9, $28
(1)   47/    A721 : 100E 004F 08        		dc.b $10, $E, 0, $4F, 8
(1)   48/    A726 : 100E 005B 28        		dc.b $10, $E, 0, $5B, $28
(1)   49/    A72B : 1801 0067 48        		dc.b $18, 1, 0,	$67, $48
(1)   50/    A730 : 2802 0069 00        		dc.b $28, 2, 0,	$69, 0
(1)   51/    A735 : 280F 006C 08        		dc.b $28, $F, 0, $6C, 8
(1)   52/    A73A : 280F 007C 28        		dc.b $28, $F, 0, $7C, $28
(1)   53/    A73F : 3002 008C 48        		dc.b $30, 2, 0,	$8C, $48
(1)   54/    A744 : 480E 008F 10        		dc.b $48, $E, 0, $8F, $10
(1)   55/    A749 : 4809 009B 30        		dc.b $48, 9, 0,	$9B, $30
(1)   56/    A74E : 5804 00A1 30        		dc.b $58, 4, 0,	$A1, $30
(1)   57/    A753 : 0D                  byte_A96D:	dc.b $D
(1)   58/    A754 : 100F 00A3 08        		dc.b $10, $F, 0, $A3, 8
(1)   59/    A759 : 0808 00B3 28        		dc.b 8,	8, 0, $B3, $28
(1)   60/    A75E : 100F 00B6 28        		dc.b $10, $F, 0, $B6, $28
(1)   61/    A763 : 1800 00C6 48        		dc.b $18, 0, 0,	$C6, $48
(1)   62/    A768 : 2006 00C7 48        		dc.b $20, 6, 0,	$C7, $48
(1)   63/    A76D : 3800 00CD 48        		dc.b $38, 0, 0,	$CD, $48
(1)   64/    A772 : 300D 00CE 08        		dc.b $30, $D, 0, $CE, 8
(1)   65/    A777 : 300E 00D6 28        		dc.b $30, $E, 0, $D6, $28
(1)   66/    A77C : 400B 00E2 10        		dc.b $40, $B, 0, $E2, $10
(1)   67/    A781 : 4808 00EE 28        		dc.b $48, 8, 0,	$EE, $28
(1)   68/    A786 : 5001 00F1 08        		dc.b $50, 1, 0,	$F1, 8
(1)   69/    A78B : 5004 00F3 28        		dc.b $50, 4, 0,	$F3, $28
(1)   70/    A790 : 5800 00F5 28        		dc.b $58, 0, 0,	$F5, $28
(1)   71/    A795 : 0B                  byte_A9AF:	dc.b $B
(1)   72/    A796 : 080F 00F6 10        		dc.b 8,	$F, 0, $F6, $10
(1)   73/    A79B : 080B 0106 30        		dc.b 8,	$B, 1, 6, $30
(1)   74/    A7A0 : 1006 0112 48        		dc.b $10, 6, 1,	$12, $48
(1)   75/    A7A5 : 280E 0118 18        		dc.b $28, $E, 1, $18, $18
(1)   76/    A7AA : 280E 0124 38        		dc.b $28, $E, 1, $24, $38
(1)   77/    A7AF : 2801 0130 10        		dc.b $28, 1, 1,	$30, $10
(1)   78/    A7B4 : 400E 0132 10        		dc.b $40, $E, 1, $32, $10
(1)   79/    A7B9 : 4006 013E 30        		dc.b $40, 6, 1,	$3E, $30
(1)   80/    A7BE : 4004 0144 40        		dc.b $40, 4, 1,	$44, $40
(1)   81/    A7C3 : 4800 0146 40        		dc.b $48, 0, 1,	$46, $40
(1)   82/    A7C8 : 5808 0147 18        		dc.b $58, 8, 1,	$47, $18
(1)   83/    A7CD : 13                  byte_A9E7:	dc.b $13
(1)   84/    A7CE : 280E 01E4 38        		dc.b $28, $E, 1, $E4, $38
(1)   85/    A7D3 : 1805 01F0 48        		dc.b $18, 5, 1,	$F0, $48
(1)   86/    A7D8 : 4008 01F4 38        		dc.b $40, 8, 1,	$F4, $38
(1)   87/    A7DD : 4804 01F7 38        		dc.b $48, 4, 1,	$F7, $38
(1)   88/    A7E2 : 100F 014A 10        		dc.b $10, $F, 1, $4A, $10
(1)   89/    A7E7 : 0804 015A 20        		dc.b 8,	4, 1, $5A, $20
(1)   90/    A7EC : 000B 015C 30        		dc.b 0,	$B, 1, $5C, $30
(1)   91/    A7F1 : 0800 0168 48        		dc.b 8,	0, 1, $68, $48
(1)   92/    A7F6 : 1800 0169 48        		dc.b $18, 0, 1,	$69, $48
(1)   93/    A7FB : 1805 016A 00        		dc.b $18, 5, 1,	$6A, 0
(1)   94/    A800 : 2802 016E 08        		dc.b $28, 2, 1,	$6E, 8
(1)   95/    A805 : 300F 0171 10        		dc.b $30, $F, 1, $71, $10
(1)   96/    A80A : 200D 0181 30        		dc.b $20, $D, 1, $81, $30
(1)   97/    A80F : 2001 0189 50        		dc.b $20, 1, 1,	$89, $50
(1)   98/    A814 : 3008 018B 30        		dc.b $30, 8, 1,	$8B, $30
(1)   99/    A819 : 380E 018E 30        		dc.b $38, $E, 1, $8E, $30
(1)  100/    A81E : 500D 019A 08        		dc.b $50, $D, 1, $9A, 8
(1)  101/    A823 : 500C 01A2 28        		dc.b $50, $C, 1, $A2, $28
(1)  102/    A828 : 5808 01A6 28        		dc.b $58, 8, 1,	$A6, $28
(1)  103/    A82D : 15                  byte_AA47:	dc.b $15
(1)  104/    A82E : 280E 01E4 38        		dc.b $28, $E, 1, $E4, $38
(1)  105/    A833 : 1805 01F0 48        		dc.b $18, 5, 1,	$F0, $48
(1)  106/    A838 : 4008 01F4 38        		dc.b $40, 8, 1,	$F4, $38
(1)  107/    A83D : 4804 01F7 38        		dc.b $48, 4, 1,	$F7, $38
(1)  108/    A842 : 180F 01D0 08        		dc.b $18, $F, 1, $D0, 8
(1)  109/    A847 : 1803 01E0 28        		dc.b $18, 3, 1,	$E0, $28
(1)  110/    A84C : 100F 014A 10        		dc.b $10, $F, 1, $4A, $10
(1)  111/    A851 : 0804 015A 20        		dc.b 8,	4, 1, $5A, $20
(1)  112/    A856 : 000B 015C 30        		dc.b 0,	$B, 1, $5C, $30
(1)  113/    A85B : 0800 0168 48        		dc.b 8,	0, 1, $68, $48
(1)  114/    A860 : 1800 0169 48        		dc.b $18, 0, 1,	$69, $48
(1)  115/    A865 : 1805 016A 00        		dc.b $18, 5, 1,	$6A, 0
(1)  116/    A86A : 2802 016E 08        		dc.b $28, 2, 1,	$6E, 8
(1)  117/    A86F : 300F 0171 10        		dc.b $30, $F, 1, $71, $10
(1)  118/    A874 : 200D 0181 30        		dc.b $20, $D, 1, $81, $30
(1)  119/    A879 : 2001 0189 50        		dc.b $20, 1, 1,	$89, $50
(1)  120/    A87E : 3008 018B 30        		dc.b $30, 8, 1,	$8B, $30
(1)  121/    A883 : 380E 018E 30        		dc.b $38, $E, 1, $8E, $30
(1)  122/    A888 : 500D 019A 08        		dc.b $50, $D, 1, $9A, 8
(1)  123/    A88D : 500C 01A2 28        		dc.b $50, $C, 1, $A2, $28
(1)  124/    A892 : 5808 01A6 28        		dc.b $58, 8, 1,	$A6, $28
(1)  125/    A897 : 16                  byte_AAB1:	dc.b $16
(1)  126/    A898 : 1804 01F9 38        		dc.b $18, 4, 1,	$F9, $38
(1)  127/    A89D : 2000 01FB 38        		dc.b $20, 0, 1,	$FB, $38
(1)  128/    A8A2 : 2808 01FC 30        		dc.b $28, 8, 1,	$FC, $30
(1)  129/    A8A7 : 3001 01FF 30        		dc.b $30, 1, 1,	$FF, $30
(1)  130/    A8AC : 300B 0201 38        		dc.b $30, $B, 2, 1, $38
(1)  131/    A8B1 : 180F 01D0 08        		dc.b $18, $F, 1, $D0, 8
(1)  132/    A8B6 : 1803 01E0 28        		dc.b $18, 3, 1,	$E0, $28
(1)  133/    A8BB : 100F 014A 10        		dc.b $10, $F, 1, $4A, $10
(1)  134/    A8C0 : 0804 015A 20        		dc.b 8,	4, 1, $5A, $20
(1)  135/    A8C5 : 000B 015C 30        		dc.b 0,	$B, 1, $5C, $30
(1)  136/    A8CA : 0800 0168 48        		dc.b 8,	0, 1, $68, $48
(1)  137/    A8CF : 1800 0169 48        		dc.b $18, 0, 1,	$69, $48
(1)  138/    A8D4 : 1805 016A 00        		dc.b $18, 5, 1,	$6A, 0
(1)  139/    A8D9 : 2802 016E 08        		dc.b $28, 2, 1,	$6E, 8
(1)  140/    A8DE : 300F 0171 10        		dc.b $30, $F, 1, $71, $10
(1)  141/    A8E3 : 200D 0181 30        		dc.b $20, $D, 1, $81, $30
(1)  142/    A8E8 : 2001 0189 50        		dc.b $20, 1, 1,	$89, $50
(1)  143/    A8ED : 3008 018B 30        		dc.b $30, 8, 1,	$8B, $30
(1)  144/    A8F2 : 380E 018E 30        		dc.b $38, $E, 1, $8E, $30
(1)  145/    A8F7 : 500D 019A 08        		dc.b $50, $D, 1, $9A, 8
(1)  146/    A8FC : 500C 01A2 28        		dc.b $50, $C, 1, $A2, $28
(1)  147/    A901 : 5808 01A6 28        		dc.b $58, 8, 1,	$A6, $28
(1)  148/    A906 : (MACRO)              		even
   12788/    A906 :                     
   12789/    A906 :                     ; ===========================================================================
   12790/    A906 :                     ; ---------------------------------------------------------------------------
   12791/    A906 :                     ; Object 2B - Chopper enemy (GHZ)
   12792/    A906 :                     ; ---------------------------------------------------------------------------
   12793/    A906 :                     
   12794/    A906 :                     Obj2B:					; XREF: Obj_Index
   12795/    A906 : 7000                		moveq	#0,d0
   12796/    A908 : 1028 0024           		move.b	$24(a0),d0
   12797/    A90C : 323B 000A           		move.w	Obj2B_Index(pc,d0.w),d1
   12798/    A910 : 4EBB 1006           		jsr	Obj2B_Index(pc,d1.w)
   12799/    A914 : 6000 4B54           		bra.w	MarkObjGone
   12800/    A918 :                     ; ===========================================================================
   12801/    A918 : 0004                Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
   12802/    A91A : 003A                		dc.w Obj2B_ChgSpeed-Obj2B_Index
   12803/    A91C :                     ; ===========================================================================
   12804/    A91C :                     
   12805/    A91C :                     Obj2B_Main:				; XREF: Obj2B_Index
   12806/    A91C : 5428 0024           		addq.b	#2,$24(a0)
   12807/    A920 : 217C 0000 A9B0      		move.l	#Map_obj2B,4(a0)
             A926 : 0004             
   12808/    A928 : 317C 047B 0002      		move.w	#$47B,2(a0)
   12809/    A92E : 117C 0004 0001      		move.b	#4,1(a0)
   12810/    A934 : 117C 0004 0018      		move.b	#4,$18(a0)
   12811/    A93A : 117C 0009 0020      		move.b	#9,$20(a0)
   12812/    A940 : 117C 0010 0019      		move.b	#$10,$19(a0)
   12813/    A946 : 317C F900 0012      		move.w	#-$700,$12(a0)	; set vertical speed
   12814/    A94C : 3168 000C 0030      		move.w	$C(a0),$30(a0)
   12815/    A952 :                     
   12816/    A952 :                     Obj2B_ChgSpeed:				; XREF: Obj2B_Index
   12817/    A952 : 43F9 0000 A99E      		lea	(Ani_obj2B).l,a1
   12818/    A958 : 6100 FBA4           		bsr.w	AnimateSprite
   12819/    A95C : 6100 2A4E           		bsr.w	SpeedToPos
   12820/    A960 : 0668 0018 0012      		addi.w	#$18,$12(a0)	; reduce speed
   12821/    A966 : 3028 0030           		move.w	$30(a0),d0
   12822/    A96A : B068 000C           		cmp.w	$C(a0),d0
   12823/    A96E : 640A                		bcc.s	Obj2B_ChgAni
   12824/    A970 : 3140 000C           		move.w	d0,$C(a0)
   12825/    A974 : 317C F900 0012      		move.w	#-$700,$12(a0)	; set vertical speed
   12826/    A97A :                     
   12827/    A97A :                     Obj2B_ChgAni:
   12828/    A97A : 117C 0001 001C      		move.b	#1,$1C(a0)	; use fast animation
   12829/    A980 : 0440 00C0           		subi.w	#$C0,d0
   12830/    A984 : B068 000C           		cmp.w	$C(a0),d0
   12831/    A988 : 6412                		bcc.s	locret_ABB6
   12832/    A98A : 117C 0000 001C      		move.b	#0,$1C(a0)	; use slow animation
   12833/    A990 : 4A68 0012           		tst.w	$12(a0)		; is Chopper at	its highest point?
   12834/    A994 : 6B06                		bmi.s	locret_ABB6	; if not, branch
   12835/    A996 : 117C 0002 001C      		move.b	#2,$1C(a0)	; use stationary animation
   12836/    A99C :                     
   12837/    A99C :                     locret_ABB6:
   12838/    A99C : 4E75                		rts	
   12839/    A99E :                     ; ===========================================================================
   12840/    A99E :                     Ani_obj2B:
   12841/    A99E :                     	include "_animations/obj2B.asm"
(1)    1/    A99E :                     ; ---------------------------------------------------------------------------
(1)    2/    A99E :                     ; Animation script - Chopper enemy
(1)    3/    A99E :                     ; ---------------------------------------------------------------------------
(1)    4/    A99E : 0006                		dc.w byte_ABBE-Ani_obj2B
(1)    5/    A9A0 : 000A                		dc.w byte_ABC2-Ani_obj2B
(1)    6/    A9A2 : 000E                		dc.w byte_ABC6-Ani_obj2B
(1)    7/    A9A4 : 0700 01FF           byte_ABBE:	dc.b 7,	0, 1, $FF
(1)    8/    A9A8 : 0300 01FF           byte_ABC2:	dc.b 3,	0, 1, $FF
(1)    9/    A9AC : 0700 FF             byte_ABC6:	dc.b 7,	0, $FF
(1)   10/    A9AF : (MACRO)              		even
(1)   10/    A9AF : 00                                          dc.b 0 ;ds.b 1 
   12842/    A9B0 :                     
   12843/    A9B0 :                     ; ---------------------------------------------------------------------------
   12844/    A9B0 :                     ; Sprite mappings - Chopper enemy (GHZ)
   12845/    A9B0 :                     ; ---------------------------------------------------------------------------
   12846/    A9B0 :                     Map_obj2B:
   12847/    A9B0 :                     	include "_mappings/obj2B.asm"
(1)    1/    A9B0 :                     ; ---------------------------------------------------------------------------
(1)    2/    A9B0 :                     ; Sprite mappings - Chopper enemy (GHZ)
(1)    3/    A9B0 :                     ; ---------------------------------------------------------------------------
(1)    4/    A9B0 : 0004                		dc.w byte_ABCE-Map_obj2B
(1)    5/    A9B2 : 000A                		dc.w byte_ABD4-Map_obj2B
(1)    6/    A9B4 : 01                  byte_ABCE:	dc.b 1
(1)    7/    A9B5 : F00F 0000 F0        		dc.b $F0, $F, 0, 0, $F0
(1)    8/    A9BA : 01                  byte_ABD4:	dc.b 1
(1)    9/    A9BB : F00F 0010 F0        		dc.b $F0, $F, 0, $10, $F0
(1)   10/    A9C0 : (MACRO)              		even
   12848/    A9C0 :                     
   12849/    A9C0 :                     ; ===========================================================================
   12850/    A9C0 :                     ; ---------------------------------------------------------------------------
   12851/    A9C0 :                     ; Object 2C - Jaws enemy (LZ)
   12852/    A9C0 :                     ; ---------------------------------------------------------------------------
   12853/    A9C0 :                     
   12854/    A9C0 :                     Obj2C:					; XREF: Obj_Index
   12855/    A9C0 : 7000                		moveq	#0,d0
   12856/    A9C2 : 1028 0024           		move.b	$24(a0),d0
   12857/    A9C6 : 323B 0006           		move.w	Obj2C_Index(pc,d0.w),d1
   12858/    A9CA : 4EFB 1002           		jmp	Obj2C_Index(pc,d1.w)
   12859/    A9CE :                     ; ===========================================================================
   12860/    A9CE : 0004                Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
   12861/    A9D0 : 0052                		dc.w Obj2C_Turn-Obj2C_Index
   12862/    A9D2 :                     ; ===========================================================================
   12863/    A9D2 :                     
   12864/    A9D2 :                     Obj2C_Main:				; XREF: Obj2C_Index
   12865/    A9D2 : 5428 0024           		addq.b	#2,$24(a0)
   12866/    A9D6 : 217C 0000 AA56      		move.l	#Map_obj2C,4(a0)
             A9DC : 0004             
   12867/    A9DE : 317C 2486 0002      		move.w	#$2486,2(a0)
   12868/    A9E4 : 0028 0004 0001      		ori.b	#4,1(a0)
   12869/    A9EA : 117C 000A 0020      		move.b	#$A,$20(a0)
   12870/    A9F0 : 117C 0004 0018      		move.b	#4,$18(a0)
   12871/    A9F6 : 117C 0010 0019      		move.b	#$10,$19(a0)
   12872/    A9FC : 7000                		moveq	#0,d0
   12873/    A9FE : 1028 0028           		move.b	$28(a0),d0	; load object subtype number
   12874/    AA02 : ED48                		lsl.w	#6,d0		; multiply d0 by 64
   12875/    AA04 : 5340                		subq.w	#1,d0
   12876/    AA06 : 3140 0030           		move.w	d0,$30(a0)	; set turn delay time
   12877/    AA0A : 3140 0032           		move.w	d0,$32(a0)
   12878/    AA0E : 317C FFC0 0010      		move.w	#-$40,$10(a0)	; move Jaws to the left
   12879/    AA14 : 0828 0000 0022      		btst	#0,$22(a0)	; is Jaws facing left?
   12880/    AA1A : 6704                		beq.s	Obj2C_Turn	; if yes, branch
   12881/    AA1C : 4468 0010           		neg.w	$10(a0)		; move Jaws to the right
   12882/    AA20 :                     
   12883/    AA20 :                     Obj2C_Turn:				; XREF: Obj2C_Index
   12884/    AA20 : 5368 0030           		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
   12885/    AA24 : 6A16                		bpl.s	Obj2C_Animate	; if time remains, branch
   12886/    AA26 : 3168 0032 0030      		move.w	$32(a0),$30(a0)	; reset	turn delay time
   12887/    AA2C : 4468 0010           		neg.w	$10(a0)		; change speed direction
   12888/    AA30 : 0868 0000 0022      		bchg	#0,$22(a0)	; change Jaws facing direction
   12889/    AA36 : 117C 0001 001D      		move.b	#1,$1D(a0)	; reset	animation
   12890/    AA3C :                     
   12891/    AA3C :                     Obj2C_Animate:
   12892/    AA3C : 43F9 0000 AA4E      		lea	(Ani_obj2C).l,a1
   12893/    AA42 : 6100 FABA           		bsr.w	AnimateSprite
   12894/    AA46 : 6100 2964           		bsr.w	SpeedToPos
   12895/    AA4A : 6000 4A1E           		bra.w	MarkObjGone
   12896/    AA4E :                     ; ===========================================================================
   12897/    AA4E :                     Ani_obj2C:
   12898/    AA4E :                     	include "_animations/obj2C.asm"
(1)    1/    AA4E :                     ; ---------------------------------------------------------------------------
(1)    2/    AA4E :                     ; Animation script - Jaws enemy
(1)    3/    AA4E :                     ; ---------------------------------------------------------------------------
(1)    4/    AA4E : 0002                		dc.w byte_AC6A-Ani_obj2C
(1)    5/    AA50 : 0700 0102 03FF      byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
(1)    6/    AA56 : (MACRO)              		even
   12899/    AA56 :                     
   12900/    AA56 :                     ; ---------------------------------------------------------------------------
   12901/    AA56 :                     ; Sprite mappings - Jaws enemy (LZ)
   12902/    AA56 :                     ; ---------------------------------------------------------------------------
   12903/    AA56 :                     Map_obj2C:
   12904/    AA56 :                     	include "_mappings/obj2C.asm"
(1)    1/    AA56 :                     ; ---------------------------------------------------------------------------
(1)    2/    AA56 :                     ; Sprite mappings - Jaws enemy (LZ)
(1)    3/    AA56 :                     ; ---------------------------------------------------------------------------
(1)    4/    AA56 : 0008                		dc.w byte_AC78-Map_obj2C
(1)    5/    AA58 : 0013                		dc.w byte_AC83-Map_obj2C
(1)    6/    AA5A : 001E                		dc.w byte_AC8E-Map_obj2C
(1)    7/    AA5C : 0029                		dc.w byte_AC99-Map_obj2C
(1)    8/    AA5E : 02                  byte_AC78:	dc.b 2
(1)    9/    AA5F : F40E 0000 F0        		dc.b $F4, $E, 0, 0, $F0
(1)   10/    AA64 : F505 0018 10        		dc.b $F5, 5, 0,	$18, $10
(1)   11/    AA69 : 02                  byte_AC83:	dc.b 2
(1)   12/    AA6A : F40E 000C F0        		dc.b $F4, $E, 0, $C, $F0
(1)   13/    AA6F : F505 001C 10        		dc.b $F5, 5, 0,	$1C, $10
(1)   14/    AA74 : 02                  byte_AC8E:	dc.b 2
(1)   15/    AA75 : F40E 0000 F0        		dc.b $F4, $E, 0, 0, $F0
(1)   16/    AA7A : F505 1018 10        		dc.b $F5, 5, $10, $18, $10
(1)   17/    AA7F : 02                  byte_AC99:	dc.b 2
(1)   18/    AA80 : F40E 000C F0        		dc.b $F4, $E, 0, $C, $F0
(1)   19/    AA85 : F505 101C 10        		dc.b $F5, 5, $10, $1C, $10
(1)   20/    AA8A : (MACRO)              		even
   12905/    AA8A :                     
   12906/    AA8A :                     ; ===========================================================================
   12907/    AA8A :                     ; ---------------------------------------------------------------------------
   12908/    AA8A :                     ; Object 2D - Burrobot enemy (LZ)
   12909/    AA8A :                     ; ---------------------------------------------------------------------------
   12910/    AA8A :                     
   12911/    AA8A :                     Obj2D:					; XREF: Obj_Index
   12912/    AA8A : 7000                		moveq	#0,d0
   12913/    AA8C : 1028 0024           		move.b	$24(a0),d0
   12914/    AA90 : 323B 0006           		move.w	Obj2D_Index(pc,d0.w),d1
   12915/    AA94 : 4EFB 1002           		jmp	Obj2D_Index(pc,d1.w)
   12916/    AA98 :                     ; ===========================================================================
   12917/    AA98 : 0004                Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
   12918/    AA9A : 0044                		dc.w Obj2D_Action-Obj2D_Index
   12919/    AA9C :                     ; ===========================================================================
   12920/    AA9C :                     
   12921/    AA9C :                     Obj2D_Main:				; XREF: Obj2D_Index
   12922/    AA9C : 5428 0024           		addq.b	#2,$24(a0)
   12923/    AAA0 : 117C 0013 0016      		move.b	#$13,$16(a0)
   12924/    AAA6 : 117C 0008 0017      		move.b	#8,$17(a0)
   12925/    AAAC : 217C 0000 AC42      		move.l	#Map_obj2D,4(a0)
             AAB2 : 0004             
   12926/    AAB4 : 317C 04A6 0002      		move.w	#$4A6,2(a0)
   12927/    AABA : 0028 0004 0001      		ori.b	#4,1(a0)
   12928/    AAC0 : 117C 0004 0018      		move.b	#4,$18(a0)
   12929/    AAC6 : 117C 0005 0020      		move.b	#5,$20(a0)
   12930/    AACC : 117C 000C 0019      		move.b	#$C,$19(a0)
   12931/    AAD2 : 5C28 0025           		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
   12932/    AAD6 : 117C 0002 001C      		move.b	#2,$1C(a0)
   12933/    AADC :                     
   12934/    AADC :                     Obj2D_Action:				; XREF: Obj2D_Index
   12935/    AADC : 7000                		moveq	#0,d0
   12936/    AADE : 1028 0025           		move.b	$25(a0),d0
   12937/    AAE2 : 323B 0014           		move.w	Obj2D_Index2(pc,d0.w),d1
   12938/    AAE6 : 4EBB 1010           		jsr	Obj2D_Index2(pc,d1.w)
   12939/    AAEA : 43F9 0000 AC2A      		lea	(Ani_obj2D).l,a1
   12940/    AAF0 : 6100 FA0C           		bsr.w	AnimateSprite
   12941/    AAF4 : 6000 4974           		bra.w	MarkObjGone
   12942/    AAF8 :                     ; ===========================================================================
   12943/    AAF8 : 0008                Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
   12944/    AAFA : 0032                		dc.w Obj2D_Move-Obj2D_Index2
   12945/    AAFC : 00A4                		dc.w Obj2D_Jump-Obj2D_Index2
   12946/    AAFE : 00E0                		dc.w Obj2D_ChkSonic-Obj2D_Index2
   12947/    AB00 :                     ; ===========================================================================
   12948/    AB00 :                     
   12949/    AB00 :                     Obj2D_ChgDir:				; XREF: Obj2D_Index2
   12950/    AB00 : 5368 0030           		subq.w	#1,$30(a0)
   12951/    AB04 : 6A22                		bpl.s	locret_AD42
   12952/    AB06 : 5428 0025           		addq.b	#2,$25(a0)
   12953/    AB0A : 317C 00FF 0030      		move.w	#$FF,$30(a0)
   12954/    AB10 : 317C 0080 0010      		move.w	#$80,$10(a0)
   12955/    AB16 : 117C 0001 001C      		move.b	#1,$1C(a0)
   12956/    AB1C : 0868 0000 0022      		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
   12957/    AB22 : 6704                		beq.s	locret_AD42
   12958/    AB24 : 4468 0010           		neg.w	$10(a0)		; change direction the Burrobot	is moving
   12959/    AB28 :                     
   12960/    AB28 :                     locret_AD42:
   12961/    AB28 : 4E75                		rts	
   12962/    AB2A :                     ; ===========================================================================
   12963/    AB2A :                     
   12964/    AB2A :                     Obj2D_Move:				; XREF: Obj2D_Index2
   12965/    AB2A : 5368 0030           		subq.w	#1,$30(a0)
   12966/    AB2E : 6B3A                		bmi.s	loc_AD84
   12967/    AB30 : 6100 287A           		bsr.w	SpeedToPos
   12968/    AB34 : 0868 0000 0032      		bchg	#0,$32(a0)
   12969/    AB3A : 6622                		bne.s	loc_AD78
   12970/    AB3C : 3628 0008           		move.w	8(a0),d3
   12971/    AB40 : 0643 000C           		addi.w	#$C,d3
   12972/    AB44 : 0828 0000 0022      		btst	#0,$22(a0)
   12973/    AB4A : 6604                		bne.s	loc_AD6A
   12974/    AB4C : 0443 0018           		subi.w	#$18,d3
   12975/    AB50 :                     
   12976/    AB50 :                     loc_AD6A:
   12977/    AB50 : 4EB9 0001 4C0C      		jsr	ObjHitFloor2
   12978/    AB56 : 0C41 000C           		cmpi.w	#$C,d1
   12979/    AB5A : 6C0E                		bge.s	loc_AD84
   12980/    AB5C : 4E75                		rts	
   12981/    AB5E :                     ; ===========================================================================
   12982/    AB5E :                     
   12983/    AB5E :                     loc_AD78:				; XREF: Obj2D_Move
   12984/    AB5E : 4EB9 0001 4C08      		jsr	ObjHitFloor
   12985/    AB64 : D368 000C           		add.w	d1,$C(a0)
   12986/    AB68 : 4E75                		rts	
   12987/    AB6A :                     ; ===========================================================================
   12988/    AB6A :                     
   12989/    AB6A :                     loc_AD84:				; XREF: Obj2D_Move
   12990/    AB6A : 0838 0002 FE0F      		btst	#2,($FFFFFE0F).w
   12991/    AB70 : 6718                		beq.s	loc_ADA4
   12992/    AB72 : 5528 0025           		subq.b	#2,$25(a0)
   12993/    AB76 : 317C 003B 0030      		move.w	#$3B,$30(a0)
   12994/    AB7C : 317C 0000 0010      		move.w	#0,$10(a0)
   12995/    AB82 : 117C 0000 001C      		move.b	#0,$1C(a0)
   12996/    AB88 : 4E75                		rts	
   12997/    AB8A :                     ; ===========================================================================
   12998/    AB8A :                     
   12999/    AB8A :                     loc_ADA4:
   13000/    AB8A : 5428 0025           		addq.b	#2,$25(a0)
   13001/    AB8E : 317C FC00 0012      		move.w	#-$400,$12(a0)
   13002/    AB94 : 117C 0002 001C      		move.b	#2,$1C(a0)
   13003/    AB9A : 4E75                		rts	
   13004/    AB9C :                     ; ===========================================================================
   13005/    AB9C :                     
   13006/    AB9C :                     Obj2D_Jump:				; XREF: Obj2D_Index2
   13007/    AB9C : 6100 280E           		bsr.w	SpeedToPos
   13008/    ABA0 : 0668 0018 0012      		addi.w	#$18,$12(a0)
   13009/    ABA6 : 6B2E                		bmi.s	locret_ADF0
   13010/    ABA8 : 117C 0003 001C      		move.b	#3,$1C(a0)
   13011/    ABAE : 4EB9 0001 4C08      		jsr	ObjHitFloor
   13012/    ABB4 : 4A41                		tst.w	d1
   13013/    ABB6 : 6A1E                		bpl.s	locret_ADF0
   13014/    ABB8 : D368 000C           		add.w	d1,$C(a0)
   13015/    ABBC : 317C 0000 0012      		move.w	#0,$12(a0)
   13016/    ABC2 : 117C 0001 001C      		move.b	#1,$1C(a0)
   13017/    ABC8 : 317C 00FF 0030      		move.w	#$FF,$30(a0)
   13018/    ABCE : 5528 0025           		subq.b	#2,$25(a0)
   13019/    ABD2 : 6100 0034           		bsr.w	Obj2D_ChkSonic2
   13020/    ABD6 :                     
   13021/    ABD6 :                     locret_ADF0:
   13022/    ABD6 : 4E75                		rts	
   13023/    ABD8 :                     ; ===========================================================================
   13024/    ABD8 :                     
   13025/    ABD8 :                     Obj2D_ChkSonic:				; XREF: Obj2D_Index2
   13026/    ABD8 : 343C 0060           		move.w	#$60,d2
   13027/    ABDC : 6100 002A           		bsr.w	Obj2D_ChkSonic2
   13028/    ABE0 : 6424                		bcc.s	locret_AE20
   13029/    ABE2 : 3038 D00C           		move.w	($FFFFD00C).w,d0
   13030/    ABE6 : 9068 000C           		sub.w	$C(a0),d0
   13031/    ABEA : 641A                		bcc.s	locret_AE20
   13032/    ABEC : 0C40 FF80           		cmpi.w	#-$80,d0
   13033/    ABF0 : 6514                		bcs.s	locret_AE20
   13034/    ABF2 : 4A78 FE08           		tst.w	($FFFFFE08).w
   13035/    ABF6 : 660E                		bne.s	locret_AE20
   13036/    ABF8 : 5528 0025           		subq.b	#2,$25(a0)
   13037/    ABFC : 3141 0010           		move.w	d1,$10(a0)
   13038/    AC00 : 317C FC00 0012      		move.w	#-$400,$12(a0)
   13039/    AC06 :                     
   13040/    AC06 :                     locret_AE20:
   13041/    AC06 : 4E75                		rts	
   13042/    AC08 :                     
   13043/    AC08 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   13044/    AC08 :                     
   13045/    AC08 :                     
   13046/    AC08 :                     Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
   13047/    AC08 : 323C 0080           		move.w	#$80,d1
   13048/    AC0C : 08E8 0000 0022      		bset	#0,$22(a0)
   13049/    AC12 : 3038 D008           		move.w	($FFFFD008).w,d0
   13050/    AC16 : 9068 0008           		sub.w	8(a0),d0
   13051/    AC1A : 640A                		bcc.s	loc_AE40
   13052/    AC1C : 4440                		neg.w	d0
   13053/    AC1E : 4441                		neg.w	d1
   13054/    AC20 : 08A8 0000 0022      		bclr	#0,$22(a0)
   13055/    AC26 :                     
   13056/    AC26 :                     loc_AE40:
   13057/    AC26 : B042                		cmp.w	d2,d0
   13058/    AC28 : 4E75                		rts	
   13059/    AC2A :                     ; End of function Obj2D_ChkSonic2
   13060/    AC2A :                     
   13061/    AC2A :                     ; ===========================================================================
   13062/    AC2A :                     Ani_obj2D:
   13063/    AC2A :                     	include "_animations/obj2D.asm"
(1)    1/    AC2A :                     ; ---------------------------------------------------------------------------
(1)    2/    AC2A :                     ; Animation script - Burrobot enemy
(1)    3/    AC2A :                     ; ---------------------------------------------------------------------------
(1)    4/    AC2A : 0008                		dc.w byte_AE4C-Ani_obj2D
(1)    5/    AC2C : 000C                		dc.w byte_AE50-Ani_obj2D
(1)    6/    AC2E : 0010                		dc.w byte_AE54-Ani_obj2D
(1)    7/    AC30 : 0014                		dc.w byte_AE58-Ani_obj2D
(1)    8/    AC32 : 0300 06FF           byte_AE4C:	dc.b 3,	0, 6, $FF
(1)    9/    AC36 : 0300 01FF           byte_AE50:	dc.b 3,	0, 1, $FF
(1)   10/    AC3A : 0302 03FF           byte_AE54:	dc.b 3,	2, 3, $FF
(1)   11/    AC3E : 0304 FF             byte_AE58:	dc.b 3,	4, $FF
(1)   12/    AC41 : (MACRO)              		even
(1)   12/    AC41 : 00                                          dc.b 0 ;ds.b 1 
   13064/    AC42 :                     
   13065/    AC42 :                     ; ---------------------------------------------------------------------------
   13066/    AC42 :                     ; Sprite mappings - Burrobot enemy (LZ)
   13067/    AC42 :                     ; ---------------------------------------------------------------------------
   13068/    AC42 :                     Map_obj2D:
   13069/    AC42 :                     	include "_mappings/obj2D.asm"
(1)    1/    AC42 :                     ; ---------------------------------------------------------------------------
(1)    2/    AC42 :                     ; Sprite mappings - Burrobot enemy (LZ)
(1)    3/    AC42 :                     ; ---------------------------------------------------------------------------
(1)    4/    AC42 : 000E                		dc.w byte_AE6A-Map_obj2D
(1)    5/    AC44 : 0019                		dc.w byte_AE75-Map_obj2D
(1)    6/    AC46 : 0024                		dc.w byte_AE80-Map_obj2D
(1)    7/    AC48 : 002F                		dc.w byte_AE8B-Map_obj2D
(1)    8/    AC4A : 003A                		dc.w byte_AE96-Map_obj2D
(1)    9/    AC4C : 0045                		dc.w byte_AEA1-Map_obj2D
(1)   10/    AC4E : 0050                		dc.w byte_AEAC-Map_obj2D
(1)   11/    AC50 : 02                  byte_AE6A:	dc.b 2
(1)   12/    AC51 : EC0A 0000 F0        		dc.b $EC, $A, 0, 0, $F0
(1)   13/    AC56 : 0409 0009 F4        		dc.b 4,	9, 0, 9, $F4
(1)   14/    AC5B : 02                  byte_AE75:	dc.b 2
(1)   15/    AC5C : EC0A 000F F0        		dc.b $EC, $A, 0, $F, $F0
(1)   16/    AC61 : 0409 0018 F4        		dc.b 4,	9, 0, $18, $F4
(1)   17/    AC66 : 02                  byte_AE80:	dc.b 2
(1)   18/    AC67 : E80A 001E F4        		dc.b $E8, $A, 0, $1E, $F4
(1)   19/    AC6C : 000A 0027 F4        		dc.b 0,	$A, 0, $27, $F4
(1)   20/    AC71 : 02                  byte_AE8B:	dc.b 2
(1)   21/    AC72 : E80A 0030 F4        		dc.b $E8, $A, 0, $30, $F4
(1)   22/    AC77 : 000A 0039 F4        		dc.b 0,	$A, 0, $39, $F4
(1)   23/    AC7C : 02                  byte_AE96:	dc.b 2
(1)   24/    AC7D : E80A 000F F0        		dc.b $E8, $A, 0, $F, $F0
(1)   25/    AC82 : 000A 0042 F4        		dc.b 0,	$A, 0, $42, $F4
(1)   26/    AC87 : 02                  byte_AEA1:	dc.b 2
(1)   27/    AC88 : F406 004B E8        		dc.b $F4, 6, 0,	$4B, $E8
(1)   28/    AC8D : F40A 0051 F8        		dc.b $F4, $A, 0, $51, $F8
(1)   29/    AC92 : 02                  byte_AEAC:	dc.b 2
(1)   30/    AC93 : EC0A 000F F0        		dc.b $EC, $A, 0, $F, $F0
(1)   31/    AC98 : 0409 0009 F4        		dc.b 4,	9, 0, 9, $F4
(1)   32/    AC9D : (MACRO)              		even
(1)   32/    AC9D : 00                                          dc.b 0 ;ds.b 1 
   13070/    AC9E :                     
   13071/    AC9E :                     ; ===========================================================================
   13072/    AC9E :                     ; ---------------------------------------------------------------------------
   13073/    AC9E :                     ; Object 2F - large moving platforms (MZ)
   13074/    AC9E :                     ; ---------------------------------------------------------------------------
   13075/    AC9E :                     
   13076/    AC9E :                     Obj2F:					; XREF: Obj_Index
   13077/    AC9E : 7000                		moveq	#0,d0
   13078/    ACA0 : 1028 0024           		move.b	$24(a0),d0
   13079/    ACA4 : 323B 0006           		move.w	Obj2F_Index(pc,d0.w),d1
   13080/    ACA8 : 4EFB 1002           		jmp	Obj2F_Index(pc,d1.w)
   13081/    ACAC :                     ; ===========================================================================
   13082/    ACAC : 0010                Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
   13083/    ACAE : 006E                		dc.w Obj2F_Action-Obj2F_Index
   13084/    ACB0 :                     
   13085/    ACB0 : 024C                Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
   13086/    ACB2 : 0040                		dc.b 0,	$40			; frame	number,	platform width
   13087/    ACB4 : 02C4                		dc.w Obj2F_Data3-Obj2F_Data
   13088/    ACB6 : 0140                		dc.b 1,	$40
   13089/    ACB8 : 0298                		dc.w Obj2F_Data2-Obj2F_Data
   13090/    ACBA : 0220                		dc.b 2,	$20
   13091/    ACBC :                     ; ===========================================================================
   13092/    ACBC :                     
   13093/    ACBC :                     Obj2F_Main:				; XREF: Obj2F_Index
   13094/    ACBC : 5428 0024           		addq.b	#2,$24(a0)
   13095/    ACC0 : 217C 0000 B0B6      		move.l	#Map_obj2F,4(a0)
             ACC6 : 0004             
   13096/    ACC8 : 317C C000 0002      		move.w	#$C000,2(a0)
   13097/    ACCE : 117C 0004 0001      		move.b	#4,1(a0)
   13098/    ACD4 : 117C 0005 0018      		move.b	#5,$18(a0)
   13099/    ACDA : 3168 000C 002C      		move.w	$C(a0),$2C(a0)
   13100/    ACE0 : 3168 0008 002A      		move.w	8(a0),$2A(a0)
   13101/    ACE6 : 7000                		moveq	#0,d0
   13102/    ACE8 : 1028 0028           		move.b	$28(a0),d0
   13103/    ACEC : E448                		lsr.w	#2,d0
   13104/    ACEE : 0240 001C           		andi.w	#$1C,d0
   13105/    ACF2 : 43FB 00BC           		lea	Obj2F_Data(pc,d0.w),a1
   13106/    ACF6 : 3019                		move.w	(a1)+,d0
   13107/    ACF8 : 45FB 00B6           		lea	Obj2F_Data(pc,d0.w),a2
   13108/    ACFC : 214A 0030           		move.l	a2,$30(a0)
   13109/    AD00 : 1159 001A           		move.b	(a1)+,$1A(a0)
   13110/    AD04 : 1151 0019           		move.b	(a1),$19(a0)
   13111/    AD08 : 0228 000F 0028      		andi.b	#$F,$28(a0)
   13112/    AD0E : 117C 0040 0016      		move.b	#$40,$16(a0)
   13113/    AD14 : 08E8 0004 0001      		bset	#4,1(a0)
   13114/    AD1A :                     
   13115/    AD1A :                     Obj2F_Action:				; XREF: Obj2F_Index
   13116/    AD1A : 6100 0068           		bsr.w	Obj2F_Types
   13117/    AD1E : 4A28 0025           		tst.b	$25(a0)
   13118/    AD22 : 6736                		beq.s	Obj2F_Solid
   13119/    AD24 : 7200                		moveq	#0,d1
   13120/    AD26 : 1228 0019           		move.b	$19(a0),d1
   13121/    AD2A : 0641 000B           		addi.w	#$B,d1
   13122/    AD2E : 6100 C6A0           		bsr.w	ExitPlatform
   13123/    AD32 : 0829 0003 0022      		btst	#3,$22(a1)
   13124/    AD38 : 6600 0008           		bne.w	Obj2F_Slope
   13125/    AD3C : 4228 0025           		clr.b	$25(a0)
   13126/    AD40 : 603A                		bra.s	Obj2F_Display
   13127/    AD42 :                     ; ===========================================================================
   13128/    AD42 :                     
   13129/    AD42 :                     Obj2F_Slope:				; XREF: Obj2F_Action
   13130/    AD42 : 7200                		moveq	#0,d1
   13131/    AD44 : 1228 0019           		move.b	$19(a0),d1
   13132/    AD48 : 0641 000B           		addi.w	#$B,d1
   13133/    AD4C : 2468 0030           		movea.l	$30(a0),a2
   13134/    AD50 : 3428 0008           		move.w	8(a0),d2
   13135/    AD54 : 6100 D5D8           		bsr.w	SlopeObject2
   13136/    AD58 : 6022                		bra.s	Obj2F_Display
   13137/    AD5A :                     ; ===========================================================================
   13138/    AD5A :                     
   13139/    AD5A :                     Obj2F_Solid:				; XREF: Obj2F_Action
   13140/    AD5A : 7200                		moveq	#0,d1
   13141/    AD5C : 1228 0019           		move.b	$19(a0),d1
   13142/    AD60 : 0641 000B           		addi.w	#$B,d1
   13143/    AD64 : 343C 0020           		move.w	#$20,d2
   13144/    AD68 : 0C28 0002 001A      		cmpi.b	#2,$1A(a0)
   13145/    AD6E : 6604                		bne.s	loc_AF8E
   13146/    AD70 : 343C 0030           		move.w	#$30,d2
   13147/    AD74 :                     
   13148/    AD74 :                     loc_AF8E:
   13149/    AD74 : 2468 0030           		movea.l	$30(a0),a2
   13150/    AD78 : 6100 4AA4           		bsr.w	SolidObject2F
   13151/    AD7C :                     
   13152/    AD7C :                     Obj2F_Display:				; XREF: Obj2F_Action
   13153/    AD7C : 6100 2654           		bsr.w	DisplaySprite
   13154/    AD80 : 6000 011C           		bra.w	Obj2F_ChkDel
   13155/    AD84 :                     
   13156/    AD84 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   13157/    AD84 :                     
   13158/    AD84 :                     
   13159/    AD84 :                     Obj2F_Types:				; XREF: Obj2F_Action
   13160/    AD84 : 7000                		moveq	#0,d0
   13161/    AD86 : 1028 0028           		move.b	$28(a0),d0
   13162/    AD8A : 0240 0007           		andi.w	#7,d0
   13163/    AD8E : D040                		add.w	d0,d0
   13164/    AD90 : 323B 0006           		move.w	Obj2F_TypeIndex(pc,d0.w),d1
   13165/    AD94 : 4EFB 1002           		jmp	Obj2F_TypeIndex(pc,d1.w)
   13166/    AD98 :                     ; End of function Obj2F_Types
   13167/    AD98 :                     
   13168/    AD98 :                     ; ===========================================================================
   13169/    AD98 : 000C                Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
   13170/    AD9A : 000E                		dc.w Obj2F_Type01-Obj2F_TypeIndex
   13171/    AD9C : 0018                		dc.w Obj2F_Type02-Obj2F_TypeIndex
   13172/    AD9E : 0022                		dc.w Obj2F_Type03-Obj2F_TypeIndex
   13173/    ADA0 : 002C                		dc.w Obj2F_Type04-Obj2F_TypeIndex
   13174/    ADA2 : 004C                		dc.w Obj2F_Type05-Obj2F_TypeIndex
   13175/    ADA4 :                     ; ===========================================================================
   13176/    ADA4 :                     
   13177/    ADA4 :                     Obj2F_Type00:				; XREF: Obj2F_TypeIndex
   13178/    ADA4 : 4E75                		rts			; type 00 platform doesn't move
   13179/    ADA6 :                     ; ===========================================================================
   13180/    ADA6 :                     
   13181/    ADA6 :                     Obj2F_Type01:				; XREF: Obj2F_TypeIndex
   13182/    ADA6 : 1038 FE60           		move.b	($FFFFFE60).w,d0
   13183/    ADAA : 323C 0020           		move.w	#$20,d1
   13184/    ADAE : 601C                		bra.s	Obj2F_Move
   13185/    ADB0 :                     ; ===========================================================================
   13186/    ADB0 :                     
   13187/    ADB0 :                     Obj2F_Type02:				; XREF: Obj2F_TypeIndex
   13188/    ADB0 : 1038 FE64           		move.b	($FFFFFE64).w,d0
   13189/    ADB4 : 323C 0030           		move.w	#$30,d1
   13190/    ADB8 : 6012                		bra.s	Obj2F_Move
   13191/    ADBA :                     ; ===========================================================================
   13192/    ADBA :                     
   13193/    ADBA :                     Obj2F_Type03:				; XREF: Obj2F_TypeIndex
   13194/    ADBA : 1038 FE68           		move.b	($FFFFFE68).w,d0
   13195/    ADBE : 323C 0040           		move.w	#$40,d1
   13196/    ADC2 : 6008                		bra.s	Obj2F_Move
   13197/    ADC4 :                     ; ===========================================================================
   13198/    ADC4 :                     
   13199/    ADC4 :                     Obj2F_Type04:				; XREF: Obj2F_TypeIndex
   13200/    ADC4 : 1038 FE6C           		move.b	($FFFFFE6C).w,d0
   13201/    ADC8 : 323C 0060           		move.w	#$60,d1
   13202/    ADCC :                     
   13203/    ADCC :                     Obj2F_Move:
   13204/    ADCC : 0828 0003 0028      		btst	#3,$28(a0)
   13205/    ADD2 : 6704                		beq.s	loc_AFF2
   13206/    ADD4 : 4440                		neg.w	d0
   13207/    ADD6 : D041                		add.w	d1,d0
   13208/    ADD8 :                     
   13209/    ADD8 :                     loc_AFF2:
   13210/    ADD8 : 3228 002C           		move.w	$2C(a0),d1
   13211/    ADDC : 9240                		sub.w	d0,d1
   13212/    ADDE : 3141 000C           		move.w	d1,$C(a0)	; update position on y-axis
   13213/    ADE2 : 4E75                		rts	
   13214/    ADE4 :                     ; ===========================================================================
   13215/    ADE4 :                     
   13216/    ADE4 :                     Obj2F_Type05:				; XREF: Obj2F_TypeIndex
   13217/    ADE4 : 1028 0034           		move.b	$34(a0),d0
   13218/    ADE8 : 4A28 0025           		tst.b	$25(a0)
   13219/    ADEC : 6608                		bne.s	loc_B010
   13220/    ADEE : 5500                		subq.b	#2,d0
   13221/    ADF0 : 6410                		bcc.s	loc_B01C
   13222/    ADF2 : 7000                		moveq	#0,d0
   13223/    ADF4 : 600C                		bra.s	loc_B01C
   13224/    ADF6 :                     ; ===========================================================================
   13225/    ADF6 :                     
   13226/    ADF6 :                     loc_B010:
   13227/    ADF6 : 5800                		addq.b	#4,d0
   13228/    ADF8 : 0C00 0040           		cmpi.b	#$40,d0
   13229/    ADFC : 6504                		bcs.s	loc_B01C
   13230/    ADFE : 103C 0040           		move.b	#$40,d0
   13231/    AE02 :                     
   13232/    AE02 :                     loc_B01C:
   13233/    AE02 : 1140 0034           		move.b	d0,$34(a0)
   13234/    AE06 : 4EB9 0000 27C0      		jsr	(CalcSine).l
   13235/    AE0C : E848                		lsr.w	#4,d0
   13236/    AE0E : 3200                		move.w	d0,d1
   13237/    AE10 : D068 002C           		add.w	$2C(a0),d0
   13238/    AE14 : 3140 000C           		move.w	d0,$C(a0)
   13239/    AE18 : 0C28 0020 0034      		cmpi.b	#$20,$34(a0)
   13240/    AE1E : 663E                		bne.s	loc_B07A
   13241/    AE20 : 4A28 0035           		tst.b	$35(a0)
   13242/    AE24 : 6638                		bne.s	loc_B07A
   13243/    AE26 : 117C 0001 0035      		move.b	#1,$35(a0)
   13244/    AE2C : 6100 2A40           		bsr.w	SingleObjLoad2
   13245/    AE30 : 662C                		bne.s	loc_B07A
   13246/    AE32 : 12BC 0035           		move.b	#$35,0(a1)	; load sitting flame object
   13247/    AE36 : 3368 0008 0008      		move.w	8(a0),8(a1)
   13248/    AE3C : 3368 002C 002C      		move.w	$2C(a0),$2C(a1)
   13249/    AE42 : 5069 002C           		addq.w	#8,$2C(a1)
   13250/    AE46 : 5769 002C           		subq.w	#3,$2C(a1)
   13251/    AE4A : 0469 0040 0008      		subi.w	#$40,8(a1)
   13252/    AE50 : 2368 0030 0030      		move.l	$30(a0),$30(a1)
   13253/    AE56 : 2348 0038           		move.l	a0,$38(a1)
   13254/    AE5A : 2448                		movea.l	a0,a2
   13255/    AE5C : 6122                		bsr.s	sub_B09C
   13256/    AE5E :                     
   13257/    AE5E :                     loc_B07A:
   13258/    AE5E : 7400                		moveq	#0,d2
   13259/    AE60 : 45E8 0036           		lea	$36(a0),a2
   13260/    AE64 : 141A                		move.b	(a2)+,d2
   13261/    AE66 : 5302                		subq.b	#1,d2
   13262/    AE68 : 6514                		bcs.s	locret_B09A
   13263/    AE6A :                     
   13264/    AE6A :                     loc_B086:
   13265/    AE6A : 7000                		moveq	#0,d0
   13266/    AE6C : 101A                		move.b	(a2)+,d0
   13267/    AE6E : ED48                		lsl.w	#6,d0
   13268/    AE70 : 0640 D000           		addi.w	#-$3000,d0
   13269/    AE74 : 3240                		movea.w	d0,a1
   13270/    AE76 : 3341 003C           		move.w	d1,$3C(a1)
   13271/    AE7A : 51CA FFEE           		dbf	d2,loc_B086
   13272/    AE7E :                     
   13273/    AE7E :                     locret_B09A:
   13274/    AE7E : 4E75                		rts	
   13275/    AE80 :                     
   13276/    AE80 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   13277/    AE80 :                     
   13278/    AE80 :                     
   13279/    AE80 :                     sub_B09C:
   13280/    AE80 : 45EA 0036           		lea	$36(a2),a2
   13281/    AE84 : 7000                		moveq	#0,d0
   13282/    AE86 : 1012                		move.b	(a2),d0
   13283/    AE88 : 5212                		addq.b	#1,(a2)
   13284/    AE8A : 45F2 0001           		lea	1(a2,d0.w),a2
   13285/    AE8E : 3009                		move.w	a1,d0
   13286/    AE90 : 0440 D000           		subi.w	#-$3000,d0
   13287/    AE94 : EC48                		lsr.w	#6,d0
   13288/    AE96 : 0240 007F           		andi.w	#$7F,d0
   13289/    AE9A : 1480                		move.b	d0,(a2)
   13290/    AE9C : 4E75                		rts	
   13291/    AE9E :                     ; End of function sub_B09C
   13292/    AE9E :                     
   13293/    AE9E :                     ; ===========================================================================
   13294/    AE9E :                     
   13295/    AE9E :                     Obj2F_ChkDel:				; XREF: Obj2F_Display
   13296/    AE9E : 4A28 0035           		tst.b	$35(a0)
   13297/    AEA2 : 6706                		beq.s	loc_B0C6
   13298/    AEA4 : 4A28 0001           		tst.b	1(a0)
   13299/    AEA8 : 6A20                		bpl.s	Obj2F_DelFlames
   13300/    AEAA :                     
   13301/    AEAA :                     loc_B0C6:
   13302/    AEAA : 3028 002A           		move.w	$2A(a0),d0
   13303/    AEAE : 0240 FF80           		andi.w	#$FF80,d0
   13304/    AEB2 : 3238 F700           		move.w	($FFFFF700).w,d1
   13305/    AEB6 : 0441 0080           		subi.w	#$80,d1
   13306/    AEBA : 0241 FF80           		andi.w	#$FF80,d1
   13307/    AEBE : 9041                		sub.w	d1,d0
   13308/    AEC0 : 0C40 0280           		cmpi.w	#$280,d0
   13309/    AEC4 : 6200 2548           		bhi.w	DeleteObject
   13310/    AEC8 : 4E75                		rts	
   13311/    AECA :                     ; ===========================================================================
   13312/    AECA :                     
   13313/    AECA :                     Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
   13314/    AECA : 7400                		moveq	#0,d2
   13315/    AECC :                     
   13316/    AECC :                     loc_B0E8:
   13317/    AECC : 45E8 0036           		lea	$36(a0),a2
   13318/    AED0 : 1412                		move.b	(a2),d2
   13319/    AED2 : 421A                		clr.b	(a2)+
   13320/    AED4 : 5302                		subq.b	#1,d2
   13321/    AED6 : 6522                		bcs.s	locret_B116
   13322/    AED8 :                     
   13323/    AED8 :                     loc_B0F4:
   13324/    AED8 : 7000                		moveq	#0,d0
   13325/    AEDA : 1012                		move.b	(a2),d0
   13326/    AEDC : 421A                		clr.b	(a2)+
   13327/    AEDE : ED48                		lsl.w	#6,d0
   13328/    AEE0 : 0640 D000           		addi.w	#-$3000,d0
   13329/    AEE4 : 3240                		movea.w	d0,a1
   13330/    AEE6 : 6100 2528           		bsr.w	DeleteObject2
   13331/    AEEA : 51CA FFEC           		dbf	d2,loc_B0F4
   13332/    AEEE : 117C 0000 0035      		move.b	#0,$35(a0)
   13333/    AEF4 : 117C 0000 0034      		move.b	#0,$34(a0)
   13334/    AEFA :                     
   13335/    AEFA :                     locret_B116:
   13336/    AEFA : 4E75                		rts	
   13337/    AEFC :                     ; ===========================================================================
   13338/    AEFC :                     ; ---------------------------------------------------------------------------
   13339/    AEFC :                     ; Collision data for large moving platforms (MZ)
   13340/    AEFC :                     ; ---------------------------------------------------------------------------
   13341/    AEFC :                     Obj2F_Data1:	binclude	"_misc/mz_pfm1.bin"
   13342/    AF48 : (MACRO)              		even
   13343/    AF48 :                     Obj2F_Data2:	binclude	"_misc/mz_pfm2.bin"
   13344/    AF74 : (MACRO)              		even
   13345/    AF74 :                     Obj2F_Data3:	binclude	"_misc/mz_pfm3.bin"
   13346/    AFC0 : (MACRO)              		even
   13347/    AFC0 :                     ; ===========================================================================
   13348/    AFC0 :                     ; ---------------------------------------------------------------------------
   13349/    AFC0 :                     ; Object 35 - fireball that sits on the	floor (MZ)
   13350/    AFC0 :                     ; (appears when	you walk on sinking platforms)
   13351/    AFC0 :                     ; ---------------------------------------------------------------------------
   13352/    AFC0 :                     
   13353/    AFC0 :                     Obj35:					; XREF: Obj_Index
   13354/    AFC0 : 7000                		moveq	#0,d0
   13355/    AFC2 : 1028 0024           		move.b	$24(a0),d0
   13356/    AFC6 : 323B 0006           		move.w	Obj35_Index(pc,d0.w),d1
   13357/    AFCA : 4EFB 1002           		jmp	Obj35_Index(pc,d1.w)
   13358/    AFCE :                     ; ===========================================================================
   13359/    AFCE : 0006                Obj35_Index:	dc.w Obj35_Main-Obj35_Index
   13360/    AFD0 : 004E                		dc.w loc_B238-Obj35_Index
   13361/    AFD2 : 00C6                		dc.w Obj35_Move-Obj35_Index
   13362/    AFD4 :                     ; ===========================================================================
   13363/    AFD4 :                     
   13364/    AFD4 :                     Obj35_Main:				; XREF: Obj35_Index
   13365/    AFD4 : 5428 0024           		addq.b	#2,$24(a0)
   13366/    AFD8 : 217C 0000 B150      		move.l	#Map_obj14,4(a0)
             AFDE : 0004             
   13367/    AFE0 : 317C 0345 0002      		move.w	#$345,2(a0)
   13368/    AFE6 : 3168 0008 002A      		move.w	8(a0),$2A(a0)
   13369/    AFEC : 117C 0004 0001      		move.b	#4,1(a0)
   13370/    AFF2 : 117C 0001 0018      		move.b	#1,$18(a0)
   13371/    AFF8 : 117C 008B 0020      		move.b	#$8B,$20(a0)
   13372/    AFFE : 117C 0008 0019      		move.b	#8,$19(a0)
   13373/    B004 : 303C 00C8           		move.w	#$C8,d0
   13374/    B008 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play flame sound
   13375/    B00E : 4A28 0028           		tst.b	$28(a0)
   13376/    B012 : 6708                		beq.s	loc_B238
   13377/    B014 : 5428 0024           		addq.b	#2,$24(a0)
   13378/    B018 : 6000 007A           		bra.w	Obj35_Move
   13379/    B01C :                     ; ===========================================================================
   13380/    B01C :                     
   13381/    B01C :                     loc_B238:				; XREF: Obj35_Index
   13382/    B01C : 2268 0030           		movea.l	$30(a0),a1
   13383/    B020 : 3228 0008           		move.w	8(a0),d1
   13384/    B024 : 9268 002A           		sub.w	$2A(a0),d1
   13385/    B028 : 0641 000C           		addi.w	#$C,d1
   13386/    B02C : 3001                		move.w	d1,d0
   13387/    B02E : E248                		lsr.w	#1,d0
   13388/    B030 : 1031 0000           		move.b	(a1,d0.w),d0
   13389/    B034 : 4440                		neg.w	d0
   13390/    B036 : D068 002C           		add.w	$2C(a0),d0
   13391/    B03A : 3400                		move.w	d0,d2
   13392/    B03C : D068 003C           		add.w	$3C(a0),d0
   13393/    B040 : 3140 000C           		move.w	d0,$C(a0)
   13394/    B044 : 0C41 0084           		cmpi.w	#$84,d1
   13395/    B048 : 6448                		bcc.s	loc_B2B0
   13396/    B04A : 06A8 0001 0000      		addi.l	#$10000,8(a0)
             B050 : 0008             
   13397/    B052 : 0C41 0080           		cmpi.w	#$80,d1
   13398/    B056 : 643A                		bcc.s	loc_B2B0
   13399/    B058 : 2028 0008           		move.l	8(a0),d0
   13400/    B05C : 0680 0008 0000      		addi.l	#$80000,d0
   13401/    B062 : 0280 000F FFFF      		andi.l	#$FFFFF,d0
   13402/    B068 : 6628                		bne.s	loc_B2B0
   13403/    B06A : 6100 2802           		bsr.w	SingleObjLoad2
   13404/    B06E : 6622                		bne.s	loc_B2B0
   13405/    B070 : 12BC 0035           		move.b	#$35,0(a1)
   13406/    B074 : 3368 0008 0008      		move.w	8(a0),8(a1)
   13407/    B07A : 3342 002C           		move.w	d2,$2C(a1)
   13408/    B07E : 3368 003C 003C      		move.w	$3C(a0),$3C(a1)
   13409/    B084 : 137C 0001 0028      		move.b	#1,$28(a1)
   13410/    B08A : 2468 0038           		movea.l	$38(a0),a2
   13411/    B08E : 6100 FDF0           		bsr.w	sub_B09C
   13412/    B092 :                     
   13413/    B092 :                     loc_B2B0:
   13414/    B092 : 600C                		bra.s	Obj35_Animate
   13415/    B094 :                     ; ===========================================================================
   13416/    B094 :                     
   13417/    B094 :                     Obj35_Move:				; XREF: Obj35_Index
   13418/    B094 : 3028 002C           		move.w	$2C(a0),d0
   13419/    B098 : D068 003C           		add.w	$3C(a0),d0
   13420/    B09C : 3140 000C           		move.w	d0,$C(a0)
   13421/    B0A0 :                     
   13422/    B0A0 :                     Obj35_Animate:				; XREF: loc_B238
   13423/    B0A0 : 43F9 0000 B0AE      		lea	(Ani_obj35).l,a1
   13424/    B0A6 : 6100 F456           		bsr.w	AnimateSprite
   13425/    B0AA : 6000 2326           		bra.w	DisplaySprite
   13426/    B0AE :                     ; ===========================================================================
   13427/    B0AE :                     Ani_obj35:
   13428/    B0AE :                     	include "_animations/obj35.asm"
(1)    1/    B0AE :                     ; ---------------------------------------------------------------------------
(1)    2/    B0AE :                     ; Animation script - fireball that sits on the	floor (MZ)
(1)    3/    B0AE :                     ; ---------------------------------------------------------------------------
(1)    4/    B0AE : 0002                		dc.w byte_B2CE-Ani_obj35
(1)    5/    B0B0 : 0500 2001 21FF      byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
(1)    6/    B0B6 : (MACRO)              		even
   13429/    B0B6 :                     
   13430/    B0B6 :                     ; ---------------------------------------------------------------------------
   13431/    B0B6 :                     ; Sprite mappings - large moving platforms (MZ)
   13432/    B0B6 :                     ; ---------------------------------------------------------------------------
   13433/    B0B6 :                     Map_obj2F:
   13434/    B0B6 :                     	include "_mappings/obj2F.asm"
(1)    1/    B0B6 :                     ; ---------------------------------------------------------------------------
(1)    2/    B0B6 :                     ; Sprite mappings - large moving platforms (MZ)
(1)    3/    B0B6 :                     ; ---------------------------------------------------------------------------
(1)    4/    B0B6 : 0006                		dc.w byte_B2DA-Map_obj2F
(1)    5/    B0B8 : 0048                		dc.w byte_B31C-Map_obj2F
(1)    6/    B0BA : 007B                		dc.w byte_B34F-Map_obj2F
(1)    7/    B0BC : 0D                  byte_B2DA:	dc.b $D
(1)    8/    B0BD : D806 0057 C0        		dc.b $D8, 6, 0,	$57, $C0
(1)    9/    B0C2 : F005 0053 C0        		dc.b $F0, 5, 0,	$53, $C0
(1)   10/    B0C7 : 000F 0001 C0        		dc.b 0,	$F, 0, 1, $C0
(1)   11/    B0CC : D00F 0027 D0        		dc.b $D0, $F, 0, $27, $D0
(1)   12/    B0D1 : F00D 0037 D0        		dc.b $F0, $D, 0, $37, $D0
(1)   13/    B0D6 : F00F 0001 E0        		dc.b $F0, $F, 0, 1, $E0
(1)   14/    B0DB : D00F 0011 F0        		dc.b $D0, $F, 0, $11, $F0
(1)   15/    B0E0 : D00F 003F 10        		dc.b $D0, $F, 0, $3F, $10
(1)   16/    B0E5 : F00D 004F 10        		dc.b $F0, $D, 0, $4F, $10
(1)   17/    B0EA : F00F 0001 00        		dc.b $F0, $F, 0, 1, 0
(1)   18/    B0EF : 000F 0001 20        		dc.b 0,	$F, 0, 1, $20
(1)   19/    B0F4 : D806 0057 30        		dc.b $D8, 6, 0,	$57, $30
(1)   20/    B0F9 : F005 0053 30        		dc.b $F0, 5, 0,	$53, $30
(1)   21/    B0FE : 0A                  byte_B31C:	dc.b $A
(1)   22/    B0FF : D00F 0027 C0        		dc.b $D0, $F, 0, $27, $C0
(1)   23/    B104 : F00D 0037 C0        		dc.b $F0, $D, 0, $37, $C0
(1)   24/    B109 : 000F 0001 C0        		dc.b 0,	$F, 0, 1, $C0
(1)   25/    B10E : C00F 0027 E0        		dc.b $C0, $F, 0, $27, $E0
(1)   26/    B113 : E00D 0037 E0        		dc.b $E0, $D, 0, $37, $E0
(1)   27/    B118 : F00F 0001 E0        		dc.b $F0, $F, 0, 1, $E0
(1)   28/    B11D : C00F 0011 00        		dc.b $C0, $F, 0, $11, 0
(1)   29/    B122 : E00F 0001 00        		dc.b $E0, $F, 0, 1, 0
(1)   30/    B127 : C00F 003F 20        		dc.b $C0, $F, 0, $3F, $20
(1)   31/    B12C : E00D 004F 20        		dc.b $E0, $D, 0, $4F, $20
(1)   32/    B131 : 06                  byte_B34F:	dc.b 6
(1)   33/    B132 : D00F 0011 E0        		dc.b $D0, $F, 0, $11, $E0
(1)   34/    B137 : F00F 0001 E0        		dc.b $F0, $F, 0, 1, $E0
(1)   35/    B13C : 100F 0001 E0        		dc.b $10, $F, 0, 1, $E0
(1)   36/    B141 : D00F 0011 00        		dc.b $D0, $F, 0, $11, 0
(1)   37/    B146 : F00F 0001 00        		dc.b $F0, $F, 0, 1, 0
(1)   38/    B14B : 100F 0001 00        		dc.b $10, $F, 0, 1, 0
(1)   39/    B150 : (MACRO)              		even
   13435/    B150 :                     
   13436/    B150 :                     ; ---------------------------------------------------------------------------
   13437/    B150 :                     ; Sprite mappings - lava balls (MZ, SLZ)
   13438/    B150 :                     ; ---------------------------------------------------------------------------
   13439/    B150 :                     Map_obj14:
   13440/    B150 :                     	include "_mappings/obj14.asm"
(1)    1/    B150 :                     ; ---------------------------------------------------------------------------
(1)    2/    B150 :                     ; Sprite mappings - lava balls (MZ, SLZ)
(1)    3/    B150 :                     ; ---------------------------------------------------------------------------
(1)    4/    B150 : 000C                		dc.w byte_B37A-Map_obj14
(1)    5/    B152 : 0012                		dc.w byte_B380-Map_obj14
(1)    6/    B154 : 0018                		dc.w byte_B386-Map_obj14
(1)    7/    B156 : 001E                		dc.w byte_B38C-Map_obj14
(1)    8/    B158 : 0024                		dc.w byte_B392-Map_obj14
(1)    9/    B15A : 002A                		dc.w byte_B398-Map_obj14
(1)   10/    B15C : 01                  byte_B37A:	dc.b 1
(1)   11/    B15D : E807 0000 F8        		dc.b $E8, 7, 0,	0, $F8
(1)   12/    B162 : 01                  byte_B380:	dc.b 1
(1)   13/    B163 : E807 0008 F8        		dc.b $E8, 7, 0,	8, $F8
(1)   14/    B168 : 01                  byte_B386:	dc.b 1
(1)   15/    B169 : F006 0010 F8        		dc.b $F0, 6, 0,	$10, $F8
(1)   16/    B16E : 01                  byte_B38C:	dc.b 1
(1)   17/    B16F : F80D 0016 E8        		dc.b $F8, $D, 0, $16, $E8
(1)   18/    B174 : 01                  byte_B392:	dc.b 1
(1)   19/    B175 : F80D 001E E8        		dc.b $F8, $D, 0, $1E, $E8
(1)   20/    B17A : 01                  byte_B398:	dc.b 1
(1)   21/    B17B : F809 0026 F0        		dc.b $F8, 9, 0,	$26, $F0
(1)   22/    B180 : (MACRO)              		even
   13441/    B180 :                     
   13442/    B180 :                     ; ===========================================================================
   13443/    B180 :                     ; ---------------------------------------------------------------------------
   13444/    B180 :                     ; Object 30 - large green glassy blocks	(MZ)
   13445/    B180 :                     ; ---------------------------------------------------------------------------
   13446/    B180 :                     
   13447/    B180 :                     Obj30:					; XREF: Obj_Index
   13448/    B180 : 7000                		moveq	#0,d0
   13449/    B182 : 1028 0024           		move.b	$24(a0),d0
   13450/    B186 : 323B 002C           		move.w	Obj30_Index(pc,d0.w),d1
   13451/    B18A : 4EBB 1028           		jsr	Obj30_Index(pc,d1.w)
   13452/    B18E : 3028 0008           		move.w	8(a0),d0
   13453/    B192 : 0240 FF80           		andi.w	#$FF80,d0
   13454/    B196 : 3238 F700           		move.w	($FFFFF700).w,d1
   13455/    B19A : 0441 0080           		subi.w	#$80,d1
   13456/    B19E : 0241 FF80           		andi.w	#$FF80,d1
   13457/    B1A2 : 9041                		sub.w	d1,d0
   13458/    B1A4 : 0C40 0280           		cmpi.w	#$280,d0
   13459/    B1A8 : 6200 0006           		bhi.w	Obj30_Delete
   13460/    B1AC : 6000 2224           		bra.w	DisplaySprite
   13461/    B1B0 :                     ; ===========================================================================
   13462/    B1B0 :                     
   13463/    B1B0 :                     Obj30_Delete:
   13464/    B1B0 : 6000 225C           		bra.w	DeleteObject
   13465/    B1B4 :                     ; ===========================================================================
   13466/    B1B4 : 0016                Obj30_Index:	dc.w Obj30_Main-Obj30_Index
   13467/    B1B6 : 00B8                		dc.w Obj30_Block012-Obj30_Index
   13468/    B1B8 : 00D0                		dc.w Obj30_Reflect012-Obj30_Index
   13469/    B1BA : 00DE                		dc.w Obj30_Block34-Obj30_Index
   13470/    B1BC : 00F6                		dc.w Obj30_Reflect34-Obj30_Index
   13471/    B1BE :                     
   13472/    B1BE : 0200 00             Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
   13473/    B1C1 : 0400 01             		dc.b 4,	0, 1
   13474/    B1C4 : 0600 02             Obj30_Vars2:	dc.b 6,	0, 2
   13475/    B1C7 : 0800 01             		dc.b 8,	0, 1
   13476/    B1CA :                     ; ===========================================================================
   13477/    B1CA :                     
   13478/    B1CA :                     Obj30_Main:				; XREF: Obj30_Index
   13479/    B1CA : 45F9 0000 B1BE      		lea	(Obj30_Vars1).l,a2
   13480/    B1D0 : 7201                		moveq	#1,d1
   13481/    B1D2 : 117C 0048 0016      		move.b	#$48,$16(a0)
   13482/    B1D8 : 0C28 0003 0028      		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
   13483/    B1DE : 650E                		bcs.s	loc_B40C	; if yes, branch
   13484/    B1E0 : 45F9 0000 B1C4      		lea	(Obj30_Vars2).l,a2
   13485/    B1E6 : 7201                		moveq	#1,d1
   13486/    B1E8 : 117C 0038 0016      		move.b	#$38,$16(a0)
   13487/    B1EE :                     
   13488/    B1EE :                     loc_B40C:
   13489/    B1EE : 2248                		movea.l	a0,a1
   13490/    B1F0 : 6006                		bra.s	Obj30_Load	; load main object
   13491/    B1F2 :                     ; ===========================================================================
   13492/    B1F2 :                     
   13493/    B1F2 :                     Obj30_Loop:
   13494/    B1F2 : 6100 267A           		bsr.w	SingleObjLoad2
   13495/    B1F6 : 6668                		bne.s	loc_B480
   13496/    B1F8 :                     
   13497/    B1F8 :                     Obj30_Load:				; XREF: Obj30_Main
   13498/    B1F8 : 135A 0024           		move.b	(a2)+,$24(a1)
   13499/    B1FC : 12BC 0030           		move.b	#$30,0(a1)
   13500/    B200 : 3368 0008 0008      		move.w	8(a0),8(a1)
   13501/    B206 : 101A                		move.b	(a2)+,d0
   13502/    B208 : 4880                		ext.w	d0
   13503/    B20A : D068 000C           		add.w	$C(a0),d0
   13504/    B20E : 3340 000C           		move.w	d0,$C(a1)
   13505/    B212 : 237C 0000 B3DA      		move.l	#Map_obj30,4(a1)
             B218 : 0004             
   13506/    B21A : 337C C38E 0002      		move.w	#$C38E,2(a1)
   13507/    B220 : 137C 0004 0001      		move.b	#4,1(a1)
   13508/    B226 : 3369 000C 0030      		move.w	$C(a1),$30(a1)
   13509/    B22C : 1368 0028 0028      		move.b	$28(a0),$28(a1)
   13510/    B232 : 137C 0020 0019      		move.b	#$20,$19(a1)
   13511/    B238 : 137C 0004 0018      		move.b	#4,$18(a1)
   13512/    B23E : 135A 001A           		move.b	(a2)+,$1A(a1)
   13513/    B242 : 2348 003C           		move.l	a0,$3C(a1)
   13514/    B246 : 51C9 FFAA           		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
   13515/    B24A :                     
   13516/    B24A : 137C 0010 0019      		move.b	#$10,$19(a1)
   13517/    B250 : 137C 0003 0018      		move.b	#3,$18(a1)
   13518/    B256 : 5029 0028           		addq.b	#8,$28(a1)
   13519/    B25A : 0229 000F 0028      		andi.b	#$F,$28(a1)
   13520/    B260 :                     
   13521/    B260 :                     loc_B480:
   13522/    B260 : 317C 0090 0032      		move.w	#$90,$32(a0)
   13523/    B266 : 08E8 0004 0001      		bset	#4,1(a0)
   13524/    B26C :                     
   13525/    B26C :                     Obj30_Block012:				; XREF: Obj30_Index
   13526/    B26C : 6100 0050           		bsr.w	Obj30_Types
   13527/    B270 : 323C 002B           		move.w	#$2B,d1
   13528/    B274 : 343C 0048           		move.w	#$48,d2
   13529/    B278 : 363C 0049           		move.w	#$49,d3
   13530/    B27C : 3828 0008           		move.w	8(a0),d4
   13531/    B280 : 6000 4510           		bra.w	SolidObject
   13532/    B284 :                     ; ===========================================================================
   13533/    B284 :                     
   13534/    B284 :                     Obj30_Reflect012:			; XREF: Obj30_Index
   13535/    B284 : 2268 003C           		movea.l	$3C(a0),a1
   13536/    B288 : 3169 0032 0032      		move.w	$32(a1),$32(a0)
   13537/    B28E : 6000 002E           		bra.w	Obj30_Types
   13538/    B292 :                     ; ===========================================================================
   13539/    B292 :                     
   13540/    B292 :                     Obj30_Block34:				; XREF: Obj30_Index
   13541/    B292 : 6100 002A           		bsr.w	Obj30_Types
   13542/    B296 : 323C 002B           		move.w	#$2B,d1
   13543/    B29A : 343C 0038           		move.w	#$38,d2
   13544/    B29E : 363C 0039           		move.w	#$39,d3
   13545/    B2A2 : 3828 0008           		move.w	8(a0),d4
   13546/    B2A6 : 6000 44EA           		bra.w	SolidObject
   13547/    B2AA :                     ; ===========================================================================
   13548/    B2AA :                     
   13549/    B2AA :                     Obj30_Reflect34:			; XREF: Obj30_Index
   13550/    B2AA : 2268 003C           		movea.l	$3C(a0),a1
   13551/    B2AE : 3169 0032 0032      		move.w	$32(a1),$32(a0)
   13552/    B2B4 : 3169 000C 0030      		move.w	$C(a1),$30(a0)
   13553/    B2BA : 6000 0002           		bra.w	*+4
   13554/    B2BE :                     
   13555/    B2BE :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   13556/    B2BE :                     
   13557/    B2BE :                     
   13558/    B2BE :                     Obj30_Types:				; XREF: Obj30_Block012; et al
   13559/    B2BE : 7000                		moveq	#0,d0
   13560/    B2C0 : 1028 0028           		move.b	$28(a0),d0
   13561/    B2C4 : 0240 0007           		andi.w	#7,d0
   13562/    B2C8 : D040                		add.w	d0,d0
   13563/    B2CA : 323B 0006           		move.w	Obj30_TypeIndex(pc,d0.w),d1
   13564/    B2CE : 4EFB 1002           		jmp	Obj30_TypeIndex(pc,d1.w)
   13565/    B2D2 :                     ; End of function Obj30_Types
   13566/    B2D2 :                     
   13567/    B2D2 :                     ; ===========================================================================
   13568/    B2D2 : 000A                Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
   13569/    B2D4 : 000C                		dc.w Obj30_Type01-Obj30_TypeIndex
   13570/    B2D6 : 0016                		dc.w Obj30_Type02-Obj30_TypeIndex
   13571/    B2D8 : 0038                		dc.w Obj30_Type03-Obj30_TypeIndex
   13572/    B2DA : 00BE                		dc.w Obj30_Type04-Obj30_TypeIndex
   13573/    B2DC :                     ; ===========================================================================
   13574/    B2DC :                     
   13575/    B2DC :                     Obj30_Type00:				; XREF: Obj30_TypeIndex
   13576/    B2DC : 4E75                		rts	
   13577/    B2DE :                     ; ===========================================================================
   13578/    B2DE :                     
   13579/    B2DE :                     Obj30_Type01:				; XREF: Obj30_TypeIndex
   13580/    B2DE : 1038 FE70           		move.b	($FFFFFE70).w,d0
   13581/    B2E2 : 323C 0040           		move.w	#$40,d1
   13582/    B2E6 : 600C                		bra.s	loc_B514
   13583/    B2E8 :                     ; ===========================================================================
   13584/    B2E8 :                     
   13585/    B2E8 :                     Obj30_Type02:				; XREF: Obj30_TypeIndex
   13586/    B2E8 : 1038 FE70           		move.b	($FFFFFE70).w,d0
   13587/    B2EC : 323C 0040           		move.w	#$40,d1
   13588/    B2F0 : 4440                		neg.w	d0
   13589/    B2F2 : D041                		add.w	d1,d0
   13590/    B2F4 :                     
   13591/    B2F4 :                     loc_B514:				; XREF: Obj30_Type01
   13592/    B2F4 : 0828 0003 0028      		btst	#3,$28(a0)
   13593/    B2FA : 670A                		beq.s	loc_B526
   13594/    B2FC : 4440                		neg.w	d0
   13595/    B2FE : D041                		add.w	d1,d0
   13596/    B300 : E208                		lsr.b	#1,d0
   13597/    B302 : 0640 0020           		addi.w	#$20,d0
   13598/    B306 :                     
   13599/    B306 :                     loc_B526:
   13600/    B306 : 6000 00C6           		bra.w	loc_B5EE
   13601/    B30A :                     ; ===========================================================================
   13602/    B30A :                     
   13603/    B30A :                     Obj30_Type03:				; XREF: Obj30_TypeIndex
   13604/    B30A : 0828 0003 0028      		btst	#3,$28(a0)
   13605/    B310 : 670C                		beq.s	loc_B53E
   13606/    B312 : 1038 FE70           		move.b	($FFFFFE70).w,d0
   13607/    B316 : 0440 0010           		subi.w	#$10,d0
   13608/    B31A : 6000 00B2           		bra.w	loc_B5EE
   13609/    B31E :                     ; ===========================================================================
   13610/    B31E :                     
   13611/    B31E :                     loc_B53E:
   13612/    B31E : 0828 0003 0022      		btst	#3,$22(a0)
   13613/    B324 : 6608                		bne.s	loc_B54E
   13614/    B326 : 08A8 0000 0034      		bclr	#0,$34(a0)
   13615/    B32C : 6034                		bra.s	loc_B582
   13616/    B32E :                     ; ===========================================================================
   13617/    B32E :                     
   13618/    B32E :                     loc_B54E:
   13619/    B32E : 4A28 0034           		tst.b	$34(a0)
   13620/    B332 : 662E                		bne.s	loc_B582
   13621/    B334 : 117C 0001 0034      		move.b	#1,$34(a0)
   13622/    B33A : 08E8 0000 0035      		bset	#0,$35(a0)
   13623/    B340 : 6720                		beq.s	loc_B582
   13624/    B342 : 08E8 0007 0034      		bset	#7,$34(a0)
   13625/    B348 : 317C 0010 0036      		move.w	#$10,$36(a0)
   13626/    B34E : 117C 000A 0038      		move.b	#$A,$38(a0)
   13627/    B354 : 0C68 0040 0032      		cmpi.w	#$40,$32(a0)
   13628/    B35A : 6606                		bne.s	loc_B582
   13629/    B35C : 317C 0040 0036      		move.w	#$40,$36(a0)
   13630/    B362 :                     
   13631/    B362 :                     loc_B582:
   13632/    B362 : 4A28 0034           		tst.b	$34(a0)
   13633/    B366 : 6A22                		bpl.s	loc_B5AA
   13634/    B368 : 4A28 0038           		tst.b	$38(a0)
   13635/    B36C : 6706                		beq.s	loc_B594
   13636/    B36E : 5328 0038           		subq.b	#1,$38(a0)
   13637/    B372 : 6616                		bne.s	loc_B5AA
   13638/    B374 :                     
   13639/    B374 :                     loc_B594:
   13640/    B374 : 4A68 0032           		tst.w	$32(a0)
   13641/    B378 : 670A                		beq.s	loc_B5A4
   13642/    B37A : 5368 0032           		subq.w	#1,$32(a0)
   13643/    B37E : 5368 0036           		subq.w	#1,$36(a0)
   13644/    B382 : 6606                		bne.s	loc_B5AA
   13645/    B384 :                     
   13646/    B384 :                     loc_B5A4:
   13647/    B384 : 08A8 0007 0034      		bclr	#7,$34(a0)
   13648/    B38A :                     
   13649/    B38A :                     loc_B5AA:
   13650/    B38A : 3028 0032           		move.w	$32(a0),d0
   13651/    B38E : 603E                		bra.s	loc_B5EE
   13652/    B390 :                     ; ===========================================================================
   13653/    B390 :                     
   13654/    B390 :                     Obj30_Type04:				; XREF: Obj30_TypeIndex
   13655/    B390 : 0828 0003 0028      		btst	#3,$28(a0)
   13656/    B396 : 670A                		beq.s	Obj30_ChkSwitch
   13657/    B398 : 1038 FE70           		move.b	($FFFFFE70).w,d0
   13658/    B39C : 0440 0010           		subi.w	#$10,d0
   13659/    B3A0 : 602C                		bra.s	loc_B5EE
   13660/    B3A2 :                     ; ===========================================================================
   13661/    B3A2 :                     
   13662/    B3A2 :                     Obj30_ChkSwitch:			; XREF: Obj30_Type04
   13663/    B3A2 : 4A28 0034           		tst.b	$34(a0)
   13664/    B3A6 : 6618                		bne.s	loc_B5E0
   13665/    B3A8 : 45F8 F7E0           		lea	($FFFFF7E0).w,a2
   13666/    B3AC : 7000                		moveq	#0,d0
   13667/    B3AE : 1028 0028           		move.b	$28(a0),d0	; load object type number
   13668/    B3B2 : E848                		lsr.w	#4,d0		; read only the	first nybble
   13669/    B3B4 : 4A32 0000           		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
   13670/    B3B8 : 6710                		beq.s	loc_B5EA	; if not, branch
   13671/    B3BA : 117C 0001 0034      		move.b	#1,$34(a0)
   13672/    B3C0 :                     
   13673/    B3C0 :                     loc_B5E0:
   13674/    B3C0 : 4A68 0032           		tst.w	$32(a0)
   13675/    B3C4 : 6704                		beq.s	loc_B5EA
   13676/    B3C6 : 5568 0032           		subq.w	#2,$32(a0)
   13677/    B3CA :                     
   13678/    B3CA :                     loc_B5EA:
   13679/    B3CA : 3028 0032           		move.w	$32(a0),d0
   13680/    B3CE :                     
   13681/    B3CE :                     loc_B5EE:
   13682/    B3CE : 3228 0030           		move.w	$30(a0),d1
   13683/    B3D2 : 9240                		sub.w	d0,d1
   13684/    B3D4 : 3141 000C           		move.w	d1,$C(a0)
   13685/    B3D8 : 4E75                		rts	
   13686/    B3DA :                     ; ===========================================================================
   13687/    B3DA :                     ; ---------------------------------------------------------------------------
   13688/    B3DA :                     ; Sprite mappings - large green	glassy blocks (MZ)
   13689/    B3DA :                     ; ---------------------------------------------------------------------------
   13690/    B3DA :                     Map_obj30:
   13691/    B3DA :                     	include "_mappings/obj30.asm"
(1)    1/    B3DA :                     ; ---------------------------------------------------------------------------
(1)    2/    B3DA :                     ; Sprite mappings - large green	glassy blocks (MZ)
(1)    3/    B3DA :                     ; ---------------------------------------------------------------------------
(1)    4/    B3DA : 0006                		dc.w byte_B600-Map_obj30
(1)    5/    B3DC : 0043                		dc.w byte_B63D-Map_obj30
(1)    6/    B3DE : 004E                		dc.w byte_B648-Map_obj30
(1)    7/    B3E0 : 0C                  byte_B600:	dc.b $C
(1)    8/    B3E1 : B80C 0000 E0        		dc.b $B8, $C, 0, 0, $E0
(1)    9/    B3E6 : B80C 0800 00        		dc.b $B8, $C, 8, 0, 0
(1)   10/    B3EB : C00F 0004 E0        		dc.b $C0, $F, 0, 4, $E0
(1)   11/    B3F0 : C00F 0804 00        		dc.b $C0, $F, 8, 4, 0
(1)   12/    B3F5 : E00F 0004 E0        		dc.b $E0, $F, 0, 4, $E0
(1)   13/    B3FA : E00F 0804 00        		dc.b $E0, $F, 8, 4, 0
(1)   14/    B3FF : 000F 0004 E0        		dc.b 0,	$F, 0, 4, $E0
(1)   15/    B404 : 000F 0804 00        		dc.b 0,	$F, 8, 4, 0
(1)   16/    B409 : 200F 0004 E0        		dc.b $20, $F, 0, 4, $E0
(1)   17/    B40E : 200F 0804 00        		dc.b $20, $F, 8, 4, 0
(1)   18/    B413 : 400C 1000 E0        		dc.b $40, $C, $10, 0, $E0
(1)   19/    B418 : 400C 1800 00        		dc.b $40, $C, $18, 0, 0
(1)   20/    B41D : 02                  byte_B63D:	dc.b 2
(1)   21/    B41E : 0806 0014 F0        		dc.b 8,	6, 0, $14, $F0
(1)   22/    B423 : 0006 0014 00        		dc.b 0,	6, 0, $14, 0
(1)   23/    B428 : 0A                  byte_B648:	dc.b $A
(1)   24/    B429 : C80C 0000 E0        		dc.b $C8, $C, 0, 0, $E0
(1)   25/    B42E : C80C 0800 00        		dc.b $C8, $C, 8, 0, 0
(1)   26/    B433 : D00F 0004 E0        		dc.b $D0, $F, 0, 4, $E0
(1)   27/    B438 : D00F 0804 00        		dc.b $D0, $F, 8, 4, 0
(1)   28/    B43D : F00F 0004 E0        		dc.b $F0, $F, 0, 4, $E0
(1)   29/    B442 : F00F 0804 00        		dc.b $F0, $F, 8, 4, 0
(1)   30/    B447 : 100F 0004 E0        		dc.b $10, $F, 0, 4, $E0
(1)   31/    B44C : 100F 0804 00        		dc.b $10, $F, 8, 4, 0
(1)   32/    B451 : 300C 1000 E0        		dc.b $30, $C, $10, 0, $E0
(1)   33/    B456 : 300C 1800 00        		dc.b $30, $C, $18, 0, 0
(1)   34/    B45B : (MACRO)              		even
(1)   34/    B45B : 00                                          dc.b 0 ;ds.b 1 
   13692/    B45C :                     
   13693/    B45C :                     ; ===========================================================================
   13694/    B45C :                     ; ---------------------------------------------------------------------------
   13695/    B45C :                     ; Object 31 - stomping metal blocks on chains (MZ)
   13696/    B45C :                     ; ---------------------------------------------------------------------------
   13697/    B45C :                     
   13698/    B45C :                     Obj31:					; XREF: Obj_Index
   13699/    B45C : 7000                		moveq	#0,d0
   13700/    B45E : 1028 0024           		move.b	$24(a0),d0
   13701/    B462 : 323B 0006           		move.w	Obj31_Index(pc,d0.w),d1
   13702/    B466 : 4EFB 1002           		jmp	Obj31_Index(pc,d1.w)
   13703/    B46A :                     ; ===========================================================================
   13704/    B46A : 0028                Obj31_Index:	dc.w Obj31_Main-Obj31_Index
   13705/    B46C : 010C                		dc.w loc_B798-Obj31_Index
   13706/    B46E : 0172                		dc.w loc_B7FE-Obj31_Index
   13707/    B470 : 0184                		dc.w Obj31_Display2-Obj31_Index
   13708/    B472 : 0156                		dc.w loc_B7E2-Obj31_Index
   13709/    B474 :                     
   13710/    B474 : 0000                Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
   13711/    B476 : 0100                		dc.b 1,	0
   13712/    B478 :                     
   13713/    B478 : 0200 00             Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
   13714/    B47B : 041C 01             		dc.b 4,	$1C, 1		; routine number, y-position, frame number
   13715/    B47E : 08CC 03             		dc.b 8,	$CC, 3
   13716/    B481 : 06F0 02             		dc.b 6,	$F0, 2
   13717/    B484 :                     
   13718/    B484 : 7000 A000           word_B6A4:	dc.w $7000, $A000
   13719/    B488 : 5000 7800           		dc.w $5000, $7800
   13720/    B48C : 3800 5800           		dc.w $3800, $5800
   13721/    B490 : B800                		dc.w $B800
   13722/    B492 :                     ; ===========================================================================
   13723/    B492 :                     
   13724/    B492 :                     Obj31_Main:				; XREF: Obj31_Index
   13725/    B492 : 7000                		moveq	#0,d0
   13726/    B494 : 1028 0028           		move.b	$28(a0),d0
   13727/    B498 : 6A14                		bpl.s	loc_B6CE
   13728/    B49A : 0240 007F           		andi.w	#$7F,d0
   13729/    B49E : D040                		add.w	d0,d0
   13730/    B4A0 : 45FB 00D2           		lea	Obj31_SwchNums(pc,d0.w),a2
   13731/    B4A4 : 115A 003A           		move.b	(a2)+,$3A(a0)
   13732/    B4A8 : 101A                		move.b	(a2)+,d0
   13733/    B4AA : 1140 0028           		move.b	d0,$28(a0)
   13734/    B4AE :                     
   13735/    B4AE :                     loc_B6CE:
   13736/    B4AE : 0200 000F           		andi.b	#$F,d0
   13737/    B4B2 : D040                		add.w	d0,d0
   13738/    B4B4 : 343B 00CE           		move.w	word_B6A4(pc,d0.w),d2
   13739/    B4B8 : 4A40                		tst.w	d0
   13740/    B4BA : 6604                		bne.s	loc_B6E0
   13741/    B4BC : 3142 0032           		move.w	d2,$32(a0)
   13742/    B4C0 :                     
   13743/    B4C0 :                     loc_B6E0:
   13744/    B4C0 : 45F9 0000 B478      		lea	(Obj31_Var).l,a2
   13745/    B4C6 : 2248                		movea.l	a0,a1
   13746/    B4C8 : 7203                		moveq	#3,d1
   13747/    B4CA : 6008                		bra.s	Obj31_MakeStomper
   13748/    B4CC :                     ; ===========================================================================
   13749/    B4CC :                     
   13750/    B4CC :                     Obj31_Loop:
   13751/    B4CC : 6100 23A0           		bsr.w	SingleObjLoad2
   13752/    B4D0 : 6600 0084           		bne.w	Obj31_SetSize
   13753/    B4D4 :                     
   13754/    B4D4 :                     Obj31_MakeStomper:			; XREF: Obj31_Main
   13755/    B4D4 : 135A 0024           		move.b	(a2)+,$24(a1)
   13756/    B4D8 : 12BC 0031           		move.b	#$31,0(a1)
   13757/    B4DC : 3368 0008 0008      		move.w	8(a0),8(a1)
   13758/    B4E2 : 101A                		move.b	(a2)+,d0
   13759/    B4E4 : 4880                		ext.w	d0
   13760/    B4E6 : D068 000C           		add.w	$C(a0),d0
   13761/    B4EA : 3340 000C           		move.w	d0,$C(a1)
   13762/    B4EE : 237C 0000 B92A      		move.l	#Map_obj31,4(a1)
             B4F4 : 0004             
   13763/    B4F6 : 337C 0300 0002      		move.w	#$300,2(a1)
   13764/    B4FC : 137C 0004 0001      		move.b	#4,1(a1)
   13765/    B502 : 3369 000C 0030      		move.w	$C(a1),$30(a1)
   13766/    B508 : 1368 0028 0028      		move.b	$28(a0),$28(a1)
   13767/    B50E : 137C 0010 0019      		move.b	#$10,$19(a1)
   13768/    B514 : 3342 0034           		move.w	d2,$34(a1)
   13769/    B518 : 137C 0004 0018      		move.b	#4,$18(a1)
   13770/    B51E : 135A 001A           		move.b	(a2)+,$1A(a1)
   13771/    B522 : 0C29 0001 001A      		cmpi.b	#1,$1A(a1)
   13772/    B528 : 661E                		bne.s	loc_B76A
   13773/    B52A : 5341                		subq.w	#1,d1
   13774/    B52C : 1028 0028           		move.b	$28(a0),d0
   13775/    B530 : 0240 00F0           		andi.w	#$F0,d0
   13776/    B534 : 0C40 0020           		cmpi.w	#$20,d0
   13777/    B538 : 679A                		beq.s	Obj31_MakeStomper
   13778/    B53A : 137C 0038 0019      		move.b	#$38,$19(a1)
   13779/    B540 : 137C 0090 0020      		move.b	#$90,$20(a1)
   13780/    B546 : 5241                		addq.w	#1,d1
   13781/    B548 :                     
   13782/    B548 :                     loc_B76A:
   13783/    B548 : 2348 003C           		move.l	a0,$3C(a1)
   13784/    B54C : 51C9 FF7E           		dbf	d1,Obj31_Loop
   13785/    B550 :                     
   13786/    B550 : 137C 0003 0018      		move.b	#3,$18(a1)
   13787/    B556 :                     
   13788/    B556 :                     Obj31_SetSize:
   13789/    B556 : 7000                		moveq	#0,d0
   13790/    B558 : 1028 0028           		move.b	$28(a0),d0
   13791/    B55C : E648                		lsr.w	#3,d0
   13792/    B55E : 0200 000E           		andi.b	#$E,d0
   13793/    B562 : 45FB 000C           		lea	Obj31_Var2(pc,d0.w),a2
   13794/    B566 : 115A 0019           		move.b	(a2)+,$19(a0)
   13795/    B56A : 115A 001A           		move.b	(a2)+,$1A(a0)
   13796/    B56E : 6006                		bra.s	loc_B798
   13797/    B570 :                     ; ===========================================================================
   13798/    B570 : 3800                Obj31_Var2:	dc.b $38, 0		; width, frame number
   13799/    B572 : 3009                		dc.b $30, 9
   13800/    B574 : 100A                		dc.b $10, $A
   13801/    B576 :                     ; ===========================================================================
   13802/    B576 :                     
   13803/    B576 :                     loc_B798:				; XREF: Obj31_Index
   13804/    B576 : 6100 009A           		bsr.w	Obj31_Types
   13805/    B57A : 31E8 000C F7A4      		move.w	$C(a0),($FFFFF7A4).w
   13806/    B580 : 7200                		moveq	#0,d1
   13807/    B582 : 1228 0019           		move.b	$19(a0),d1
   13808/    B586 : 0641 000B           		addi.w	#$B,d1
   13809/    B58A : 343C 000C           		move.w	#$C,d2
   13810/    B58E : 363C 000D           		move.w	#$D,d3
   13811/    B592 : 3828 0008           		move.w	8(a0),d4
   13812/    B596 : 6100 41FA           		bsr.w	SolidObject
   13813/    B59A : 0828 0003 0022      		btst	#3,$22(a0)
   13814/    B5A0 : 6716                		beq.s	Obj31_Display
   13815/    B5A2 : 0C28 0010 0032      		cmpi.b	#$10,$32(a0)
   13816/    B5A8 : 640E                		bcc.s	Obj31_Display
   13817/    B5AA : 2448                		movea.l	a0,a2
   13818/    B5AC : 41F8 D000           		lea	($FFFFD000).w,a0
   13819/    B5B0 : 4EB9 0001 AE60      		jsr	KillSonic
   13820/    B5B6 : 204A                		movea.l	a2,a0
   13821/    B5B8 :                     
   13822/    B5B8 :                     Obj31_Display:
   13823/    B5B8 : 6100 1E18           		bsr.w	DisplaySprite
   13824/    B5BC : 6000 0034           		bra.w	Obj31_ChkDel
   13825/    B5C0 :                     ; ===========================================================================
   13826/    B5C0 :                     
   13827/    B5C0 :                     loc_B7E2:				; XREF: Obj31_Index
   13828/    B5C0 : 117C 0080 0016      		move.b	#$80,$16(a0)
   13829/    B5C6 : 08E8 0004 0001      		bset	#4,1(a0)
   13830/    B5CC : 2268 003C           		movea.l	$3C(a0),a1
   13831/    B5D0 : 1029 0032           		move.b	$32(a1),d0
   13832/    B5D4 : EA08                		lsr.b	#5,d0
   13833/    B5D6 : 5600                		addq.b	#3,d0
   13834/    B5D8 : 1140 001A           		move.b	d0,$1A(a0)
   13835/    B5DC :                     
   13836/    B5DC :                     loc_B7FE:				; XREF: Obj31_Index
   13837/    B5DC : 2268 003C           		movea.l	$3C(a0),a1
   13838/    B5E0 : 7000                		moveq	#0,d0
   13839/    B5E2 : 1029 0032           		move.b	$32(a1),d0
   13840/    B5E6 : D068 0030           		add.w	$30(a0),d0
   13841/    B5EA : 3140 000C           		move.w	d0,$C(a0)
   13842/    B5EE :                     
   13843/    B5EE :                     Obj31_Display2:				; XREF: Obj31_Index
   13844/    B5EE : 6100 1DE2           		bsr.w	DisplaySprite
   13845/    B5F2 :                     
   13846/    B5F2 :                     Obj31_ChkDel:				; XREF: Obj31_Display
   13847/    B5F2 : 3028 0008           		move.w	8(a0),d0
   13848/    B5F6 : 0240 FF80           		andi.w	#$FF80,d0
   13849/    B5FA : 3238 F700           		move.w	($FFFFF700).w,d1
   13850/    B5FE : 0441 0080           		subi.w	#$80,d1
   13851/    B602 : 0241 FF80           		andi.w	#$FF80,d1
   13852/    B606 : 9041                		sub.w	d1,d0
   13853/    B608 : 0C40 0280           		cmpi.w	#$280,d0
   13854/    B60C : 6200 1E00           		bhi.w	DeleteObject
   13855/    B610 : 4E75                		rts	
   13856/    B612 :                     ; ===========================================================================
   13857/    B612 :                     
   13858/    B612 :                     Obj31_Types:				; XREF: loc_B798
   13859/    B612 : 1028 0028           		move.b	$28(a0),d0
   13860/    B616 : 0240 000F           		andi.w	#$F,d0
   13861/    B61A : D040                		add.w	d0,d0
   13862/    B61C : 323B 0006           		move.w	Obj31_TypeIndex(pc,d0.w),d1
   13863/    B620 : 4EFB 1002           		jmp	Obj31_TypeIndex(pc,d1.w)
   13864/    B624 :                     ; ===========================================================================
   13865/    B624 : 000E                Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
   13866/    B626 : 00AA                		dc.w Obj31_Type01-Obj31_TypeIndex
   13867/    B628 : 00AA                		dc.w Obj31_Type01-Obj31_TypeIndex
   13868/    B62A : 013A                		dc.w Obj31_Type03-Obj31_TypeIndex
   13869/    B62C : 00AA                		dc.w Obj31_Type01-Obj31_TypeIndex
   13870/    B62E : 013A                		dc.w Obj31_Type03-Obj31_TypeIndex
   13871/    B630 : 00AA                		dc.w Obj31_Type01-Obj31_TypeIndex
   13872/    B632 :                     ; ===========================================================================
   13873/    B632 :                     
   13874/    B632 :                     Obj31_Type00:				; XREF: Obj31_TypeIndex
   13875/    B632 : 45F8 F7E0           		lea	($FFFFF7E0).w,a2 ; load	switch statuses
   13876/    B636 : 7000                		moveq	#0,d0
   13877/    B638 : 1028 003A           		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
   13878/    B63C : 4A32 0000           		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
   13879/    B640 : 6744                		beq.s	loc_B8A8	; if not, branch
   13880/    B642 : 4A78 F7A4           		tst.w	($FFFFF7A4).w
   13881/    B646 : 6A08                		bpl.s	loc_B872
   13882/    B648 : 0C28 0010 0032      		cmpi.b	#$10,$32(a0)
   13883/    B64E : 672E                		beq.s	loc_B8A0
   13884/    B650 :                     
   13885/    B650 :                     loc_B872:
   13886/    B650 : 4A68 0032           		tst.w	$32(a0)
   13887/    B654 : 6728                		beq.s	loc_B8A0
   13888/    B656 : 1038 FE0F           		move.b	($FFFFFE0F).w,d0
   13889/    B65A : 0200 000F           		andi.b	#$F,d0
   13890/    B65E : 6610                		bne.s	loc_B892
   13891/    B660 : 4A28 0001           		tst.b	1(a0)
   13892/    B664 : 6A0A                		bpl.s	loc_B892
   13893/    B666 : 303C 00C7           		move.w	#$C7,d0
   13894/    B66A : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play rising chain sound
   13895/    B670 :                     
   13896/    B670 :                     loc_B892:
   13897/    B670 : 0468 0080 0032      		subi.w	#$80,$32(a0)
   13898/    B676 : 6446                		bcc.s	Obj31_Restart
   13899/    B678 : 317C 0000 0032      		move.w	#0,$32(a0)
   13900/    B67E :                     
   13901/    B67E :                     loc_B8A0:
   13902/    B67E : 317C 0000 0012      		move.w	#0,$12(a0)
   13903/    B684 : 6038                		bra.s	Obj31_Restart
   13904/    B686 :                     ; ===========================================================================
   13905/    B686 :                     
   13906/    B686 :                     loc_B8A8:				; XREF: Obj31_Type00
   13907/    B686 : 3228 0034           		move.w	$34(a0),d1
   13908/    B68A : B268 0032           		cmp.w	$32(a0),d1
   13909/    B68E : 672E                		beq.s	Obj31_Restart
   13910/    B690 : 3028 0012           		move.w	$12(a0),d0
   13911/    B694 : 0668 0070 0012      		addi.w	#$70,$12(a0)	; make object fall
   13912/    B69A : D168 0032           		add.w	d0,$32(a0)
   13913/    B69E : B268 0032           		cmp.w	$32(a0),d1
   13914/    B6A2 : 621A                		bhi.s	Obj31_Restart
   13915/    B6A4 : 3141 0032           		move.w	d1,$32(a0)
   13916/    B6A8 : 317C 0000 0012      		move.w	#0,$12(a0)	; stop object falling
   13917/    B6AE : 4A28 0001           		tst.b	1(a0)
   13918/    B6B2 : 6A0A                		bpl.s	Obj31_Restart
   13919/    B6B4 : 303C 00BD           		move.w	#$BD,d0
   13920/    B6B8 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play stomping sound
   13921/    B6BE :                     
   13922/    B6BE :                     Obj31_Restart:
   13923/    B6BE : 7000                		moveq	#0,d0
   13924/    B6C0 : 1028 0032           		move.b	$32(a0),d0
   13925/    B6C4 : D068 0030           		add.w	$30(a0),d0
   13926/    B6C8 : 3140 000C           		move.w	d0,$C(a0)
   13927/    B6CC : 4E75                		rts	
   13928/    B6CE :                     ; ===========================================================================
   13929/    B6CE :                     
   13930/    B6CE :                     Obj31_Type01:				; XREF: Obj31_TypeIndex
   13931/    B6CE : 4A68 0036           		tst.w	$36(a0)
   13932/    B6D2 : 6742                		beq.s	loc_B938
   13933/    B6D4 : 4A68 0038           		tst.w	$38(a0)
   13934/    B6D8 : 6706                		beq.s	loc_B902
   13935/    B6DA : 5368 0038           		subq.w	#1,$38(a0)
   13936/    B6DE : 607A                		bra.s	loc_B97C
   13937/    B6E0 :                     ; ===========================================================================
   13938/    B6E0 :                     
   13939/    B6E0 :                     loc_B902:
   13940/    B6E0 : 1038 FE0F           		move.b	($FFFFFE0F).w,d0
   13941/    B6E4 : 0200 000F           		andi.b	#$F,d0
   13942/    B6E8 : 6610                		bne.s	loc_B91C
   13943/    B6EA : 4A28 0001           		tst.b	1(a0)
   13944/    B6EE : 6A0A                		bpl.s	loc_B91C
   13945/    B6F0 : 303C 00C7           		move.w	#$C7,d0
   13946/    B6F4 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play rising chain sound
   13947/    B6FA :                     
   13948/    B6FA :                     loc_B91C:
   13949/    B6FA : 0468 0080 0032      		subi.w	#$80,$32(a0)
   13950/    B700 : 6458                		bcc.s	loc_B97C
   13951/    B702 : 317C 0000 0032      		move.w	#0,$32(a0)
   13952/    B708 : 317C 0000 0012      		move.w	#0,$12(a0)
   13953/    B70E : 317C 0000 0036      		move.w	#0,$36(a0)
   13954/    B714 : 6044                		bra.s	loc_B97C
   13955/    B716 :                     ; ===========================================================================
   13956/    B716 :                     
   13957/    B716 :                     loc_B938:				; XREF: Obj31_Type01
   13958/    B716 : 3228 0034           		move.w	$34(a0),d1
   13959/    B71A : B268 0032           		cmp.w	$32(a0),d1
   13960/    B71E : 673A                		beq.s	loc_B97C
   13961/    B720 : 3028 0012           		move.w	$12(a0),d0
   13962/    B724 : 0668 0070 0012      		addi.w	#$70,$12(a0)	; make object fall
   13963/    B72A : D168 0032           		add.w	d0,$32(a0)
   13964/    B72E : B268 0032           		cmp.w	$32(a0),d1
   13965/    B732 : 6226                		bhi.s	loc_B97C
   13966/    B734 : 3141 0032           		move.w	d1,$32(a0)
   13967/    B738 : 317C 0000 0012      		move.w	#0,$12(a0)	; stop object falling
   13968/    B73E : 317C 0001 0036      		move.w	#1,$36(a0)
   13969/    B744 : 317C 003C 0038      		move.w	#$3C,$38(a0)
   13970/    B74A : 4A28 0001           		tst.b	1(a0)
   13971/    B74E : 6A0A                		bpl.s	loc_B97C
   13972/    B750 : 303C 00BD           		move.w	#$BD,d0
   13973/    B754 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play stomping sound
   13974/    B75A :                     
   13975/    B75A :                     loc_B97C:
   13976/    B75A : 6000 FF62           		bra.w	Obj31_Restart
   13977/    B75E :                     ; ===========================================================================
   13978/    B75E :                     
   13979/    B75E :                     Obj31_Type03:				; XREF: Obj31_TypeIndex
   13980/    B75E : 3038 D008           		move.w	($FFFFD008).w,d0
   13981/    B762 : 9068 0008           		sub.w	8(a0),d0
   13982/    B766 : 6402                		bcc.s	loc_B98C
   13983/    B768 : 4440                		neg.w	d0
   13984/    B76A :                     
   13985/    B76A :                     loc_B98C:
   13986/    B76A : 0C40 0090           		cmpi.w	#$90,d0
   13987/    B76E : 6404                		bcc.s	loc_B996
   13988/    B770 : 5228 0028           		addq.b	#1,$28(a0)
   13989/    B774 :                     
   13990/    B774 :                     loc_B996:
   13991/    B774 : 6000 FF48           		bra.w	Obj31_Restart
   13992/    B778 :                     ; ===========================================================================
   13993/    B778 :                     ; ---------------------------------------------------------------------------
   13994/    B778 :                     ; Object 45 - spiked metal block from beta version (MZ)
   13995/    B778 :                     ; ---------------------------------------------------------------------------
   13996/    B778 :                     
   13997/    B778 :                     Obj45:					; XREF: Obj_Index
   13998/    B778 : 7000                		moveq	#0,d0
   13999/    B77A : 1028 0024           		move.b	$24(a0),d0
   14000/    B77E : 323B 0006           		move.w	Obj45_Index(pc,d0.w),d1
   14001/    B782 : 4EFB 1002           		jmp	Obj45_Index(pc,d1.w)
   14002/    B786 :                     ; ===========================================================================
   14003/    B786 : 001C                Obj45_Index:	dc.w Obj45_Main-Obj45_Index
   14004/    B788 : 00AE                		dc.w Obj45_Solid-Obj45_Index
   14005/    B78A : 00E4                		dc.w loc_BA8E-Obj45_Index
   14006/    B78C : 00F8                		dc.w Obj45_Display-Obj45_Index
   14007/    B78E : 00D0                		dc.w loc_BA7A-Obj45_Index
   14008/    B790 :                     
   14009/    B790 : 0204 00             Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
   14010/    B793 : 04E4 01             		dc.b	4, $E4,	  1
   14011/    B796 : 0834 03             		dc.b	8, $34,	  3
   14012/    B799 : 0628 02             		dc.b	6, $28,	  2
   14013/    B79C :                     
   14014/    B79C : 3800                word_B9BE:	dc.w $3800
   14015/    B79E : A000                		dc.w -$6000
   14016/    B7A0 : 5000                		dc.w $5000
   14017/    B7A2 :                     ; ===========================================================================
   14018/    B7A2 :                     
   14019/    B7A2 :                     Obj45_Main:				; XREF: Obj45_Index
   14020/    B7A2 : 7000                		moveq	#0,d0
   14021/    B7A4 : 1028 0028           		move.b	$28(a0),d0
   14022/    B7A8 : D040                		add.w	d0,d0
   14023/    B7AA : 343B 00F0           		move.w	word_B9BE(pc,d0.w),d2
   14024/    B7AE : 45F9 0000 B790      		lea	(Obj45_Var).l,a2
   14025/    B7B4 : 2248                		movea.l	a0,a1
   14026/    B7B6 : 7203                		moveq	#3,d1
   14027/    B7B8 : 6006                		bra.s	Obj45_Load
   14028/    B7BA :                     ; ===========================================================================
   14029/    B7BA :                     
   14030/    B7BA :                     Obj45_Loop:
   14031/    B7BA : 6100 20B2           		bsr.w	SingleObjLoad2
   14032/    B7BE : 666E                		bne.s	loc_BA52
   14033/    B7C0 :                     
   14034/    B7C0 :                     Obj45_Load:				; XREF: Obj45_Main
   14035/    B7C0 : 135A 0024           		move.b	(a2)+,$24(a1)
   14036/    B7C4 : 12BC 0045           		move.b	#$45,0(a1)
   14037/    B7C8 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   14038/    B7CE : 101A                		move.b	(a2)+,d0
   14039/    B7D0 : 4880                		ext.w	d0
   14040/    B7D2 : D068 0008           		add.w	8(a0),d0
   14041/    B7D6 : 3340 0008           		move.w	d0,8(a1)
   14042/    B7DA : 237C 0000 BA36      		move.l	#Map_obj45,4(a1)
             B7E0 : 0004             
   14043/    B7E2 : 337C 0300 0002      		move.w	#$300,2(a1)
   14044/    B7E8 : 137C 0004 0001      		move.b	#4,1(a1)
   14045/    B7EE : 3369 0008 0030      		move.w	8(a1),$30(a1)
   14046/    B7F4 : 3368 0008 003A      		move.w	8(a0),$3A(a1)
   14047/    B7FA : 1368 0028 0028      		move.b	$28(a0),$28(a1)
   14048/    B800 : 137C 0020 0019      		move.b	#$20,$19(a1)
   14049/    B806 : 3342 0034           		move.w	d2,$34(a1)
   14050/    B80A : 137C 0004 0018      		move.b	#4,$18(a1)
   14051/    B810 : 0C12 0001           		cmpi.b	#1,(a2)
   14052/    B814 : 6606                		bne.s	loc_BA40
   14053/    B816 : 137C 0091 0020      		move.b	#$91,$20(a1)
   14054/    B81C :                     
   14055/    B81C :                     loc_BA40:
   14056/    B81C : 135A 001A           		move.b	(a2)+,$1A(a1)
   14057/    B820 : 2348 003C           		move.l	a0,$3C(a1)
   14058/    B824 : 51C9 FF94           		dbf	d1,Obj45_Loop	; repeat 3 times
   14059/    B828 :                     
   14060/    B828 : 137C 0003 0018      		move.b	#3,$18(a1)
   14061/    B82E :                     
   14062/    B82E :                     loc_BA52:
   14063/    B82E : 117C 0010 0019      		move.b	#$10,$19(a0)
   14064/    B834 :                     
   14065/    B834 :                     Obj45_Solid:				; XREF: Obj45_Index
   14066/    B834 : 3F28 0008           		move.w	8(a0),-(sp)
   14067/    B838 : 6100 0068           		bsr.w	Obj45_Move
   14068/    B83C : 323C 0017           		move.w	#$17,d1
   14069/    B840 : 343C 0020           		move.w	#$20,d2
   14070/    B844 : 363C 0020           		move.w	#$20,d3
   14071/    B848 : 381F                		move.w	(sp)+,d4
   14072/    B84A : 6100 3F46           		bsr.w	SolidObject
   14073/    B84E : 6100 1B82           		bsr.w	DisplaySprite
   14074/    B852 : 6000 002E           		bra.w	Obj45_ChkDel
   14075/    B856 :                     ; ===========================================================================
   14076/    B856 :                     
   14077/    B856 :                     loc_BA7A:				; XREF: Obj45_Index
   14078/    B856 : 2268 003C           		movea.l	$3C(a0),a1
   14079/    B85A : 1029 0032           		move.b	$32(a1),d0
   14080/    B85E : 0600 0010           		addi.b	#$10,d0
   14081/    B862 : EA08                		lsr.b	#5,d0
   14082/    B864 : 5600                		addq.b	#3,d0
   14083/    B866 : 1140 001A           		move.b	d0,$1A(a0)
   14084/    B86A :                     
   14085/    B86A :                     loc_BA8E:				; XREF: Obj45_Index
   14086/    B86A : 2268 003C           		movea.l	$3C(a0),a1
   14087/    B86E : 7000                		moveq	#0,d0
   14088/    B870 : 1029 0032           		move.b	$32(a1),d0
   14089/    B874 : 4440                		neg.w	d0
   14090/    B876 : D068 0030           		add.w	$30(a0),d0
   14091/    B87A : 3140 0008           		move.w	d0,8(a0)
   14092/    B87E :                     
   14093/    B87E :                     Obj45_Display:				; XREF: Obj45_Index
   14094/    B87E : 6100 1B52           		bsr.w	DisplaySprite
   14095/    B882 :                     
   14096/    B882 :                     Obj45_ChkDel:				; XREF: Obj45_Solid
   14097/    B882 : 3028 003A           		move.w	$3A(a0),d0
   14098/    B886 : 0240 FF80           		andi.w	#$FF80,d0
   14099/    B88A : 3238 F700           		move.w	($FFFFF700).w,d1
   14100/    B88E : 0441 0080           		subi.w	#$80,d1
   14101/    B892 : 0241 FF80           		andi.w	#$FF80,d1
   14102/    B896 : 9041                		sub.w	d1,d0
   14103/    B898 : 0C40 0280           		cmpi.w	#$280,d0
   14104/    B89C : 6200 1B70           		bhi.w	DeleteObject
   14105/    B8A0 : 4E75                		rts	
   14106/    B8A2 :                     
   14107/    B8A2 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   14108/    B8A2 :                     
   14109/    B8A2 :                     
   14110/    B8A2 :                     Obj45_Move:				; XREF: Obj45_Solid
   14111/    B8A2 : 7000                		moveq	#0,d0
   14112/    B8A4 : 1028 0028           		move.b	$28(a0),d0
   14113/    B8A8 : D040                		add.w	d0,d0
   14114/    B8AA : 323B 0006           		move.w	off_BAD6(pc,d0.w),d1
   14115/    B8AE : 4EFB 1002           		jmp	off_BAD6(pc,d1.w)
   14116/    B8B2 :                     ; End of function Obj45_Move
   14117/    B8B2 :                     
   14118/    B8B2 :                     ; ===========================================================================
   14119/    B8B2 : 0004                off_BAD6:	dc.w loc_BADA-off_BAD6
   14120/    B8B4 : 0004                		dc.w loc_BADA-off_BAD6
   14121/    B8B6 :                     ; ===========================================================================
   14122/    B8B6 :                     
   14123/    B8B6 :                     loc_BADA:				; XREF: off_BAD6
   14124/    B8B6 : 4A68 0036           		tst.w	$36(a0)
   14125/    B8BA : 6728                		beq.s	loc_BB08
   14126/    B8BC : 4A68 0038           		tst.w	$38(a0)
   14127/    B8C0 : 6706                		beq.s	loc_BAEC
   14128/    B8C2 : 5368 0038           		subq.w	#1,$38(a0)
   14129/    B8C6 : 6050                		bra.s	loc_BB3C
   14130/    B8C8 :                     ; ===========================================================================
   14131/    B8C8 :                     
   14132/    B8C8 :                     loc_BAEC:
   14133/    B8C8 : 0468 0080 0032      		subi.w	#$80,$32(a0)
   14134/    B8CE : 6448                		bcc.s	loc_BB3C
   14135/    B8D0 : 317C 0000 0032      		move.w	#0,$32(a0)
   14136/    B8D6 : 317C 0000 0010      		move.w	#0,$10(a0)
   14137/    B8DC : 317C 0000 0036      		move.w	#0,$36(a0)
   14138/    B8E2 : 6034                		bra.s	loc_BB3C
   14139/    B8E4 :                     ; ===========================================================================
   14140/    B8E4 :                     
   14141/    B8E4 :                     loc_BB08:				; XREF: loc_BADA
   14142/    B8E4 : 3228 0034           		move.w	$34(a0),d1
   14143/    B8E8 : B268 0032           		cmp.w	$32(a0),d1
   14144/    B8EC : 672A                		beq.s	loc_BB3C
   14145/    B8EE : 3028 0010           		move.w	$10(a0),d0
   14146/    B8F2 : 0668 0070 0010      		addi.w	#$70,$10(a0)
   14147/    B8F8 : D168 0032           		add.w	d0,$32(a0)
   14148/    B8FC : B268 0032           		cmp.w	$32(a0),d1
   14149/    B900 : 6216                		bhi.s	loc_BB3C
   14150/    B902 : 3141 0032           		move.w	d1,$32(a0)
   14151/    B906 : 317C 0000 0010      		move.w	#0,$10(a0)
   14152/    B90C : 317C 0001 0036      		move.w	#1,$36(a0)
   14153/    B912 : 317C 003C 0038      		move.w	#$3C,$38(a0)
   14154/    B918 :                     
   14155/    B918 :                     loc_BB3C:
   14156/    B918 : 7000                		moveq	#0,d0
   14157/    B91A : 1028 0032           		move.b	$32(a0),d0
   14158/    B91E : 4440                		neg.w	d0
   14159/    B920 : D068 0030           		add.w	$30(a0),d0
   14160/    B924 : 3140 0008           		move.w	d0,8(a0)
   14161/    B928 : 4E75                		rts	
   14162/    B92A :                     ; ===========================================================================
   14163/    B92A :                     ; ---------------------------------------------------------------------------
   14164/    B92A :                     ; Sprite mappings - metal stomping blocks on chains (MZ)
   14165/    B92A :                     ; ---------------------------------------------------------------------------
   14166/    B92A :                     Map_obj31:
   14167/    B92A :                     	include "_mappings/obj31.asm"
(1)    1/    B92A :                     ; ---------------------------------------------------------------------------
(1)    2/    B92A :                     ; Sprite mappings - metal stomping blocks on chains (MZ)
(1)    3/    B92A :                     ; ---------------------------------------------------------------------------
(1)    4/    B92A : 0016                		dc.w byte_BB64-Map_obj31
(1)    5/    B92C : 0030                		dc.w byte_BB7E-Map_obj31
(1)    6/    B92E : 004A                		dc.w byte_BB98-Map_obj31
(1)    7/    B930 : 0050                		dc.w byte_BB9E-Map_obj31
(1)    8/    B932 : 005B                		dc.w byte_BBA9-Map_obj31
(1)    9/    B934 : 0070                		dc.w byte_BBBE-Map_obj31
(1)   10/    B936 : 008F                		dc.w byte_BBDD-Map_obj31
(1)   11/    B938 : 00B8                		dc.w byte_BC06-Map_obj31
(1)   12/    B93A : 00B8                		dc.w byte_BC06-Map_obj31
(1)   13/    B93C : 00EB                		dc.w byte_BC39-Map_obj31
(1)   14/    B93E : 0105                		dc.w byte_BC53-Map_obj31
(1)   15/    B940 : 05                  byte_BB64:	dc.b 5
(1)   16/    B941 : F406 0000 C8        		dc.b $F4, 6, 0,	0, $C8
(1)   17/    B946 : F40A 0006 D8        		dc.b $F4, $A, 0, 6, $D8
(1)   18/    B94B : EC0F 000F F0        		dc.b $EC, $F, 0, $F, $F0
(1)   19/    B950 : F40A 0806 10        		dc.b $F4, $A, 8, 6, $10
(1)   20/    B955 : F406 0800 28        		dc.b $F4, 6, 8,	0, $28
(1)   21/    B95A : 05                  byte_BB7E:	dc.b 5
(1)   22/    B95B : F003 121F D4        		dc.b $F0, 3, $12, $1F, $D4
(1)   23/    B960 : F003 121F E8        		dc.b $F0, 3, $12, $1F, $E8
(1)   24/    B965 : F003 121F FC        		dc.b $F0, 3, $12, $1F, $FC
(1)   25/    B96A : F003 121F 10        		dc.b $F0, 3, $12, $1F, $10
(1)   26/    B96F : F003 121F 24        		dc.b $F0, 3, $12, $1F, $24
(1)   27/    B974 : 01                  byte_BB98:	dc.b 1
(1)   28/    B975 : DC0F 100F F0        		dc.b $DC, $F, $10, $F, $F0
(1)   29/    B97A : 02                  byte_BB9E:	dc.b 2
(1)   30/    B97B : 0001 003F FC        		dc.b 0,	1, 0, $3F, $FC
(1)   31/    B980 : 1001 003F FC        		dc.b $10, 1, 0,	$3F, $FC
(1)   32/    B985 : 04                  byte_BBA9:	dc.b 4
(1)   33/    B986 : E001 003F FC        		dc.b $E0, 1, 0,	$3F, $FC
(1)   34/    B98B : F001 003F FC        		dc.b $F0, 1, 0,	$3F, $FC
(1)   35/    B990 : 0001 003F FC        		dc.b 0,	1, 0, $3F, $FC
(1)   36/    B995 : 1001 003F FC        		dc.b $10, 1, 0,	$3F, $FC
(1)   37/    B99A : 06                  byte_BBBE:	dc.b 6
(1)   38/    B99B : C001 003F FC        		dc.b $C0, 1, 0,	$3F, $FC
(1)   39/    B9A0 : D001 003F FC        		dc.b $D0, 1, 0,	$3F, $FC
(1)   40/    B9A5 : E001 003F FC        		dc.b $E0, 1, 0,	$3F, $FC
(1)   41/    B9AA : F001 003F FC        		dc.b $F0, 1, 0,	$3F, $FC
(1)   42/    B9AF : 0001 003F FC        		dc.b 0,	1, 0, $3F, $FC
(1)   43/    B9B4 : 1001 003F FC        		dc.b $10, 1, 0,	$3F, $FC
(1)   44/    B9B9 : 08                  byte_BBDD:	dc.b 8
(1)   45/    B9BA : A001 003F FC        		dc.b $A0, 1, 0,	$3F, $FC
(1)   46/    B9BF : B001 003F FC        		dc.b $B0, 1, 0,	$3F, $FC
(1)   47/    B9C4 : C001 003F FC        		dc.b $C0, 1, 0,	$3F, $FC
(1)   48/    B9C9 : D001 003F FC        		dc.b $D0, 1, 0,	$3F, $FC
(1)   49/    B9CE : E001 003F FC        		dc.b $E0, 1, 0,	$3F, $FC
(1)   50/    B9D3 : F001 003F FC        		dc.b $F0, 1, 0,	$3F, $FC
(1)   51/    B9D8 : 0001 003F FC        		dc.b 0,	1, 0, $3F, $FC
(1)   52/    B9DD : 1001 003F FC        		dc.b $10, 1, 0,	$3F, $FC
(1)   53/    B9E2 : 0A                  byte_BC06:	dc.b $A
(1)   54/    B9E3 : 8001 003F FC        		dc.b $80, 1, 0,	$3F, $FC
(1)   55/    B9E8 : 9001 003F FC        		dc.b $90, 1, 0,	$3F, $FC
(1)   56/    B9ED : A001 003F FC        		dc.b $A0, 1, 0,	$3F, $FC
(1)   57/    B9F2 : B001 003F FC        		dc.b $B0, 1, 0,	$3F, $FC
(1)   58/    B9F7 : C001 003F FC        		dc.b $C0, 1, 0,	$3F, $FC
(1)   59/    B9FC : D001 003F FC        		dc.b $D0, 1, 0,	$3F, $FC
(1)   60/    BA01 : E001 003F FC        		dc.b $E0, 1, 0,	$3F, $FC
(1)   61/    BA06 : F001 003F FC        		dc.b $F0, 1, 0,	$3F, $FC
(1)   62/    BA0B : 0001 003F FC        		dc.b 0,	1, 0, $3F, $FC
(1)   63/    BA10 : 1001 003F FC        		dc.b $10, 1, 0,	$3F, $FC
(1)   64/    BA15 : 05                  byte_BC39:	dc.b 5
(1)   65/    BA16 : F406 0000 D0        		dc.b $F4, 6, 0,	0, $D0
(1)   66/    BA1B : F40A 0006 E0        		dc.b $F4, $A, 0, 6, $E0
(1)   67/    BA20 : F40A 0806 08        		dc.b $F4, $A, 8, 6, 8
(1)   68/    BA25 : F406 0800 20        		dc.b $F4, 6, 8,	0, $20
(1)   69/    BA2A : EC0F 000F F0        		dc.b $EC, $F, 0, $F, $F0
(1)   70/    BA2F : 01                  byte_BC53:	dc.b 1
(1)   71/    BA30 : EC0F 002F F0        		dc.b $EC, $F, 0, $2F, $F0
(1)   72/    BA35 : (MACRO)              		even
(1)   72/    BA35 : 00                                          dc.b 0 ;ds.b 1 
   14168/    BA36 :                     
   14169/    BA36 :                     ; ---------------------------------------------------------------------------
   14170/    BA36 :                     ; Sprite mappings - spiked metal block from beta version (MZ)
   14171/    BA36 :                     ; ---------------------------------------------------------------------------
   14172/    BA36 :                     Map_obj45:
   14173/    BA36 :                     	include "_mappings/obj45.asm"
(1)    1/    BA36 :                     ; ---------------------------------------------------------------------------
(1)    2/    BA36 :                     ; Sprite mappings - spiked metal block from beta version (MZ)
(1)    3/    BA36 :                     ; ---------------------------------------------------------------------------
(1)    4/    BA36 : 0012                		dc.w byte_BC6C-Map_obj45
(1)    5/    BA38 : 0022                		dc.w byte_BC7C-Map_obj45
(1)    6/    BA3A : 0032                		dc.w byte_BC8C-Map_obj45
(1)    7/    BA3C : 0038                		dc.w byte_BC92-Map_obj45
(1)    8/    BA3E : 0043                		dc.w byte_BC9D-Map_obj45
(1)    9/    BA40 : 0058                		dc.w byte_BCB2-Map_obj45
(1)   10/    BA42 : 0077                		dc.w byte_BCD1-Map_obj45
(1)   11/    BA44 : 00A0                		dc.w byte_BCFA-Map_obj45
(1)   12/    BA46 : 00A0                		dc.w byte_BCFA-Map_obj45
(1)   13/    BA48 : 03                  byte_BC6C:	dc.b 3
(1)   14/    BA49 : E00B 001F F4        		dc.b $E0, $B, 0, $1F, $F4
(1)   15/    BA4E : 000B 101F F4        		dc.b 0,	$B, $10, $1F, $F4
(1)   16/    BA53 : F003 002B 0C        		dc.b $F0, 3, 0,	$2B, $C
(1)   17/    BA58 : 03                  byte_BC7C:	dc.b 3
(1)   18/    BA59 : E80C 121B F0        		dc.b $E8, $C, $12, $1B,	$F0
(1)   19/    BA5E : FC0C 121B F0        		dc.b $FC, $C, $12, $1B,	$F0
(1)   20/    BA63 : 100C 121B F0        		dc.b $10, $C, $12, $1B,	$F0
(1)   21/    BA68 : 01                  byte_BC8C:	dc.b 1
(1)   22/    BA69 : F003 082B FC        		dc.b $F0, 3, 8,	$2B, $FC
(1)   23/    BA6E : 02                  byte_BC92:	dc.b 2
(1)   24/    BA6F : F805 0041 E0        		dc.b $F8, 5, 0,	$41, $E0
(1)   25/    BA74 : F805 0041 F0        		dc.b $F8, 5, 0,	$41, $F0
(1)   26/    BA79 : 04                  byte_BC9D:	dc.b 4
(1)   27/    BA7A : F805 0041 E0        		dc.b $F8, 5, 0,	$41, $E0
(1)   28/    BA7F : F805 0041 F0        		dc.b $F8, 5, 0,	$41, $F0
(1)   29/    BA84 : F805 0041 00        		dc.b $F8, 5, 0,	$41, 0
(1)   30/    BA89 : F805 0041 10        		dc.b $F8, 5, 0,	$41, $10
(1)   31/    BA8E : 06                  byte_BCB2:	dc.b 6
(1)   32/    BA8F : F805 0041 E0        		dc.b $F8, 5, 0,	$41, $E0
(1)   33/    BA94 : F805 0041 F0        		dc.b $F8, 5, 0,	$41, $F0
(1)   34/    BA99 : F805 0041 00        		dc.b $F8, 5, 0,	$41, 0
(1)   35/    BA9E : F805 0041 10        		dc.b $F8, 5, 0,	$41, $10
(1)   36/    BAA3 : F805 0041 20        		dc.b $F8, 5, 0,	$41, $20
(1)   37/    BAA8 : F805 0041 30        		dc.b $F8, 5, 0,	$41, $30
(1)   38/    BAAD : 08                  byte_BCD1:	dc.b 8
(1)   39/    BAAE : F805 0041 E0        		dc.b $F8, 5, 0,	$41, $E0
(1)   40/    BAB3 : F805 0041 F0        		dc.b $F8, 5, 0,	$41, $F0
(1)   41/    BAB8 : F805 0041 00        		dc.b $F8, 5, 0,	$41, 0
(1)   42/    BABD : F805 0041 10        		dc.b $F8, 5, 0,	$41, $10
(1)   43/    BAC2 : F805 0041 20        		dc.b $F8, 5, 0,	$41, $20
(1)   44/    BAC7 : F805 0041 30        		dc.b $F8, 5, 0,	$41, $30
(1)   45/    BACC : F805 0041 40        		dc.b $F8, 5, 0,	$41, $40
(1)   46/    BAD1 : F805 0041 50        		dc.b $F8, 5, 0,	$41, $50
(1)   47/    BAD6 : 08                  byte_BCFA:	dc.b 8
(1)   48/    BAD7 : F805 0041 E0        		dc.b $F8, 5, 0,	$41, $E0
(1)   49/    BADC : F805 0041 F0        		dc.b $F8, 5, 0,	$41, $F0
(1)   50/    BAE1 : F805 0041 00        		dc.b $F8, 5, 0,	$41, 0
(1)   51/    BAE6 : F805 0041 10        		dc.b $F8, 5, 0,	$41, $10
(1)   52/    BAEB : F805 0041 20        		dc.b $F8, 5, 0,	$41, $20
(1)   53/    BAF0 : F805 0041 30        		dc.b $F8, 5, 0,	$41, $30
(1)   54/    BAF5 : F805 0041 40        		dc.b $F8, 5, 0,	$41, $40
(1)   55/    BAFA : F805 0041 50        		dc.b $F8, 5, 0,	$41, $50
(1)   56/    BAFF : F805 0041 60        		dc.b $F8, 5, 0,	$41, $60
(1)   57/    BB04 : F805 0041 70        		dc.b $F8, 5, 0,	$41, $70
(1)   58/    BB09 : (MACRO)              		even
(1)   58/    BB09 : 00                                          dc.b 0 ;ds.b 1 
   14174/    BB0A :                     
   14175/    BB0A :                     ; ===========================================================================
   14176/    BB0A :                     ; ---------------------------------------------------------------------------
   14177/    BB0A :                     ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
   14178/    BB0A :                     ; ---------------------------------------------------------------------------
   14179/    BB0A :                     
   14180/    BB0A :                     Obj32:					; XREF: Obj_Index
   14181/    BB0A : 7000                		moveq	#0,d0
   14182/    BB0C : 1028 0024           		move.b	$24(a0),d0
   14183/    BB10 : 323B 0006           		move.w	Obj32_Index(pc,d0.w),d1
   14184/    BB14 : 4EFB 1002           		jmp	Obj32_Index(pc,d1.w)
   14185/    BB18 :                     ; ===========================================================================
   14186/    BB18 : 0004                Obj32_Index:	dc.w Obj32_Main-Obj32_Index
   14187/    BB1A : 003A                		dc.w Obj32_Pressed-Obj32_Index
   14188/    BB1C :                     ; ===========================================================================
   14189/    BB1C :                     
   14190/    BB1C :                     Obj32_Main:				; XREF: Obj32_Index
   14191/    BB1C : 5428 0024           		addq.b	#2,$24(a0)
   14192/    BB20 : 217C 0000 BC80      		move.l	#Map_obj32,4(a0)
             BB26 : 0004             
   14193/    BB28 : 317C 4513 0002      		move.w	#$4513,2(a0)	; MZ specific code
   14194/    BB2E : 0C38 0002 FE10      		cmpi.b	#2,($FFFFFE10).w
   14195/    BB34 : 6706                		beq.s	loc_BD60
   14196/    BB36 : 317C 0513 0002      		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
   14197/    BB3C :                     
   14198/    BB3C :                     loc_BD60:
   14199/    BB3C : 117C 0004 0001      		move.b	#4,1(a0)
   14200/    BB42 : 117C 0010 0019      		move.b	#$10,$19(a0)
   14201/    BB48 : 117C 0004 0018      		move.b	#4,$18(a0)
   14202/    BB4E : 5668 000C           		addq.w	#3,$C(a0)
   14203/    BB52 :                     
   14204/    BB52 :                     Obj32_Pressed:				; XREF: Obj32_Index
   14205/    BB52 : 4A28 0001           		tst.b	1(a0)
   14206/    BB56 : 6A7C                		bpl.s	Obj32_Display
   14207/    BB58 : 323C 001B           		move.w	#$1B,d1
   14208/    BB5C : 343C 0005           		move.w	#5,d2
   14209/    BB60 : 363C 0005           		move.w	#5,d3
   14210/    BB64 : 3828 0008           		move.w	8(a0),d4
   14211/    BB68 : 6100 3C28           		bsr.w	SolidObject
   14212/    BB6C : 08A8 0000 001A      		bclr	#0,$1A(a0)	; use "unpressed" frame
   14213/    BB72 : 1028 0028           		move.b	$28(a0),d0
   14214/    BB76 : 0240 000F           		andi.w	#$F,d0
   14215/    BB7A : 47F8 F7E0           		lea	($FFFFF7E0).w,a3
   14216/    BB7E : 47F3 0000           		lea	(a3,d0.w),a3
   14217/    BB82 : 7600                		moveq	#0,d3
   14218/    BB84 : 0828 0006 0028      		btst	#6,$28(a0)
   14219/    BB8A : 6702                		beq.s	loc_BDB2
   14220/    BB8C : 7607                		moveq	#7,d3
   14221/    BB8E :                     
   14222/    BB8E :                     loc_BDB2:
   14223/    BB8E : 4A28 0028           		tst.b	$28(a0)
   14224/    BB92 : 6A06                		bpl.s	loc_BDBE
   14225/    BB94 : 6100 0068           		bsr.w	Obj32_MZBlock
   14226/    BB98 : 660A                		bne.s	loc_BDC8
   14227/    BB9A :                     
   14228/    BB9A :                     loc_BDBE:
   14229/    BB9A : 4A28 0025           		tst.b	$25(a0)
   14230/    BB9E : 6604                		bne.s	loc_BDC8
   14231/    BBA0 : 0793                		bclr	d3,(a3)
   14232/    BBA2 : 6016                		bra.s	loc_BDDE
   14233/    BBA4 :                     ; ===========================================================================
   14234/    BBA4 :                     
   14235/    BBA4 :                     loc_BDC8:
   14236/    BBA4 : 4A13                		tst.b	(a3)
   14237/    BBA6 : 660A                		bne.s	loc_BDD6
   14238/    BBA8 : 303C 00CD           		move.w	#$CD,d0
   14239/    BBAC : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play switch sound
   14240/    BBB2 :                     
   14241/    BBB2 :                     loc_BDD6:
   14242/    BBB2 : 07D3                		bset	d3,(a3)
   14243/    BBB4 : 08E8 0000 001A      		bset	#0,$1A(a0)	; use "pressed"	frame
   14244/    BBBA :                     
   14245/    BBBA :                     loc_BDDE:
   14246/    BBBA : 0828 0005 0028      		btst	#5,$28(a0)
   14247/    BBC0 : 6712                		beq.s	Obj32_Display
   14248/    BBC2 : 5328 001E           		subq.b	#1,$1E(a0)
   14249/    BBC6 : 6A0C                		bpl.s	Obj32_Display
   14250/    BBC8 : 117C 0007 001E      		move.b	#7,$1E(a0)
   14251/    BBCE : 0868 0001 001A      		bchg	#1,$1A(a0)
   14252/    BBD4 :                     
   14253/    BBD4 :                     Obj32_Display:
   14254/    BBD4 : 6100 17FC           		bsr.w	DisplaySprite
   14255/    BBD8 : 3028 0008           		move.w	8(a0),d0
   14256/    BBDC : 0240 FF80           		andi.w	#$FF80,d0
   14257/    BBE0 : 3238 F700           		move.w	($FFFFF700).w,d1
   14258/    BBE4 : 0441 0080           		subi.w	#$80,d1
   14259/    BBE8 : 0241 FF80           		andi.w	#$FF80,d1
   14260/    BBEC : 9041                		sub.w	d1,d0
   14261/    BBEE : 0C40 0280           		cmpi.w	#$280,d0
   14262/    BBF2 : 6200 0004           		bhi.w	Obj32_Delete
   14263/    BBF6 : 4E75                		rts	
   14264/    BBF8 :                     ; ===========================================================================
   14265/    BBF8 :                     
   14266/    BBF8 :                     Obj32_Delete:
   14267/    BBF8 : 6100 1814           		bsr.w	DeleteObject
   14268/    BBFC : 4E75                		rts	
   14269/    BBFE :                     
   14270/    BBFE :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   14271/    BBFE :                     
   14272/    BBFE :                     
   14273/    BBFE :                     Obj32_MZBlock:				; XREF: Obj32_Pressed
   14274/    BBFE : 3F03                		move.w	d3,-(sp)
   14275/    BC00 : 3428 0008           		move.w	8(a0),d2
   14276/    BC04 : 3628 000C           		move.w	$C(a0),d3
   14277/    BC08 : 0442 0010           		subi.w	#$10,d2
   14278/    BC0C : 5143                		subq.w	#8,d3
   14279/    BC0E : 383C 0020           		move.w	#$20,d4
   14280/    BC12 : 3A3C 0010           		move.w	#$10,d5
   14281/    BC16 : 43F8 D800           		lea	($FFFFD800).w,a1 ; begin checking object RAM
   14282/    BC1A : 3C3C 005F           		move.w	#$5F,d6
   14283/    BC1E :                     
   14284/    BC1E :                     Obj32_MZLoop:
   14285/    BC1E : 4A29 0001           		tst.b	1(a1)
   14286/    BC22 : 6A06                		bpl.s	loc_BE4E
   14287/    BC24 : 0C11 0033           		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
   14288/    BC28 : 6710                		beq.s	loc_BE5E	; if yes, branch
   14289/    BC2A :                     
   14290/    BC2A :                     loc_BE4E:
   14291/    BC2A : 43E9 0040           		lea	$40(a1),a1	; check	next object
   14292/    BC2E : 51CE FFEE           		dbf	d6,Obj32_MZLoop	; repeat $5F times
   14293/    BC32 :                     
   14294/    BC32 : 361F                		move.w	(sp)+,d3
   14295/    BC34 : 7000                		moveq	#0,d0
   14296/    BC36 :                     
   14297/    BC36 :                     locret_BE5A:
   14298/    BC36 : 4E75                		rts	
   14299/    BC38 :                     ; ===========================================================================
   14300/    BC38 : 1010                Obj32_MZData:	dc.b $10, $10
   14301/    BC3A :                     ; ===========================================================================
   14302/    BC3A :                     
   14303/    BC3A :                     loc_BE5E:				; XREF: Obj32_MZBlock
   14304/    BC3A : 7001                		moveq	#1,d0
   14305/    BC3C : 0240 003F           		andi.w	#$3F,d0
   14306/    BC40 : D040                		add.w	d0,d0
   14307/    BC42 : 45FB 00F2           		lea	Obj32_MZData-2(pc,d0.w),a2
   14308/    BC46 : 121A                		move.b	(a2)+,d1
   14309/    BC48 : 4881                		ext.w	d1
   14310/    BC4A : 3029 0008           		move.w	8(a1),d0
   14311/    BC4E : 9041                		sub.w	d1,d0
   14312/    BC50 : 9042                		sub.w	d2,d0
   14313/    BC52 : 6408                		bcc.s	loc_BE80
   14314/    BC54 : D241                		add.w	d1,d1
   14315/    BC56 : D041                		add.w	d1,d0
   14316/    BC58 : 6506                		bcs.s	loc_BE84
   14317/    BC5A : 60CE                		bra.s	loc_BE4E
   14318/    BC5C :                     ; ===========================================================================
   14319/    BC5C :                     
   14320/    BC5C :                     loc_BE80:
   14321/    BC5C : B044                		cmp.w	d4,d0
   14322/    BC5E : 62CA                		bhi.s	loc_BE4E
   14323/    BC60 :                     
   14324/    BC60 :                     loc_BE84:
   14325/    BC60 : 121A                		move.b	(a2)+,d1
   14326/    BC62 : 4881                		ext.w	d1
   14327/    BC64 : 3029 000C           		move.w	$C(a1),d0
   14328/    BC68 : 9041                		sub.w	d1,d0
   14329/    BC6A : 9043                		sub.w	d3,d0
   14330/    BC6C : 6408                		bcc.s	loc_BE9A
   14331/    BC6E : D241                		add.w	d1,d1
   14332/    BC70 : D041                		add.w	d1,d0
   14333/    BC72 : 6506                		bcs.s	loc_BE9E
   14334/    BC74 : 60B4                		bra.s	loc_BE4E
   14335/    BC76 :                     ; ===========================================================================
   14336/    BC76 :                     
   14337/    BC76 :                     loc_BE9A:
   14338/    BC76 : B045                		cmp.w	d5,d0
   14339/    BC78 : 62B0                		bhi.s	loc_BE4E
   14340/    BC7A :                     
   14341/    BC7A :                     loc_BE9E:
   14342/    BC7A : 361F                		move.w	(sp)+,d3
   14343/    BC7C : 7001                		moveq	#1,d0
   14344/    BC7E : 4E75                		rts	
   14345/    BC80 :                     ; End of function Obj32_MZBlock
   14346/    BC80 :                     
   14347/    BC80 :                     ; ===========================================================================
   14348/    BC80 :                     ; ---------------------------------------------------------------------------
   14349/    BC80 :                     ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
   14350/    BC80 :                     ; ---------------------------------------------------------------------------
   14351/    BC80 :                     Map_obj32:
   14352/    BC80 :                     	include "_mappings/obj32.asm"
(1)    1/    BC80 :                     ; ---------------------------------------------------------------------------
(1)    2/    BC80 :                     ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
(1)    3/    BC80 :                     ; ---------------------------------------------------------------------------
(1)    4/    BC80 : 0008                		dc.w byte_BEAC-Map_obj32
(1)    5/    BC82 : 0013                		dc.w byte_BEB7-Map_obj32
(1)    6/    BC84 : 001E                		dc.w byte_BEC2-Map_obj32
(1)    7/    BC86 : 0013                		dc.w byte_BEB7-Map_obj32
(1)    8/    BC88 : 02                  byte_BEAC:	dc.b 2
(1)    9/    BC89 : F505 0000 F0        		dc.b $F5, 5, 0,	0, $F0
(1)   10/    BC8E : F505 0800 00        		dc.b $F5, 5, 8,	0, 0
(1)   11/    BC93 : 02                  byte_BEB7:	dc.b 2
(1)   12/    BC94 : F505 0004 F0        		dc.b $F5, 5, 0,	4, $F0
(1)   13/    BC99 : F505 0804 00        		dc.b $F5, 5, 8,	4, 0
(1)   14/    BC9E : 02                  byte_BEC2:	dc.b 2
(1)   15/    BC9F : F505 FFFC F0        		dc.b $F5, 5, $FF, $FC, $F0
(1)   16/    BCA4 : F505 07FC 00        		dc.b $F5, 5, 7,	$FC, 0
(1)   17/    BCA9 : F805 0000 F8        		dc.b $F8, 5, 0,	0, $F8
(1)   18/    BCAE : (MACRO)              		even
   14353/    BCAE :                     
   14354/    BCAE :                     ; ===========================================================================
   14355/    BCAE :                     ; ---------------------------------------------------------------------------
   14356/    BCAE :                     ; Object 33 - pushable blocks (MZ, LZ)
   14357/    BCAE :                     ; ---------------------------------------------------------------------------
   14358/    BCAE :                     
   14359/    BCAE :                     Obj33:					; XREF: Obj_Index
   14360/    BCAE : 7000                		moveq	#0,d0
   14361/    BCB0 : 1028 0024           		move.b	$24(a0),d0
   14362/    BCB4 : 323B 0006           		move.w	Obj33_Index(pc,d0.w),d1
   14363/    BCB8 : 4EFB 1002           		jmp	Obj33_Index(pc,d1.w)
   14364/    BCBC :                     ; ===========================================================================
   14365/    BCBC : 000A                Obj33_Index:	dc.w Obj33_Main-Obj33_Index
   14366/    BCBE : 008E                		dc.w loc_BF6E-Obj33_Index
   14367/    BCC0 : 014C                		dc.w loc_C02C-Obj33_Index
   14368/    BCC2 :                     
   14369/    BCC2 : 1000                Obj33_Var:	dc.b $10, 0	; object width,	frame number
   14370/    BCC4 : 4001                		dc.b $40, 1
   14371/    BCC6 :                     ; ===========================================================================
   14372/    BCC6 :                     
   14373/    BCC6 :                     Obj33_Main:				; XREF: Obj33_Index
   14374/    BCC6 : 5428 0024           		addq.b	#2,$24(a0)
   14375/    BCCA : 117C 000F 0016      		move.b	#$F,$16(a0)
   14376/    BCD0 : 117C 000F 0017      		move.b	#$F,$17(a0)
   14377/    BCD6 : 217C 0000 C0C0      		move.l	#Map_obj33,4(a0)
             BCDC : 0004             
   14378/    BCDE : 317C 42B8 0002      		move.w	#$42B8,2(a0)	; MZ specific code
   14379/    BCE4 : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w
   14380/    BCEA : 6606                		bne.s	loc_BF16
   14381/    BCEC : 317C 43DE 0002      		move.w	#$43DE,2(a0)	; LZ specific code
   14382/    BCF2 :                     
   14383/    BCF2 :                     loc_BF16:
   14384/    BCF2 : 117C 0004 0001      		move.b	#4,1(a0)
   14385/    BCF8 : 117C 0003 0018      		move.b	#3,$18(a0)
   14386/    BCFE : 3168 0008 0034      		move.w	8(a0),$34(a0)
   14387/    BD04 : 3168 000C 0036      		move.w	$C(a0),$36(a0)
   14388/    BD0A : 7000                		moveq	#0,d0
   14389/    BD0C : 1028 0028           		move.b	$28(a0),d0
   14390/    BD10 : D040                		add.w	d0,d0
   14391/    BD12 : 0240 000E           		andi.w	#$E,d0
   14392/    BD16 : 45FB 00AA           		lea	Obj33_Var(pc,d0.w),a2
   14393/    BD1A : 115A 0019           		move.b	(a2)+,$19(a0)
   14394/    BD1E : 115A 001A           		move.b	(a2)+,$1A(a0)
   14395/    BD22 : 4A28 0028           		tst.b	$28(a0)
   14396/    BD26 : 6706                		beq.s	Obj33_ChkGone
   14397/    BD28 : 317C C2B8 0002      		move.w	#$C2B8,2(a0)
   14398/    BD2E :                     
   14399/    BD2E :                     Obj33_ChkGone:
   14400/    BD2E : 45F8 FC00           		lea	($FFFFFC00).w,a2
   14401/    BD32 : 7000                		moveq	#0,d0
   14402/    BD34 : 1028 0023           		move.b	$23(a0),d0
   14403/    BD38 : 6710                		beq.s	loc_BF6E
   14404/    BD3A : 08B2 0007 0002      		bclr	#7,2(a2,d0.w)
   14405/    BD40 : 08F2 0000 0002      		bset	#0,2(a2,d0.w)
   14406/    BD46 : 6600 16C6           		bne.w	DeleteObject
   14407/    BD4A :                     
   14408/    BD4A :                     loc_BF6E:				; XREF: Obj33_Index
   14409/    BD4A : 4A28 0032           		tst.b	$32(a0)
   14410/    BD4E : 6600 00D2           		bne.w	loc_C046
   14411/    BD52 : 7200                		moveq	#0,d1
   14412/    BD54 : 1228 0019           		move.b	$19(a0),d1
   14413/    BD58 : 0641 000B           		addi.w	#$B,d1
   14414/    BD5C : 343C 0010           		move.w	#$10,d2
   14415/    BD60 : 363C 0011           		move.w	#$11,d3
   14416/    BD64 : 3828 0008           		move.w	8(a0),d4
   14417/    BD68 : 6100 01F6           		bsr.w	loc_C186
   14418/    BD6C : 0C78 0200 FE10      		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
   14419/    BD72 : 662E                		bne.s	loc_BFC6	; if not, branch
   14420/    BD74 : 08A8 0007 0028      		bclr	#7,$28(a0)
   14421/    BD7A : 3028 0008           		move.w	8(a0),d0
   14422/    BD7E : 0C40 0A20           		cmpi.w	#$A20,d0
   14423/    BD82 : 651E                		bcs.s	loc_BFC6
   14424/    BD84 : 0C40 0AA1           		cmpi.w	#$AA1,d0
   14425/    BD88 : 6418                		bcc.s	loc_BFC6
   14426/    BD8A : 3038 F7A4           		move.w	($FFFFF7A4).w,d0
   14427/    BD8E : 0440 001C           		subi.w	#$1C,d0
   14428/    BD92 : 3140 000C           		move.w	d0,$C(a0)
   14429/    BD96 : 08F8 0007 F7A4      		bset	#7,($FFFFF7A4).w
   14430/    BD9C : 08E8 0007 0028      		bset	#7,$28(a0)
   14431/    BDA2 :                     
   14432/    BDA2 :                     loc_BFC6:
   14433/    BDA2 : 3028 0008           		move.w	8(a0),d0
   14434/    BDA6 : 0240 FF80           		andi.w	#$FF80,d0
   14435/    BDAA : 3238 F700           		move.w	($FFFFF700).w,d1
   14436/    BDAE : 0441 0080           		subi.w	#$80,d1
   14437/    BDB2 : 0241 FF80           		andi.w	#$FF80,d1
   14438/    BDB6 : 9041                		sub.w	d1,d0
   14439/    BDB8 : 0C40 0280           		cmpi.w	#$280,d0
   14440/    BDBC : 6204                		bhi.s	loc_BFE6
   14441/    BDBE : 6000 1612           		bra.w	DisplaySprite
   14442/    BDC2 :                     ; ===========================================================================
   14443/    BDC2 :                     
   14444/    BDC2 :                     loc_BFE6:
   14445/    BDC2 : 3028 0034           		move.w	$34(a0),d0
   14446/    BDC6 : 0240 FF80           		andi.w	#$FF80,d0
   14447/    BDCA : 3238 F700           		move.w	($FFFFF700).w,d1
   14448/    BDCE : 0441 0080           		subi.w	#$80,d1
   14449/    BDD2 : 0241 FF80           		andi.w	#$FF80,d1
   14450/    BDD6 : 9041                		sub.w	d1,d0
   14451/    BDD8 : 0C40 0280           		cmpi.w	#$280,d0
   14452/    BDDC : 6214                		bhi.s	loc_C016
   14453/    BDDE : 3168 0034 0008      		move.w	$34(a0),8(a0)
   14454/    BDE4 : 3168 0036 000C      		move.w	$36(a0),$C(a0)
   14455/    BDEA : 117C 0004 0024      		move.b	#4,$24(a0)
   14456/    BDF0 : 6016                		bra.s	loc_C02C
   14457/    BDF2 :                     ; ===========================================================================
   14458/    BDF2 :                     
   14459/    BDF2 :                     loc_C016:
   14460/    BDF2 : 45F8 FC00           		lea	($FFFFFC00).w,a2
   14461/    BDF6 : 7000                		moveq	#0,d0
   14462/    BDF8 : 1028 0023           		move.b	$23(a0),d0
   14463/    BDFC : 6706                		beq.s	loc_C028
   14464/    BDFE : 08B2 0000 0002      		bclr	#0,2(a2,d0.w)
   14465/    BE04 :                     
   14466/    BE04 :                     loc_C028:
   14467/    BE04 : 6000 1608           		bra.w	DeleteObject
   14468/    BE08 :                     ; ===========================================================================
   14469/    BE08 :                     
   14470/    BE08 :                     loc_C02C:				; XREF: Obj33_Index
   14471/    BE08 : 6100 186A           		bsr.w	ChkObjOnScreen2
   14472/    BE0C : 6712                		beq.s	locret_C044
   14473/    BE0E : 117C 0002 0024      		move.b	#2,$24(a0)
   14474/    BE14 : 4228 0032           		clr.b	$32(a0)
   14475/    BE18 : 4268 0010           		clr.w	$10(a0)
   14476/    BE1C : 4268 0012           		clr.w	$12(a0)
   14477/    BE20 :                     
   14478/    BE20 :                     locret_C044:
   14479/    BE20 : 4E75                		rts	
   14480/    BE22 :                     ; ===========================================================================
   14481/    BE22 :                     
   14482/    BE22 :                     loc_C046:				; XREF: loc_BF6E
   14483/    BE22 : 3F28 0008           		move.w	8(a0),-(sp)
   14484/    BE26 : 0C28 0004 0025      		cmpi.b	#4,$25(a0)
   14485/    BE2C : 6404                		bcc.s	loc_C056
   14486/    BE2E : 6100 157C           		bsr.w	SpeedToPos
   14487/    BE32 :                     
   14488/    BE32 :                     loc_C056:
   14489/    BE32 : 0828 0001 0022      		btst	#1,$22(a0)
   14490/    BE38 : 6742                		beq.s	loc_C0A0
   14491/    BE3A : 0668 0018 0012      		addi.w	#$18,$12(a0)
   14492/    BE40 : 4EB9 0001 4C08      		jsr	ObjHitFloor
   14493/    BE46 : 4A41                		tst.w	d1
   14494/    BE48 : 6A00 0030           		bpl.w	loc_C09E
   14495/    BE4C : D368 000C           		add.w	d1,$C(a0)
   14496/    BE50 : 4268 0012           		clr.w	$12(a0)
   14497/    BE54 : 08A8 0001 0022      		bclr	#1,$22(a0)
   14498/    BE5A : 3011                		move.w	(a1),d0
   14499/    BE5C : 0240 03FF           		andi.w	#$3FF,d0
   14500/    BE60 : 0C40 016A           		cmpi.w	#$16A,d0
   14501/    BE64 : 6514                		bcs.s	loc_C09E
   14502/    BE66 : 3028 0030           		move.w	$30(a0),d0
   14503/    BE6A : E640                		asr.w	#3,d0
   14504/    BE6C : 3140 0010           		move.w	d0,$10(a0)
   14505/    BE70 : 117C 0001 0032      		move.b	#1,$32(a0)
   14506/    BE76 : 4268 000E           		clr.w	$E(a0)
   14507/    BE7A :                     
   14508/    BE7A :                     loc_C09E:
   14509/    BE7A : 6046                		bra.s	loc_C0E6
   14510/    BE7C :                     ; ===========================================================================
   14511/    BE7C :                     
   14512/    BE7C :                     loc_C0A0:
   14513/    BE7C : 4A68 0010           		tst.w	$10(a0)
   14514/    BE80 : 6700 0030           		beq.w	loc_C0D6
   14515/    BE84 : 6B12                		bmi.s	loc_C0BC
   14516/    BE86 : 7600                		moveq	#0,d3
   14517/    BE88 : 1628 0019           		move.b	$19(a0),d3
   14518/    BE8C : 4EB9 0001 4CCA      		jsr	ObjHitWallRight
   14519/    BE92 : 4A41                		tst.w	d1		; has block touched a wall?
   14520/    BE94 : 6B16                		bmi.s	Obj33_StopPush	; if yes, branch
   14521/    BE96 : 602A                		bra.s	loc_C0E6
   14522/    BE98 :                     ; ===========================================================================
   14523/    BE98 :                     
   14524/    BE98 :                     loc_C0BC:
   14525/    BE98 : 7600                		moveq	#0,d3
   14526/    BE9A : 1628 0019           		move.b	$19(a0),d3
   14527/    BE9E : 4643                		not.w	d3
   14528/    BEA0 : 4EB9 0001 4E5C      		jsr	ObjHitWallLeft
   14529/    BEA6 : 4A41                		tst.w	d1		; has block touched a wall?
   14530/    BEA8 : 6B02                		bmi.s	Obj33_StopPush	; if yes, branch
   14531/    BEAA : 6016                		bra.s	loc_C0E6
   14532/    BEAC :                     ; ===========================================================================
   14533/    BEAC :                     
   14534/    BEAC :                     Obj33_StopPush:
   14535/    BEAC : 4268 0010           		clr.w	$10(a0)		; stop block moving
   14536/    BEB0 : 6010                		bra.s	loc_C0E6
   14537/    BEB2 :                     ; ===========================================================================
   14538/    BEB2 :                     
   14539/    BEB2 :                     loc_C0D6:
   14540/    BEB2 : 06A8 0000 2001      		addi.l	#$2001,$C(a0)
             BEB8 : 000C             
   14541/    BEBA : 0C28 00A0 000F      		cmpi.b	#-$60,$F(a0)
   14542/    BEC0 : 641E                		bcc.s	loc_C104
   14543/    BEC2 :                     
   14544/    BEC2 :                     loc_C0E6:
   14545/    BEC2 : 7200                		moveq	#0,d1
   14546/    BEC4 : 1228 0019           		move.b	$19(a0),d1
   14547/    BEC8 : 0641 000B           		addi.w	#$B,d1
   14548/    BECC : 343C 0010           		move.w	#$10,d2
   14549/    BED0 : 363C 0011           		move.w	#$11,d3
   14550/    BED4 : 381F                		move.w	(sp)+,d4
   14551/    BED6 : 6100 0088           		bsr.w	loc_C186
   14552/    BEDA : 611A                		bsr.s	Obj33_ChkLava
   14553/    BEDC : 6000 FEC4           		bra.w	loc_BFC6
   14554/    BEE0 :                     ; ===========================================================================
   14555/    BEE0 :                     
   14556/    BEE0 :                     loc_C104:
   14557/    BEE0 : 381F                		move.w	(sp)+,d4
   14558/    BEE2 : 43F8 D000           		lea	($FFFFD000).w,a1
   14559/    BEE6 : 08A9 0003 0022      		bclr	#3,$22(a1)
   14560/    BEEC : 08A8 0003 0022      		bclr	#3,$22(a0)
   14561/    BEF2 : 6000 FECE           		bra.w	loc_BFE6
   14562/    BEF6 :                     ; ===========================================================================
   14563/    BEF6 :                     
   14564/    BEF6 :                     Obj33_ChkLava:
   14565/    BEF6 : 0C78 0201 FE10      		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
   14566/    BEFC : 661E                		bne.s	Obj33_ChkLava2	; if not, branch
   14567/    BEFE : 343C FFE0           		move.w	#-$20,d2
   14568/    BF02 : 0C68 0DD0 0008      		cmpi.w	#$DD0,8(a0)
   14569/    BF08 : 6730                		beq.s	Obj33_LoadLava
   14570/    BF0A : 0C68 0CC0 0008      		cmpi.w	#$CC0,8(a0)
   14571/    BF10 : 6728                		beq.s	Obj33_LoadLava
   14572/    BF12 : 0C68 0BA0 0008      		cmpi.w	#$BA0,8(a0)
   14573/    BF18 : 6720                		beq.s	Obj33_LoadLava
   14574/    BF1A : 4E75                		rts	
   14575/    BF1C :                     ; ===========================================================================
   14576/    BF1C :                     
   14577/    BF1C :                     Obj33_ChkLava2:
   14578/    BF1C : 0C78 0202 FE10      		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
   14579/    BF22 : 6614                		bne.s	Obj33_NoLava	; if not, branch
   14580/    BF24 : 343C 0020           		move.w	#$20,d2
   14581/    BF28 : 0C68 0560 0008      		cmpi.w	#$560,8(a0)
   14582/    BF2E : 670A                		beq.s	Obj33_LoadLava
   14583/    BF30 : 0C68 05C0 0008      		cmpi.w	#$5C0,8(a0)
   14584/    BF36 : 6702                		beq.s	Obj33_LoadLava
   14585/    BF38 :                     
   14586/    BF38 :                     Obj33_NoLava:
   14587/    BF38 : 4E75                		rts	
   14588/    BF3A :                     ; ===========================================================================
   14589/    BF3A :                     
   14590/    BF3A :                     Obj33_LoadLava:
   14591/    BF3A : 6100 191C           		bsr.w	SingleObjLoad
   14592/    BF3E : 661E                		bne.s	locret_C184
   14593/    BF40 : 12BC 004C           		move.b	#$4C,0(a1)	; load lava geyser object
   14594/    BF44 : 3368 0008 0008      		move.w	8(a0),8(a1)
   14595/    BF4A : D569 0008           		add.w	d2,8(a1)
   14596/    BF4E : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   14597/    BF54 : 0669 0010 000C      		addi.w	#$10,$C(a1)
   14598/    BF5A : 2348 003C           		move.l	a0,$3C(a1)
   14599/    BF5E :                     
   14600/    BF5E :                     locret_C184:
   14601/    BF5E : 4E75                		rts	
   14602/    BF60 :                     ; ===========================================================================
   14603/    BF60 :                     
   14604/    BF60 :                     loc_C186:				; XREF: loc_BF6E
   14605/    BF60 : 1028 0025           		move.b	$25(a0),d0
   14606/    BF64 : 6700 008C           		beq.w	loc_C218
   14607/    BF68 : 5500                		subq.b	#2,d0
   14608/    BF6A : 6618                		bne.s	loc_C1AA
   14609/    BF6C : 6100 B462           		bsr.w	ExitPlatform
   14610/    BF70 : 0829 0003 0022      		btst	#3,$22(a1)
   14611/    BF76 : 6606                		bne.s	loc_C1A4
   14612/    BF78 : 4228 0025           		clr.b	$25(a0)
   14613/    BF7C : 4E75                		rts	
   14614/    BF7E :                     ; ===========================================================================
   14615/    BF7E :                     
   14616/    BF7E :                     loc_C1A4:
   14617/    BF7E : 3404                		move.w	d4,d2
   14618/    BF80 : 6000 B9AC           		bra.w	MvSonicOnPtfm
   14619/    BF84 :                     ; ===========================================================================
   14620/    BF84 :                     
   14621/    BF84 :                     loc_C1AA:
   14622/    BF84 : 5500                		subq.b	#2,d0
   14623/    BF86 : 6644                		bne.s	loc_C1F2
   14624/    BF88 : 6100 1422           		bsr.w	SpeedToPos
   14625/    BF8C : 0668 0018 0012      		addi.w	#$18,$12(a0)
   14626/    BF92 : 4EB9 0001 4C08      		jsr	ObjHitFloor
   14627/    BF98 : 4A41                		tst.w	d1
   14628/    BF9A : 6A00 002E           		bpl.w	locret_C1F0
   14629/    BF9E : D368 000C           		add.w	d1,$C(a0)
   14630/    BFA2 : 4268 0012           		clr.w	$12(a0)
   14631/    BFA6 : 4228 0025           		clr.b	$25(a0)
   14632/    BFAA : 3011                		move.w	(a1),d0
   14633/    BFAC : 0240 03FF           		andi.w	#$3FF,d0
   14634/    BFB0 : 0C40 016A           		cmpi.w	#$16A,d0
   14635/    BFB4 : 6514                		bcs.s	locret_C1F0
   14636/    BFB6 : 3028 0030           		move.w	$30(a0),d0
   14637/    BFBA : E640                		asr.w	#3,d0
   14638/    BFBC : 3140 0010           		move.w	d0,$10(a0)
   14639/    BFC0 : 117C 0001 0032      		move.b	#1,$32(a0)
   14640/    BFC6 : 4268 000E           		clr.w	$E(a0)
   14641/    BFCA :                     
   14642/    BFCA :                     locret_C1F0:
   14643/    BFCA : 4E75                		rts	
   14644/    BFCC :                     ; ===========================================================================
   14645/    BFCC :                     
   14646/    BFCC :                     loc_C1F2:
   14647/    BFCC : 6100 13DE           		bsr.w	SpeedToPos
   14648/    BFD0 : 3028 0008           		move.w	8(a0),d0
   14649/    BFD4 : 0240 000C           		andi.w	#$C,d0
   14650/    BFD8 : 6600 00E4           		bne.w	locret_C2E4
   14651/    BFDC : 0268 FFF0 0008      		andi.w	#-$10,8(a0)
   14652/    BFE2 : 3168 0010 0030      		move.w	$10(a0),$30(a0)
   14653/    BFE8 : 4268 0010           		clr.w	$10(a0)
   14654/    BFEC : 5528 0025           		subq.b	#2,$25(a0)
   14655/    BFF0 : 4E75                		rts	
   14656/    BFF2 :                     ; ===========================================================================
   14657/    BFF2 :                     
   14658/    BFF2 :                     loc_C218:
   14659/    BFF2 : 6100 3890           		bsr.w	loc_FAC8
   14660/    BFF6 : 4A44                		tst.w	d4
   14661/    BFF8 : 6700 00C4           		beq.w	locret_C2E4
   14662/    BFFC : 6B00 00C0           		bmi.w	locret_C2E4
   14663/    C000 : 4A28 0032           		tst.b	$32(a0)
   14664/    C004 : 6704                		beq.s	loc_C230
   14665/    C006 : 6000 00B6           		bra.w	locret_C2E4
   14666/    C00A :                     ; ===========================================================================
   14667/    C00A :                     
   14668/    C00A :                     loc_C230:
   14669/    C00A : 4A40                		tst.w	d0
   14670/    C00C : 6700 00B0           		beq.w	locret_C2E4
   14671/    C010 : 6B30                		bmi.s	loc_C268
   14672/    C012 : 0829 0000 0022      		btst	#0,$22(a1)
   14673/    C018 : 6600 00A4           		bne.w	locret_C2E4
   14674/    C01C : 3F00                		move.w	d0,-(sp)
   14675/    C01E : 7600                		moveq	#0,d3
   14676/    C020 : 1628 0019           		move.b	$19(a0),d3
   14677/    C024 : 4EB9 0001 4CCA      		jsr	ObjHitWallRight
   14678/    C02A : 301F                		move.w	(sp)+,d0
   14679/    C02C : 4A41                		tst.w	d1
   14680/    C02E : 6B00 008E           		bmi.w	locret_C2E4
   14681/    C032 : 06A8 0001 0000      		addi.l	#$10000,8(a0)
             C038 : 0008             
   14682/    C03A : 7001                		moveq	#1,d0
   14683/    C03C : 323C 0040           		move.w	#$40,d1
   14684/    C040 : 602C                		bra.s	loc_C294
   14685/    C042 :                     ; ===========================================================================
   14686/    C042 :                     
   14687/    C042 :                     loc_C268:
   14688/    C042 : 0829 0000 0022      		btst	#0,$22(a1)
   14689/    C048 : 6774                		beq.s	locret_C2E4
   14690/    C04A : 3F00                		move.w	d0,-(sp)
   14691/    C04C : 7600                		moveq	#0,d3
   14692/    C04E : 1628 0019           		move.b	$19(a0),d3
   14693/    C052 : 4643                		not.w	d3
   14694/    C054 : 4EB9 0001 4E5C      		jsr	ObjHitWallLeft
   14695/    C05A : 301F                		move.w	(sp)+,d0
   14696/    C05C : 4A41                		tst.w	d1
   14697/    C05E : 6B5E                		bmi.s	locret_C2E4
   14698/    C060 : 04A8 0001 0000      		subi.l	#$10000,8(a0)
             C066 : 0008             
   14699/    C068 : 70FF                		moveq	#-1,d0
   14700/    C06A : 323C FFC0           		move.w	#-$40,d1
   14701/    C06E :                     
   14702/    C06E :                     loc_C294:
   14703/    C06E : 43F8 D000           		lea	($FFFFD000).w,a1
   14704/    C072 : D169 0008           		add.w	d0,8(a1)
   14705/    C076 : 3341 0014           		move.w	d1,$14(a1)
   14706/    C07A : 337C 0000 0010      		move.w	#0,$10(a1)
   14707/    C080 : 3F00                		move.w	d0,-(sp)
   14708/    C082 : 303C 00A7           		move.w	#$A7,d0
   14709/    C086 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play pushing sound
   14710/    C08C : 301F                		move.w	(sp)+,d0
   14711/    C08E : 4A28 0028           		tst.b	$28(a0)
   14712/    C092 : 6B2A                		bmi.s	locret_C2E4
   14713/    C094 : 3F00                		move.w	d0,-(sp)
   14714/    C096 : 4EB9 0001 4C08      		jsr	ObjHitFloor
   14715/    C09C : 301F                		move.w	(sp)+,d0
   14716/    C09E : 0C41 0004           		cmpi.w	#4,d1
   14717/    C0A2 : 6F16                		ble.s	loc_C2E0
   14718/    C0A4 : 317C 0400 0010      		move.w	#$400,$10(a0)
   14719/    C0AA : 4A40                		tst.w	d0
   14720/    C0AC : 6A04                		bpl.s	loc_C2D8
   14721/    C0AE : 4468 0010           		neg.w	$10(a0)
   14722/    C0B2 :                     
   14723/    C0B2 :                     loc_C2D8:
   14724/    C0B2 : 117C 0006 0025      		move.b	#6,$25(a0)
   14725/    C0B8 : 6004                		bra.s	locret_C2E4
   14726/    C0BA :                     ; ===========================================================================
   14727/    C0BA :                     
   14728/    C0BA :                     loc_C2E0:
   14729/    C0BA : D368 000C           		add.w	d1,$C(a0)
   14730/    C0BE :                     
   14731/    C0BE :                     locret_C2E4:
   14732/    C0BE : 4E75                		rts	
   14733/    C0C0 :                     ; ===========================================================================
   14734/    C0C0 :                     ; ---------------------------------------------------------------------------
   14735/    C0C0 :                     ; Sprite mappings - pushable blocks (MZ, LZ)
   14736/    C0C0 :                     ; ---------------------------------------------------------------------------
   14737/    C0C0 :                     Map_obj33:
   14738/    C0C0 :                     	include "_mappings/obj33.asm"
(1)    1/    C0C0 :                     ; ---------------------------------------------------------------------------
(1)    2/    C0C0 :                     ; Sprite mappings - pushable blocks (MZ, LZ)
(1)    3/    C0C0 :                     ; ---------------------------------------------------------------------------
(1)    4/    C0C0 : 0004                		dc.w byte_C2EA-Map_obj33
(1)    5/    C0C2 : 000A                		dc.w byte_C2F0-Map_obj33
(1)    6/    C0C4 : 01                  byte_C2EA:	dc.b 1
(1)    7/    C0C5 : F00F 0008 F0        		dc.b $F0, $F, 0, 8, $F0	; single block
(1)    8/    C0CA : 04                  byte_C2F0:	dc.b 4
(1)    9/    C0CB : F00F 0008 C0        		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
(1)   10/    C0D0 : F00F 0008 E0        		dc.b $F0, $F, 0, 8, $E0
(1)   11/    C0D5 : F00F 0008 00        		dc.b $F0, $F, 0, 8, 0
(1)   12/    C0DA : F00F 0008 20        		dc.b $F0, $F, 0, 8, $20
(1)   13/    C0DF : (MACRO)              		even
(1)   13/    C0DF : 00                                          dc.b 0 ;ds.b 1 
   14739/    C0E0 :                     
   14740/    C0E0 :                     ; ===========================================================================
   14741/    C0E0 :                     ; ---------------------------------------------------------------------------
   14742/    C0E0 :                     ; Object 34 - zone title cards
   14743/    C0E0 :                     ; ---------------------------------------------------------------------------
   14744/    C0E0 :                     
   14745/    C0E0 :                     Obj34:					; XREF: Obj_Index
   14746/    C0E0 : 7000                		moveq	#0,d0
   14747/    C0E2 : 1028 0024           		move.b	$24(a0),d0
   14748/    C0E6 : 323B 0006           		move.w	Obj34_Index(pc,d0.w),d1
   14749/    C0EA : 4EFB 1002           		jmp	Obj34_Index(pc,d1.w)
   14750/    C0EE :                     ; ===========================================================================
   14751/    C0EE : 0008                Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
   14752/    C0F0 : 009E                		dc.w Obj34_ChkPos-Obj34_Index
   14753/    C0F2 : 00C4                		dc.w Obj34_Wait-Obj34_Index
   14754/    C0F4 : 00C4                		dc.w Obj34_Wait-Obj34_Index
   14755/    C0F6 :                     ; ===========================================================================
   14756/    C0F6 :                     
   14757/    C0F6 :                     Obj34_CheckSBZ3:			; XREF: Obj34_Index
   14758/    C0F6 : 2248                		movea.l	a0,a1
   14759/    C0F8 : 7000                		moveq	#0,d0
   14760/    C0FA : 1038 FE10           		move.b	($FFFFFE10).w,d0
   14761/    C0FE : 0C78 0103 FE10      		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
   14762/    C104 : 6602                		bne.s	Obj34_CheckFZ
   14763/    C106 : 7005                		moveq	#5,d0		; load title card number 5 (SBZ)
   14764/    C108 :                     
   14765/    C108 :                     Obj34_CheckFZ:
   14766/    C108 : 3400                		move.w	d0,d2
   14767/    C10A : 0C78 0502 FE10      		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
   14768/    C110 : 6604                		bne.s	Obj34_LoadConfig
   14769/    C112 : 7006                		moveq	#6,d0		; load title card number 6 (FZ)
   14770/    C114 : 740B                		moveq	#$B,d2		; use "FINAL" mappings
   14771/    C116 :                     
   14772/    C116 :                     Obj34_LoadConfig:
   14773/    C116 : 47F9 0000 C220      		lea	(Obj34_ConData).l,a3
   14774/    C11C : E948                		lsl.w	#4,d0
   14775/    C11E : D6C0                		adda.w	d0,a3
   14776/    C120 : 45F9 0000 C210      		lea	(Obj34_ItemData).l,a2
   14777/    C126 : 7203                		moveq	#3,d1
   14778/    C128 :                     
   14779/    C128 :                     Obj34_Loop:
   14780/    C128 : 12BC 0034           		move.b	#$34,0(a1)
   14781/    C12C : 3353 0008           		move.w	(a3),8(a1)	; load start x-position
   14782/    C130 : 335B 0032           		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
   14783/    C134 : 335B 0030           		move.w	(a3)+,$30(a1)	; load main x-position
   14784/    C138 : 335A 000A           		move.w	(a2)+,$A(a1)
   14785/    C13C : 135A 0024           		move.b	(a2)+,$24(a1)
   14786/    C140 : 101A                		move.b	(a2)+,d0
   14787/    C142 : 6602                		bne.s	Obj34_ActNumber
   14788/    C144 : 1002                		move.b	d2,d0
   14789/    C146 :                     
   14790/    C146 :                     Obj34_ActNumber:
   14791/    C146 : 0C00 0007           		cmpi.b	#7,d0
   14792/    C14A : 660E                		bne.s	Obj34_MakeSprite
   14793/    C14C : D038 FE11           		add.b	($FFFFFE11).w,d0
   14794/    C150 : 0C38 0003 FE11      		cmpi.b	#3,($FFFFFE11).w
   14795/    C156 : 6602                		bne.s	Obj34_MakeSprite
   14796/    C158 : 5300                		subq.b	#1,d0
   14797/    C15A :                     
   14798/    C15A :                     Obj34_MakeSprite:
   14799/    C15A : 1340 001A           		move.b	d0,$1A(a1)	; display frame	number d0
   14800/    C15E : 237C 0000 C7B8      		move.l	#Map_obj34,4(a1)
             C164 : 0004             
   14801/    C166 : 337C 8580 0002      		move.w	#$8580,2(a1)
   14802/    C16C : 137C 0078 0019      		move.b	#$78,$19(a1)
   14803/    C172 : 137C 0000 0001      		move.b	#0,1(a1)
   14804/    C178 : 137C 0000 0018      		move.b	#0,$18(a1)
   14805/    C17E : 337C 003C 001E      		move.w	#60,$1E(a1)	; set time delay to 1 second
   14806/    C184 : 43E9 0040           		lea	$40(a1),a1	; next object
   14807/    C188 : 51C9 FF9E           		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
   14808/    C18C :                     
   14809/    C18C :                     Obj34_ChkPos:				; XREF: Obj34_Index
   14810/    C18C : 7210                		moveq	#$10,d1		; set horizontal speed
   14811/    C18E : 3028 0030           		move.w	$30(a0),d0
   14812/    C192 : B068 0008           		cmp.w	8(a0),d0	; has item reached the target position?
   14813/    C196 : 6708                		beq.s	loc_C3C8	; if yes, branch
   14814/    C198 : 6C02                		bge.s	Obj34_Move
   14815/    C19A : 4441                		neg.w	d1
   14816/    C19C :                     
   14817/    C19C :                     Obj34_Move:
   14818/    C19C : D368 0008           		add.w	d1,8(a0)	; change item's position
   14819/    C1A0 :                     
   14820/    C1A0 :                     loc_C3C8:
   14821/    C1A0 : 3028 0008           		move.w	8(a0),d0
   14822/    C1A4 : 6B0A                		bmi.s	locret_C3D8
   14823/    C1A6 : 0C40 0200           		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
   14824/    C1AA : 6404                		bcc.s	locret_C3D8	; if yes, branch
   14825/    C1AC : 6000 1224           		bra.w	DisplaySprite
   14826/    C1B0 :                     ; ===========================================================================
   14827/    C1B0 :                     
   14828/    C1B0 :                     locret_C3D8:
   14829/    C1B0 : 4E75                		rts	
   14830/    C1B2 :                     ; ===========================================================================
   14831/    C1B2 :                     
   14832/    C1B2 :                     Obj34_Wait:				; XREF: Obj34_Index
   14833/    C1B2 : 4A68 001E           		tst.w	$1E(a0)		; is time remaining zero?
   14834/    C1B6 : 6708                		beq.s	Obj34_ChkPos2	; if yes, branch
   14835/    C1B8 : 5368 001E           		subq.w	#1,$1E(a0)	; subtract 1 from time
   14836/    C1BC : 6000 1214           		bra.w	DisplaySprite
   14837/    C1C0 :                     ; ===========================================================================
   14838/    C1C0 :                     
   14839/    C1C0 :                     Obj34_ChkPos2:				; XREF: Obj34_Wait
   14840/    C1C0 : 4A28 0001           		tst.b	1(a0)
   14841/    C1C4 : 6A26                		bpl.s	Obj34_ChangeArt
   14842/    C1C6 : 7220                		moveq	#$20,d1
   14843/    C1C8 : 3028 0032           		move.w	$32(a0),d0
   14844/    C1CC : B068 0008           		cmp.w	8(a0),d0	; has item reached the finish position?
   14845/    C1D0 : 671A                		beq.s	Obj34_ChangeArt	; if yes, branch
   14846/    C1D2 : 6C02                		bge.s	Obj34_Move2
   14847/    C1D4 : 4441                		neg.w	d1
   14848/    C1D6 :                     
   14849/    C1D6 :                     Obj34_Move2:
   14850/    C1D6 : D368 0008           		add.w	d1,8(a0)	; change item's position
   14851/    C1DA : 3028 0008           		move.w	8(a0),d0
   14852/    C1DE : 6B0A                		bmi.s	locret_C412
   14853/    C1E0 : 0C40 0200           		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
   14854/    C1E4 : 6404                		bcc.s	locret_C412	; if yes, branch
   14855/    C1E6 : 6000 11EA           		bra.w	DisplaySprite
   14856/    C1EA :                     ; ===========================================================================
   14857/    C1EA :                     
   14858/    C1EA :                     locret_C412:
   14859/    C1EA : 4E75                		rts	
   14860/    C1EC :                     ; ===========================================================================
   14861/    C1EC :                     
   14862/    C1EC :                     Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
   14863/    C1EC : 0C28 0004 0024      		cmpi.b	#4,$24(a0)
   14864/    C1F2 : 6618                		bne.s	Obj34_Delete
   14865/    C1F4 : 7002                		moveq	#2,d0
   14866/    C1F6 : 4EB9 0000 1366      		jsr	(LoadPLC).l	; load explosion patterns
   14867/    C1FC : 7000                		moveq	#0,d0
   14868/    C1FE : 1038 FE10           		move.b	($FFFFFE10).w,d0
   14869/    C202 : 0640 0015           		addi.w	#$15,d0
   14870/    C206 : 4EB9 0000 1366      		jsr	(LoadPLC).l	; load animal patterns
   14871/    C20C :                     
   14872/    C20C :                     Obj34_Delete:
   14873/    C20C : 6000 1200           		bra.w	DeleteObject
   14874/    C210 :                     ; ===========================================================================
   14875/    C210 : 00D0                Obj34_ItemData:	dc.w $D0	; y-axis position
   14876/    C212 : 0200                		dc.b 2,	0	; routine number, frame	number (changes)
   14877/    C214 : 00E4                		dc.w $E4
   14878/    C216 : 0206                		dc.b 2,	6
   14879/    C218 : 00EA                		dc.w $EA
   14880/    C21A : 0207                		dc.b 2,	7
   14881/    C21C : 00E0                		dc.w $E0
   14882/    C21E : 020A                		dc.b 2,	$A
   14883/    C220 :                     ; ---------------------------------------------------------------------------
   14884/    C220 :                     ; Title	card configuration data
   14885/    C220 :                     ; Format:
   14886/    C220 :                     ; 4 bytes per item (YYYY XXXX)
   14887/    C220 :                     ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
   14888/    C220 :                     ; ---------------------------------------------------------------------------
   14889/    C220 : 0000 0120 FEFC      Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
             C226 : 013C 0414 0154 
             C22C : 0214 0154          
   14890/    C230 : 0000 0120 FEF4      		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
             C236 : 0134 040C 014C 
             C23C : 020C 014C          
   14891/    C240 : 0000 0120 FEE0      		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
             C246 : 0120 03F8 0138 
             C24C : 01F8 0138          
   14892/    C250 : 0000 0120 FEFC      		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
             C256 : 013C 0414 0154 
             C25C : 0214 0154          
   14893/    C260 : 0000 0120 FF04      		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
             C266 : 0144 041C 015C 
             C26C : 021C 015C          
   14894/    C270 : 0000 0120 FF04      		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
             C276 : 0144 041C 015C 
             C27C : 021C 015C          
   14895/    C280 : 0000 0120 FEE4      		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
             C286 : 0124 03EC 03EC 
             C28C : 01EC 012C          
   14896/    C290 :                     ; ===========================================================================
   14897/    C290 :                     ; ---------------------------------------------------------------------------
   14898/    C290 :                     ; Object 39 - "GAME OVER" and "TIME OVER"
   14899/    C290 :                     ; ---------------------------------------------------------------------------
   14900/    C290 :                     
   14901/    C290 :                     Obj39:					; XREF: Obj_Index
   14902/    C290 : 7000                		moveq	#0,d0
   14903/    C292 : 1028 0024           		move.b	$24(a0),d0
   14904/    C296 : 323B 0006           		move.w	Obj39_Index(pc,d0.w),d1
   14905/    C29A : 4EFB 1002           		jmp	Obj39_Index(pc,d1.w)
   14906/    C29E :                     ; ===========================================================================
   14907/    C29E : 0006                Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
   14908/    C2A0 : 0046                		dc.w loc_C50C-Obj39_Index
   14909/    C2A2 : 0068                		dc.w Obj39_Wait-Obj39_Index
   14910/    C2A4 :                     ; ===========================================================================
   14911/    C2A4 :                     
   14912/    C2A4 :                     Obj39_ChkPLC:				; XREF: Obj39_Index
   14913/    C2A4 : 4AB8 F680           		tst.l	($FFFFF680).w	; are the pattern load cues empty?
   14914/    C2A8 : 6702                		beq.s	Obj39_Main	; if yes, branch
   14915/    C2AA : 4E75                		rts	
   14916/    C2AC :                     ; ===========================================================================
   14917/    C2AC :                     
   14918/    C2AC :                     Obj39_Main:
   14919/    C2AC : 5428 0024           		addq.b	#2,$24(a0)
   14920/    C2B0 : 317C 0050 0008      		move.w	#$50,8(a0)	; set x-position
   14921/    C2B6 : 0828 0000 001A      		btst	#0,$1A(a0)	; is the object	"OVER"?
   14922/    C2BC : 6706                		beq.s	loc_C4EC	; if not, branch
   14923/    C2BE : 317C 01F0 0008      		move.w	#$1F0,8(a0)	; set x-position for "OVER"
   14924/    C2C4 :                     
   14925/    C2C4 :                     loc_C4EC:
   14926/    C2C4 : 317C 00F0 000A      		move.w	#$F0,$A(a0)
   14927/    C2CA : 217C 0000 C976      		move.l	#Map_obj39,4(a0)
             C2D0 : 0004             
   14928/    C2D2 : 317C 855E 0002      		move.w	#$855E,2(a0)
   14929/    C2D8 : 117C 0000 0001      		move.b	#0,1(a0)
   14930/    C2DE : 117C 0000 0018      		move.b	#0,$18(a0)
   14931/    C2E4 :                     
   14932/    C2E4 :                     loc_C50C:				; XREF: Obj39_Index
   14933/    C2E4 : 7210                		moveq	#$10,d1		; set horizontal speed
   14934/    C2E6 : 0C68 0120 0008      		cmpi.w	#$120,8(a0)	; has item reached its target position?
   14935/    C2EC : 670C                		beq.s	Obj39_SetWait	; if yes, branch
   14936/    C2EE : 6502                		bcs.s	Obj39_Move
   14937/    C2F0 : 4441                		neg.w	d1
   14938/    C2F2 :                     
   14939/    C2F2 :                     Obj39_Move:
   14940/    C2F2 : D368 0008           		add.w	d1,8(a0)	; change item's position
   14941/    C2F6 : 6000 10DA           		bra.w	DisplaySprite
   14942/    C2FA :                     ; ===========================================================================
   14943/    C2FA :                     
   14944/    C2FA :                     Obj39_SetWait:				; XREF: Obj39_Main
   14945/    C2FA : 317C 02D0 001E      		move.w	#720,$1E(a0)	; set time delay to 12 seconds
   14946/    C300 : 5428 0024           		addq.b	#2,$24(a0)
   14947/    C304 : 4E75                		rts	
   14948/    C306 :                     ; ===========================================================================
   14949/    C306 :                     
   14950/    C306 :                     Obj39_Wait:				; XREF: Obj39_Index
   14951/    C306 : 1038 F605           		move.b	($FFFFF605).w,d0
   14952/    C30A : 0200 0070           		andi.b	#$70,d0		; is button A, B or C pressed?
   14953/    C30E : 6616                		bne.s	Obj39_ChgMode	; if yes, branch
   14954/    C310 : 0828 0000 001A      		btst	#0,$1A(a0)
   14955/    C316 : 662E                		bne.s	Obj39_Display
   14956/    C318 : 4A68 001E           		tst.w	$1E(a0)		; has time delay reached zero?
   14957/    C31C : 6708                		beq.s	Obj39_ChgMode	; if yes, branch
   14958/    C31E : 5368 001E           		subq.w	#1,$1E(a0)	; subtract 1 from time delay
   14959/    C322 : 6000 10AE           		bra.w	DisplaySprite
   14960/    C326 :                     ; ===========================================================================
   14961/    C326 :                     
   14962/    C326 :                     Obj39_ChgMode:				; XREF: Obj39_Wait
   14963/    C326 : 4A38 FE1A           		tst.b	($FFFFFE1A).w	; is time over flag set?
   14964/    C32A : 6614                		bne.s	Obj39_ResetLvl	; if yes, branch
   14965/    C32C : 11FC 0014 F600      		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
   14966/    C332 : 4A38 FE18           		tst.b	($FFFFFE18).w	; do you have any continues?
   14967/    C336 : 660E                		bne.s	Obj39_Display	; if yes, branch
   14968/    C338 : 11FC 0000 F600      		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
   14969/    C33E : 6006                		bra.s	Obj39_Display
   14970/    C340 :                     ; ===========================================================================
   14971/    C340 :                     
   14972/    C340 :                     Obj39_ResetLvl:				; XREF: Obj39_ChgMode
   14973/    C340 : 31FC 0001 FE02      		move.w	#1,($FFFFFE02).w ; restart level
   14974/    C346 :                     
   14975/    C346 :                     Obj39_Display:				; XREF: Obj39_ChgMode
   14976/    C346 : 6000 108A           		bra.w	DisplaySprite
   14977/    C34A :                     ; ===========================================================================
   14978/    C34A :                     ; ---------------------------------------------------------------------------
   14979/    C34A :                     ; Object 3A - "SONIC GOT THROUGH" title	card
   14980/    C34A :                     ; ---------------------------------------------------------------------------
   14981/    C34A :                     
   14982/    C34A :                     Obj3A:					; XREF: Obj_Index
   14983/    C34A : 7000                		moveq	#0,d0
   14984/    C34C : 1028 0024           		move.b	$24(a0),d0
   14985/    C350 : 323B 0006           		move.w	Obj3A_Index(pc,d0.w),d1
   14986/    C354 : 4EFB 1002           		jmp	Obj3A_Index(pc,d1.w)
   14987/    C358 :                     ; ===========================================================================
   14988/    C358 : 0012                Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
   14989/    C35A : 0068                		dc.w Obj3A_ChkPos-Obj3A_Index
   14990/    C35C : 00B2                		dc.w Obj3A_Wait-Obj3A_Index
   14991/    C35E : 00C0                		dc.w Obj3A_TimeBonus-Obj3A_Index
   14992/    C360 : 00B2                		dc.w Obj3A_Wait-Obj3A_Index
   14993/    C362 : 012C                		dc.w Obj3A_NextLevel-Obj3A_Index
   14994/    C364 : 00B2                		dc.w Obj3A_Wait-Obj3A_Index
   14995/    C366 : 01A2                		dc.w Obj3A_ChkPos2-Obj3A_Index
   14996/    C368 : 01E4                		dc.w loc_C766-Obj3A_Index
   14997/    C36A :                     ; ===========================================================================
   14998/    C36A :                     
   14999/    C36A :                     Obj3A_ChkPLC:				; XREF: Obj3A_Index
   15000/    C36A : 4AB8 F680           		tst.l	($FFFFF680).w	; are the pattern load cues empty?
   15001/    C36E : 6702                		beq.s	Obj3A_Main	; if yes, branch
   15002/    C370 : 4E75                		rts	
   15003/    C372 :                     ; ===========================================================================
   15004/    C372 :                     
   15005/    C372 :                     Obj3A_Main:
   15006/    C372 : 2248                		movea.l	a0,a1
   15007/    C374 : 45F9 0000 C54C      		lea	(Obj3A_Config).l,a2
   15008/    C37A : 7206                		moveq	#6,d1
   15009/    C37C :                     
   15010/    C37C :                     Obj3A_Loop:
   15011/    C37C : 12BC 003A           		move.b	#$3A,0(a1)
   15012/    C380 : 3352 0008           		move.w	(a2),8(a1)	; load start x-position
   15013/    C384 : 335A 0032           		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
   15014/    C388 : 335A 0030           		move.w	(a2)+,$30(a1)	; load main x-position
   15015/    C38C : 335A 000A           		move.w	(a2)+,$A(a1)	; load y-position
   15016/    C390 : 135A 0024           		move.b	(a2)+,$24(a1)
   15017/    C394 : 101A                		move.b	(a2)+,d0
   15018/    C396 : 0C00 0006           		cmpi.b	#6,d0
   15019/    C39A : 6604                		bne.s	loc_C5CA
   15020/    C39C : D038 FE11           		add.b	($FFFFFE11).w,d0 ; add act number to frame number
   15021/    C3A0 :                     
   15022/    C3A0 :                     loc_C5CA:
   15023/    C3A0 : 1340 001A           		move.b	d0,$1A(a1)
   15024/    C3A4 : 237C 0000 C9AA      		move.l	#Map_obj3A,4(a1)
             C3AA : 0004             
   15025/    C3AC : 337C 8580 0002      		move.w	#$8580,2(a1)
   15026/    C3B2 : 137C 0000 0001      		move.b	#0,1(a1)
   15027/    C3B8 : 43E9 0040           		lea	$40(a1),a1
   15028/    C3BC : 51C9 FFBE           		dbf	d1,Obj3A_Loop	; repeat 6 times
   15029/    C3C0 :                     
   15030/    C3C0 :                     Obj3A_ChkPos:				; XREF: Obj3A_Index
   15031/    C3C0 : 7210                		moveq	#$10,d1		; set horizontal speed
   15032/    C3C2 : 3028 0030           		move.w	$30(a0),d0
   15033/    C3C6 : B068 0008           		cmp.w	8(a0),d0	; has item reached its target position?
   15034/    C3CA : 6724                		beq.s	loc_C61A	; if yes, branch
   15035/    C3CC : 6C02                		bge.s	Obj3A_Move
   15036/    C3CE : 4441                		neg.w	d1
   15037/    C3D0 :                     
   15038/    C3D0 :                     Obj3A_Move:
   15039/    C3D0 : D368 0008           		add.w	d1,8(a0)	; change item's position
   15040/    C3D4 :                     
   15041/    C3D4 :                     loc_C5FE:				; XREF: loc_C61A
   15042/    C3D4 : 3028 0008           		move.w	8(a0),d0
   15043/    C3D8 : 6B0A                		bmi.s	locret_C60E
   15044/    C3DA : 0C40 0200           		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
   15045/    C3DE : 6404                		bcc.s	locret_C60E	; if yes, branch
   15046/    C3E0 : 6000 0FF0           		bra.w	DisplaySprite
   15047/    C3E4 :                     ; ===========================================================================
   15048/    C3E4 :                     
   15049/    C3E4 :                     locret_C60E:
   15050/    C3E4 : 4E75                		rts	
   15051/    C3E6 :                     ; ===========================================================================
   15052/    C3E6 :                     
   15053/    C3E6 :                     loc_C610:				; XREF: loc_C61A
   15054/    C3E6 : 117C 000E 0024      		move.b	#$E,$24(a0)
   15055/    C3EC : 6000 010C           		bra.w	Obj3A_ChkPos2
   15056/    C3F0 :                     ; ===========================================================================
   15057/    C3F0 :                     
   15058/    C3F0 :                     loc_C61A:				; XREF: Obj3A_ChkPos
   15059/    C3F0 : 0C38 000E D724      		cmpi.b	#$E,($FFFFD724).w
   15060/    C3F6 : 67EE                		beq.s	loc_C610
   15061/    C3F8 : 0C28 0004 001A      		cmpi.b	#4,$1A(a0)
   15062/    C3FE : 66D4                		bne.s	loc_C5FE
   15063/    C400 : 5428 0024           		addq.b	#2,$24(a0)
   15064/    C404 : 317C 00B4 001E      		move.w	#180,$1E(a0)	; set time delay to 3 seconds
   15065/    C40A :                     
   15066/    C40A :                     Obj3A_Wait:				; XREF: Obj3A_Index
   15067/    C40A : 5368 001E           		subq.w	#1,$1E(a0)	; subtract 1 from time delay
   15068/    C40E : 6604                		bne.s	Obj3A_Display
   15069/    C410 : 5428 0024           		addq.b	#2,$24(a0)
   15070/    C414 :                     
   15071/    C414 :                     Obj3A_Display:
   15072/    C414 : 6000 0FBC           		bra.w	DisplaySprite
   15073/    C418 :                     ; ===========================================================================
   15074/    C418 :                     
   15075/    C418 :                     Obj3A_TimeBonus:			; XREF: Obj3A_Index
   15076/    C418 : 6100 0FB8           		bsr.w	DisplaySprite
   15077/    C41C : 11FC 0001 F7D6      		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
   15078/    C422 : 7000                		moveq	#0,d0
   15079/    C424 : 4A78 F7D2           		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
   15080/    C428 : 670A                		beq.s	Obj3A_RingBonus	; if yes, branch
   15081/    C42A : 0640 000A           		addi.w	#10,d0		; add 10 to score
   15082/    C42E : 0478 000A F7D2      		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
   15083/    C434 :                     
   15084/    C434 :                     Obj3A_RingBonus:
   15085/    C434 : 4A78 F7D4           		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
   15086/    C438 : 670A                		beq.s	Obj3A_ChkBonus	; if yes, branch
   15087/    C43A : 0640 000A           		addi.w	#10,d0		; add 10 to score
   15088/    C43E : 0478 000A F7D4      		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
   15089/    C444 :                     
   15090/    C444 :                     Obj3A_ChkBonus:
   15091/    C444 : 4A40                		tst.w	d0		; is there any bonus?
   15092/    C446 : 6622                		bne.s	Obj3A_AddBonus	; if yes, branch
   15093/    C448 : 303C 00C5           		move.w	#$C5,d0
   15094/    C44C : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
   15095/    C452 : 5428 0024           		addq.b	#2,$24(a0)
   15096/    C456 : 0C78 0501 FE10      		cmpi.w	#$501,($FFFFFE10).w
   15097/    C45C : 6604                		bne.s	Obj3A_SetDelay
   15098/    C45E : 5828 0024           		addq.b	#4,$24(a0)
   15099/    C462 :                     
   15100/    C462 :                     Obj3A_SetDelay:
   15101/    C462 : 317C 00B4 001E      		move.w	#180,$1E(a0)	; set time delay to 3 seconds
   15102/    C468 :                     
   15103/    C468 :                     locret_C692:
   15104/    C468 : 4E75                		rts	
   15105/    C46A :                     ; ===========================================================================
   15106/    C46A :                     
   15107/    C46A :                     Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
   15108/    C46A : 4EB9 0001 C6E8      		jsr	AddPoints
   15109/    C470 : 1038 FE0F           		move.b	($FFFFFE0F).w,d0
   15110/    C474 : 0200 0003           		andi.b	#3,d0
   15111/    C478 : 66EE                		bne.s	locret_C692
   15112/    C47A : 303C 00CD           		move.w	#$CD,d0
   15113/    C47E : 4EF9 0000 1182      		jmp	(PlaySound_Special).l ;	play "blip" sound
   15114/    C484 :                     ; ===========================================================================
   15115/    C484 :                     
   15116/    C484 :                     Obj3A_NextLevel:			; XREF: Obj3A_Index
   15117/    C484 : 1038 FE10           		move.b	($FFFFFE10).w,d0
   15118/    C488 : 0240 0007           		andi.w	#7,d0
   15119/    C48C : E748                		lsl.w	#3,d0
   15120/    C48E : 1238 FE11           		move.b	($FFFFFE11).w,d1
   15121/    C492 : 0241 0003           		andi.w	#3,d1
   15122/    C496 : D241                		add.w	d1,d1
   15123/    C498 : D041                		add.w	d1,d0
   15124/    C49A : 303B 002E           		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
   15125/    C49E : 31C0 FE10           		move.w	d0,($FFFFFE10).w ; set level number
   15126/    C4A2 : 4A40                		tst.w	d0
   15127/    C4A4 : 6608                		bne.s	Obj3A_ChkSS
   15128/    C4A6 : 11FC 0000 F600      		move.b	#0,($FFFFF600).w ; set game mode to level (00)
   15129/    C4AC : 6018                		bra.s	Obj3A_Display2
   15130/    C4AE :                     ; ===========================================================================
   15131/    C4AE :                     
   15132/    C4AE :                     Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
   15133/    C4AE : 4238 FE30           		clr.b	($FFFFFE30).w	; clear	lamppost counter
   15134/    C4B2 : 4A38 F7CD           		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
   15135/    C4B6 : 6708                		beq.s	loc_C6EA	; if not, branch
   15136/    C4B8 : 11FC 0010 F600      		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
   15137/    C4BE : 6006                		bra.s	Obj3A_Display2
   15138/    C4C0 :                     ; ===========================================================================
   15139/    C4C0 :                     
   15140/    C4C0 :                     loc_C6EA:				; XREF: Obj3A_ChkSS
   15141/    C4C0 : 31FC 0001 FE02      		move.w	#1,($FFFFFE02).w ; restart level
   15142/    C4C6 :                     
   15143/    C4C6 :                     Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
   15144/    C4C6 : 6000 0F0A           		bra.w	DisplaySprite
   15145/    C4CA :                     ; ===========================================================================
   15146/    C4CA :                     ; ---------------------------------------------------------------------------
   15147/    C4CA :                     ; Level	order array
   15148/    C4CA :                     ; ---------------------------------------------------------------------------
   15149/    C4CA :                     LevelOrder:	binclude	"_misc/lvl_ord.bin"
   15150/    C4FA : (MACRO)              		even
   15151/    C4FA :                     ; ===========================================================================
   15152/    C4FA :                     
   15153/    C4FA :                     Obj3A_ChkPos2:				; XREF: Obj3A_Index
   15154/    C4FA : 7220                		moveq	#$20,d1		; set horizontal speed
   15155/    C4FC : 3028 0032           		move.w	$32(a0),d0
   15156/    C500 : B068 0008           		cmp.w	8(a0),d0	; has item reached its finish position?
   15157/    C504 : 671A                		beq.s	Obj3A_SBZ2	; if yes, branch
   15158/    C506 : 6C02                		bge.s	Obj3A_Move2
   15159/    C508 : 4441                		neg.w	d1
   15160/    C50A :                     
   15161/    C50A :                     Obj3A_Move2:
   15162/    C50A : D368 0008           		add.w	d1,8(a0)	; change item's position
   15163/    C50E : 3028 0008           		move.w	8(a0),d0
   15164/    C512 : 6B0A                		bmi.s	locret_C748
   15165/    C514 : 0C40 0200           		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
   15166/    C518 : 6404                		bcc.s	locret_C748	; if yes, branch
   15167/    C51A : 6000 0EB6           		bra.w	DisplaySprite
   15168/    C51E :                     ; ===========================================================================
   15169/    C51E :                     
   15170/    C51E :                     locret_C748:
   15171/    C51E : 4E75                		rts	
   15172/    C520 :                     ; ===========================================================================
   15173/    C520 :                     
   15174/    C520 :                     Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
   15175/    C520 : 0C28 0004 001A      		cmpi.b	#4,$1A(a0)
   15176/    C526 : 6600 0EE6           		bne.w	DeleteObject
   15177/    C52A : 5428 0024           		addq.b	#2,$24(a0)
   15178/    C52E : 4238 F7CC           		clr.b	($FFFFF7CC).w	; unlock controls
   15179/    C532 : 303C 008D           		move.w	#$8D,d0
   15180/    C536 : 4EF9 0000 117C      		jmp	(PlaySound).l	; play FZ music
   15181/    C53C :                     ; ===========================================================================
   15182/    C53C :                     
   15183/    C53C :                     loc_C766:				; XREF: Obj3A_Index
   15184/    C53C : 5478 F72A           		addq.w	#2,($FFFFF72A).w
   15185/    C540 : 0C78 2100 F72A      		cmpi.w	#$2100,($FFFFF72A).w
   15186/    C546 : 6700 0EC6           		beq.w	DeleteObject
   15187/    C54A : 4E75                		rts	
   15188/    C54C :                     ; ===========================================================================
   15189/    C54C : 0004 0124 00BC      Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
   15190/    C552 : 0200                		dc.b 2,	0		; routine number, frame	number (changes)
   15191/    C554 : FEE0 0120 00D0      		dc.w $FEE0, $120, $D0
   15192/    C55A : 0201                		dc.b 2,	1
   15193/    C55C : 040C 014C 00D6      		dc.w $40C, $14C, $D6
   15194/    C562 : 0206                		dc.b 2,	6
   15195/    C564 : 0520 0120 00EC      		dc.w $520, $120, $EC
   15196/    C56A : 0202                		dc.b 2,	2
   15197/    C56C : 0540 0120 00FC      		dc.w $540, $120, $FC
   15198/    C572 : 0203                		dc.b 2,	3
   15199/    C574 : 0560 0120 010C      		dc.w $560, $120, $10C
   15200/    C57A : 0204                		dc.b 2,	4
   15201/    C57C : 020C 014C 00CC      		dc.w $20C, $14C, $CC
   15202/    C582 : 0205                		dc.b 2,	5
   15203/    C584 :                     ; ===========================================================================
   15204/    C584 :                     ; ---------------------------------------------------------------------------
   15205/    C584 :                     ; Object 7E - special stage results screen
   15206/    C584 :                     ; ---------------------------------------------------------------------------
   15207/    C584 :                     
   15208/    C584 :                     Obj7E:					; XREF: Obj_Index
   15209/    C584 : 7000                		moveq	#0,d0
   15210/    C586 : 1028 0024           		move.b	$24(a0),d0
   15211/    C58A : 323B 0006           		move.w	Obj7E_Index(pc,d0.w),d1
   15212/    C58E : 4EFB 1002           		jmp	Obj7E_Index(pc,d1.w)
   15213/    C592 :                     ; ===========================================================================
   15214/    C592 : 0016                Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
   15215/    C594 : 0088                		dc.w Obj7E_ChkPos-Obj7E_Index
   15216/    C596 : 00C6                		dc.w Obj7E_Wait-Obj7E_Index
   15217/    C598 : 00D4                		dc.w Obj7E_RingBonus-Obj7E_Index
   15218/    C59A : 00C6                		dc.w Obj7E_Wait-Obj7E_Index
   15219/    C59C : 012E                		dc.w Obj7E_Exit-Obj7E_Index
   15220/    C59E : 00C6                		dc.w Obj7E_Wait-Obj7E_Index
   15221/    C5A0 : 0138                		dc.w Obj7E_Continue-Obj7E_Index
   15222/    C5A2 : 00C6                		dc.w Obj7E_Wait-Obj7E_Index
   15223/    C5A4 : 012E                		dc.w Obj7E_Exit-Obj7E_Index
   15224/    C5A6 : 015C                		dc.w loc_C91A-Obj7E_Index
   15225/    C5A8 :                     ; ===========================================================================
   15226/    C5A8 :                     
   15227/    C5A8 :                     Obj7E_ChkPLC:				; XREF: Obj7E_Index
   15228/    C5A8 : 4AB8 F680           		tst.l	($FFFFF680).w	; are the pattern load cues empty?
   15229/    C5AC : 6702                		beq.s	Obj7E_Main	; if yes, branch
   15230/    C5AE : 4E75                		rts	
   15231/    C5B0 :                     ; ===========================================================================
   15232/    C5B0 :                     
   15233/    C5B0 :                     Obj7E_Main:
   15234/    C5B0 : 2248                		movea.l	a0,a1
   15235/    C5B2 : 45F9 0000 C702      		lea	(Obj7E_Config).l,a2
   15236/    C5B8 : 7203                		moveq	#3,d1
   15237/    C5BA : 0C78 0032 FE20      		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
   15238/    C5C0 : 6502                		bcs.s	Obj7E_Loop	; if no, branch
   15239/    C5C2 : 5241                		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
   15240/    C5C4 :                     
   15241/    C5C4 :                     Obj7E_Loop:
   15242/    C5C4 : 12BC 007E           		move.b	#$7E,0(a1)
   15243/    C5C8 : 335A 0008           		move.w	(a2)+,8(a1)	; load start x-position
   15244/    C5CC : 335A 0030           		move.w	(a2)+,$30(a1)	; load main x-position
   15245/    C5D0 : 335A 000A           		move.w	(a2)+,$A(a1)	; load y-position
   15246/    C5D4 : 135A 0024           		move.b	(a2)+,$24(a1)
   15247/    C5D8 : 135A 001A           		move.b	(a2)+,$1A(a1)
   15248/    C5DC : 237C 0000 CA6C      		move.l	#Map_obj7E,4(a1)
             C5E2 : 0004             
   15249/    C5E4 : 337C 8580 0002      		move.w	#$8580,2(a1)
   15250/    C5EA : 137C 0000 0001      		move.b	#0,1(a1)
   15251/    C5F0 : 43E9 0040           		lea	$40(a1),a1
   15252/    C5F4 : 51C9 FFCE           		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
   15253/    C5F8 :                     
   15254/    C5F8 : 7007                		moveq	#7,d0
   15255/    C5FA : 1238 FE57           		move.b	($FFFFFE57).w,d1
   15256/    C5FE : 6716                		beq.s	loc_C842
   15257/    C600 : 7000                		moveq	#0,d0
   15258/    C602 : 0C01 0006           		cmpi.b	#6,d1		; do you have all chaos	emeralds?
   15259/    C606 : 660E                		bne.s	loc_C842	; if not, branch
   15260/    C608 : 7008                		moveq	#8,d0		; load "Sonic got them all" text
   15261/    C60A : 317C 0018 0008      		move.w	#$18,8(a0)
   15262/    C610 : 317C 0118 0030      		move.w	#$118,$30(a0)	; change position of text
   15263/    C616 :                     
   15264/    C616 :                     loc_C842:
   15265/    C616 : 1140 001A           		move.b	d0,$1A(a0)
   15266/    C61A :                     
   15267/    C61A :                     Obj7E_ChkPos:				; XREF: Obj7E_Index
   15268/    C61A : 7210                		moveq	#$10,d1		; set horizontal speed
   15269/    C61C : 3028 0030           		move.w	$30(a0),d0
   15270/    C620 : B068 0008           		cmp.w	8(a0),d0	; has item reached its target position?
   15271/    C624 : 671A                		beq.s	loc_C86C	; if yes, branch
   15272/    C626 : 6C02                		bge.s	Obj7E_Move
   15273/    C628 : 4441                		neg.w	d1
   15274/    C62A :                     
   15275/    C62A :                     Obj7E_Move:
   15276/    C62A : D368 0008           		add.w	d1,8(a0)	; change item's position
   15277/    C62E :                     
   15278/    C62E :                     loc_C85A:				; XREF: loc_C86C
   15279/    C62E : 3028 0008           		move.w	8(a0),d0
   15280/    C632 : 6B0A                		bmi.s	locret_C86A
   15281/    C634 : 0C40 0200           		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
   15282/    C638 : 6404                		bcc.s	locret_C86A	; if yes, branch
   15283/    C63A : 6000 0D96           		bra.w	DisplaySprite
   15284/    C63E :                     ; ===========================================================================
   15285/    C63E :                     
   15286/    C63E :                     locret_C86A:
   15287/    C63E : 4E75                		rts	
   15288/    C640 :                     ; ===========================================================================
   15289/    C640 :                     
   15290/    C640 :                     loc_C86C:				; XREF: Obj7E_ChkPos
   15291/    C640 : 0C28 0002 001A      		cmpi.b	#2,$1A(a0)
   15292/    C646 : 66E6                		bne.s	loc_C85A
   15293/    C648 : 5428 0024           		addq.b	#2,$24(a0)
   15294/    C64C : 317C 00B4 001E      		move.w	#180,$1E(a0)	; set time delay to 3 seconds
   15295/    C652 : 11FC 007F D800      		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
   15296/    C658 :                     
   15297/    C658 :                     Obj7E_Wait:				; XREF: Obj7E_Index
   15298/    C658 : 5368 001E           		subq.w	#1,$1E(a0)	; subtract 1 from time delay
   15299/    C65C : 6604                		bne.s	Obj7E_Display
   15300/    C65E : 5428 0024           		addq.b	#2,$24(a0)
   15301/    C662 :                     
   15302/    C662 :                     Obj7E_Display:
   15303/    C662 : 6000 0D6E           		bra.w	DisplaySprite
   15304/    C666 :                     ; ===========================================================================
   15305/    C666 :                     
   15306/    C666 :                     Obj7E_RingBonus:			; XREF: Obj7E_Index
   15307/    C666 : 6100 0D6A           		bsr.w	DisplaySprite
   15308/    C66A : 11FC 0001 F7D6      		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
   15309/    C670 : 4A78 F7D4           		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
   15310/    C674 : 6722                		beq.s	loc_C8C4	; if yes, branch
   15311/    C676 : 0478 000A F7D4      		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
   15312/    C67C : 700A                		moveq	#10,d0		; add 10 to score
   15313/    C67E : 4EB9 0001 C6E8      		jsr	AddPoints
   15314/    C684 : 1038 FE0F           		move.b	($FFFFFE0F).w,d0
   15315/    C688 : 0200 0003           		andi.b	#3,d0
   15316/    C68C : 6630                		bne.s	locret_C8EA
   15317/    C68E : 303C 00CD           		move.w	#$CD,d0
   15318/    C692 : 4EF9 0000 1182      		jmp	(PlaySound_Special).l ;	play "blip" sound
   15319/    C698 :                     ; ===========================================================================
   15320/    C698 :                     
   15321/    C698 :                     loc_C8C4:				; XREF: Obj7E_RingBonus
   15322/    C698 : 303C 00C5           		move.w	#$C5,d0
   15323/    C69C : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
   15324/    C6A2 : 5428 0024           		addq.b	#2,$24(a0)
   15325/    C6A6 : 317C 00B4 001E      		move.w	#180,$1E(a0)	; set time delay to 3 seconds
   15326/    C6AC : 0C78 0032 FE20      		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
   15327/    C6B2 : 650A                		bcs.s	locret_C8EA	; if not, branch
   15328/    C6B4 : 317C 003C 001E      		move.w	#60,$1E(a0)	; set time delay to 1 second
   15329/    C6BA : 5828 0024           		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
   15330/    C6BE :                     
   15331/    C6BE :                     locret_C8EA:
   15332/    C6BE : 4E75                		rts	
   15333/    C6C0 :                     ; ===========================================================================
   15334/    C6C0 :                     
   15335/    C6C0 :                     Obj7E_Exit:				; XREF: Obj7E_Index
   15336/    C6C0 : 31FC 0001 FE02      		move.w	#1,($FFFFFE02).w ; restart level
   15337/    C6C6 : 6000 0D0A           		bra.w	DisplaySprite
   15338/    C6CA :                     ; ===========================================================================
   15339/    C6CA :                     
   15340/    C6CA :                     Obj7E_Continue:				; XREF: Obj7E_Index
   15341/    C6CA : 11FC 0004 D6DA      		move.b	#4,($FFFFD6DA).w
   15342/    C6D0 : 11FC 0014 D6E4      		move.b	#$14,($FFFFD6E4).w
   15343/    C6D6 : 303C 00BF           		move.w	#$BF,d0
   15344/    C6DA : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play continues music
   15345/    C6E0 : 5428 0024           		addq.b	#2,$24(a0)
   15346/    C6E4 : 317C 0168 001E      		move.w	#360,$1E(a0)	; set time delay to 6 seconds
   15347/    C6EA : 6000 0CE6           		bra.w	DisplaySprite
   15348/    C6EE :                     ; ===========================================================================
   15349/    C6EE :                     
   15350/    C6EE :                     loc_C91A:				; XREF: Obj7E_Index
   15351/    C6EE : 1038 FE0F           		move.b	($FFFFFE0F).w,d0
   15352/    C6F2 : 0200 000F           		andi.b	#$F,d0
   15353/    C6F6 : 6606                		bne.s	Obj7E_Display2
   15354/    C6F8 : 0868 0000 001A      		bchg	#0,$1A(a0)
   15355/    C6FE :                     
   15356/    C6FE :                     Obj7E_Display2:
   15357/    C6FE : 6000 0CD2           		bra.w	DisplaySprite
   15358/    C702 :                     ; ===========================================================================
   15359/    C702 : 0020 0120 00C4      Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
   15360/    C708 : 0200                		dc.b 2,	0		; rountine number, frame number
   15361/    C70A : 0320 0120 0118      		dc.w $320, $120, $118
   15362/    C710 : 0201                		dc.b 2,	1
   15363/    C712 : 0360 0120 0128      		dc.w $360, $120, $128
   15364/    C718 : 0202                		dc.b 2,	2
   15365/    C71A : 01EC 011C 00C4      		dc.w $1EC, $11C, $C4
   15366/    C720 : 0203                		dc.b 2,	3
   15367/    C722 : 03A0 0120 0138      		dc.w $3A0, $120, $138
   15368/    C728 : 0206                		dc.b 2,	6
   15369/    C72A :                     ; ===========================================================================
   15370/    C72A :                     ; ---------------------------------------------------------------------------
   15371/    C72A :                     ; Object 7F - chaos emeralds from the special stage results screen
   15372/    C72A :                     ; ---------------------------------------------------------------------------
   15373/    C72A :                     
   15374/    C72A :                     Obj7F:					; XREF: Obj_Index
   15375/    C72A : 7000                		moveq	#0,d0
   15376/    C72C : 1028 0024           		move.b	$24(a0),d0
   15377/    C730 : 323B 0006           		move.w	Obj7F_Index(pc,d0.w),d1
   15378/    C734 : 4EFB 1002           		jmp	Obj7F_Index(pc,d1.w)
   15379/    C738 :                     ; ===========================================================================
   15380/    C738 : 0010                Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
   15381/    C73A : 0066                		dc.w Obj7F_Flash-Obj7F_Index
   15382/    C73C :                     
   15383/    C73C :                     ; ---------------------------------------------------------------------------
   15384/    C73C :                     ; X-axis positions for chaos emeralds
   15385/    C73C :                     ; ---------------------------------------------------------------------------
   15386/    C73C : 0110 0128 00F8      Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
             C742 : 0140 00E0 0158    
   15387/    C748 :                     ; ===========================================================================
   15388/    C748 :                     
   15389/    C748 :                     Obj7F_Main:				; XREF: Obj7F_Index
   15390/    C748 : 2248                		movea.l	a0,a1
   15391/    C74A : 45F9 0000 C73C      		lea	(Obj7F_PosData).l,a2
   15392/    C750 : 7400                		moveq	#0,d2
   15393/    C752 : 7200                		moveq	#0,d1
   15394/    C754 : 1238 FE57           		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
   15395/    C758 : 5301                		subq.b	#1,d1		; subtract 1 from d1
   15396/    C75A : 6500 0CB2           		bcs.w	DeleteObject	; if you have 0	emeralds, branch
   15397/    C75E :                     
   15398/    C75E :                     Obj7F_Loop:
   15399/    C75E : 12BC 007F           		move.b	#$7F,0(a1)
   15400/    C762 : 335A 0008           		move.w	(a2)+,8(a1)	; set x-position
   15401/    C766 : 337C 00F0 000A      		move.w	#$F0,$A(a1)	; set y-position
   15402/    C76C : 47F8 FE58           		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
   15403/    C770 : 1633 2000           		move.b	(a3,d2.w),d3
   15404/    C774 : 1343 001A           		move.b	d3,$1A(a1)
   15405/    C778 : 1343 001C           		move.b	d3,$1C(a1)
   15406/    C77C : 5202                		addq.b	#1,d2
   15407/    C77E : 5429 0024           		addq.b	#2,$24(a1)
   15408/    C782 : 237C 0000 CBC6      		move.l	#Map_obj7F,4(a1)
             C788 : 0004             
   15409/    C78A : 337C 8541 0002      		move.w	#$8541,2(a1)
   15410/    C790 : 137C 0000 0001      		move.b	#0,1(a1)
   15411/    C796 : 43E9 0040           		lea	$40(a1),a1	; next object
   15412/    C79A : 51C9 FFC2           		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
   15413/    C79E :                     
   15414/    C79E :                     Obj7F_Flash:				; XREF: Obj7F_Index
   15415/    C79E : 1028 001A           		move.b	$1A(a0),d0
   15416/    C7A2 : 117C 0006 001A      		move.b	#6,$1A(a0)	; load 6th frame (blank)
   15417/    C7A8 : 0C00 0006           		cmpi.b	#6,d0
   15418/    C7AC : 6606                		bne.s	Obj7F_Display
   15419/    C7AE : 1168 001C 001A      		move.b	$1C(a0),$1A(a0)	; load visible frame
   15420/    C7B4 :                     
   15421/    C7B4 :                     Obj7F_Display:
   15422/    C7B4 : 6000 0C1C           		bra.w	DisplaySprite
   15423/    C7B8 :                     ; ===========================================================================
   15424/    C7B8 :                     ; ---------------------------------------------------------------------------
   15425/    C7B8 :                     ; Sprite mappings - zone title cards
   15426/    C7B8 :                     ; ---------------------------------------------------------------------------
   15427/    C7B8 : 0018                Map_obj34:	dc.w byte_C9FE-Map_obj34
   15428/    C7BA : 0046                		dc.w byte_CA2C-Map_obj34
   15429/    C7BC : 0074                		dc.w byte_CA5A-Map_obj34
   15430/    C7BE : 0094                		dc.w byte_CA7A-Map_obj34
   15431/    C7C0 : 00C2                		dc.w byte_CAA8-Map_obj34
   15432/    C7C2 : 00F6                		dc.w byte_CADC-Map_obj34
   15433/    C7C4 : 012A                		dc.w byte_CB10-Map_obj34
   15434/    C7C6 : 0140                		dc.w byte_CB26-Map_obj34
   15435/    C7C8 : 014B                		dc.w byte_CB31-Map_obj34
   15436/    C7CA : 0156                		dc.w byte_CB3C-Map_obj34
   15437/    C7CC : 0161                		dc.w byte_CB47-Map_obj34
   15438/    C7CE : 01A4                		dc.w byte_CB8A-Map_obj34
   15439/    C7D0 : 09                  byte_C9FE:	dc.b 9 			; GREEN HILL
   15440/    C7D1 : F805 0018 B4        		dc.b $F8, 5, 0,	$18, $B4
   15441/    C7D6 : F805 003A C4        		dc.b $F8, 5, 0,	$3A, $C4
   15442/    C7DB : F805 0010 D4        		dc.b $F8, 5, 0,	$10, $D4
   15443/    C7E0 : F805 0010 E4        		dc.b $F8, 5, 0,	$10, $E4
   15444/    C7E5 : F805 002E F4        		dc.b $F8, 5, 0,	$2E, $F4
   15445/    C7EA : F805 001C 14        		dc.b $F8, 5, 0,	$1C, $14
   15446/    C7EF : F801 0020 24        		dc.b $F8, 1, 0,	$20, $24
   15447/    C7F4 : F805 0026 2C        		dc.b $F8, 5, 0,	$26, $2C
   15448/    C7F9 : F805 0026 3C        		dc.b $F8, 5, 0,	$26, $3C
   15449/    C7FE : 09                  byte_CA2C:	dc.b 9			; LABYRINTH
   15450/    C7FF : F805 0026 BC        		dc.b $F8, 5, 0,	$26, $BC
   15451/    C804 : F805 0000 CC        		dc.b $F8, 5, 0,	0, $CC
   15452/    C809 : F805 0004 DC        		dc.b $F8, 5, 0,	4, $DC
   15453/    C80E : F805 004A EC        		dc.b $F8, 5, 0,	$4A, $EC
   15454/    C813 : F805 003A FC        		dc.b $F8, 5, 0,	$3A, $FC
   15455/    C818 : F801 0020 0C        		dc.b $F8, 1, 0,	$20, $C
   15456/    C81D : F805 002E 14        		dc.b $F8, 5, 0,	$2E, $14
   15457/    C822 : F805 0042 24        		dc.b $F8, 5, 0,	$42, $24
   15458/    C827 : F805 001C 34        		dc.b $F8, 5, 0,	$1C, $34
   15459/    C82C : 06                  byte_CA5A:	dc.b 6			; MARBLE
   15460/    C82D : F805 002A CF        		dc.b $F8, 5, 0,	$2A, $CF
   15461/    C832 : F805 0000 E0        		dc.b $F8, 5, 0,	0, $E0
   15462/    C837 : F805 003A F0        		dc.b $F8, 5, 0,	$3A, $F0
   15463/    C83C : F805 0004 00        		dc.b $F8, 5, 0,	4, 0
   15464/    C841 : F805 0026 10        		dc.b $F8, 5, 0,	$26, $10
   15465/    C846 : F805 0010 20        		dc.b $F8, 5, 0,	$10, $20
   15466/    C84B : 00                  		dc.b 0
   15467/    C84C : 09                  byte_CA7A:	dc.b 9			; STAR	LIGHT
   15468/    C84D : F805 003E B4        		dc.b $F8, 5, 0,	$3E, $B4
   15469/    C852 : F805 0042 C4        		dc.b $F8, 5, 0,	$42, $C4
   15470/    C857 : F805 0000 D4        		dc.b $F8, 5, 0,	0, $D4
   15471/    C85C : F805 003A E4        		dc.b $F8, 5, 0,	$3A, $E4
   15472/    C861 : F805 0026 04        		dc.b $F8, 5, 0,	$26, 4
   15473/    C866 : F801 0020 14        		dc.b $F8, 1, 0,	$20, $14
   15474/    C86B : F805 0018 1C        		dc.b $F8, 5, 0,	$18, $1C
   15475/    C870 : F805 001C 2C        		dc.b $F8, 5, 0,	$1C, $2C
   15476/    C875 : F805 0042 3C        		dc.b $F8, 5, 0,	$42, $3C
   15477/    C87A : 0A                  byte_CAA8:	dc.b $A			; SPRING YARD
   15478/    C87B : F805 003E AC        		dc.b $F8, 5, 0,	$3E, $AC
   15479/    C880 : F805 0036 BC        		dc.b $F8, 5, 0,	$36, $BC
   15480/    C885 : F805 003A CC        		dc.b $F8, 5, 0,	$3A, $CC
   15481/    C88A : F801 0020 DC        		dc.b $F8, 1, 0,	$20, $DC
   15482/    C88F : F805 002E E4        		dc.b $F8, 5, 0,	$2E, $E4
   15483/    C894 : F805 0018 F4        		dc.b $F8, 5, 0,	$18, $F4
   15484/    C899 : F805 004A 14        		dc.b $F8, 5, 0,	$4A, $14
   15485/    C89E : F805 0000 24        		dc.b $F8, 5, 0,	0, $24
   15486/    C8A3 : F805 003A 34        		dc.b $F8, 5, 0,	$3A, $34
   15487/    C8A8 : F805 000C 44        		dc.b $F8, 5, 0,	$C, $44
   15488/    C8AD : 00                  		dc.b 0
   15489/    C8AE : 0A                  byte_CADC:	dc.b $A			; SCRAP BRAIN
   15490/    C8AF : F805 003E AC        		dc.b $F8, 5, 0,	$3E, $AC
   15491/    C8B4 : F805 0008 BC        		dc.b $F8, 5, 0,	8, $BC
   15492/    C8B9 : F805 003A CC        		dc.b $F8, 5, 0,	$3A, $CC
   15493/    C8BE : F805 0000 DC        		dc.b $F8, 5, 0,	0, $DC
   15494/    C8C3 : F805 0036 EC        		dc.b $F8, 5, 0,	$36, $EC
   15495/    C8C8 : F805 0004 0C        		dc.b $F8, 5, 0,	4, $C
   15496/    C8CD : F805 003A 1C        		dc.b $F8, 5, 0,	$3A, $1C
   15497/    C8D2 : F805 0000 2C        		dc.b $F8, 5, 0,	0, $2C
   15498/    C8D7 : F801 0020 3C        		dc.b $F8, 1, 0,	$20, $3C
   15499/    C8DC : F805 002E 44        		dc.b $F8, 5, 0,	$2E, $44
   15500/    C8E1 : 00                  		dc.b 0
   15501/    C8E2 : 04                  byte_CB10:	dc.b 4			; ZONE
   15502/    C8E3 : F805 004E E0        		dc.b $F8, 5, 0,	$4E, $E0
   15503/    C8E8 : F805 0032 F0        		dc.b $F8, 5, 0,	$32, $F0
   15504/    C8ED : F805 002E 00        		dc.b $F8, 5, 0,	$2E, 0
   15505/    C8F2 : F805 0010 10        		dc.b $F8, 5, 0,	$10, $10
   15506/    C8F7 : 00                  		dc.b 0
   15507/    C8F8 : 02                  byte_CB26:	dc.b 2			; ACT 1
   15508/    C8F9 : 040C 0053 EC        		dc.b 4,	$C, 0, $53, $EC
   15509/    C8FE : F402 0057 0C        		dc.b $F4, 2, 0,	$57, $C
   15510/    C903 : 02                  byte_CB31:	dc.b 2			; ACT 2
   15511/    C904 : 040C 0053 EC        		dc.b 4,	$C, 0, $53, $EC
   15512/    C909 : F406 005A 08        		dc.b $F4, 6, 0,	$5A, 8
   15513/    C90E : 02                  byte_CB3C:	dc.b 2			; ACT 3
   15514/    C90F : 040C 0053 EC        		dc.b 4,	$C, 0, $53, $EC
   15515/    C914 : F406 0060 08        		dc.b $F4, 6, 0,	$60, 8
   15516/    C919 : 0D                  byte_CB47:	dc.b $D			; Oval
   15517/    C91A : E40C 0070 F4        		dc.b $E4, $C, 0, $70, $F4
   15518/    C91F : E402 0074 14        		dc.b $E4, 2, 0,	$74, $14
   15519/    C924 : EC04 0077 EC        		dc.b $EC, 4, 0,	$77, $EC
   15520/    C929 : F405 0079 E4        		dc.b $F4, 5, 0,	$79, $E4
   15521/    C92E : 140C 1870 EC        		dc.b $14, $C, $18, $70,	$EC
   15522/    C933 : 0402 1874 E4        		dc.b 4,	2, $18,	$74, $E4
   15523/    C938 : 0C04 1877 04        		dc.b $C, 4, $18, $77, 4
   15524/    C93D : FC05 1879 0C        		dc.b $FC, 5, $18, $79, $C
   15525/    C942 : EC08 007D FC        		dc.b $EC, 8, 0,	$7D, $FC
   15526/    C947 : F40C 007C F4        		dc.b $F4, $C, 0, $7C, $F4
   15527/    C94C : FC08 007C F4        		dc.b $FC, 8, 0,	$7C, $F4
   15528/    C951 : 040C 007C EC        		dc.b 4,	$C, 0, $7C, $EC
   15529/    C956 : 0C08 007C EC        		dc.b $C, 8, 0, $7C, $EC
   15530/    C95B : 00                  		dc.b 0
   15531/    C95C : 05                  byte_CB8A:	dc.b 5			; FINAL
   15532/    C95D : F805 0014 DC        		dc.b $F8, 5, 0,	$14, $DC
   15533/    C962 : F801 0020 EC        		dc.b $F8, 1, 0,	$20, $EC
   15534/    C967 : F805 002E F4        		dc.b $F8, 5, 0,	$2E, $F4
   15535/    C96C : F805 0000 04        		dc.b $F8, 5, 0,	0, 4
   15536/    C971 : F805 0026 14        		dc.b $F8, 5, 0,	$26, $14
   15537/    C976 : (MACRO)              		even
   15538/    C976 :                     ; ---------------------------------------------------------------------------
   15539/    C976 :                     ; Sprite mappings - "GAME OVER"	and "TIME OVER"
   15540/    C976 :                     ; ---------------------------------------------------------------------------
   15541/    C976 :                     Map_obj39:
   15542/    C976 :                     	include "_mappings/obj39.asm"
(1)    1/    C976 :                     ; ---------------------------------------------------------------------------
(1)    2/    C976 :                     ; Sprite mappings - "GAME OVER"	and "TIME OVER"
(1)    3/    C976 :                     ; ---------------------------------------------------------------------------
(1)    4/    C976 : 0008                		dc.w byte_CBAC-Map_obj39
(1)    5/    C978 : 0013                		dc.w byte_CBB7-Map_obj39
(1)    6/    C97A : 001E                		dc.w byte_CBC2-Map_obj39
(1)    7/    C97C : 0029                		dc.w byte_CBCD-Map_obj39
(1)    8/    C97E : 02                  byte_CBAC:	dc.b 2
(1)    9/    C97F : F80D 0000 B8        		dc.b $F8, $D, 0, 0, $B8
(1)   10/    C984 : F80D 0008 D8        		dc.b $F8, $D, 0, 8, $D8
(1)   11/    C989 : 02                  byte_CBB7:	dc.b 2
(1)   12/    C98A : F80D 0014 08        		dc.b $F8, $D, 0, $14, 8
(1)   13/    C98F : F80D 000C 28        		dc.b $F8, $D, 0, $C, $28
(1)   14/    C994 : 02                  byte_CBC2:	dc.b 2
(1)   15/    C995 : F809 001C C4        		dc.b $F8, 9, 0,	$1C, $C4
(1)   16/    C99A : F80D 0008 DC        		dc.b $F8, $D, 0, 8, $DC
(1)   17/    C99F : 02                  byte_CBCD:	dc.b 2
(1)   18/    C9A0 : F80D 0014 0C        		dc.b $F8, $D, 0, $14, $C
(1)   19/    C9A5 : F80D 000C 2C        		dc.b $F8, $D, 0, $C, $2C
(1)   20/    C9AA : (MACRO)              		even
   15543/    C9AA :                     
   15544/    C9AA :                     ; ---------------------------------------------------------------------------
   15545/    C9AA :                     ; Sprite mappings - "SONIC HAS PASSED" title card
   15546/    C9AA :                     ; ---------------------------------------------------------------------------
   15547/    C9AA : 0012                Map_obj3A:	dc.w byte_CBEA-Map_obj3A
   15548/    C9AC : 003B                		dc.w byte_CC13-Map_obj3A
   15549/    C9AE : 005A                		dc.w byte_CC32-Map_obj3A
   15550/    C9B0 : 0079                		dc.w byte_CC51-Map_obj3A
   15551/    C9B2 : 009D                		dc.w byte_CC75-Map_obj3A
   15552/    C9B4 : FF6F                		dc.w byte_CB47-Map_obj3A
   15553/    C9B6 : FF4E                		dc.w byte_CB26-Map_obj3A
   15554/    C9B8 : FF59                		dc.w byte_CB31-Map_obj3A
   15555/    C9BA : FF64                		dc.w byte_CB3C-Map_obj3A
   15556/    C9BC : 08                  byte_CBEA:	dc.b 8			; SONIC HAS
   15557/    C9BD : F805 003E B8        		dc.b $F8, 5, 0,	$3E, $B8
   15558/    C9C2 : F805 0032 C8        		dc.b $F8, 5, 0,	$32, $C8
   15559/    C9C7 : F805 002E D8        		dc.b $F8, 5, 0,	$2E, $D8
   15560/    C9CC : F801 0020 E8        		dc.b $F8, 1, 0,	$20, $E8
   15561/    C9D1 : F805 0008 F0        		dc.b $F8, 5, 0,	8, $F0
   15562/    C9D6 : F805 001C 10        		dc.b $F8, 5, 0,	$1C, $10
   15563/    C9DB : F805 0000 20        		dc.b $F8, 5, 0,	0, $20
   15564/    C9E0 : F805 003E 30        		dc.b $F8, 5, 0,	$3E, $30
   15565/    C9E5 : 06                  byte_CC13:	dc.b 6			; PASSED
   15566/    C9E6 : F805 0036 D0        		dc.b $F8, 5, 0,	$36, $D0
   15567/    C9EB : F805 0000 E0        		dc.b $F8, 5, 0,	0, $E0
   15568/    C9F0 : F805 003E F0        		dc.b $F8, 5, 0,	$3E, $F0
   15569/    C9F5 : F805 003E 00        		dc.b $F8, 5, 0,	$3E, 0
   15570/    C9FA : F805 0010 10        		dc.b $F8, 5, 0,	$10, $10
   15571/    C9FF : F805 000C 20        		dc.b $F8, 5, 0,	$C, $20
   15572/    CA04 : 06                  byte_CC32:	dc.b 6			; SCORE
   15573/    CA05 : F80D 014A B0        		dc.b $F8, $D, 1, $4A, $B0
   15574/    CA0A : F801 0162 D0        		dc.b $F8, 1, 1,	$62, $D0
   15575/    CA0F : F809 0164 18        		dc.b $F8, 9, 1,	$64, $18
   15576/    CA14 : F80D 016A 30        		dc.b $F8, $D, 1, $6A, $30
   15577/    CA19 : F704 006E CD        		dc.b $F7, 4, 0,	$6E, $CD
   15578/    CA1E : FF04 186E CD        		dc.b $FF, 4, $18, $6E, $CD
   15579/    CA23 : 07                  byte_CC51:	dc.b 7			; TIME BONUS
   15580/    CA24 : F80D 015A B0        		dc.b $F8, $D, 1, $5A, $B0
   15581/    CA29 : F80D 0066 D9        		dc.b $F8, $D, 0, $66, $D9
   15582/    CA2E : F801 014A F9        		dc.b $F8, 1, 1,	$4A, $F9
   15583/    CA33 : F704 006E F6        		dc.b $F7, 4, 0,	$6E, $F6
   15584/    CA38 : FF04 186E F6        		dc.b $FF, 4, $18, $6E, $F6
   15585/    CA3D : F80D FFF0 28        		dc.b $F8, $D, $FF, $F0,	$28
   15586/    CA42 : F801 0170 48        		dc.b $F8, 1, 1,	$70, $48
   15587/    CA47 : 07                  byte_CC75:	dc.b 7			; RING BONUS
   15588/    CA48 : F80D 0152 B0        		dc.b $F8, $D, 1, $52, $B0
   15589/    CA4D : F80D 0066 D9        		dc.b $F8, $D, 0, $66, $D9
   15590/    CA52 : F801 014A F9        		dc.b $F8, 1, 1,	$4A, $F9
   15591/    CA57 : F704 006E F6        		dc.b $F7, 4, 0,	$6E, $F6
   15592/    CA5C : FF04 186E F6        		dc.b $FF, 4, $18, $6E, $F6
   15593/    CA61 : F80D FFF8 28        		dc.b $F8, $D, $FF, $F8,	$28
   15594/    CA66 : F801 0170 48        		dc.b $F8, 1, 1,	$70, $48
   15595/    CA6B : (MACRO)              		even
   15595/    CA6B : 00                                          dc.b 0 ;ds.b 1 
   15596/    CA6C :                     ; ---------------------------------------------------------------------------
   15597/    CA6C :                     ; Sprite mappings - special stage results screen
   15598/    CA6C :                     ; ---------------------------------------------------------------------------
   15599/    CA6C : 0012                Map_obj7E:	dc.w byte_CCAC-Map_obj7E
   15600/    CA6E : 0054                		dc.w byte_CCEE-Map_obj7E
   15601/    CA70 : 0073                		dc.w byte_CD0D-Map_obj7E
   15602/    CA72 : FEAD                		dc.w byte_CB47-Map_obj7E
   15603/    CA74 : 0097                		dc.w byte_CD31-Map_obj7E
   15604/    CA76 : 00AC                		dc.w byte_CD46-Map_obj7E
   15605/    CA78 : 00C1                		dc.w byte_CD5B-Map_obj7E
   15606/    CA7A : 00D1                		dc.w byte_CD6B-Map_obj7E
   15607/    CA7C : 010E                		dc.w byte_CDA8-Map_obj7E
   15608/    CA7E : 0D                  byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
   15609/    CA7F : F805 0008 90        		dc.b $F8, 5, 0,	8, $90
   15610/    CA84 : F805 001C A0        		dc.b $F8, 5, 0,	$1C, $A0
   15611/    CA89 : F805 0000 B0        		dc.b $F8, 5, 0,	0, $B0
   15612/    CA8E : F805 0032 C0        		dc.b $F8, 5, 0,	$32, $C0
   15613/    CA93 : F805 003E D0        		dc.b $F8, 5, 0,	$3E, $D0
   15614/    CA98 : F805 0010 F0        		dc.b $F8, 5, 0,	$10, $F0
   15615/    CA9D : F805 002A 00        		dc.b $F8, 5, 0,	$2A, 0
   15616/    CAA2 : F805 0010 10        		dc.b $F8, 5, 0,	$10, $10
   15617/    CAA7 : F805 003A 20        		dc.b $F8, 5, 0,	$3A, $20
   15618/    CAAC : F805 0000 30        		dc.b $F8, 5, 0,	0, $30
   15619/    CAB1 : F805 0026 40        		dc.b $F8, 5, 0,	$26, $40
   15620/    CAB6 : F805 000C 50        		dc.b $F8, 5, 0,	$C, $50
   15621/    CABB : F805 003E 60        		dc.b $F8, 5, 0,	$3E, $60
   15622/    CAC0 : 06                  byte_CCEE:	dc.b 6			; "SCORE"
   15623/    CAC1 : F80D 014A B0        		dc.b $F8, $D, 1, $4A, $B0
   15624/    CAC6 : F801 0162 D0        		dc.b $F8, 1, 1,	$62, $D0
   15625/    CACB : F809 0164 18        		dc.b $F8, 9, 1,	$64, $18
   15626/    CAD0 : F80D 016A 30        		dc.b $F8, $D, 1, $6A, $30
   15627/    CAD5 : F704 006E CD        		dc.b $F7, 4, 0,	$6E, $CD
   15628/    CADA : FF04 186E CD        		dc.b $FF, 4, $18, $6E, $CD
   15629/    CADF : 07                  byte_CD0D:	dc.b 7
   15630/    CAE0 : F80D 0152 B0        		dc.b $F8, $D, 1, $52, $B0
   15631/    CAE5 : F80D 0066 D9        		dc.b $F8, $D, 0, $66, $D9
   15632/    CAEA : F801 014A F9        		dc.b $F8, 1, 1,	$4A, $F9
   15633/    CAEF : F704 006E F6        		dc.b $F7, 4, 0,	$6E, $F6
   15634/    CAF4 : FF04 186E F6        		dc.b $FF, 4, $18, $6E, $F6
   15635/    CAF9 : F80D FFF8 28        		dc.b $F8, $D, $FF, $F8,	$28
   15636/    CAFE : F801 0170 48        		dc.b $F8, 1, 1,	$70, $48
   15637/    CB03 : 04                  byte_CD31:	dc.b 4
   15638/    CB04 : F80D FFD1 B0        		dc.b $F8, $D, $FF, $D1,	$B0
   15639/    CB09 : F80D FFD9 D0        		dc.b $F8, $D, $FF, $D9,	$D0
   15640/    CB0E : F801 FFE1 F0        		dc.b $F8, 1, $FF, $E1, $F0
   15641/    CB13 : F806 1FE3 40        		dc.b $F8, 6, $1F, $E3, $40
   15642/    CB18 : 04                  byte_CD46:	dc.b 4
   15643/    CB19 : F80D FFD1 B0        		dc.b $F8, $D, $FF, $D1,	$B0
   15644/    CB1E : F80D FFD9 D0        		dc.b $F8, $D, $FF, $D9,	$D0
   15645/    CB23 : F801 FFE1 F0        		dc.b $F8, 1, $FF, $E1, $F0
   15646/    CB28 : F806 1FE9 40        		dc.b $F8, 6, $1F, $E9, $40
   15647/    CB2D : 03                  byte_CD5B:	dc.b 3
   15648/    CB2E : F80D FFD1 B0        		dc.b $F8, $D, $FF, $D1,	$B0
   15649/    CB33 : F80D FFD9 D0        		dc.b $F8, $D, $FF, $D9,	$D0
   15650/    CB38 : F801 FFE1 F0        		dc.b $F8, 1, $FF, $E1, $F0
   15651/    CB3D : 0C                  byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
   15652/    CB3E : F805 003E 9C        		dc.b $F8, 5, 0,	$3E, $9C
   15653/    CB43 : F805 0036 AC        		dc.b $F8, 5, 0,	$36, $AC
   15654/    CB48 : F805 0010 BC        		dc.b $F8, 5, 0,	$10, $BC
   15655/    CB4D : F805 0008 CC        		dc.b $F8, 5, 0,	8, $CC
   15656/    CB52 : F801 0020 DC        		dc.b $F8, 1, 0,	$20, $DC
   15657/    CB57 : F805 0000 E4        		dc.b $F8, 5, 0,	0, $E4
   15658/    CB5C : F805 0026 F4        		dc.b $F8, 5, 0,	$26, $F4
   15659/    CB61 : F805 003E 14        		dc.b $F8, 5, 0,	$3E, $14
   15660/    CB66 : F805 0042 24        		dc.b $F8, 5, 0,	$42, $24
   15661/    CB6B : F805 0000 34        		dc.b $F8, 5, 0,	0, $34
   15662/    CB70 : F805 0018 44        		dc.b $F8, 5, 0,	$18, $44
   15663/    CB75 : F805 0010 54        		dc.b $F8, 5, 0,	$10, $54
   15664/    CB7A : 0F                  byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
   15665/    CB7B : F805 003E 88        		dc.b $F8, 5, 0,	$3E, $88
   15666/    CB80 : F805 0032 98        		dc.b $F8, 5, 0,	$32, $98
   15667/    CB85 : F805 002E A8        		dc.b $F8, 5, 0,	$2E, $A8
   15668/    CB8A : F801 0020 B8        		dc.b $F8, 1, 0,	$20, $B8
   15669/    CB8F : F805 0008 C0        		dc.b $F8, 5, 0,	8, $C0
   15670/    CB94 : F805 0018 D8        		dc.b $F8, 5, 0,	$18, $D8
   15671/    CB99 : F805 0032 E8        		dc.b $F8, 5, 0,	$32, $E8
   15672/    CB9E : F805 0042 F8        		dc.b $F8, 5, 0,	$42, $F8
   15673/    CBA3 : F805 0042 10        		dc.b $F8, 5, 0,	$42, $10
   15674/    CBA8 : F805 001C 20        		dc.b $F8, 5, 0,	$1C, $20
   15675/    CBAD : F805 0010 30        		dc.b $F8, 5, 0,	$10, $30
   15676/    CBB2 : F805 002A 40        		dc.b $F8, 5, 0,	$2A, $40
   15677/    CBB7 : F805 0000 58        		dc.b $F8, 5, 0,	0, $58
   15678/    CBBC : F805 0026 68        		dc.b $F8, 5, 0,	$26, $68
   15679/    CBC1 : F805 0026 78        		dc.b $F8, 5, 0,	$26, $78
   15680/    CBC6 : (MACRO)              		even
   15681/    CBC6 :                     ; ---------------------------------------------------------------------------
   15682/    CBC6 :                     ; Sprite mappings - chaos emeralds from	the special stage results screen
   15683/    CBC6 :                     ; ---------------------------------------------------------------------------
   15684/    CBC6 :                     Map_obj7F:
   15685/    CBC6 :                     	include "_mappings/obj7F.asm"
(1)    1/    CBC6 :                     ; ---------------------------------------------------------------------------
(1)    2/    CBC6 :                     ; Sprite mappings - chaos emeralds from	the special stage results screen
(1)    3/    CBC6 :                     ; ---------------------------------------------------------------------------
(1)    4/    CBC6 : 000E                		dc.w byte_CE02-Map_obj7F
(1)    5/    CBC8 : 0014                		dc.w byte_CE08-Map_obj7F
(1)    6/    CBCA : 001A                		dc.w byte_CE0E-Map_obj7F
(1)    7/    CBCC : 0020                		dc.w byte_CE14-Map_obj7F
(1)    8/    CBCE : 0026                		dc.w byte_CE1A-Map_obj7F
(1)    9/    CBD0 : 002C                		dc.w byte_CE20-Map_obj7F
(1)   10/    CBD2 : 0032                		dc.w byte_CE26-Map_obj7F
(1)   11/    CBD4 : 01                  byte_CE02:	dc.b 1
(1)   12/    CBD5 : F805 2004 F8        		dc.b $F8, 5, $20, 4, $F8
(1)   13/    CBDA : 01                  byte_CE08:	dc.b 1
(1)   14/    CBDB : F805 0000 F8        		dc.b $F8, 5, 0,	0, $F8
(1)   15/    CBE0 : 01                  byte_CE0E:	dc.b 1
(1)   16/    CBE1 : F805 4004 F8        		dc.b $F8, 5, $40, 4, $F8
(1)   17/    CBE6 : 01                  byte_CE14:	dc.b 1
(1)   18/    CBE7 : F805 6004 F8        		dc.b $F8, 5, $60, 4, $F8
(1)   19/    CBEC : 01                  byte_CE1A:	dc.b 1
(1)   20/    CBED : F805 2008 F8        		dc.b $F8, 5, $20, 8, $F8
(1)   21/    CBF2 : 01                  byte_CE20:	dc.b 1
(1)   22/    CBF3 : F805 200C F8        		dc.b $F8, 5, $20, $C, $F8
(1)   23/    CBF8 : 00                  byte_CE26:	dc.b 0			; Blank frame
(1)   24/    CBF9 : (MACRO)              		even
(1)   24/    CBF9 : 00                                          dc.b 0 ;ds.b 1 
   15686/    CBFA :                     
   15687/    CBFA :                     ; ===========================================================================
   15688/    CBFA :                     ; ---------------------------------------------------------------------------
   15689/    CBFA :                     ; Object 36 - spikes
   15690/    CBFA :                     ; ---------------------------------------------------------------------------
   15691/    CBFA :                     
   15692/    CBFA :                     Obj36:					; XREF: Obj_Index
   15693/    CBFA : 7000                		moveq	#0,d0
   15694/    CBFC : 1028 0024           		move.b	$24(a0),d0
   15695/    CC00 : 323B 0006           		move.w	Obj36_Index(pc,d0.w),d1
   15696/    CC04 : 4EFB 1002           		jmp	Obj36_Index(pc,d1.w)
   15697/    CC08 :                     ; ===========================================================================
   15698/    CC08 : 0010                Obj36_Index:	dc.w Obj36_Main-Obj36_Index
   15699/    CC0A : 005A                		dc.w Obj36_Solid-Obj36_Index
   15700/    CC0C :                     
   15701/    CC0C : 0014                Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
   15702/    CC0E : 0110                		dc.b 1,	$10
   15703/    CC10 : 0204                		dc.b 2,	4
   15704/    CC12 : 031C                		dc.b 3,	$1C
   15705/    CC14 : 0440                		dc.b 4,	$40
   15706/    CC16 : 0510                		dc.b 5,	$10
   15707/    CC18 :                     ; ===========================================================================
   15708/    CC18 :                     
   15709/    CC18 :                     Obj36_Main:				; XREF: Obj36_Index
   15710/    CC18 : 5428 0024           		addq.b	#2,$24(a0)
   15711/    CC1C : 217C 0000 CDBA      		move.l	#Map_obj36,4(a0)
             CC22 : 0004             
   15712/    CC24 : 317C 051B 0002      		move.w	#$51B,2(a0)
   15713/    CC2A : 0028 0004 0001      		ori.b	#4,1(a0)
   15714/    CC30 : 117C 0004 0018      		move.b	#4,$18(a0)
   15715/    CC36 : 1028 0028           		move.b	$28(a0),d0
   15716/    CC3A : 0228 000F 0028      		andi.b	#$F,$28(a0)
   15717/    CC40 : 0240 00F0           		andi.w	#$F0,d0
   15718/    CC44 : 43F9 0000 CC0C      		lea	(Obj36_Var).l,a1
   15719/    CC4A : E648                		lsr.w	#3,d0
   15720/    CC4C : D2C0                		adda.w	d0,a1
   15721/    CC4E : 1159 001A           		move.b	(a1)+,$1A(a0)
   15722/    CC52 : 1159 0019           		move.b	(a1)+,$19(a0)
   15723/    CC56 : 3168 0008 0030      		move.w	8(a0),$30(a0)
   15724/    CC5C : 3168 000C 0032      		move.w	$C(a0),$32(a0)
   15725/    CC62 :                     
   15726/    CC62 :                     Obj36_Solid:				; XREF: Obj36_Index
   15727/    CC62 : 6100 00B4           		bsr.w	Obj36_Type0x	; make the object move
   15728/    CC66 : 343C 0004           		move.w	#4,d2
   15729/    CC6A : 0C28 0005 001A      		cmpi.b	#5,$1A(a0)	; is object type $5x ?
   15730/    CC70 : 670C                		beq.s	Obj36_SideWays	; if yes, branch
   15731/    CC72 : 0C28 0001 001A      		cmpi.b	#1,$1A(a0)	; is object type $1x ?
   15732/    CC78 : 6624                		bne.s	Obj36_Upright	; if not, branch
   15733/    CC7A : 343C 0014           		move.w	#$14,d2
   15734/    CC7E :                     
   15735/    CC7E :                     ; Spikes types $1x and $5x face	sideways
   15736/    CC7E :                     
   15737/    CC7E :                     Obj36_SideWays:				; XREF: Obj36_Solid
   15738/    CC7E : 323C 001B           		move.w	#$1B,d1
   15739/    CC82 : 3602                		move.w	d2,d3
   15740/    CC84 : 5243                		addq.w	#1,d3
   15741/    CC86 : 3828 0008           		move.w	8(a0),d4
   15742/    CC8A : 6100 2B06           		bsr.w	SolidObject
   15743/    CC8E : 0828 0003 0022      		btst	#3,$22(a0)
   15744/    CC94 : 665E                		bne.s	Obj36_Display
   15745/    CC96 : 0C44 0001           		cmpi.w	#1,d4
   15746/    CC9A : 6728                		beq.s	Obj36_Hurt
   15747/    CC9C : 6056                		bra.s	Obj36_Display
   15748/    CC9E :                     ; ===========================================================================
   15749/    CC9E :                     
   15750/    CC9E :                     ; Spikes types $0x, $2x, $3x and $4x face up or	down
   15751/    CC9E :                     
   15752/    CC9E :                     Obj36_Upright:				; XREF: Obj36_Solid
   15753/    CC9E : 7200                		moveq	#0,d1
   15754/    CCA0 : 1228 0019           		move.b	$19(a0),d1
   15755/    CCA4 : 0641 000B           		addi.w	#$B,d1
   15756/    CCA8 : 343C 0010           		move.w	#$10,d2
   15757/    CCAC : 363C 0011           		move.w	#$11,d3
   15758/    CCB0 : 3828 0008           		move.w	8(a0),d4
   15759/    CCB4 : 6100 2ADC           		bsr.w	SolidObject
   15760/    CCB8 : 0828 0003 0022      		btst	#3,$22(a0)
   15761/    CCBE : 6604                		bne.s	Obj36_Hurt
   15762/    CCC0 : 4A44                		tst.w	d4
   15763/    CCC2 : 6A30                		bpl.s	Obj36_Display
   15764/    CCC4 :                     
   15765/    CCC4 :                     Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
   15766/    CCC4 : 4A38 FE2D           		tst.b	($FFFFFE2D).w	; is Sonic invincible?
   15767/    CCC8 : 662A                		bne.s	Obj36_Display	; if yes, branch
   15768/    CCCA : 2F08                		move.l	a0,-(sp)
   15769/    CCCC : 2448                		movea.l	a0,a2
   15770/    CCCE : 41F8 D000           		lea	($FFFFD000).w,a0
   15771/    CCD2 : 0C28 0004 0024      		cmpi.b	#4,$24(a0)
   15772/    CCD8 : 6418                		bcc.s	loc_CF20
   15773/    CCDA : 2628 000C           		move.l	$C(a0),d3
   15774/    CCDE : 3028 0012           		move.w	$12(a0),d0
   15775/    CCE2 : 48C0                		ext.l	d0
   15776/    CCE4 : E180                		asl.l	#8,d0
   15777/    CCE6 : 9680                		sub.l	d0,d3
   15778/    CCE8 : 2143 000C           		move.l	d3,$C(a0)
   15779/    CCEC : 4EB9 0001 ADBE      		jsr	HurtSonic
   15780/    CCF2 :                     
   15781/    CCF2 :                     loc_CF20:
   15782/    CCF2 : 205F                		movea.l	(sp)+,a0
   15783/    CCF4 :                     
   15784/    CCF4 :                     Obj36_Display:
   15785/    CCF4 : 6100 06DC           		bsr.w	DisplaySprite
   15786/    CCF8 : 3028 0030           		move.w	$30(a0),d0
   15787/    CCFC : 0240 FF80           		andi.w	#$FF80,d0
   15788/    CD00 : 3238 F700           		move.w	($FFFFF700).w,d1
   15789/    CD04 : 0441 0080           		subi.w	#$80,d1
   15790/    CD08 : 0241 FF80           		andi.w	#$FF80,d1
   15791/    CD0C : 9041                		sub.w	d1,d0
   15792/    CD0E : 0C40 0280           		cmpi.w	#$280,d0
   15793/    CD12 : 6200 06FA           		bhi.w	DeleteObject
   15794/    CD16 : 4E75                		rts	
   15795/    CD18 :                     ; ===========================================================================
   15796/    CD18 :                     
   15797/    CD18 :                     Obj36_Type0x:				; XREF: Obj36_Solid
   15798/    CD18 : 7000                		moveq	#0,d0
   15799/    CD1A : 1028 0028           		move.b	$28(a0),d0
   15800/    CD1E : D040                		add.w	d0,d0
   15801/    CD20 : 323B 0006           		move.w	Obj36_TypeIndex(pc,d0.w),d1
   15802/    CD24 : 4EFB 1002           		jmp	Obj36_TypeIndex(pc,d1.w)
   15803/    CD28 :                     ; ===========================================================================
   15804/    CD28 : 0006                Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
   15805/    CD2A : 0008                		dc.w Obj36_Type01-Obj36_TypeIndex
   15806/    CD2C : 001C                		dc.w Obj36_Type02-Obj36_TypeIndex
   15807/    CD2E :                     ; ===========================================================================
   15808/    CD2E :                     
   15809/    CD2E :                     Obj36_Type00:				; XREF: Obj36_TypeIndex
   15810/    CD2E : 4E75                		rts			; don't move the object
   15811/    CD30 :                     ; ===========================================================================
   15812/    CD30 :                     
   15813/    CD30 :                     Obj36_Type01:				; XREF: Obj36_TypeIndex
   15814/    CD30 : 6100 0026           		bsr.w	Obj36_Wait
   15815/    CD34 : 7000                		moveq	#0,d0
   15816/    CD36 : 1028 0034           		move.b	$34(a0),d0
   15817/    CD3A : D068 0032           		add.w	$32(a0),d0
   15818/    CD3E : 3140 000C           		move.w	d0,$C(a0)	; move the object vertically
   15819/    CD42 : 4E75                		rts	
   15820/    CD44 :                     ; ===========================================================================
   15821/    CD44 :                     
   15822/    CD44 :                     Obj36_Type02:				; XREF: Obj36_TypeIndex
   15823/    CD44 : 6100 0012           		bsr.w	Obj36_Wait
   15824/    CD48 : 7000                		moveq	#0,d0
   15825/    CD4A : 1028 0034           		move.b	$34(a0),d0
   15826/    CD4E : D068 0030           		add.w	$30(a0),d0
   15827/    CD52 : 3140 0008           		move.w	d0,8(a0)	; move the object horizontally
   15828/    CD56 : 4E75                		rts	
   15829/    CD58 :                     ; ===========================================================================
   15830/    CD58 :                     
   15831/    CD58 :                     Obj36_Wait:
   15832/    CD58 : 4A68 0038           		tst.w	$38(a0)		; is time delay	= zero?
   15833/    CD5C : 6718                		beq.s	loc_CFA4	; if yes, branch
   15834/    CD5E : 5368 0038           		subq.w	#1,$38(a0)	; subtract 1 from time delay
   15835/    CD62 : 6654                		bne.s	locret_CFE6
   15836/    CD64 : 4A28 0001           		tst.b	1(a0)
   15837/    CD68 : 6A4E                		bpl.s	locret_CFE6
   15838/    CD6A : 303C 00B6           		move.w	#$B6,d0
   15839/    CD6E : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
   15840/    CD74 : 6042                		bra.s	locret_CFE6
   15841/    CD76 :                     ; ===========================================================================
   15842/    CD76 :                     
   15843/    CD76 :                     loc_CFA4:
   15844/    CD76 : 4A68 0036           		tst.w	$36(a0)
   15845/    CD7A : 671C                		beq.s	loc_CFC6
   15846/    CD7C : 0468 0800 0034      		subi.w	#$800,$34(a0)
   15847/    CD82 : 6434                		bcc.s	locret_CFE6
   15848/    CD84 : 317C 0000 0034      		move.w	#0,$34(a0)
   15849/    CD8A : 317C 0000 0036      		move.w	#0,$36(a0)
   15850/    CD90 : 317C 003C 0038      		move.w	#60,$38(a0)	; set time delay to 1 second
   15851/    CD96 : 6020                		bra.s	locret_CFE6
   15852/    CD98 :                     ; ===========================================================================
   15853/    CD98 :                     
   15854/    CD98 :                     loc_CFC6:
   15855/    CD98 : 0668 0800 0034      		addi.w	#$800,$34(a0)
   15856/    CD9E : 0C68 2000 0034      		cmpi.w	#$2000,$34(a0)
   15857/    CDA4 : 6512                		bcs.s	locret_CFE6
   15858/    CDA6 : 317C 2000 0034      		move.w	#$2000,$34(a0)
   15859/    CDAC : 317C 0001 0036      		move.w	#1,$36(a0)
   15860/    CDB2 : 317C 003C 0038      		move.w	#60,$38(a0)	; set time delay to 1 second
   15861/    CDB8 :                     
   15862/    CDB8 :                     locret_CFE6:
   15863/    CDB8 : 4E75                		rts	
   15864/    CDBA :                     ; ===========================================================================
   15865/    CDBA :                     ; ---------------------------------------------------------------------------
   15866/    CDBA :                     ; Sprite mappings - spikes
   15867/    CDBA :                     ; ---------------------------------------------------------------------------
   15868/    CDBA :                     Map_obj36:
   15869/    CDBA :                     	include "_mappings/obj36.asm"
(1)    1/    CDBA :                     ; ---------------------------------------------------------------------------
(1)    2/    CDBA :                     ; Sprite mappings - spikes
(1)    3/    CDBA :                     ; ---------------------------------------------------------------------------
(1)    4/    CDBA : 000C                		dc.w byte_CFF4-Map_obj36
(1)    5/    CDBC : 001C                		dc.w byte_D004-Map_obj36
(1)    6/    CDBE : 002C                		dc.w byte_D014-Map_obj36
(1)    7/    CDC0 : 0032                		dc.w byte_D01A-Map_obj36
(1)    8/    CDC2 : 0042                		dc.w byte_D02A-Map_obj36
(1)    9/    CDC4 : 0061                		dc.w byte_D049-Map_obj36
(1)   10/    CDC6 : 03                  byte_CFF4:	dc.b 3			; 3 spikes
(1)   11/    CDC7 : F003 0004 EC        		dc.b $F0, 3, 0,	4, $EC
(1)   12/    CDCC : F003 0004 FC        		dc.b $F0, 3, 0,	4, $FC
(1)   13/    CDD1 : F003 0004 0C        		dc.b $F0, 3, 0,	4, $C
(1)   14/    CDD6 : 03                  byte_D004:	dc.b 3			; 3 spikes facing sideways
(1)   15/    CDD7 : EC0C 0000 F0        		dc.b $EC, $C, 0, 0, $F0
(1)   16/    CDDC : FC0C 0000 F0        		dc.b $FC, $C, 0, 0, $F0
(1)   17/    CDE1 : 0C0C 0000 F0        		dc.b $C, $C, 0,	0, $F0
(1)   18/    CDE6 : 01                  byte_D014:	dc.b 1			; 1 spike
(1)   19/    CDE7 : F003 0004 FC        		dc.b $F0, 3, 0,	4, $FC
(1)   20/    CDEC : 03                  byte_D01A:	dc.b 3			; 3 spikes widely spaced
(1)   21/    CDED : F003 0004 E4        		dc.b $F0, 3, 0,	4, $E4
(1)   22/    CDF2 : F003 0004 FC        		dc.b $F0, 3, 0,	4, $FC
(1)   23/    CDF7 : F003 0004 14        		dc.b $F0, 3, 0,	4, $14
(1)   24/    CDFC : 06                  byte_D02A:	dc.b 6			; 6 spikes
(1)   25/    CDFD : F003 0004 C0        		dc.b $F0, 3, 0,	4, $C0
(1)   26/    CE02 : F003 0004 D8        		dc.b $F0, 3, 0,	4, $D8
(1)   27/    CE07 : F003 0004 F0        		dc.b $F0, 3, 0,	4, $F0
(1)   28/    CE0C : F003 0004 08        		dc.b $F0, 3, 0,	4, 8
(1)   29/    CE11 : F003 0004 20        		dc.b $F0, 3, 0,	4, $20
(1)   30/    CE16 : F003 0004 38        		dc.b $F0, 3, 0,	4, $38
(1)   31/    CE1B : 01                  byte_D049:	dc.b 1			; 1 spike facing sideways
(1)   32/    CE1C : FC0C 0000 F0        		dc.b $FC, $C, 0, 0, $F0
(1)   33/    CE21 : (MACRO)              		even
(1)   33/    CE21 : 00                                          dc.b 0 ;ds.b 1 
   15870/    CE22 :                     
   15871/    CE22 :                     ; ===========================================================================
   15872/    CE22 :                     ; ---------------------------------------------------------------------------
   15873/    CE22 :                     ; Object 3B - purple rock (GHZ)
   15874/    CE22 :                     ; ---------------------------------------------------------------------------
   15875/    CE22 :                     
   15876/    CE22 :                     Obj3B:					; XREF: Obj_Index
   15877/    CE22 : 7000                		moveq	#0,d0
   15878/    CE24 : 1028 0024           		move.b	$24(a0),d0
   15879/    CE28 : 323B 0006           		move.w	Obj3B_Index(pc,d0.w),d1
   15880/    CE2C : 4EFB 1002           		jmp	Obj3B_Index(pc,d1.w)
   15881/    CE30 :                     ; ===========================================================================
   15882/    CE30 : 0004                Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
   15883/    CE32 : 0028                		dc.w Obj3B_Solid-Obj3B_Index
   15884/    CE34 :                     ; ===========================================================================
   15885/    CE34 :                     
   15886/    CE34 :                     Obj3B_Main:				; XREF: Obj3B_Index
   15887/    CE34 : 5428 0024           		addq.b	#2,$24(a0)
   15888/    CE38 : 217C 0000 CEE0      		move.l	#Map_obj3B,4(a0)
             CE3E : 0004             
   15889/    CE40 : 317C 63D0 0002      		move.w	#$63D0,2(a0)
   15890/    CE46 : 117C 0004 0001      		move.b	#4,1(a0)
   15891/    CE4C : 117C 0013 0019      		move.b	#$13,$19(a0)
   15892/    CE52 : 117C 0004 0018      		move.b	#4,$18(a0)
   15893/    CE58 :                     
   15894/    CE58 :                     Obj3B_Solid:				; XREF: Obj3B_Index
   15895/    CE58 : 323C 001B           		move.w	#$1B,d1
   15896/    CE5C : 343C 0010           		move.w	#$10,d2
   15897/    CE60 : 363C 0010           		move.w	#$10,d3
   15898/    CE64 : 3828 0008           		move.w	8(a0),d4
   15899/    CE68 : 6100 2928           		bsr.w	SolidObject
   15900/    CE6C : 6100 0564           		bsr.w	DisplaySprite
   15901/    CE70 : 3028 0008           		move.w	8(a0),d0
   15902/    CE74 : 0240 FF80           		andi.w	#$FF80,d0
   15903/    CE78 : 3238 F700           		move.w	($FFFFF700).w,d1
   15904/    CE7C : 0441 0080           		subi.w	#$80,d1
   15905/    CE80 : 0241 FF80           		andi.w	#$FF80,d1
   15906/    CE84 : 9041                		sub.w	d1,d0
   15907/    CE86 : 0C40 0280           		cmpi.w	#$280,d0
   15908/    CE8A : 6200 0582           		bhi.w	DeleteObject
   15909/    CE8E : 4E75                		rts	
   15910/    CE90 :                     ; ===========================================================================
   15911/    CE90 :                     ; ---------------------------------------------------------------------------
   15912/    CE90 :                     ; Object 49 - waterfall	sound effect (GHZ)
   15913/    CE90 :                     ; ---------------------------------------------------------------------------
   15914/    CE90 :                     
   15915/    CE90 :                     Obj49:					; XREF: Obj_Index
   15916/    CE90 : 7000                		moveq	#0,d0
   15917/    CE92 : 1028 0024           		move.b	$24(a0),d0
   15918/    CE96 : 323B 0006           		move.w	Obj49_Index(pc,d0.w),d1
   15919/    CE9A : 4EFB 1002           		jmp	Obj49_Index(pc,d1.w)
   15920/    CE9E :                     ; ===========================================================================
   15921/    CE9E : 0004                Obj49_Index:	dc.w Obj49_Main-Obj49_Index
   15922/    CEA0 : 000E                		dc.w Obj49_PlaySnd-Obj49_Index
   15923/    CEA2 :                     ; ===========================================================================
   15924/    CEA2 :                     
   15925/    CEA2 :                     Obj49_Main:				; XREF: Obj49_Index
   15926/    CEA2 : 5428 0024           		addq.b	#2,$24(a0)
   15927/    CEA6 : 117C 0004 0001      		move.b	#4,1(a0)
   15928/    CEAC :                     
   15929/    CEAC :                     Obj49_PlaySnd:				; XREF: Obj49_Index
   15930/    CEAC : 1038 FE0F           		move.b	($FFFFFE0F).w,d0
   15931/    CEB0 : 0200 003F           		andi.b	#$3F,d0
   15932/    CEB4 : 660A                		bne.s	Obj49_ChkDel
   15933/    CEB6 : 303C 00D0           		move.w	#$D0,d0
   15934/    CEBA : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play waterfall sound
   15935/    CEC0 :                     
   15936/    CEC0 :                     Obj49_ChkDel:
   15937/    CEC0 : 3028 0008           		move.w	8(a0),d0
   15938/    CEC4 : 0240 FF80           		andi.w	#$FF80,d0
   15939/    CEC8 : 3238 F700           		move.w	($FFFFF700).w,d1
   15940/    CECC : 0441 0080           		subi.w	#$80,d1
   15941/    CED0 : 0241 FF80           		andi.w	#$FF80,d1
   15942/    CED4 : 9041                		sub.w	d1,d0
   15943/    CED6 : 0C40 0280           		cmpi.w	#$280,d0
   15944/    CEDA : 6200 0532           		bhi.w	DeleteObject
   15945/    CEDE : 4E75                		rts	
   15946/    CEE0 :                     ; ===========================================================================
   15947/    CEE0 :                     ; ---------------------------------------------------------------------------
   15948/    CEE0 :                     ; Sprite mappings - purple rock	(GHZ)
   15949/    CEE0 :                     ; ---------------------------------------------------------------------------
   15950/    CEE0 :                     Map_obj3B:
   15951/    CEE0 :                     	include "_mappings/obj3B.asm"
(1)    1/    CEE0 :                     ; ---------------------------------------------------------------------------
(1)    2/    CEE0 :                     ; Sprite mappings - purple rock	(GHZ)
(1)    3/    CEE0 :                     ; ---------------------------------------------------------------------------
(1)    4/    CEE0 : 0002                		dc.w byte_D110-Map_obj3B
(1)    5/    CEE2 : 02                  byte_D110:	dc.b 2
(1)    6/    CEE3 : F00B 0000 E8        		dc.b $F0, $B, 0, 0, $E8
(1)    7/    CEE8 : F00B 000C 00        		dc.b $F0, $B, 0, $C, 0
(1)    8/    CEED : (MACRO)              		even
(1)    8/    CEED : 00                                          dc.b 0 ;ds.b 1 
   15952/    CEEE :                     
   15953/    CEEE :                     ; ===========================================================================
   15954/    CEEE :                     ; ---------------------------------------------------------------------------
   15955/    CEEE :                     ; Object 3C - smashable	wall (GHZ, SLZ)
   15956/    CEEE :                     ; ---------------------------------------------------------------------------
   15957/    CEEE :                     
   15958/    CEEE :                     Obj3C:					; XREF: Obj_Index
   15959/    CEEE : 7000                		moveq	#0,d0
   15960/    CEF0 : 1028 0024           		move.b	$24(a0),d0
   15961/    CEF4 : 323B 000A           		move.w	Obj3C_Index(pc,d0.w),d1
   15962/    CEF8 : 4EBB 1006           		jsr	Obj3C_Index(pc,d1.w)
   15963/    CEFC : 6000 256C           		bra.w	MarkObjGone
   15964/    CF00 :                     ; ===========================================================================
   15965/    CF00 : 0006                Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
   15966/    CF02 : 0030                		dc.w Obj3C_Solid-Obj3C_Index
   15967/    CF04 : 00A8                		dc.w Obj3C_FragMove-Obj3C_Index
   15968/    CF06 :                     ; ===========================================================================
   15969/    CF06 :                     
   15970/    CF06 :                     Obj3C_Main:				; XREF: Obj3C_Index
   15971/    CF06 : 5428 0024           		addq.b	#2,$24(a0)
   15972/    CF0A : 217C 0000 D084      		move.l	#Map_obj3C,4(a0)
             CF10 : 0004             
   15973/    CF12 : 317C 450F 0002      		move.w	#$450F,2(a0)
   15974/    CF18 : 117C 0004 0001      		move.b	#4,1(a0)
   15975/    CF1E : 117C 0010 0019      		move.b	#$10,$19(a0)
   15976/    CF24 : 117C 0004 0018      		move.b	#4,$18(a0)
   15977/    CF2A : 1168 0028 001A      		move.b	$28(a0),$1A(a0)
   15978/    CF30 :                     
   15979/    CF30 :                     Obj3C_Solid:				; XREF: Obj3C_Index
   15980/    CF30 : 3178 D010 0030      		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
   15981/    CF36 : 323C 001B           		move.w	#$1B,d1
   15982/    CF3A : 343C 0020           		move.w	#$20,d2
   15983/    CF3E : 363C 0020           		move.w	#$20,d3
   15984/    CF42 : 3828 0008           		move.w	8(a0),d4
   15985/    CF46 : 6100 284A           		bsr.w	SolidObject
   15986/    CF4A : 0828 0005 0022      		btst	#5,$22(a0)
   15987/    CF50 : 6602                		bne.s	Obj3C_ChkRoll
   15988/    CF52 :                     
   15989/    CF52 :                     locret_D180:
   15990/    CF52 : 4E75                		rts	
   15991/    CF54 :                     ; ===========================================================================
   15992/    CF54 :                     
   15993/    CF54 :                     Obj3C_ChkRoll:				; XREF: Obj3C_Solid
   15994/    CF54 : 0C29 0002 001C      		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
   15995/    CF5A : 66F6                		bne.s	locret_D180	; if not, branch
   15996/    CF5C : 3028 0030           		move.w	$30(a0),d0
   15997/    CF60 : 6A02                		bpl.s	Obj3C_ChkSpeed
   15998/    CF62 : 4440                		neg.w	d0
   15999/    CF64 :                     
   16000/    CF64 :                     Obj3C_ChkSpeed:
   16001/    CF64 : 0C40 0480           		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
   16002/    CF68 : 65E8                		bcs.s	locret_D180	; if not, branch
   16003/    CF6A : 3368 0030 0010      		move.w	$30(a0),$10(a1)
   16004/    CF70 : 5869 0008           		addq.w	#4,8(a1)
   16005/    CF74 : 49F9 0000 D044      		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
   16006/    CF7A : 3028 0008           		move.w	8(a0),d0
   16007/    CF7E : B069 0008           		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
   16008/    CF82 : 650A                		bcs.s	Obj3C_Smash	; if yes, branch
   16009/    CF84 : 5169 0008           		subq.w	#8,8(a1)
   16010/    CF88 : 49F9 0000 D064      		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
   16011/    CF8E :                     
   16012/    CF8E :                     Obj3C_Smash:
   16013/    CF8E : 3369 0010 0014      		move.w	$10(a1),$14(a1)
   16014/    CF94 : 08A8 0005 0022      		bclr	#5,$22(a0)
   16015/    CF9A : 08A9 0005 0022      		bclr	#5,$22(a1)
   16016/    CFA0 : 7207                		moveq	#7,d1		; load 8 fragments
   16017/    CFA2 : 343C 0070           		move.w	#$70,d2
   16018/    CFA6 : 6118                		bsr.s	SmashObject
   16019/    CFA8 :                     
   16020/    CFA8 :                     Obj3C_FragMove:				; XREF: Obj3C_Index
   16021/    CFA8 : 6100 0402           		bsr.w	SpeedToPos
   16022/    CFAC : 0668 0070 0012      		addi.w	#$70,$12(a0)	; make fragment	fall faster
   16023/    CFB2 : 6100 041E           		bsr.w	DisplaySprite
   16024/    CFB6 : 4A28 0001           		tst.b	1(a0)
   16025/    CFBA : 6A00 0452           		bpl.w	DeleteObject
   16026/    CFBE : 4E75                		rts	
   16027/    CFC0 :                     
   16028/    CFC0 :                     ; ---------------------------------------------------------------------------
   16029/    CFC0 :                     ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
   16030/    CFC0 :                     ; ---------------------------------------------------------------------------
   16031/    CFC0 :                     
   16032/    CFC0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   16033/    CFC0 :                     
   16034/    CFC0 :                     
   16035/    CFC0 :                     SmashObject:				; XREF: Obj3C_Smash
   16036/    CFC0 : 7000                		moveq	#0,d0
   16037/    CFC2 : 1028 001A           		move.b	$1A(a0),d0
   16038/    CFC6 : D040                		add.w	d0,d0
   16039/    CFC8 : 2668 0004           		movea.l	4(a0),a3
   16040/    CFCC : D6F3 0000           		adda.w	(a3,d0.w),a3
   16041/    CFD0 : 524B                		addq.w	#1,a3
   16042/    CFD2 : 08E8 0005 0001      		bset	#5,1(a0)
   16043/    CFD8 : 1810                		move.b	0(a0),d4
   16044/    CFDA : 1A28 0001           		move.b	1(a0),d5
   16045/    CFDE : 2248                		movea.l	a0,a1
   16046/    CFE0 : 6008                		bra.s	Smash_LoadFrag
   16047/    CFE2 :                     ; ===========================================================================
   16048/    CFE2 :                     
   16049/    CFE2 :                     Smash_Loop:
   16050/    CFE2 : 6100 0874           		bsr.w	SingleObjLoad
   16051/    CFE6 : 6652                		bne.s	Smash_PlaySnd
   16052/    CFE8 : 5A4B                		addq.w	#5,a3
   16053/    CFEA :                     
   16054/    CFEA :                     Smash_LoadFrag:				; XREF: SmashObject
   16055/    CFEA : 137C 0004 0024      		move.b	#4,$24(a1)
   16056/    CFF0 : 1284                		move.b	d4,0(a1)
   16057/    CFF2 : 234B 0004           		move.l	a3,4(a1)
   16058/    CFF6 : 1345 0001           		move.b	d5,1(a1)
   16059/    CFFA : 3368 0008 0008      		move.w	8(a0),8(a1)
   16060/    D000 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   16061/    D006 : 3368 0002 0002      		move.w	2(a0),2(a1)
   16062/    D00C : 1368 0018 0018      		move.b	$18(a0),$18(a1)
   16063/    D012 : 1368 0019 0019      		move.b	$19(a0),$19(a1)
   16064/    D018 : 335C 0010           		move.w	(a4)+,$10(a1)
   16065/    D01C : 335C 0012           		move.w	(a4)+,$12(a1)
   16066/    D020 : B3C8                		cmpa.l	a0,a1
   16067/    D022 : 6412                		bcc.s	loc_D268
   16068/    D024 : 2F08                		move.l	a0,-(sp)
   16069/    D026 : 2049                		movea.l	a1,a0
   16070/    D028 : 6100 0382           		bsr.w	SpeedToPos
   16071/    D02C : D568 0012           		add.w	d2,$12(a0)
   16072/    D030 : 205F                		movea.l	(sp)+,a0
   16073/    D032 : 6100 03BC           		bsr.w	DisplaySprite2
   16074/    D036 :                     
   16075/    D036 :                     loc_D268:
   16076/    D036 : 51C9 FFAA           		dbf	d1,Smash_Loop
   16077/    D03A :                     
   16078/    D03A :                     Smash_PlaySnd:
   16079/    D03A : 303C 00CB           		move.w	#$CB,d0
   16080/    D03E : 4EF9 0000 1182      		jmp	(PlaySound_Special).l ;	play smashing sound
   16081/    D044 :                     ; End of function SmashObject
   16082/    D044 :                     
   16083/    D044 :                     ; ===========================================================================
   16084/    D044 :                     ; Smashed block	fragment speeds
   16085/    D044 :                     ;
   16086/    D044 : 0400 FB00           Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
   16087/    D048 : 0600 FF00           		dc.w $600, $FF00
   16088/    D04C : 0600 0100           		dc.w $600, $100
   16089/    D050 : 0400 0500           		dc.w $400, $500
   16090/    D054 : 0600 FA00           		dc.w $600, $FA00
   16091/    D058 : 0800 FE00           		dc.w $800, $FE00
   16092/    D05C : 0800 0200           		dc.w $800, $200
   16093/    D060 : 0600 0600           		dc.w $600, $600
   16094/    D064 :                     
   16095/    D064 : FA00 FA00           Obj3C_FragSpd2:	dc.w $FA00, $FA00
   16096/    D068 : F800 FE00           		dc.w $F800, $FE00
   16097/    D06C : F800 0200           		dc.w $F800, $200
   16098/    D070 : FA00 0600           		dc.w $FA00, $600
   16099/    D074 : FC00 FB00           		dc.w $FC00, $FB00
   16100/    D078 : FA00 FF00           		dc.w $FA00, $FF00
   16101/    D07C : FA00 0100           		dc.w $FA00, $100
   16102/    D080 : FC00 0500           		dc.w $FC00, $500
   16103/    D084 :                     ; ---------------------------------------------------------------------------
   16104/    D084 :                     ; Sprite mappings - smashable walls (GHZ, SLZ)
   16105/    D084 :                     ; ---------------------------------------------------------------------------
   16106/    D084 :                     Map_obj3C:
   16107/    D084 :                     	include "_mappings/obj3C.asm"
(1)    1/    D084 :                     ; ---------------------------------------------------------------------------
(1)    2/    D084 :                     ; Sprite mappings - smashable walls (GHZ, SLZ)
(1)    3/    D084 :                     ; ---------------------------------------------------------------------------
(1)    4/    D084 : 0006                		dc.w byte_D2BC-Map_obj3C
(1)    5/    D086 : 002F                		dc.w byte_D2E5-Map_obj3C
(1)    6/    D088 : 0058                		dc.w byte_D30E-Map_obj3C
(1)    7/    D08A : 08                  byte_D2BC:	dc.b 8
(1)    8/    D08B : E005 0000 F0        		dc.b $E0, 5, 0,	0, $F0
(1)    9/    D090 : F005 0000 F0        		dc.b $F0, 5, 0,	0, $F0
(1)   10/    D095 : 0005 0000 F0        		dc.b 0,	5, 0, 0, $F0
(1)   11/    D09A : 1005 0000 F0        		dc.b $10, 5, 0,	0, $F0
(1)   12/    D09F : E005 0004 00        		dc.b $E0, 5, 0,	4, 0
(1)   13/    D0A4 : F005 0004 00        		dc.b $F0, 5, 0,	4, 0
(1)   14/    D0A9 : 0005 0004 00        		dc.b 0,	5, 0, 4, 0
(1)   15/    D0AE : 1005 0004 00        		dc.b $10, 5, 0,	4, 0
(1)   16/    D0B3 : 08                  byte_D2E5:	dc.b 8
(1)   17/    D0B4 : E005 0004 F0        		dc.b $E0, 5, 0,	4, $F0
(1)   18/    D0B9 : F005 0004 F0        		dc.b $F0, 5, 0,	4, $F0
(1)   19/    D0BE : 0005 0004 F0        		dc.b 0,	5, 0, 4, $F0
(1)   20/    D0C3 : 1005 0004 F0        		dc.b $10, 5, 0,	4, $F0
(1)   21/    D0C8 : E005 0004 00        		dc.b $E0, 5, 0,	4, 0
(1)   22/    D0CD : F005 0004 00        		dc.b $F0, 5, 0,	4, 0
(1)   23/    D0D2 : 0005 0004 00        		dc.b 0,	5, 0, 4, 0
(1)   24/    D0D7 : 1005 0004 00        		dc.b $10, 5, 0,	4, 0
(1)   25/    D0DC : 08                  byte_D30E:	dc.b 8
(1)   26/    D0DD : E005 0004 F0        		dc.b $E0, 5, 0,	4, $F0
(1)   27/    D0E2 : F005 0004 F0        		dc.b $F0, 5, 0,	4, $F0
(1)   28/    D0E7 : 0005 0004 F0        		dc.b 0,	5, 0, 4, $F0
(1)   29/    D0EC : 1005 0004 F0        		dc.b $10, 5, 0,	4, $F0
(1)   30/    D0F1 : E005 0008 00        		dc.b $E0, 5, 0,	8, 0
(1)   31/    D0F6 : F005 0008 00        		dc.b $F0, 5, 0,	8, 0
(1)   32/    D0FB : 0005 0008 00        		dc.b 0,	5, 0, 8, 0
(1)   33/    D100 : 1005 0008 00        		dc.b $10, 5, 0,	8, 0
(1)   34/    D105 : (MACRO)              		even
(1)   34/    D105 : 00                                          dc.b 0 ;ds.b 1 
   16108/    D106 :                     
   16109/    D106 :                     ; ---------------------------------------------------------------------------
   16110/    D106 :                     ; Object code loading subroutine
   16111/    D106 :                     ; ---------------------------------------------------------------------------
   16112/    D106 :                     
   16113/    D106 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   16114/    D106 :                     
   16115/    D106 :                     
   16116/    D106 :                     ObjectsLoad:				; XREF: TitleScreen; et al
   16117/    D106 : 41F8 D000           		lea	($FFFFD000).w,a0 ; set address for object RAM
   16118/    D10A : 7E7F                		moveq	#$7F,d7
   16119/    D10C : 7000                		moveq	#0,d0
   16120/    D10E : 0C38 0006 D024      		cmpi.b	#6,($FFFFD024).w
   16121/    D114 : 641A                		bcc.s	loc_D362
   16122/    D116 :                     
   16123/    D116 :                     loc_D348:
   16124/    D116 : 1010                		move.b	(a0),d0		; load object number from RAM
   16125/    D118 : 670C                		beq.s	loc_D358
   16126/    D11A : D040                		add.w	d0,d0
   16127/    D11C : D040                		add.w	d0,d0
   16128/    D11E : 227B 002C           		movea.l	Obj_Index-4(pc,d0.w),a1
   16129/    D122 : 4E91                		jsr	(a1)		; run the object's code
   16130/    D124 : 7000                		moveq	#0,d0
   16131/    D126 :                     
   16132/    D126 :                     loc_D358:
   16133/    D126 : 41E8 0040           		lea	$40(a0),a0	; next object
   16134/    D12A : 51CF FFEA           		dbf	d7,loc_D348
   16135/    D12E : 4E75                		rts	
   16136/    D130 :                     ; ===========================================================================
   16137/    D130 :                     
   16138/    D130 :                     loc_D362:
   16139/    D130 : 7E1F                		moveq	#$1F,d7
   16140/    D132 : 61E2                		bsr.s	loc_D348
   16141/    D134 : 7E5F                		moveq	#$5F,d7
   16142/    D136 :                     
   16143/    D136 :                     loc_D368:
   16144/    D136 : 7000                		moveq	#0,d0
   16145/    D138 : 1010                		move.b	(a0),d0
   16146/    D13A : 670A                		beq.s	loc_D378
   16147/    D13C : 4A28 0001           		tst.b	1(a0)
   16148/    D140 : 6A04                		bpl.s	loc_D378
   16149/    D142 : 6100 028E           		bsr.w	DisplaySprite
   16150/    D146 :                     
   16151/    D146 :                     loc_D378:
   16152/    D146 : 41E8 0040           		lea	$40(a0),a0
   16153/    D14A :                     
   16154/    D14A :                     loc_D37C:
   16155/    D14A : 51CF FFEA           		dbf	d7,loc_D368
   16156/    D14E : 4E75                		rts	
   16157/    D150 :                     ; End of function ObjectsLoad
   16158/    D150 :                     
   16159/    D150 :                     ; ===========================================================================
   16160/    D150 :                     ; ---------------------------------------------------------------------------
   16161/    D150 :                     ; Object pointers
   16162/    D150 :                     ; ---------------------------------------------------------------------------
   16163/    D150 :                     Obj_Index:
   16164/    D150 :                     	include "_includes-ASM/Object pointers.asm"
(1)    1/    D150 :                     ; ---------------------------------------------------------------------------
(1)    2/    D150 :                     ; Object pointers
(1)    3/    D150 :                     ; ---------------------------------------------------------------------------
(1)    4/    D150 : 0001 2974 0000      	dc.l Obj01, ObjectFall,	Obj03, ObjectFall
             D156 : D380 0001 BDEC 
             D15C : 0000 D380          
(1)    5/    D160 : 0000 D380 0000      	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
             D166 : D380 0000 D380 
             D16C : 0001 40AE          
(1)    6/    D170 : 0001 B74C 0001      	dc.l Obj09, Obj0A, Obj0B, Obj0C
             D176 : 3A58 0001 0FB6 
             D17C : 0001 10F6          
(1)    7/    D180 : 0000 E8EE 0000      	dc.l Obj0D, Obj0E, Obj0F, Obj10
             D186 : A402 0000 A482 
             D18C : 0001 BDEA          
(1)    8/    D190 : 0000 713C 0000      	dc.l Obj11, Obj12, Obj13, Obj14
             D196 : E6D4 0000 E060 
             D19C : 0000 E0CC          
(1)    9/    D1A0 : 0000 7762 0001      	dc.l Obj15, Obj16, Obj17, Obj18
             D1A6 : 1CA6 0000 7AAE 
             D1AC : 0000 7C3A          
(1)   10/    D1B0 : 0000 7FB0 0000      	dc.l Obj19, Obj1A, Obj1B, Obj1C
             D1B6 : 8018 0001 0E76 
             D1BC : 0000 85CE          
(1)   11/    D1C0 : 0000 8662 0000      	dc.l Obj1D, Obj1E, Obj1F, Obj20
             D1C6 : 8950 0000 92EA 
             D1CC : 0000 8A1E          
(1)   12/    D1D0 : 0001 C5A4 0000      	dc.l Obj21, Obj22, Obj23, Obj24
             D1D6 : 95D4 0000 9726 
             D1DC : 0000 8AF0          
(1)   13/    D1E0 : 0000 9916 0000      	dc.l Obj25, Obj26, Obj27, Obj28
             D1E6 : 9F02 0000 8B60 
             D1EC : 0000 8D1E          
(1)   14/    D1F0 : 0000 920C 0000      	dc.l Obj29, Obj2A, Obj2B, Obj2C
             D1F6 : 8738 0000 A906 
             D1FC : 0000 A9C0          
(1)   15/    D200 : 0000 AA8A 0000      	dc.l Obj2D, Obj2E, Obj2F, Obj30
             D206 : A0E8 0000 AC9E 
             D20C : 0000 B180          
(1)   16/    D210 : 0000 B45C 0000      	dc.l Obj31, Obj32, Obj33, Obj34
             D216 : BB0A 0000 BCAE 
             D21C : 0000 C0E0          
(1)   17/    D220 : 0000 AFC0 0000      	dc.l Obj35, Obj36, Obj37, Obj38
             D226 : CBFA 0000 9AA4 
             D22C : 0001 3F16          
(1)   18/    D230 : 0000 C290 0000      	dc.l Obj39, Obj3A, Obj3B, Obj3C
             D236 : C34A 0000 CE22 
             D23C : 0000 CEEE          
(1)   19/    D240 : 0001 74E6 0001      	dc.l Obj3D, Obj3E, Obj3F, Obj40
             D246 : A8F4 0000 8BF2 
             D24C : 0000 F3D8          
(1)   20/    D250 : 0000 D88A 0000      	dc.l Obj41, Obj42, Obj43, Obj44
             D256 : DB34 0000 DDC4 
             D25C : 0000 DF9E          
(1)   21/    D260 : 0000 B778 0000      	dc.l Obj45, Obj46, Obj47, Obj48
             D266 : E598 0000 E798 
             D26C : 0001 78C4          
(1)   22/    D270 : 0000 CE90 0001      	dc.l Obj49, Obj4A, Obj4B, Obj4C
             D276 : 4012 0000 9BF2 
             D27C : 0000 EB48          
(1)   23/    D280 : 0000 EC32 0000      	dc.l Obj4D, Obj4E, Obj4F, Obj50
             D286 : EE1E 0000 F5C2 
             D28C : 0000 F5F6          
(1)   24/    D290 : 0000 FA4E 0000      	dc.l Obj51, Obj52, Obj53, Obj54
             D296 : FBB2 0000 8128 
             D29C : 0000 EF76          
(1)   25/    D2A0 : 0000 FE62 0001      	dc.l Obj55, Obj56, Obj57, Obj58
             D2A6 : 0040 0001 053C 
             D2AC : 0001 072C          
(1)   26/    D2B0 : 0001 0888 0001      	dc.l Obj59, Obj5A, Obj5B, Obj5C
             D2B6 : 0B0C 0001 0C42 
             D2BC : 0001 0DF4          
(1)   27/    D2C0 : 0001 12AC 0001      	dc.l Obj5D, Obj5E, Obj5F, Obj60
             D2C6 : 13EC 0001 17A4 
             D2CC : 0001 1A76          
(1)   28/    D2D0 : 0001 1D76 0001      	dc.l Obj61, Obj62, Obj63, Obj64
             D2D6 : 1F8A 0001 20DC 
             D2DC : 0001 2442          
(1)   29/    D2E0 : 0001 283A 0001      	dc.l Obj65, Obj66, Obj67, Obj68
             D2E6 : 4E8A 0001 52D0 
             D2EC : 0001 547C          
(1)   30/    D2F0 : 0001 551E 0001      	dc.l Obj69, Obj6A, Obj6B, Obj6C
             D2F6 : 576A 0001 5A00 
             D2FC : 0001 5DE6          
(1)   31/    D300 : 0000 E2A8 0001      	dc.l Obj6D, Obj6E, Obj6F, Obj70
             D306 : 5F34 0001 6058 
             D30C : 0001 6316          
(1)   32/    D310 : 0001 11CA 0001      	dc.l Obj71, Obj72, Obj73, Obj74
             D316 : 6454 0001 8008 
             D31C : 0001 8478          
(1)   33/    D320 : 0001 8EC0 0001      	dc.l Obj75, Obj76, Obj77, Obj78
             D326 : 9464 0001 7C10 
             D32C : 0001 6720          
(1)   34/    D330 : 0001 6C16 0001      	dc.l Obj79, Obj7A, Obj7B, Obj7C
             D336 : 868C 0001 8AA0 
             D33C : 0000 9CC0          
(1)   35/    D340 : 0001 6F44 0000      	dc.l Obj7D, Obj7E, Obj7F, Obj80
             D346 : C584 0000 C72A 
             D34C : 0000 4C66          
(1)   36/    D350 : 0000 4D7E 0001      	dc.l Obj81, Obj82, Obj83, Obj84
             D356 : 9604 0001 9932 
             D35C : 0001 A220          
(1)   37/    D360 : 0001 9B2A 0001      	dc.l Obj85, Obj86, Obj87, Obj88
             D366 : A5AC 0000 520C 
             D36C : 0000 5366          
(1)   38/    D370 : 0000 5440 0001      	dc.l Obj89, Obj8A, Obj8B, Obj8C
             D376 : 704A 0000 580C 
             D37C : 0000 58EC          
   16165/    D380 :                     
   16166/    D380 :                     ; ---------------------------------------------------------------------------
   16167/    D380 :                     ; Subroutine to	make an	object fall downwards, increasingly fast
   16168/    D380 :                     ; ---------------------------------------------------------------------------
   16169/    D380 :                     
   16170/    D380 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   16171/    D380 :                     
   16172/    D380 :                     
   16173/    D380 :                     ObjectFall:
   16174/    D380 : 2428 0008           		move.l	8(a0),d2
   16175/    D384 : 2628 000C           		move.l	$C(a0),d3
   16176/    D388 : 3028 0010           		move.w	$10(a0),d0
   16177/    D38C : 48C0                		ext.l	d0
   16178/    D38E : E180                		asl.l	#8,d0
   16179/    D390 : D480                		add.l	d0,d2
   16180/    D392 : 3028 0012           		move.w	$12(a0),d0
   16181/    D396 : 0668 0038 0012      		addi.w	#$38,$12(a0)	; increase vertical speed
   16182/    D39C : 48C0                		ext.l	d0
   16183/    D39E : E180                		asl.l	#8,d0
   16184/    D3A0 : D680                		add.l	d0,d3
   16185/    D3A2 : 2142 0008           		move.l	d2,8(a0)
   16186/    D3A6 : 2143 000C           		move.l	d3,$C(a0)
   16187/    D3AA : 4E75                		rts	
   16188/    D3AC :                     ; End of function ObjectFall
   16189/    D3AC :                     
   16190/    D3AC :                     ; ---------------------------------------------------------------------------
   16191/    D3AC :                     ; Subroutine translating object	speed to update	object position
   16192/    D3AC :                     ; ---------------------------------------------------------------------------
   16193/    D3AC :                     
   16194/    D3AC :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   16195/    D3AC :                     
   16196/    D3AC :                     
   16197/    D3AC :                     SpeedToPos:
   16198/    D3AC : 2428 0008           		move.l	8(a0),d2
   16199/    D3B0 : 2628 000C           		move.l	$C(a0),d3
   16200/    D3B4 : 3028 0010           		move.w	$10(a0),d0	; load horizontal speed
   16201/    D3B8 : 48C0                		ext.l	d0
   16202/    D3BA : E180                		asl.l	#8,d0		; multiply speed by $100
   16203/    D3BC : D480                		add.l	d0,d2		; add to x-axis	position
   16204/    D3BE : 3028 0012           		move.w	$12(a0),d0	; load vertical	speed
   16205/    D3C2 : 48C0                		ext.l	d0
   16206/    D3C4 : E180                		asl.l	#8,d0		; multiply by $100
   16207/    D3C6 : D680                		add.l	d0,d3		; add to y-axis	position
   16208/    D3C8 : 2142 0008           		move.l	d2,8(a0)	; update x-axis	position
   16209/    D3CC : 2143 000C           		move.l	d3,$C(a0)	; update y-axis	position
   16210/    D3D0 : 4E75                		rts	
   16211/    D3D2 :                     ; End of function SpeedToPos
   16212/    D3D2 :                     
   16213/    D3D2 :                     ; ---------------------------------------------------------------------------
   16214/    D3D2 :                     ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
   16215/    D3D2 :                     ; ---------------------------------------------------------------------------
   16216/    D3D2 :                     
   16217/    D3D2 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   16218/    D3D2 :                     
   16219/    D3D2 :                     
   16220/    D3D2 :                     DisplaySprite:
   16221/    D3D2 : 43F8 AC00           		lea	($FFFFAC00).w,a1
   16222/    D3D6 : 3028 0018           		move.w	$18(a0),d0
   16223/    D3DA : E248                		lsr.w	#1,d0
   16224/    D3DC : 0240 0380           		andi.w	#$380,d0
   16225/    D3E0 : D2C0                		adda.w	d0,a1
   16226/    D3E2 : 0C51 007E           		cmpi.w	#$7E,(a1)
   16227/    D3E6 : 6406                		bcc.s	locret_D620
   16228/    D3E8 : 5451                		addq.w	#2,(a1)
   16229/    D3EA : D2D1                		adda.w	(a1),a1
   16230/    D3EC : 3288                		move.w	a0,(a1)
   16231/    D3EE :                     
   16232/    D3EE :                     locret_D620:
   16233/    D3EE : 4E75                		rts	
   16234/    D3F0 :                     ; End of function DisplaySprite
   16235/    D3F0 :                     
   16236/    D3F0 :                     ; ---------------------------------------------------------------------------
   16237/    D3F0 :                     ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
   16238/    D3F0 :                     ; ---------------------------------------------------------------------------
   16239/    D3F0 :                     
   16240/    D3F0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   16241/    D3F0 :                     
   16242/    D3F0 :                     
   16243/    D3F0 :                     DisplaySprite2:
   16244/    D3F0 : 45F8 AC00           		lea	($FFFFAC00).w,a2
   16245/    D3F4 : 3029 0018           		move.w	$18(a1),d0
   16246/    D3F8 : E248                		lsr.w	#1,d0
   16247/    D3FA : 0240 0380           		andi.w	#$380,d0
   16248/    D3FE : D4C0                		adda.w	d0,a2
   16249/    D400 : 0C52 007E           		cmpi.w	#$7E,(a2)
   16250/    D404 : 6406                		bcc.s	locret_D63E
   16251/    D406 : 5452                		addq.w	#2,(a2)
   16252/    D408 : D4D2                		adda.w	(a2),a2
   16253/    D40A : 3489                		move.w	a1,(a2)
   16254/    D40C :                     
   16255/    D40C :                     locret_D63E:
   16256/    D40C : 4E75                		rts	
   16257/    D40E :                     ; End of function DisplaySprite2
   16258/    D40E :                     
   16259/    D40E :                     ; ---------------------------------------------------------------------------
   16260/    D40E :                     ; Subroutine to	delete an object
   16261/    D40E :                     ; ---------------------------------------------------------------------------
   16262/    D40E :                     
   16263/    D40E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   16264/    D40E :                     
   16265/    D40E :                     
   16266/    D40E :                     DeleteObject:
   16267/    D40E : 2248                		movea.l	a0,a1
   16268/    D410 :                     
   16269/    D410 :                     DeleteObject2:
   16270/    D410 : 7200                		moveq	#0,d1
   16271/    D412 : 700F                		moveq	#$F,d0
   16272/    D414 :                     
   16273/    D414 :                     loc_D646:
   16274/    D414 : 22C1                		move.l	d1,(a1)+	; clear	the object RAM
   16275/    D416 : 51C8 FFFC           		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
   16276/    D41A : 4E75                		rts	
   16277/    D41C :                     ; End of function DeleteObject
   16278/    D41C :                     
   16279/    D41C :                     ; ===========================================================================
   16280/    D41C : 0000 0000           BldSpr_ScrPos:	dc.l 0			; blank
   16281/    D420 : 00FF F700           		dc.l $FFF700		; main screen x-position
   16282/    D424 : 00FF F708           		dc.l $FFF708		; background x-position	1
   16283/    D428 : 00FF F718           		dc.l $FFF718		; background x-position	2
   16284/    D42C :                     ; ---------------------------------------------------------------------------
   16285/    D42C :                     ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
   16286/    D42C :                     ; ---------------------------------------------------------------------------
   16287/    D42C :                     
   16288/    D42C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   16289/    D42C :                     
   16290/    D42C :                     
   16291/    D42C :                     BuildSprites:				; XREF: TitleScreen; et al
   16292/    D42C : 45F8 F800           		lea	($FFFFF800).w,a2 ; set address for sprite table
   16293/    D430 : 7A00                		moveq	#0,d5
   16294/    D432 : 49F8 AC00           		lea	($FFFFAC00).w,a4
   16295/    D436 : 7E07                		moveq	#7,d7
   16296/    D438 :                     
   16297/    D438 :                     loc_D66A:
   16298/    D438 : 4A54                		tst.w	(a4)
   16299/    D43A : 6700 00C0           		beq.w	loc_D72E
   16300/    D43E : 7C02                		moveq	#2,d6
   16301/    D440 :                     
   16302/    D440 :                     loc_D672:
   16303/    D440 : 3074 6000           		movea.w	(a4,d6.w),a0
   16304/    D444 : 4A10                		tst.b	(a0)
   16305/    D446 : 6700 00AC           		beq.w	loc_D726
   16306/    D44A : 08A8 0007 0001      		bclr	#7,1(a0)
   16307/    D450 : 1028 0001           		move.b	1(a0),d0
   16308/    D454 : 1800                		move.b	d0,d4
   16309/    D456 : 0240 000C           		andi.w	#$C,d0
   16310/    D45A : 6750                		beq.s	loc_D6DE
   16311/    D45C : 227B 00BE           		movea.l	BldSpr_ScrPos(pc,d0.w),a1
   16312/    D460 : 7000                		moveq	#0,d0
   16313/    D462 : 1028 0019           		move.b	$19(a0),d0
   16314/    D466 : 3628 0008           		move.w	8(a0),d3
   16315/    D46A : 9651                		sub.w	(a1),d3
   16316/    D46C : 3203                		move.w	d3,d1
   16317/    D46E : D240                		add.w	d0,d1
   16318/    D470 : 6B00 0082           		bmi.w	loc_D726
   16319/    D474 : 3203                		move.w	d3,d1
   16320/    D476 : 9240                		sub.w	d0,d1
   16321/    D478 : 0C41 0140           		cmpi.w	#$140,d1
   16322/    D47C : 6C76                		bge.s	loc_D726
   16323/    D47E : 0643 0080           		addi.w	#$80,d3
   16324/    D482 : 0804 0004           		btst	#4,d4
   16325/    D486 : 672E                		beq.s	loc_D6E8
   16326/    D488 : 7000                		moveq	#0,d0
   16327/    D48A : 1028 0016           		move.b	$16(a0),d0
   16328/    D48E : 3428 000C           		move.w	$C(a0),d2
   16329/    D492 : 9469 0004           		sub.w	4(a1),d2
   16330/    D496 : 3202                		move.w	d2,d1
   16331/    D498 : D240                		add.w	d0,d1
   16332/    D49A : 6B58                		bmi.s	loc_D726
   16333/    D49C : 3202                		move.w	d2,d1
   16334/    D49E : 9240                		sub.w	d0,d1
   16335/    D4A0 : 0C41 00E0           		cmpi.w	#$E0,d1
   16336/    D4A4 : 6C4E                		bge.s	loc_D726
   16337/    D4A6 : 0642 0080           		addi.w	#$80,d2
   16338/    D4AA : 6022                		bra.s	loc_D700
   16339/    D4AC :                     ; ===========================================================================
   16340/    D4AC :                     
   16341/    D4AC :                     loc_D6DE:
   16342/    D4AC : 3428 000A           		move.w	$A(a0),d2
   16343/    D4B0 : 3628 0008           		move.w	8(a0),d3
   16344/    D4B4 : 6018                		bra.s	loc_D700
   16345/    D4B6 :                     ; ===========================================================================
   16346/    D4B6 :                     
   16347/    D4B6 :                     loc_D6E8:
   16348/    D4B6 : 3428 000C           		move.w	$C(a0),d2
   16349/    D4BA : 9469 0004           		sub.w	4(a1),d2
   16350/    D4BE : 0642 0080           		addi.w	#$80,d2
   16351/    D4C2 : 0C42 0060           		cmpi.w	#$60,d2
   16352/    D4C6 : 652C                		bcs.s	loc_D726
   16353/    D4C8 : 0C42 0180           		cmpi.w	#$180,d2
   16354/    D4CC : 6426                		bcc.s	loc_D726
   16355/    D4CE :                     
   16356/    D4CE :                     loc_D700:
   16357/    D4CE : 2268 0004           		movea.l	4(a0),a1
   16358/    D4D2 : 7200                		moveq	#0,d1
   16359/    D4D4 : 0804 0005           		btst	#5,d4
   16360/    D4D8 : 6610                		bne.s	loc_D71C
   16361/    D4DA : 1228 001A           		move.b	$1A(a0),d1
   16362/    D4DE : D201                		add.b	d1,d1
   16363/    D4E0 : D2F1 1000           		adda.w	(a1,d1.w),a1
   16364/    D4E4 : 1219                		move.b	(a1)+,d1
   16365/    D4E6 : 5301                		subq.b	#1,d1
   16366/    D4E8 : 6B04                		bmi.s	loc_D720
   16367/    D4EA :                     
   16368/    D4EA :                     loc_D71C:
   16369/    D4EA : 6100 0032           		bsr.w	sub_D750
   16370/    D4EE :                     
   16371/    D4EE :                     loc_D720:
   16372/    D4EE : 08E8 0007 0001      		bset	#7,1(a0)
   16373/    D4F4 :                     
   16374/    D4F4 :                     loc_D726:
   16375/    D4F4 : 5446                		addq.w	#2,d6
   16376/    D4F6 : 5554                		subq.w	#2,(a4)
   16377/    D4F8 : 6600 FF46           		bne.w	loc_D672
   16378/    D4FC :                     
   16379/    D4FC :                     loc_D72E:
   16380/    D4FC : 49EC 0080           		lea	$80(a4),a4
   16381/    D500 : 51CF FF36           		dbf	d7,loc_D66A
   16382/    D504 : 11C5 F62C           		move.b	d5,($FFFFF62C).w
   16383/    D508 : 0C05 0050           		cmpi.b	#$50,d5
   16384/    D50C : 6708                		beq.s	loc_D748
   16385/    D50E : 24BC 0000 0000      		move.l	#0,(a2)
   16386/    D514 : 4E75                		rts	
   16387/    D516 :                     ; ===========================================================================
   16388/    D516 :                     
   16389/    D516 :                     loc_D748:
   16390/    D516 : 157C 0000 FFFB      		move.b	#0,-5(a2)
   16391/    D51C : 4E75                		rts	
   16392/    D51E :                     ; End of function BuildSprites
   16393/    D51E :                     
   16394/    D51E :                     
   16395/    D51E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   16396/    D51E :                     
   16397/    D51E :                     
   16398/    D51E :                     sub_D750:				; XREF: BuildSprites
   16399/    D51E : 3668 0002           		movea.w	2(a0),a3
   16400/    D522 : 0804 0000           		btst	#0,d4
   16401/    D526 : 663C                		bne.s	loc_D796
   16402/    D528 : 0804 0001           		btst	#1,d4
   16403/    D52C : 6600 0084           		bne.w	loc_D7E4
   16404/    D530 :                     ; End of function sub_D750
   16405/    D530 :                     
   16406/    D530 :                     
   16407/    D530 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   16408/    D530 :                     
   16409/    D530 :                     
   16410/    D530 :                     sub_D762:				; XREF: sub_D762; SS_ShowLayout
   16411/    D530 : 0C05 0050           		cmpi.b	#$50,d5
   16412/    D534 : 672C                		beq.s	locret_D794
   16413/    D536 : 1019                		move.b	(a1)+,d0
   16414/    D538 : 4880                		ext.w	d0
   16415/    D53A : D042                		add.w	d2,d0
   16416/    D53C : 34C0                		move.w	d0,(a2)+
   16417/    D53E : 14D9                		move.b	(a1)+,(a2)+
   16418/    D540 : 5205                		addq.b	#1,d5
   16419/    D542 : 14C5                		move.b	d5,(a2)+
   16420/    D544 : 1019                		move.b	(a1)+,d0
   16421/    D546 : E148                		lsl.w	#8,d0
   16422/    D548 : 1019                		move.b	(a1)+,d0
   16423/    D54A : D04B                		add.w	a3,d0
   16424/    D54C : 34C0                		move.w	d0,(a2)+
   16425/    D54E : 1019                		move.b	(a1)+,d0
   16426/    D550 : 4880                		ext.w	d0
   16427/    D552 : D043                		add.w	d3,d0
   16428/    D554 : 0240 01FF           		andi.w	#$1FF,d0
   16429/    D558 : 6602                		bne.s	loc_D78E
   16430/    D55A : 5240                		addq.w	#1,d0
   16431/    D55C :                     
   16432/    D55C :                     loc_D78E:
   16433/    D55C : 34C0                		move.w	d0,(a2)+
   16434/    D55E : 51C9 FFD0           		dbf	d1,sub_D762
   16435/    D562 :                     
   16436/    D562 :                     locret_D794:
   16437/    D562 : 4E75                		rts	
   16438/    D564 :                     ; End of function sub_D762
   16439/    D564 :                     
   16440/    D564 :                     ; ===========================================================================
   16441/    D564 :                     
   16442/    D564 :                     loc_D796:
   16443/    D564 : 0804 0001           		btst	#1,d4
   16444/    D568 : 6600 008E           		bne.w	loc_D82A
   16445/    D56C :                     
   16446/    D56C :                     loc_D79E:
   16447/    D56C : 0C05 0050           		cmpi.b	#$50,d5
   16448/    D570 : 673E                		beq.s	locret_D7E2
   16449/    D572 : 1019                		move.b	(a1)+,d0
   16450/    D574 : 4880                		ext.w	d0
   16451/    D576 : D042                		add.w	d2,d0
   16452/    D578 : 34C0                		move.w	d0,(a2)+
   16453/    D57A : 1819                		move.b	(a1)+,d4
   16454/    D57C : 14C4                		move.b	d4,(a2)+
   16455/    D57E : 5205                		addq.b	#1,d5
   16456/    D580 : 14C5                		move.b	d5,(a2)+
   16457/    D582 : 1019                		move.b	(a1)+,d0
   16458/    D584 : E148                		lsl.w	#8,d0
   16459/    D586 : 1019                		move.b	(a1)+,d0
   16460/    D588 : D04B                		add.w	a3,d0
   16461/    D58A : 0A40 0800           		eori.w	#$800,d0
   16462/    D58E : 34C0                		move.w	d0,(a2)+
   16463/    D590 : 1019                		move.b	(a1)+,d0
   16464/    D592 : 4880                		ext.w	d0
   16465/    D594 : 4440                		neg.w	d0
   16466/    D596 : D804                		add.b	d4,d4
   16467/    D598 : 0244 0018           		andi.w	#$18,d4
   16468/    D59C : 5044                		addq.w	#8,d4
   16469/    D59E : 9044                		sub.w	d4,d0
   16470/    D5A0 : D043                		add.w	d3,d0
   16471/    D5A2 : 0240 01FF           		andi.w	#$1FF,d0
   16472/    D5A6 : 6602                		bne.s	loc_D7DC
   16473/    D5A8 : 5240                		addq.w	#1,d0
   16474/    D5AA :                     
   16475/    D5AA :                     loc_D7DC:
   16476/    D5AA : 34C0                		move.w	d0,(a2)+
   16477/    D5AC : 51C9 FFBE           		dbf	d1,loc_D79E
   16478/    D5B0 :                     
   16479/    D5B0 :                     locret_D7E2:
   16480/    D5B0 : 4E75                		rts	
   16481/    D5B2 :                     ; ===========================================================================
   16482/    D5B2 :                     
   16483/    D5B2 :                     loc_D7E4:				; XREF: sub_D750
   16484/    D5B2 : 0C05 0050           		cmpi.b	#$50,d5
   16485/    D5B6 : 673E                		beq.s	locret_D828
   16486/    D5B8 : 1019                		move.b	(a1)+,d0
   16487/    D5BA : 1811                		move.b	(a1),d4
   16488/    D5BC : 4880                		ext.w	d0
   16489/    D5BE : 4440                		neg.w	d0
   16490/    D5C0 : E70C                		lsl.b	#3,d4
   16491/    D5C2 : 0244 0018           		andi.w	#$18,d4
   16492/    D5C6 : 5044                		addq.w	#8,d4
   16493/    D5C8 : 9044                		sub.w	d4,d0
   16494/    D5CA : D042                		add.w	d2,d0
   16495/    D5CC : 34C0                		move.w	d0,(a2)+
   16496/    D5CE : 14D9                		move.b	(a1)+,(a2)+
   16497/    D5D0 : 5205                		addq.b	#1,d5
   16498/    D5D2 : 14C5                		move.b	d5,(a2)+
   16499/    D5D4 : 1019                		move.b	(a1)+,d0
   16500/    D5D6 : E148                		lsl.w	#8,d0
   16501/    D5D8 : 1019                		move.b	(a1)+,d0
   16502/    D5DA : D04B                		add.w	a3,d0
   16503/    D5DC : 0A40 1000           		eori.w	#$1000,d0
   16504/    D5E0 : 34C0                		move.w	d0,(a2)+
   16505/    D5E2 : 1019                		move.b	(a1)+,d0
   16506/    D5E4 : 4880                		ext.w	d0
   16507/    D5E6 : D043                		add.w	d3,d0
   16508/    D5E8 : 0240 01FF           		andi.w	#$1FF,d0
   16509/    D5EC : 6602                		bne.s	loc_D822
   16510/    D5EE : 5240                		addq.w	#1,d0
   16511/    D5F0 :                     
   16512/    D5F0 :                     loc_D822:
   16513/    D5F0 : 34C0                		move.w	d0,(a2)+
   16514/    D5F2 : 51C9 FFBE           		dbf	d1,loc_D7E4
   16515/    D5F6 :                     
   16516/    D5F6 :                     locret_D828:
   16517/    D5F6 : 4E75                		rts	
   16518/    D5F8 :                     ; ===========================================================================
   16519/    D5F8 :                     
   16520/    D5F8 :                     loc_D82A:
   16521/    D5F8 : 0C05 0050           		cmpi.b	#$50,d5
   16522/    D5FC : 674C                		beq.s	locret_D87C
   16523/    D5FE : 1019                		move.b	(a1)+,d0
   16524/    D600 : 1811                		move.b	(a1),d4
   16525/    D602 : 4880                		ext.w	d0
   16526/    D604 : 4440                		neg.w	d0
   16527/    D606 : E70C                		lsl.b	#3,d4
   16528/    D608 : 0244 0018           		andi.w	#$18,d4
   16529/    D60C : 5044                		addq.w	#8,d4
   16530/    D60E : 9044                		sub.w	d4,d0
   16531/    D610 : D042                		add.w	d2,d0
   16532/    D612 : 34C0                		move.w	d0,(a2)+
   16533/    D614 : 1819                		move.b	(a1)+,d4
   16534/    D616 : 14C4                		move.b	d4,(a2)+
   16535/    D618 : 5205                		addq.b	#1,d5
   16536/    D61A : 14C5                		move.b	d5,(a2)+
   16537/    D61C : 1019                		move.b	(a1)+,d0
   16538/    D61E : E148                		lsl.w	#8,d0
   16539/    D620 : 1019                		move.b	(a1)+,d0
   16540/    D622 : D04B                		add.w	a3,d0
   16541/    D624 : 0A40 1800           		eori.w	#$1800,d0
   16542/    D628 : 34C0                		move.w	d0,(a2)+
   16543/    D62A : 1019                		move.b	(a1)+,d0
   16544/    D62C : 4880                		ext.w	d0
   16545/    D62E : 4440                		neg.w	d0
   16546/    D630 : D804                		add.b	d4,d4
   16547/    D632 : 0244 0018           		andi.w	#$18,d4
   16548/    D636 : 5044                		addq.w	#8,d4
   16549/    D638 : 9044                		sub.w	d4,d0
   16550/    D63A : D043                		add.w	d3,d0
   16551/    D63C : 0240 01FF           		andi.w	#$1FF,d0
   16552/    D640 : 6602                		bne.s	loc_D876
   16553/    D642 : 5240                		addq.w	#1,d0
   16554/    D644 :                     
   16555/    D644 :                     loc_D876:
   16556/    D644 : 34C0                		move.w	d0,(a2)+
   16557/    D646 : 51C9 FFB0           		dbf	d1,loc_D82A
   16558/    D64A :                     
   16559/    D64A :                     locret_D87C:
   16560/    D64A : 4E75                		rts	
   16561/    D64C :                     ; ---------------------------------------------------------------------------
   16562/    D64C :                     ; Subroutine to	check if an object is on the screen
   16563/    D64C :                     ; ---------------------------------------------------------------------------
   16564/    D64C :                     
   16565/    D64C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   16566/    D64C :                     
   16567/    D64C :                     
   16568/    D64C :                     ChkObjOnScreen:
   16569/    D64C : 3028 0008           		move.w	8(a0),d0	; get object x-position
   16570/    D650 : 9078 F700           		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
   16571/    D654 : 6B1A                		bmi.s	NotOnScreen
   16572/    D656 : 0C40 0140           		cmpi.w	#320,d0		; is object on the screen?
   16573/    D65A : 6C14                		bge.s	NotOnScreen	; if not, branch
   16574/    D65C :                     
   16575/    D65C : 3228 000C           		move.w	$C(a0),d1	; get object y-position
   16576/    D660 : 9278 F704           		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
   16577/    D664 : 6B0A                		bmi.s	NotOnScreen
   16578/    D666 : 0C41 00E0           		cmpi.w	#224,d1		; is object on the screen?
   16579/    D66A : 6C04                		bge.s	NotOnScreen	; if not, branch
   16580/    D66C :                     
   16581/    D66C : 7000                		moveq	#0,d0		; set flag to 0
   16582/    D66E : 4E75                		rts	
   16583/    D670 :                     ; ===========================================================================
   16584/    D670 :                     
   16585/    D670 :                     NotOnScreen:				; XREF: ChkObjOnScreen
   16586/    D670 : 7001                		moveq	#1,d0		; set flag to 1
   16587/    D672 : 4E75                		rts	
   16588/    D674 :                     ; End of function ChkObjOnScreen
   16589/    D674 :                     
   16590/    D674 :                     
   16591/    D674 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   16592/    D674 :                     
   16593/    D674 :                     
   16594/    D674 :                     ChkObjOnScreen2:
   16595/    D674 : 7200                		moveq	#0,d1
   16596/    D676 : 1228 0019           		move.b	$19(a0),d1
   16597/    D67A : 3028 0008           		move.w	8(a0),d0
   16598/    D67E : 9078 F700           		sub.w	($FFFFF700).w,d0
   16599/    D682 : D041                		add.w	d1,d0
   16600/    D684 : 6B1E                		bmi.s	NotOnScreen2
   16601/    D686 : D241                		add.w	d1,d1
   16602/    D688 : 9041                		sub.w	d1,d0
   16603/    D68A : 0C40 0140           		cmpi.w	#320,d0
   16604/    D68E : 6C14                		bge.s	NotOnScreen2
   16605/    D690 :                     
   16606/    D690 : 3228 000C           		move.w	$C(a0),d1
   16607/    D694 : 9278 F704           		sub.w	($FFFFF704).w,d1
   16608/    D698 : 6B0A                		bmi.s	NotOnScreen2
   16609/    D69A : 0C41 00E0           		cmpi.w	#224,d1
   16610/    D69E : 6C04                		bge.s	NotOnScreen2
   16611/    D6A0 :                     
   16612/    D6A0 : 7000                		moveq	#0,d0
   16613/    D6A2 : 4E75                		rts	
   16614/    D6A4 :                     ; ===========================================================================
   16615/    D6A4 :                     
   16616/    D6A4 :                     NotOnScreen2:				; XREF: ChkObjOnScreen2
   16617/    D6A4 : 7001                		moveq	#1,d0
   16618/    D6A6 : 4E75                		rts	
   16619/    D6A8 :                     ; End of function ChkObjOnScreen2
   16620/    D6A8 :                     
   16621/    D6A8 :                     ; ---------------------------------------------------------------------------
   16622/    D6A8 :                     ; Subroutine to	load a level's objects
   16623/    D6A8 :                     ; ---------------------------------------------------------------------------
   16624/    D6A8 :                     
   16625/    D6A8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   16626/    D6A8 :                     
   16627/    D6A8 :                     
   16628/    D6A8 :                     ObjPosLoad:				; XREF: Level; et al
   16629/    D6A8 : 7000                		moveq	#0,d0
   16630/    D6AA : 1038 F76C           		move.b	($FFFFF76C).w,d0
   16631/    D6AE : 303B 0006           		move.w	OPL_Index(pc,d0.w),d0
   16632/    D6B2 : 4EFB 0002           		jmp	OPL_Index(pc,d0.w)
   16633/    D6B6 :                     ; End of function ObjPosLoad
   16634/    D6B6 :                     
   16635/    D6B6 :                     ; ===========================================================================
   16636/    D6B6 : 0004                OPL_Index:	dc.w OPL_Main-OPL_Index
   16637/    D6B8 : 0098                		dc.w OPL_Next-OPL_Index
   16638/    D6BA :                     ; ===========================================================================
   16639/    D6BA :                     
   16640/    D6BA :                     OPL_Main:				; XREF: OPL_Index
   16641/    D6BA : 5438 F76C           		addq.b	#2,($FFFFF76C).w
   16642/    D6BE : 3038 FE10           		move.w	($FFFFFE10).w,d0
   16643/    D6C2 : ED08                		lsl.b	#6,d0
   16644/    D6C4 : E848                		lsr.w	#4,d0
   16645/    D6C6 : 41F9 0008 0042      		lea	(ObjPos_Index).l,a0
   16646/    D6CC : 2248                		movea.l	a0,a1
   16647/    D6CE : D0F0 0000           		adda.w	(a0,d0.w),a0
   16648/    D6D2 : 21C8 F770           		move.l	a0,($FFFFF770).w
   16649/    D6D6 : 21C8 F774           		move.l	a0,($FFFFF774).w
   16650/    D6DA : D2F1 0002           		adda.w	2(a1,d0.w),a1
   16651/    D6DE : 21C9 F778           		move.l	a1,($FFFFF778).w
   16652/    D6E2 : 21C9 F77C           		move.l	a1,($FFFFF77C).w
   16653/    D6E6 : 45F8 FC00           		lea	($FFFFFC00).w,a2
   16654/    D6EA : 34FC 0101           		move.w	#$101,(a2)+
   16655/    D6EE : 303C 005E           		move.w	#$5E,d0
   16656/    D6F2 :                     
   16657/    D6F2 :                     OPL_ClrList:
   16658/    D6F2 : 429A                		clr.l	(a2)+
   16659/    D6F4 : 51C8 FFFC           		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
   16660/    D6F8 :                     
   16661/    D6F8 : 45F8 FC00           		lea	($FFFFFC00).w,a2
   16662/    D6FC : 7400                		moveq	#0,d2
   16663/    D6FE : 3C38 F700           		move.w	($FFFFF700).w,d6
   16664/    D702 : 0446 0080           		subi.w	#$80,d6
   16665/    D706 : 6402                		bcc.s	loc_D93C
   16666/    D708 : 7C00                		moveq	#0,d6
   16667/    D70A :                     
   16668/    D70A :                     loc_D93C:
   16669/    D70A : 0246 FF80           		andi.w	#$FF80,d6
   16670/    D70E : 2078 F770           		movea.l	($FFFFF770).w,a0
   16671/    D712 :                     
   16672/    D712 :                     loc_D944:
   16673/    D712 : BC50                		cmp.w	(a0),d6
   16674/    D714 : 630E                		bls.s	loc_D956
   16675/    D716 : 4A28 0004           		tst.b	4(a0)
   16676/    D71A : 6A04                		bpl.s	loc_D952
   16677/    D71C : 1412                		move.b	(a2),d2
   16678/    D71E : 5212                		addq.b	#1,(a2)
   16679/    D720 :                     
   16680/    D720 :                     loc_D952:
   16681/    D720 : 5C48                		addq.w	#6,a0
   16682/    D722 : 60EE                		bra.s	loc_D944
   16683/    D724 :                     ; ===========================================================================
   16684/    D724 :                     
   16685/    D724 :                     loc_D956:
   16686/    D724 : 21C8 F770           		move.l	a0,($FFFFF770).w
   16687/    D728 : 2078 F774           		movea.l	($FFFFF774).w,a0
   16688/    D72C : 0446 0080           		subi.w	#$80,d6
   16689/    D730 : 6512                		bcs.s	loc_D976
   16690/    D732 :                     
   16691/    D732 :                     loc_D964:
   16692/    D732 : BC50                		cmp.w	(a0),d6
   16693/    D734 : 630E                		bls.s	loc_D976
   16694/    D736 : 4A28 0004           		tst.b	4(a0)
   16695/    D73A : 6A04                		bpl.s	loc_D972
   16696/    D73C : 522A 0001           		addq.b	#1,1(a2)
   16697/    D740 :                     
   16698/    D740 :                     loc_D972:
   16699/    D740 : 5C48                		addq.w	#6,a0
   16700/    D742 : 60EE                		bra.s	loc_D964
   16701/    D744 :                     ; ===========================================================================
   16702/    D744 :                     
   16703/    D744 :                     loc_D976:
   16704/    D744 : 21C8 F774           		move.l	a0,($FFFFF774).w
   16705/    D748 : 31FC FFFF F76E      		move.w	#-1,($FFFFF76E).w
   16706/    D74E :                     
   16707/    D74E :                     OPL_Next:				; XREF: OPL_Index
   16708/    D74E : 45F8 FC00           		lea	($FFFFFC00).w,a2
   16709/    D752 : 7400                		moveq	#0,d2
   16710/    D754 : 3C38 F700           		move.w	($FFFFF700).w,d6
   16711/    D758 : 0246 FF80           		andi.w	#$FF80,d6
   16712/    D75C : BC78 F76E           		cmp.w	($FFFFF76E).w,d6
   16713/    D760 : 6700 00A6           		beq.w	locret_DA3A
   16714/    D764 : 6C5E                		bge.s	loc_D9F6
   16715/    D766 : 31C6 F76E           		move.w	d6,($FFFFF76E).w
   16716/    D76A : 2078 F774           		movea.l	($FFFFF774).w,a0
   16717/    D76E : 0446 0080           		subi.w	#$80,d6
   16718/    D772 : 652C                		bcs.s	loc_D9D2
   16719/    D774 :                     
   16720/    D774 :                     loc_D9A6:
   16721/    D774 : BC68 FFFA           		cmp.w	-6(a0),d6
   16722/    D778 : 6C26                		bge.s	loc_D9D2
   16723/    D77A : 5D48                		subq.w	#6,a0
   16724/    D77C : 4A28 0004           		tst.b	4(a0)
   16725/    D780 : 6A08                		bpl.s	loc_D9BC
   16726/    D782 : 532A 0001           		subq.b	#1,1(a2)
   16727/    D786 : 142A 0001           		move.b	1(a2),d2
   16728/    D78A :                     
   16729/    D78A :                     loc_D9BC:
   16730/    D78A : 6100 007E           		bsr.w	loc_DA3C
   16731/    D78E : 6604                		bne.s	loc_D9C6
   16732/    D790 : 5D48                		subq.w	#6,a0
   16733/    D792 : 60E0                		bra.s	loc_D9A6
   16734/    D794 :                     ; ===========================================================================
   16735/    D794 :                     
   16736/    D794 :                     loc_D9C6:
   16737/    D794 : 4A28 0004           		tst.b	4(a0)
   16738/    D798 : 6A04                		bpl.s	loc_D9D0
   16739/    D79A : 522A 0001           		addq.b	#1,1(a2)
   16740/    D79E :                     
   16741/    D79E :                     loc_D9D0:
   16742/    D79E : 5C48                		addq.w	#6,a0
   16743/    D7A0 :                     
   16744/    D7A0 :                     loc_D9D2:
   16745/    D7A0 : 21C8 F774           		move.l	a0,($FFFFF774).w
   16746/    D7A4 : 2078 F770           		movea.l	($FFFFF770).w,a0
   16747/    D7A8 : 0646 0300           		addi.w	#$300,d6
   16748/    D7AC :                     
   16749/    D7AC :                     loc_D9DE:
   16750/    D7AC : BC68 FFFA           		cmp.w	-6(a0),d6
   16751/    D7B0 : 6E0C                		bgt.s	loc_D9F0
   16752/    D7B2 : 4A28 FFFE           		tst.b	-2(a0)
   16753/    D7B6 : 6A02                		bpl.s	loc_D9EC
   16754/    D7B8 : 5312                		subq.b	#1,(a2)
   16755/    D7BA :                     
   16756/    D7BA :                     loc_D9EC:
   16757/    D7BA : 5D48                		subq.w	#6,a0
   16758/    D7BC : 60EE                		bra.s	loc_D9DE
   16759/    D7BE :                     ; ===========================================================================
   16760/    D7BE :                     
   16761/    D7BE :                     loc_D9F0:
   16762/    D7BE : 21C8 F770           		move.l	a0,($FFFFF770).w
   16763/    D7C2 : 4E75                		rts	
   16764/    D7C4 :                     ; ===========================================================================
   16765/    D7C4 :                     
   16766/    D7C4 :                     loc_D9F6:
   16767/    D7C4 : 31C6 F76E           		move.w	d6,($FFFFF76E).w
   16768/    D7C8 : 2078 F770           		movea.l	($FFFFF770).w,a0
   16769/    D7CC : 0646 0280           		addi.w	#$280,d6
   16770/    D7D0 :                     
   16771/    D7D0 :                     loc_DA02:
   16772/    D7D0 : BC50                		cmp.w	(a0),d6
   16773/    D7D2 : 6310                		bls.s	loc_DA16
   16774/    D7D4 : 4A28 0004           		tst.b	4(a0)
   16775/    D7D8 : 6A04                		bpl.s	loc_DA10
   16776/    D7DA : 1412                		move.b	(a2),d2
   16777/    D7DC : 5212                		addq.b	#1,(a2)
   16778/    D7DE :                     
   16779/    D7DE :                     loc_DA10:
   16780/    D7DE : 6100 002A           		bsr.w	loc_DA3C
   16781/    D7E2 : 67EC                		beq.s	loc_DA02
   16782/    D7E4 :                     
   16783/    D7E4 :                     loc_DA16:
   16784/    D7E4 : 21C8 F770           		move.l	a0,($FFFFF770).w
   16785/    D7E8 : 2078 F774           		movea.l	($FFFFF774).w,a0
   16786/    D7EC : 0446 0300           		subi.w	#$300,d6
   16787/    D7F0 : 6512                		bcs.s	loc_DA36
   16788/    D7F2 :                     
   16789/    D7F2 :                     loc_DA24:
   16790/    D7F2 : BC50                		cmp.w	(a0),d6
   16791/    D7F4 : 630E                		bls.s	loc_DA36
   16792/    D7F6 : 4A28 0004           		tst.b	4(a0)
   16793/    D7FA : 6A04                		bpl.s	loc_DA32
   16794/    D7FC : 522A 0001           		addq.b	#1,1(a2)
   16795/    D800 :                     
   16796/    D800 :                     loc_DA32:
   16797/    D800 : 5C48                		addq.w	#6,a0
   16798/    D802 : 60EE                		bra.s	loc_DA24
   16799/    D804 :                     ; ===========================================================================
   16800/    D804 :                     
   16801/    D804 :                     loc_DA36:
   16802/    D804 : 21C8 F774           		move.l	a0,($FFFFF774).w
   16803/    D808 :                     
   16804/    D808 :                     locret_DA3A:
   16805/    D808 : 4E75                		rts	
   16806/    D80A :                     ; ===========================================================================
   16807/    D80A :                     
   16808/    D80A :                     loc_DA3C:
   16809/    D80A : 4A28 0004           		tst.b	4(a0)
   16810/    D80E : 6A0E                		bpl.s	OPL_MakeItem
   16811/    D810 : 08F2 0007 2002      		bset	#7,2(a2,d2.w)
   16812/    D816 : 6706                		beq.s	OPL_MakeItem
   16813/    D818 : 5C48                		addq.w	#6,a0
   16814/    D81A : 7000                		moveq	#0,d0
   16815/    D81C : 4E75                		rts	
   16816/    D81E :                     ; ===========================================================================
   16817/    D81E :                     
   16818/    D81E :                     OPL_MakeItem:
   16819/    D81E : 6100 0038           		bsr.w	SingleObjLoad
   16820/    D822 : 6632                		bne.s	locret_DA8A
   16821/    D824 : 3358 0008           		move.w	(a0)+,8(a1)
   16822/    D828 : 3018                		move.w	(a0)+,d0
   16823/    D82A : 3200                		move.w	d0,d1
   16824/    D82C : 0240 0FFF           		andi.w	#$FFF,d0
   16825/    D830 : 3340 000C           		move.w	d0,$C(a1)
   16826/    D834 : E559                		rol.w	#2,d1
   16827/    D836 : 0201 0003           		andi.b	#3,d1
   16828/    D83A : 1341 0001           		move.b	d1,1(a1)
   16829/    D83E : 1341 0022           		move.b	d1,$22(a1)
   16830/    D842 : 1018                		move.b	(a0)+,d0
   16831/    D844 : 6A08                		bpl.s	loc_DA80
   16832/    D846 : 0200 007F           		andi.b	#$7F,d0
   16833/    D84A : 1342 0023           		move.b	d2,$23(a1)
   16834/    D84E :                     
   16835/    D84E :                     loc_DA80:
   16836/    D84E : 1280                		move.b	d0,0(a1)
   16837/    D850 : 1358 0028           		move.b	(a0)+,$28(a1)
   16838/    D854 : 7000                		moveq	#0,d0
   16839/    D856 :                     
   16840/    D856 :                     locret_DA8A:
   16841/    D856 : 4E75                		rts	
   16842/    D858 :                     ; ---------------------------------------------------------------------------
   16843/    D858 :                     ; Single object	loading	subroutine
   16844/    D858 :                     ; ---------------------------------------------------------------------------
   16845/    D858 :                     
   16846/    D858 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   16847/    D858 :                     
   16848/    D858 :                     
   16849/    D858 :                     SingleObjLoad:
   16850/    D858 : 43F8 D800           		lea	($FFFFD800).w,a1 ; start address for object RAM
   16851/    D85C : 303C 005F           		move.w	#$5F,d0
   16852/    D860 :                     
   16853/    D860 :                     loc_DA94:
   16854/    D860 : 4A11                		tst.b	(a1)		; is object RAM	slot empty?
   16855/    D862 : 6708                		beq.s	locret_DAA0	; if yes, branch
   16856/    D864 : 43E9 0040           		lea	$40(a1),a1	; goto next object RAM slot
   16857/    D868 : 51C8 FFF6           		dbf	d0,loc_DA94	; repeat $5F times
   16858/    D86C :                     
   16859/    D86C :                     locret_DAA0:
   16860/    D86C : 4E75                		rts	
   16861/    D86E :                     ; End of function SingleObjLoad
   16862/    D86E :                     
   16863/    D86E :                     
   16864/    D86E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   16865/    D86E :                     
   16866/    D86E :                     
   16867/    D86E :                     SingleObjLoad2:
   16868/    D86E : 2248                		movea.l	a0,a1
   16869/    D870 : 303C F000           		move.w	#-$1000,d0
   16870/    D874 : 9048                		sub.w	a0,d0
   16871/    D876 : EC48                		lsr.w	#6,d0
   16872/    D878 : 5340                		subq.w	#1,d0
   16873/    D87A : 650C                		bcs.s	locret_DABC
   16874/    D87C :                     
   16875/    D87C :                     loc_DAB0:
   16876/    D87C : 4A11                		tst.b	(a1)
   16877/    D87E : 6708                		beq.s	locret_DABC
   16878/    D880 : 43E9 0040           		lea	$40(a1),a1
   16879/    D884 : 51C8 FFF6           		dbf	d0,loc_DAB0
   16880/    D888 :                     
   16881/    D888 :                     locret_DABC:
   16882/    D888 : 4E75                		rts	
   16883/    D88A :                     ; End of function SingleObjLoad2
   16884/    D88A :                     
   16885/    D88A :                     ; ===========================================================================
   16886/    D88A :                     ; ---------------------------------------------------------------------------
   16887/    D88A :                     ; Object 41 - springs
   16888/    D88A :                     ; ---------------------------------------------------------------------------
   16889/    D88A :                     
   16890/    D88A :                     Obj41:					; XREF: Obj_Index
   16891/    D88A : 7000                		moveq	#0,d0
   16892/    D88C : 1028 0024           		move.b	$24(a0),d0
   16893/    D890 : 323B 002A           		move.w	Obj41_Index(pc,d0.w),d1
   16894/    D894 : 4EBB 1026           		jsr	Obj41_Index(pc,d1.w)
   16895/    D898 : 6100 FB38           		bsr.w	DisplaySprite
   16896/    D89C : 3028 0008           		move.w	8(a0),d0
   16897/    D8A0 : 0240 FF80           		andi.w	#$FF80,d0
   16898/    D8A4 : 3238 F700           		move.w	($FFFFF700).w,d1
   16899/    D8A8 : 0441 0080           		subi.w	#$80,d1
   16900/    D8AC : 0241 FF80           		andi.w	#$FF80,d1
   16901/    D8B0 : 9041                		sub.w	d1,d0
   16902/    D8B2 : 0C40 0280           		cmpi.w	#$280,d0
   16903/    D8B6 : 6200 FB56           		bhi.w	DeleteObject
   16904/    D8BA : 4E75                		rts	
   16905/    D8BC :                     ; ===========================================================================
   16906/    D8BC : 0018                Obj41_Index:	dc.w Obj41_Main-Obj41_Index
   16907/    D8BE : 008E                		dc.w Obj41_Up-Obj41_Index
   16908/    D8C0 : 00E4                		dc.w Obj41_AniUp-Obj41_Index
   16909/    D8C2 : 00EE                		dc.w Obj41_ResetUp-Obj41_Index
   16910/    D8C4 : 00FA                		dc.w Obj41_LR-Obj41_Index
   16911/    D8C6 : 017C                		dc.w Obj41_AniLR-Obj41_Index
   16912/    D8C8 : 0186                		dc.w Obj41_ResetLR-Obj41_Index
   16913/    D8CA : 0192                		dc.w Obj41_Dwn-Obj41_Index
   16914/    D8CC : 01F8                		dc.w Obj41_AniDwn-Obj41_Index
   16915/    D8CE : 0202                		dc.w Obj41_ResetDwn-Obj41_Index
   16916/    D8D0 :                     
   16917/    D8D0 : F000                Obj41_Powers:	dc.w -$1000		; power	of red spring
   16918/    D8D2 : F600                		dc.w -$A00		; power	of yellow spring
   16919/    D8D4 :                     ; ===========================================================================
   16920/    D8D4 :                     
   16921/    D8D4 :                     Obj41_Main:				; XREF: Obj41_Index
   16922/    D8D4 : 5428 0024           		addq.b	#2,$24(a0)
   16923/    D8D8 : 217C 0000 DAE6      		move.l	#Map_obj41,4(a0)
             D8DE : 0004             
   16924/    D8E0 : 317C 0523 0002      		move.w	#$523,2(a0)
   16925/    D8E6 : 0028 0004 0001      		ori.b	#4,1(a0)
   16926/    D8EC : 117C 0010 0019      		move.b	#$10,$19(a0)
   16927/    D8F2 : 117C 0004 0018      		move.b	#4,$18(a0)
   16928/    D8F8 : 1028 0028           		move.b	$28(a0),d0
   16929/    D8FC : 0800 0004           		btst	#4,d0		; does the spring face left/right?
   16930/    D900 : 671E                		beq.s	loc_DB54	; if not, branch
   16931/    D902 : 117C 0008 0024      		move.b	#8,$24(a0)	; use "Obj41_LR" routine
   16932/    D908 : 117C 0001 001C      		move.b	#1,$1C(a0)
   16933/    D90E : 117C 0003 001A      		move.b	#3,$1A(a0)
   16934/    D914 : 317C 0533 0002      		move.w	#$533,2(a0)
   16935/    D91A : 117C 0008 0019      		move.b	#8,$19(a0)
   16936/    D920 :                     
   16937/    D920 :                     loc_DB54:
   16938/    D920 : 0800 0005           		btst	#5,d0		; does the spring face downwards?
   16939/    D924 : 670C                		beq.s	loc_DB66	; if not, branch
   16940/    D926 : 117C 000E 0024      		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
   16941/    D92C : 08E8 0001 0022      		bset	#1,$22(a0)
   16942/    D932 :                     
   16943/    D932 :                     loc_DB66:
   16944/    D932 : 0800 0001           		btst	#1,d0
   16945/    D936 : 6706                		beq.s	loc_DB72
   16946/    D938 : 08E8 0005 0002      		bset	#5,2(a0)
   16947/    D93E :                     
   16948/    D93E :                     loc_DB72:
   16949/    D93E : 0240 000F           		andi.w	#$F,d0
   16950/    D942 : 317B 008C 0030      		move.w	Obj41_Powers(pc,d0.w),$30(a0)
   16951/    D948 : 4E75                		rts	
   16952/    D94A :                     ; ===========================================================================
   16953/    D94A :                     
   16954/    D94A :                     Obj41_Up:				; XREF: Obj41_Index
   16955/    D94A : 323C 001B           		move.w	#$1B,d1
   16956/    D94E : 343C 0008           		move.w	#8,d2
   16957/    D952 : 363C 0010           		move.w	#$10,d3
   16958/    D956 : 3828 0008           		move.w	8(a0),d4
   16959/    D95A : 6100 1E36           		bsr.w	SolidObject
   16960/    D95E : 4A28 0025           		tst.b	$25(a0)		; is Sonic on top of the spring?
   16961/    D962 : 6602                		bne.s	Obj41_BounceUp	; if yes, branch
   16962/    D964 : 4E75                		rts	
   16963/    D966 :                     ; ===========================================================================
   16964/    D966 :                     
   16965/    D966 :                     Obj41_BounceUp:				; XREF: Obj41_Up
   16966/    D966 : 5428 0024           		addq.b	#2,$24(a0)
   16967/    D96A : 5069 000C           		addq.w	#8,$C(a1)
   16968/    D96E : 3368 0030 0012      		move.w	$30(a0),$12(a1)	; move Sonic upwards
   16969/    D974 : 08E9 0001 0022      		bset	#1,$22(a1)
   16970/    D97A : 08A9 0003 0022      		bclr	#3,$22(a1)
   16971/    D980 : 137C 0010 001C      		move.b	#$10,$1C(a1)	; use "bouncing" animation
   16972/    D986 : 137C 0002 0024      		move.b	#2,$24(a1)
   16973/    D98C : 08A8 0003 0022      		bclr	#3,$22(a0)
   16974/    D992 : 4228 0025           		clr.b	$25(a0)
   16975/    D996 : 303C 00CC           		move.w	#$CC,d0
   16976/    D99A : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play spring sound
   16977/    D9A0 :                     
   16978/    D9A0 :                     Obj41_AniUp:				; XREF: Obj41_Index
   16979/    D9A0 : 43F9 0000 DACA      		lea	(Ani_obj41).l,a1
   16980/    D9A6 : 6000 CB56           		bra.w	AnimateSprite
   16981/    D9AA :                     ; ===========================================================================
   16982/    D9AA :                     
   16983/    D9AA :                     Obj41_ResetUp:				; XREF: Obj41_Index
   16984/    D9AA : 117C 0001 001D      		move.b	#1,$1D(a0)	; reset	animation
   16985/    D9B0 : 5928 0024           		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
   16986/    D9B4 : 4E75                		rts	
   16987/    D9B6 :                     ; ===========================================================================
   16988/    D9B6 :                     
   16989/    D9B6 :                     Obj41_LR:				; XREF: Obj41_Index
   16990/    D9B6 : 323C 0013           		move.w	#$13,d1
   16991/    D9BA : 343C 000E           		move.w	#$E,d2
   16992/    D9BE : 363C 000F           		move.w	#$F,d3
   16993/    D9C2 : 3828 0008           		move.w	8(a0),d4
   16994/    D9C6 : 6100 1DCA           		bsr.w	SolidObject
   16995/    D9CA : 0C28 0002 0024      		cmpi.b	#2,$24(a0)
   16996/    D9D0 : 6606                		bne.s	loc_DC0C
   16997/    D9D2 : 117C 0008 0024      		move.b	#8,$24(a0)
   16998/    D9D8 :                     
   16999/    D9D8 :                     loc_DC0C:
   17000/    D9D8 : 0828 0005 0022      		btst	#5,$22(a0)
   17001/    D9DE : 6602                		bne.s	Obj41_BounceLR
   17002/    D9E0 : 4E75                		rts	
   17003/    D9E2 :                     ; ===========================================================================
   17004/    D9E2 :                     
   17005/    D9E2 :                     Obj41_BounceLR:				; XREF: Obj41_LR
   17006/    D9E2 : 5428 0024           		addq.b	#2,$24(a0)
   17007/    D9E6 : 3368 0030 0010      		move.w	$30(a0),$10(a1)	; move Sonic to	the left
   17008/    D9EC : 5069 0008           		addq.w	#8,8(a1)
   17009/    D9F0 : 0828 0000 0022      		btst	#0,$22(a0)	; is object flipped?
   17010/    D9F6 : 660A                		bne.s	loc_DC36	; if yes, branch
   17011/    D9F8 : 0469 0010 0008      		subi.w	#$10,8(a1)
   17012/    D9FE : 4469 0010           		neg.w	$10(a1)		; move Sonic to	the right
   17013/    DA02 :                     
   17014/    DA02 :                     loc_DC36:
   17015/    DA02 : 337C 000F 003E      		move.w	#$F,$3E(a1)
   17016/    DA08 : 3369 0010 0014      		move.w	$10(a1),$14(a1)
   17017/    DA0E : 0869 0000 0022      		bchg	#0,$22(a1)
   17018/    DA14 : 0829 0002 0022      		btst	#2,$22(a1)
   17019/    DA1A : 6606                		bne.s	loc_DC56
   17020/    DA1C : 137C 0000 001C      		move.b	#0,$1C(a1)	; use running animation
   17021/    DA22 :                     
   17022/    DA22 :                     loc_DC56:
   17023/    DA22 : 08A8 0005 0022      		bclr	#5,$22(a0)
   17024/    DA28 : 08A9 0005 0022      		bclr	#5,$22(a1)
   17025/    DA2E : 303C 00CC           		move.w	#$CC,d0
   17026/    DA32 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play spring sound
   17027/    DA38 :                     
   17028/    DA38 :                     Obj41_AniLR:				; XREF: Obj41_Index
   17029/    DA38 : 43F9 0000 DACA      		lea	(Ani_obj41).l,a1
   17030/    DA3E : 6000 CABE           		bra.w	AnimateSprite
   17031/    DA42 :                     ; ===========================================================================
   17032/    DA42 :                     
   17033/    DA42 :                     Obj41_ResetLR:				; XREF: Obj41_Index
   17034/    DA42 : 117C 0002 001D      		move.b	#2,$1D(a0)	; reset	animation
   17035/    DA48 : 5928 0024           		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
   17036/    DA4C : 4E75                		rts	
   17037/    DA4E :                     ; ===========================================================================
   17038/    DA4E :                     
   17039/    DA4E :                     Obj41_Dwn:				; XREF: Obj41_Index
   17040/    DA4E : 323C 001B           		move.w	#$1B,d1
   17041/    DA52 : 343C 0008           		move.w	#8,d2
   17042/    DA56 : 363C 0010           		move.w	#$10,d3
   17043/    DA5A : 3828 0008           		move.w	8(a0),d4
   17044/    DA5E : 6100 1D32           		bsr.w	SolidObject
   17045/    DA62 : 0C28 0002 0024      		cmpi.b	#2,$24(a0)
   17046/    DA68 : 6606                		bne.s	loc_DCA4
   17047/    DA6A : 117C 000E 0024      		move.b	#$E,$24(a0)
   17048/    DA70 :                     
   17049/    DA70 :                     loc_DCA4:
   17050/    DA70 : 4A28 0025           		tst.b	$25(a0)
   17051/    DA74 : 6604                		bne.s	locret_DCAE
   17052/    DA76 : 4A44                		tst.w	d4
   17053/    DA78 : 6B02                		bmi.s	Obj41_BounceDwn
   17054/    DA7A :                     
   17055/    DA7A :                     locret_DCAE:
   17056/    DA7A : 4E75                		rts	
   17057/    DA7C :                     ; ===========================================================================
   17058/    DA7C :                     
   17059/    DA7C :                     Obj41_BounceDwn:			; XREF: Obj41_Dwn
   17060/    DA7C : 5428 0024           		addq.b	#2,$24(a0)
   17061/    DA80 : 5169 000C           		subq.w	#8,$C(a1)
   17062/    DA84 : 3368 0030 0012      		move.w	$30(a0),$12(a1)
   17063/    DA8A : 4469 0012           		neg.w	$12(a1)		; move Sonic downwards
   17064/    DA8E : 08E9 0001 0022      		bset	#1,$22(a1)
   17065/    DA94 : 08A9 0003 0022      		bclr	#3,$22(a1)
   17066/    DA9A : 137C 0002 0024      		move.b	#2,$24(a1)
   17067/    DAA0 : 08A8 0003 0022      		bclr	#3,$22(a0)
   17068/    DAA6 : 4228 0025           		clr.b	$25(a0)
   17069/    DAAA : 303C 00CC           		move.w	#$CC,d0
   17070/    DAAE : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play spring sound
   17071/    DAB4 :                     
   17072/    DAB4 :                     Obj41_AniDwn:				; XREF: Obj41_Index
   17073/    DAB4 : 43F9 0000 DACA      		lea	(Ani_obj41).l,a1
   17074/    DABA : 6000 CA42           		bra.w	AnimateSprite
   17075/    DABE :                     ; ===========================================================================
   17076/    DABE :                     
   17077/    DABE :                     Obj41_ResetDwn:				; XREF: Obj41_Index
   17078/    DABE : 117C 0001 001D      		move.b	#1,$1D(a0)	; reset	animation
   17079/    DAC4 : 5928 0024           		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
   17080/    DAC8 : 4E75                		rts	
   17081/    DACA :                     ; ===========================================================================
   17082/    DACA :                     Ani_obj41:
   17083/    DACA :                     	include "_animations/obj41.asm"
(1)    1/    DACA :                     ; ---------------------------------------------------------------------------
(1)    2/    DACA :                     ; Animation script - springs
(1)    3/    DACA :                     ; ---------------------------------------------------------------------------
(1)    4/    DACA : 0004                		dc.w byte_DD02-Ani_obj41
(1)    5/    DACC : 0010                		dc.w byte_DD0E-Ani_obj41
(1)    6/    DACE : 0001 0000 0202      byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
             DAD4 : 0202 0202 00FC    
(1)    7/    DADA : 0004 0303 0505      byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
             DAE0 : 0505 0505 03FC    
(1)    8/    DAE6 : (MACRO)              		even
   17084/    DAE6 :                     
   17085/    DAE6 :                     ; ---------------------------------------------------------------------------
   17086/    DAE6 :                     ; Sprite mappings - springs
   17087/    DAE6 :                     ; ---------------------------------------------------------------------------
   17088/    DAE6 :                     Map_obj41:
   17089/    DAE6 :                     	include "_mappings/obj41.asm"
(1)    1/    DAE6 :                     ; ---------------------------------------------------------------------------
(1)    2/    DAE6 :                     ; Sprite mappings - springs
(1)    3/    DAE6 :                     ; ---------------------------------------------------------------------------
(1)    4/    DAE6 : 000C                		dc.w byte_DD26-Map_obj41
(1)    5/    DAE8 : 0017                		dc.w byte_DD31-Map_obj41
(1)    6/    DAEA : 001D                		dc.w byte_DD37-Map_obj41
(1)    7/    DAEC : 002D                		dc.w byte_DD47-Map_obj41
(1)    8/    DAEE : 0033                		dc.w byte_DD4D-Map_obj41
(1)    9/    DAF0 : 0039                		dc.w byte_DD53-Map_obj41
(1)   10/    DAF2 : 02                  byte_DD26:	dc.b 2
(1)   11/    DAF3 : F80C 0000 F0        		dc.b $F8, $C, 0, 0, $F0
(1)   12/    DAF8 : 000C 0004 F0        		dc.b 0,	$C, 0, 4, $F0
(1)   13/    DAFD : 01                  byte_DD31:	dc.b 1
(1)   14/    DAFE : 000C 0000 F0        		dc.b 0,	$C, 0, 0, $F0
(1)   15/    DB03 : 03                  byte_DD37:	dc.b 3
(1)   16/    DB04 : E80C 0000 F0        		dc.b $E8, $C, 0, 0, $F0
(1)   17/    DB09 : F005 0008 F8        		dc.b $F0, 5, 0,	8, $F8
(1)   18/    DB0E : 000C 000C F0        		dc.b 0,	$C, 0, $C, $F0
(1)   19/    DB13 : 01                  byte_DD47:	dc.b 1
(1)   20/    DB14 : F007 0000 F8        		dc.b $F0, 7, 0,	0, $F8
(1)   21/    DB19 : 01                  byte_DD4D:	dc.b 1
(1)   22/    DB1A : F003 0004 F8        		dc.b $F0, 3, 0,	4, $F8
(1)   23/    DB1F : 04                  byte_DD53:	dc.b 4
(1)   24/    DB20 : F003 0004 10        		dc.b $F0, 3, 0,	4, $10
(1)   25/    DB25 : F809 0008 F8        		dc.b $F8, 9, 0,	8, $F8
(1)   26/    DB2A : F000 0000 F8        		dc.b $F0, 0, 0,	0, $F8
(1)   27/    DB2F : 0800 0003 F8        		dc.b 8,	0, 0, 3, $F8
(1)   28/    DB34 : (MACRO)              		even
   17090/    DB34 :                     
   17091/    DB34 :                     ; ===========================================================================
   17092/    DB34 :                     ; ---------------------------------------------------------------------------
   17093/    DB34 :                     ; Object 42 - Newtron enemy (GHZ)
   17094/    DB34 :                     ; ---------------------------------------------------------------------------
   17095/    DB34 :                     
   17096/    DB34 :                     Obj42:					; XREF: Obj_Index
   17097/    DB34 : 7000                		moveq	#0,d0
   17098/    DB36 : 1028 0024           		move.b	$24(a0),d0
   17099/    DB3A : 323B 0006           		move.w	Obj42_Index(pc,d0.w),d1
   17100/    DB3E : 4EFB 1002           		jmp	Obj42_Index(pc,d1.w)
   17101/    DB42 :                     ; ===========================================================================
   17102/    DB42 : 0006                Obj42_Index:	dc.w Obj42_Main-Obj42_Index
   17103/    DB44 : 0036                		dc.w Obj42_Action-Obj42_Index
   17104/    DB46 : 019E                		dc.w Obj42_Delete-Obj42_Index
   17105/    DB48 :                     ; ===========================================================================
   17106/    DB48 :                     
   17107/    DB48 :                     Obj42_Main:				; XREF: Obj42_Index
   17108/    DB48 : 5428 0024           		addq.b	#2,$24(a0)
   17109/    DB4C : 217C 0000 DD0C      		move.l	#Map_obj42,4(a0)
             DB52 : 0004             
   17110/    DB54 : 317C 049B 0002      		move.w	#$49B,2(a0)
   17111/    DB5A : 117C 0004 0001      		move.b	#4,1(a0)
   17112/    DB60 : 117C 0004 0018      		move.b	#4,$18(a0)
   17113/    DB66 : 117C 0014 0019      		move.b	#$14,$19(a0)
   17114/    DB6C : 117C 0010 0016      		move.b	#$10,$16(a0)
   17115/    DB72 : 117C 0008 0017      		move.b	#8,$17(a0)
   17116/    DB78 :                     
   17117/    DB78 :                     Obj42_Action:				; XREF: Obj42_Index
   17118/    DB78 : 7000                		moveq	#0,d0
   17119/    DB7A : 1028 0025           		move.b	$25(a0),d0
   17120/    DB7E : 323B 0014           		move.w	Obj42_Index2(pc,d0.w),d1
   17121/    DB82 : 4EBB 1010           		jsr	Obj42_Index2(pc,d1.w)
   17122/    DB86 : 43F9 0000 DCE4      		lea	(Ani_obj42).l,a1
   17123/    DB8C : 6100 C970           		bsr.w	AnimateSprite
   17124/    DB90 : 6000 18D8           		bra.w	MarkObjGone
   17125/    DB94 :                     ; ===========================================================================
   17126/    DB94 : 000A                Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
   17127/    DB96 : 004C                		dc.w Obj42_Type00-Obj42_Index2
   17128/    DB98 : 00C0                		dc.w Obj42_MatchFloor-Obj42_Index2
   17129/    DB9A : 00E0                		dc.w Obj42_Speed-Obj42_Index2
   17130/    DB9C : 00E6                		dc.w Obj42_Type01-Obj42_Index2
   17131/    DB9E :                     ; ===========================================================================
   17132/    DB9E :                     
   17133/    DB9E :                     Obj42_ChkDist:				; XREF: Obj42_Index2
   17134/    DB9E : 08E8 0000 0022      		bset	#0,$22(a0)
   17135/    DBA4 : 3038 D008           		move.w	($FFFFD008).w,d0
   17136/    DBA8 : 9068 0008           		sub.w	8(a0),d0
   17137/    DBAC : 6408                		bcc.s	loc_DDEA
   17138/    DBAE : 4440                		neg.w	d0
   17139/    DBB0 : 08A8 0000 0022      		bclr	#0,$22(a0)
   17140/    DBB6 :                     
   17141/    DBB6 :                     loc_DDEA:
   17142/    DBB6 : 0C40 0080           		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
   17143/    DBBA : 6422                		bcc.s	locret_DE12	; if not, branch
   17144/    DBBC : 5428 0025           		addq.b	#2,$25(a0)
   17145/    DBC0 : 117C 0001 001C      		move.b	#1,$1C(a0)
   17146/    DBC6 : 4A28 0028           		tst.b	$28(a0)		; check	object type
   17147/    DBCA : 6712                		beq.s	locret_DE12	; if type is 00, branch
   17148/    DBCC : 317C 249B 0002      		move.w	#$249B,2(a0)
   17149/    DBD2 : 117C 0008 0025      		move.b	#8,$25(a0)	; run type 01 newtron subroutine
   17150/    DBD8 : 117C 0004 001C      		move.b	#4,$1C(a0)	; use different	animation
   17151/    DBDE :                     
   17152/    DBDE :                     locret_DE12:
   17153/    DBDE : 4E75                		rts	
   17154/    DBE0 :                     ; ===========================================================================
   17155/    DBE0 :                     
   17156/    DBE0 :                     Obj42_Type00:				; XREF: Obj42_Index2
   17157/    DBE0 : 0C28 0004 001A      		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
   17158/    DBE6 : 6418                		bcc.s	Obj42_Fall	; is yes, branch
   17159/    DBE8 : 08E8 0000 0022      		bset	#0,$22(a0)
   17160/    DBEE : 3038 D008           		move.w	($FFFFD008).w,d0
   17161/    DBF2 : 9068 0008           		sub.w	8(a0),d0
   17162/    DBF6 : 6406                		bcc.s	locret_DE32
   17163/    DBF8 : 08A8 0000 0022      		bclr	#0,$22(a0)
   17164/    DBFE :                     
   17165/    DBFE :                     locret_DE32:
   17166/    DBFE : 4E75                		rts	
   17167/    DC00 :                     ; ===========================================================================
   17168/    DC00 :                     
   17169/    DC00 :                     Obj42_Fall:				; XREF: Obj42_Type00
   17170/    DC00 : 0C28 0001 001A      		cmpi.b	#1,$1A(a0)
   17171/    DC06 : 6606                		bne.s	loc_DE42
   17172/    DC08 : 117C 000C 0020      		move.b	#$C,$20(a0)
   17173/    DC0E :                     
   17174/    DC0E :                     loc_DE42:
   17175/    DC0E : 6100 F770           		bsr.w	ObjectFall
   17176/    DC12 : 6100 6FF4           		bsr.w	ObjHitFloor
   17177/    DC16 : 4A41                		tst.w	d1		; has newtron hit the floor?
   17178/    DC18 : 6A38                		bpl.s	locret_DE86	; if not, branch
   17179/    DC1A : D368 000C           		add.w	d1,$C(a0)
   17180/    DC1E : 317C 0000 0012      		move.w	#0,$12(a0)	; stop newtron falling
   17181/    DC24 : 5428 0025           		addq.b	#2,$25(a0)
   17182/    DC28 : 117C 0002 001C      		move.b	#2,$1C(a0)
   17183/    DC2E : 0828 0005 0002      		btst	#5,2(a0)
   17184/    DC34 : 6704                		beq.s	Obj42_Move
   17185/    DC36 : 5228 001C           		addq.b	#1,$1C(a0)
   17186/    DC3A :                     
   17187/    DC3A :                     Obj42_Move:
   17188/    DC3A : 117C 000D 0020      		move.b	#$D,$20(a0)
   17189/    DC40 : 317C 0200 0010      		move.w	#$200,$10(a0)	; move newtron horizontally
   17190/    DC46 : 0828 0000 0022      		btst	#0,$22(a0)
   17191/    DC4C : 6604                		bne.s	locret_DE86
   17192/    DC4E : 4468 0010           		neg.w	$10(a0)
   17193/    DC52 :                     
   17194/    DC52 :                     locret_DE86:
   17195/    DC52 : 4E75                		rts	
   17196/    DC54 :                     ; ===========================================================================
   17197/    DC54 :                     
   17198/    DC54 :                     Obj42_MatchFloor:			; XREF: Obj42_Index2
   17199/    DC54 : 6100 F756           		bsr.w	SpeedToPos
   17200/    DC58 : 6100 6FAE           		bsr.w	ObjHitFloor
   17201/    DC5C : 0C41 FFF8           		cmpi.w	#-8,d1
   17202/    DC60 : 6D0C                		blt.s	loc_DEA2
   17203/    DC62 : 0C41 000C           		cmpi.w	#$C,d1
   17204/    DC66 : 6C06                		bge.s	loc_DEA2
   17205/    DC68 : D368 000C           		add.w	d1,$C(a0)	; match	newtron's position with floor
   17206/    DC6C : 4E75                		rts	
   17207/    DC6E :                     ; ===========================================================================
   17208/    DC6E :                     
   17209/    DC6E :                     loc_DEA2:
   17210/    DC6E : 5428 0025           		addq.b	#2,$25(a0)
   17211/    DC72 : 4E75                		rts	
   17212/    DC74 :                     ; ===========================================================================
   17213/    DC74 :                     
   17214/    DC74 :                     Obj42_Speed:				; XREF: Obj42_Index2
   17215/    DC74 : 6100 F736           		bsr.w	SpeedToPos
   17216/    DC78 : 4E75                		rts	
   17217/    DC7A :                     ; ===========================================================================
   17218/    DC7A :                     
   17219/    DC7A :                     Obj42_Type01:				; XREF: Obj42_Index2
   17220/    DC7A : 0C28 0001 001A      		cmpi.b	#1,$1A(a0)
   17221/    DC80 : 6606                		bne.s	Obj42_FireMissile
   17222/    DC82 : 117C 000C 0020      		move.b	#$C,$20(a0)
   17223/    DC88 :                     
   17224/    DC88 :                     Obj42_FireMissile:
   17225/    DC88 : 0C28 0002 001A      		cmpi.b	#2,$1A(a0)
   17226/    DC8E : 664E                		bne.s	locret_DF14
   17227/    DC90 : 4A28 0032           		tst.b	$32(a0)
   17228/    DC94 : 6648                		bne.s	locret_DF14
   17229/    DC96 : 117C 0001 0032      		move.b	#1,$32(a0)
   17230/    DC9C : 6100 FBBA           		bsr.w	SingleObjLoad
   17231/    DCA0 : 663C                		bne.s	locret_DF14
   17232/    DCA2 : 12BC 0023           		move.b	#$23,0(a1)	; load missile object
   17233/    DCA6 : 3368 0008 0008      		move.w	8(a0),8(a1)
   17234/    DCAC : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   17235/    DCB2 : 5169 000C           		subq.w	#8,$C(a1)
   17236/    DCB6 : 337C 0200 0010      		move.w	#$200,$10(a1)
   17237/    DCBC : 303C 0014           		move.w	#$14,d0
   17238/    DCC0 : 0828 0000 0022      		btst	#0,$22(a0)
   17239/    DCC6 : 6606                		bne.s	loc_DF04
   17240/    DCC8 : 4440                		neg.w	d0
   17241/    DCCA : 4469 0010           		neg.w	$10(a1)
   17242/    DCCE :                     
   17243/    DCCE :                     loc_DF04:
   17244/    DCCE : D169 0008           		add.w	d0,8(a1)
   17245/    DCD2 : 1368 0022 0022      		move.b	$22(a0),$22(a1)
   17246/    DCD8 : 137C 0001 0028      		move.b	#1,$28(a1)
   17247/    DCDE :                     
   17248/    DCDE :                     locret_DF14:
   17249/    DCDE : 4E75                		rts	
   17250/    DCE0 :                     ; ===========================================================================
   17251/    DCE0 :                     
   17252/    DCE0 :                     Obj42_Delete:				; XREF: Obj42_Index
   17253/    DCE0 : 6000 F72C           		bra.w	DeleteObject
   17254/    DCE4 :                     ; ===========================================================================
   17255/    DCE4 :                     Ani_obj42:
   17256/    DCE4 :                     	include "_animations/obj42.asm"
(1)    1/    DCE4 :                     ; ---------------------------------------------------------------------------
(1)    2/    DCE4 :                     ; Animation script - Newtron enemy
(1)    3/    DCE4 :                     ; ---------------------------------------------------------------------------
(1)    4/    DCE4 : 000A                		dc.w byte_DF24-Ani_obj42
(1)    5/    DCE6 : 000E                		dc.w byte_DF28-Ani_obj42
(1)    6/    DCE8 : 0016                		dc.w byte_DF30-Ani_obj42
(1)    7/    DCEA : 001A                		dc.w byte_DF34-Ani_obj42
(1)    8/    DCEC : 001E                		dc.w byte_DF38-Ani_obj42
(1)    9/    DCEE : 0F0A FF00           byte_DF24:	dc.b $F, $A, $FF, 0
(1)   10/    DCF2 : 1300 0103 0405      byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
             DCF8 : FE01             
(1)   11/    DCFA : 0206 07FF           byte_DF30:	dc.b 2,	6, 7, $FF
(1)   12/    DCFE : 0208 09FF           byte_DF34:	dc.b 2,	8, 9, $FF
(1)   13/    DD02 : 1300 0101 0201      byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
             DD08 : 0100 FC00          
(1)   14/    DD0C : (MACRO)              		even
   17257/    DD0C :                     
   17258/    DD0C :                     ; ---------------------------------------------------------------------------
   17259/    DD0C :                     ; Sprite mappings - Newtron enemy (GHZ)
   17260/    DD0C :                     ; ---------------------------------------------------------------------------
   17261/    DD0C :                     Map_obj42:
   17262/    DD0C :                     	include "_mappings/obj42.asm"
(1)    1/    DD0C :                     ; ---------------------------------------------------------------------------
(1)    2/    DD0C :                     ; Sprite mappings - Newtron enemy (GHZ)
(1)    3/    DD0C :                     ; ---------------------------------------------------------------------------
(1)    4/    DD0C : 0016 0026           		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
(1)    5/    DD10 : 0036 0046           		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
(1)    6/    DD14 : 005B 006B           		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
(1)    7/    DD18 : 0076 0086           		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
(1)    8/    DD1C : 0096 00A6           		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
(1)    9/    DD20 : 00B6                		dc.w byte_DFF8-Map_obj42
(1)   10/    DD22 : 03                  byte_DF58:	dc.b 3
(1)   11/    DD23 : EC0D 0000 EC        		dc.b $EC, $D, 0, 0, $EC
(1)   12/    DD28 : F400 0008 0C        		dc.b $F4, 0, 0,	8, $C
(1)   13/    DD2D : FC0E 0009 F4        		dc.b $FC, $E, 0, 9, $F4
(1)   14/    DD32 : 03                  byte_DF68:	dc.b 3
(1)   15/    DD33 : EC06 0015 EC        		dc.b $EC, 6, 0,	$15, $EC
(1)   16/    DD38 : EC09 001B FC        		dc.b $EC, 9, 0,	$1B, $FC
(1)   17/    DD3D : FC0A 0021 FC        		dc.b $FC, $A, 0, $21, $FC
(1)   18/    DD42 : 03                  byte_DF78:	dc.b 3
(1)   19/    DD43 : EC06 002A EC        		dc.b $EC, 6, 0,	$2A, $EC
(1)   20/    DD48 : EC09 001B FC        		dc.b $EC, 9, 0,	$1B, $FC
(1)   21/    DD4D : FC0A 0021 FC        		dc.b $FC, $A, 0, $21, $FC
(1)   22/    DD52 : 04                  byte_DF88:	dc.b 4
(1)   23/    DD53 : EC06 0030 EC        		dc.b $EC, 6, 0,	$30, $EC
(1)   24/    DD58 : EC09 001B FC        		dc.b $EC, 9, 0,	$1B, $FC
(1)   25/    DD5D : FC09 0036 FC        		dc.b $FC, 9, 0,	$36, $FC
(1)   26/    DD62 : 0C00 003C 0C        		dc.b $C, 0, 0, $3C, $C
(1)   27/    DD67 : 03                  byte_DF9D:	dc.b 3
(1)   28/    DD68 : F40D 003D EC        		dc.b $F4, $D, 0, $3D, $EC
(1)   29/    DD6D : FC00 0020 0C        		dc.b $FC, 0, 0,	$20, $C
(1)   30/    DD72 : 0408 0045 FC        		dc.b 4,	8, 0, $45, $FC
(1)   31/    DD77 : 02                  byte_DFAD:	dc.b 2
(1)   32/    DD78 : F80D 0048 EC        		dc.b $F8, $D, 0, $48, $EC
(1)   33/    DD7D : F801 0050 0C        		dc.b $F8, 1, 0,	$50, $C
(1)   34/    DD82 : 03                  byte_DFB8:	dc.b 3
(1)   35/    DD83 : F80D 0048 EC        		dc.b $F8, $D, 0, $48, $EC
(1)   36/    DD88 : F801 0050 0C        		dc.b $F8, 1, 0,	$50, $C
(1)   37/    DD8D : FE00 0052 14        		dc.b $FE, 0, 0,	$52, $14
(1)   38/    DD92 : 03                  byte_DFC8:	dc.b 3
(1)   39/    DD93 : F80D 0048 EC        		dc.b $F8, $D, 0, $48, $EC
(1)   40/    DD98 : F801 0050 0C        		dc.b $F8, 1, 0,	$50, $C
(1)   41/    DD9D : FE04 0053 14        		dc.b $FE, 4, 0,	$53, $14
(1)   42/    DDA2 : 03                  byte_DFD8:	dc.b 3
(1)   43/    DDA3 : F80D 0048 EC        		dc.b $F8, $D, 0, $48, $EC
(1)   44/    DDA8 : F801 0050 0C        		dc.b $F8, 1, 0,	$50, $C
(1)   45/    DDAD : FE00 E052 14        		dc.b $FE, 0, $E0, $52, $14
(1)   46/    DDB2 : 03                  byte_DFE8:	dc.b 3
(1)   47/    DDB3 : F80D 0048 EC        		dc.b $F8, $D, 0, $48, $EC
(1)   48/    DDB8 : F801 0050 0C        		dc.b $F8, 1, 0,	$50, $C
(1)   49/    DDBD : FE04 E053 14        		dc.b $FE, 4, $E0, $53, $14
(1)   50/    DDC2 : 00                  byte_DFF8:	dc.b 0
(1)   51/    DDC3 : (MACRO)              		even
(1)   51/    DDC3 : 00                                          dc.b 0 ;ds.b 1 
   17263/    DDC4 :                     
   17264/    DDC4 :                     ; ===========================================================================
   17265/    DDC4 :                     ; ---------------------------------------------------------------------------
   17266/    DDC4 :                     ; Object 43 - Roller enemy (SYZ)
   17267/    DDC4 :                     ; ---------------------------------------------------------------------------
   17268/    DDC4 :                     
   17269/    DDC4 :                     Obj43:					; XREF: Obj_Index
   17270/    DDC4 : 7000                		moveq	#0,d0
   17271/    DDC6 : 1028 0024           		move.b	$24(a0),d0
   17272/    DDCA : 323B 0006           		move.w	Obj43_Index(pc,d0.w),d1
   17273/    DDCE : 4EFB 1002           		jmp	Obj43_Index(pc,d1.w)
   17274/    DDD2 :                     ; ===========================================================================
   17275/    DDD2 : 0004                Obj43_Index:	dc.w Obj43_Main-Obj43_Index
   17276/    DDD4 : 004C                		dc.w Obj43_Action-Obj43_Index
   17277/    DDD6 :                     ; ===========================================================================
   17278/    DDD6 :                     
   17279/    DDD6 :                     Obj43_Main:				; XREF: Obj43_Index
   17280/    DDD6 : 117C 000E 0016      		move.b	#$E,$16(a0)
   17281/    DDDC : 117C 0008 0017      		move.b	#8,$17(a0)
   17282/    DDE2 : 6100 F59C           		bsr.w	ObjectFall
   17283/    DDE6 : 6100 6E20           		bsr.w	ObjHitFloor
   17284/    DDEA : 4A41                		tst.w	d1
   17285/    DDEC : 6A2E                		bpl.s	locret_E052
   17286/    DDEE : D368 000C           		add.w	d1,$C(a0)	; match	roller's position with the floor
   17287/    DDF2 : 317C 0000 0012      		move.w	#0,$12(a0)
   17288/    DDF8 : 5428 0024           		addq.b	#2,$24(a0)
   17289/    DDFC : 217C 0000 DF6C      		move.l	#Map_obj43,4(a0)
             DE02 : 0004             
   17290/    DE04 : 317C 04B8 0002      		move.w	#$4B8,2(a0)
   17291/    DE0A : 117C 0004 0001      		move.b	#4,1(a0)
   17292/    DE10 : 117C 0004 0018      		move.b	#4,$18(a0)
   17293/    DE16 : 117C 0010 0019      		move.b	#$10,$19(a0)
   17294/    DE1C :                     
   17295/    DE1C :                     locret_E052:
   17296/    DE1C : 4E75                		rts	
   17297/    DE1E :                     ; ===========================================================================
   17298/    DE1E :                     
   17299/    DE1E :                     Obj43_Action:				; XREF: Obj43_Index
   17300/    DE1E : 7000                		moveq	#0,d0
   17301/    DE20 : 1028 0025           		move.b	$25(a0),d0
   17302/    DE24 : 323B 0048           		move.w	Obj43_Index2(pc,d0.w),d1
   17303/    DE28 : 4EBB 1044           		jsr	Obj43_Index2(pc,d1.w)
   17304/    DE2C : 43F9 0000 DF54      		lea	(Ani_obj43).l,a1
   17305/    DE32 : 6100 C6CA           		bsr.w	AnimateSprite
   17306/    DE36 : 3028 0008           		move.w	8(a0),d0
   17307/    DE3A : 0240 FF80           		andi.w	#$FF80,d0
   17308/    DE3E : 3238 F700           		move.w	($FFFFF700).w,d1
   17309/    DE42 : 0441 0080           		subi.w	#$80,d1
   17310/    DE46 : 0241 FF80           		andi.w	#$FF80,d1
   17311/    DE4A : 9041                		sub.w	d1,d0
   17312/    DE4C : 0C40 0280           		cmpi.w	#$280,d0
   17313/    DE50 : 6E00 0006           		bgt.w	Obj43_ChkGone
   17314/    DE54 : 6000 F57C           		bra.w	DisplaySprite
   17315/    DE58 :                     ; ===========================================================================
   17316/    DE58 :                     
   17317/    DE58 :                     Obj43_ChkGone:				; XREF: Obj43_Action
   17318/    DE58 : 45F8 FC00           		lea	($FFFFFC00).w,a2
   17319/    DE5C : 7000                		moveq	#0,d0
   17320/    DE5E : 1028 0023           		move.b	$23(a0),d0
   17321/    DE62 : 6706                		beq.s	Obj43_Delete
   17322/    DE64 : 08B2 0007 0002      		bclr	#7,2(a2,d0.w)
   17323/    DE6A :                     
   17324/    DE6A :                     Obj43_Delete:
   17325/    DE6A : 6000 F5A2           		bra.w	DeleteObject
   17326/    DE6E :                     ; ===========================================================================
   17327/    DE6E : 0008                Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
   17328/    DE70 : 0032                		dc.w Obj43_RollNoChk-Obj43_Index2
   17329/    DE72 : 005A                		dc.w Obj43_ChkJump-Obj43_Index2
   17330/    DE74 : 008C                		dc.w Obj43_MatchFloor-Obj43_Index2
   17331/    DE76 :                     ; ===========================================================================
   17332/    DE76 :                     
   17333/    DE76 :                     Obj43_RollChk:				; XREF: Obj43_Index2
   17334/    DE76 : 3038 D008           		move.w	($FFFFD008).w,d0
   17335/    DE7A : 0440 0100           		subi.w	#$100,d0
   17336/    DE7E : 651C                		bcs.s	loc_E0D2
   17337/    DE80 : 9068 0008           		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
   17338/    DE84 : 6516                		bcs.s	loc_E0D2
   17339/    DE86 : 5828 0025           		addq.b	#4,$25(a0)
   17340/    DE8A : 117C 0002 001C      		move.b	#2,$1C(a0)
   17341/    DE90 : 317C 0700 0010      		move.w	#$700,$10(a0)	; move Roller horizontally
   17342/    DE96 : 117C 008E 0020      		move.b	#$8E,$20(a0)	; make Roller invincible
   17343/    DE9C :                     
   17344/    DE9C :                     loc_E0D2:
   17345/    DE9C : 588F                		addq.l	#4,sp
   17346/    DE9E : 4E75                		rts	
   17347/    DEA0 :                     ; ===========================================================================
   17348/    DEA0 :                     
   17349/    DEA0 :                     Obj43_RollNoChk:			; XREF: Obj43_Index2
   17350/    DEA0 : 0C28 0002 001C      		cmpi.b	#2,$1C(a0)
   17351/    DEA6 : 671A                		beq.s	loc_E0F8
   17352/    DEA8 : 5368 0030           		subq.w	#1,$30(a0)
   17353/    DEAC : 6A12                		bpl.s	locret_E0F6
   17354/    DEAE : 117C 0001 001C      		move.b	#1,$1C(a0)
   17355/    DEB4 : 317C 0700 0010      		move.w	#$700,$10(a0)
   17356/    DEBA : 117C 008E 0020      		move.b	#$8E,$20(a0)
   17357/    DEC0 :                     
   17358/    DEC0 :                     locret_E0F6:
   17359/    DEC0 : 4E75                		rts	
   17360/    DEC2 :                     ; ===========================================================================
   17361/    DEC2 :                     
   17362/    DEC2 :                     loc_E0F8:
   17363/    DEC2 : 5428 0025           		addq.b	#2,$25(a0)
   17364/    DEC6 : 4E75                		rts	
   17365/    DEC8 :                     ; ===========================================================================
   17366/    DEC8 :                     
   17367/    DEC8 :                     Obj43_ChkJump:				; XREF: Obj43_Index2
   17368/    DEC8 : 6100 0052           		bsr.w	Obj43_Stop
   17369/    DECC : 6100 F4DE           		bsr.w	SpeedToPos
   17370/    DED0 : 6100 6D36           		bsr.w	ObjHitFloor
   17371/    DED4 : 0C41 FFF8           		cmpi.w	#-8,d1
   17372/    DED8 : 6D0C                		blt.s	Obj43_Jump
   17373/    DEDA : 0C41 000C           		cmpi.w	#$C,d1
   17374/    DEDE : 6C06                		bge.s	Obj43_Jump
   17375/    DEE0 : D368 000C           		add.w	d1,$C(a0)
   17376/    DEE4 : 4E75                		rts	
   17377/    DEE6 :                     ; ===========================================================================
   17378/    DEE6 :                     
   17379/    DEE6 :                     Obj43_Jump:
   17380/    DEE6 : 5428 0025           		addq.b	#2,$25(a0)
   17381/    DEEA : 08E8 0000 0032      		bset	#0,$32(a0)
   17382/    DEF0 : 6706                		beq.s	locret_E12E
   17383/    DEF2 : 317C FA00 0012      		move.w	#-$600,$12(a0)	; move Roller vertically
   17384/    DEF8 :                     
   17385/    DEF8 :                     locret_E12E:
   17386/    DEF8 : 4E75                		rts	
   17387/    DEFA :                     ; ===========================================================================
   17388/    DEFA :                     
   17389/    DEFA :                     Obj43_MatchFloor:			; XREF: Obj43_Index2
   17390/    DEFA : 6100 F484           		bsr.w	ObjectFall
   17391/    DEFE : 4A68 0012           		tst.w	$12(a0)
   17392/    DF02 : 6B16                		bmi.s	locret_E150
   17393/    DF04 : 6100 6D02           		bsr.w	ObjHitFloor
   17394/    DF08 : 4A41                		tst.w	d1
   17395/    DF0A : 6A0E                		bpl.s	locret_E150
   17396/    DF0C : D368 000C           		add.w	d1,$C(a0)	; match	Roller's position with the floor
   17397/    DF10 : 5528 0025           		subq.b	#2,$25(a0)
   17398/    DF14 : 317C 0000 0012      		move.w	#0,$12(a0)
   17399/    DF1A :                     
   17400/    DF1A :                     locret_E150:
   17401/    DF1A : 4E75                		rts	
   17402/    DF1C :                     
   17403/    DF1C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   17404/    DF1C :                     
   17405/    DF1C :                     
   17406/    DF1C :                     Obj43_Stop:				; XREF: Obj43_ChkJump
   17407/    DF1C : 4A28 0032           		tst.b	$32(a0)
   17408/    DF20 : 6B30                		bmi.s	locret_E188
   17409/    DF22 : 3038 D008           		move.w	($FFFFD008).w,d0
   17410/    DF26 : 0440 0030           		subi.w	#$30,d0
   17411/    DF2A : 9068 0008           		sub.w	8(a0),d0
   17412/    DF2E : 6422                		bcc.s	locret_E188
   17413/    DF30 : 117C 0000 001C      		move.b	#0,$1C(a0)
   17414/    DF36 : 117C 000E 0020      		move.b	#$E,$20(a0)
   17415/    DF3C : 4268 0010           		clr.w	$10(a0)
   17416/    DF40 : 317C 0078 0030      		move.w	#120,$30(a0)	; set waiting time to 2	seconds
   17417/    DF46 : 117C 0002 0025      		move.b	#2,$25(a0)
   17418/    DF4C : 08E8 0007 0032      		bset	#7,$32(a0)
   17419/    DF52 :                     
   17420/    DF52 :                     locret_E188:
   17421/    DF52 : 4E75                		rts	
   17422/    DF54 :                     ; End of function Obj43_Stop
   17423/    DF54 :                     
   17424/    DF54 :                     ; ===========================================================================
   17425/    DF54 :                     Ani_obj43:
   17426/    DF54 :                     	include "_animations/obj43.asm"
(1)    1/    DF54 :                     ; ---------------------------------------------------------------------------
(1)    2/    DF54 :                     ; Animation script - Roller enemy
(1)    3/    DF54 :                     ; ---------------------------------------------------------------------------
(1)    4/    DF54 : 0006                		dc.w byte_E190-Ani_obj43
(1)    5/    DF56 : 000C                		dc.w byte_E196-Ani_obj43
(1)    6/    DF58 : 0012                		dc.w byte_E19C-Ani_obj43
(1)    7/    DF5A : 0F02 0100 FE01      byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
(1)    8/    DF60 : 0F01 02FD 0200      byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
(1)    9/    DF66 : 0303 0402 FF        byte_E19C:	dc.b 3,	3, 4, 2, $FF
(1)   10/    DF6B : (MACRO)              		even
(1)   10/    DF6B : 00                                          dc.b 0 ;ds.b 1 
   17427/    DF6C :                     
   17428/    DF6C :                     ; ---------------------------------------------------------------------------
   17429/    DF6C :                     ; Sprite mappings - Roller enemy (SYZ)
   17430/    DF6C :                     ; ---------------------------------------------------------------------------
   17431/    DF6C :                     Map_obj43:
   17432/    DF6C :                     	include "_mappings/obj43.asm"
(1)    1/    DF6C :                     ; ---------------------------------------------------------------------------
(1)    2/    DF6C :                     ; Sprite mappings - Roller enemy (SYZ)
(1)    3/    DF6C :                     ; ---------------------------------------------------------------------------
(1)    4/    DF6C : 000A 0015           		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
(1)    5/    DF70 : 0020 0026           		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
(1)    6/    DF74 : 002C                		dc.w byte_E1CE-Map_obj43
(1)    7/    DF76 : 02                  byte_E1AC:	dc.b 2
(1)    8/    DF77 : DE0E 0000 F0        		dc.b $DE, $E, 0, 0, $F0
(1)    9/    DF7C : F60E 000C F0        		dc.b $F6, $E, 0, $C, $F0
(1)   10/    DF81 : 02                  byte_E1B7:	dc.b 2
(1)   11/    DF82 : E60E 0000 F0        		dc.b $E6, $E, 0, 0, $F0
(1)   12/    DF87 : FE0D 0018 F0        		dc.b $FE, $D, 0, $18, $F0
(1)   13/    DF8C : 01                  byte_E1C2:	dc.b 1
(1)   14/    DF8D : F00F 0020 F0        		dc.b $F0, $F, 0, $20, $F0
(1)   15/    DF92 : 01                  byte_E1C8:	dc.b 1
(1)   16/    DF93 : F00F 0030 F0        		dc.b $F0, $F, 0, $30, $F0
(1)   17/    DF98 : 01                  byte_E1CE:	dc.b 1
(1)   18/    DF99 : F00F 0040 F0        		dc.b $F0, $F, 0, $40, $F0
(1)   19/    DF9E : (MACRO)              		even
   17433/    DF9E :                     
   17434/    DF9E :                     ; ===========================================================================
   17435/    DF9E :                     ; ---------------------------------------------------------------------------
   17436/    DF9E :                     ; Object 44 - walls (GHZ)
   17437/    DF9E :                     ; ---------------------------------------------------------------------------
   17438/    DF9E :                     
   17439/    DF9E :                     Obj44:					; XREF: Obj_Index
   17440/    DF9E : 7000                		moveq	#0,d0
   17441/    DFA0 : 1028 0024           		move.b	$24(a0),d0
   17442/    DFA4 : 323B 0006           		move.w	Obj44_Index(pc,d0.w),d1
   17443/    DFA8 : 4EFB 1002           		jmp	Obj44_Index(pc,d1.w)
   17444/    DFAC :                     ; ===========================================================================
   17445/    DFAC : 0006                Obj44_Index:	dc.w Obj44_Main-Obj44_Index
   17446/    DFAE : 003E                		dc.w Obj44_Solid-Obj44_Index
   17447/    DFB0 : 004A                		dc.w Obj44_Display-Obj44_Index
   17448/    DFB2 :                     ; ===========================================================================
   17449/    DFB2 :                     
   17450/    DFB2 :                     Obj44_Main:				; XREF: Obj44_Index
   17451/    DFB2 : 5428 0024           		addq.b	#2,$24(a0)
   17452/    DFB6 : 217C 0000 E01A      		move.l	#Map_obj44,4(a0)
             DFBC : 0004             
   17453/    DFBE : 317C 434C 0002      		move.w	#$434C,2(a0)
   17454/    DFC4 : 0028 0004 0001      		ori.b	#4,1(a0)
   17455/    DFCA : 117C 0008 0019      		move.b	#8,$19(a0)
   17456/    DFD0 : 117C 0006 0018      		move.b	#6,$18(a0)
   17457/    DFD6 : 1168 0028 001A      		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
   17458/    DFDC : 08A8 0004 001A      		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
   17459/    DFE2 : 6706                		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
   17460/    DFE4 : 5428 0024           		addq.b	#2,$24(a0)
   17461/    DFE8 : 600C                		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
   17462/    DFEA :                     ; ===========================================================================
   17463/    DFEA :                     
   17464/    DFEA :                     Obj44_Solid:				; XREF: Obj44_Index
   17465/    DFEA : 323C 0013           		move.w	#$13,d1
   17466/    DFEE : 343C 0028           		move.w	#$28,d2
   17467/    DFF2 : 6100 A872           		bsr.w	Obj44_SolidWall
   17468/    DFF6 :                     
   17469/    DFF6 :                     Obj44_Display:				; XREF: Obj44_Index
   17470/    DFF6 : 6100 F3DA           		bsr.w	DisplaySprite
   17471/    DFFA : 3028 0008           		move.w	8(a0),d0
   17472/    DFFE : 0240 FF80           		andi.w	#$FF80,d0
   17473/    E002 : 3238 F700           		move.w	($FFFFF700).w,d1
   17474/    E006 : 0441 0080           		subi.w	#$80,d1
   17475/    E00A : 0241 FF80           		andi.w	#$FF80,d1
   17476/    E00E : 9041                		sub.w	d1,d0
   17477/    E010 : 0C40 0280           		cmpi.w	#$280,d0
   17478/    E014 : 6200 F3F8           		bhi.w	DeleteObject
   17479/    E018 : 4E75                		rts	
   17480/    E01A :                     ; ===========================================================================
   17481/    E01A :                     ; ---------------------------------------------------------------------------
   17482/    E01A :                     ; Sprite mappings - walls (GHZ)
   17483/    E01A :                     ; ---------------------------------------------------------------------------
   17484/    E01A :                     Map_obj44:
   17485/    E01A :                     	include "_mappings/obj44.asm"
(1)    1/    E01A :                     ; ---------------------------------------------------------------------------
(1)    2/    E01A :                     ; Sprite mappings - walls (GHZ)
(1)    3/    E01A :                     ; ---------------------------------------------------------------------------
(1)    4/    E01A : 0006                		dc.w byte_E256-Map_obj44
(1)    5/    E01C : 001B                		dc.w byte_E26B-Map_obj44
(1)    6/    E01E : 0030                		dc.w byte_E280-Map_obj44
(1)    7/    E020 : 04                  byte_E256:	dc.b 4
(1)    8/    E021 : E005 0004 F8        		dc.b $E0, 5, 0,	4, $F8
(1)    9/    E026 : F005 0008 F8        		dc.b $F0, 5, 0,	8, $F8
(1)   10/    E02B : 0005 0008 F8        		dc.b 0,	5, 0, 8, $F8
(1)   11/    E030 : 1005 0008 F8        		dc.b $10, 5, 0,	8, $F8
(1)   12/    E035 : 04                  byte_E26B:	dc.b 4
(1)   13/    E036 : E005 0008 F8        		dc.b $E0, 5, 0,	8, $F8
(1)   14/    E03B : F005 0008 F8        		dc.b $F0, 5, 0,	8, $F8
(1)   15/    E040 : 0005 0008 F8        		dc.b 0,	5, 0, 8, $F8
(1)   16/    E045 : 1005 0008 F8        		dc.b $10, 5, 0,	8, $F8
(1)   17/    E04A : 04                  byte_E280:	dc.b 4
(1)   18/    E04B : E005 0000 F8        		dc.b $E0, 5, 0,	0, $F8
(1)   19/    E050 : F005 0000 F8        		dc.b $F0, 5, 0,	0, $F8
(1)   20/    E055 : 0005 0000 F8        		dc.b 0,	5, 0, 0, $F8
(1)   21/    E05A : 1005 0000 F8        		dc.b $10, 5, 0,	0, $F8
(1)   22/    E05F : (MACRO)              		even
(1)   22/    E05F : 00                                          dc.b 0 ;ds.b 1 
   17486/    E060 :                     
   17487/    E060 :                     ; ===========================================================================
   17488/    E060 :                     ; ---------------------------------------------------------------------------
   17489/    E060 :                     ; Object 13 - lava ball	producer (MZ, SLZ)
   17490/    E060 :                     ; ---------------------------------------------------------------------------
   17491/    E060 :                     
   17492/    E060 :                     Obj13:					; XREF: Obj_Index
   17493/    E060 : 7000                		moveq	#0,d0
   17494/    E062 : 1028 0024           		move.b	$24(a0),d0
   17495/    E066 : 323B 000A           		move.w	Obj13_Index(pc,d0.w),d1
   17496/    E06A : 4EBB 1006           		jsr	Obj13_Index(pc,d1.w)
   17497/    E06E : 6000 0130           		bra.w	Obj14_ChkDel
   17498/    E072 :                     ; ===========================================================================
   17499/    E072 : 000A                Obj13_Index:	dc.w Obj13_Main-Obj13_Index
   17500/    E074 : 002A                		dc.w Obj13_MakeLava-Obj13_Index
   17501/    E076 :                     ; ---------------------------------------------------------------------------
   17502/    E076 :                     ;
   17503/    E076 :                     ; Lava ball production rates
   17504/    E076 :                     ;
   17505/    E076 : 1E3C 5A78 96B4      Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
   17506/    E07C :                     ; ===========================================================================
   17507/    E07C :                     
   17508/    E07C :                     Obj13_Main:				; XREF: Obj13_Index
   17509/    E07C : 5428 0024           		addq.b	#2,$24(a0)
   17510/    E080 : 1028 0028           		move.b	$28(a0),d0
   17511/    E084 : E848                		lsr.w	#4,d0
   17512/    E086 : 0240 000F           		andi.w	#$F,d0
   17513/    E08A : 117B 00EA 001F      		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
   17514/    E090 : 1168 001F 001E      		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
   17515/    E096 : 0228 000F 0028      		andi.b	#$F,$28(a0)
   17516/    E09C :                     
   17517/    E09C :                     Obj13_MakeLava:				; XREF: Obj13_Index
   17518/    E09C : 5328 001E           		subq.b	#1,$1E(a0)	; subtract 1 from time delay
   17519/    E0A0 : 6628                		bne.s	locret_E302	; if time still	remains, branch
   17520/    E0A2 : 1168 001F 001E      		move.b	$1F(a0),$1E(a0)	; reset	time delay
   17521/    E0A8 : 6100 F5A2           		bsr.w	ChkObjOnScreen
   17522/    E0AC : 661C                		bne.s	locret_E302
   17523/    E0AE : 6100 F7A8           		bsr.w	SingleObjLoad
   17524/    E0B2 : 6616                		bne.s	locret_E302
   17525/    E0B4 : 12BC 0014           		move.b	#$14,0(a1)	; load lava ball object
   17526/    E0B8 : 3368 0008 0008      		move.w	8(a0),8(a1)
   17527/    E0BE : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   17528/    E0C4 : 1368 0028 0028      		move.b	$28(a0),$28(a1)
   17529/    E0CA :                     
   17530/    E0CA :                     locret_E302:
   17531/    E0CA : 4E75                		rts	
   17532/    E0CC :                     ; ===========================================================================
   17533/    E0CC :                     ; ---------------------------------------------------------------------------
   17534/    E0CC :                     ; Object 14 - lava balls (MZ, SLZ)
   17535/    E0CC :                     ; ---------------------------------------------------------------------------
   17536/    E0CC :                     
   17537/    E0CC :                     Obj14:					; XREF: Obj_Index
   17538/    E0CC : 7000                		moveq	#0,d0
   17539/    E0CE : 1028 0024           		move.b	$24(a0),d0
   17540/    E0D2 : 323B 000A           		move.w	Obj14_Index(pc,d0.w),d1
   17541/    E0D6 : 4EBB 1006           		jsr	Obj14_Index(pc,d1.w)
   17542/    E0DA : 6000 F2F6           		bra.w	DisplaySprite
   17543/    E0DE :                     ; ===========================================================================
   17544/    E0DE : 0018                Obj14_Index:	dc.w Obj14_Main-Obj14_Index
   17545/    E0E0 : 00A4                		dc.w Obj14_Action-Obj14_Index
   17546/    E0E2 : 01AA                		dc.w Obj14_Delete-Obj14_Index
   17547/    E0E4 :                     
   17548/    E0E4 : FC00 FB00 FA00      Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
             E0EA : F900 FE00          
   17549/    E0EE : 0200 FE00 0200      		dc.w $200, $FE00, $200,	0
             E0F4 : 0000             
   17550/    E0F6 :                     ; ===========================================================================
   17551/    E0F6 :                     
   17552/    E0F6 :                     Obj14_Main:				; XREF: Obj14_Index
   17553/    E0F6 : 5428 0024           		addq.b	#2,$24(a0)
   17554/    E0FA : 117C 0008 0016      		move.b	#8,$16(a0)
   17555/    E100 : 117C 0008 0017      		move.b	#8,$17(a0)
   17556/    E106 : 217C 0000 B150      		move.l	#Map_obj14,4(a0)
             E10C : 0004             
   17557/    E10E : 317C 0345 0002      		move.w	#$345,2(a0)
   17558/    E114 : 0C38 0003 FE10      		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
   17559/    E11A : 6606                		bne.s	loc_E35A
   17560/    E11C : 317C 0480 0002      		move.w	#$480,2(a0)	; SLZ specific code
   17561/    E122 :                     
   17562/    E122 :                     loc_E35A:
   17563/    E122 : 117C 0004 0001      		move.b	#4,1(a0)
   17564/    E128 : 117C 0003 0018      		move.b	#3,$18(a0)
   17565/    E12E : 117C 008B 0020      		move.b	#$8B,$20(a0)
   17566/    E134 : 3168 000C 0030      		move.w	$C(a0),$30(a0)
   17567/    E13A : 4A28 0029           		tst.b	$29(a0)
   17568/    E13E : 6704                		beq.s	Obj14_SetSpeed
   17569/    E140 : 5428 0018           		addq.b	#2,$18(a0)
   17570/    E144 :                     
   17571/    E144 :                     Obj14_SetSpeed:
   17572/    E144 : 7000                		moveq	#0,d0
   17573/    E146 : 1028 0028           		move.b	$28(a0),d0
   17574/    E14A : D040                		add.w	d0,d0
   17575/    E14C : 317B 0096 0012      		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
   17576/    E152 : 117C 0008 0019      		move.b	#8,$19(a0)
   17577/    E158 : 0C28 0006 0028      		cmpi.b	#6,$28(a0)	; is object type below $6 ?
   17578/    E15E : 6518                		bcs.s	Obj14_PlaySnd	; if yes, branch
   17579/    E160 : 117C 0010 0019      		move.b	#$10,$19(a0)
   17580/    E166 : 117C 0002 001C      		move.b	#2,$1C(a0)	; use horizontal animation
   17581/    E16C : 3168 0012 0010      		move.w	$12(a0),$10(a0)	; set horizontal speed
   17582/    E172 : 317C 0000 0012      		move.w	#0,$12(a0)	; delete vertical speed
   17583/    E178 :                     
   17584/    E178 :                     Obj14_PlaySnd:
   17585/    E178 : 303C 00AE           		move.w	#$AE,d0
   17586/    E17C : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play lava ball sound
   17587/    E182 :                     
   17588/    E182 :                     Obj14_Action:				; XREF: Obj14_Index
   17589/    E182 : 7000                		moveq	#0,d0
   17590/    E184 : 1028 0028           		move.b	$28(a0),d0
   17591/    E188 : D040                		add.w	d0,d0
   17592/    E18A : 323B 0034           		move.w	Obj14_TypeIndex(pc,d0.w),d1
   17593/    E18E : 4EBB 1030           		jsr	Obj14_TypeIndex(pc,d1.w)
   17594/    E192 : 6100 F218           		bsr.w	SpeedToPos
   17595/    E196 : 43F9 0000 E28C      		lea	(Ani_obj14).l,a1
   17596/    E19C : 6100 C360           		bsr.w	AnimateSprite
   17597/    E1A0 :                     
   17598/    E1A0 :                     Obj14_ChkDel:				; XREF: Obj13
   17599/    E1A0 : 3028 0008           		move.w	8(a0),d0
   17600/    E1A4 : 0240 FF80           		andi.w	#$FF80,d0
   17601/    E1A8 : 3238 F700           		move.w	($FFFFF700).w,d1
   17602/    E1AC : 0441 0080           		subi.w	#$80,d1
   17603/    E1B0 : 0241 FF80           		andi.w	#$FF80,d1
   17604/    E1B4 : 9041                		sub.w	d1,d0
   17605/    E1B6 : 0C40 0280           		cmpi.w	#$280,d0
   17606/    E1BA : 6200 F252           		bhi.w	DeleteObject
   17607/    E1BE : 4E75                		rts	
   17608/    E1C0 :                     ; ===========================================================================
   17609/    E1C0 : 0012 0012           Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
   17610/    E1C4 : 0012 0012           		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
   17611/    E1C8 : 003A 005C           		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
   17612/    E1CC : 007E 00A2           		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
   17613/    E1D0 : 00C6                		dc.w Obj14_Type08-Obj14_TypeIndex
   17614/    E1D2 :                     ; ===========================================================================
   17615/    E1D2 :                     ; lavaball types 00-03 fly up and fall back down
   17616/    E1D2 :                     
   17617/    E1D2 :                     Obj14_Type00:				; XREF: Obj14_TypeIndex
   17618/    E1D2 : 0668 0018 0012      		addi.w	#$18,$12(a0)	; increase object's downward speed
   17619/    E1D8 : 3028 0030           		move.w	$30(a0),d0
   17620/    E1DC : B068 000C           		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
   17621/    E1E0 : 6404                		bcc.s	loc_E41E	; if not, branch
   17622/    E1E2 : 5428 0024           		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
   17623/    E1E6 :                     
   17624/    E1E6 :                     loc_E41E:
   17625/    E1E6 : 08A8 0001 0022      		bclr	#1,$22(a0)
   17626/    E1EC : 4A68 0012           		tst.w	$12(a0)
   17627/    E1F0 : 6A06                		bpl.s	locret_E430
   17628/    E1F2 : 08E8 0001 0022      		bset	#1,$22(a0)
   17629/    E1F8 :                     
   17630/    E1F8 :                     locret_E430:
   17631/    E1F8 : 4E75                		rts	
   17632/    E1FA :                     ; ===========================================================================
   17633/    E1FA :                     ; lavaball type	04 flies up until it hits the ceiling
   17634/    E1FA :                     
   17635/    E1FA :                     Obj14_Type04:				; XREF: Obj14_TypeIndex
   17636/    E1FA : 08E8 0001 0022      		bset	#1,$22(a0)
   17637/    E200 : 6100 6B8C           		bsr.w	ObjHitCeiling
   17638/    E204 : 4A41                		tst.w	d1
   17639/    E206 : 6A12                		bpl.s	locret_E452
   17640/    E208 : 117C 0008 0028      		move.b	#8,$28(a0)
   17641/    E20E : 117C 0001 001C      		move.b	#1,$1C(a0)
   17642/    E214 : 317C 0000 0012      		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
   17643/    E21A :                     
   17644/    E21A :                     locret_E452:
   17645/    E21A : 4E75                		rts	
   17646/    E21C :                     ; ===========================================================================
   17647/    E21C :                     ; lavaball type	05 falls down until it hits the	floor
   17648/    E21C :                     
   17649/    E21C :                     Obj14_Type05:				; XREF: Obj14_TypeIndex
   17650/    E21C : 08A8 0001 0022      		bclr	#1,$22(a0)
   17651/    E222 : 6100 69E4           		bsr.w	ObjHitFloor
   17652/    E226 : 4A41                		tst.w	d1
   17653/    E228 : 6A12                		bpl.s	locret_E474
   17654/    E22A : 117C 0008 0028      		move.b	#8,$28(a0)
   17655/    E230 : 117C 0001 001C      		move.b	#1,$1C(a0)
   17656/    E236 : 317C 0000 0012      		move.w	#0,$12(a0)	; stop the object when it touches the floor
   17657/    E23C :                     
   17658/    E23C :                     locret_E474:
   17659/    E23C : 4E75                		rts	
   17660/    E23E :                     ; ===========================================================================
   17661/    E23E :                     ; lavaball types 06-07 move sideways
   17662/    E23E :                     
   17663/    E23E :                     Obj14_Type06:				; XREF: Obj14_TypeIndex
   17664/    E23E : 08E8 0000 0022      		bset	#0,$22(a0)
   17665/    E244 : 76F8                		moveq	#-8,d3
   17666/    E246 : 6100 6C14           		bsr.w	ObjHitWallLeft
   17667/    E24A : 4A41                		tst.w	d1
   17668/    E24C : 6A12                		bpl.s	locret_E498
   17669/    E24E : 117C 0008 0028      		move.b	#8,$28(a0)
   17670/    E254 : 117C 0003 001C      		move.b	#3,$1C(a0)
   17671/    E25A : 317C 0000 0010      		move.w	#0,$10(a0)	; stop object when it touches a	wall
   17672/    E260 :                     
   17673/    E260 :                     locret_E498:
   17674/    E260 : 4E75                		rts	
   17675/    E262 :                     ; ===========================================================================
   17676/    E262 :                     
   17677/    E262 :                     Obj14_Type07:				; XREF: Obj14_TypeIndex
   17678/    E262 : 08A8 0000 0022      		bclr	#0,$22(a0)
   17679/    E268 : 7608                		moveq	#8,d3
   17680/    E26A : 6100 6A5E           		bsr.w	ObjHitWallRight
   17681/    E26E : 4A41                		tst.w	d1
   17682/    E270 : 6A12                		bpl.s	locret_E4BC
   17683/    E272 : 117C 0008 0028      		move.b	#8,$28(a0)
   17684/    E278 : 117C 0003 001C      		move.b	#3,$1C(a0)
   17685/    E27E : 317C 0000 0010      		move.w	#0,$10(a0)	; stop object when it touches a	wall
   17686/    E284 :                     
   17687/    E284 :                     locret_E4BC:
   17688/    E284 : 4E75                		rts	
   17689/    E286 :                     ; ===========================================================================
   17690/    E286 :                     
   17691/    E286 :                     Obj14_Type08:				; XREF: Obj14_TypeIndex
   17692/    E286 : 4E75                		rts	
   17693/    E288 :                     ; ===========================================================================
   17694/    E288 :                     
   17695/    E288 :                     Obj14_Delete:				; XREF: Obj14_Index
   17696/    E288 : 6000 F184           		bra.w	DeleteObject
   17697/    E28C :                     ; ===========================================================================
   17698/    E28C :                     Ani_obj14:
   17699/    E28C :                     	include "_animations/obj14.asm"
(1)    1/    E28C :                     ; ---------------------------------------------------------------------------
(1)    2/    E28C :                     ; Animation script - lava balls
(1)    3/    E28C :                     ; ---------------------------------------------------------------------------
(1)    4/    E28C : 0008                		dc.w byte_E4CC-Ani_obj14
(1)    5/    E28E : 000E                		dc.w byte_E4D2-Ani_obj14
(1)    6/    E290 : 0012                		dc.w byte_E4D6-Ani_obj14
(1)    7/    E292 : 0018                		dc.w byte_E4DC-Ani_obj14
(1)    8/    E294 : 0500 2001 21FF      byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
(1)    9/    E29A : 0502 FC00           byte_E4D2:	dc.b 5,	2, $FC,	0
(1)   10/    E29E : 0503 4304 44FF      byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
(1)   11/    E2A4 : 0505 FC00           byte_E4DC:	dc.b 5,	5, $FC,	0
(1)   12/    E2A8 : (MACRO)              		even
   17700/    E2A8 :                     
   17701/    E2A8 :                     ; ===========================================================================
   17702/    E2A8 :                     ; ---------------------------------------------------------------------------
   17703/    E2A8 :                     ; Object 6D - flame thrower (SBZ)
   17704/    E2A8 :                     ; ---------------------------------------------------------------------------
   17705/    E2A8 :                     
   17706/    E2A8 :                     Obj6D:					; XREF: Obj_Index
   17707/    E2A8 : 7000                		moveq	#0,d0
   17708/    E2AA : 1028 0024           		move.b	$24(a0),d0
   17709/    E2AE : 323B 0006           		move.w	Obj6D_Index(pc,d0.w),d1
   17710/    E2B2 : 4EFB 1002           		jmp	Obj6D_Index(pc,d1.w)
   17711/    E2B6 :                     ; ===========================================================================
   17712/    E2B6 : 0004                Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
   17713/    E2B8 : 0068                		dc.w Obj6D_Action-Obj6D_Index
   17714/    E2BA :                     ; ===========================================================================
   17715/    E2BA :                     
   17716/    E2BA :                     Obj6D_Main:				; XREF: Obj6D_Index
   17717/    E2BA : 5428 0024           		addq.b	#2,$24(a0)
   17718/    E2BE : 217C 0000 E3BC      		move.l	#Map_obj6D,4(a0)
             E2C4 : 0004             
   17719/    E2C6 : 317C 83D9 0002      		move.w	#$83D9,2(a0)
   17720/    E2CC : 0028 0004 0001      		ori.b	#4,1(a0)
   17721/    E2D2 : 117C 0001 0018      		move.b	#1,$18(a0)
   17722/    E2D8 : 3168 000C 0030      		move.w	$C(a0),$30(a0)
   17723/    E2DE : 117C 000C 0019      		move.b	#$C,$19(a0)
   17724/    E2E4 : 1028 0028           		move.b	$28(a0),d0
   17725/    E2E8 : 0240 00F0           		andi.w	#$F0,d0		; read 1st digit of object type
   17726/    E2EC : D040                		add.w	d0,d0		; multiply by 2
   17727/    E2EE : 3140 0030           		move.w	d0,$30(a0)
   17728/    E2F2 : 3140 0032           		move.w	d0,$32(a0)	; set flaming time
   17729/    E2F6 : 1028 0028           		move.b	$28(a0),d0
   17730/    E2FA : 0240 000F           		andi.w	#$F,d0		; read 2nd digit of object type
   17731/    E2FE : EB48                		lsl.w	#5,d0		; multiply by $20
   17732/    E300 : 3140 0034           		move.w	d0,$34(a0)	; set pause time
   17733/    E304 : 117C 000A 0036      		move.b	#$A,$36(a0)
   17734/    E30A : 0828 0001 0022      		btst	#1,$22(a0)
   17735/    E310 : 670C                		beq.s	Obj6D_Action
   17736/    E312 : 117C 0002 001C      		move.b	#2,$1C(a0)
   17737/    E318 : 117C 0015 0036      		move.b	#$15,$36(a0)
   17738/    E31E :                     
   17739/    E31E :                     Obj6D_Action:				; XREF: Obj6D_Index
   17740/    E31E : 5368 0030           		subq.w	#1,$30(a0)	; subtract 1 from time
   17741/    E322 : 6A1E                		bpl.s	loc_E57A	; if time remains, branch
   17742/    E324 : 3168 0034 0030      		move.w	$34(a0),$30(a0)	; begin	pause time
   17743/    E32A : 0868 0000 001C      		bchg	#0,$1C(a0)
   17744/    E330 : 6710                		beq.s	loc_E57A
   17745/    E332 : 3168 0032 0030      		move.w	$32(a0),$30(a0)	; begin	flaming	time
   17746/    E338 : 303C 00B3           		move.w	#$B3,d0
   17747/    E33C : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play flame sound
   17748/    E342 :                     
   17749/    E342 :                     loc_E57A:
   17750/    E342 : 43F9 0000 E384      		lea	(Ani_obj6D).l,a1
   17751/    E348 : 6100 C1B4           		bsr.w	AnimateSprite
   17752/    E34C : 117C 0000 0020      		move.b	#0,$20(a0)
   17753/    E352 : 1028 0036           		move.b	$36(a0),d0
   17754/    E356 : B028 001A           		cmp.b	$1A(a0),d0
   17755/    E35A : 6606                		bne.s	Obj6D_ChkDel
   17756/    E35C : 117C 00A3 0020      		move.b	#$A3,$20(a0)
   17757/    E362 :                     
   17758/    E362 :                     Obj6D_ChkDel:
   17759/    E362 : 3028 0008           		move.w	8(a0),d0
   17760/    E366 : 0240 FF80           		andi.w	#$FF80,d0
   17761/    E36A : 3238 F700           		move.w	($FFFFF700).w,d1
   17762/    E36E : 0441 0080           		subi.w	#$80,d1
   17763/    E372 : 0241 FF80           		andi.w	#$FF80,d1
   17764/    E376 : 9041                		sub.w	d1,d0
   17765/    E378 : 0C40 0280           		cmpi.w	#$280,d0
   17766/    E37C : 6200 F090           		bhi.w	DeleteObject
   17767/    E380 : 6000 F050           		bra.w	DisplaySprite
   17768/    E384 :                     ; ===========================================================================
   17769/    E384 :                     Ani_obj6D:
   17770/    E384 :                     	include "_animations/obj6D.asm"
(1)    1/    E384 :                     ; ---------------------------------------------------------------------------
(1)    2/    E384 :                     ; Animation script - flamethrower (SBZ)
(1)    3/    E384 :                     ; ---------------------------------------------------------------------------
(1)    4/    E384 : 0008                		dc.w byte_E5C4-Ani_obj6D
(1)    5/    E386 : 0016                		dc.w byte_E5D2-Ani_obj6D
(1)    6/    E388 : 0020                		dc.w byte_E5DC-Ani_obj6D
(1)    7/    E38A : 002E                		dc.w byte_E5EA-Ani_obj6D
(1)    8/    E38C : 0300 0102 0304      byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
             E392 : 0506 0708 090A 
             E398 : FE02             
(1)    9/    E39A : 0009 0705 0301      byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
             E3A0 : 00FE 0100          
(1)   10/    E3A4 : 030B 0C0D 0E0F      byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
             E3AA : 1011 1213 1415 
             E3B0 : FE02             
(1)   11/    E3B2 : 0014 1211 0F0D      byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
             E3B8 : 0BFE 0100          
(1)   12/    E3BC : (MACRO)              		even
   17771/    E3BC :                     
   17772/    E3BC :                     ; ---------------------------------------------------------------------------
   17773/    E3BC :                     ; Sprite mappings - flame thrower (SBZ)
   17774/    E3BC :                     ; ---------------------------------------------------------------------------
   17775/    E3BC :                     Map_obj6D:
   17776/    E3BC :                     	include "_mappings/obj6D.asm"
(1)    1/    E3BC :                     ; ---------------------------------------------------------------------------
(1)    2/    E3BC :                     ; Sprite mappings - flame thrower (SBZ)
(1)    3/    E3BC :                     ; ---------------------------------------------------------------------------
(1)    4/    E3BC : 002C 0032           		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
(1)    5/    E3C0 : 003D 0048           		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
(1)    6/    E3C4 : 0058 0068           		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
(1)    7/    E3C8 : 007D 0092           		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
(1)    8/    E3CC : 00AC 00C6           		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
(1)    9/    E3D0 : 00E5 0104           		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
(1)   10/    E3D4 : 010A 0115           		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
(1)   11/    E3D8 : 0120 0130           		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
(1)   12/    E3DC : 0140 0155           		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
(1)   13/    E3E0 : 016A 0184           		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
(1)   14/    E3E4 : 019E 01BD           		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
(1)   15/    E3E8 : 01                  byte_E620:	dc.b 1
(1)   16/    E3E9 : 2805 4014 FB        		dc.b $28, 5, $40, $14, $FB
(1)   17/    E3EE : 02                  byte_E626:	dc.b 2
(1)   18/    E3EF : 2001 0000 FD        		dc.b $20, 1, 0,	0, $FD
(1)   19/    E3F4 : 2805 4014 FB        		dc.b $28, 5, $40, $14, $FB
(1)   20/    E3F9 : 02                  byte_E631:	dc.b 2
(1)   21/    E3FA : 2001 0800 FC        		dc.b $20, 1, 8,	0, $FC
(1)   22/    E3FF : 2805 4014 FB        		dc.b $28, 5, $40, $14, $FB
(1)   23/    E404 : 03                  byte_E63C:	dc.b 3
(1)   24/    E405 : 1006 0002 F8        		dc.b $10, 6, 0,	2, $F8
(1)   25/    E40A : 2001 0000 FD        		dc.b $20, 1, 0,	0, $FD
(1)   26/    E40F : 2805 4014 FB        		dc.b $28, 5, $40, $14, $FB
(1)   27/    E414 : 03                  byte_E64C:	dc.b 3
(1)   28/    E415 : 1006 0802 F8        		dc.b $10, 6, 8,	2, $F8
(1)   29/    E41A : 2001 0800 FC        		dc.b $20, 1, 8,	0, $FC
(1)   30/    E41F : 2805 4014 FB        		dc.b $28, 5, $40, $14, $FB
(1)   31/    E424 : 04                  byte_E65C:	dc.b 4
(1)   32/    E425 : 0806 0002 F8        		dc.b 8,	6, 0, 2, $F8
(1)   33/    E42A : 1006 0002 F8        		dc.b $10, 6, 0,	2, $F8
(1)   34/    E42F : 2001 0000 FD        		dc.b $20, 1, 0,	0, $FD
(1)   35/    E434 : 2805 4014 FB        		dc.b $28, 5, $40, $14, $FB
(1)   36/    E439 : 04                  byte_E671:	dc.b 4
(1)   37/    E43A : 0806 0802 F8        		dc.b 8,	6, 8, 2, $F8
(1)   38/    E43F : 1006 0802 F8        		dc.b $10, 6, 8,	2, $F8
(1)   39/    E444 : 2001 0800 FC        		dc.b $20, 1, 8,	0, $FC
(1)   40/    E449 : 2805 4014 FB        		dc.b $28, 5, $40, $14, $FB
(1)   41/    E44E : 05                  byte_E686:	dc.b 5
(1)   42/    E44F : F80B 0008 F4        		dc.b $F8, $B, 0, 8, $F4
(1)   43/    E454 : 0806 0002 F8        		dc.b 8,	6, 0, 2, $F8
(1)   44/    E459 : 1006 0002 F8        		dc.b $10, 6, 0,	2, $F8
(1)   45/    E45E : 2001 0000 FD        		dc.b $20, 1, 0,	0, $FD
(1)   46/    E463 : 2805 4014 FB        		dc.b $28, 5, $40, $14, $FB
(1)   47/    E468 : 05                  byte_E6A0:	dc.b 5
(1)   48/    E469 : F80B 0808 F4        		dc.b $F8, $B, 8, 8, $F4
(1)   49/    E46E : 0806 0802 F8        		dc.b 8,	6, 8, 2, $F8
(1)   50/    E473 : 1006 0802 F8        		dc.b $10, 6, 8,	2, $F8
(1)   51/    E478 : 2001 0800 FC        		dc.b $20, 1, 8,	0, $FC
(1)   52/    E47D : 2805 4014 FB        		dc.b $28, 5, $40, $14, $FB
(1)   53/    E482 : 06                  byte_E6BA:	dc.b 6
(1)   54/    E483 : E80B 0008 F4        		dc.b $E8, $B, 0, 8, $F4
(1)   55/    E488 : F70B 0008 F4        		dc.b $F7, $B, 0, 8, $F4
(1)   56/    E48D : 0806 0002 F8        		dc.b 8,	6, 0, 2, $F8
(1)   57/    E492 : 0F06 0002 F8        		dc.b $F, 6, 0, 2, $F8
(1)   58/    E497 : 2001 0000 FD        		dc.b $20, 1, 0,	0, $FD
(1)   59/    E49C : 2805 4014 FB        		dc.b $28, 5, $40, $14, $FB
(1)   60/    E4A1 : 06                  byte_E6D9:	dc.b 6
(1)   61/    E4A2 : E70B 0808 F4        		dc.b $E7, $B, 8, 8, $F4
(1)   62/    E4A7 : F80B 0808 F4        		dc.b $F8, $B, 8, 8, $F4
(1)   63/    E4AC : 0706 0802 F8        		dc.b 7,	6, 8, 2, $F8
(1)   64/    E4B1 : 1006 0802 F8        		dc.b $10, 6, 8,	2, $F8
(1)   65/    E4B6 : 2001 0800 FC        		dc.b $20, 1, 8,	0, $FC
(1)   66/    E4BB : 2805 4014 FB        		dc.b $28, 5, $40, $14, $FB
(1)   67/    E4C0 : 01                  byte_E6F8:	dc.b 1
(1)   68/    E4C1 : 2805 4018 F9        		dc.b $28, 5, $40, $18, $F9
(1)   69/    E4C6 : 02                  byte_E6FE:	dc.b 2
(1)   70/    E4C7 : 2805 4018 F9        		dc.b $28, 5, $40, $18, $F9
(1)   71/    E4CC : 2001 0000 FD        		dc.b $20, 1, 0,	0, $FD
(1)   72/    E4D1 : 02                  byte_E709:	dc.b 2
(1)   73/    E4D2 : 2805 4018 F9        		dc.b $28, 5, $40, $18, $F9
(1)   74/    E4D7 : 2001 0800 FC        		dc.b $20, 1, 8,	0, $FC
(1)   75/    E4DC : 03                  byte_E714:	dc.b 3
(1)   76/    E4DD : 1006 0002 F8        		dc.b $10, 6, 0,	2, $F8
(1)   77/    E4E2 : 2805 4018 F9        		dc.b $28, 5, $40, $18, $F9
(1)   78/    E4E7 : 2001 0000 FD        		dc.b $20, 1, 0,	0, $FD
(1)   79/    E4EC : 03                  byte_E724:	dc.b 3
(1)   80/    E4ED : 1006 0802 F8        		dc.b $10, 6, 8,	2, $F8
(1)   81/    E4F2 : 2805 4018 F9        		dc.b $28, 5, $40, $18, $F9
(1)   82/    E4F7 : 2001 0800 FC        		dc.b $20, 1, 8,	0, $FC
(1)   83/    E4FC : 04                  byte_E734:	dc.b 4
(1)   84/    E4FD : 0806 0002 F8        		dc.b 8,	6, 0, 2, $F8
(1)   85/    E502 : 1006 0002 F8        		dc.b $10, 6, 0,	2, $F8
(1)   86/    E507 : 2805 4018 F9        		dc.b $28, 5, $40, $18, $F9
(1)   87/    E50C : 2001 0000 FD        		dc.b $20, 1, 0,	0, $FD
(1)   88/    E511 : 04                  byte_E749:	dc.b 4
(1)   89/    E512 : 0806 0802 F8        		dc.b 8,	6, 8, 2, $F8
(1)   90/    E517 : 1006 0802 F8        		dc.b $10, 6, 8,	2, $F8
(1)   91/    E51C : 2805 4018 F9        		dc.b $28, 5, $40, $18, $F9
(1)   92/    E521 : 2001 0800 FC        		dc.b $20, 1, 8,	0, $FC
(1)   93/    E526 : 05                  byte_E75E:	dc.b 5
(1)   94/    E527 : F80B 0008 F4        		dc.b $F8, $B, 0, 8, $F4
(1)   95/    E52C : 0806 0002 F8        		dc.b 8,	6, 0, 2, $F8
(1)   96/    E531 : 1006 0002 F8        		dc.b $10, 6, 0,	2, $F8
(1)   97/    E536 : 2805 4018 F9        		dc.b $28, 5, $40, $18, $F9
(1)   98/    E53B : 2001 0000 FD        		dc.b $20, 1, 0,	0, $FD
(1)   99/    E540 : 05                  byte_E778:	dc.b 5
(1)  100/    E541 : F80B 0808 F4        		dc.b $F8, $B, 8, 8, $F4
(1)  101/    E546 : 0806 0802 F8        		dc.b 8,	6, 8, 2, $F8
(1)  102/    E54B : 1006 0802 F8        		dc.b $10, 6, 8,	2, $F8
(1)  103/    E550 : 2805 4018 F9        		dc.b $28, 5, $40, $18, $F9
(1)  104/    E555 : 2001 0800 FC        		dc.b $20, 1, 8,	0, $FC
(1)  105/    E55A : 06                  byte_E792:	dc.b 6
(1)  106/    E55B : E80B 0008 F4        		dc.b $E8, $B, 0, 8, $F4
(1)  107/    E560 : F70B 0008 F4        		dc.b $F7, $B, 0, 8, $F4
(1)  108/    E565 : 0806 0002 F8        		dc.b 8,	6, 0, 2, $F8
(1)  109/    E56A : 0F06 0002 F8        		dc.b $F, 6, 0, 2, $F8
(1)  110/    E56F : 2805 4018 F9        		dc.b $28, 5, $40, $18, $F9
(1)  111/    E574 : 2001 0000 FD        		dc.b $20, 1, 0,	0, $FD
(1)  112/    E579 : 06                  byte_E7B1:	dc.b 6
(1)  113/    E57A : E70B 0808 F4        		dc.b $E7, $B, 8, 8, $F4
(1)  114/    E57F : F80B 0808 F4        		dc.b $F8, $B, 8, 8, $F4
(1)  115/    E584 : 0706 0802 F8        		dc.b 7,	6, 8, 2, $F8
(1)  116/    E589 : 1006 0802 F8        		dc.b $10, 6, 8,	2, $F8
(1)  117/    E58E : 2805 4018 F9        		dc.b $28, 5, $40, $18, $F9
(1)  118/    E593 : 2001 0800 FC        		dc.b $20, 1, 8,	0, $FC
(1)  119/    E598 : (MACRO)              		even
   17777/    E598 :                     
   17778/    E598 :                     ; ===========================================================================
   17779/    E598 :                     ; ---------------------------------------------------------------------------
   17780/    E598 :                     ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
   17781/    E598 :                     ; ---------------------------------------------------------------------------
   17782/    E598 :                     
   17783/    E598 :                     Obj46:					; XREF: Obj_Index
   17784/    E598 : 7000                		moveq	#0,d0
   17785/    E59A : 1028 0024           		move.b	$24(a0),d0
   17786/    E59E : 323B 0006           		move.w	Obj46_Index(pc,d0.w),d1
   17787/    E5A2 : 4EFB 1002           		jmp	Obj46_Index(pc,d1.w)
   17788/    E5A6 :                     ; ===========================================================================
   17789/    E5A6 : 0004                Obj46_Index:	dc.w Obj46_Main-Obj46_Index
   17790/    E5A8 : 0040                		dc.w Obj46_Action-Obj46_Index
   17791/    E5AA :                     ; ===========================================================================
   17792/    E5AA :                     
   17793/    E5AA :                     Obj46_Main:				; XREF: Obj46_Index
   17794/    E5AA : 5428 0024           		addq.b	#2,$24(a0)
   17795/    E5AE : 117C 000F 0016      		move.b	#$F,$16(a0)
   17796/    E5B4 : 117C 000F 0017      		move.b	#$F,$17(a0)
   17797/    E5BA : 217C 0000 E6CC      		move.l	#Map_obj46,4(a0)
             E5C0 : 0004             
   17798/    E5C2 : 317C 4000 0002      		move.w	#$4000,2(a0)
   17799/    E5C8 : 117C 0004 0001      		move.b	#4,1(a0)
   17800/    E5CE : 117C 0003 0018      		move.b	#3,$18(a0)
   17801/    E5D4 : 117C 0010 0019      		move.b	#$10,$19(a0)
   17802/    E5DA : 3168 000C 0030      		move.w	$C(a0),$30(a0)
   17803/    E5E0 : 317C 05C0 0032      		move.w	#$5C0,$32(a0)
   17804/    E5E6 :                     
   17805/    E5E6 :                     Obj46_Action:				; XREF: Obj46_Index
   17806/    E5E6 : 4A28 0001           		tst.b	1(a0)
   17807/    E5EA : 6A28                		bpl.s	Obj46_ChkDel
   17808/    E5EC : 7000                		moveq	#0,d0
   17809/    E5EE : 1028 0028           		move.b	$28(a0),d0	; get object type
   17810/    E5F2 : 0240 0007           		andi.w	#7,d0		; read only the	1st digit
   17811/    E5F6 : D040                		add.w	d0,d0
   17812/    E5F8 : 323B 003E           		move.w	Obj46_TypeIndex(pc,d0.w),d1
   17813/    E5FC : 4EBB 103A           		jsr	Obj46_TypeIndex(pc,d1.w)
   17814/    E600 : 323C 001B           		move.w	#$1B,d1
   17815/    E604 : 343C 0010           		move.w	#$10,d2
   17816/    E608 : 363C 0011           		move.w	#$11,d3
   17817/    E60C : 3828 0008           		move.w	8(a0),d4
   17818/    E610 : 6100 1180           		bsr.w	SolidObject
   17819/    E614 :                     
   17820/    E614 :                     Obj46_ChkDel:
   17821/    E614 : 6100 EDBC           		bsr.w	DisplaySprite
   17822/    E618 : 3028 0008           		move.w	8(a0),d0
   17823/    E61C : 0240 FF80           		andi.w	#$FF80,d0
   17824/    E620 : 3238 F700           		move.w	($FFFFF700).w,d1
   17825/    E624 : 0441 0080           		subi.w	#$80,d1
   17826/    E628 : 0241 FF80           		andi.w	#$FF80,d1
   17827/    E62C : 9041                		sub.w	d1,d0
   17828/    E62E : 0C40 0280           		cmpi.w	#$280,d0
   17829/    E632 : 6200 EDDA           		bhi.w	DeleteObject
   17830/    E636 : 4E75                		rts	
   17831/    E638 :                     ; ===========================================================================
   17832/    E638 : 000A                Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
   17833/    E63A : 0024                		dc.w Obj46_Type01-Obj46_TypeIndex
   17834/    E63C : 000C                		dc.w Obj46_Type02-Obj46_TypeIndex
   17835/    E63E : 0044                		dc.w Obj46_Type03-Obj46_TypeIndex
   17836/    E640 : 0080                		dc.w Obj46_Type04-Obj46_TypeIndex
   17837/    E642 :                     ; ===========================================================================
   17838/    E642 :                     
   17839/    E642 :                     Obj46_Type00:				; XREF: Obj46_TypeIndex
   17840/    E642 : 4E75                		rts	
   17841/    E644 :                     ; ===========================================================================
   17842/    E644 :                     
   17843/    E644 :                     Obj46_Type02:				; XREF: Obj46_TypeIndex
   17844/    E644 : 3038 D008           		move.w	($FFFFD008).w,d0
   17845/    E648 : 9068 0008           		sub.w	8(a0),d0
   17846/    E64C : 6402                		bcc.s	loc_E888
   17847/    E64E : 4440                		neg.w	d0
   17848/    E650 :                     
   17849/    E650 :                     loc_E888:
   17850/    E650 : 0C40 0090           		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
   17851/    E654 : 6406                		bcc.s	Obj46_Type01	; if not, resume wobbling
   17852/    E656 : 117C 0003 0028      		move.b	#3,$28(a0)	; if yes, make the block fall
   17853/    E65C :                     
   17854/    E65C :                     Obj46_Type01:				; XREF: Obj46_TypeIndex
   17855/    E65C : 7000                		moveq	#0,d0
   17856/    E65E : 1038 FE74           		move.b	($FFFFFE74).w,d0
   17857/    E662 : 0828 0003 0028      		btst	#3,$28(a0)
   17858/    E668 : 6706                		beq.s	loc_E8A8
   17859/    E66A : 4440                		neg.w	d0
   17860/    E66C : 0640 0010           		addi.w	#$10,d0
   17861/    E670 :                     
   17862/    E670 :                     loc_E8A8:
   17863/    E670 : 3228 0030           		move.w	$30(a0),d1
   17864/    E674 : 9240                		sub.w	d0,d1
   17865/    E676 : 3141 000C           		move.w	d1,$C(a0)	; update the block's position to make it wobble
   17866/    E67A : 4E75                		rts	
   17867/    E67C :                     ; ===========================================================================
   17868/    E67C :                     
   17869/    E67C :                     Obj46_Type03:				; XREF: Obj46_TypeIndex
   17870/    E67C : 6100 ED2E           		bsr.w	SpeedToPos
   17871/    E680 : 0668 0018 0012      		addi.w	#$18,$12(a0)	; increase falling speed
   17872/    E686 : 6100 6580           		bsr.w	ObjHitFloor
   17873/    E68A : 4A41                		tst.w	d1		; has the block	hit the	floor?
   17874/    E68C : 6A00 0028           		bpl.w	locret_E8EE	; if not, branch
   17875/    E690 : D368 000C           		add.w	d1,$C(a0)
   17876/    E694 : 4268 0012           		clr.w	$12(a0)		; stop the block falling
   17877/    E698 : 3168 000C 0030      		move.w	$C(a0),$30(a0)
   17878/    E69E : 117C 0004 0028      		move.b	#4,$28(a0)
   17879/    E6A4 : 3011                		move.w	(a1),d0
   17880/    E6A6 : 0240 03FF           		andi.w	#$3FF,d0
   17881/    E6AA : 0C40 02E8           		cmpi.w	#$2E8,d0
   17882/    E6AE : 6406                		bcc.s	locret_E8EE
   17883/    E6B0 : 117C 0000 0028      		move.b	#0,$28(a0)
   17884/    E6B6 :                     
   17885/    E6B6 :                     locret_E8EE:
   17886/    E6B6 : 4E75                		rts	
   17887/    E6B8 :                     ; ===========================================================================
   17888/    E6B8 :                     
   17889/    E6B8 :                     Obj46_Type04:				; XREF: Obj46_TypeIndex
   17890/    E6B8 : 7000                		moveq	#0,d0
   17891/    E6BA : 1038 FE70           		move.b	($FFFFFE70).w,d0
   17892/    E6BE : E648                		lsr.w	#3,d0
   17893/    E6C0 : 3228 0030           		move.w	$30(a0),d1
   17894/    E6C4 : 9240                		sub.w	d0,d1
   17895/    E6C6 : 3141 000C           		move.w	d1,$C(a0)	; make the block wobble
   17896/    E6CA : 4E75                		rts	
   17897/    E6CC :                     ; ===========================================================================
   17898/    E6CC :                     ; ---------------------------------------------------------------------------
   17899/    E6CC :                     ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
   17900/    E6CC :                     ; ---------------------------------------------------------------------------
   17901/    E6CC :                     Map_obj46:
   17902/    E6CC :                     	include "_mappings/obj46.asm"
(1)    1/    E6CC :                     ; ---------------------------------------------------------------------------
(1)    2/    E6CC :                     ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
(1)    3/    E6CC :                     ; ---------------------------------------------------------------------------
(1)    4/    E6CC : 0002                		dc.w byte_E906-Map_obj46
(1)    5/    E6CE : 01                  byte_E906:	dc.b 1
(1)    6/    E6CF : F00F 0001 F0        		dc.b $F0, $F, 0, 1, $F0
(1)    7/    E6D4 : (MACRO)              		even
   17903/    E6D4 :                     
   17904/    E6D4 :                     ; ===========================================================================
   17905/    E6D4 :                     ; ---------------------------------------------------------------------------
   17906/    E6D4 :                     ; Object 12 - lamp (SYZ)
   17907/    E6D4 :                     ; ---------------------------------------------------------------------------
   17908/    E6D4 :                     
   17909/    E6D4 :                     Obj12:					; XREF: Obj_Index
   17910/    E6D4 : 7000                		moveq	#0,d0
   17911/    E6D6 : 1028 0024           		move.b	$24(a0),d0
   17912/    E6DA : 323B 0006           		move.w	Obj12_Index(pc,d0.w),d1
   17913/    E6DE : 4EFB 1002           		jmp	Obj12_Index(pc,d1.w)
   17914/    E6E2 :                     ; ===========================================================================
   17915/    E6E2 : 0004                Obj12_Index:	dc.w Obj12_Main-Obj12_Index
   17916/    E6E4 : 0028                		dc.w Obj12_Animate-Obj12_Index
   17917/    E6E6 :                     ; ===========================================================================
   17918/    E6E6 :                     
   17919/    E6E6 :                     Obj12_Main:				; XREF: Obj12_Index
   17920/    E6E6 : 5428 0024           		addq.b	#2,$24(a0)
   17921/    E6EA : 217C 0000 E74A      		move.l	#Map_obj12,4(a0)
             E6F0 : 0004             
   17922/    E6F2 : 317C 0000 0002      		move.w	#0,2(a0)
   17923/    E6F8 : 117C 0004 0001      		move.b	#4,1(a0)
   17924/    E6FE : 117C 0010 0019      		move.b	#$10,$19(a0)
   17925/    E704 : 117C 0006 0018      		move.b	#6,$18(a0)
   17926/    E70A :                     
   17927/    E70A :                     Obj12_Animate:				; XREF: Obj12_Index
   17928/    E70A : 5328 001E           		subq.b	#1,$1E(a0)
   17929/    E70E : 6A18                		bpl.s	Obj12_ChkDel
   17930/    E710 : 117C 0007 001E      		move.b	#7,$1E(a0)
   17931/    E716 : 5228 001A           		addq.b	#1,$1A(a0)
   17932/    E71A : 0C28 0006 001A      		cmpi.b	#6,$1A(a0)
   17933/    E720 : 6506                		bcs.s	Obj12_ChkDel
   17934/    E722 : 117C 0000 001A      		move.b	#0,$1A(a0)
   17935/    E728 :                     
   17936/    E728 :                     Obj12_ChkDel:
   17937/    E728 : 3028 0008           		move.w	8(a0),d0
   17938/    E72C : 0240 FF80           		andi.w	#$FF80,d0
   17939/    E730 : 3238 F700           		move.w	($FFFFF700).w,d1
   17940/    E734 : 0441 0080           		subi.w	#$80,d1
   17941/    E738 : 0241 FF80           		andi.w	#$FF80,d1
   17942/    E73C : 9041                		sub.w	d1,d0
   17943/    E73E : 0C40 0280           		cmpi.w	#$280,d0
   17944/    E742 : 6200 ECCA           		bhi.w	DeleteObject
   17945/    E746 : 6000 EC8A           		bra.w	DisplaySprite
   17946/    E74A :                     ; ===========================================================================
   17947/    E74A :                     ; ---------------------------------------------------------------------------
   17948/    E74A :                     ; Sprite mappings - lamp (SYZ)
   17949/    E74A :                     ; ---------------------------------------------------------------------------
   17950/    E74A :                     Map_obj12:
   17951/    E74A :                     	include "_mappings/obj12.asm"
(1)    1/    E74A :                     ; ---------------------------------------------------------------------------
(1)    2/    E74A :                     ; Sprite mappings - lamp (SYZ)
(1)    3/    E74A :                     ; ---------------------------------------------------------------------------
(1)    4/    E74A : 000C 0017           		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
(1)    5/    E74E : 0022 002D           		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
(1)    6/    E752 : 0038 0043           		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
(1)    7/    E756 : 02                  byte_E98E:	dc.b 2
(1)    8/    E757 : F80C 0031 F0        		dc.b $F8, $C, 0, $31, $F0
(1)    9/    E75C : 000C 1031 F0        		dc.b 0,	$C, $10, $31, $F0
(1)   10/    E761 : 02                  byte_E999:	dc.b 2
(1)   11/    E762 : F80C 0035 F0        		dc.b $F8, $C, 0, $35, $F0
(1)   12/    E767 : 000C 1035 F0        		dc.b 0,	$C, $10, $35, $F0
(1)   13/    E76C : 02                  byte_E9A4:	dc.b 2
(1)   14/    E76D : F80C 0039 F0        		dc.b $F8, $C, 0, $39, $F0
(1)   15/    E772 : 000C 1039 F0        		dc.b 0,	$C, $10, $39, $F0
(1)   16/    E777 : 02                  byte_E9AF:	dc.b 2
(1)   17/    E778 : F80C 003D F0        		dc.b $F8, $C, 0, $3D, $F0
(1)   18/    E77D : 000C 103D F0        		dc.b 0,	$C, $10, $3D, $F0
(1)   19/    E782 : 02                  byte_E9BA:	dc.b 2
(1)   20/    E783 : F80C 0041 F0        		dc.b $F8, $C, 0, $41, $F0
(1)   21/    E788 : 000C 1041 F0        		dc.b 0,	$C, $10, $41, $F0
(1)   22/    E78D : 02                  byte_E9C5:	dc.b 2
(1)   23/    E78E : F80C 0045 F0        		dc.b $F8, $C, 0, $45, $F0
(1)   24/    E793 : 000C 1045 F0        		dc.b 0,	$C, $10, $45, $F0
(1)   25/    E798 : (MACRO)              		even
   17952/    E798 :                     
   17953/    E798 :                     ; ===========================================================================
   17954/    E798 :                     ; ---------------------------------------------------------------------------
   17955/    E798 :                     ; Object 47 - pinball bumper (SYZ)
   17956/    E798 :                     ; ---------------------------------------------------------------------------
   17957/    E798 :                     
   17958/    E798 :                     Obj47:					; XREF: Obj_Index
   17959/    E798 : 7000                		moveq	#0,d0
   17960/    E79A : 1028 0024           		move.b	$24(a0),d0
   17961/    E79E : 323B 0006           		move.w	Obj47_Index(pc,d0.w),d1
   17962/    E7A2 : 4EFB 1002           		jmp	Obj47_Index(pc,d1.w)
   17963/    E7A6 :                     ; ===========================================================================
   17964/    E7A6 : 0004                Obj47_Index:	dc.w Obj47_Main-Obj47_Index
   17965/    E7A8 : 002E                		dc.w Obj47_Hit-Obj47_Index
   17966/    E7AA :                     ; ===========================================================================
   17967/    E7AA :                     
   17968/    E7AA :                     Obj47_Main:				; XREF: Obj47_Index
   17969/    E7AA : 5428 0024           		addq.b	#2,$24(a0)
   17970/    E7AE : 217C 0000 E8C6      		move.l	#Map_obj47,4(a0)
             E7B4 : 0004             
   17971/    E7B6 : 317C 0380 0002      		move.w	#$380,2(a0)
   17972/    E7BC : 117C 0004 0001      		move.b	#4,1(a0)
   17973/    E7C2 : 117C 0010 0019      		move.b	#$10,$19(a0)
   17974/    E7C8 : 117C 0001 0018      		move.b	#1,$18(a0)
   17975/    E7CE : 117C 00D7 0020      		move.b	#$D7,$20(a0)
   17976/    E7D4 :                     
   17977/    E7D4 :                     Obj47_Hit:				; XREF: Obj47_Index
   17978/    E7D4 : 4A28 0021           		tst.b	$21(a0)		; has Sonic touched the	bumper?
   17979/    E7D8 : 6700 009C           		beq.w	Obj47_Display	; if not, branch
   17980/    E7DC : 4228 0021           		clr.b	$21(a0)
   17981/    E7E0 : 43F8 D000           		lea	($FFFFD000).w,a1
   17982/    E7E4 : 3228 0008           		move.w	8(a0),d1
   17983/    E7E8 : 3428 000C           		move.w	$C(a0),d2
   17984/    E7EC : 9269 0008           		sub.w	8(a1),d1
   17985/    E7F0 : 9469 000C           		sub.w	$C(a1),d2
   17986/    E7F4 : 4EB9 0000 2A8E      		jsr	(CalcAngle).l
   17987/    E7FA : 4EB9 0000 27C0      		jsr	(CalcSine).l
   17988/    E800 : C3FC F900           		muls.w	#-$700,d1
   17989/    E804 : E081                		asr.l	#8,d1
   17990/    E806 : 3341 0010           		move.w	d1,$10(a1)	; bounce Sonic away
   17991/    E80A : C1FC F900           		muls.w	#-$700,d0
   17992/    E80E : E080                		asr.l	#8,d0
   17993/    E810 : 3340 0012           		move.w	d0,$12(a1)	; bounce Sonic away
   17994/    E814 : 08E9 0001 0022      		bset	#1,$22(a1)
   17995/    E81A : 08A9 0004 0022      		bclr	#4,$22(a1)
   17996/    E820 : 08A9 0005 0022      		bclr	#5,$22(a1)
   17997/    E826 : 4229 003C           		clr.b	$3C(a1)
   17998/    E82A : 117C 0001 001C      		move.b	#1,$1C(a0)
   17999/    E830 : 303C 00B4           		move.w	#$B4,d0
   18000/    E834 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play bumper sound
   18001/    E83A : 45F8 FC00           		lea	($FFFFFC00).w,a2
   18002/    E83E : 7000                		moveq	#0,d0
   18003/    E840 : 1028 0023           		move.b	$23(a0),d0
   18004/    E844 : 670C                		beq.s	Obj47_Score
   18005/    E846 : 0C32 008A 0002      		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
   18006/    E84C : 6428                		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
   18007/    E84E : 5232 0002           		addq.b	#1,2(a2,d0.w)
   18008/    E852 :                     
   18009/    E852 :                     Obj47_Score:
   18010/    E852 : 7001                		moveq	#1,d0
   18011/    E854 : 4EB9 0001 C6E8      		jsr	AddPoints	; add 10 to score
   18012/    E85A : 6100 EFFC           		bsr.w	SingleObjLoad
   18013/    E85E : 6616                		bne.s	Obj47_Display
   18014/    E860 : 12BC 0029           		move.b	#$29,0(a1)	; load points object
   18015/    E864 : 3368 0008 0008      		move.w	8(a0),8(a1)
   18016/    E86A : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   18017/    E870 : 137C 0004 001A      		move.b	#4,$1A(a1)
   18018/    E876 :                     
   18019/    E876 :                     Obj47_Display:
   18020/    E876 : 43F9 0000 E8B6      		lea	(Ani_obj47).l,a1
   18021/    E87C : 6100 BC80           		bsr.w	AnimateSprite
   18022/    E880 : 3028 0008           		move.w	8(a0),d0
   18023/    E884 : 0240 FF80           		andi.w	#$FF80,d0
   18024/    E888 : 3238 F700           		move.w	($FFFFF700).w,d1
   18025/    E88C : 0441 0080           		subi.w	#$80,d1
   18026/    E890 : 0241 FF80           		andi.w	#$FF80,d1
   18027/    E894 : 9041                		sub.w	d1,d0
   18028/    E896 : 0C40 0280           		cmpi.w	#$280,d0
   18029/    E89A : 6204                		bhi.s	Obj47_ChkHit
   18030/    E89C : 6000 EB34           		bra.w	DisplaySprite
   18031/    E8A0 :                     ; ===========================================================================
   18032/    E8A0 :                     
   18033/    E8A0 :                     Obj47_ChkHit:				; XREF: Obj47_Display
   18034/    E8A0 : 45F8 FC00           		lea	($FFFFFC00).w,a2
   18035/    E8A4 : 7000                		moveq	#0,d0
   18036/    E8A6 : 1028 0023           		move.b	$23(a0),d0
   18037/    E8AA : 6706                		beq.s	Obj47_Delete
   18038/    E8AC : 08B2 0007 0002      		bclr	#7,2(a2,d0.w)
   18039/    E8B2 :                     
   18040/    E8B2 :                     Obj47_Delete:
   18041/    E8B2 : 6000 EB5A           		bra.w	DeleteObject
   18042/    E8B6 :                     ; ===========================================================================
   18043/    E8B6 :                     Ani_obj47:
   18044/    E8B6 :                     	include "_animations/obj47.asm"
(1)    1/    E8B6 :                     ; ---------------------------------------------------------------------------
(1)    2/    E8B6 :                     ; Animation script - flamethrower (SBZ)
(1)    3/    E8B6 :                     ; ---------------------------------------------------------------------------
(1)    4/    E8B6 : 0004                		dc.w byte_EAF4-Ani_obj47
(1)    5/    E8B8 : 0008                		dc.w byte_EAF8-Ani_obj47
(1)    6/    E8BA : 0F00 FF00           byte_EAF4:	dc.b $F, 0, $FF, 0
(1)    7/    E8BE : 0301 0201 02FD      byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
             E8C4 : 0000             
(1)    8/    E8C6 : (MACRO)              		even
   18045/    E8C6 :                     
   18046/    E8C6 :                     ; ---------------------------------------------------------------------------
   18047/    E8C6 :                     ; Sprite mappings - pinball bumper (SYZ)
   18048/    E8C6 :                     ; ---------------------------------------------------------------------------
   18049/    E8C6 :                     Map_obj47:
   18050/    E8C6 :                     	include "_mappings/obj47.asm"
(1)    1/    E8C6 :                     ; ---------------------------------------------------------------------------
(1)    2/    E8C6 :                     ; Sprite mappings - pinball bumper (SYZ)
(1)    3/    E8C6 :                     ; ---------------------------------------------------------------------------
(1)    4/    E8C6 : 0006                		dc.w byte_EB06-Map_obj47
(1)    5/    E8C8 : 0011                		dc.w byte_EB11-Map_obj47
(1)    6/    E8CA : 001C                		dc.w byte_EB1C-Map_obj47
(1)    7/    E8CC : 02                  byte_EB06:	dc.b 2
(1)    8/    E8CD : F007 0000 F0        		dc.b $F0, 7, 0,	0, $F0
(1)    9/    E8D2 : F007 0800 00        		dc.b $F0, 7, 8,	0, 0
(1)   10/    E8D7 : 02                  byte_EB11:	dc.b 2
(1)   11/    E8D8 : F406 0008 F4        		dc.b $F4, 6, 0,	8, $F4
(1)   12/    E8DD : F402 0808 04        		dc.b $F4, 2, 8,	8, 4
(1)   13/    E8E2 : 02                  byte_EB1C:	dc.b 2
(1)   14/    E8E3 : F007 000E F0        		dc.b $F0, 7, 0,	$E, $F0
(1)   15/    E8E8 : F007 080E 00        		dc.b $F0, 7, 8,	$E, 0
(1)   16/    E8ED : (MACRO)              		even
(1)   16/    E8ED : 00                                          dc.b 0 ;ds.b 1 
   18051/    E8EE :                     
   18052/    E8EE :                     ; ===========================================================================
   18053/    E8EE :                     ; ---------------------------------------------------------------------------
   18054/    E8EE :                     ; Object 0D - signpost at the end of a level
   18055/    E8EE :                     ; ---------------------------------------------------------------------------
   18056/    E8EE :                     
   18057/    E8EE :                     Obj0D:					; XREF: Obj_Index
   18058/    E8EE : 7000                		moveq	#0,d0
   18059/    E8F0 : 1028 0024           		move.b	$24(a0),d0
   18060/    E8F4 : 323B 0034           		move.w	Obj0D_Index(pc,d0.w),d1
   18061/    E8F8 : 4EBB 1030           		jsr	Obj0D_Index(pc,d1.w)
   18062/    E8FC : 43F9 0000 EAE0      		lea	(Ani_obj0D).l,a1
   18063/    E902 : 6100 BBFA           		bsr.w	AnimateSprite
   18064/    E906 : 6100 EACA           		bsr.w	DisplaySprite
   18065/    E90A : 3028 0008           		move.w	8(a0),d0
   18066/    E90E : 0240 FF80           		andi.w	#$FF80,d0
   18067/    E912 : 3238 F700           		move.w	($FFFFF700).w,d1
   18068/    E916 : 0441 0080           		subi.w	#$80,d1
   18069/    E91A : 0241 FF80           		andi.w	#$FF80,d1
   18070/    E91E : 9041                		sub.w	d1,d0
   18071/    E920 : 0C40 0280           		cmpi.w	#$280,d0
   18072/    E924 : 6200 EAE8           		bhi.w	DeleteObject
   18073/    E928 : 4E75                		rts	
   18074/    E92A :                     ; ===========================================================================
   18075/    E92A : 000A                Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
   18076/    E92C : 002E                		dc.w Obj0D_Touch-Obj0D_Index
   18077/    E92E : 0058                		dc.w Obj0D_Spin-Obj0D_Index
   18078/    E930 : 00EE                		dc.w Obj0D_SonicRun-Obj0D_Index
   18079/    E932 : 01B4                		dc.w locret_ED1A-Obj0D_Index
   18080/    E934 :                     ; ===========================================================================
   18081/    E934 :                     
   18082/    E934 :                     Obj0D_Main:				; XREF: Obj0D_Index
   18083/    E934 : 5428 0024           		addq.b	#2,$24(a0)
   18084/    E938 : 217C 0000 EAFC      		move.l	#Map_obj0D,4(a0)
             E93E : 0004             
   18085/    E940 : 317C 0680 0002      		move.w	#$680,2(a0)
   18086/    E946 : 117C 0004 0001      		move.b	#4,1(a0)
   18087/    E94C : 117C 0018 0019      		move.b	#$18,$19(a0)
   18088/    E952 : 117C 0004 0018      		move.b	#4,$18(a0)
   18089/    E958 :                     
   18090/    E958 :                     Obj0D_Touch:				; XREF: Obj0D_Index
   18091/    E958 : 3038 D008           		move.w	($FFFFD008).w,d0
   18092/    E95C : 9068 0008           		sub.w	8(a0),d0
   18093/    E960 : 651E                		bcs.s	locret_EBBA
   18094/    E962 : 0C40 0020           		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
   18095/    E966 : 6418                		bcc.s	locret_EBBA	; if not, branch
   18096/    E968 : 303C 00CF           		move.w	#$CF,d0
   18097/    E96C : 4EB9 0000 117C      		jsr	(PlaySound).l	; play signpost	sound
   18098/    E972 : 4238 FE1E           		clr.b	($FFFFFE1E).w	; stop time counter
   18099/    E976 : 31F8 F72A F728      		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
   18100/    E97C : 5428 0024           		addq.b	#2,$24(a0)
   18101/    E980 :                     
   18102/    E980 :                     locret_EBBA:
   18103/    E980 : 4E75                		rts	
   18104/    E982 :                     ; ===========================================================================
   18105/    E982 :                     
   18106/    E982 :                     Obj0D_Spin:				; XREF: Obj0D_Index
   18107/    E982 : 5368 0030           		subq.w	#1,$30(a0)	; subtract 1 from spin time
   18108/    E986 : 6A16                		bpl.s	Obj0D_Sparkle	; if time remains, branch
   18109/    E988 : 317C 003C 0030      		move.w	#60,$30(a0)	; set spin cycle time to 1 second
   18110/    E98E : 5228 001C           		addq.b	#1,$1C(a0)	; next spin cycle
   18111/    E992 : 0C28 0003 001C      		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
   18112/    E998 : 6604                		bne.s	Obj0D_Sparkle	; if not, branch
   18113/    E99A : 5428 0024           		addq.b	#2,$24(a0)
   18114/    E99E :                     
   18115/    E99E :                     Obj0D_Sparkle:
   18116/    E99E : 5368 0032           		subq.w	#1,$32(a0)	; subtract 1 from time delay
   18117/    E9A2 : 6A62                		bpl.s	locret_EC42	; if time remains, branch
   18118/    E9A4 : 317C 000B 0032      		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
   18119/    E9AA : 7000                		moveq	#0,d0
   18120/    E9AC : 1028 0034           		move.b	$34(a0),d0
   18121/    E9B0 : 5428 0034           		addq.b	#2,$34(a0)
   18122/    E9B4 : 0228 000E 0034      		andi.b	#$E,$34(a0)
   18123/    E9BA : 45FB 004C           		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
   18124/    E9BE : 6100 EE98           		bsr.w	SingleObjLoad
   18125/    E9C2 : 6642                		bne.s	locret_EC42
   18126/    E9C4 : 12BC 0025           		move.b	#$25,0(a1)	; load rings object
   18127/    E9C8 : 137C 0006 0024      		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
   18128/    E9CE : 101A                		move.b	(a2)+,d0
   18129/    E9D0 : 4880                		ext.w	d0
   18130/    E9D2 : D068 0008           		add.w	8(a0),d0
   18131/    E9D6 : 3340 0008           		move.w	d0,8(a1)
   18132/    E9DA : 101A                		move.b	(a2)+,d0
   18133/    E9DC : 4880                		ext.w	d0
   18134/    E9DE : D068 000C           		add.w	$C(a0),d0
   18135/    E9E2 : 3340 000C           		move.w	d0,$C(a1)
   18136/    E9E6 : 237C 0000 9D7C      		move.l	#Map_obj25,4(a1)
             E9EC : 0004             
   18137/    E9EE : 337C 27B2 0002      		move.w	#$27B2,2(a1)
   18138/    E9F4 : 137C 0004 0001      		move.b	#4,1(a1)
   18139/    E9FA : 137C 0002 0018      		move.b	#2,$18(a1)
   18140/    EA00 : 137C 0008 0019      		move.b	#8,$19(a1)
   18141/    EA06 :                     
   18142/    EA06 :                     locret_EC42:
   18143/    EA06 : 4E75                		rts	
   18144/    EA08 :                     ; ===========================================================================
   18145/    EA08 : E8F0                Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
   18146/    EA0A : 0808                		dc.b	8,   8
   18147/    EA0C : F000                		dc.b -$10,   0
   18148/    EA0E : 18F8                		dc.b  $18,  -8
   18149/    EA10 : 00F8                		dc.b	0,  -8
   18150/    EA12 : 1000                		dc.b  $10,   0
   18151/    EA14 : E808                		dc.b -$18,   8
   18152/    EA16 : 1810                		dc.b  $18, $10
   18153/    EA18 :                     ; ===========================================================================
   18154/    EA18 :                     
   18155/    EA18 :                     Obj0D_SonicRun:				; XREF: Obj0D_Index
   18156/    EA18 : 4A78 FE08           		tst.w	($FFFFFE08).w	; is debug mode	on?
   18157/    EA1C : 6600 0094           		bne.w	locret_ECEE	; if yes, branch
   18158/    EA20 : 0838 0001 D022      		btst	#1,($FFFFD022).w
   18159/    EA26 : 660C                		bne.s	loc_EC70
   18160/    EA28 : 11FC 0001 F7CC      		move.b	#1,($FFFFF7CC).w ; lock	controls
   18161/    EA2E : 31FC 0800 F602      		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
   18162/    EA34 :                     
   18163/    EA34 :                     loc_EC70:
   18164/    EA34 : 4A38 D000           		tst.b	($FFFFD000).w
   18165/    EA38 : 6710                		beq.s	loc_EC86
   18166/    EA3A : 3038 D008           		move.w	($FFFFD008).w,d0
   18167/    EA3E : 3238 F72A           		move.w	($FFFFF72A).w,d1
   18168/    EA42 : 0641 0128           		addi.w	#$128,d1
   18169/    EA46 : B041                		cmp.w	d1,d0
   18170/    EA48 : 6568                		bcs.s	locret_ECEE
   18171/    EA4A :                     
   18172/    EA4A :                     loc_EC86:
   18173/    EA4A : 5428 0024           		addq.b	#2,$24(a0)
   18174/    EA4E :                     
   18175/    EA4E :                     ; ---------------------------------------------------------------------------
   18176/    EA4E :                     ; Subroutine to	set up bonuses at the end of an	act
   18177/    EA4E :                     ; ---------------------------------------------------------------------------
   18178/    EA4E :                     
   18179/    EA4E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   18180/    EA4E :                     
   18181/    EA4E :                     
   18182/    EA4E :                     GotThroughAct:				; XREF: Obj3E_EndAct
   18183/    EA4E : 4A38 D5C0           		tst.b	($FFFFD5C0).w
   18184/    EA52 : 665E                		bne.s	locret_ECEE
   18185/    EA54 : 31F8 F72A F728      		move.w	($FFFFF72A).w,($FFFFF728).w
   18186/    EA5A : 4238 FE2D           		clr.b	($FFFFFE2D).w	; disable invincibility
   18187/    EA5E : 4238 FE1E           		clr.b	($FFFFFE1E).w	; stop time counter
   18188/    EA62 : 11FC 003A D5C0      		move.b	#$3A,($FFFFD5C0).w
   18189/    EA68 : 7010                		moveq	#$10,d0
   18190/    EA6A : 4EB9 0000 1398      		jsr	(LoadPLC2).l	; load title card patterns
   18191/    EA70 : 11FC 0001 F7D6      		move.b	#1,($FFFFF7D6).w
   18192/    EA76 : 7000                		moveq	#0,d0
   18193/    EA78 : 1038 FE23           		move.b	($FFFFFE23).w,d0
   18194/    EA7C : C0FC 003C           		mulu.w	#60,d0		; convert minutes to seconds
   18195/    EA80 : 7200                		moveq	#0,d1
   18196/    EA82 : 1238 FE24           		move.b	($FFFFFE24).w,d1
   18197/    EA86 : D041                		add.w	d1,d0		; add up your time
   18198/    EA88 : 80FC 000F           		divu.w	#15,d0		; divide by 15
   18199/    EA8C : 7214                		moveq	#$14,d1
   18200/    EA8E : B041                		cmp.w	d1,d0		; is time 5 minutes or higher?
   18201/    EA90 : 6502                		bcs.s	loc_ECD0	; if not, branch
   18202/    EA92 : 3001                		move.w	d1,d0		; use minimum time bonus (0)
   18203/    EA94 :                     
   18204/    EA94 :                     loc_ECD0:
   18205/    EA94 : D040                		add.w	d0,d0
   18206/    EA96 : 31FB 001C F7D2      		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
   18207/    EA9C : 3038 FE20           		move.w	($FFFFFE20).w,d0 ; load	number of rings
   18208/    EAA0 : C0FC 000A           		mulu.w	#10,d0		; multiply by 10
   18209/    EAA4 : 31C0 F7D4           		move.w	d0,($FFFFF7D4).w ; set ring bonus
   18210/    EAA8 : 303C 008E           		move.w	#$8E,d0
   18211/    EAAC : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
   18212/    EAB2 :                     
   18213/    EAB2 :                     locret_ECEE:
   18214/    EAB2 : 4E75                		rts	
   18215/    EAB4 :                     ; End of function GotThroughAct
   18216/    EAB4 :                     
   18217/    EAB4 :                     ; ===========================================================================
   18218/    EAB4 : 1388 1388 03E8      TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
             EABA : 01F4 0190 0190 
             EAC0 : 012C 012C 00C8 
             EAC6 : 00C8             
   18219/    EAC8 : 00C8 00C8 0064      		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
             EACE : 0064 0064 0064 
             EAD4 : 0032 0032 0032 
             EADA : 0032 0000          
   18220/    EADE :                     ; ===========================================================================
   18221/    EADE :                     
   18222/    EADE :                     locret_ED1A:				; XREF: Obj0D_Index
   18223/    EADE : 4E75                		rts	
   18224/    EAE0 :                     ; ===========================================================================
   18225/    EAE0 :                     Ani_obj0D:
   18226/    EAE0 :                     	include "_animations/obj0D.asm"
(1)    1/    EAE0 :                     ; ---------------------------------------------------------------------------
(1)    2/    EAE0 :                     ; Animation script - signpost
(1)    3/    EAE0 :                     ; ---------------------------------------------------------------------------
(1)    4/    EAE0 : 0008                		dc.w byte_ED24-Ani_obj0D
(1)    5/    EAE2 : 000C                		dc.w byte_ED28-Ani_obj0D
(1)    6/    EAE4 : 0012                		dc.w byte_ED2E-Ani_obj0D
(1)    7/    EAE6 : 0018                		dc.w byte_ED34-Ani_obj0D
(1)    8/    EAE8 : 0F00 FF00           byte_ED24:	dc.b $F, 0, $FF, 0
(1)    9/    EAEC : 0100 0102 03FF      byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
(1)   10/    EAF2 : 0104 0102 03FF      byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
(1)   11/    EAF8 : 0F04 FF             byte_ED34:	dc.b $F, 4, $FF
(1)   12/    EAFB : (MACRO)              		even
(1)   12/    EAFB : 00                                          dc.b 0 ;ds.b 1 
   18227/    EAFC :                     
   18228/    EAFC :                     ; ---------------------------------------------------------------------------
   18229/    EAFC :                     ; Sprite mappings - signpost
   18230/    EAFC :                     ; ---------------------------------------------------------------------------
   18231/    EAFC :                     Map_obj0D:
   18232/    EAFC :                     	include "_mappings/obj0D.asm"
(1)    1/    EAFC :                     ; ---------------------------------------------------------------------------
(1)    2/    EAFC :                     ; Sprite mappings - signpost
(1)    3/    EAFC :                     ; ---------------------------------------------------------------------------
(1)    4/    EAFC : 000A 001A           		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
(1)    5/    EB00 : 0025 0030           		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
(1)    6/    EB04 : 003B                		dc.w byte_ED73-Map_obj0D
(1)    7/    EB06 : 03                  byte_ED42:	dc.b 3
(1)    8/    EB07 : F00B 0000 E8        		dc.b $F0, $B, 0, 0, $E8
(1)    9/    EB0C : F00B 0800 00        		dc.b $F0, $B, 8, 0, 0
(1)   10/    EB11 : 1001 0038 FC        		dc.b $10, 1, 0,	$38, $FC
(1)   11/    EB16 : 02                  byte_ED52:	dc.b 2
(1)   12/    EB17 : F00F 000C F0        		dc.b $F0, $F, 0, $C, $F0
(1)   13/    EB1C : 1001 0038 FC        		dc.b $10, 1, 0,	$38, $FC
(1)   14/    EB21 : 02                  byte_ED5D:	dc.b 2
(1)   15/    EB22 : F003 001C FC        		dc.b $F0, 3, 0,	$1C, $FC
(1)   16/    EB27 : 1001 0838 FC        		dc.b $10, 1, 8,	$38, $FC
(1)   17/    EB2C : 02                  byte_ED68:	dc.b 2
(1)   18/    EB2D : F00F 080C F0        		dc.b $F0, $F, 8, $C, $F0
(1)   19/    EB32 : 1001 0838 FC        		dc.b $10, 1, 8,	$38, $FC
(1)   20/    EB37 : 03                  byte_ED73:	dc.b 3
(1)   21/    EB38 : F00B 0020 E8        		dc.b $F0, $B, 0, $20, $E8
(1)   22/    EB3D : F00B 002C 00        		dc.b $F0, $B, 0, $2C, 0
(1)   23/    EB42 : 1001 0038 FC        		dc.b $10, 1, 0,	$38, $FC
(1)   24/    EB47 : (MACRO)              		even
(1)   24/    EB47 : 00                                          dc.b 0 ;ds.b 1 
   18233/    EB48 :                     
   18234/    EB48 :                     ; ===========================================================================
   18235/    EB48 :                     ; ---------------------------------------------------------------------------
   18236/    EB48 :                     ; Object 4C - lava geyser / lavafall producer (MZ)
   18237/    EB48 :                     ; ---------------------------------------------------------------------------
   18238/    EB48 :                     
   18239/    EB48 :                     Obj4C:					; XREF: Obj_Index
   18240/    EB48 : 7000                		moveq	#0,d0
   18241/    EB4A : 1028 0024           		move.b	$24(a0),d0
   18242/    EB4E : 323B 000A           		move.w	Obj4C_Index(pc,d0.w),d1
   18243/    EB52 : 4EBB 1006           		jsr	Obj4C_Index(pc,d1.w)
   18244/    EB56 : 6000 0200           		bra.w	Obj4D_ChkDel
   18245/    EB5A :                     ; ===========================================================================
   18246/    EB5A : 000C                Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
   18247/    EB5C : 0036                		dc.w loc_EDCC-Obj4C_Index
   18248/    EB5E : 00A6                		dc.w loc_EE3E-Obj4C_Index
   18249/    EB60 : 005C                		dc.w Obj4C_MakeLava-Obj4C_Index
   18250/    EB62 : 00B2                		dc.w Obj4C_Display-Obj4C_Index
   18251/    EB64 : 00C2                		dc.w Obj4C_Delete-Obj4C_Index
   18252/    EB66 :                     ; ===========================================================================
   18253/    EB66 :                     
   18254/    EB66 :                     Obj4C_Main:				; XREF: Obj4C_Index
   18255/    EB66 : 5428 0024           		addq.b	#2,$24(a0)
   18256/    EB6A : 217C 0000 F008      		move.l	#Map_obj4C,4(a0)
             EB70 : 0004             
   18257/    EB72 : 317C E3A8 0002      		move.w	#$E3A8,2(a0)
   18258/    EB78 : 117C 0004 0001      		move.b	#4,1(a0)
   18259/    EB7E : 117C 0001 0018      		move.b	#1,$18(a0)
   18260/    EB84 : 117C 0038 0019      		move.b	#$38,$19(a0)
   18261/    EB8A : 317C 0078 0034      		move.w	#120,$34(a0)	; set time delay to 2 seconds
   18262/    EB90 :                     
   18263/    EB90 :                     loc_EDCC:				; XREF: Obj4C_Index
   18264/    EB90 : 5368 0032           		subq.w	#1,$32(a0)
   18265/    EB94 : 6A1E                		bpl.s	locret_EDF0
   18266/    EB96 : 3168 0034 0032      		move.w	$34(a0),$32(a0)
   18267/    EB9C : 3038 D00C           		move.w	($FFFFD00C).w,d0
   18268/    EBA0 : 3228 000C           		move.w	$C(a0),d1
   18269/    EBA4 : B041                		cmp.w	d1,d0
   18270/    EBA6 : 640C                		bcc.s	locret_EDF0
   18271/    EBA8 : 0441 0170           		subi.w	#$170,d1
   18272/    EBAC : B041                		cmp.w	d1,d0
   18273/    EBAE : 6504                		bcs.s	locret_EDF0
   18274/    EBB0 : 5428 0024           		addq.b	#2,$24(a0)
   18275/    EBB4 :                     
   18276/    EBB4 :                     locret_EDF0:
   18277/    EBB4 : 4E75                		rts	
   18278/    EBB6 :                     ; ===========================================================================
   18279/    EBB6 :                     
   18280/    EBB6 :                     Obj4C_MakeLava:				; XREF: Obj4C_Index
   18281/    EBB6 : 5428 0024           		addq.b	#2,$24(a0)
   18282/    EBBA : 6100 ECB2           		bsr.w	SingleObjLoad2
   18283/    EBBE : 661A                		bne.s	loc_EE18
   18284/    EBC0 : 12BC 004D           		move.b	#$4D,0(a1)	; load lavafall	object
   18285/    EBC4 : 3368 0008 0008      		move.w	8(a0),8(a1)
   18286/    EBCA : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   18287/    EBD0 : 1368 0028 0028      		move.b	$28(a0),$28(a1)
   18288/    EBD6 : 2348 003C           		move.l	a0,$3C(a1)
   18289/    EBDA :                     
   18290/    EBDA :                     loc_EE18:
   18291/    EBDA : 117C 0001 001C      		move.b	#1,$1C(a0)
   18292/    EBE0 : 4A28 0028           		tst.b	$28(a0)		; is object type 00 (geyser) ?
   18293/    EBE4 : 6708                		beq.s	Obj4C_Type00	; if yes, branch
   18294/    EBE6 : 117C 0004 001C      		move.b	#4,$1C(a0)
   18295/    EBEC : 601E                		bra.s	Obj4C_Display
   18296/    EBEE :                     ; ===========================================================================
   18297/    EBEE :                     
   18298/    EBEE :                     Obj4C_Type00:				; XREF: Obj4C_MakeLava
   18299/    EBEE : 2268 003C           		movea.l	$3C(a0),a1	; load geyser object
   18300/    EBF2 : 08E9 0001 0022      		bset	#1,$22(a1)
   18301/    EBF8 : 337C FA80 0012      		move.w	#-$580,$12(a1)
   18302/    EBFE : 600C                		bra.s	Obj4C_Display
   18303/    EC00 :                     ; ===========================================================================
   18304/    EC00 :                     
   18305/    EC00 :                     loc_EE3E:				; XREF: Obj4C_Index
   18306/    EC00 : 4A28 0028           		tst.b	$28(a0)		; is object type 00 (geyser) ?
   18307/    EC04 : 6706                		beq.s	Obj4C_Display	; if yes, branch
   18308/    EC06 : 5428 0024           		addq.b	#2,$24(a0)
   18309/    EC0A : 4E75                		rts	
   18310/    EC0C :                     ; ===========================================================================
   18311/    EC0C :                     
   18312/    EC0C :                     Obj4C_Display:				; XREF: Obj4C_Index
   18313/    EC0C : 43F9 0000 EFD2      		lea	(Ani_obj4C).l,a1
   18314/    EC12 : 6100 B8EA           		bsr.w	AnimateSprite
   18315/    EC16 : 6100 E7BA           		bsr.w	DisplaySprite
   18316/    EC1A : 4E75                		rts	
   18317/    EC1C :                     ; ===========================================================================
   18318/    EC1C :                     
   18319/    EC1C :                     Obj4C_Delete:				; XREF: Obj4C_Index
   18320/    EC1C : 117C 0000 001C      		move.b	#0,$1C(a0)
   18321/    EC22 : 117C 0002 0024      		move.b	#2,$24(a0)
   18322/    EC28 : 4A28 0028           		tst.b	$28(a0)
   18323/    EC2C : 6700 E7E0           		beq.w	DeleteObject
   18324/    EC30 : 4E75                		rts	
   18325/    EC32 :                     ; ===========================================================================
   18326/    EC32 :                     ; ---------------------------------------------------------------------------
   18327/    EC32 :                     ; Object 4D - lava geyser / lavafall (MZ)
   18328/    EC32 :                     ; ---------------------------------------------------------------------------
   18329/    EC32 :                     
   18330/    EC32 :                     Obj4D:					; XREF: Obj_Index
   18331/    EC32 : 7000                		moveq	#0,d0
   18332/    EC34 : 1028 0024           		move.b	$24(a0),d0
   18333/    EC38 : 323B 000A           		move.w	Obj4D_Index(pc,d0.w),d1
   18334/    EC3C : 4EBB 1006           		jsr	Obj4D_Index(pc,d1.w)
   18335/    EC40 : 6000 E790           		bra.w	DisplaySprite
   18336/    EC44 :                     ; ===========================================================================
   18337/    EC44 : 000C                Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
   18338/    EC46 : 00F6                		dc.w Obj4D_Action-Obj4D_Index
   18339/    EC48 : 0178                		dc.w loc_EFFC-Obj4D_Index
   18340/    EC4A : 01D6                		dc.w Obj4D_Delete-Obj4D_Index
   18341/    EC4C :                     
   18342/    EC4C : FB00 0000           Obj4D_Speeds:	dc.w $FB00, 0
   18343/    EC50 :                     ; ===========================================================================
   18344/    EC50 :                     
   18345/    EC50 :                     Obj4D_Main:				; XREF: Obj4D_Index
   18346/    EC50 : 5428 0024           		addq.b	#2,$24(a0)
   18347/    EC54 : 3168 000C 0030      		move.w	$C(a0),$30(a0)
   18348/    EC5A : 4A28 0028           		tst.b	$28(a0)
   18349/    EC5E : 6706                		beq.s	loc_EEA4
   18350/    EC60 : 0468 0250 000C      		subi.w	#$250,$C(a0)
   18351/    EC66 :                     
   18352/    EC66 :                     loc_EEA4:
   18353/    EC66 : 7000                		moveq	#0,d0
   18354/    EC68 : 1028 0028           		move.b	$28(a0),d0
   18355/    EC6C : D040                		add.w	d0,d0
   18356/    EC6E : 317B 00DC 0012      		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
   18357/    EC74 : 2248                		movea.l	a0,a1
   18358/    EC76 : 7201                		moveq	#1,d1
   18359/    EC78 : 6108                		bsr.s	Obj4D_MakeLava
   18360/    EC7A : 6054                		bra.s	loc_EF10
   18361/    EC7C :                     ; ===========================================================================
   18362/    EC7C :                     
   18363/    EC7C :                     Obj4D_Loop:
   18364/    EC7C : 6100 EBF0           		bsr.w	SingleObjLoad2
   18365/    EC80 : 6648                		bne.s	loc_EF0A
   18366/    EC82 :                     
   18367/    EC82 :                     Obj4D_MakeLava:				; XREF: Obj4D_Main
   18368/    EC82 : 12BC 004D           		move.b	#$4D,0(a1)
   18369/    EC86 : 237C 0000 F008      		move.l	#Map_obj4C,4(a1)
             EC8C : 0004             
   18370/    EC8E : 337C 63A8 0002      		move.w	#$63A8,2(a1)
   18371/    EC94 : 137C 0004 0001      		move.b	#4,1(a1)
   18372/    EC9A : 137C 0020 0019      		move.b	#$20,$19(a1)
   18373/    ECA0 : 3368 0008 0008      		move.w	8(a0),8(a1)
   18374/    ECA6 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   18375/    ECAC : 1368 0028 0028      		move.b	$28(a0),$28(a1)
   18376/    ECB2 : 137C 0001 0018      		move.b	#1,$18(a1)
   18377/    ECB8 : 137C 0005 001C      		move.b	#5,$1C(a1)
   18378/    ECBE : 4A28 0028           		tst.b	$28(a0)
   18379/    ECC2 : 6706                		beq.s	loc_EF0A
   18380/    ECC4 : 137C 0002 001C      		move.b	#2,$1C(a1)
   18381/    ECCA :                     
   18382/    ECCA :                     loc_EF0A:
   18383/    ECCA : 51C9 FFB0           		dbf	d1,Obj4D_Loop
   18384/    ECCE : 4E75                		rts	
   18385/    ECD0 :                     ; ===========================================================================
   18386/    ECD0 :                     
   18387/    ECD0 :                     loc_EF10:				; XREF: Obj4D_Main
   18388/    ECD0 : 0669 0060 000C      		addi.w	#$60,$C(a1)
   18389/    ECD6 : 3368 0030 0030      		move.w	$30(a0),$30(a1)
   18390/    ECDC : 0669 0060 0030      		addi.w	#$60,$30(a1)
   18391/    ECE2 : 137C 0093 0020      		move.b	#$93,$20(a1)
   18392/    ECE8 : 137C 0080 0016      		move.b	#$80,$16(a1)
   18393/    ECEE : 08E9 0004 0001      		bset	#4,1(a1)
   18394/    ECF4 : 5829 0024           		addq.b	#4,$24(a1)
   18395/    ECF8 : 2348 003C           		move.l	a0,$3C(a1)
   18396/    ECFC : 4A28 0028           		tst.b	$28(a0)
   18397/    ED00 : 672E                		beq.s	Obj4D_PlaySnd
   18398/    ED02 : 7200                		moveq	#0,d1
   18399/    ED04 : 6100 FF76           		bsr.w	Obj4D_Loop
   18400/    ED08 : 5429 0024           		addq.b	#2,$24(a1)
   18401/    ED0C : 08E9 0004 0002      		bset	#4,2(a1)
   18402/    ED12 : 0669 0100 000C      		addi.w	#$100,$C(a1)
   18403/    ED18 : 137C 0000 0018      		move.b	#0,$18(a1)
   18404/    ED1E : 3368 0030 0030      		move.w	$30(a0),$30(a1)
   18405/    ED24 : 2368 003C 003C      		move.l	$3C(a0),$3C(a1)
   18406/    ED2A : 117C 0000 0028      		move.b	#0,$28(a0)
   18407/    ED30 :                     
   18408/    ED30 :                     Obj4D_PlaySnd:
   18409/    ED30 : 303C 00C8           		move.w	#$C8,d0
   18410/    ED34 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play flame sound
   18411/    ED3A :                     
   18412/    ED3A :                     Obj4D_Action:				; XREF: Obj4D_Index
   18413/    ED3A : 7000                		moveq	#0,d0
   18414/    ED3C : 1028 0028           		move.b	$28(a0),d0
   18415/    ED40 : D040                		add.w	d0,d0
   18416/    ED42 : 323B 0034           		move.w	Obj4D_TypeIndex(pc,d0.w),d1
   18417/    ED46 : 4EBB 1030           		jsr	Obj4D_TypeIndex(pc,d1.w)
   18418/    ED4A : 6100 E660           		bsr.w	SpeedToPos
   18419/    ED4E : 43F9 0000 EFD2      		lea	(Ani_obj4C).l,a1
   18420/    ED54 : 6100 B7A8           		bsr.w	AnimateSprite
   18421/    ED58 :                     
   18422/    ED58 :                     Obj4D_ChkDel:				; XREF: Obj4C
   18423/    ED58 : 3028 0008           		move.w	8(a0),d0
   18424/    ED5C : 0240 FF80           		andi.w	#$FF80,d0
   18425/    ED60 : 3238 F700           		move.w	($FFFFF700).w,d1
   18426/    ED64 : 0441 0080           		subi.w	#$80,d1
   18427/    ED68 : 0241 FF80           		andi.w	#$FF80,d1
   18428/    ED6C : 9041                		sub.w	d1,d0
   18429/    ED6E : 0C40 0280           		cmpi.w	#$280,d0
   18430/    ED72 : 6200 E69A           		bhi.w	DeleteObject
   18431/    ED76 : 4E75                		rts	
   18432/    ED78 :                     ; ===========================================================================
   18433/    ED78 : 0004                Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
   18434/    ED7A : 0024                		dc.w Obj4D_Type01-Obj4D_TypeIndex
   18435/    ED7C :                     ; ===========================================================================
   18436/    ED7C :                     
   18437/    ED7C :                     Obj4D_Type00:				; XREF: Obj4D_TypeIndex
   18438/    ED7C : 0668 0018 0012      		addi.w	#$18,$12(a0)	; increase object's falling speed
   18439/    ED82 : 3028 0030           		move.w	$30(a0),d0
   18440/    ED86 : B068 000C           		cmp.w	$C(a0),d0
   18441/    ED8A : 640E                		bcc.s	locret_EFDA
   18442/    ED8C : 5828 0024           		addq.b	#4,$24(a0)
   18443/    ED90 : 2268 003C           		movea.l	$3C(a0),a1
   18444/    ED94 : 137C 0003 001C      		move.b	#3,$1C(a1)
   18445/    ED9A :                     
   18446/    ED9A :                     locret_EFDA:
   18447/    ED9A : 4E75                		rts	
   18448/    ED9C :                     ; ===========================================================================
   18449/    ED9C :                     
   18450/    ED9C :                     Obj4D_Type01:				; XREF: Obj4D_TypeIndex
   18451/    ED9C : 0668 0018 0012      		addi.w	#$18,$12(a0)	; increase object's falling speed
   18452/    EDA2 : 3028 0030           		move.w	$30(a0),d0
   18453/    EDA6 : B068 000C           		cmp.w	$C(a0),d0
   18454/    EDAA : 640E                		bcc.s	locret_EFFA
   18455/    EDAC : 5828 0024           		addq.b	#4,$24(a0)
   18456/    EDB0 : 2268 003C           		movea.l	$3C(a0),a1
   18457/    EDB4 : 137C 0001 001C      		move.b	#1,$1C(a1)
   18458/    EDBA :                     
   18459/    EDBA :                     locret_EFFA:
   18460/    EDBA : 4E75                		rts	
   18461/    EDBC :                     ; ===========================================================================
   18462/    EDBC :                     
   18463/    EDBC :                     loc_EFFC:				; XREF: Obj4D_Index
   18464/    EDBC : 2268 003C           		movea.l	$3C(a0),a1
   18465/    EDC0 : 0C29 0006 0024      		cmpi.b	#6,$24(a1)
   18466/    EDC6 : 6700 0052           		beq.w	Obj4D_Delete
   18467/    EDCA : 3029 000C           		move.w	$C(a1),d0
   18468/    EDCE : 0640 0060           		addi.w	#$60,d0
   18469/    EDD2 : 3140 000C           		move.w	d0,$C(a0)
   18470/    EDD6 : 9068 0030           		sub.w	$30(a0),d0
   18471/    EDDA : 4440                		neg.w	d0
   18472/    EDDC : 7208                		moveq	#8,d1
   18473/    EDDE : 0C40 0040           		cmpi.w	#$40,d0
   18474/    EDE2 : 6C02                		bge.s	loc_F026
   18475/    EDE4 : 720B                		moveq	#$B,d1
   18476/    EDE6 :                     
   18477/    EDE6 :                     loc_F026:
   18478/    EDE6 : 0C40 0080           		cmpi.w	#$80,d0
   18479/    EDEA : 6F02                		ble.s	loc_F02E
   18480/    EDEC : 720E                		moveq	#$E,d1
   18481/    EDEE :                     
   18482/    EDEE :                     loc_F02E:
   18483/    EDEE : 5328 001E           		subq.b	#1,$1E(a0)
   18484/    EDF2 : 6A18                		bpl.s	loc_F04C
   18485/    EDF4 : 117C 0007 001E      		move.b	#7,$1E(a0)
   18486/    EDFA : 5228 001B           		addq.b	#1,$1B(a0)
   18487/    EDFE : 0C28 0002 001B      		cmpi.b	#2,$1B(a0)
   18488/    EE04 : 6506                		bcs.s	loc_F04C
   18489/    EE06 : 117C 0000 001B      		move.b	#0,$1B(a0)
   18490/    EE0C :                     
   18491/    EE0C :                     loc_F04C:
   18492/    EE0C : 1028 001B           		move.b	$1B(a0),d0
   18493/    EE10 : D001                		add.b	d1,d0
   18494/    EE12 : 1140 001A           		move.b	d0,$1A(a0)
   18495/    EE16 : 6000 FF40           		bra.w	Obj4D_ChkDel
   18496/    EE1A :                     ; ===========================================================================
   18497/    EE1A :                     
   18498/    EE1A :                     Obj4D_Delete:				; XREF: Obj4D_Index
   18499/    EE1A : 6000 E5F2           		bra.w	DeleteObject
   18500/    EE1E :                     ; ===========================================================================
   18501/    EE1E :                     ; ---------------------------------------------------------------------------
   18502/    EE1E :                     ; Object 4E - advancing	wall of	lava (MZ)
   18503/    EE1E :                     ; ---------------------------------------------------------------------------
   18504/    EE1E :                     
   18505/    EE1E :                     Obj4E:					; XREF: Obj_Index
   18506/    EE1E : 7000                		moveq	#0,d0
   18507/    EE20 : 1028 0024           		move.b	$24(a0),d0
   18508/    EE24 : 323B 0006           		move.w	Obj4E_Index(pc,d0.w),d1
   18509/    EE28 : 4EFB 1002           		jmp	Obj4E_Index(pc,d1.w)
   18510/    EE2C :                     ; ===========================================================================
   18511/    EE2C : 000A                Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
   18512/    EE2E : 00A4                		dc.w Obj4E_Solid-Obj4E_Index
   18513/    EE30 : 0068                		dc.w Obj4E_Action-Obj4E_Index
   18514/    EE32 : 012A                		dc.w Obj4E_Move2-Obj4E_Index
   18515/    EE34 : 0146                		dc.w Obj4E_Delete-Obj4E_Index
   18516/    EE36 :                     ; ===========================================================================
   18517/    EE36 :                     
   18518/    EE36 :                     Obj4E_Main:				; XREF: Obj4E_Index
   18519/    EE36 : 5828 0024           		addq.b	#4,$24(a0)
   18520/    EE3A : 2248                		movea.l	a0,a1
   18521/    EE3C : 7201                		moveq	#1,d1
   18522/    EE3E : 6006                		bra.s	Obj4E_Main2
   18523/    EE40 :                     ; ===========================================================================
   18524/    EE40 :                     
   18525/    EE40 :                     Obj4E_Loop:
   18526/    EE40 : 6100 EA2C           		bsr.w	SingleObjLoad2
   18527/    EE44 : 6640                		bne.s	loc_F0C8
   18528/    EE46 :                     
   18529/    EE46 :                     Obj4E_Main2:				; XREF: Obj4E_Main
   18530/    EE46 : 12BC 004E           		move.b	#$4E,0(a1)	; load object
   18531/    EE4A : 237C 0000 F2EC      		move.l	#Map_obj4E,4(a1)
             EE50 : 0004             
   18532/    EE52 : 337C 63A8 0002      		move.w	#$63A8,2(a1)
   18533/    EE58 : 137C 0004 0001      		move.b	#4,1(a1)
   18534/    EE5E : 137C 0050 0019      		move.b	#$50,$19(a1)
   18535/    EE64 : 3368 0008 0008      		move.w	8(a0),8(a1)
   18536/    EE6A : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   18537/    EE70 : 137C 0001 0018      		move.b	#1,$18(a1)
   18538/    EE76 : 137C 0000 001C      		move.b	#0,$1C(a1)
   18539/    EE7C : 137C 0094 0020      		move.b	#$94,$20(a1)
   18540/    EE82 : 2348 003C           		move.l	a0,$3C(a1)
   18541/    EE86 :                     
   18542/    EE86 :                     loc_F0C8:
   18543/    EE86 : 51C9 FFB8           		dbf	d1,Obj4E_Loop	; repeat sequence once
   18544/    EE8A :                     
   18545/    EE8A : 5C29 0024           		addq.b	#6,$24(a1)
   18546/    EE8E : 137C 0004 001A      		move.b	#4,$1A(a1)
   18547/    EE94 :                     
   18548/    EE94 :                     Obj4E_Action:				; XREF: Obj4E_Index
   18549/    EE94 : 3038 D008           		move.w	($FFFFD008).w,d0
   18550/    EE98 : 9068 0008           		sub.w	8(a0),d0
   18551/    EE9C : 6402                		bcc.s	Obj4E_ChkSonic
   18552/    EE9E : 4440                		neg.w	d0
   18553/    EEA0 :                     
   18554/    EEA0 :                     Obj4E_ChkSonic:
   18555/    EEA0 : 0C40 00C0           		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
   18556/    EEA4 : 641A                		bcc.s	Obj4E_Move	; if not, branch
   18557/    EEA6 : 3038 D00C           		move.w	($FFFFD00C).w,d0
   18558/    EEAA : 9068 000C           		sub.w	$C(a0),d0
   18559/    EEAE : 6402                		bcc.s	loc_F0F4
   18560/    EEB0 : 4440                		neg.w	d0
   18561/    EEB2 :                     
   18562/    EEB2 :                     loc_F0F4:
   18563/    EEB2 : 0C40 0060           		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
   18564/    EEB6 : 6408                		bcc.s	Obj4E_Move	; if not, branch
   18565/    EEB8 : 117C 0001 0036      		move.b	#1,$36(a0)	; set object to	move
   18566/    EEBE : 6010                		bra.s	Obj4E_Solid
   18567/    EEC0 :                     ; ===========================================================================
   18568/    EEC0 :                     
   18569/    EEC0 :                     Obj4E_Move:				; XREF: Obj4E_ChkSonic
   18570/    EEC0 : 4A28 0036           		tst.b	$36(a0)		; is object set	to move?
   18571/    EEC4 : 670A                		beq.s	Obj4E_Solid	; if not, branch
   18572/    EEC6 : 317C 0180 0010      		move.w	#$180,$10(a0)	; set object speed
   18573/    EECC : 5528 0024           		subq.b	#2,$24(a0)
   18574/    EED0 :                     
   18575/    EED0 :                     Obj4E_Solid:				; XREF: Obj4E_Index
   18576/    EED0 : 323C 002B           		move.w	#$2B,d1
   18577/    EED4 : 343C 0018           		move.w	#$18,d2
   18578/    EED8 : 3602                		move.w	d2,d3
   18579/    EEDA : 5243                		addq.w	#1,d3
   18580/    EEDC : 3828 0008           		move.w	8(a0),d4
   18581/    EEE0 : 1028 0024           		move.b	$24(a0),d0
   18582/    EEE4 : 3F00                		move.w	d0,-(sp)
   18583/    EEE6 : 6100 08AA           		bsr.w	SolidObject
   18584/    EEEA : 301F                		move.w	(sp)+,d0
   18585/    EEEC : 1140 0024           		move.b	d0,$24(a0)
   18586/    EEF0 : 0C68 06A0 0008      		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
   18587/    EEF6 : 6608                		bne.s	Obj4E_Animate	; if not, branch
   18588/    EEF8 : 4268 0010           		clr.w	$10(a0)		; stop object moving
   18589/    EEFC : 4228 0036           		clr.b	$36(a0)
   18590/    EF00 :                     
   18591/    EF00 :                     Obj4E_Animate:
   18592/    EF00 : 43F9 0000 F000      		lea	(Ani_obj4E).l,a1
   18593/    EF06 : 6100 B5F6           		bsr.w	AnimateSprite
   18594/    EF0A : 0C38 0004 D024      		cmpi.b	#4,($FFFFD024).w
   18595/    EF10 : 6404                		bcc.s	Obj4E_ChkDel
   18596/    EF12 : 6100 E498           		bsr.w	SpeedToPos
   18597/    EF16 :                     
   18598/    EF16 :                     Obj4E_ChkDel:
   18599/    EF16 : 6100 E4BA           		bsr.w	DisplaySprite
   18600/    EF1A : 4A28 0036           		tst.b	$36(a0)
   18601/    EF1E : 661C                		bne.s	locret_F17E
   18602/    EF20 : 3028 0008           		move.w	8(a0),d0
   18603/    EF24 : 0240 FF80           		andi.w	#$FF80,d0
   18604/    EF28 : 3238 F700           		move.w	($FFFFF700).w,d1
   18605/    EF2C : 0441 0080           		subi.w	#$80,d1
   18606/    EF30 : 0241 FF80           		andi.w	#$FF80,d1
   18607/    EF34 : 9041                		sub.w	d1,d0
   18608/    EF36 : 0C40 0280           		cmpi.w	#$280,d0
   18609/    EF3A : 6202                		bhi.s	Obj4E_ChkGone
   18610/    EF3C :                     
   18611/    EF3C :                     locret_F17E:
   18612/    EF3C : 4E75                		rts	
   18613/    EF3E :                     ; ===========================================================================
   18614/    EF3E :                     
   18615/    EF3E :                     Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
   18616/    EF3E : 45F8 FC00           		lea	($FFFFFC00).w,a2
   18617/    EF42 : 7000                		moveq	#0,d0
   18618/    EF44 : 1028 0023           		move.b	$23(a0),d0
   18619/    EF48 : 08B2 0007 0002      		bclr	#7,2(a2,d0.w)
   18620/    EF4E : 117C 0008 0024      		move.b	#8,$24(a0)
   18621/    EF54 : 4E75                		rts	
   18622/    EF56 :                     ; ===========================================================================
   18623/    EF56 :                     
   18624/    EF56 :                     Obj4E_Move2:				; XREF: Obj4E_Index
   18625/    EF56 : 2268 003C           		movea.l	$3C(a0),a1
   18626/    EF5A : 0C29 0008 0024      		cmpi.b	#8,$24(a1)
   18627/    EF60 : 6710                		beq.s	Obj4E_Delete
   18628/    EF62 : 3169 0008 0008      		move.w	8(a1),8(a0)	; move rest of lava wall
   18629/    EF68 : 0468 0080 0008      		subi.w	#$80,8(a0)
   18630/    EF6E : 6000 E462           		bra.w	DisplaySprite
   18631/    EF72 :                     ; ===========================================================================
   18632/    EF72 :                     
   18633/    EF72 :                     Obj4E_Delete:				; XREF: Obj4E_Index
   18634/    EF72 : 6000 E49A           		bra.w	DeleteObject
   18635/    EF76 :                     ; ===========================================================================
   18636/    EF76 :                     ; ---------------------------------------------------------------------------
   18637/    EF76 :                     ; Object 54 - invisible	lava tag (MZ)
   18638/    EF76 :                     ; ---------------------------------------------------------------------------
   18639/    EF76 :                     
   18640/    EF76 :                     Obj54:					; XREF: Obj_Index
   18641/    EF76 : 7000                		moveq	#0,d0
   18642/    EF78 : 1028 0024           		move.b	$24(a0),d0
   18643/    EF7C : 323B 0006           		move.w	Obj54_Index(pc,d0.w),d1
   18644/    EF80 : 4EFB 1002           		jmp	Obj54_Index(pc,d1.w)
   18645/    EF84 :                     ; ===========================================================================
   18646/    EF84 : 0008                Obj54_Index:	dc.w Obj54_Main-Obj54_Index
   18647/    EF86 : 0026                		dc.w Obj54_ChkDel-Obj54_Index
   18648/    EF88 :                     
   18649/    EF88 : 9694 9500           Obj54_Sizes:	dc.b $96, $94, $95, 0
   18650/    EF8C :                     ; ===========================================================================
   18651/    EF8C :                     
   18652/    EF8C :                     Obj54_Main:				; XREF: Obj54_Index
   18653/    EF8C : 5428 0024           		addq.b	#2,$24(a0)
   18654/    EF90 : 7000                		moveq	#0,d0
   18655/    EF92 : 1028 0028           		move.b	$28(a0),d0
   18656/    EF96 : 117B 00F0 0020      		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
   18657/    EF9C : 217C 0000 EFCE      		move.l	#Map_obj54,4(a0)
             EFA2 : 0004             
   18658/    EFA4 : 117C 0084 0001      		move.b	#$84,1(a0)
   18659/    EFAA :                     
   18660/    EFAA :                     Obj54_ChkDel:				; XREF: Obj54_Index
   18661/    EFAA : 3028 0008           		move.w	8(a0),d0
   18662/    EFAE : 0240 FF80           		andi.w	#$FF80,d0
   18663/    EFB2 : 3238 F700           		move.w	($FFFFF700).w,d1
   18664/    EFB6 : 0441 0080           		subi.w	#$80,d1
   18665/    EFBA : 0241 FF80           		andi.w	#$FF80,d1
   18666/    EFBE : 9041                		sub.w	d1,d0
   18667/    EFC0 : 6B00 E44C           		bmi.w	DeleteObject
   18668/    EFC4 : 0C40 0280           		cmpi.w	#$280,d0
   18669/    EFC8 : 6200 E444           		bhi.w	DeleteObject
   18670/    EFCC : 4E75                		rts	
   18671/    EFCE :                     ; ===========================================================================
   18672/    EFCE :                     ; ---------------------------------------------------------------------------
   18673/    EFCE :                     ; Sprite mappings - invisible lava tag (MZ)
   18674/    EFCE :                     ; ---------------------------------------------------------------------------
   18675/    EFCE :                     Map_obj54:
   18676/    EFCE :                     	include "_mappings/obj54.asm"
(1)    1/    EFCE :                     ; ---------------------------------------------------------------------------
(1)    2/    EFCE :                     ; Sprite mappings - invisible lava tag (MZ)
(1)    3/    EFCE :                     ; ---------------------------------------------------------------------------
(1)    4/    EFCE : 0002                		dc.w byte_F212-Map_obj54
(1)    5/    EFD0 : 00                  byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
(1)    6/    EFD1 : (MACRO)              		even
(1)    6/    EFD1 : 00                                          dc.b 0 ;ds.b 1 
   18677/    EFD2 :                     
   18678/    EFD2 :                     Ani_obj4C:
   18679/    EFD2 :                     	include "_animations/obj4C.asm"
(1)    1/    EFD2 :                     ; ---------------------------------------------------------------------------
(1)    2/    EFD2 :                     ; Animation script - geyser of lava (MZ)
(1)    3/    EFD2 :                     ; ---------------------------------------------------------------------------
(1)    4/    EFD2 : 000C                		dc.w byte_F220-Ani_obj4C
(1)    5/    EFD4 : 0016                		dc.w byte_F22A-Ani_obj4C
(1)    6/    EFD6 : 001A                		dc.w byte_F22E-Ani_obj4C
(1)    7/    EFD8 : 001E                		dc.w byte_F232-Ani_obj4C
(1)    8/    EFDA : 0026                		dc.w byte_F23A-Ani_obj4C
(1)    9/    EFDC : 002A                		dc.w byte_F23E-Ani_obj4C
(1)   10/    EFDE : 0200 0100 0104      byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
             EFE4 : 0504 05FC          
(1)   11/    EFE8 : 0202 03FF           byte_F22A:	dc.b 2,	2, 3, $FF
(1)   12/    EFEC : 0206 07FF           byte_F22E:	dc.b 2,	6, 7, $FF
(1)   13/    EFF0 : 0202 0300 0100      byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
             EFF6 : 01FC             
(1)   14/    EFF8 : 0F13 FF00           byte_F23A:	dc.b $F, $13, $FF, 0
(1)   15/    EFFC : 0211 12FF           byte_F23E:	dc.b 2,	$11, $12, $FF
(1)   16/    F000 : (MACRO)              		even
   18680/    F000 :                     
   18681/    F000 :                     Ani_obj4E:
   18682/    F000 :                     	include "_animations/obj4E.asm"
(1)    1/    F000 :                     ; ---------------------------------------------------------------------------
(1)    2/    F000 :                     ; Animation script - advancing wall of lava (MZ)
(1)    3/    F000 :                     ; ---------------------------------------------------------------------------
(1)    4/    F000 : 0002                		dc.w byte_F244-Ani_obj4E
(1)    5/    F002 : 0900 0102 03FF      byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
(1)    6/    F008 : (MACRO)              		even
   18683/    F008 :                     
   18684/    F008 :                     ; ---------------------------------------------------------------------------
   18685/    F008 :                     ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
   18686/    F008 :                     ; ---------------------------------------------------------------------------
   18687/    F008 :                     Map_obj4C:
   18688/    F008 :                     	include "_mappings/obj4C.asm"
(1)    1/    F008 :                     ; ---------------------------------------------------------------------------
(1)    2/    F008 :                     ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
(1)    3/    F008 :                     ; ---------------------------------------------------------------------------
(1)    4/    F008 : 0028 0033           		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
(1)    5/    F00C : 003E 0053           		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
(1)    6/    F010 : 0068 0087           		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
(1)    7/    F014 : 00A6 00B1           		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
(1)    8/    F018 : 00BC 00EF           		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
(1)    9/    F01C : 0122 0155           		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
(1)   10/    F020 : 0174 0193           		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
(1)   11/    F024 : 01B2 0203           		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
(1)   12/    F028 : 0254 02A5           		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
(1)   13/    F02C : 02C4 02E3           		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
(1)   14/    F030 : 02                  byte_F272:	dc.b 2
(1)   15/    F031 : EC0B 0000 E8        		dc.b $EC, $B, 0, 0, $E8
(1)   16/    F036 : EC0B 0800 00        		dc.b $EC, $B, 8, 0, 0
(1)   17/    F03B : 02                  byte_F27D:	dc.b 2
(1)   18/    F03C : EC0B 0018 E8        		dc.b $EC, $B, 0, $18, $E8
(1)   19/    F041 : EC0B 0818 00        		dc.b $EC, $B, 8, $18, 0
(1)   20/    F046 : 04                  byte_F288:	dc.b 4
(1)   21/    F047 : EC0B 0000 C8        		dc.b $EC, $B, 0, 0, $C8
(1)   22/    F04C : F40E 000C E0        		dc.b $F4, $E, 0, $C, $E0
(1)   23/    F051 : F40E 080C 00        		dc.b $F4, $E, 8, $C, 0
(1)   24/    F056 : EC0B 0800 20        		dc.b $EC, $B, 8, 0, $20
(1)   25/    F05B : 04                  byte_F29D:	dc.b 4
(1)   26/    F05C : EC0B 0018 C8        		dc.b $EC, $B, 0, $18, $C8
(1)   27/    F061 : F40E 0024 E0        		dc.b $F4, $E, 0, $24, $E0
(1)   28/    F066 : F40E 0824 00        		dc.b $F4, $E, 8, $24, 0
(1)   29/    F06B : EC0B 0818 20        		dc.b $EC, $B, 8, $18, $20
(1)   30/    F070 : 06                  byte_F2B2:	dc.b 6
(1)   31/    F071 : EC0B 0000 C8        		dc.b $EC, $B, 0, 0, $C8
(1)   32/    F076 : F40E 000C E0        		dc.b $F4, $E, 0, $C, $E0
(1)   33/    F07B : F40E 080C 00        		dc.b $F4, $E, 8, $C, 0
(1)   34/    F080 : EC0B 0800 20        		dc.b $EC, $B, 8, 0, $20
(1)   35/    F085 : E80E 0090 E0        		dc.b $E8, $E, 0, $90, $E0
(1)   36/    F08A : E80E 0890 00        		dc.b $E8, $E, 8, $90, 0
(1)   37/    F08F : 06                  byte_F2D1:	dc.b 6
(1)   38/    F090 : EC0B 0018 C8        		dc.b $EC, $B, 0, $18, $C8
(1)   39/    F095 : F40E 0024 E0        		dc.b $F4, $E, 0, $24, $E0
(1)   40/    F09A : F40E 0824 00        		dc.b $F4, $E, 8, $24, 0
(1)   41/    F09F : EC0B 0818 20        		dc.b $EC, $B, 8, $18, $20
(1)   42/    F0A4 : E80E 0890 E0        		dc.b $E8, $E, 8, $90, $E0
(1)   43/    F0A9 : E80E 0090 00        		dc.b $E8, $E, 0, $90, 0
(1)   44/    F0AE : 02                  byte_F2F0:	dc.b 2
(1)   45/    F0AF : E00F 0030 E0        		dc.b $E0, $F, 0, $30, $E0
(1)   46/    F0B4 : E00F 0830 00        		dc.b $E0, $F, 8, $30, 0
(1)   47/    F0B9 : 02                  byte_F2FB:	dc.b 2
(1)   48/    F0BA : E00F 0830 E0        		dc.b $E0, $F, 8, $30, $E0
(1)   49/    F0BF : E00F 0030 00        		dc.b $E0, $F, 0, $30, 0
(1)   50/    F0C4 : 0A                  byte_F306:	dc.b $A
(1)   51/    F0C5 : 900F 0040 E0        		dc.b $90, $F, 0, $40, $E0
(1)   52/    F0CA : 900F 0840 00        		dc.b $90, $F, 8, $40, 0
(1)   53/    F0CF : B00F 0040 E0        		dc.b $B0, $F, 0, $40, $E0
(1)   54/    F0D4 : B00F 0840 00        		dc.b $B0, $F, 8, $40, 0
(1)   55/    F0D9 : D00F 0040 E0        		dc.b $D0, $F, 0, $40, $E0
(1)   56/    F0DE : D00F 0840 00        		dc.b $D0, $F, 8, $40, 0
(1)   57/    F0E3 : F00F 0040 E0        		dc.b $F0, $F, 0, $40, $E0
(1)   58/    F0E8 : F00F 0840 00        		dc.b $F0, $F, 8, $40, 0
(1)   59/    F0ED : 100F 0040 E0        		dc.b $10, $F, 0, $40, $E0
(1)   60/    F0F2 : 100F 0840 00        		dc.b $10, $F, 8, $40, 0
(1)   61/    F0F7 : 0A                  byte_F339:	dc.b $A
(1)   62/    F0F8 : 900F 0050 E0        		dc.b $90, $F, 0, $50, $E0
(1)   63/    F0FD : 900F 0850 00        		dc.b $90, $F, 8, $50, 0
(1)   64/    F102 : B00F 0050 E0        		dc.b $B0, $F, 0, $50, $E0
(1)   65/    F107 : B00F 0850 00        		dc.b $B0, $F, 8, $50, 0
(1)   66/    F10C : D00F 0050 E0        		dc.b $D0, $F, 0, $50, $E0
(1)   67/    F111 : D00F 0850 00        		dc.b $D0, $F, 8, $50, 0
(1)   68/    F116 : F00F 0050 E0        		dc.b $F0, $F, 0, $50, $E0
(1)   69/    F11B : F00F 0850 00        		dc.b $F0, $F, 8, $50, 0
(1)   70/    F120 : 100F 0050 E0        		dc.b $10, $F, 0, $50, $E0
(1)   71/    F125 : 100F 0850 00        		dc.b $10, $F, 8, $50, 0
(1)   72/    F12A : 0A                  byte_F36C:	dc.b $A
(1)   73/    F12B : 900F 0060 E0        		dc.b $90, $F, 0, $60, $E0
(1)   74/    F130 : 900F 0860 00        		dc.b $90, $F, 8, $60, 0
(1)   75/    F135 : B00F 0060 E0        		dc.b $B0, $F, 0, $60, $E0
(1)   76/    F13A : B00F 0860 00        		dc.b $B0, $F, 8, $60, 0
(1)   77/    F13F : D00F 0060 E0        		dc.b $D0, $F, 0, $60, $E0
(1)   78/    F144 : D00F 0860 00        		dc.b $D0, $F, 8, $60, 0
(1)   79/    F149 : F00F 0060 E0        		dc.b $F0, $F, 0, $60, $E0
(1)   80/    F14E : F00F 0860 00        		dc.b $F0, $F, 8, $60, 0
(1)   81/    F153 : 100F 0060 E0        		dc.b $10, $F, 0, $60, $E0
(1)   82/    F158 : 100F 0860 00        		dc.b $10, $F, 8, $60, 0
(1)   83/    F15D : 06                  byte_F39F:	dc.b 6
(1)   84/    F15E : 900F 0040 E0        		dc.b $90, $F, 0, $40, $E0
(1)   85/    F163 : 900F 0840 00        		dc.b $90, $F, 8, $40, 0
(1)   86/    F168 : B00F 0040 E0        		dc.b $B0, $F, 0, $40, $E0
(1)   87/    F16D : B00F 0840 00        		dc.b $B0, $F, 8, $40, 0
(1)   88/    F172 : D00F 0040 E0        		dc.b $D0, $F, 0, $40, $E0
(1)   89/    F177 : D00F 0840 00        		dc.b $D0, $F, 8, $40, 0
(1)   90/    F17C : 06                  byte_F3BE:	dc.b 6
(1)   91/    F17D : 900F 0050 E0        		dc.b $90, $F, 0, $50, $E0
(1)   92/    F182 : 900F 0850 00        		dc.b $90, $F, 8, $50, 0
(1)   93/    F187 : B00F 0050 E0        		dc.b $B0, $F, 0, $50, $E0
(1)   94/    F18C : B00F 0850 00        		dc.b $B0, $F, 8, $50, 0
(1)   95/    F191 : D00F 0050 E0        		dc.b $D0, $F, 0, $50, $E0
(1)   96/    F196 : D00F 0850 00        		dc.b $D0, $F, 8, $50, 0
(1)   97/    F19B : 06                  byte_F3DD:	dc.b 6
(1)   98/    F19C : 900F 0060 E0        		dc.b $90, $F, 0, $60, $E0
(1)   99/    F1A1 : 900F 0860 00        		dc.b $90, $F, 8, $60, 0
(1)  100/    F1A6 : B00F 0060 E0        		dc.b $B0, $F, 0, $60, $E0
(1)  101/    F1AB : B00F 0860 00        		dc.b $B0, $F, 8, $60, 0
(1)  102/    F1B0 : D00F 0060 E0        		dc.b $D0, $F, 0, $60, $E0
(1)  103/    F1B5 : D00F 0860 00        		dc.b $D0, $F, 8, $60, 0
(1)  104/    F1BA : 10                  byte_F3FC:	dc.b $10
(1)  105/    F1BB : 900F 0040 E0        		dc.b $90, $F, 0, $40, $E0
(1)  106/    F1C0 : 900F 0840 00        		dc.b $90, $F, 8, $40, 0
(1)  107/    F1C5 : B00F 0040 E0        		dc.b $B0, $F, 0, $40, $E0
(1)  108/    F1CA : B00F 0840 00        		dc.b $B0, $F, 8, $40, 0
(1)  109/    F1CF : D00F 0040 E0        		dc.b $D0, $F, 0, $40, $E0
(1)  110/    F1D4 : D00F 0840 00        		dc.b $D0, $F, 8, $40, 0
(1)  111/    F1D9 : F00F 0040 E0        		dc.b $F0, $F, 0, $40, $E0
(1)  112/    F1DE : F00F 0840 00        		dc.b $F0, $F, 8, $40, 0
(1)  113/    F1E3 : 100F 0040 E0        		dc.b $10, $F, 0, $40, $E0
(1)  114/    F1E8 : 100F 0840 00        		dc.b $10, $F, 8, $40, 0
(1)  115/    F1ED : 300F 0040 E0        		dc.b $30, $F, 0, $40, $E0
(1)  116/    F1F2 : 300F 0840 00        		dc.b $30, $F, 8, $40, 0
(1)  117/    F1F7 : 500F 0040 E0        		dc.b $50, $F, 0, $40, $E0
(1)  118/    F1FC : 500F 0840 00        		dc.b $50, $F, 8, $40, 0
(1)  119/    F201 : 700F 0040 E0        		dc.b $70, $F, 0, $40, $E0
(1)  120/    F206 : 700F 0840 00        		dc.b $70, $F, 8, $40, 0
(1)  121/    F20B : 10                  byte_F44D:	dc.b $10
(1)  122/    F20C : 900F 0050 E0        		dc.b $90, $F, 0, $50, $E0
(1)  123/    F211 : 900F 0850 00        		dc.b $90, $F, 8, $50, 0
(1)  124/    F216 : B00F 0050 E0        		dc.b $B0, $F, 0, $50, $E0
(1)  125/    F21B : B00F 0850 00        		dc.b $B0, $F, 8, $50, 0
(1)  126/    F220 : D00F 0050 E0        		dc.b $D0, $F, 0, $50, $E0
(1)  127/    F225 : D00F 0850 00        		dc.b $D0, $F, 8, $50, 0
(1)  128/    F22A : F00F 0050 E0        		dc.b $F0, $F, 0, $50, $E0
(1)  129/    F22F : F00F 0850 00        		dc.b $F0, $F, 8, $50, 0
(1)  130/    F234 : 100F 0050 E0        		dc.b $10, $F, 0, $50, $E0
(1)  131/    F239 : 100F 0850 00        		dc.b $10, $F, 8, $50, 0
(1)  132/    F23E : 300F 0050 E0        		dc.b $30, $F, 0, $50, $E0
(1)  133/    F243 : 300F 0850 00        		dc.b $30, $F, 8, $50, 0
(1)  134/    F248 : 500F 0050 E0        		dc.b $50, $F, 0, $50, $E0
(1)  135/    F24D : 500F 0850 00        		dc.b $50, $F, 8, $50, 0
(1)  136/    F252 : 700F 0050 E0        		dc.b $70, $F, 0, $50, $E0
(1)  137/    F257 : 700F 0850 00        		dc.b $70, $F, 8, $50, 0
(1)  138/    F25C : 10                  byte_F49E:	dc.b $10
(1)  139/    F25D : 900F 0060 E0        		dc.b $90, $F, 0, $60, $E0
(1)  140/    F262 : 900F 0860 00        		dc.b $90, $F, 8, $60, 0
(1)  141/    F267 : B00F 0060 E0        		dc.b $B0, $F, 0, $60, $E0
(1)  142/    F26C : B00F 0860 00        		dc.b $B0, $F, 8, $60, 0
(1)  143/    F271 : D00F 0060 E0        		dc.b $D0, $F, 0, $60, $E0
(1)  144/    F276 : D00F 0860 00        		dc.b $D0, $F, 8, $60, 0
(1)  145/    F27B : F00F 0060 E0        		dc.b $F0, $F, 0, $60, $E0
(1)  146/    F280 : F00F 0860 00        		dc.b $F0, $F, 8, $60, 0
(1)  147/    F285 : 100F 0060 E0        		dc.b $10, $F, 0, $60, $E0
(1)  148/    F28A : 100F 0860 00        		dc.b $10, $F, 8, $60, 0
(1)  149/    F28F : 300F 0060 E0        		dc.b $30, $F, 0, $60, $E0
(1)  150/    F294 : 300F 0860 00        		dc.b $30, $F, 8, $60, 0
(1)  151/    F299 : 500F 0060 E0        		dc.b $50, $F, 0, $60, $E0
(1)  152/    F29E : 500F 0860 00        		dc.b $50, $F, 8, $60, 0
(1)  153/    F2A3 : 700F 0060 E0        		dc.b $70, $F, 0, $60, $E0
(1)  154/    F2A8 : 700F 0860 00        		dc.b $70, $F, 8, $60, 0
(1)  155/    F2AD : 06                  byte_F4EF:	dc.b 6
(1)  156/    F2AE : E00B 0000 C8        		dc.b $E0, $B, 0, 0, $C8
(1)  157/    F2B3 : E80E 000C E0        		dc.b $E8, $E, 0, $C, $E0
(1)  158/    F2B8 : E80E 080C 00        		dc.b $E8, $E, 8, $C, 0
(1)  159/    F2BD : E00B 0800 20        		dc.b $E0, $B, 8, 0, $20
(1)  160/    F2C2 : D80E 0090 E0        		dc.b $D8, $E, 0, $90, $E0
(1)  161/    F2C7 : D80E 0890 00        		dc.b $D8, $E, 8, $90, 0
(1)  162/    F2CC : 06                  byte_F50E:	dc.b 6
(1)  163/    F2CD : E00B 0018 C8        		dc.b $E0, $B, 0, $18, $C8
(1)  164/    F2D2 : E80E 0024 E0        		dc.b $E8, $E, 0, $24, $E0
(1)  165/    F2D7 : E80E 0824 00        		dc.b $E8, $E, 8, $24, 0
(1)  166/    F2DC : E00B 0818 20        		dc.b $E0, $B, 8, $18, $20
(1)  167/    F2E1 : D80E 0890 E0        		dc.b $D8, $E, 8, $90, $E0
(1)  168/    F2E6 : D80E 0090 00        		dc.b $D8, $E, 0, $90, 0
(1)  169/    F2EB : 00                  byte_F52D:	dc.b 0
(1)  170/    F2EC : (MACRO)              		even
   18689/    F2EC :                     
   18690/    F2EC :                     ; ---------------------------------------------------------------------------
   18691/    F2EC :                     ; Sprite mappings - advancing wall of lava (MZ)
   18692/    F2EC :                     ; ---------------------------------------------------------------------------
   18693/    F2EC :                     Map_obj4E:
   18694/    F2EC :                     	include "_mappings/obj4E.asm"
(1)    1/    F2EC :                     ; ---------------------------------------------------------------------------
(1)    2/    F2EC :                     ; Sprite mappings - advancing wall of lava (MZ)
(1)    3/    F2EC :                     ; ---------------------------------------------------------------------------
(1)    4/    F2EC : 000A                		dc.w byte_F538-Map_obj4E
(1)    5/    F2EE : 0038                		dc.w byte_F566-Map_obj4E
(1)    6/    F2F0 : 0066                		dc.w byte_F594-Map_obj4E
(1)    7/    F2F2 : 0094                		dc.w byte_F5C2-Map_obj4E
(1)    8/    F2F4 : 00C2                		dc.w byte_F5F0-Map_obj4E
(1)    9/    F2F6 : 09                  byte_F538:	dc.b 9
(1)   10/    F2F7 : E00F 0060 20        		dc.b $E0, $F, 0, $60, $20
(1)   11/    F2FC : 000F 0070 3C        		dc.b 0,	$F, 0, $70, $3C
(1)   12/    F301 : 000F FF2A 20        		dc.b 0,	$F, $FF, $2A, $20
(1)   13/    F306 : E00F FF2A 00        		dc.b $E0, $F, $FF, $2A,	0
(1)   14/    F30B : 000F FF2A 00        		dc.b 0,	$F, $FF, $2A, 0
(1)   15/    F310 : E00F FF2A E0        		dc.b $E0, $F, $FF, $2A,	$E0
(1)   16/    F315 : 000F FF2A E0        		dc.b 0,	$F, $FF, $2A, $E0
(1)   17/    F31A : E00F FF2A C0        		dc.b $E0, $F, $FF, $2A,	$C0
(1)   18/    F31F : 000F FF2A C0        		dc.b 0,	$F, $FF, $2A, $C0
(1)   19/    F324 : 09                  byte_F566:	dc.b 9
(1)   20/    F325 : E00F 0070 20        		dc.b $E0, $F, 0, $70, $20
(1)   21/    F32A : 000F 0080 3C        		dc.b 0,	$F, 0, $80, $3C
(1)   22/    F32F : 000F FF2A 20        		dc.b 0,	$F, $FF, $2A, $20
(1)   23/    F334 : E00F FF2A 00        		dc.b $E0, $F, $FF, $2A,	0
(1)   24/    F339 : 000F FF2A 00        		dc.b 0,	$F, $FF, $2A, 0
(1)   25/    F33E : E00F FF2A E0        		dc.b $E0, $F, $FF, $2A,	$E0
(1)   26/    F343 : 000F FF2A E0        		dc.b 0,	$F, $FF, $2A, $E0
(1)   27/    F348 : E00F FF2A C0        		dc.b $E0, $F, $FF, $2A,	$C0
(1)   28/    F34D : 000F FF2A C0        		dc.b 0,	$F, $FF, $2A, $C0
(1)   29/    F352 : 09                  byte_F594:	dc.b 9
(1)   30/    F353 : E00F 0080 20        		dc.b $E0, $F, 0, $80, $20
(1)   31/    F358 : 000F 0070 3C        		dc.b 0,	$F, 0, $70, $3C
(1)   32/    F35D : 000F FF2A 20        		dc.b 0,	$F, $FF, $2A, $20
(1)   33/    F362 : E00F FF2A 00        		dc.b $E0, $F, $FF, $2A,	0
(1)   34/    F367 : 000F FF2A 00        		dc.b 0,	$F, $FF, $2A, 0
(1)   35/    F36C : E00F FF2A E0        		dc.b $E0, $F, $FF, $2A,	$E0
(1)   36/    F371 : 000F FF2A E0        		dc.b 0,	$F, $FF, $2A, $E0
(1)   37/    F376 : E00F FF2A C0        		dc.b $E0, $F, $FF, $2A,	$C0
(1)   38/    F37B : 000F FF2A C0        		dc.b 0,	$F, $FF, $2A, $C0
(1)   39/    F380 : 09                  byte_F5C2:	dc.b 9
(1)   40/    F381 : E00F 0070 20        		dc.b $E0, $F, 0, $70, $20
(1)   41/    F386 : 000F 0060 3C        		dc.b 0,	$F, 0, $60, $3C
(1)   42/    F38B : 000F FF2A 20        		dc.b 0,	$F, $FF, $2A, $20
(1)   43/    F390 : E00F FF2A 00        		dc.b $E0, $F, $FF, $2A,	0
(1)   44/    F395 : 000F FF2A 00        		dc.b 0,	$F, $FF, $2A, 0
(1)   45/    F39A : E00F FF2A E0        		dc.b $E0, $F, $FF, $2A,	$E0
(1)   46/    F39F : 000F FF2A E0        		dc.b 0,	$F, $FF, $2A, $E0
(1)   47/    F3A4 : E00F FF2A C0        		dc.b $E0, $F, $FF, $2A,	$C0
(1)   48/    F3A9 : 000F FF2A C0        		dc.b 0,	$F, $FF, $2A, $C0
(1)   49/    F3AE : 08                  byte_F5F0:	dc.b 8
(1)   50/    F3AF : E00F FF2A 20        		dc.b $E0, $F, $FF, $2A,	$20
(1)   51/    F3B4 : 000F FF2A 20        		dc.b 0,	$F, $FF, $2A, $20
(1)   52/    F3B9 : E00F FF2A 00        		dc.b $E0, $F, $FF, $2A,	0
(1)   53/    F3BE : 000F FF2A 00        		dc.b 0,	$F, $FF, $2A, 0
(1)   54/    F3C3 : E00F FF2A E0        		dc.b $E0, $F, $FF, $2A,	$E0
(1)   55/    F3C8 : 000F FF2A E0        		dc.b 0,	$F, $FF, $2A, $E0
(1)   56/    F3CD : E00F FF2A C0        		dc.b $E0, $F, $FF, $2A,	$C0
(1)   57/    F3D2 : 000F FF2A C0        		dc.b 0,	$F, $FF, $2A, $C0
(1)   58/    F3D7 : (MACRO)              		even
(1)   58/    F3D7 : 00                                          dc.b 0 ;ds.b 1 
   18695/    F3D8 :                     
   18696/    F3D8 :                     ; ===========================================================================
   18697/    F3D8 :                     ; ---------------------------------------------------------------------------
   18698/    F3D8 :                     ; Object 40 - Moto Bug enemy (GHZ)
   18699/    F3D8 :                     ; ---------------------------------------------------------------------------
   18700/    F3D8 :                     
   18701/    F3D8 :                     Obj40:					; XREF: Obj_Index
   18702/    F3D8 : 7000                		moveq	#0,d0
   18703/    F3DA : 1028 0024           		move.b	$24(a0),d0
   18704/    F3DE : 323B 0006           		move.w	Obj40_Index(pc,d0.w),d1
   18705/    F3E2 : 4EFB 1002           		jmp	Obj40_Index(pc,d1.w)
   18706/    F3E6 :                     ; ===========================================================================
   18707/    F3E6 : 0008                Obj40_Index:	dc.w Obj40_Main-Obj40_Index
   18708/    F3E8 : 006C                		dc.w Obj40_Action-Obj40_Index
   18709/    F3EA : 0146                		dc.w Obj40_Animate-Obj40_Index
   18710/    F3EC : 0154                		dc.w Obj40_Delete-Obj40_Index
   18711/    F3EE :                     ; ===========================================================================
   18712/    F3EE :                     
   18713/    F3EE :                     Obj40_Main:				; XREF: Obj40_Index
   18714/    F3EE : 217C 0000 F55C      		move.l	#Map_obj40,4(a0)
             F3F4 : 0004             
   18715/    F3F6 : 317C 04F0 0002      		move.w	#$4F0,2(a0)
   18716/    F3FC : 117C 0004 0001      		move.b	#4,1(a0)
   18717/    F402 : 117C 0004 0018      		move.b	#4,$18(a0)
   18718/    F408 : 117C 0014 0019      		move.b	#$14,$19(a0)
   18719/    F40E : 4A28 001C           		tst.b	$1C(a0)		; is object a smoke trail?
   18720/    F412 : 6636                		bne.s	Obj40_SetSmoke	; if yes, branch
   18721/    F414 : 117C 000E 0016      		move.b	#$E,$16(a0)
   18722/    F41A : 117C 0008 0017      		move.b	#8,$17(a0)
   18723/    F420 : 117C 000C 0020      		move.b	#$C,$20(a0)
   18724/    F426 : 6100 DF58           		bsr.w	ObjectFall
   18725/    F42A : 4EB9 0001 4C08      		jsr	ObjHitFloor
   18726/    F430 : 4A41                		tst.w	d1
   18727/    F432 : 6A14                		bpl.s	locret_F68A
   18728/    F434 : D368 000C           		add.w	d1,$C(a0)	; match	object's position with the floor
   18729/    F438 : 317C 0000 0012      		move.w	#0,$12(a0)
   18730/    F43E : 5428 0024           		addq.b	#2,$24(a0)
   18731/    F442 : 0868 0000 0022      		bchg	#0,$22(a0)
   18732/    F448 :                     
   18733/    F448 :                     locret_F68A:
   18734/    F448 : 4E75                		rts	
   18735/    F44A :                     ; ===========================================================================
   18736/    F44A :                     
   18737/    F44A :                     Obj40_SetSmoke:				; XREF: Obj40_Main
   18738/    F44A : 5828 0024           		addq.b	#4,$24(a0)
   18739/    F44E : 6000 00DC           		bra.w	Obj40_Animate
   18740/    F452 :                     ; ===========================================================================
   18741/    F452 :                     
   18742/    F452 :                     Obj40_Action:				; XREF: Obj40_Index
   18743/    F452 : 7000                		moveq	#0,d0
   18744/    F454 : 1028 0025           		move.b	$25(a0),d0
   18745/    F458 : 323B 0048           		move.w	Obj40_Index2(pc,d0.w),d1
   18746/    F45C : 4EBB 1044           		jsr	Obj40_Index2(pc,d1.w)
   18747/    F460 : 43F9 0000 F53E      		lea	(Ani_obj40).l,a1
   18748/    F466 : 6100 B096           		bsr.w	AnimateSprite
   18749/    F46A :                     
   18750/    F46A :                     ; ---------------------------------------------------------------------------
   18751/    F46A :                     ; Routine to mark an enemy/monitor/ring	as destroyed
   18752/    F46A :                     ; ---------------------------------------------------------------------------
   18753/    F46A :                     
   18754/    F46A :                     MarkObjGone:
   18755/    F46A : 3028 0008           		move.w	8(a0),d0
   18756/    F46E : 0240 FF80           		andi.w	#$FF80,d0
   18757/    F472 : 3238 F700           		move.w	($FFFFF700).w,d1
   18758/    F476 : 0441 0080           		subi.w	#$80,d1
   18759/    F47A : 0241 FF80           		andi.w	#$FF80,d1
   18760/    F47E : 9041                		sub.w	d1,d0
   18761/    F480 : 0C40 0280           		cmpi.w	#$280,d0
   18762/    F484 : 6200 0006           		bhi.w	Mark_ChkGone
   18763/    F488 : 6000 DF48           		bra.w	DisplaySprite
   18764/    F48C :                     ; ===========================================================================
   18765/    F48C :                     
   18766/    F48C :                     Mark_ChkGone:
   18767/    F48C : 45F8 FC00           		lea	($FFFFFC00).w,a2
   18768/    F490 : 7000                		moveq	#0,d0
   18769/    F492 : 1028 0023           		move.b	$23(a0),d0
   18770/    F496 : 6706                		beq.s	Mark_Delete
   18771/    F498 : 08B2 0007 0002      		bclr	#7,2(a2,d0.w)
   18772/    F49E :                     
   18773/    F49E :                     Mark_Delete:
   18774/    F49E : 6000 DF6E           		bra.w	DeleteObject
   18775/    F4A2 :                     
   18776/    F4A2 :                     ; ===========================================================================
   18777/    F4A2 : 0004                Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
   18778/    F4A4 : 0028                		dc.w Obj40_FixToFloor-Obj40_Index2
   18779/    F4A6 :                     ; ===========================================================================
   18780/    F4A6 :                     
   18781/    F4A6 :                     Obj40_Move:				; XREF: Obj40_Index2
   18782/    F4A6 : 5368 0030           		subq.w	#1,$30(a0)	; subtract 1 from pause	time
   18783/    F4AA : 6A1C                		bpl.s	locret_F70A	; if time remains, branch
   18784/    F4AC : 5428 0025           		addq.b	#2,$25(a0)
   18785/    F4B0 : 317C FF00 0010      		move.w	#-$100,$10(a0)	; move object to the left
   18786/    F4B6 : 117C 0001 001C      		move.b	#1,$1C(a0)
   18787/    F4BC : 0868 0000 0022      		bchg	#0,$22(a0)
   18788/    F4C2 : 6604                		bne.s	locret_F70A
   18789/    F4C4 : 4468 0010           		neg.w	$10(a0)		; change direction
   18790/    F4C8 :                     
   18791/    F4C8 :                     locret_F70A:
   18792/    F4C8 : 4E75                		rts	
   18793/    F4CA :                     ; ===========================================================================
   18794/    F4CA :                     
   18795/    F4CA :                     Obj40_FixToFloor:			; XREF: Obj40_Index2
   18796/    F4CA : 6100 DEE0           		bsr.w	SpeedToPos
   18797/    F4CE : 4EB9 0001 4C08      		jsr	ObjHitFloor
   18798/    F4D4 : 0C41 FFF8           		cmpi.w	#-8,d1
   18799/    F4D8 : 6D3A                		blt.s	Obj40_Pause
   18800/    F4DA : 0C41 000C           		cmpi.w	#$C,d1
   18801/    F4DE : 6C34                		bge.s	Obj40_Pause
   18802/    F4E0 : D368 000C           		add.w	d1,$C(a0)	; match	object's position with the floor
   18803/    F4E4 : 5328 0033           		subq.b	#1,$33(a0)
   18804/    F4E8 : 6A28                		bpl.s	locret_F756
   18805/    F4EA : 117C 000F 0033      		move.b	#$F,$33(a0)
   18806/    F4F0 : 6100 E366           		bsr.w	SingleObjLoad
   18807/    F4F4 : 661C                		bne.s	locret_F756
   18808/    F4F6 : 12BC 0040           		move.b	#$40,0(a1)	; load exhaust smoke object
   18809/    F4FA : 3368 0008 0008      		move.w	8(a0),8(a1)
   18810/    F500 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   18811/    F506 : 1368 0022 0022      		move.b	$22(a0),$22(a1)
   18812/    F50C : 137C 0002 001C      		move.b	#2,$1C(a1)
   18813/    F512 :                     
   18814/    F512 :                     locret_F756:
   18815/    F512 : 4E75                		rts	
   18816/    F514 :                     ; ===========================================================================
   18817/    F514 :                     
   18818/    F514 :                     Obj40_Pause:				; XREF: Obj40_FixToFloor
   18819/    F514 : 5528 0025           		subq.b	#2,$25(a0)
   18820/    F518 : 317C 003B 0030      		move.w	#59,$30(a0)	; set pause time to 1 second
   18821/    F51E : 317C 0000 0010      		move.w	#0,$10(a0)	; stop the object moving
   18822/    F524 : 117C 0000 001C      		move.b	#0,$1C(a0)
   18823/    F52A : 4E75                		rts	
   18824/    F52C :                     ; ===========================================================================
   18825/    F52C :                     
   18826/    F52C :                     Obj40_Animate:				; XREF: Obj40_Index
   18827/    F52C : 43F9 0000 F53E      		lea	(Ani_obj40).l,a1
   18828/    F532 : 6100 AFCA           		bsr.w	AnimateSprite
   18829/    F536 : 6000 DE9A           		bra.w	DisplaySprite
   18830/    F53A :                     ; ===========================================================================
   18831/    F53A :                     
   18832/    F53A :                     Obj40_Delete:				; XREF: Obj40_Index
   18833/    F53A : 6000 DED2           		bra.w	DeleteObject
   18834/    F53E :                     ; ===========================================================================
   18835/    F53E :                     Ani_obj40:
   18836/    F53E :                     	include "_animations/obj40.asm"
(1)    1/    F53E :                     ; ---------------------------------------------------------------------------
(1)    2/    F53E :                     ; Animation script - Motobug enemy
(1)    3/    F53E :                     ; ---------------------------------------------------------------------------
(1)    4/    F53E : 0006                		dc.w byte_F788-Ani_obj40
(1)    5/    F540 : 000A                		dc.w byte_F78C-Ani_obj40
(1)    6/    F542 : 0010                		dc.w byte_F792-Ani_obj40
(1)    7/    F544 : 0F02 FF00           byte_F788:	dc.b $F, 2, $FF, 0
(1)    8/    F548 : 0700 0100 02FF      byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
(1)    9/    F54E : 0103 0603 0604      byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
             F554 : 0604 0604 0605 
             F55A : FC00             
(1)   10/    F55C : (MACRO)              		even
   18837/    F55C :                     
   18838/    F55C :                     ; ---------------------------------------------------------------------------
   18839/    F55C :                     ; Sprite mappings - Moto Bug enemy (GHZ)
   18840/    F55C :                     ; ---------------------------------------------------------------------------
   18841/    F55C :                     Map_obj40:
   18842/    F55C :                     	include "_mappings/obj40.asm"
(1)    1/    F55C :                     ; ---------------------------------------------------------------------------
(1)    2/    F55C :                     ; Sprite mappings - Moto Bug enemy (GHZ)
(1)    3/    F55C :                     ; ---------------------------------------------------------------------------
(1)    4/    F55C : 000E 0023           		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
(1)    5/    F560 : 0038 0052           		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
(1)    6/    F564 : 0058 005E           		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
(1)    7/    F568 : 0064                		dc.w byte_F804-Map_obj40
(1)    8/    F56A : 04                  byte_F7AE:	dc.b 4
(1)    9/    F56B : F00D 0000 EC        		dc.b $F0, $D, 0, 0, $EC
(1)   10/    F570 : 000C 0008 EC        		dc.b 0,	$C, 0, 8, $EC
(1)   11/    F575 : F801 000C 0C        		dc.b $F8, 1, 0,	$C, $C
(1)   12/    F57A : 0808 000E F4        		dc.b 8,	8, 0, $E, $F4
(1)   13/    F57F : 04                  byte_F7C3:	dc.b 4
(1)   14/    F580 : F10D 0000 EC        		dc.b $F1, $D, 0, 0, $EC
(1)   15/    F585 : 010C 0008 EC        		dc.b 1,	$C, 0, 8, $EC
(1)   16/    F58A : F901 000C 0C        		dc.b $F9, 1, 0,	$C, $C
(1)   17/    F58F : 0908 0011 F4        		dc.b 9,	8, 0, $11, $F4
(1)   18/    F594 : 05                  byte_F7D8:	dc.b 5
(1)   19/    F595 : F00D 0000 EC        		dc.b $F0, $D, 0, 0, $EC
(1)   20/    F59A : 000C 0014 EC        		dc.b 0,	$C, 0, $14, $EC
(1)   21/    F59F : F801 000C 0C        		dc.b $F8, 1, 0,	$C, $C
(1)   22/    F5A4 : 0804 0018 EC        		dc.b 8,	4, 0, $18, $EC
(1)   23/    F5A9 : 0804 0012 FC        		dc.b 8,	4, 0, $12, $FC
(1)   24/    F5AE : 01                  byte_F7F2:	dc.b 1
(1)   25/    F5AF : FA00 001A 10        		dc.b $FA, 0, 0,	$1A, $10
(1)   26/    F5B4 : 01                  byte_F7F8:	dc.b 1
(1)   27/    F5B5 : FA00 001B 10        		dc.b $FA, 0, 0,	$1B, $10
(1)   28/    F5BA : 01                  byte_F7FE:	dc.b 1
(1)   29/    F5BB : FA00 001C 10        		dc.b $FA, 0, 0,	$1C, $10
(1)   30/    F5C0 : 00                  byte_F804:	dc.b 0
(1)   31/    F5C1 : (MACRO)              		even
(1)   31/    F5C1 : 00                                          dc.b 0 ;ds.b 1 
   18843/    F5C2 :                     
   18844/    F5C2 :                     ; ===========================================================================
   18845/    F5C2 :                     ; ---------------------------------------------------------------------------
   18846/    F5C2 :                     ; Object 4F - blank
   18847/    F5C2 :                     ; ---------------------------------------------------------------------------
   18848/    F5C2 :                     
   18849/    F5C2 :                     Obj4F:					; XREF: Obj_Index
   18850/    F5C2 : 4E75                		rts	
   18851/    F5C4 :                     
   18852/    F5C4 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   18853/    F5C4 :                     
   18854/    F5C4 :                     
   18855/    F5C4 :                     Obj50_ChkWall:				; XREF: Obj50_FixToFloor
   18856/    F5C4 : 3038 FE04           		move.w	($FFFFFE04).w,d0
   18857/    F5C8 : D047                		add.w	d7,d0
   18858/    F5CA : 0240 0003           		andi.w	#3,d0
   18859/    F5CE : 6622                		bne.s	loc_F836
   18860/    F5D0 : 7600                		moveq	#0,d3
   18861/    F5D2 : 1628 0019           		move.b	$19(a0),d3
   18862/    F5D6 : 4A68 0010           		tst.w	$10(a0)
   18863/    F5DA : 6B0C                		bmi.s	loc_F82C
   18864/    F5DC : 6100 56EC           		bsr.w	ObjHitWallRight
   18865/    F5E0 : 4A41                		tst.w	d1
   18866/    F5E2 : 6A0E                		bpl.s	loc_F836
   18867/    F5E4 :                     
   18868/    F5E4 :                     loc_F828:
   18869/    F5E4 : 7001                		moveq	#1,d0
   18870/    F5E6 : 4E75                		rts	
   18871/    F5E8 :                     ; ===========================================================================
   18872/    F5E8 :                     
   18873/    F5E8 :                     loc_F82C:
   18874/    F5E8 : 4643                		not.w	d3
   18875/    F5EA : 6100 5870           		bsr.w	ObjHitWallLeft
   18876/    F5EE : 4A41                		tst.w	d1
   18877/    F5F0 : 6BF2                		bmi.s	loc_F828
   18878/    F5F2 :                     
   18879/    F5F2 :                     loc_F836:
   18880/    F5F2 : 7000                		moveq	#0,d0
   18881/    F5F4 : 4E75                		rts	
   18882/    F5F6 :                     ; End of function Obj50_ChkWall
   18883/    F5F6 :                     
   18884/    F5F6 :                     ; ===========================================================================
   18885/    F5F6 :                     ; ---------------------------------------------------------------------------
   18886/    F5F6 :                     ; Object 50 - Yadrin enemy (SYZ)
   18887/    F5F6 :                     ; ---------------------------------------------------------------------------
   18888/    F5F6 :                     
   18889/    F5F6 :                     Obj50:					; XREF: Obj_Index
   18890/    F5F6 : 7000                		moveq	#0,d0
   18891/    F5F8 : 1028 0024           		move.b	$24(a0),d0
   18892/    F5FC : 323B 0006           		move.w	Obj50_Index(pc,d0.w),d1
   18893/    F600 : 4EFB 1002           		jmp	Obj50_Index(pc,d1.w)
   18894/    F604 :                     ; ===========================================================================
   18895/    F604 : 0004                Obj50_Index:	dc.w Obj50_Main-Obj50_Index
   18896/    F606 : 0058                		dc.w Obj50_Action-Obj50_Index
   18897/    F608 :                     ; ===========================================================================
   18898/    F608 :                     
   18899/    F608 :                     Obj50_Main:				; XREF: Obj50_Index
   18900/    F608 : 217C 0000 F6EA      		move.l	#Map_obj50,4(a0)
             F60E : 0004             
   18901/    F610 : 317C 247B 0002      		move.w	#$247B,2(a0)
   18902/    F616 : 117C 0004 0001      		move.b	#4,1(a0)
   18903/    F61C : 117C 0004 0018      		move.b	#4,$18(a0)
   18904/    F622 : 117C 0014 0019      		move.b	#$14,$19(a0)
   18905/    F628 : 117C 0011 0016      		move.b	#$11,$16(a0)
   18906/    F62E : 117C 0008 0017      		move.b	#8,$17(a0)
   18907/    F634 : 117C 00CC 0020      		move.b	#$CC,$20(a0)
   18908/    F63A : 6100 DD44           		bsr.w	ObjectFall
   18909/    F63E : 6100 55C8           		bsr.w	ObjHitFloor
   18910/    F642 : 4A41                		tst.w	d1
   18911/    F644 : 6A14                		bpl.s	locret_F89E
   18912/    F646 : D368 000C           		add.w	d1,$C(a0)	; match	object's position with the floor
   18913/    F64A : 317C 0000 0012      		move.w	#0,$12(a0)
   18914/    F650 : 5428 0024           		addq.b	#2,$24(a0)
   18915/    F654 : 0868 0000 0022      		bchg	#0,$22(a0)
   18916/    F65A :                     
   18917/    F65A :                     locret_F89E:
   18918/    F65A : 4E75                		rts	
   18919/    F65C :                     ; ===========================================================================
   18920/    F65C :                     
   18921/    F65C :                     Obj50_Action:				; XREF: Obj50_Index
   18922/    F65C : 7000                		moveq	#0,d0
   18923/    F65E : 1028 0025           		move.b	$25(a0),d0
   18924/    F662 : 323B 0014           		move.w	Obj50_Index2(pc,d0.w),d1
   18925/    F666 : 4EBB 1010           		jsr	Obj50_Index2(pc,d1.w)
   18926/    F66A : 43F9 0000 F6D8      		lea	(Ani_obj50).l,a1
   18927/    F670 : 6100 AE8C           		bsr.w	AnimateSprite
   18928/    F674 : 6000 FDF4           		bra.w	MarkObjGone
   18929/    F678 :                     ; ===========================================================================
   18930/    F678 : 0004                Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
   18931/    F67A : 0028                		dc.w Obj50_FixToFloor-Obj50_Index2
   18932/    F67C :                     ; ===========================================================================
   18933/    F67C :                     
   18934/    F67C :                     Obj50_Move:				; XREF: Obj50_Index2
   18935/    F67C : 5368 0030           		subq.w	#1,$30(a0)	; subtract 1 from pause	time
   18936/    F680 : 6A1C                		bpl.s	locret_F8E2	; if time remains, branch
   18937/    F682 : 5428 0025           		addq.b	#2,$25(a0)
   18938/    F686 : 317C FF00 0010      		move.w	#-$100,$10(a0)	; move object
   18939/    F68C : 117C 0001 001C      		move.b	#1,$1C(a0)
   18940/    F692 : 0868 0000 0022      		bchg	#0,$22(a0)
   18941/    F698 : 6604                		bne.s	locret_F8E2
   18942/    F69A : 4468 0010           		neg.w	$10(a0)		; change direction
   18943/    F69E :                     
   18944/    F69E :                     locret_F8E2:
   18945/    F69E : 4E75                		rts	
   18946/    F6A0 :                     ; ===========================================================================
   18947/    F6A0 :                     
   18948/    F6A0 :                     Obj50_FixToFloor:			; XREF: Obj50_Index2
   18949/    F6A0 : 6100 DD0A           		bsr.w	SpeedToPos
   18950/    F6A4 : 6100 5562           		bsr.w	ObjHitFloor
   18951/    F6A8 : 0C41 FFF8           		cmpi.w	#-8,d1
   18952/    F6AC : 6D12                		blt.s	Obj50_Pause
   18953/    F6AE : 0C41 000C           		cmpi.w	#$C,d1
   18954/    F6B2 : 6C0C                		bge.s	Obj50_Pause
   18955/    F6B4 : D368 000C           		add.w	d1,$C(a0)	; match	object's position to the floor
   18956/    F6B8 : 6100 FF0A           		bsr.w	Obj50_ChkWall
   18957/    F6BC : 6602                		bne.s	Obj50_Pause
   18958/    F6BE : 4E75                		rts	
   18959/    F6C0 :                     ; ===========================================================================
   18960/    F6C0 :                     
   18961/    F6C0 :                     Obj50_Pause:				; XREF: Obj50_FixToFloor
   18962/    F6C0 : 5528 0025           		subq.b	#2,$25(a0)
   18963/    F6C4 : 317C 003B 0030      		move.w	#59,$30(a0)	; set pause time to 1 second
   18964/    F6CA : 317C 0000 0010      		move.w	#0,$10(a0)
   18965/    F6D0 : 117C 0000 001C      		move.b	#0,$1C(a0)
   18966/    F6D6 : 4E75                		rts	
   18967/    F6D8 :                     ; ===========================================================================
   18968/    F6D8 :                     Ani_obj50:
   18969/    F6D8 :                     	include "_animations/obj50.asm"
(1)    1/    F6D8 :                     ; ---------------------------------------------------------------------------
(1)    2/    F6D8 :                     ; Animation script - Yadrin enemy
(1)    3/    F6D8 :                     ; ---------------------------------------------------------------------------
(1)    4/    F6D8 : 0004                		dc.w byte_F920-Ani_obj50
(1)    5/    F6DA : 0008                		dc.w byte_F924-Ani_obj50
(1)    6/    F6DC : 0700 FF00           byte_F920:	dc.b 7,	0, $FF,	0
(1)    7/    F6E0 : 0700 0301 0400      byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
             F6E6 : 0302 05FF          
(1)    8/    F6EA : (MACRO)              		even
   18970/    F6EA :                     
   18971/    F6EA :                     ; ---------------------------------------------------------------------------
   18972/    F6EA :                     ; Sprite mappings - Yadrin enemy (SYZ)
   18973/    F6EA :                     ; ---------------------------------------------------------------------------
   18974/    F6EA :                     Map_obj50:
   18975/    F6EA :                     	include "_mappings/obj50.asm"
(1)    1/    F6EA :                     ; ---------------------------------------------------------------------------
(1)    2/    F6EA :                     ; Sprite mappings - Yadrin enemy (SYZ)
(1)    3/    F6EA :                     ; ---------------------------------------------------------------------------
(1)    4/    F6EA : 000C 0026           		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
(1)    5/    F6EE : 0040 005A           		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
(1)    6/    F6F2 : 0074 008E           		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
(1)    7/    F6F6 : 05                  byte_F93A:	dc.b 5
(1)    8/    F6F7 : F408 0000 F4        		dc.b $F4, 8, 0,	0, $F4
(1)    9/    F6FC : FC0E 0003 EC        		dc.b $FC, $E, 0, 3, $EC
(1)   10/    F701 : EC04 000F FC        		dc.b $EC, 4, 0,	$F, $FC
(1)   11/    F706 : F402 0011 0C        		dc.b $F4, 2, 0,	$11, $C
(1)   12/    F70B : 0409 0031 FC        		dc.b 4,	9, 0, $31, $FC
(1)   13/    F710 : 05                  byte_F954:	dc.b 5
(1)   14/    F711 : F408 0014 F4        		dc.b $F4, 8, 0,	$14, $F4
(1)   15/    F716 : FC0E 0017 EC        		dc.b $FC, $E, 0, $17, $EC
(1)   16/    F71B : EC04 000F FC        		dc.b $EC, 4, 0,	$F, $FC
(1)   17/    F720 : F402 0011 0C        		dc.b $F4, 2, 0,	$11, $C
(1)   18/    F725 : 0409 0031 FC        		dc.b 4,	9, 0, $31, $FC
(1)   19/    F72A : 05                  byte_F96E:	dc.b 5
(1)   20/    F72B : F409 0023 F4        		dc.b $F4, 9, 0,	$23, $F4
(1)   21/    F730 : 040D 0029 EC        		dc.b 4,	$D, 0, $29, $EC
(1)   22/    F735 : EC04 000F FC        		dc.b $EC, 4, 0,	$F, $FC
(1)   23/    F73A : F402 0011 0C        		dc.b $F4, 2, 0,	$11, $C
(1)   24/    F73F : 0409 0031 FC        		dc.b 4,	9, 0, $31, $FC
(1)   25/    F744 : 05                  byte_F988:	dc.b 5
(1)   26/    F745 : F408 0000 F4        		dc.b $F4, 8, 0,	0, $F4
(1)   27/    F74A : FC0E 0003 EC        		dc.b $FC, $E, 0, 3, $EC
(1)   28/    F74F : EC04 000F FC        		dc.b $EC, 4, 0,	$F, $FC
(1)   29/    F754 : F402 0011 0C        		dc.b $F4, 2, 0,	$11, $C
(1)   30/    F759 : 0409 0037 FC        		dc.b 4,	9, 0, $37, $FC
(1)   31/    F75E : 05                  byte_F9A2:	dc.b 5
(1)   32/    F75F : F408 0014 F4        		dc.b $F4, 8, 0,	$14, $F4
(1)   33/    F764 : FC0E 0017 EC        		dc.b $FC, $E, 0, $17, $EC
(1)   34/    F769 : EC04 000F FC        		dc.b $EC, 4, 0,	$F, $FC
(1)   35/    F76E : F402 0011 0C        		dc.b $F4, 2, 0,	$11, $C
(1)   36/    F773 : 0409 0037 FC        		dc.b 4,	9, 0, $37, $FC
(1)   37/    F778 : 05                  byte_F9BC:	dc.b 5
(1)   38/    F779 : F409 0023 F4        		dc.b $F4, 9, 0,	$23, $F4
(1)   39/    F77E : 040D 0029 EC        		dc.b 4,	$D, 0, $29, $EC
(1)   40/    F783 : EC04 000F FC        		dc.b $EC, 4, 0,	$F, $FC
(1)   41/    F788 : F402 0011 0C        		dc.b $F4, 2, 0,	$11, $C
(1)   42/    F78D : 0409 0037 FC        		dc.b 4,	9, 0, $37, $FC
(1)   43/    F792 : (MACRO)              		even
   18976/    F792 :                     
   18977/    F792 :                     ; ---------------------------------------------------------------------------
   18978/    F792 :                     ; Solid	object subroutine (includes spikes, blocks, rocks etc)
   18979/    F792 :                     ;
   18980/    F792 :                     ; variables:
   18981/    F792 :                     ; d1 = width
   18982/    F792 :                     ; d2 = height /	2 (when	jumping)
   18983/    F792 :                     ; d3 = height /	2 (when	walking)
   18984/    F792 :                     ; d4 = x-axis position
   18985/    F792 :                     ; ---------------------------------------------------------------------------
   18986/    F792 :                     
   18987/    F792 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   18988/    F792 :                     
   18989/    F792 :                     
   18990/    F792 :                     SolidObject:
   18991/    F792 : 4A28 0025           		tst.b	$25(a0)
   18992/    F796 : 6700 00EC           		beq.w	loc_FAC8
   18993/    F79A : 3401                		move.w	d1,d2
   18994/    F79C : D442                		add.w	d2,d2
   18995/    F79E : 43F8 D000           		lea	($FFFFD000).w,a1
   18996/    F7A2 : 0829 0001 0022      		btst	#1,$22(a1)
   18997/    F7A8 : 6610                		bne.s	loc_F9FE
   18998/    F7AA : 3029 0008           		move.w	8(a1),d0
   18999/    F7AE : 9068 0008           		sub.w	8(a0),d0
   19000/    F7B2 : D041                		add.w	d1,d0
   19001/    F7B4 : 6B04                		bmi.s	loc_F9FE
   19002/    F7B6 : B042                		cmp.w	d2,d0
   19003/    F7B8 : 6514                		bcs.s	loc_FA12
   19004/    F7BA :                     
   19005/    F7BA :                     loc_F9FE:
   19006/    F7BA : 08A9 0003 0022      		bclr	#3,$22(a1)
   19007/    F7C0 : 08A8 0003 0022      		bclr	#3,$22(a0)
   19008/    F7C6 : 4228 0025           		clr.b	$25(a0)
   19009/    F7CA : 7800                		moveq	#0,d4
   19010/    F7CC : 4E75                		rts	
   19011/    F7CE :                     ; ===========================================================================
   19012/    F7CE :                     
   19013/    F7CE :                     loc_FA12:
   19014/    F7CE : 3404                		move.w	d4,d2
   19015/    F7D0 : 6100 815C           		bsr.w	MvSonicOnPtfm
   19016/    F7D4 : 7800                		moveq	#0,d4
   19017/    F7D6 : 4E75                		rts	
   19018/    F7D8 :                     ; ===========================================================================
   19019/    F7D8 :                     
   19020/    F7D8 :                     SolidObject71:				; XREF: Obj71_Solid
   19021/    F7D8 : 4A28 0025           		tst.b	$25(a0)
   19022/    F7DC : 6700 00AE           		beq.w	loc_FAD0
   19023/    F7E0 : 3401                		move.w	d1,d2
   19024/    F7E2 : D442                		add.w	d2,d2
   19025/    F7E4 : 43F8 D000           		lea	($FFFFD000).w,a1
   19026/    F7E8 : 0829 0001 0022      		btst	#1,$22(a1)
   19027/    F7EE : 6610                		bne.s	loc_FA44
   19028/    F7F0 : 3029 0008           		move.w	8(a1),d0
   19029/    F7F4 : 9068 0008           		sub.w	8(a0),d0
   19030/    F7F8 : D041                		add.w	d1,d0
   19031/    F7FA : 6B04                		bmi.s	loc_FA44
   19032/    F7FC : B042                		cmp.w	d2,d0
   19033/    F7FE : 6514                		bcs.s	loc_FA58
   19034/    F800 :                     
   19035/    F800 :                     loc_FA44:
   19036/    F800 : 08A9 0003 0022      		bclr	#3,$22(a1)
   19037/    F806 : 08A8 0003 0022      		bclr	#3,$22(a0)
   19038/    F80C : 4228 0025           		clr.b	$25(a0)
   19039/    F810 : 7800                		moveq	#0,d4
   19040/    F812 : 4E75                		rts	
   19041/    F814 :                     ; ===========================================================================
   19042/    F814 :                     
   19043/    F814 :                     loc_FA58:
   19044/    F814 : 3404                		move.w	d4,d2
   19045/    F816 : 6100 8116           		bsr.w	MvSonicOnPtfm
   19046/    F81A : 7800                		moveq	#0,d4
   19047/    F81C : 4E75                		rts	
   19048/    F81E :                     ; ===========================================================================
   19049/    F81E :                     
   19050/    F81E :                     SolidObject2F:				; XREF: Obj2F_Solid
   19051/    F81E : 43F8 D000           		lea	($FFFFD000).w,a1
   19052/    F822 : 4A28 0001           		tst.b	1(a0)
   19053/    F826 : 6A00 0126           		bpl.w	loc_FB92
   19054/    F82A : 3029 0008           		move.w	8(a1),d0
   19055/    F82E : 9068 0008           		sub.w	8(a0),d0
   19056/    F832 : D041                		add.w	d1,d0
   19057/    F834 : 6B00 0118           		bmi.w	loc_FB92
   19058/    F838 : 3601                		move.w	d1,d3
   19059/    F83A : D643                		add.w	d3,d3
   19060/    F83C : B043                		cmp.w	d3,d0
   19061/    F83E : 6200 010E           		bhi.w	loc_FB92
   19062/    F842 : 3A00                		move.w	d0,d5
   19063/    F844 : 0828 0000 0001      		btst	#0,1(a0)
   19064/    F84A : 6704                		beq.s	loc_FA94
   19065/    F84C : 4645                		not.w	d5
   19066/    F84E : DA43                		add.w	d3,d5
   19067/    F850 :                     
   19068/    F850 :                     loc_FA94:
   19069/    F850 : E24D                		lsr.w	#1,d5
   19070/    F852 : 7600                		moveq	#0,d3
   19071/    F854 : 1632 5000           		move.b	(a2,d5.w),d3
   19072/    F858 : 9612                		sub.b	(a2),d3
   19073/    F85A : 3A28 000C           		move.w	$C(a0),d5
   19074/    F85E : 9A43                		sub.w	d3,d5
   19075/    F860 : 1629 0016           		move.b	$16(a1),d3
   19076/    F864 : 4883                		ext.w	d3
   19077/    F866 : D443                		add.w	d3,d2
   19078/    F868 : 3629 000C           		move.w	$C(a1),d3
   19079/    F86C : 9645                		sub.w	d5,d3
   19080/    F86E : 5843                		addq.w	#4,d3
   19081/    F870 : D642                		add.w	d2,d3
   19082/    F872 : 6B00 00DA           		bmi.w	loc_FB92
   19083/    F876 : 3802                		move.w	d2,d4
   19084/    F878 : D844                		add.w	d4,d4
   19085/    F87A : B644                		cmp.w	d4,d3
   19086/    F87C : 6400 00D0           		bcc.w	loc_FB92
   19087/    F880 : 6000 0048           		bra.w	loc_FB0E
   19088/    F884 :                     ; ===========================================================================
   19089/    F884 :                     
   19090/    F884 :                     loc_FAC8:
   19091/    F884 : 4A28 0001           		tst.b	1(a0)
   19092/    F888 : 6A00 00C4           		bpl.w	loc_FB92
   19093/    F88C :                     
   19094/    F88C :                     loc_FAD0:
   19095/    F88C : 43F8 D000           		lea	($FFFFD000).w,a1
   19096/    F890 : 3029 0008           		move.w	8(a1),d0
   19097/    F894 : 9068 0008           		sub.w	8(a0),d0
   19098/    F898 : D041                		add.w	d1,d0
   19099/    F89A : 6B00 00B2           		bmi.w	loc_FB92
   19100/    F89E : 3601                		move.w	d1,d3
   19101/    F8A0 : D643                		add.w	d3,d3
   19102/    F8A2 : B043                		cmp.w	d3,d0
   19103/    F8A4 : 6200 00A8           		bhi.w	loc_FB92
   19104/    F8A8 : 1629 0016           		move.b	$16(a1),d3
   19105/    F8AC : 4883                		ext.w	d3
   19106/    F8AE : D443                		add.w	d3,d2
   19107/    F8B0 : 3629 000C           		move.w	$C(a1),d3
   19108/    F8B4 : 9668 000C           		sub.w	$C(a0),d3
   19109/    F8B8 : 5843                		addq.w	#4,d3
   19110/    F8BA : D642                		add.w	d2,d3
   19111/    F8BC : 6B00 0090           		bmi.w	loc_FB92
   19112/    F8C0 : 3802                		move.w	d2,d4
   19113/    F8C2 : D844                		add.w	d4,d4
   19114/    F8C4 : B644                		cmp.w	d4,d3
   19115/    F8C6 : 6400 0086           		bcc.w	loc_FB92
   19116/    F8CA :                     
   19117/    F8CA :                     loc_FB0E:
   19118/    F8CA : 4A38 F7C8           		tst.b	($FFFFF7C8).w
   19119/    F8CE : 6B00 007E           		bmi.w	loc_FB92
   19120/    F8D2 : 0C38 0006 D024      		cmpi.b	#6,($FFFFD024).w
   19121/    F8D8 : 6400 0074           		bcc.w	loc_FB92
   19122/    F8DC : 4A78 FE08           		tst.w	($FFFFFE08).w
   19123/    F8E0 : 6600 0086           		bne.w	loc_FBAC
   19124/    F8E4 : 3A00                		move.w	d0,d5
   19125/    F8E6 : B240                		cmp.w	d0,d1
   19126/    F8E8 : 6408                		bcc.s	loc_FB36
   19127/    F8EA : D241                		add.w	d1,d1
   19128/    F8EC : 9041                		sub.w	d1,d0
   19129/    F8EE : 3A00                		move.w	d0,d5
   19130/    F8F0 : 4445                		neg.w	d5
   19131/    F8F2 :                     
   19132/    F8F2 :                     loc_FB36:
   19133/    F8F2 : 3203                		move.w	d3,d1
   19134/    F8F4 : B443                		cmp.w	d3,d2
   19135/    F8F6 : 6408                		bcc.s	loc_FB44
   19136/    F8F8 : 5943                		subq.w	#4,d3
   19137/    F8FA : 9644                		sub.w	d4,d3
   19138/    F8FC : 3203                		move.w	d3,d1
   19139/    F8FE : 4441                		neg.w	d1
   19140/    F900 :                     
   19141/    F900 :                     loc_FB44:
   19142/    F900 : BA41                		cmp.w	d1,d5
   19143/    F902 : 6200 0068           		bhi.w	loc_FBB0
   19144/    F906 : 0C41 0004           		cmpi.w	#4,d1
   19145/    F90A : 633C                		bls.s	loc_FB8C
   19146/    F90C : 4A40                		tst.w	d0
   19147/    F90E : 671C                		beq.s	loc_FB70
   19148/    F910 : 6B08                		bmi.s	loc_FB5E
   19149/    F912 : 4A69 0010           		tst.w	$10(a1)
   19150/    F916 : 6B14                		bmi.s	loc_FB70
   19151/    F918 : 6006                		bra.s	loc_FB64
   19152/    F91A :                     ; ===========================================================================
   19153/    F91A :                     
   19154/    F91A :                     loc_FB5E:
   19155/    F91A : 4A69 0010           		tst.w	$10(a1)
   19156/    F91E : 6A0C                		bpl.s	loc_FB70
   19157/    F920 :                     
   19158/    F920 :                     loc_FB64:
   19159/    F920 : 337C 0000 0014      		move.w	#0,$14(a1)	; stop Sonic moving
   19160/    F926 : 337C 0000 0010      		move.w	#0,$10(a1)
   19161/    F92C :                     
   19162/    F92C :                     loc_FB70:
   19163/    F92C : 9169 0008           		sub.w	d0,8(a1)
   19164/    F930 : 0829 0001 0022      		btst	#1,$22(a1)
   19165/    F936 : 6610                		bne.s	loc_FB8C
   19166/    F938 : 08E9 0005 0022      		bset	#5,$22(a1)
   19167/    F93E : 08E8 0005 0022      		bset	#5,$22(a0)
   19168/    F944 : 7801                		moveq	#1,d4
   19169/    F946 : 4E75                		rts	
   19170/    F948 :                     ; ===========================================================================
   19171/    F948 :                     
   19172/    F948 :                     loc_FB8C:
   19173/    F948 : 6112                		bsr.s	loc_FBA0
   19174/    F94A : 7801                		moveq	#1,d4
   19175/    F94C : 4E75                		rts	
   19176/    F94E :                     ; ===========================================================================
   19177/    F94E :                     
   19178/    F94E :                     loc_FB92:
   19179/    F94E : 0828 0005 0022      		btst	#5,$22(a0)
   19180/    F954 : 6712                		beq.s	loc_FBAC
   19181/    F956 : 337C 0001 001C      		move.w	#1,$1C(a1)	; use walking animation
   19182/    F95C :                     
   19183/    F95C :                     loc_FBA0:
   19184/    F95C : 08A8 0005 0022      		bclr	#5,$22(a0)
   19185/    F962 : 08A9 0005 0022      		bclr	#5,$22(a1)
   19186/    F968 :                     
   19187/    F968 :                     loc_FBAC:
   19188/    F968 : 7800                		moveq	#0,d4
   19189/    F96A : 4E75                		rts	
   19190/    F96C :                     ; ===========================================================================
   19191/    F96C :                     
   19192/    F96C :                     loc_FBB0:
   19193/    F96C : 4A43                		tst.w	d3
   19194/    F96E : 6B08                		bmi.s	loc_FBBC
   19195/    F970 : 0C43 0010           		cmpi.w	#$10,d3
   19196/    F974 : 6534                		bcs.s	loc_FBEE
   19197/    F976 : 60D6                		bra.s	loc_FB92
   19198/    F978 :                     ; ===========================================================================
   19199/    F978 :                     
   19200/    F978 :                     loc_FBBC:
   19201/    F978 : 4A69 0012           		tst.w	$12(a1)
   19202/    F97C : 6714                		beq.s	loc_FBD6
   19203/    F97E : 6A0E                		bpl.s	loc_FBD2
   19204/    F980 : 4A43                		tst.w	d3
   19205/    F982 : 6A0A                		bpl.s	loc_FBD2
   19206/    F984 : 9769 000C           		sub.w	d3,$C(a1)
   19207/    F988 : 337C 0000 0012      		move.w	#0,$12(a1)	; stop Sonic moving
   19208/    F98E :                     
   19209/    F98E :                     loc_FBD2:
   19210/    F98E : 78FF                		moveq	#-1,d4
   19211/    F990 : 4E75                		rts	
   19212/    F992 :                     ; ===========================================================================
   19213/    F992 :                     
   19214/    F992 :                     loc_FBD6:
   19215/    F992 : 0829 0001 0022      		btst	#1,$22(a1)
   19216/    F998 : 66F4                		bne.s	loc_FBD2
   19217/    F99A : 2F08                		move.l	a0,-(sp)
   19218/    F99C : 2049                		movea.l	a1,a0
   19219/    F99E : 4EB9 0001 AE60      		jsr	KillSonic
   19220/    F9A4 : 205F                		movea.l	(sp)+,a0
   19221/    F9A6 : 78FF                		moveq	#-1,d4
   19222/    F9A8 : 4E75                		rts	
   19223/    F9AA :                     ; ===========================================================================
   19224/    F9AA :                     
   19225/    F9AA :                     loc_FBEE:
   19226/    F9AA : 5943                		subq.w	#4,d3
   19227/    F9AC : 7200                		moveq	#0,d1
   19228/    F9AE : 1228 0019           		move.b	$19(a0),d1
   19229/    F9B2 : 3401                		move.w	d1,d2
   19230/    F9B4 : D442                		add.w	d2,d2
   19231/    F9B6 : D269 0008           		add.w	8(a1),d1
   19232/    F9BA : 9268 0008           		sub.w	8(a0),d1
   19233/    F9BE : 6B24                		bmi.s	loc_FC28
   19234/    F9C0 : B242                		cmp.w	d2,d1
   19235/    F9C2 : 6420                		bcc.s	loc_FC28
   19236/    F9C4 : 4A69 0012           		tst.w	$12(a1)
   19237/    F9C8 : 6B1A                		bmi.s	loc_FC28
   19238/    F9CA : 9769 000C           		sub.w	d3,$C(a1)
   19239/    F9CE : 5369 000C           		subq.w	#1,$C(a1)
   19240/    F9D2 : 6114                		bsr.s	sub_FC2C
   19241/    F9D4 : 117C 0002 0025      		move.b	#2,$25(a0)
   19242/    F9DA : 08E8 0003 0022      		bset	#3,$22(a0)
   19243/    F9E0 : 78FF                		moveq	#-1,d4
   19244/    F9E2 : 4E75                		rts	
   19245/    F9E4 :                     ; ===========================================================================
   19246/    F9E4 :                     
   19247/    F9E4 :                     loc_FC28:
   19248/    F9E4 : 7800                		moveq	#0,d4
   19249/    F9E6 : 4E75                		rts	
   19250/    F9E8 :                     ; End of function SolidObject
   19251/    F9E8 :                     
   19252/    F9E8 :                     
   19253/    F9E8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   19254/    F9E8 :                     
   19255/    F9E8 :                     
   19256/    F9E8 :                     sub_FC2C:				; XREF: SolidObject
   19257/    F9E8 : 0829 0003 0022      		btst	#3,$22(a1)
   19258/    F9EE : 671A                		beq.s	loc_FC4E
   19259/    F9F0 : 7000                		moveq	#0,d0
   19260/    F9F2 : 1029 003D           		move.b	$3D(a1),d0
   19261/    F9F6 : ED48                		lsl.w	#6,d0
   19262/    F9F8 : 0680 00FF D000      		addi.l	#$FFD000,d0
   19263/    F9FE : 2440                		movea.l	d0,a2
   19264/    FA00 : 08AA 0003 0022      		bclr	#3,$22(a2)
   19265/    FA06 : 422A 0025           		clr.b	$25(a2)
   19266/    FA0A :                     
   19267/    FA0A :                     loc_FC4E:
   19268/    FA0A : 3008                		move.w	a0,d0
   19269/    FA0C : 0440 D000           		subi.w	#-$3000,d0
   19270/    FA10 : EC48                		lsr.w	#6,d0
   19271/    FA12 : 0240 007F           		andi.w	#$7F,d0
   19272/    FA16 : 1340 003D           		move.b	d0,$3D(a1)
   19273/    FA1A : 137C 0000 0026      		move.b	#0,$26(a1)
   19274/    FA20 : 337C 0000 0012      		move.w	#0,$12(a1)
   19275/    FA26 : 3369 0010 0014      		move.w	$10(a1),$14(a1)
   19276/    FA2C : 0829 0001 0022      		btst	#1,$22(a1)
   19277/    FA32 : 670C                		beq.s	loc_FC84
   19278/    FA34 : 2F08                		move.l	a0,-(sp)
   19279/    FA36 : 2049                		movea.l	a1,a0
   19280/    FA38 : 4EB9 0001 3542      		jsr	Sonic_ResetOnFloor
   19281/    FA3E : 205F                		movea.l	(sp)+,a0
   19282/    FA40 :                     
   19283/    FA40 :                     loc_FC84:
   19284/    FA40 : 08E9 0003 0022      		bset	#3,$22(a1)
   19285/    FA46 : 08E8 0003 0022      		bset	#3,$22(a0)
   19286/    FA4C : 4E75                		rts	
   19287/    FA4E :                     ; End of function sub_FC2C
   19288/    FA4E :                     
   19289/    FA4E :                     ; ===========================================================================
   19290/    FA4E :                     ; ---------------------------------------------------------------------------
   19291/    FA4E :                     ; Object 51 - smashable	green block (MZ)
   19292/    FA4E :                     ; ---------------------------------------------------------------------------
   19293/    FA4E :                     
   19294/    FA4E :                     Obj51:					; XREF: Obj_Index
   19295/    FA4E : 7000                		moveq	#0,d0
   19296/    FA50 : 1028 0024           		move.b	$24(a0),d0
   19297/    FA54 : 323B 000A           		move.w	Obj51_Index(pc,d0.w),d1
   19298/    FA58 : 4EBB 1006           		jsr	Obj51_Index(pc,d1.w)
   19299/    FA5C : 6000 FA0C           		bra.w	MarkObjGone
   19300/    FA60 :                     ; ===========================================================================
   19301/    FA60 : 0006                Obj51_Index:	dc.w Obj51_Main-Obj51_Index
   19302/    FA62 : 0030                		dc.w Obj51_Solid-Obj51_Index
   19303/    FA64 : 00FE                		dc.w Obj51_Display-Obj51_Index
   19304/    FA66 :                     ; ===========================================================================
   19305/    FA66 :                     
   19306/    FA66 :                     Obj51_Main:				; XREF: Obj51_Index
   19307/    FA66 : 5428 0024           		addq.b	#2,$24(a0)
   19308/    FA6A : 217C 0000 FB8E      		move.l	#Map_obj51,4(a0)
             FA70 : 0004             
   19309/    FA72 : 317C 42B8 0002      		move.w	#$42B8,2(a0)
   19310/    FA78 : 117C 0004 0001      		move.b	#4,1(a0)
   19311/    FA7E : 117C 0010 0019      		move.b	#$10,$19(a0)
   19312/    FA84 : 117C 0004 0018      		move.b	#4,$18(a0)
   19313/    FA8A : 1168 0028 001A      		move.b	$28(a0),$1A(a0)
   19314/    FA90 :                     
   19315/    FA90 :                     Obj51_Solid:				; XREF: Obj51_Index
   19316/    FA90 : 3178 F7D0 0034      		move.w	($FFFFF7D0).w,$34(a0)
   19317/    FA96 : 1178 D01C 0032      		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
   19318/    FA9C : 323C 001B           		move.w	#$1B,d1
   19319/    FAA0 : 343C 0010           		move.w	#$10,d2
   19320/    FAA4 : 363C 0011           		move.w	#$11,d3
   19321/    FAA8 : 3828 0008           		move.w	8(a0),d4
   19322/    FAAC : 6100 FCE4           		bsr.w	SolidObject
   19323/    FAB0 : 0828 0003 0022      		btst	#3,$22(a0)
   19324/    FAB6 : 6602                		bne.s	Obj51_Smash
   19325/    FAB8 :                     
   19326/    FAB8 :                     locret_FCFC:
   19327/    FAB8 : 4E75                		rts	
   19328/    FABA :                     ; ===========================================================================
   19329/    FABA :                     
   19330/    FABA :                     Obj51_Smash:				; XREF: Obj51_Solid
   19331/    FABA : 0C28 0002 0032      		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
   19332/    FAC0 : 66F6                		bne.s	locret_FCFC	; if not, branch
   19333/    FAC2 : 31E8 0034 F7D0      		move.w	$34(a0),($FFFFF7D0).w
   19334/    FAC8 : 08E9 0002 0022      		bset	#2,$22(a1)
   19335/    FACE : 137C 000E 0016      		move.b	#$E,$16(a1)
   19336/    FAD4 : 137C 0007 0017      		move.b	#7,$17(a1)
   19337/    FADA : 137C 0002 001C      		move.b	#2,$1C(a1)
   19338/    FAE0 : 337C FD00 0012      		move.w	#-$300,$12(a1)	; bounce Sonic upwards
   19339/    FAE6 : 08E9 0001 0022      		bset	#1,$22(a1)
   19340/    FAEC : 08A9 0003 0022      		bclr	#3,$22(a1)
   19341/    FAF2 : 137C 0002 0024      		move.b	#2,$24(a1)
   19342/    FAF8 : 08A8 0003 0022      		bclr	#3,$22(a0)
   19343/    FAFE : 4228 0025           		clr.b	$25(a0)
   19344/    FB02 : 117C 0001 001A      		move.b	#1,$1A(a0)
   19345/    FB08 : 49F9 0000 FB76      		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
   19346/    FB0E : 7203                		moveq	#3,d1		; set number of	fragments to 4
   19347/    FB10 : 343C 0038           		move.w	#$38,d2
   19348/    FB14 : 6100 D4AA           		bsr.w	SmashObject
   19349/    FB18 : 6100 DD3E           		bsr.w	SingleObjLoad
   19350/    FB1C : 6640                		bne.s	Obj51_Display
   19351/    FB1E : 12BC 0029           		move.b	#$29,0(a1)	; load points object
   19352/    FB22 : 3368 0008 0008      		move.w	8(a0),8(a1)
   19353/    FB28 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   19354/    FB2E : 3438 F7D0           		move.w	($FFFFF7D0).w,d2
   19355/    FB32 : 5478 F7D0           		addq.w	#2,($FFFFF7D0).w
   19356/    FB36 : 0C42 0006           		cmpi.w	#6,d2
   19357/    FB3A : 6502                		bcs.s	Obj51_Bonus
   19358/    FB3C : 7406                		moveq	#6,d2
   19359/    FB3E :                     
   19360/    FB3E :                     Obj51_Bonus:
   19361/    FB3E : 7000                		moveq	#0,d0
   19362/    FB40 : 303B 2044           		move.w	Obj51_Points(pc,d2.w),d0
   19363/    FB44 : 0C78 0020 F7D0      		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
   19364/    FB4A : 6506                		bcs.s	loc_FD98	; if not, branch
   19365/    FB4C : 303C 03E8           		move.w	#1000,d0	; give higher points for 16th block
   19366/    FB50 : 740A                		moveq	#10,d2
   19367/    FB52 :                     
   19368/    FB52 :                     loc_FD98:
   19369/    FB52 : 4EB9 0001 C6E8      		jsr	AddPoints
   19370/    FB58 : E24A                		lsr.w	#1,d2
   19371/    FB5A : 1342 001A           		move.b	d2,$1A(a1)
   19372/    FB5E :                     
   19373/    FB5E :                     Obj51_Display:				; XREF: Obj51_Index
   19374/    FB5E : 6100 D84C           		bsr.w	SpeedToPos
   19375/    FB62 : 0668 0038 0012      		addi.w	#$38,$12(a0)
   19376/    FB68 : 6100 D868           		bsr.w	DisplaySprite
   19377/    FB6C : 4A28 0001           		tst.b	1(a0)
   19378/    FB70 : 6A00 D89C           		bpl.w	DeleteObject
   19379/    FB74 : 4E75                		rts	
   19380/    FB76 :                     ; ===========================================================================
   19381/    FB76 : FE00 FE00           Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
   19382/    FB7A : FF00 FF00           		dc.w $FF00, $FF00
   19383/    FB7E : 0200 FE00           		dc.w $200, $FE00
   19384/    FB82 : 0100 FF00           		dc.w $100, $FF00
   19385/    FB86 :                     
   19386/    FB86 : 000A 0014 0032      Obj51_Points:	dc.w 10, 20, 50, 100
             FB8C : 0064             
   19387/    FB8E :                     ; ---------------------------------------------------------------------------
   19388/    FB8E :                     ; Sprite mappings - smashable green block (MZ)
   19389/    FB8E :                     ; ---------------------------------------------------------------------------
   19390/    FB8E :                     Map_obj51:
   19391/    FB8E :                     	include "_mappings/obj51.asm"
(1)    1/    FB8E :                     ; ---------------------------------------------------------------------------
(1)    2/    FB8E :                     ; Sprite mappings - smashable green block (MZ)
(1)    3/    FB8E :                     ; ---------------------------------------------------------------------------
(1)    4/    FB8E : 0004                		dc.w byte_FDD8-Map_obj51
(1)    5/    FB90 : 000F                		dc.w byte_FDE3-Map_obj51
(1)    6/    FB92 : 02                  byte_FDD8:	dc.b 2
(1)    7/    FB93 : F00D 0000 F0        		dc.b $F0, $D, 0, 0, $F0
(1)    8/    FB98 : 000D 0000 F0        		dc.b 0,	$D, 0, 0, $F0
(1)    9/    FB9D : 04                  byte_FDE3:	dc.b 4
(1)   10/    FB9E : F005 8000 F0        		dc.b $F0, 5, $80, 0, $F0
(1)   11/    FBA3 : 0005 8000 F0        		dc.b 0,	5, $80,	0, $F0
(1)   12/    FBA8 : F005 8000 00        		dc.b $F0, 5, $80, 0, 0
(1)   13/    FBAD : 0005 8000 00        		dc.b 0,	5, $80,	0, 0
(1)   14/    FBB2 : (MACRO)              		even
   19392/    FBB2 :                     
   19393/    FBB2 :                     ; ===========================================================================
   19394/    FBB2 :                     ; ---------------------------------------------------------------------------
   19395/    FBB2 :                     ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
   19396/    FBB2 :                     ; ---------------------------------------------------------------------------
   19397/    FBB2 :                     
   19398/    FBB2 :                     Obj52:					; XREF: Obj_Index
   19399/    FBB2 : 7000                		moveq	#0,d0
   19400/    FBB4 : 1028 0024           		move.b	$24(a0),d0
   19401/    FBB8 : 323B 0006           		move.w	Obj52_Index(pc,d0.w),d1
   19402/    FBBC : 4EFB 1002           		jmp	Obj52_Index(pc,d1.w)
   19403/    FBC0 :                     ; ===========================================================================
   19404/    FBC0 : 0010                Obj52_Index:	dc.w Obj52_Main-Obj52_Index
   19405/    FBC2 : 0090                		dc.w Obj52_Platform-Obj52_Index
   19406/    FBC4 : 00A2                		dc.w Obj52_StandOn-Obj52_Index
   19407/    FBC6 :                     
   19408/    FBC6 : 1000                Obj52_Var:	dc.b $10, 0		; object width,	frame number
   19409/    FBC8 : 2001                		dc.b $20, 1
   19410/    FBCA : 2002                		dc.b $20, 2
   19411/    FBCC : 4003                		dc.b $40, 3
   19412/    FBCE : 3004                		dc.b $30, 4
   19413/    FBD0 :                     ; ===========================================================================
   19414/    FBD0 :                     
   19415/    FBD0 :                     Obj52_Main:				; XREF: Obj52_Index
   19416/    FBD0 : 5428 0024           		addq.b	#2,$24(a0)
   19417/    FBD4 : 217C 0000 FE04      		move.l	#Map_obj52,4(a0)
             FBDA : 0004             
   19418/    FBDC : 317C 42B8 0002      		move.w	#$42B8,2(a0)
   19419/    FBE2 : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
   19420/    FBE8 : 6614                		bne.s	loc_FE44
   19421/    FBEA : 217C 0000 FE5A      		move.l	#Map_obj52a,4(a0) ; LZ specific	code
             FBF0 : 0004             
   19422/    FBF2 : 317C 43BC 0002      		move.w	#$43BC,2(a0)
   19423/    FBF8 : 117C 0007 0016      		move.b	#7,$16(a0)
   19424/    FBFE :                     
   19425/    FBFE :                     loc_FE44:
   19426/    FBFE : 0C38 0005 FE10      		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
   19427/    FC04 : 6614                		bne.s	loc_FE60
   19428/    FC06 : 317C 22C0 0002      		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
   19429/    FC0C : 0C28 0028 0028      		cmpi.b	#$28,$28(a0)	; is object 5228 ?
   19430/    FC12 : 6706                		beq.s	loc_FE60	; if yes, branch
   19431/    FC14 : 317C 4460 0002      		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
   19432/    FC1A :                     
   19433/    FC1A :                     loc_FE60:
   19434/    FC1A : 117C 0004 0001      		move.b	#4,1(a0)
   19435/    FC20 : 7000                		moveq	#0,d0
   19436/    FC22 : 1028 0028           		move.b	$28(a0),d0
   19437/    FC26 : E648                		lsr.w	#3,d0
   19438/    FC28 : 0240 001E           		andi.w	#$1E,d0
   19439/    FC2C : 45FB 0098           		lea	Obj52_Var(pc,d0.w),a2
   19440/    FC30 : 115A 0019           		move.b	(a2)+,$19(a0)
   19441/    FC34 : 115A 001A           		move.b	(a2)+,$1A(a0)
   19442/    FC38 : 117C 0004 0018      		move.b	#4,$18(a0)
   19443/    FC3E : 3168 0008 0030      		move.w	8(a0),$30(a0)
   19444/    FC44 : 3168 000C 0032      		move.w	$C(a0),$32(a0)
   19445/    FC4A : 0228 000F 0028      		andi.b	#$F,$28(a0)
   19446/    FC50 :                     
   19447/    FC50 :                     Obj52_Platform:				; XREF: Obj52_Index
   19448/    FC50 : 6100 004E           		bsr.w	Obj52_Move
   19449/    FC54 : 7200                		moveq	#0,d1
   19450/    FC56 : 1228 0019           		move.b	$19(a0),d1
   19451/    FC5A : 4EB9 0000 725C      		jsr	(PlatformObject).l
   19452/    FC60 : 601C                		bra.s	Obj52_ChkDel
   19453/    FC62 :                     ; ===========================================================================
   19454/    FC62 :                     
   19455/    FC62 :                     Obj52_StandOn:				; XREF: Obj52_Index
   19456/    FC62 : 7200                		moveq	#0,d1
   19457/    FC64 : 1228 0019           		move.b	$19(a0),d1
   19458/    FC68 : 4EB9 0000 73D0      		jsr	(ExitPlatform).l
   19459/    FC6E : 3F28 0008           		move.w	8(a0),-(sp)
   19460/    FC72 : 6100 002C           		bsr.w	Obj52_Move
   19461/    FC76 : 341F                		move.w	(sp)+,d2
   19462/    FC78 : 4EB9 0000 793A      		jsr	(MvSonicOnPtfm2).l
   19463/    FC7E :                     
   19464/    FC7E :                     Obj52_ChkDel:				; XREF: Obj52_Platform
   19465/    FC7E : 3028 0030           		move.w	$30(a0),d0
   19466/    FC82 : 0240 FF80           		andi.w	#$FF80,d0
   19467/    FC86 : 3238 F700           		move.w	($FFFFF700).w,d1
   19468/    FC8A : 0441 0080           		subi.w	#$80,d1
   19469/    FC8E : 0241 FF80           		andi.w	#$FF80,d1
   19470/    FC92 : 9041                		sub.w	d1,d0
   19471/    FC94 : 0C40 0280           		cmpi.w	#$280,d0
   19472/    FC98 : 6200 D774           		bhi.w	DeleteObject
   19473/    FC9C : 6000 D734           		bra.w	DisplaySprite
   19474/    FCA0 :                     ; ===========================================================================
   19475/    FCA0 :                     
   19476/    FCA0 :                     Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
   19477/    FCA0 : 7000                		moveq	#0,d0
   19478/    FCA2 : 1028 0028           		move.b	$28(a0),d0
   19479/    FCA6 : 0240 000F           		andi.w	#$F,d0
   19480/    FCAA : D040                		add.w	d0,d0
   19481/    FCAC : 323B 0006           		move.w	Obj52_TypeIndex(pc,d0.w),d1
   19482/    FCB0 : 4EFB 1002           		jmp	Obj52_TypeIndex(pc,d1.w)
   19483/    FCB4 :                     ; ===========================================================================
   19484/    FCB4 : 0016 0018           Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
   19485/    FCB8 : 0038 0046           		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
   19486/    FCBC : 0038 0066           		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
   19487/    FCC0 : 0086 00A8           		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
   19488/    FCC4 : 00D4 0038           		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
   19489/    FCC8 : 00F4                		dc.w Obj52_Type0A-Obj52_TypeIndex
   19490/    FCCA :                     ; ===========================================================================
   19491/    FCCA :                     
   19492/    FCCA :                     Obj52_Type00:				; XREF: Obj52_TypeIndex
   19493/    FCCA : 4E75                		rts	
   19494/    FCCC :                     ; ===========================================================================
   19495/    FCCC :                     
   19496/    FCCC :                     Obj52_Type01:				; XREF: Obj52_TypeIndex
   19497/    FCCC : 1038 FE6C           		move.b	($FFFFFE6C).w,d0
   19498/    FCD0 : 323C 0060           		move.w	#$60,d1
   19499/    FCD4 : 0828 0000 0022      		btst	#0,$22(a0)
   19500/    FCDA : 6704                		beq.s	loc_FF26
   19501/    FCDC : 4440                		neg.w	d0
   19502/    FCDE : D041                		add.w	d1,d0
   19503/    FCE0 :                     
   19504/    FCE0 :                     loc_FF26:
   19505/    FCE0 : 3228 0030           		move.w	$30(a0),d1
   19506/    FCE4 : 9240                		sub.w	d0,d1
   19507/    FCE6 : 3141 0008           		move.w	d1,8(a0)
   19508/    FCEA : 4E75                		rts	
   19509/    FCEC :                     ; ===========================================================================
   19510/    FCEC :                     
   19511/    FCEC :                     Obj52_Type02:				; XREF: Obj52_TypeIndex
   19512/    FCEC : 0C28 0004 0024      		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
   19513/    FCF2 : 6604                		bne.s	Obj52_02_Wait
   19514/    FCF4 : 5228 0028           		addq.b	#1,$28(a0)	; if yes, add 1	to type
   19515/    FCF8 :                     
   19516/    FCF8 :                     Obj52_02_Wait:
   19517/    FCF8 : 4E75                		rts	
   19518/    FCFA :                     ; ===========================================================================
   19519/    FCFA :                     
   19520/    FCFA :                     Obj52_Type03:				; XREF: Obj52_TypeIndex
   19521/    FCFA : 7600                		moveq	#0,d3
   19522/    FCFC : 1628 0019           		move.b	$19(a0),d3
   19523/    FD00 : 6100 4FC8           		bsr.w	ObjHitWallRight
   19524/    FD04 : 4A41                		tst.w	d1		; has the platform hit a wall?
   19525/    FD06 : 6B0C                		bmi.s	Obj52_03_End	; if yes, branch
   19526/    FD08 : 5268 0008           		addq.w	#1,8(a0)	; move platform	to the right
   19527/    FD0C : 3168 0008 0030      		move.w	8(a0),$30(a0)
   19528/    FD12 : 4E75                		rts	
   19529/    FD14 :                     ; ===========================================================================
   19530/    FD14 :                     
   19531/    FD14 :                     Obj52_03_End:
   19532/    FD14 : 4228 0028           		clr.b	$28(a0)		; change to type 00 (non-moving	type)
   19533/    FD18 : 4E75                		rts	
   19534/    FD1A :                     ; ===========================================================================
   19535/    FD1A :                     
   19536/    FD1A :                     Obj52_Type05:				; XREF: Obj52_TypeIndex
   19537/    FD1A : 7600                		moveq	#0,d3
   19538/    FD1C : 1628 0019           		move.b	$19(a0),d3
   19539/    FD20 : 6100 4FA8           		bsr.w	ObjHitWallRight
   19540/    FD24 : 4A41                		tst.w	d1		; has the platform hit a wall?
   19541/    FD26 : 6B0C                		bmi.s	Obj52_05_End	; if yes, branch
   19542/    FD28 : 5268 0008           		addq.w	#1,8(a0)	; move platform	to the right
   19543/    FD2C : 3168 0008 0030      		move.w	8(a0),$30(a0)
   19544/    FD32 : 4E75                		rts	
   19545/    FD34 :                     ; ===========================================================================
   19546/    FD34 :                     
   19547/    FD34 :                     Obj52_05_End:
   19548/    FD34 : 5228 0028           		addq.b	#1,$28(a0)	; change to type 06 (falling)
   19549/    FD38 : 4E75                		rts	
   19550/    FD3A :                     ; ===========================================================================
   19551/    FD3A :                     
   19552/    FD3A :                     Obj52_Type06:				; XREF: Obj52_TypeIndex
   19553/    FD3A : 6100 D670           		bsr.w	SpeedToPos
   19554/    FD3E : 0668 0018 0012      		addi.w	#$18,$12(a0)	; make the platform fall
   19555/    FD44 : 6100 4EC2           		bsr.w	ObjHitFloor
   19556/    FD48 : 4A41                		tst.w	d1		; has platform hit the floor?
   19557/    FD4A : 6A00 000E           		bpl.w	locret_FFA0	; if not, branch
   19558/    FD4E : D368 000C           		add.w	d1,$C(a0)
   19559/    FD52 : 4268 0012           		clr.w	$12(a0)		; stop platform	falling
   19560/    FD56 : 4228 0028           		clr.b	$28(a0)		; change to type 00 (non-moving)
   19561/    FD5A :                     
   19562/    FD5A :                     locret_FFA0:
   19563/    FD5A : 4E75                		rts	
   19564/    FD5C :                     ; ===========================================================================
   19565/    FD5C :                     
   19566/    FD5C :                     Obj52_Type07:				; XREF: Obj52_TypeIndex
   19567/    FD5C : 4A38 F7E2           		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
   19568/    FD60 : 6704                		beq.s	Obj52_07_ChkDel
   19569/    FD62 : 5728 0028           		subq.b	#3,$28(a0)	; if yes, change object	type to	04
   19570/    FD66 :                     
   19571/    FD66 :                     Obj52_07_ChkDel:
   19572/    FD66 : 588F                		addq.l	#4,sp
   19573/    FD68 : 3028 0030           		move.w	$30(a0),d0
   19574/    FD6C : 0240 FF80           		andi.w	#$FF80,d0
   19575/    FD70 : 3238 F700           		move.w	($FFFFF700).w,d1
   19576/    FD74 : 0441 0080           		subi.w	#$80,d1
   19577/    FD78 : 0241 FF80           		andi.w	#$FF80,d1
   19578/    FD7C : 9041                		sub.w	d1,d0
   19579/    FD7E : 0C40 0280           		cmpi.w	#$280,d0
   19580/    FD82 : 6200 D68A           		bhi.w	DeleteObject
   19581/    FD86 : 4E75                		rts	
   19582/    FD88 :                     ; ===========================================================================
   19583/    FD88 :                     
   19584/    FD88 :                     Obj52_Type08:				; XREF: Obj52_TypeIndex
   19585/    FD88 : 1038 FE7C           		move.b	($FFFFFE7C).w,d0
   19586/    FD8C : 323C 0080           		move.w	#$80,d1
   19587/    FD90 : 0828 0000 0022      		btst	#0,$22(a0)
   19588/    FD96 : 6704                		beq.s	loc_FFE2
   19589/    FD98 : 4440                		neg.w	d0
   19590/    FD9A : D041                		add.w	d1,d0
   19591/    FD9C :                     
   19592/    FD9C :                     loc_FFE2:
   19593/    FD9C : 3228 0032           		move.w	$32(a0),d1
   19594/    FDA0 : 9240                		sub.w	d0,d1
   19595/    FDA2 : 3141 000C           		move.w	d1,$C(a0)
   19596/    FDA6 : 4E75                		rts	
   19597/    FDA8 :                     ; ===========================================================================
   19598/    FDA8 :                     
   19599/    FDA8 :                     Obj52_Type0A:				; XREF: Obj52_TypeIndex
   19600/    FDA8 : 7600                		moveq	#0,d3
   19601/    FDAA : 1628 0019           		move.b	$19(a0),d3
   19602/    FDAE : D643                		add.w	d3,d3
   19603/    FDB0 : 7208                		moveq	#8,d1
   19604/    FDB2 : 0828 0000 0022      		btst	#0,$22(a0)
   19605/    FDB8 : 6704                		beq.s	loc_10004
   19606/    FDBA : 4441                		neg.w	d1
   19607/    FDBC : 4443                		neg.w	d3
   19608/    FDBE :                     
   19609/    FDBE :                     loc_10004:
   19610/    FDBE : 4A68 0036           		tst.w	$36(a0)		; is platform set to move back?
   19611/    FDC2 : 6626                		bne.s	Obj52_0A_Back	; if yes, branch
   19612/    FDC4 : 3028 0008           		move.w	8(a0),d0
   19613/    FDC8 : 9068 0030           		sub.w	$30(a0),d0
   19614/    FDCC : B043                		cmp.w	d3,d0
   19615/    FDCE : 670C                		beq.s	Obj52_0A_Wait
   19616/    FDD0 : D368 0008           		add.w	d1,8(a0)	; move platform
   19617/    FDD4 : 317C 012C 0034      		move.w	#300,$34(a0)	; set time delay to 5 seconds
   19618/    FDDA : 4E75                		rts	
   19619/    FDDC :                     ; ===========================================================================
   19620/    FDDC :                     
   19621/    FDDC :                     Obj52_0A_Wait:
   19622/    FDDC : 5368 0034           		subq.w	#1,$34(a0)	; subtract 1 from time delay
   19623/    FDE0 : 6606                		bne.s	locret_1002E	; if time remains, branch
   19624/    FDE2 : 317C 0001 0036      		move.w	#1,$36(a0)	; set platform to move back to its original position
   19625/    FDE8 :                     
   19626/    FDE8 :                     locret_1002E:
   19627/    FDE8 : 4E75                		rts	
   19628/    FDEA :                     ; ===========================================================================
   19629/    FDEA :                     
   19630/    FDEA :                     Obj52_0A_Back:
   19631/    FDEA : 3028 0008           		move.w	8(a0),d0
   19632/    FDEE : 9068 0030           		sub.w	$30(a0),d0
   19633/    FDF2 : 6706                		beq.s	Obj52_0A_Reset
   19634/    FDF4 : 9368 0008           		sub.w	d1,8(a0)	; return platform to its original position
   19635/    FDF8 : 4E75                		rts	
   19636/    FDFA :                     ; ===========================================================================
   19637/    FDFA :                     
   19638/    FDFA :                     Obj52_0A_Reset:
   19639/    FDFA : 4268 0036           		clr.w	$36(a0)
   19640/    FDFE : 5328 0028           		subq.b	#1,$28(a0)
   19641/    FE02 : 4E75                		rts	
   19642/    FE04 :                     ; ===========================================================================
   19643/    FE04 :                     ; ---------------------------------------------------------------------------
   19644/    FE04 :                     ; Sprite mappings - moving blocks (MZ, SBZ)
   19645/    FE04 :                     ; ---------------------------------------------------------------------------
   19646/    FE04 :                     Map_obj52:
   19647/    FE04 :                     	include "_mappings/obj52mz.asm"
(1)    1/    FE04 :                     ; ---------------------------------------------------------------------------
(1)    2/    FE04 :                     ; Sprite mappings - moving blocks (MZ, SBZ)
(1)    3/    FE04 :                     ; ---------------------------------------------------------------------------
(1)    4/    FE04 : 000A 0010           		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
(1)    5/    FE08 : 001B 0030           		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
(1)    6/    FE0C : 0045                		dc.w byte_1008F-Map_obj52
(1)    7/    FE0E : 01                  byte_10054:	dc.b 1
(1)    8/    FE0F : F80F 0008 F0        		dc.b $F8, $F, 0, 8, $F0
(1)    9/    FE14 : 02                  byte_1005A:	dc.b 2
(1)   10/    FE15 : F80F 0008 E0        		dc.b $F8, $F, 0, 8, $E0
(1)   11/    FE1A : F80F 0008 00        		dc.b $F8, $F, 0, 8, 0
(1)   12/    FE1F : 04                  byte_10065:	dc.b 4
(1)   13/    FE20 : F80C 2000 E0        		dc.b $F8, $C, $20, 0, $E0
(1)   14/    FE25 : 000D 0004 E0        		dc.b 0,	$D, 0, 4, $E0
(1)   15/    FE2A : F80C 2000 00        		dc.b $F8, $C, $20, 0, 0
(1)   16/    FE2F : 000D 0004 00        		dc.b 0,	$D, 0, 4, 0
(1)   17/    FE34 : 04                  byte_1007A:	dc.b 4
(1)   18/    FE35 : F80E 0000 C0        		dc.b $F8, $E, 0, 0, $C0
(1)   19/    FE3A : F80E 0003 E0        		dc.b $F8, $E, 0, 3, $E0
(1)   20/    FE3F : F80E 0003 00        		dc.b $F8, $E, 0, 3, 0
(1)   21/    FE44 : F80E 0800 20        		dc.b $F8, $E, 8, 0, $20
(1)   22/    FE49 : 03                  byte_1008F:	dc.b 3
(1)   23/    FE4A : F80F 0008 D0        		dc.b $F8, $F, 0, 8, $D0
(1)   24/    FE4F : F80F 0008 F0        		dc.b $F8, $F, 0, 8, $F0
(1)   25/    FE54 : F80F 0008 10        		dc.b $F8, $F, 0, 8, $10
(1)   26/    FE59 : (MACRO)              		even
(1)   26/    FE59 : 00                                          dc.b 0 ;ds.b 1 
   19648/    FE5A :                     
   19649/    FE5A :                     ; ---------------------------------------------------------------------------
   19650/    FE5A :                     ; Sprite mappings - moving block (LZ)
   19651/    FE5A :                     ; ---------------------------------------------------------------------------
   19652/    FE5A :                     Map_obj52a:
   19653/    FE5A :                     	include "_mappings/obj52lz.asm"
(1)    1/    FE5A :                     ; ---------------------------------------------------------------------------
(1)    2/    FE5A :                     ; Sprite mappings - moving block (LZ)
(1)    3/    FE5A :                     ; ---------------------------------------------------------------------------
(1)    4/    FE5A : 0002                		dc.w byte_100A2-Map_obj52a
(1)    5/    FE5C : 01                  byte_100A2:	dc.b 1
(1)    6/    FE5D : F80D 0000 F0        		dc.b $F8, $D, 0, 0, $F0
(1)    7/    FE62 : (MACRO)              		even
   19654/    FE62 :                     
   19655/    FE62 :                     ; ===========================================================================
   19656/    FE62 :                     ; ---------------------------------------------------------------------------
   19657/    FE62 :                     ; Object 55 - Basaran enemy (MZ)
   19658/    FE62 :                     ; ---------------------------------------------------------------------------
   19659/    FE62 :                     
   19660/    FE62 :                     Obj55:					; XREF: Obj_Index
   19661/    FE62 : 7000                		moveq	#0,d0
   19662/    FE64 : 1028 0024           		move.b	$24(a0),d0
   19663/    FE68 : 323B 0006           		move.w	Obj55_Index(pc,d0.w),d1
   19664/    FE6C : 4EFB 1002           		jmp	Obj55_Index(pc,d1.w)
   19665/    FE70 :                     ; ===========================================================================
   19666/    FE70 : 0004                Obj55_Index:	dc.w Obj55_Main-Obj55_Index
   19667/    FE72 : 0034                		dc.w Obj55_Action-Obj55_Index
   19668/    FE74 :                     ; ===========================================================================
   19669/    FE74 :                     
   19670/    FE74 :                     Obj55_Main:				; XREF: Obj55_Index
   19671/    FE74 : 5428 0024           		addq.b	#2,$24(a0)
   19672/    FE78 : 217C 0000 FFF8      		move.l	#Map_obj55,4(a0)
             FE7E : 0004             
   19673/    FE80 : 317C 84B8 0002      		move.w	#$84B8,2(a0)
   19674/    FE86 : 117C 0004 0001      		move.b	#4,1(a0)
   19675/    FE8C : 117C 000C 0016      		move.b	#$C,$16(a0)
   19676/    FE92 : 117C 0002 0018      		move.b	#2,$18(a0)
   19677/    FE98 : 117C 000B 0020      		move.b	#$B,$20(a0)
   19678/    FE9E : 117C 0010 0019      		move.b	#$10,$19(a0)
   19679/    FEA4 :                     
   19680/    FEA4 :                     Obj55_Action:				; XREF: Obj55_Index
   19681/    FEA4 : 7000                		moveq	#0,d0
   19682/    FEA6 : 1028 0025           		move.b	$25(a0),d0
   19683/    FEAA : 323B 0014           		move.w	Obj55_Index2(pc,d0.w),d1
   19684/    FEAE : 4EBB 1010           		jsr	Obj55_Index2(pc,d1.w)
   19685/    FEB2 : 43F9 0000 FFE4      		lea	(Ani_obj55).l,a1
   19686/    FEB8 : 6100 A644           		bsr.w	AnimateSprite
   19687/    FEBC : 6000 F5AC           		bra.w	MarkObjGone
   19688/    FEC0 :                     ; ===========================================================================
   19689/    FEC0 : 0008                Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
   19690/    FEC2 : 0044                		dc.w Obj55_DropFly-Obj55_Index2
   19691/    FEC4 : 0086                		dc.w Obj55_PlaySnd-Obj55_Index2
   19692/    FEC6 : 00C2                		dc.w Obj55_FlyUp-Obj55_Index2
   19693/    FEC8 :                     ; ===========================================================================
   19694/    FEC8 :                     
   19695/    FEC8 :                     Obj55_ChkDrop:				; XREF: Obj55_Index2
   19696/    FEC8 : 343C 0080           		move.w	#$80,d2
   19697/    FECC : 6100 00E2           		bsr.w	Obj55_ChkSonic
   19698/    FED0 : 6430                		bcc.s	Obj55_NoDrop
   19699/    FED2 : 3038 D00C           		move.w	($FFFFD00C).w,d0
   19700/    FED6 : 3140 0036           		move.w	d0,$36(a0)
   19701/    FEDA : 9068 000C           		sub.w	$C(a0),d0
   19702/    FEDE : 6522                		bcs.s	Obj55_NoDrop
   19703/    FEE0 : 0C40 0080           		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
   19704/    FEE4 : 641C                		bcc.s	Obj55_NoDrop	; if not, branch
   19705/    FEE6 : 4A78 FE08           		tst.w	($FFFFFE08).w	; is debug mode	on?
   19706/    FEEA : 6616                		bne.s	Obj55_NoDrop	; if yes, branch
   19707/    FEEC : 1038 FE0F           		move.b	($FFFFFE0F).w,d0
   19708/    FEF0 : D007                		add.b	d7,d0
   19709/    FEF2 : 0200 0007           		andi.b	#7,d0
   19710/    FEF6 : 660A                		bne.s	Obj55_NoDrop
   19711/    FEF8 : 117C 0001 001C      		move.b	#1,$1C(a0)
   19712/    FEFE : 5428 0025           		addq.b	#2,$25(a0)
   19713/    FF02 :                     
   19714/    FF02 :                     Obj55_NoDrop:
   19715/    FF02 : 4E75                		rts	
   19716/    FF04 :                     ; ===========================================================================
   19717/    FF04 :                     
   19718/    FF04 :                     Obj55_DropFly:				; XREF: Obj55_Index2
   19719/    FF04 : 6100 D4A6           		bsr.w	SpeedToPos
   19720/    FF08 : 0668 0018 0012      		addi.w	#$18,$12(a0)	; make basaran fall
   19721/    FF0E : 343C 0080           		move.w	#$80,d2
   19722/    FF12 : 6100 009C           		bsr.w	Obj55_ChkSonic
   19723/    FF16 : 3028 0036           		move.w	$36(a0),d0
   19724/    FF1A : 9068 000C           		sub.w	$C(a0),d0
   19725/    FF1E : 651C                		bcs.s	Obj55_ChkDel
   19726/    FF20 : 0C40 0010           		cmpi.w	#$10,d0
   19727/    FF24 : 6414                		bcc.s	locret_10180
   19728/    FF26 : 3141 0010           		move.w	d1,$10(a0)	; make basaran fly horizontally
   19729/    FF2A : 317C 0000 0012      		move.w	#0,$12(a0)	; stop basaran falling
   19730/    FF30 : 117C 0002 001C      		move.b	#2,$1C(a0)
   19731/    FF36 : 5428 0025           		addq.b	#2,$25(a0)
   19732/    FF3A :                     
   19733/    FF3A :                     locret_10180:
   19734/    FF3A : 4E75                		rts	
   19735/    FF3C :                     ; ===========================================================================
   19736/    FF3C :                     
   19737/    FF3C :                     Obj55_ChkDel:				; XREF: Obj55_DropFly
   19738/    FF3C : 4A28 0001           		tst.b	1(a0)
   19739/    FF40 : 6A00 D4CC           		bpl.w	DeleteObject
   19740/    FF44 : 4E75                		rts	
   19741/    FF46 :                     ; ===========================================================================
   19742/    FF46 :                     
   19743/    FF46 :                     Obj55_PlaySnd:				; XREF: Obj55_Index2
   19744/    FF46 : 1038 FE0F           		move.b	($FFFFFE0F).w,d0
   19745/    FF4A : 0200 000F           		andi.b	#$F,d0
   19746/    FF4E : 660A                		bne.s	loc_101A0
   19747/    FF50 : 303C 00C0           		move.w	#$C0,d0
   19748/    FF54 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play flapping sound
   19749/    FF5A :                     
   19750/    FF5A :                     loc_101A0:
   19751/    FF5A : 6100 D450           		bsr.w	SpeedToPos
   19752/    FF5E : 3038 D008           		move.w	($FFFFD008).w,d0
   19753/    FF62 : 9068 0008           		sub.w	8(a0),d0
   19754/    FF66 : 6402                		bcc.s	loc_101B0
   19755/    FF68 : 4440                		neg.w	d0
   19756/    FF6A :                     
   19757/    FF6A :                     loc_101B0:
   19758/    FF6A : 0C40 0080           		cmpi.w	#$80,d0
   19759/    FF6E : 6510                		bcs.s	locret_101C6
   19760/    FF70 : 1038 FE0F           		move.b	($FFFFFE0F).w,d0
   19761/    FF74 : D007                		add.b	d7,d0
   19762/    FF76 : 0200 0007           		andi.b	#7,d0
   19763/    FF7A : 6604                		bne.s	locret_101C6
   19764/    FF7C : 5428 0025           		addq.b	#2,$25(a0)
   19765/    FF80 :                     
   19766/    FF80 :                     locret_101C6:
   19767/    FF80 : 4E75                		rts	
   19768/    FF82 :                     ; ===========================================================================
   19769/    FF82 :                     
   19770/    FF82 :                     Obj55_FlyUp:				; XREF: Obj55_Index2
   19771/    FF82 : 6100 D428           		bsr.w	SpeedToPos
   19772/    FF86 : 0468 0018 0012      		subi.w	#$18,$12(a0)	; make basaran fly upwards
   19773/    FF8C : 6100 4E00           		bsr.w	ObjHitCeiling
   19774/    FF90 : 4A41                		tst.w	d1		; has basaran hit the ceiling?
   19775/    FF92 : 6A1A                		bpl.s	locret_101F4	; if not, branch
   19776/    FF94 : 9368 000C           		sub.w	d1,$C(a0)
   19777/    FF98 : 0268 FFF8 0008      		andi.w	#$FFF8,8(a0)
   19778/    FF9E : 4268 0010           		clr.w	$10(a0)		; stop basaran moving
   19779/    FFA2 : 4268 0012           		clr.w	$12(a0)
   19780/    FFA6 : 4228 001C           		clr.b	$1C(a0)
   19781/    FFAA : 4228 0025           		clr.b	$25(a0)
   19782/    FFAE :                     
   19783/    FFAE :                     locret_101F4:
   19784/    FFAE : 4E75                		rts	
   19785/    FFB0 :                     ; ===========================================================================
   19786/    FFB0 :                     
   19787/    FFB0 :                     Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
   19788/    FFB0 : 323C 0100           		move.w	#$100,d1
   19789/    FFB4 : 08E8 0000 0022      		bset	#0,$22(a0)
   19790/    FFBA : 3038 D008           		move.w	($FFFFD008).w,d0
   19791/    FFBE : 9068 0008           		sub.w	8(a0),d0
   19792/    FFC2 : 640A                		bcc.s	loc_10214
   19793/    FFC4 : 4440                		neg.w	d0
   19794/    FFC6 : 4441                		neg.w	d1
   19795/    FFC8 : 08A8 0000 0022      		bclr	#0,$22(a0)
   19796/    FFCE :                     
   19797/    FFCE :                     loc_10214:
   19798/    FFCE : B042                		cmp.w	d2,d0
   19799/    FFD0 : 4E75                		rts	
   19800/    FFD2 :                     ; ===========================================================================
   19801/    FFD2 : 6100 D3D8           		bsr.w	SpeedToPos
   19802/    FFD6 : 6100 D3FA           		bsr.w	DisplaySprite
   19803/    FFDA : 4A28 0001           		tst.b	1(a0)
   19804/    FFDE : 6A00 D42E           		bpl.w	DeleteObject
   19805/    FFE2 : 4E75                		rts	
   19806/    FFE4 :                     ; ===========================================================================
   19807/    FFE4 :                     Ani_obj55:
   19808/    FFE4 :                     	include "_animations/obj55.asm"
(1)    1/    FFE4 :                     ; ---------------------------------------------------------------------------
(1)    2/    FFE4 :                     ; Animation script - Basaran enemy
(1)    3/    FFE4 :                     ; ---------------------------------------------------------------------------
(1)    4/    FFE4 : 0006                		dc.w byte_10230-Ani_obj55
(1)    5/    FFE6 : 000A                		dc.w byte_10234-Ani_obj55
(1)    6/    FFE8 : 000E                		dc.w byte_10238-Ani_obj55
(1)    7/    FFEA : 0F00 FF00           byte_10230:	dc.b $F, 0, $FF, 0
(1)    8/    FFEE : 0F01 FF00           byte_10234:	dc.b $F, 1, $FF, 0
(1)    9/    FFF2 : 0301 0203 02FF      byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
(1)   10/    FFF8 : (MACRO)              		even
   19809/    FFF8 :                     
   19810/    FFF8 :                     ; ---------------------------------------------------------------------------
   19811/    FFF8 :                     ; Sprite mappings - Basaran enemy (MZ)
   19812/    FFF8 :                     ; ---------------------------------------------------------------------------
   19813/    FFF8 :                     Map_obj55:
   19814/    FFF8 :                     	include "_mappings/obj55.asm"
(1)    1/    FFF8 :                     ; ---------------------------------------------------------------------------
(1)    2/    FFF8 :                     ; Sprite mappings - Basaran enemy (MZ)
(1)    3/    FFF8 :                     ; ---------------------------------------------------------------------------
(1)    4/    FFF8 : 0008 000E           		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
(1)    5/    FFFC : 001E 0033           		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
(1)    6/   10000 : 01                  byte_10246:	dc.b 1
(1)    7/   10001 : F406 0000 F8        		dc.b $F4, 6, 0,	0, $F8
(1)    8/   10006 : 03                  byte_1024C:	dc.b 3
(1)    9/   10007 : F20E 0006 F4        		dc.b $F2, $E, 0, 6, $F4
(1)   10/   1000C : 0A04 0012 FC        		dc.b $A, 4, 0, $12, $FC
(1)   11/   10011 : 0200 0027 0C        		dc.b 2,	0, 0, $27, $C
(1)   12/   10016 : 04                  byte_1025C:	dc.b 4
(1)   13/   10017 : F804 0014 F8        		dc.b $F8, 4, 0,	$14, $F8
(1)   14/   1001C : 000C 0016 F0        		dc.b 0,	$C, 0, $16, $F0
(1)   15/   10021 : 0804 001A 00        		dc.b 8,	4, 0, $1A, 0
(1)   16/   10026 : 0000 0028 0C        		dc.b 0,	0, 0, $28, $C
(1)   17/   1002B : 04                  byte_10271:	dc.b 4
(1)   18/   1002C : F609 001C F5        		dc.b $F6, 9, 0,	$1C, $F5
(1)   19/   10031 : 0608 0022 F4        		dc.b 6,	8, 0, $22, $F4
(1)   20/   10036 : 0E04 0025 F4        		dc.b $E, 4, 0, $25, $F4
(1)   21/   1003B : FE00 0027 0C        		dc.b $FE, 0, 0,	$27, $C
(1)   22/   10040 : (MACRO)              		even
   19815/   10040 :                     
   19816/   10040 :                     ; ===========================================================================
   19817/   10040 :                     ; ---------------------------------------------------------------------------
   19818/   10040 :                     ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
   19819/   10040 :                     ; ---------------------------------------------------------------------------
   19820/   10040 :                     
   19821/   10040 :                     Obj56:					; XREF: Obj_Index
   19822/   10040 : 7000                		moveq	#0,d0
   19823/   10042 : 1028 0024           		move.b	$24(a0),d0
   19824/   10046 : 323B 0006           		move.w	Obj56_Index(pc,d0.w),d1
   19825/   1004A : 4EFB 1002           		jmp	Obj56_Index(pc,d1.w)
   19826/   1004E :                     ; ===========================================================================
   19827/   1004E : 0014                Obj56_Index:	dc.w Obj56_Main-Obj56_Index
   19828/   10050 : 00E8                		dc.w Obj56_Action-Obj56_Index
   19829/   10052 :                     
   19830/   10052 : 1010                Obj56_Var:	dc.b  $10, $10		; width, height
   19831/   10054 : 2020                		dc.b  $20, $20
   19832/   10056 : 1020                		dc.b  $10, $20
   19833/   10058 : 201A                		dc.b  $20, $1A
   19834/   1005A : 1027                		dc.b  $10, $27
   19835/   1005C : 1010                		dc.b  $10, $10
   19836/   1005E : 0820                		dc.b	8, $20
   19837/   10060 : 4010                		dc.b  $40, $10
   19838/   10062 :                     ; ===========================================================================
   19839/   10062 :                     
   19840/   10062 :                     Obj56_Main:				; XREF: Obj56_Index
   19841/   10062 : 5428 0024           		addq.b	#2,$24(a0)
   19842/   10066 : 217C 0001 04BA      		move.l	#Map_obj56,4(a0)
            1006C : 0004             
   19843/   1006E : 317C 4000 0002      		move.w	#$4000,2(a0)
   19844/   10074 : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
   19845/   1007A : 6606                		bne.s	loc_102C8
   19846/   1007C : 317C 43C4 0002      		move.w	#$43C4,2(a0)	; LZ specific code
   19847/   10082 :                     
   19848/   10082 :                     loc_102C8:
   19849/   10082 : 117C 0004 0001      		move.b	#4,1(a0)
   19850/   10088 : 117C 0003 0018      		move.b	#3,$18(a0)
   19851/   1008E : 7000                		moveq	#0,d0
   19852/   10090 : 1028 0028           		move.b	$28(a0),d0
   19853/   10094 : E648                		lsr.w	#3,d0
   19854/   10096 : 0240 000E           		andi.w	#$E,d0
   19855/   1009A : 45FB 00B6           		lea	Obj56_Var(pc,d0.w),a2
   19856/   1009E : 115A 0019           		move.b	(a2)+,$19(a0)
   19857/   100A2 : 1152 0016           		move.b	(a2),$16(a0)
   19858/   100A6 : E248                		lsr.w	#1,d0
   19859/   100A8 : 1140 001A           		move.b	d0,$1A(a0)
   19860/   100AC : 3168 0008 0034      		move.w	8(a0),$34(a0)
   19861/   100B2 : 3168 000C 0030      		move.w	$C(a0),$30(a0)
   19862/   100B8 : 7000                		moveq	#0,d0
   19863/   100BA : 1012                		move.b	(a2),d0
   19864/   100BC : D040                		add.w	d0,d0
   19865/   100BE : 3140 003A           		move.w	d0,$3A(a0)
   19866/   100C2 : 7000                		moveq	#0,d0
   19867/   100C4 : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
   19868/   100CA : 6720                		beq.s	loc_10332
   19869/   100CC : 1028 0028           		move.b	$28(a0),d0	; SYZ/SLZ specific code
   19870/   100D0 : 0240 000F           		andi.w	#$F,d0
   19871/   100D4 : 5140                		subq.w	#8,d0
   19872/   100D6 : 6514                		bcs.s	loc_10332
   19873/   100D8 : E548                		lsl.w	#2,d0
   19874/   100DA : 45F8 FE8A           		lea	($FFFFFE8A).w,a2
   19875/   100DE : 45F2 0000           		lea	(a2,d0.w),a2
   19876/   100E2 : 4A52                		tst.w	(a2)
   19877/   100E4 : 6A06                		bpl.s	loc_10332
   19878/   100E6 : 0868 0000 0022      		bchg	#0,$22(a0)
   19879/   100EC :                     
   19880/   100EC :                     loc_10332:
   19881/   100EC : 1028 0028           		move.b	$28(a0),d0
   19882/   100F0 : 6A44                		bpl.s	Obj56_Action
   19883/   100F2 : 0200 000F           		andi.b	#$F,d0
   19884/   100F6 : 1140 003C           		move.b	d0,$3C(a0)
   19885/   100FA : 117C 0005 0028      		move.b	#5,$28(a0)
   19886/   10100 : 0C28 0007 001A      		cmpi.b	#7,$1A(a0)
   19887/   10106 : 660C                		bne.s	Obj56_ChkGone
   19888/   10108 : 117C 000C 0028      		move.b	#$C,$28(a0)
   19889/   1010E : 317C 0080 003A      		move.w	#$80,$3A(a0)
   19890/   10114 :                     
   19891/   10114 :                     Obj56_ChkGone:
   19892/   10114 : 45F8 FC00           		lea	($FFFFFC00).w,a2
   19893/   10118 : 7000                		moveq	#0,d0
   19894/   1011A : 1028 0023           		move.b	$23(a0),d0
   19895/   1011E : 6716                		beq.s	Obj56_Action
   19896/   10120 : 08B2 0007 0002      		bclr	#7,2(a2,d0.w)
   19897/   10126 : 0832 0000 0002      		btst	#0,2(a2,d0.w)
   19898/   1012C : 6708                		beq.s	Obj56_Action
   19899/   1012E : 5228 0028           		addq.b	#1,$28(a0)
   19900/   10132 : 4268 003A           		clr.w	$3A(a0)
   19901/   10136 :                     
   19902/   10136 :                     Obj56_Action:				; XREF: Obj56_Index
   19903/   10136 : 3F28 0008           		move.w	8(a0),-(sp)
   19904/   1013A : 7000                		moveq	#0,d0
   19905/   1013C : 1028 0028           		move.b	$28(a0),d0	; get object type
   19906/   10140 : 0240 000F           		andi.w	#$F,d0		; read only the	2nd digit
   19907/   10144 : D040                		add.w	d0,d0
   19908/   10146 : 323B 0048           		move.w	Obj56_TypeIndex(pc,d0.w),d1
   19909/   1014A : 4EBB 1044           		jsr	Obj56_TypeIndex(pc,d1.w)
   19910/   1014E : 381F                		move.w	(sp)+,d4
   19911/   10150 : 4A28 0001           		tst.b	1(a0)
   19912/   10154 : 6A18                		bpl.s	Obj56_ChkDel
   19913/   10156 : 7200                		moveq	#0,d1
   19914/   10158 : 1228 0019           		move.b	$19(a0),d1
   19915/   1015C : 0641 000B           		addi.w	#$B,d1
   19916/   10160 : 7400                		moveq	#0,d2
   19917/   10162 : 1428 0016           		move.b	$16(a0),d2
   19918/   10166 : 3602                		move.w	d2,d3
   19919/   10168 : 5243                		addq.w	#1,d3
   19920/   1016A : 6100 F626           		bsr.w	SolidObject
   19921/   1016E :                     
   19922/   1016E :                     Obj56_ChkDel:
   19923/   1016E : 3028 0034           		move.w	$34(a0),d0
   19924/   10172 : 0240 FF80           		andi.w	#$FF80,d0
   19925/   10176 : 3238 F700           		move.w	($FFFFF700).w,d1
   19926/   1017A : 0441 0080           		subi.w	#$80,d1
   19927/   1017E : 0241 FF80           		andi.w	#$FF80,d1
   19928/   10182 : 9041                		sub.w	d1,d0
   19929/   10184 : 0C40 0280           		cmpi.w	#$280,d0
   19930/   10188 : 6200 D284           		bhi.w	DeleteObject
   19931/   1018C : 6000 D244           		bra.w	DisplaySprite
   19932/   10190 :                     ; ===========================================================================
   19933/   10190 : 001C 001E           Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
   19934/   10194 : 002A 004C           		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
   19935/   10198 : 0058 007A           		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
   19936/   1019C : 010E 0172           		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
   19937/   101A0 : 026A 027C           		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
   19938/   101A4 : 028C 029C           		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
   19939/   101A8 : 01A4 0206           		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
   19940/   101AC :                     ; ===========================================================================
   19941/   101AC :                     
   19942/   101AC :                     Obj56_Type00:				; XREF: Obj56_TypeIndex
   19943/   101AC : 4E75                		rts	
   19944/   101AE :                     ; ===========================================================================
   19945/   101AE :                     
   19946/   101AE :                     Obj56_Type01:				; XREF: Obj56_TypeIndex
   19947/   101AE : 323C 0040           		move.w	#$40,d1
   19948/   101B2 : 7000                		moveq	#0,d0
   19949/   101B4 : 1038 FE68           		move.b	($FFFFFE68).w,d0
   19950/   101B8 : 600A                		bra.s	Obj56_Move_LR
   19951/   101BA :                     ; ===========================================================================
   19952/   101BA :                     
   19953/   101BA :                     Obj56_Type02:				; XREF: Obj56_TypeIndex
   19954/   101BA : 323C 0080           		move.w	#$80,d1
   19955/   101BE : 7000                		moveq	#0,d0
   19956/   101C0 : 1038 FE7C           		move.b	($FFFFFE7C).w,d0
   19957/   101C4 :                     
   19958/   101C4 :                     Obj56_Move_LR:
   19959/   101C4 : 0828 0000 0022      		btst	#0,$22(a0)
   19960/   101CA : 6704                		beq.s	loc_10416
   19961/   101CC : 4440                		neg.w	d0
   19962/   101CE : D041                		add.w	d1,d0
   19963/   101D0 :                     
   19964/   101D0 :                     loc_10416:
   19965/   101D0 : 3228 0034           		move.w	$34(a0),d1
   19966/   101D4 : 9240                		sub.w	d0,d1
   19967/   101D6 : 3141 0008           		move.w	d1,8(a0)	; move object horizontally
   19968/   101DA : 4E75                		rts	
   19969/   101DC :                     ; ===========================================================================
   19970/   101DC :                     
   19971/   101DC :                     Obj56_Type03:				; XREF: Obj56_TypeIndex
   19972/   101DC : 323C 0040           		move.w	#$40,d1
   19973/   101E0 : 7000                		moveq	#0,d0
   19974/   101E2 : 1038 FE68           		move.b	($FFFFFE68).w,d0
   19975/   101E6 : 600A                		bra.s	Obj56_Move_UD
   19976/   101E8 :                     ; ===========================================================================
   19977/   101E8 :                     
   19978/   101E8 :                     Obj56_Type04:				; XREF: Obj56_TypeIndex
   19979/   101E8 : 323C 0080           		move.w	#$80,d1
   19980/   101EC : 7000                		moveq	#0,d0
   19981/   101EE : 1038 FE7C           		move.b	($FFFFFE7C).w,d0
   19982/   101F2 :                     
   19983/   101F2 :                     Obj56_Move_UD:
   19984/   101F2 : 0828 0000 0022      		btst	#0,$22(a0)
   19985/   101F8 : 6704                		beq.s	loc_10444
   19986/   101FA : 4440                		neg.w	d0
   19987/   101FC : D041                		add.w	d1,d0
   19988/   101FE :                     
   19989/   101FE :                     loc_10444:
   19990/   101FE : 3228 0030           		move.w	$30(a0),d1
   19991/   10202 : 9240                		sub.w	d0,d1
   19992/   10204 : 3141 000C           		move.w	d1,$C(a0)	; move object vertically
   19993/   10208 : 4E75                		rts	
   19994/   1020A :                     ; ===========================================================================
   19995/   1020A :                     
   19996/   1020A :                     Obj56_Type05:				; XREF: Obj56_TypeIndex
   19997/   1020A : 4A28 0038           		tst.b	$38(a0)
   19998/   1020E : 664E                		bne.s	loc_104A4
   19999/   10210 : 0C78 0100 FE10      		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
   20000/   10216 : 661C                		bne.s	loc_1047A	; if not, branch
   20001/   10218 : 0C28 0003 003C      		cmpi.b	#3,$3C(a0)
   20002/   1021E : 6614                		bne.s	loc_1047A
   20003/   10220 : 4238 F7C9           		clr.b	($FFFFF7C9).w
   20004/   10224 : 3038 D008           		move.w	($FFFFD008).w,d0
   20005/   10228 : B068 0008           		cmp.w	8(a0),d0
   20006/   1022C : 6406                		bcc.s	loc_1047A
   20007/   1022E : 11FC 0001 F7C9      		move.b	#1,($FFFFF7C9).w
   20008/   10234 :                     
   20009/   10234 :                     loc_1047A:
   20010/   10234 : 45F8 F7E0           		lea	($FFFFF7E0).w,a2
   20011/   10238 : 7000                		moveq	#0,d0
   20012/   1023A : 1028 003C           		move.b	$3C(a0),d0
   20013/   1023E : 0832 0000 0000      		btst	#0,(a2,d0.w)
   20014/   10244 : 6722                		beq.s	loc_104AE
   20015/   10246 : 0C78 0100 FE10      		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
   20016/   1024C : 660A                		bne.s	loc_1049E	; if not, branch
   20017/   1024E : 0C00 0003           		cmpi.b	#3,d0
   20018/   10252 : 6604                		bne.s	loc_1049E
   20019/   10254 : 4238 F7C9           		clr.b	($FFFFF7C9).w
   20020/   10258 :                     
   20021/   10258 :                     loc_1049E:
   20022/   10258 : 117C 0001 0038      		move.b	#1,$38(a0)
   20023/   1025E :                     
   20024/   1025E :                     loc_104A4:
   20025/   1025E : 4A68 003A           		tst.w	$3A(a0)
   20026/   10262 : 671E                		beq.s	loc_104C8
   20027/   10264 : 5568 003A           		subq.w	#2,$3A(a0)
   20028/   10268 :                     
   20029/   10268 :                     loc_104AE:
   20030/   10268 : 3028 003A           		move.w	$3A(a0),d0
   20031/   1026C : 0828 0000 0022      		btst	#0,$22(a0)
   20032/   10272 : 6702                		beq.s	loc_104BC
   20033/   10274 : 4440                		neg.w	d0
   20034/   10276 :                     
   20035/   10276 :                     loc_104BC:
   20036/   10276 : 3228 0030           		move.w	$30(a0),d1
   20037/   1027A : D240                		add.w	d0,d1
   20038/   1027C : 3141 000C           		move.w	d1,$C(a0)
   20039/   10280 : 4E75                		rts	
   20040/   10282 :                     ; ===========================================================================
   20041/   10282 :                     
   20042/   10282 :                     loc_104C8:
   20043/   10282 : 5228 0028           		addq.b	#1,$28(a0)
   20044/   10286 : 4228 0038           		clr.b	$38(a0)
   20045/   1028A : 45F8 FC00           		lea	($FFFFFC00).w,a2
   20046/   1028E : 7000                		moveq	#0,d0
   20047/   10290 : 1028 0023           		move.b	$23(a0),d0
   20048/   10294 : 67D2                		beq.s	loc_104AE
   20049/   10296 : 08F2 0000 0002      		bset	#0,2(a2,d0.w)
   20050/   1029C : 60CA                		bra.s	loc_104AE
   20051/   1029E :                     ; ===========================================================================
   20052/   1029E :                     
   20053/   1029E :                     Obj56_Type06:				; XREF: Obj56_TypeIndex
   20054/   1029E : 4A28 0038           		tst.b	$38(a0)
   20055/   102A2 : 6616                		bne.s	loc_10500
   20056/   102A4 : 45F8 F7E0           		lea	($FFFFF7E0).w,a2
   20057/   102A8 : 7000                		moveq	#0,d0
   20058/   102AA : 1028 003C           		move.b	$3C(a0),d0
   20059/   102AE : 4A32 0000           		tst.b	(a2,d0.w)
   20060/   102B2 : 6A18                		bpl.s	loc_10512
   20061/   102B4 : 117C 0001 0038      		move.b	#1,$38(a0)
   20062/   102BA :                     
   20063/   102BA :                     loc_10500:
   20064/   102BA : 7000                		moveq	#0,d0
   20065/   102BC : 1028 0016           		move.b	$16(a0),d0
   20066/   102C0 : D040                		add.w	d0,d0
   20067/   102C2 : B068 003A           		cmp.w	$3A(a0),d0
   20068/   102C6 : 671E                		beq.s	loc_1052C
   20069/   102C8 : 5468 003A           		addq.w	#2,$3A(a0)
   20070/   102CC :                     
   20071/   102CC :                     loc_10512:
   20072/   102CC : 3028 003A           		move.w	$3A(a0),d0
   20073/   102D0 : 0828 0000 0022      		btst	#0,$22(a0)
   20074/   102D6 : 6702                		beq.s	loc_10520
   20075/   102D8 : 4440                		neg.w	d0
   20076/   102DA :                     
   20077/   102DA :                     loc_10520:
   20078/   102DA : 3228 0030           		move.w	$30(a0),d1
   20079/   102DE : D240                		add.w	d0,d1
   20080/   102E0 : 3141 000C           		move.w	d1,$C(a0)
   20081/   102E4 : 4E75                		rts	
   20082/   102E6 :                     ; ===========================================================================
   20083/   102E6 :                     
   20084/   102E6 :                     loc_1052C:
   20085/   102E6 : 5328 0028           		subq.b	#1,$28(a0)
   20086/   102EA : 4228 0038           		clr.b	$38(a0)
   20087/   102EE : 45F8 FC00           		lea	($FFFFFC00).w,a2
   20088/   102F2 : 7000                		moveq	#0,d0
   20089/   102F4 : 1028 0023           		move.b	$23(a0),d0
   20090/   102F8 : 67D2                		beq.s	loc_10512
   20091/   102FA : 08B2 0000 0002      		bclr	#0,2(a2,d0.w)
   20092/   10300 : 60CA                		bra.s	loc_10512
   20093/   10302 :                     ; ===========================================================================
   20094/   10302 :                     
   20095/   10302 :                     Obj56_Type07:				; XREF: Obj56_TypeIndex
   20096/   10302 : 4A28 0038           		tst.b	$38(a0)
   20097/   10306 : 6610                		bne.s	loc_1055E
   20098/   10308 : 4A38 F7EF           		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
   20099/   1030C : 6724                		beq.s	locret_10578
   20100/   1030E : 117C 0001 0038      		move.b	#1,$38(a0)
   20101/   10314 : 4268 003A           		clr.w	$3A(a0)
   20102/   10318 :                     
   20103/   10318 :                     loc_1055E:
   20104/   10318 : 5268 0008           		addq.w	#1,8(a0)
   20105/   1031C : 3168 0008 0034      		move.w	8(a0),$34(a0)
   20106/   10322 : 5268 003A           		addq.w	#1,$3A(a0)
   20107/   10326 : 0C68 0380 003A      		cmpi.w	#$380,$3A(a0)
   20108/   1032C : 6604                		bne.s	locret_10578
   20109/   1032E : 4228 0028           		clr.b	$28(a0)
   20110/   10332 :                     
   20111/   10332 :                     locret_10578:
   20112/   10332 : 4E75                		rts	
   20113/   10334 :                     ; ===========================================================================
   20114/   10334 :                     
   20115/   10334 :                     Obj56_Type0C:				; XREF: Obj56_TypeIndex
   20116/   10334 : 4A28 0038           		tst.b	$38(a0)
   20117/   10338 : 6618                		bne.s	loc_10598
   20118/   1033A : 45F8 F7E0           		lea	($FFFFF7E0).w,a2
   20119/   1033E : 7000                		moveq	#0,d0
   20120/   10340 : 1028 003C           		move.b	$3C(a0),d0
   20121/   10344 : 0832 0000 0000      		btst	#0,(a2,d0.w)
   20122/   1034A : 6710                		beq.s	loc_105A2
   20123/   1034C : 117C 0001 0038      		move.b	#1,$38(a0)
   20124/   10352 :                     
   20125/   10352 :                     loc_10598:
   20126/   10352 : 4A68 003A           		tst.w	$3A(a0)
   20127/   10356 : 6722                		beq.s	loc_105C0
   20128/   10358 : 5568 003A           		subq.w	#2,$3A(a0)
   20129/   1035C :                     
   20130/   1035C :                     loc_105A2:
   20131/   1035C : 3028 003A           		move.w	$3A(a0),d0
   20132/   10360 : 0828 0000 0022      		btst	#0,$22(a0)
   20133/   10366 : 6706                		beq.s	loc_105B4
   20134/   10368 : 4440                		neg.w	d0
   20135/   1036A : 0640 0080           		addi.w	#$80,d0
   20136/   1036E :                     
   20137/   1036E :                     loc_105B4:
   20138/   1036E : 3228 0034           		move.w	$34(a0),d1
   20139/   10372 : D240                		add.w	d0,d1
   20140/   10374 : 3141 0008           		move.w	d1,8(a0)
   20141/   10378 : 4E75                		rts	
   20142/   1037A :                     ; ===========================================================================
   20143/   1037A :                     
   20144/   1037A :                     loc_105C0:
   20145/   1037A : 5228 0028           		addq.b	#1,$28(a0)
   20146/   1037E : 4228 0038           		clr.b	$38(a0)
   20147/   10382 : 45F8 FC00           		lea	($FFFFFC00).w,a2
   20148/   10386 : 7000                		moveq	#0,d0
   20149/   10388 : 1028 0023           		move.b	$23(a0),d0
   20150/   1038C : 67CE                		beq.s	loc_105A2
   20151/   1038E : 08F2 0000 0002      		bset	#0,2(a2,d0.w)
   20152/   10394 : 60C6                		bra.s	loc_105A2
   20153/   10396 :                     ; ===========================================================================
   20154/   10396 :                     
   20155/   10396 :                     Obj56_Type0D:				; XREF: Obj56_TypeIndex
   20156/   10396 : 4A28 0038           		tst.b	$38(a0)
   20157/   1039A : 6616                		bne.s	loc_105F8
   20158/   1039C : 45F8 F7E0           		lea	($FFFFF7E0).w,a2
   20159/   103A0 : 7000                		moveq	#0,d0
   20160/   103A2 : 1028 003C           		move.b	$3C(a0),d0
   20161/   103A6 : 4A32 0000           		tst.b	(a2,d0.w)
   20162/   103AA : 6A14                		bpl.s	loc_10606
   20163/   103AC : 117C 0001 0038      		move.b	#1,$38(a0)
   20164/   103B2 :                     
   20165/   103B2 :                     loc_105F8:
   20166/   103B2 : 303C 0080           		move.w	#$80,d0
   20167/   103B6 : B068 003A           		cmp.w	$3A(a0),d0
   20168/   103BA : 6722                		beq.s	loc_10624
   20169/   103BC : 5468 003A           		addq.w	#2,$3A(a0)
   20170/   103C0 :                     
   20171/   103C0 :                     loc_10606:
   20172/   103C0 : 3028 003A           		move.w	$3A(a0),d0
   20173/   103C4 : 0828 0000 0022      		btst	#0,$22(a0)
   20174/   103CA : 6706                		beq.s	loc_10618
   20175/   103CC : 4440                		neg.w	d0
   20176/   103CE : 0640 0080           		addi.w	#$80,d0
   20177/   103D2 :                     
   20178/   103D2 :                     loc_10618:
   20179/   103D2 : 3228 0034           		move.w	$34(a0),d1
   20180/   103D6 : D240                		add.w	d0,d1
   20181/   103D8 : 3141 0008           		move.w	d1,8(a0)
   20182/   103DC : 4E75                		rts	
   20183/   103DE :                     ; ===========================================================================
   20184/   103DE :                     
   20185/   103DE :                     loc_10624:
   20186/   103DE : 5328 0028           		subq.b	#1,$28(a0)
   20187/   103E2 : 4228 0038           		clr.b	$38(a0)
   20188/   103E6 : 45F8 FC00           		lea	($FFFFFC00).w,a2
   20189/   103EA : 7000                		moveq	#0,d0
   20190/   103EC : 1028 0023           		move.b	$23(a0),d0
   20191/   103F0 : 67CE                		beq.s	loc_10606
   20192/   103F2 : 08B2 0000 0002      		bclr	#0,2(a2,d0.w)
   20193/   103F8 : 60C6                		bra.s	loc_10606
   20194/   103FA :                     ; ===========================================================================
   20195/   103FA :                     
   20196/   103FA :                     Obj56_Type08:				; XREF: Obj56_TypeIndex
   20197/   103FA : 323C 0010           		move.w	#$10,d1
   20198/   103FE : 7000                		moveq	#0,d0
   20199/   10400 : 1038 FE88           		move.b	($FFFFFE88).w,d0
   20200/   10404 : E248                		lsr.w	#1,d0
   20201/   10406 : 3638 FE8A           		move.w	($FFFFFE8A).w,d3
   20202/   1040A : 602E                		bra.s	Obj56_Move_Sqr
   20203/   1040C :                     ; ===========================================================================
   20204/   1040C :                     
   20205/   1040C :                     Obj56_Type09:				; XREF: Obj56_TypeIndex
   20206/   1040C : 323C 0030           		move.w	#$30,d1
   20207/   10410 : 7000                		moveq	#0,d0
   20208/   10412 : 1038 FE8C           		move.b	($FFFFFE8C).w,d0
   20209/   10416 : 3638 FE8E           		move.w	($FFFFFE8E).w,d3
   20210/   1041A : 601E                		bra.s	Obj56_Move_Sqr
   20211/   1041C :                     ; ===========================================================================
   20212/   1041C :                     
   20213/   1041C :                     Obj56_Type0A:				; XREF: Obj56_TypeIndex
   20214/   1041C : 323C 0050           		move.w	#$50,d1
   20215/   10420 : 7000                		moveq	#0,d0
   20216/   10422 : 1038 FE90           		move.b	($FFFFFE90).w,d0
   20217/   10426 : 3638 FE92           		move.w	($FFFFFE92).w,d3
   20218/   1042A : 600E                		bra.s	Obj56_Move_Sqr
   20219/   1042C :                     ; ===========================================================================
   20220/   1042C :                     
   20221/   1042C :                     Obj56_Type0B:				; XREF: Obj56_TypeIndex
   20222/   1042C : 323C 0070           		move.w	#$70,d1
   20223/   10430 : 7000                		moveq	#0,d0
   20224/   10432 : 1038 FE94           		move.b	($FFFFFE94).w,d0
   20225/   10436 : 3638 FE96           		move.w	($FFFFFE96).w,d3
   20226/   1043A :                     
   20227/   1043A :                     Obj56_Move_Sqr:
   20228/   1043A : 4A43                		tst.w	d3
   20229/   1043C : 660A                		bne.s	loc_1068E
   20230/   1043E : 5228 0022           		addq.b	#1,$22(a0)
   20231/   10442 : 0228 0003 0022      		andi.b	#3,$22(a0)
   20232/   10448 :                     
   20233/   10448 :                     loc_1068E:
   20234/   10448 : 1428 0022           		move.b	$22(a0),d2
   20235/   1044C : 0202 0003           		andi.b	#3,d2
   20236/   10450 : 6616                		bne.s	loc_106AE
   20237/   10452 : 9041                		sub.w	d1,d0
   20238/   10454 : D068 0034           		add.w	$34(a0),d0
   20239/   10458 : 3140 0008           		move.w	d0,8(a0)
   20240/   1045C : 4441                		neg.w	d1
   20241/   1045E : D268 0030           		add.w	$30(a0),d1
   20242/   10462 : 3141 000C           		move.w	d1,$C(a0)
   20243/   10466 : 4E75                		rts	
   20244/   10468 :                     ; ===========================================================================
   20245/   10468 :                     
   20246/   10468 :                     loc_106AE:
   20247/   10468 : 5302                		subq.b	#1,d2
   20248/   1046A : 661A                		bne.s	loc_106CC
   20249/   1046C : 5341                		subq.w	#1,d1
   20250/   1046E : 9041                		sub.w	d1,d0
   20251/   10470 : 4440                		neg.w	d0
   20252/   10472 : D068 0030           		add.w	$30(a0),d0
   20253/   10476 : 3140 000C           		move.w	d0,$C(a0)
   20254/   1047A : 5241                		addq.w	#1,d1
   20255/   1047C : D268 0034           		add.w	$34(a0),d1
   20256/   10480 : 3141 0008           		move.w	d1,8(a0)
   20257/   10484 : 4E75                		rts	
   20258/   10486 :                     ; ===========================================================================
   20259/   10486 :                     
   20260/   10486 :                     loc_106CC:
   20261/   10486 : 5302                		subq.b	#1,d2
   20262/   10488 : 661A                		bne.s	loc_106EA
   20263/   1048A : 5341                		subq.w	#1,d1
   20264/   1048C : 9041                		sub.w	d1,d0
   20265/   1048E : 4440                		neg.w	d0
   20266/   10490 : D068 0034           		add.w	$34(a0),d0
   20267/   10494 : 3140 0008           		move.w	d0,8(a0)
   20268/   10498 : 5241                		addq.w	#1,d1
   20269/   1049A : D268 0030           		add.w	$30(a0),d1
   20270/   1049E : 3141 000C           		move.w	d1,$C(a0)
   20271/   104A2 : 4E75                		rts	
   20272/   104A4 :                     ; ===========================================================================
   20273/   104A4 :                     
   20274/   104A4 :                     loc_106EA:
   20275/   104A4 : 9041                		sub.w	d1,d0
   20276/   104A6 : D068 0030           		add.w	$30(a0),d0
   20277/   104AA : 3140 000C           		move.w	d0,$C(a0)
   20278/   104AE : 4441                		neg.w	d1
   20279/   104B0 : D268 0034           		add.w	$34(a0),d1
   20280/   104B4 : 3141 0008           		move.w	d1,8(a0)
   20281/   104B8 : 4E75                		rts	
   20282/   104BA :                     ; ===========================================================================
   20283/   104BA :                     ; ---------------------------------------------------------------------------
   20284/   104BA :                     ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
   20285/   104BA :                     ; ---------------------------------------------------------------------------
   20286/   104BA :                     Map_obj56:
   20287/   104BA :                     	include "_mappings/obj56.asm"
(1)    1/   104BA :                     ; ---------------------------------------------------------------------------
(1)    2/   104BA :                     ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
(1)    3/   104BA :                     ; ---------------------------------------------------------------------------
(1)    4/   104BA : 0010 0016           		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
(1)    5/   104BE : 002B 0036           		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
(1)    6/   104C2 : 004B 005B           		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
(1)    7/   104C6 : 0061 006C           		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
(1)    8/   104CA : 01                  byte_10710:	dc.b 1
(1)    9/   104CB : F00F 0061 F0        		dc.b $F0, $F, 0, $61, $F0
(1)   10/   104D0 : 04                  byte_10716:	dc.b 4
(1)   11/   104D1 : E00F 0061 E0        		dc.b $E0, $F, 0, $61, $E0
(1)   12/   104D6 : E00F 0061 00        		dc.b $E0, $F, 0, $61, 0
(1)   13/   104DB : 000F 0061 E0        		dc.b 0,	$F, 0, $61, $E0
(1)   14/   104E0 : 000F 0061 00        		dc.b 0,	$F, 0, $61, 0
(1)   15/   104E5 : 02                  byte_1072B:	dc.b 2
(1)   16/   104E6 : E00F 0061 F0        		dc.b $E0, $F, 0, $61, $F0
(1)   17/   104EB : 000F 0061 F0        		dc.b 0,	$F, 0, $61, $F0
(1)   18/   104F0 : 04                  byte_10736:	dc.b 4
(1)   19/   104F1 : E60F 0081 E0        		dc.b $E6, $F, 0, $81, $E0
(1)   20/   104F6 : E60F 0081 00        		dc.b $E6, $F, 0, $81, 0
(1)   21/   104FB : 000F 0081 E0        		dc.b 0,	$F, 0, $81, $E0
(1)   22/   10500 : 000F 0081 00        		dc.b 0,	$F, 0, $81, 0
(1)   23/   10505 : 03                  byte_1074B:	dc.b 3
(1)   24/   10506 : D90F 0081 F0        		dc.b $D9, $F, 0, $81, $F0
(1)   25/   1050B : F30F 0081 F0        		dc.b $F3, $F, 0, $81, $F0
(1)   26/   10510 : 0D0F 0081 F0        		dc.b $D, $F, 0,	$81, $F0
(1)   27/   10515 : 01                  byte_1075B:	dc.b 1
(1)   28/   10516 : F00F 0021 F0        		dc.b $F0, $F, 0, $21, $F0
(1)   29/   1051B : 02                  byte_10761:	dc.b 2
(1)   30/   1051C : E007 0000 F8        		dc.b $E0, 7, 0,	0, $F8
(1)   31/   10521 : 0007 1000 F8        		dc.b 0,	7, $10,	0, $F8
(1)   32/   10526 : 04                  byte_1076C:	dc.b 4
(1)   33/   10527 : F00F 0022 C0        		dc.b $F0, $F, 0, $22, $C0
(1)   34/   1052C : F00F 0022 E0        		dc.b $F0, $F, 0, $22, $E0
(1)   35/   10531 : F00F 0022 00        		dc.b $F0, $F, 0, $22, 0
(1)   36/   10536 : F00F 0022 20        		dc.b $F0, $F, 0, $22, $20
(1)   37/   1053B : (MACRO)              		even
(1)   37/   1053B : 00                                          dc.b 0 ;ds.b 1 
   20288/   1053C :                     
   20289/   1053C :                     ; ===========================================================================
   20290/   1053C :                     ; ---------------------------------------------------------------------------
   20291/   1053C :                     ; Object 57 - spiked balls (SYZ, LZ)
   20292/   1053C :                     ; ---------------------------------------------------------------------------
   20293/   1053C :                     
   20294/   1053C :                     Obj57:					; XREF: Obj_Index
   20295/   1053C : 7000                		moveq	#0,d0
   20296/   1053E : 1028 0024           		move.b	$24(a0),d0
   20297/   10542 : 323B 0006           		move.w	Obj57_Index(pc,d0.w),d1
   20298/   10546 : 4EFB 1002           		jmp	Obj57_Index(pc,d1.w)
   20299/   1054A :                     ; ===========================================================================
   20300/   1054A : 0006                Obj57_Index:	dc.w Obj57_Main-Obj57_Index
   20301/   1054C : 0122                		dc.w Obj57_Move-Obj57_Index
   20302/   1054E : 01BE                		dc.w Obj57_Display-Obj57_Index
   20303/   10550 :                     ; ===========================================================================
   20304/   10550 :                     
   20305/   10550 :                     Obj57_Main:				; XREF: Obj57_Index
   20306/   10550 : 5428 0024           		addq.b	#2,$24(a0)
   20307/   10554 : 217C 0001 070C      		move.l	#Map_obj57,4(a0)
            1055A : 0004             
   20308/   1055C : 317C 03BA 0002      		move.w	#$3BA,2(a0)
   20309/   10562 : 117C 0004 0001      		move.b	#4,1(a0)
   20310/   10568 : 117C 0004 0018      		move.b	#4,$18(a0)
   20311/   1056E : 117C 0008 0019      		move.b	#8,$19(a0)
   20312/   10574 : 3168 0008 003A      		move.w	8(a0),$3A(a0)
   20313/   1057A : 3168 000C 0038      		move.w	$C(a0),$38(a0)
   20314/   10580 : 117C 0098 0020      		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
   20315/   10586 : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
   20316/   1058C : 6614                		bne.s	loc_107E8
   20317/   1058E : 117C 0000 0020      		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
   20318/   10594 : 317C 0310 0002      		move.w	#$310,2(a0)
   20319/   1059A : 217C 0001 0714      		move.l	#Map_obj57a,4(a0)
            105A0 : 0004             
   20320/   105A2 :                     
   20321/   105A2 :                     loc_107E8:
   20322/   105A2 : 1228 0028           		move.b	$28(a0),d1	; get object type
   20323/   105A6 : 0201 00F0           		andi.b	#$F0,d1		; read only the	1st digit
   20324/   105AA : 4881                		ext.w	d1
   20325/   105AC : E741                		asl.w	#3,d1		; multiply by 8
   20326/   105AE : 3141 003E           		move.w	d1,$3E(a0)	; set object twirl speed
   20327/   105B2 : 1028 0022           		move.b	$22(a0),d0
   20328/   105B6 : E418                		ror.b	#2,d0
   20329/   105B8 : 0200 00C0           		andi.b	#-$40,d0
   20330/   105BC : 1140 0026           		move.b	d0,$26(a0)
   20331/   105C0 : 45E8 0029           		lea	$29(a0),a2
   20332/   105C4 : 1228 0028           		move.b	$28(a0),d1	; get object type
   20333/   105C8 : 0241 0007           		andi.w	#7,d1		; read only the	2nd digit
   20334/   105CC : 14FC 0000           		move.b	#0,(a2)+
   20335/   105D0 : 3601                		move.w	d1,d3
   20336/   105D2 : E94B                		lsl.w	#4,d3
   20337/   105D4 : 1143 003C           		move.b	d3,$3C(a0)
   20338/   105D8 : 5341                		subq.w	#1,d1		; set chain length (type-1)
   20339/   105DA : 656E                		bcs.s	loc_10894
   20340/   105DC : 0828 0003 0028      		btst	#3,$28(a0)
   20341/   105E2 : 6704                		beq.s	Obj57_MakeChain
   20342/   105E4 : 5341                		subq.w	#1,d1
   20343/   105E6 : 6562                		bcs.s	loc_10894
   20344/   105E8 :                     
   20345/   105E8 :                     Obj57_MakeChain:
   20346/   105E8 : 6100 D26E           		bsr.w	SingleObjLoad
   20347/   105EC : 665C                		bne.s	loc_10894
   20348/   105EE : 5228 0029           		addq.b	#1,$29(a0)
   20349/   105F2 : 3A09                		move.w	a1,d5
   20350/   105F4 : 0445 D000           		subi.w	#-$3000,d5
   20351/   105F8 : EC4D                		lsr.w	#6,d5
   20352/   105FA : 0245 007F           		andi.w	#$7F,d5
   20353/   105FE : 14C5                		move.b	d5,(a2)+
   20354/   10600 : 137C 0004 0024      		move.b	#4,$24(a1)
   20355/   10606 : 1290                		move.b	0(a0),0(a1)
   20356/   10608 : 2368 0004 0004      		move.l	4(a0),4(a1)
   20357/   1060E : 3368 0002 0002      		move.w	2(a0),2(a1)
   20358/   10614 : 1368 0001 0001      		move.b	1(a0),1(a1)
   20359/   1061A : 1368 0018 0018      		move.b	$18(a0),$18(a1)
   20360/   10620 : 1368 0019 0019      		move.b	$19(a0),$19(a1)
   20361/   10626 : 1368 0020 0020      		move.b	$20(a0),$20(a1)
   20362/   1062C : 0403 0010           		subi.b	#$10,d3
   20363/   10630 : 1343 003C           		move.b	d3,$3C(a1)
   20364/   10634 : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w
   20365/   1063A : 660A                		bne.s	loc_10890
   20366/   1063C : 4A03                		tst.b	d3
   20367/   1063E : 6606                		bne.s	loc_10890
   20368/   10640 : 137C 0002 001A      		move.b	#2,$1A(a1)
   20369/   10646 :                     
   20370/   10646 :                     loc_10890:
   20371/   10646 : 51C9 FFA0           		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
   20372/   1064A :                     
   20373/   1064A :                     loc_10894:
   20374/   1064A : 3A08                		move.w	a0,d5
   20375/   1064C : 0445 D000           		subi.w	#-$3000,d5
   20376/   10650 : EC4D                		lsr.w	#6,d5
   20377/   10652 : 0245 007F           		andi.w	#$7F,d5
   20378/   10656 : 14C5                		move.b	d5,(a2)+
   20379/   10658 : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
   20380/   1065E : 660C                		bne.s	Obj57_Move
   20381/   10660 : 117C 008B 0020      		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
   20382/   10666 : 117C 0001 001A      		move.b	#1,$1A(a0)	; use different	frame
   20383/   1066C :                     
   20384/   1066C :                     Obj57_Move:				; XREF: Obj57_Index
   20385/   1066C : 6100 0006           		bsr.w	Obj57_MoveSub
   20386/   10670 : 6000 0054           		bra.w	Obj57_ChkDel
   20387/   10674 :                     ; ===========================================================================
   20388/   10674 :                     
   20389/   10674 :                     Obj57_MoveSub:				; XREF: Obj57_Move
   20390/   10674 : 3028 003E           		move.w	$3E(a0),d0
   20391/   10678 : D168 0026           		add.w	d0,$26(a0)
   20392/   1067C : 1028 0026           		move.b	$26(a0),d0
   20393/   10680 : 4EB9 0000 27C0      		jsr	(CalcSine).l
   20394/   10686 : 3428 0038           		move.w	$38(a0),d2
   20395/   1068A : 3628 003A           		move.w	$3A(a0),d3
   20396/   1068E : 45E8 0029           		lea	$29(a0),a2
   20397/   10692 : 7C00                		moveq	#0,d6
   20398/   10694 : 1C1A                		move.b	(a2)+,d6
   20399/   10696 :                     
   20400/   10696 :                     Obj57_MoveLoop:
   20401/   10696 : 7800                		moveq	#0,d4
   20402/   10698 : 181A                		move.b	(a2)+,d4
   20403/   1069A : ED4C                		lsl.w	#6,d4
   20404/   1069C : 0684 00FF D000      		addi.l	#$FFD000,d4
   20405/   106A2 : 2244                		movea.l	d4,a1
   20406/   106A4 : 7800                		moveq	#0,d4
   20407/   106A6 : 1829 003C           		move.b	$3C(a1),d4
   20408/   106AA : 2A04                		move.l	d4,d5
   20409/   106AC : C9C0                		muls.w	d0,d4
   20410/   106AE : E084                		asr.l	#8,d4
   20411/   106B0 : CBC1                		muls.w	d1,d5
   20412/   106B2 : E085                		asr.l	#8,d5
   20413/   106B4 : D842                		add.w	d2,d4
   20414/   106B6 : DA43                		add.w	d3,d5
   20415/   106B8 : 3344 000C           		move.w	d4,$C(a1)
   20416/   106BC : 3345 0008           		move.w	d5,8(a1)
   20417/   106C0 : 51CE FFD4           		dbf	d6,Obj57_MoveLoop
   20418/   106C4 : 4E75                		rts	
   20419/   106C6 :                     ; ===========================================================================
   20420/   106C6 :                     
   20421/   106C6 :                     Obj57_ChkDel:				; XREF: Obj57_Move
   20422/   106C6 : 3028 003A           		move.w	$3A(a0),d0
   20423/   106CA : 0240 FF80           		andi.w	#$FF80,d0
   20424/   106CE : 3238 F700           		move.w	($FFFFF700).w,d1
   20425/   106D2 : 0441 0080           		subi.w	#$80,d1
   20426/   106D6 : 0241 FF80           		andi.w	#$FF80,d1
   20427/   106DA : 9041                		sub.w	d1,d0
   20428/   106DC : 0C40 0280           		cmpi.w	#$280,d0
   20429/   106E0 : 6200 0006           		bhi.w	Obj57_Delete
   20430/   106E4 : 6000 CCEC           		bra.w	DisplaySprite
   20431/   106E8 :                     ; ===========================================================================
   20432/   106E8 :                     
   20433/   106E8 :                     Obj57_Delete:				; XREF: Obj57_ChkDel
   20434/   106E8 : 7400                		moveq	#0,d2
   20435/   106EA : 45E8 0029           		lea	$29(a0),a2
   20436/   106EE : 141A                		move.b	(a2)+,d2
   20437/   106F0 :                     
   20438/   106F0 :                     Obj57_DelLoop:
   20439/   106F0 : 7000                		moveq	#0,d0
   20440/   106F2 : 101A                		move.b	(a2)+,d0
   20441/   106F4 : ED48                		lsl.w	#6,d0
   20442/   106F6 : 0680 00FF D000      		addi.l	#$FFD000,d0
   20443/   106FC : 2240                		movea.l	d0,a1
   20444/   106FE : 6100 CD10           		bsr.w	DeleteObject2
   20445/   10702 : 51CA FFEC           		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
   20446/   10706 :                     
   20447/   10706 : 4E75                		rts	
   20448/   10708 :                     ; ===========================================================================
   20449/   10708 :                     
   20450/   10708 :                     Obj57_Display:				; XREF: Obj57_Index
   20451/   10708 : 6000 CCC8           		bra.w	DisplaySprite
   20452/   1070C :                     ; ===========================================================================
   20453/   1070C :                     ; ---------------------------------------------------------------------------
   20454/   1070C :                     ; Sprite mappings - chain of spiked balls (SYZ)
   20455/   1070C :                     ; ---------------------------------------------------------------------------
   20456/   1070C :                     Map_obj57:
   20457/   1070C :                     	include "_mappings/obj57syz.asm"
(1)    1/   1070C :                     ; ---------------------------------------------------------------------------
(1)    2/   1070C :                     ; Sprite mappings - chain of spiked balls (SYZ)
(1)    3/   1070C :                     ; ---------------------------------------------------------------------------
(1)    4/   1070C : 0002                		dc.w byte_10958-Map_obj57
(1)    5/   1070E : 01                  byte_10958:	dc.b 1
(1)    6/   1070F : F805 0000 F8        		dc.b $F8, 5, 0,	0, $F8
(1)    7/   10714 : (MACRO)              		even
   20458/   10714 :                     
   20459/   10714 :                     ; ---------------------------------------------------------------------------
   20460/   10714 :                     ; Sprite mappings - spiked ball	on a chain (LZ)
   20461/   10714 :                     ; ---------------------------------------------------------------------------
   20462/   10714 :                     Map_obj57a:
   20463/   10714 :                     	include "_mappings/obj57lz.asm"
(1)    1/   10714 :                     ; ---------------------------------------------------------------------------
(1)    2/   10714 :                     ; Sprite mappings - spiked ball	on a chain (LZ)
(1)    3/   10714 :                     ; ---------------------------------------------------------------------------
(1)    4/   10714 : 0006                		dc.w byte_10964-Map_obj57a
(1)    5/   10716 : 000C                		dc.w byte_1096A-Map_obj57a
(1)    6/   10718 : 0012                		dc.w byte_10970-Map_obj57a
(1)    7/   1071A : 01                  byte_10964:	dc.b 1
(1)    8/   1071B : F805 0000 F8        		dc.b $F8, 5, 0,	0, $F8
(1)    9/   10720 : 01                  byte_1096A:	dc.b 1
(1)   10/   10721 : F00F 0004 F0        		dc.b $F0, $F, 0, 4, $F0
(1)   11/   10726 : 01                  byte_10970:	dc.b 1
(1)   12/   10727 : F805 0014 F8        		dc.b $F8, 5, 0,	$14, $F8
(1)   13/   1072C : (MACRO)              		even
   20464/   1072C :                     
   20465/   1072C :                     ; ===========================================================================
   20466/   1072C :                     ; ---------------------------------------------------------------------------
   20467/   1072C :                     ; Object 58 - giant spiked balls (SYZ)
   20468/   1072C :                     ; ---------------------------------------------------------------------------
   20469/   1072C :                     
   20470/   1072C :                     Obj58:					; XREF: Obj_Index
   20471/   1072C : 7000                		moveq	#0,d0
   20472/   1072E : 1028 0024           		move.b	$24(a0),d0
   20473/   10732 : 323B 0006           		move.w	Obj58_Index(pc,d0.w),d1
   20474/   10736 : 4EFB 1002           		jmp	Obj58_Index(pc,d1.w)
   20475/   1073A :                     ; ===========================================================================
   20476/   1073A : 0004                Obj58_Index:	dc.w Obj58_Main-Obj58_Index
   20477/   1073C : 005E                		dc.w Obj58_Move-Obj58_Index
   20478/   1073E :                     ; ===========================================================================
   20479/   1073E :                     
   20480/   1073E :                     Obj58_Main:				; XREF: Obj58_Index
   20481/   1073E : 5428 0024           		addq.b	#2,$24(a0)
   20482/   10742 : 217C 0001 0856      		move.l	#Map_obj15b,4(a0)
            10748 : 0004             
   20483/   1074A : 317C 0396 0002      		move.w	#$396,2(a0)
   20484/   10750 : 117C 0004 0001      		move.b	#4,1(a0)
   20485/   10756 : 117C 0004 0018      		move.b	#4,$18(a0)
   20486/   1075C : 117C 0018 0019      		move.b	#$18,$19(a0)
   20487/   10762 : 3168 0008 003A      		move.w	8(a0),$3A(a0)
   20488/   10768 : 3168 000C 0038      		move.w	$C(a0),$38(a0)
   20489/   1076E : 117C 0086 0020      		move.b	#$86,$20(a0)
   20490/   10774 : 1228 0028           		move.b	$28(a0),d1	; get object type
   20491/   10778 : 0201 00F0           		andi.b	#$F0,d1		; read only the	1st digit
   20492/   1077C : 4881                		ext.w	d1
   20493/   1077E : E741                		asl.w	#3,d1		; multiply by 8
   20494/   10780 : 3141 003E           		move.w	d1,$3E(a0)	; set object speed
   20495/   10784 : 1028 0022           		move.b	$22(a0),d0
   20496/   10788 : E418                		ror.b	#2,d0
   20497/   1078A : 0200 00C0           		andi.b	#$C0,d0
   20498/   1078E : 1140 0026           		move.b	d0,$26(a0)
   20499/   10792 : 117C 0050 003C      		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
   20500/   10798 :                     
   20501/   10798 :                     Obj58_Move:				; XREF: Obj58_Index
   20502/   10798 : 7000                		moveq	#0,d0
   20503/   1079A : 1028 0028           		move.b	$28(a0),d0	; get object type
   20504/   1079E : 0240 0007           		andi.w	#7,d0		; read only the	2nd digit
   20505/   107A2 : D040                		add.w	d0,d0
   20506/   107A4 : 323B 0028           		move.w	Obj58_TypeIndex(pc,d0.w),d1
   20507/   107A8 : 4EBB 1024           		jsr	Obj58_TypeIndex(pc,d1.w)
   20508/   107AC : 3028 003A           		move.w	$3A(a0),d0
   20509/   107B0 : 0240 FF80           		andi.w	#$FF80,d0
   20510/   107B4 : 3238 F700           		move.w	($FFFFF700).w,d1
   20511/   107B8 : 0441 0080           		subi.w	#$80,d1
   20512/   107BC : 0241 FF80           		andi.w	#$FF80,d1
   20513/   107C0 : 9041                		sub.w	d1,d0
   20514/   107C2 : 0C40 0280           		cmpi.w	#$280,d0
   20515/   107C6 : 6200 CC46           		bhi.w	DeleteObject
   20516/   107CA : 6000 CC06           		bra.w	DisplaySprite
   20517/   107CE :                     ; ===========================================================================
   20518/   107CE : 0008                Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
   20519/   107D0 : 000A                		dc.w Obj58_Type01-Obj58_TypeIndex
   20520/   107D2 : 002C                		dc.w Obj58_Type02-Obj58_TypeIndex
   20521/   107D4 : 0050                		dc.w Obj58_Type03-Obj58_TypeIndex
   20522/   107D6 :                     ; ===========================================================================
   20523/   107D6 :                     
   20524/   107D6 :                     Obj58_Type00:				; XREF: Obj58_TypeIndex
   20525/   107D6 : 4E75                		rts	
   20526/   107D8 :                     ; ===========================================================================
   20527/   107D8 :                     
   20528/   107D8 :                     Obj58_Type01:				; XREF: Obj58_TypeIndex
   20529/   107D8 : 323C 0060           		move.w	#$60,d1
   20530/   107DC : 7000                		moveq	#0,d0
   20531/   107DE : 1038 FE6C           		move.b	($FFFFFE6C).w,d0
   20532/   107E2 : 0828 0000 0022      		btst	#0,$22(a0)
   20533/   107E8 : 6704                		beq.s	loc_10A38
   20534/   107EA : 4440                		neg.w	d0
   20535/   107EC : D041                		add.w	d1,d0
   20536/   107EE :                     
   20537/   107EE :                     loc_10A38:
   20538/   107EE : 3228 003A           		move.w	$3A(a0),d1
   20539/   107F2 : 9240                		sub.w	d0,d1
   20540/   107F4 : 3141 0008           		move.w	d1,8(a0)	; move object horizontally
   20541/   107F8 : 4E75                		rts	
   20542/   107FA :                     ; ===========================================================================
   20543/   107FA :                     
   20544/   107FA :                     Obj58_Type02:				; XREF: Obj58_TypeIndex
   20545/   107FA : 323C 0060           		move.w	#$60,d1
   20546/   107FE : 7000                		moveq	#0,d0
   20547/   10800 : 1038 FE6C           		move.b	($FFFFFE6C).w,d0
   20548/   10804 : 0828 0000 0022      		btst	#0,$22(a0)
   20549/   1080A : 6706                		beq.s	loc_10A5C
   20550/   1080C : 4440                		neg.w	d0
   20551/   1080E : 0640 0080           		addi.w	#$80,d0
   20552/   10812 :                     
   20553/   10812 :                     loc_10A5C:
   20554/   10812 : 3228 0038           		move.w	$38(a0),d1
   20555/   10816 : 9240                		sub.w	d0,d1
   20556/   10818 : 3141 000C           		move.w	d1,$C(a0)	; move object vertically
   20557/   1081C : 4E75                		rts	
   20558/   1081E :                     ; ===========================================================================
   20559/   1081E :                     
   20560/   1081E :                     Obj58_Type03:				; XREF: Obj58_TypeIndex
   20561/   1081E : 3028 003E           		move.w	$3E(a0),d0
   20562/   10822 : D168 0026           		add.w	d0,$26(a0)
   20563/   10826 : 1028 0026           		move.b	$26(a0),d0
   20564/   1082A : 4EB9 0000 27C0      		jsr	(CalcSine).l
   20565/   10830 : 3428 0038           		move.w	$38(a0),d2
   20566/   10834 : 3628 003A           		move.w	$3A(a0),d3
   20567/   10838 : 7800                		moveq	#0,d4
   20568/   1083A : 1828 003C           		move.b	$3C(a0),d4
   20569/   1083E : 2A04                		move.l	d4,d5
   20570/   10840 : C9C0                		muls.w	d0,d4
   20571/   10842 : E084                		asr.l	#8,d4
   20572/   10844 : CBC1                		muls.w	d1,d5
   20573/   10846 : E085                		asr.l	#8,d5
   20574/   10848 : D842                		add.w	d2,d4
   20575/   1084A : DA43                		add.w	d3,d5
   20576/   1084C : 3144 000C           		move.w	d4,$C(a0)
   20577/   10850 : 3145 0008           		move.w	d5,8(a0)
   20578/   10854 : 4E75                		rts	
   20579/   10856 :                     ; ===========================================================================
   20580/   10856 :                     ; ---------------------------------------------------------------------------
   20581/   10856 :                     ; Sprite mappings - SBZ	spiked ball on a chain
   20582/   10856 :                     ; ---------------------------------------------------------------------------
   20583/   10856 :                     Map_obj15b:
   20584/   10856 :                     	include "_mappings/obj15sbz.asm"
(1)    1/   10856 :                     ; ---------------------------------------------------------------------------
(1)    2/   10856 :                     ; Sprite mappings - spiked ball on a chain (SBZ)
(1)    3/   10856 :                     ; ---------------------------------------------------------------------------
(1)    4/   10856 : 0006 0020           		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
(1)    5/   1085A : 0026                		dc.w byte_10AC6-Map_obj15b
(1)    6/   1085C : 05                  byte_10AA6:	dc.b 5
(1)    7/   1085D : E804 0000 F8        		dc.b $E8, 4, 0,	0, $F8
(1)    8/   10862 : F00F 0002 F0        		dc.b $F0, $F, 0, 2, $F0
(1)    9/   10867 : F801 0012 E8        		dc.b $F8, 1, 0,	$12, $E8
(1)   10/   1086C : F801 0014 10        		dc.b $F8, 1, 0,	$14, $10
(1)   11/   10871 : 1004 0016 F8        		dc.b $10, 4, 0,	$16, $F8
(1)   12/   10876 : 01                  byte_10AC0:	dc.b 1
(1)   13/   10877 : F805 0020 F8        		dc.b $F8, 5, 0,	$20, $F8
(1)   14/   1087C : 02                  byte_10AC6:	dc.b 2
(1)   15/   1087D : F80D 0018 F0        		dc.b $F8, $D, 0, $18, $F0
(1)   16/   10882 : E80D 1018 F0        		dc.b $E8, $D, $10, $18,	$F0
(1)   17/   10887 : (MACRO)              		even
(1)   17/   10887 : 00                                          dc.b 0 ;ds.b 1 
   20585/   10888 :                     
   20586/   10888 :                     ; ===========================================================================
   20587/   10888 :                     ; ---------------------------------------------------------------------------
   20588/   10888 :                     ; Object 59 - platforms	that move when you stand on them (SLZ)
   20589/   10888 :                     ; ---------------------------------------------------------------------------
   20590/   10888 :                     
   20591/   10888 :                     Obj59:					; XREF: Obj_Index
   20592/   10888 : 7000                		moveq	#0,d0
   20593/   1088A : 1028 0024           		move.b	$24(a0),d0
   20594/   1088E : 323B 0028           		move.w	Obj59_Index(pc,d0.w),d1
   20595/   10892 : 4EBB 1024           		jsr	Obj59_Index(pc,d1.w)
   20596/   10896 : 3028 0032           		move.w	$32(a0),d0
   20597/   1089A : 0240 FF80           		andi.w	#$FF80,d0
   20598/   1089E : 3238 F700           		move.w	($FFFFF700).w,d1
   20599/   108A2 : 0441 0080           		subi.w	#$80,d1
   20600/   108A6 : 0241 FF80           		andi.w	#$FF80,d1
   20601/   108AA : 9041                		sub.w	d1,d0
   20602/   108AC : 0C40 0280           		cmpi.w	#$280,d0
   20603/   108B0 : 6200 CB5C           		bhi.w	DeleteObject
   20604/   108B4 : 6000 CB1C           		bra.w	DisplaySprite
   20605/   108B8 :                     ; ===========================================================================
   20606/   108B8 : 0028                Obj59_Index:	dc.w Obj59_Main-Obj59_Index
   20607/   108BA : 00A0                		dc.w Obj59_Platform-Obj59_Index
   20608/   108BC : 00B0                		dc.w Obj59_Action-Obj59_Index
   20609/   108BE : 01F8                		dc.w Obj59_MakeMulti-Obj59_Index
   20610/   108C0 :                     
   20611/   108C0 : 2800                Obj59_Var1:	dc.b $28, 0		; width, frame number
   20612/   108C2 :                     
   20613/   108C2 : 1001                Obj59_Var2:	dc.b $10, 1		; width, action	type
   20614/   108C4 : 2001                		dc.b $20, 1
   20615/   108C6 : 3401                		dc.b $34, 1
   20616/   108C8 : 1003                		dc.b $10, 3
   20617/   108CA : 2003                		dc.b $20, 3
   20618/   108CC : 3403                		dc.b $34, 3
   20619/   108CE : 1401                		dc.b $14, 1
   20620/   108D0 : 2401                		dc.b $24, 1
   20621/   108D2 : 2C01                		dc.b $2C, 1
   20622/   108D4 : 1403                		dc.b $14, 3
   20623/   108D6 : 2403                		dc.b $24, 3
   20624/   108D8 : 2C03                		dc.b $2C, 3
   20625/   108DA : 2005                		dc.b $20, 5
   20626/   108DC : 2007                		dc.b $20, 7
   20627/   108DE : 3009                		dc.b $30, 9
   20628/   108E0 :                     ; ===========================================================================
   20629/   108E0 :                     
   20630/   108E0 :                     Obj59_Main:				; XREF: Obj59_Index
   20631/   108E0 : 5428 0024           		addq.b	#2,$24(a0)
   20632/   108E4 : 7000                		moveq	#0,d0
   20633/   108E6 : 1028 0028           		move.b	$28(a0),d0
   20634/   108EA : 6A18                		bpl.s	Obj59_Main2
   20635/   108EC : 5828 0024           		addq.b	#4,$24(a0)
   20636/   108F0 : 0240 007F           		andi.w	#$7F,d0
   20637/   108F4 : C0FC 0006           		mulu.w	#6,d0
   20638/   108F8 : 3140 003C           		move.w	d0,$3C(a0)
   20639/   108FC : 3140 003E           		move.w	d0,$3E(a0)
   20640/   10900 : 588F                		addq.l	#4,sp
   20641/   10902 : 4E75                		rts	
   20642/   10904 :                     ; ===========================================================================
   20643/   10904 :                     
   20644/   10904 :                     Obj59_Main2:
   20645/   10904 : E648                		lsr.w	#3,d0
   20646/   10906 : 0240 001E           		andi.w	#$1E,d0
   20647/   1090A : 45FB 00B4           		lea	Obj59_Var1(pc,d0.w),a2
   20648/   1090E : 115A 0019           		move.b	(a2)+,$19(a0)
   20649/   10912 : 115A 001A           		move.b	(a2)+,$1A(a0)
   20650/   10916 : 7000                		moveq	#0,d0
   20651/   10918 : 1028 0028           		move.b	$28(a0),d0
   20652/   1091C : D040                		add.w	d0,d0
   20653/   1091E : 0240 001E           		andi.w	#$1E,d0
   20654/   10922 : 45FB 009E           		lea	Obj59_Var2(pc,d0.w),a2
   20655/   10926 : 101A                		move.b	(a2)+,d0
   20656/   10928 : E548                		lsl.w	#2,d0
   20657/   1092A : 3140 003C           		move.w	d0,$3C(a0)
   20658/   1092E : 115A 0028           		move.b	(a2)+,$28(a0)
   20659/   10932 : 217C 0001 0AFA      		move.l	#Map_obj59,4(a0)
            10938 : 0004             
   20660/   1093A : 317C 4000 0002      		move.w	#$4000,2(a0)
   20661/   10940 : 117C 0004 0001      		move.b	#4,1(a0)
   20662/   10946 : 117C 0004 0018      		move.b	#4,$18(a0)
   20663/   1094C : 3168 0008 0032      		move.w	8(a0),$32(a0)
   20664/   10952 : 3168 000C 0030      		move.w	$C(a0),$30(a0)
   20665/   10958 :                     
   20666/   10958 :                     Obj59_Platform:				; XREF: Obj59_Index
   20667/   10958 : 7200                		moveq	#0,d1
   20668/   1095A : 1228 0019           		move.b	$19(a0),d1
   20669/   1095E : 4EB9 0000 725C      		jsr	(PlatformObject).l
   20670/   10964 : 6000 0024           		bra.w	Obj59_Types
   20671/   10968 :                     ; ===========================================================================
   20672/   10968 :                     
   20673/   10968 :                     Obj59_Action:				; XREF: Obj59_Index
   20674/   10968 : 7200                		moveq	#0,d1
   20675/   1096A : 1228 0019           		move.b	$19(a0),d1
   20676/   1096E : 4EB9 0000 73D0      		jsr	(ExitPlatform).l
   20677/   10974 : 3F28 0008           		move.w	8(a0),-(sp)
   20678/   10978 : 6100 0010           		bsr.w	Obj59_Types
   20679/   1097C : 341F                		move.w	(sp)+,d2
   20680/   1097E : 4A10                		tst.b	0(a0)
   20681/   10980 : 6706                		beq.s	locret_10BD4
   20682/   10982 : 4EF9 0000 793A      		jmp	(MvSonicOnPtfm2).l
   20683/   10988 :                     ; ===========================================================================
   20684/   10988 :                     
   20685/   10988 :                     locret_10BD4:
   20686/   10988 : 4E75                		rts	
   20687/   1098A :                     ; ===========================================================================
   20688/   1098A :                     
   20689/   1098A :                     Obj59_Types:
   20690/   1098A : 7000                		moveq	#0,d0
   20691/   1098C : 1028 0028           		move.b	$28(a0),d0
   20692/   10990 : 0240 000F           		andi.w	#$F,d0
   20693/   10994 : D040                		add.w	d0,d0
   20694/   10996 : 323B 0006           		move.w	Obj59_TypeIndex(pc,d0.w),d1
   20695/   1099A : 4EFB 1002           		jmp	Obj59_TypeIndex(pc,d1.w)
   20696/   1099E :                     ; ===========================================================================
   20697/   1099E : 0014 0016           Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
   20698/   109A2 : 0024 0016           		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
   20699/   109A6 : 0038 0016           		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
   20700/   109AA : 004A 0016           		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
   20701/   109AE : 006C 008E           		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
   20702/   109B2 :                     ; ===========================================================================
   20703/   109B2 :                     
   20704/   109B2 :                     Obj59_Type00:				; XREF: Obj59_TypeIndex
   20705/   109B2 : 4E75                		rts	
   20706/   109B4 :                     ; ===========================================================================
   20707/   109B4 :                     
   20708/   109B4 :                     Obj59_Type01:				; XREF: Obj59_TypeIndex
   20709/   109B4 : 0C28 0004 0024      		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
   20710/   109BA : 6604                		bne.s	locret_10C0C
   20711/   109BC : 5228 0028           		addq.b	#1,$28(a0)	; if yes, add 1	to type
   20712/   109C0 :                     
   20713/   109C0 :                     locret_10C0C:
   20714/   109C0 : 4E75                		rts	
   20715/   109C2 :                     ; ===========================================================================
   20716/   109C2 :                     
   20717/   109C2 :                     Obj59_Type02:				; XREF: Obj59_TypeIndex
   20718/   109C2 : 6100 00A2           		bsr.w	Obj59_Move
   20719/   109C6 : 3028 0034           		move.w	$34(a0),d0
   20720/   109CA : 4440                		neg.w	d0
   20721/   109CC : D068 0030           		add.w	$30(a0),d0
   20722/   109D0 : 3140 000C           		move.w	d0,$C(a0)
   20723/   109D4 : 4E75                		rts	
   20724/   109D6 :                     ; ===========================================================================
   20725/   109D6 :                     
   20726/   109D6 :                     Obj59_Type04:				; XREF: Obj59_TypeIndex
   20727/   109D6 : 6100 008E           		bsr.w	Obj59_Move
   20728/   109DA : 3028 0034           		move.w	$34(a0),d0
   20729/   109DE : D068 0030           		add.w	$30(a0),d0
   20730/   109E2 : 3140 000C           		move.w	d0,$C(a0)
   20731/   109E6 : 4E75                		rts	
   20732/   109E8 :                     ; ===========================================================================
   20733/   109E8 :                     
   20734/   109E8 :                     Obj59_Type06:				; XREF: Obj59_TypeIndex
   20735/   109E8 : 6100 007C           		bsr.w	Obj59_Move
   20736/   109EC : 3028 0034           		move.w	$34(a0),d0
   20737/   109F0 : E240                		asr.w	#1,d0
   20738/   109F2 : 4440                		neg.w	d0
   20739/   109F4 : D068 0030           		add.w	$30(a0),d0
   20740/   109F8 : 3140 000C           		move.w	d0,$C(a0)
   20741/   109FC : 3028 0034           		move.w	$34(a0),d0
   20742/   10A00 : D068 0032           		add.w	$32(a0),d0
   20743/   10A04 : 3140 0008           		move.w	d0,8(a0)
   20744/   10A08 : 4E75                		rts	
   20745/   10A0A :                     ; ===========================================================================
   20746/   10A0A :                     
   20747/   10A0A :                     Obj59_Type08:				; XREF: Obj59_TypeIndex
   20748/   10A0A : 6100 005A           		bsr.w	Obj59_Move
   20749/   10A0E : 3028 0034           		move.w	$34(a0),d0
   20750/   10A12 : E240                		asr.w	#1,d0
   20751/   10A14 : D068 0030           		add.w	$30(a0),d0
   20752/   10A18 : 3140 000C           		move.w	d0,$C(a0)
   20753/   10A1C : 3028 0034           		move.w	$34(a0),d0
   20754/   10A20 : 4440                		neg.w	d0
   20755/   10A22 : D068 0032           		add.w	$32(a0),d0
   20756/   10A26 : 3140 0008           		move.w	d0,8(a0)
   20757/   10A2A : 4E75                		rts	
   20758/   10A2C :                     ; ===========================================================================
   20759/   10A2C :                     
   20760/   10A2C :                     Obj59_Type09:				; XREF: Obj59_TypeIndex
   20761/   10A2C : 6100 0038           		bsr.w	Obj59_Move
   20762/   10A30 : 3028 0034           		move.w	$34(a0),d0
   20763/   10A34 : 4440                		neg.w	d0
   20764/   10A36 : D068 0030           		add.w	$30(a0),d0
   20765/   10A3A : 3140 000C           		move.w	d0,$C(a0)
   20766/   10A3E : 4A28 0028           		tst.b	$28(a0)
   20767/   10A42 : 6700 0004           		beq.w	loc_10C94
   20768/   10A46 : 4E75                		rts	
   20769/   10A48 :                     ; ===========================================================================
   20770/   10A48 :                     
   20771/   10A48 :                     loc_10C94:
   20772/   10A48 : 0828 0003 0022      		btst	#3,$22(a0)
   20773/   10A4E : 6712                		beq.s	Obj59_Delete
   20774/   10A50 : 08E9 0001 0022      		bset	#1,$22(a1)
   20775/   10A56 : 08A9 0003 0022      		bclr	#3,$22(a1)
   20776/   10A5C : 137C 0002 0024      		move.b	#2,$24(a1)
   20777/   10A62 :                     
   20778/   10A62 :                     Obj59_Delete:
   20779/   10A62 : 6000 C9AA           		bra.w	DeleteObject
   20780/   10A66 :                     
   20781/   10A66 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   20782/   10A66 :                     
   20783/   10A66 :                     
   20784/   10A66 :                     Obj59_Move:				; XREF: Obj59_Type02; et al
   20785/   10A66 : 3028 0038           		move.w	$38(a0),d0
   20786/   10A6A : 4A28 003A           		tst.b	$3A(a0)
   20787/   10A6E : 660C                		bne.s	loc_10CC8
   20788/   10A70 : 0C40 0800           		cmpi.w	#$800,d0
   20789/   10A74 : 640E                		bcc.s	loc_10CD0
   20790/   10A76 : 0640 0010           		addi.w	#$10,d0
   20791/   10A7A : 6008                		bra.s	loc_10CD0
   20792/   10A7C :                     ; ===========================================================================
   20793/   10A7C :                     
   20794/   10A7C :                     loc_10CC8:
   20795/   10A7C : 4A40                		tst.w	d0
   20796/   10A7E : 6704                		beq.s	loc_10CD0
   20797/   10A80 : 0440 0010           		subi.w	#$10,d0
   20798/   10A84 :                     
   20799/   10A84 :                     loc_10CD0:
   20800/   10A84 : 3140 0038           		move.w	d0,$38(a0)
   20801/   10A88 : 48C0                		ext.l	d0
   20802/   10A8A : E180                		asl.l	#8,d0
   20803/   10A8C : D0A8 0034           		add.l	$34(a0),d0
   20804/   10A90 : 2140 0034           		move.l	d0,$34(a0)
   20805/   10A94 : 4840                		swap	d0
   20806/   10A96 : 3428 003C           		move.w	$3C(a0),d2
   20807/   10A9A : B042                		cmp.w	d2,d0
   20808/   10A9C : 6306                		bls.s	loc_10CF0
   20809/   10A9E : 117C 0001 003A      		move.b	#1,$3A(a0)
   20810/   10AA4 :                     
   20811/   10AA4 :                     loc_10CF0:
   20812/   10AA4 : D442                		add.w	d2,d2
   20813/   10AA6 : B042                		cmp.w	d2,d0
   20814/   10AA8 : 6604                		bne.s	locret_10CFA
   20815/   10AAA : 4228 0028           		clr.b	$28(a0)
   20816/   10AAE :                     
   20817/   10AAE :                     locret_10CFA:
   20818/   10AAE : 4E75                		rts	
   20819/   10AB0 :                     ; End of function Obj59_Move
   20820/   10AB0 :                     
   20821/   10AB0 :                     ; ===========================================================================
   20822/   10AB0 :                     
   20823/   10AB0 :                     Obj59_MakeMulti:			; XREF: Obj59_Index
   20824/   10AB0 : 5368 003C           		subq.w	#1,$3C(a0)
   20825/   10AB4 : 6622                		bne.s	Obj59_ChkDel
   20826/   10AB6 : 3168 003E 003C      		move.w	$3E(a0),$3C(a0)
   20827/   10ABC : 6100 CD9A           		bsr.w	SingleObjLoad
   20828/   10AC0 : 6616                		bne.s	Obj59_ChkDel
   20829/   10AC2 : 12BC 0059           		move.b	#$59,0(a1)	; duplicate the	object
   20830/   10AC6 : 3368 0008 0008      		move.w	8(a0),8(a1)
   20831/   10ACC : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   20832/   10AD2 : 137C 000E 0028      		move.b	#$E,$28(a1)
   20833/   10AD8 :                     
   20834/   10AD8 :                     Obj59_ChkDel:
   20835/   10AD8 : 588F                		addq.l	#4,sp
   20836/   10ADA : 3028 0008           		move.w	8(a0),d0
   20837/   10ADE : 0240 FF80           		andi.w	#$FF80,d0
   20838/   10AE2 : 3238 F700           		move.w	($FFFFF700).w,d1
   20839/   10AE6 : 0441 0080           		subi.w	#$80,d1
   20840/   10AEA : 0241 FF80           		andi.w	#$FF80,d1
   20841/   10AEE : 9041                		sub.w	d1,d0
   20842/   10AF0 : 0C40 0280           		cmpi.w	#$280,d0
   20843/   10AF4 : 6200 C918           		bhi.w	DeleteObject
   20844/   10AF8 : 4E75                		rts	
   20845/   10AFA :                     ; ===========================================================================
   20846/   10AFA :                     ; ---------------------------------------------------------------------------
   20847/   10AFA :                     ; Sprite mappings - platforms that move	when you stand on them (SLZ)
   20848/   10AFA :                     ; ---------------------------------------------------------------------------
   20849/   10AFA :                     Map_obj59:
   20850/   10AFA :                     	include "_mappings/obj59.asm"
(1)    1/   10AFA :                     ; ---------------------------------------------------------------------------
(1)    2/   10AFA :                     ; Sprite mappings - platforms that move	when you stand on them (SLZ)
(1)    3/   10AFA :                     ; ---------------------------------------------------------------------------
(1)    4/   10AFA : 0002                		dc.w byte_10D4A-Map_obj59
(1)    5/   10AFC : 03                  byte_10D4A:	dc.b 3
(1)    6/   10AFD : F80F 0041 D8        		dc.b $F8, $F, 0, $41, $D8
(1)    7/   10B02 : F80F 0041 F8        		dc.b $F8, $F, 0, $41, $F8
(1)    8/   10B07 : F807 0041 18        		dc.b $F8, 7, 0,	$41, $18
(1)    9/   10B0C : (MACRO)              		even
   20851/   10B0C :                     
   20852/   10B0C :                     ; ===========================================================================
   20853/   10B0C :                     ; ---------------------------------------------------------------------------
   20854/   10B0C :                     ; Object 5A - platforms	moving in circles (SLZ)
   20855/   10B0C :                     ; ---------------------------------------------------------------------------
   20856/   10B0C :                     
   20857/   10B0C :                     Obj5A:					; XREF: Obj_Index
   20858/   10B0C : 7000                		moveq	#0,d0
   20859/   10B0E : 1028 0024           		move.b	$24(a0),d0
   20860/   10B12 : 323B 0028           		move.w	Obj5A_Index(pc,d0.w),d1
   20861/   10B16 : 4EBB 1024           		jsr	Obj5A_Index(pc,d1.w)
   20862/   10B1A : 3028 0032           		move.w	$32(a0),d0
   20863/   10B1E : 0240 FF80           		andi.w	#$FF80,d0
   20864/   10B22 : 3238 F700           		move.w	($FFFFF700).w,d1
   20865/   10B26 : 0441 0080           		subi.w	#$80,d1
   20866/   10B2A : 0241 FF80           		andi.w	#$FF80,d1
   20867/   10B2E : 9041                		sub.w	d1,d0
   20868/   10B30 : 0C40 0280           		cmpi.w	#$280,d0
   20869/   10B34 : 6200 C8D8           		bhi.w	DeleteObject
   20870/   10B38 : 6000 C898           		bra.w	DisplaySprite
   20871/   10B3C :                     ; ===========================================================================
   20872/   10B3C : 0006                Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
   20873/   10B3E : 0036                		dc.w Obj5A_Platform-Obj5A_Index
   20874/   10B40 : 0046                		dc.w Obj5A_Action-Obj5A_Index
   20875/   10B42 :                     ; ===========================================================================
   20876/   10B42 :                     
   20877/   10B42 :                     Obj5A_Main:				; XREF: Obj5A_Index
   20878/   10B42 : 5428 0024           		addq.b	#2,$24(a0)
   20879/   10B46 : 217C 0001 0C34      		move.l	#Map_obj5A,4(a0)
            10B4C : 0004             
   20880/   10B4E : 317C 4000 0002      		move.w	#$4000,2(a0)
   20881/   10B54 : 117C 0004 0001      		move.b	#4,1(a0)
   20882/   10B5A : 117C 0004 0018      		move.b	#4,$18(a0)
   20883/   10B60 : 117C 0018 0019      		move.b	#$18,$19(a0)
   20884/   10B66 : 3168 0008 0032      		move.w	8(a0),$32(a0)
   20885/   10B6C : 3168 000C 0030      		move.w	$C(a0),$30(a0)
   20886/   10B72 :                     
   20887/   10B72 :                     Obj5A_Platform:				; XREF: Obj5A_Index
   20888/   10B72 : 7200                		moveq	#0,d1
   20889/   10B74 : 1228 0019           		move.b	$19(a0),d1
   20890/   10B78 : 4EB9 0000 725C      		jsr	(PlatformObject).l
   20891/   10B7E : 6000 001E           		bra.w	Obj5A_Types
   20892/   10B82 :                     ; ===========================================================================
   20893/   10B82 :                     
   20894/   10B82 :                     Obj5A_Action:				; XREF: Obj5A_Index
   20895/   10B82 : 7200                		moveq	#0,d1
   20896/   10B84 : 1228 0019           		move.b	$19(a0),d1
   20897/   10B88 : 4EB9 0000 73D0      		jsr	(ExitPlatform).l
   20898/   10B8E : 3F28 0008           		move.w	8(a0),-(sp)
   20899/   10B92 : 6100 000A           		bsr.w	Obj5A_Types
   20900/   10B96 : 341F                		move.w	(sp)+,d2
   20901/   10B98 : 4EF9 0000 793A      		jmp	(MvSonicOnPtfm2).l
   20902/   10B9E :                     ; ===========================================================================
   20903/   10B9E :                     
   20904/   10B9E :                     Obj5A_Types:
   20905/   10B9E : 7000                		moveq	#0,d0
   20906/   10BA0 : 1028 0028           		move.b	$28(a0),d0
   20907/   10BA4 : 0240 000C           		andi.w	#$C,d0
   20908/   10BA8 : E248                		lsr.w	#1,d0
   20909/   10BAA : 323B 0006           		move.w	Obj5A_TypeIndex(pc,d0.w),d1
   20910/   10BAE : 4EFB 1002           		jmp	Obj5A_TypeIndex(pc,d1.w)
   20911/   10BB2 :                     ; ===========================================================================
   20912/   10BB2 : 0004                Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
   20913/   10BB4 : 0042                		dc.w Obj5A_Type04-Obj5A_TypeIndex
   20914/   10BB6 :                     ; ===========================================================================
   20915/   10BB6 :                     
   20916/   10BB6 :                     Obj5A_Type00:				; XREF: Obj5A_TypeIndex
   20917/   10BB6 : 1238 FE80           		move.b	($FFFFFE80).w,d1
   20918/   10BBA : 0401 0050           		subi.b	#$50,d1
   20919/   10BBE : 4881                		ext.w	d1
   20920/   10BC0 : 1438 FE84           		move.b	($FFFFFE84).w,d2
   20921/   10BC4 : 0402 0050           		subi.b	#$50,d2
   20922/   10BC8 : 4882                		ext.w	d2
   20923/   10BCA : 0828 0000 0028      		btst	#0,$28(a0)
   20924/   10BD0 : 6704                		beq.s	loc_10E24
   20925/   10BD2 : 4441                		neg.w	d1
   20926/   10BD4 : 4442                		neg.w	d2
   20927/   10BD6 :                     
   20928/   10BD6 :                     loc_10E24:
   20929/   10BD6 : 0828 0001 0028      		btst	#1,$28(a0)
   20930/   10BDC : 6704                		beq.s	loc_10E30
   20931/   10BDE : 4441                		neg.w	d1
   20932/   10BE0 : C342                		exg	d1,d2
   20933/   10BE2 :                     
   20934/   10BE2 :                     loc_10E30:
   20935/   10BE2 : D268 0032           		add.w	$32(a0),d1
   20936/   10BE6 : 3141 0008           		move.w	d1,8(a0)
   20937/   10BEA : D468 0030           		add.w	$30(a0),d2
   20938/   10BEE : 3142 000C           		move.w	d2,$C(a0)
   20939/   10BF2 : 4E75                		rts	
   20940/   10BF4 :                     ; ===========================================================================
   20941/   10BF4 :                     
   20942/   10BF4 :                     Obj5A_Type04:				; XREF: Obj5A_TypeIndex
   20943/   10BF4 : 1238 FE80           		move.b	($FFFFFE80).w,d1
   20944/   10BF8 : 0401 0050           		subi.b	#$50,d1
   20945/   10BFC : 4881                		ext.w	d1
   20946/   10BFE : 1438 FE84           		move.b	($FFFFFE84).w,d2
   20947/   10C02 : 0402 0050           		subi.b	#$50,d2
   20948/   10C06 : 4882                		ext.w	d2
   20949/   10C08 : 0828 0000 0028      		btst	#0,$28(a0)
   20950/   10C0E : 6704                		beq.s	loc_10E62
   20951/   10C10 : 4441                		neg.w	d1
   20952/   10C12 : 4442                		neg.w	d2
   20953/   10C14 :                     
   20954/   10C14 :                     loc_10E62:
   20955/   10C14 : 0828 0001 0028      		btst	#1,$28(a0)
   20956/   10C1A : 6704                		beq.s	loc_10E6E
   20957/   10C1C : 4441                		neg.w	d1
   20958/   10C1E : C342                		exg	d1,d2
   20959/   10C20 :                     
   20960/   10C20 :                     loc_10E6E:
   20961/   10C20 : 4441                		neg.w	d1
   20962/   10C22 : D268 0032           		add.w	$32(a0),d1
   20963/   10C26 : 3141 0008           		move.w	d1,8(a0)
   20964/   10C2A : D468 0030           		add.w	$30(a0),d2
   20965/   10C2E : 3142 000C           		move.w	d2,$C(a0)
   20966/   10C32 : 4E75                		rts	
   20967/   10C34 :                     ; ===========================================================================
   20968/   10C34 :                     ; ---------------------------------------------------------------------------
   20969/   10C34 :                     ; Sprite mappings - platforms that move	in circles (SLZ)
   20970/   10C34 :                     ; ---------------------------------------------------------------------------
   20971/   10C34 :                     Map_obj5A:
   20972/   10C34 :                     	include "_mappings/obj5A.asm"
(1)    1/   10C34 :                     ; ---------------------------------------------------------------------------
(1)    2/   10C34 :                     ; Sprite mappings - platforms that move	in circles (SLZ)
(1)    3/   10C34 :                     ; ---------------------------------------------------------------------------
(1)    4/   10C34 : 0002                		dc.w byte_10E84-Map_obj5A
(1)    5/   10C36 : 02                  byte_10E84:	dc.b 2
(1)    6/   10C37 : F809 0051 E8        		dc.b $F8, 9, 0,	$51, $E8
(1)    7/   10C3C : F809 0851 00        		dc.b $F8, 9, 8,	$51, 0
(1)    8/   10C41 : (MACRO)              		even
(1)    8/   10C41 : 00                                          dc.b 0 ;ds.b 1 
   20973/   10C42 :                     
   20974/   10C42 :                     ; ===========================================================================
   20975/   10C42 :                     ; ---------------------------------------------------------------------------
   20976/   10C42 :                     ; Object 5B - blocks that form a staircase (SLZ)
   20977/   10C42 :                     ; ---------------------------------------------------------------------------
   20978/   10C42 :                     
   20979/   10C42 :                     Obj5B:					; XREF: Obj_Index
   20980/   10C42 : 7000                		moveq	#0,d0
   20981/   10C44 : 1028 0024           		move.b	$24(a0),d0
   20982/   10C48 : 323B 0028           		move.w	Obj5B_Index(pc,d0.w),d1
   20983/   10C4C : 4EBB 1024           		jsr	Obj5B_Index(pc,d1.w)
   20984/   10C50 : 3028 0030           		move.w	$30(a0),d0
   20985/   10C54 : 0240 FF80           		andi.w	#$FF80,d0
   20986/   10C58 : 3238 F700           		move.w	($FFFFF700).w,d1
   20987/   10C5C : 0441 0080           		subi.w	#$80,d1
   20988/   10C60 : 0241 FF80           		andi.w	#$FF80,d1
   20989/   10C64 : 9041                		sub.w	d1,d0
   20990/   10C66 : 0C40 0280           		cmpi.w	#$280,d0
   20991/   10C6A : 6200 C7A2           		bhi.w	DeleteObject
   20992/   10C6E : 6000 C762           		bra.w	DisplaySprite
   20993/   10C72 :                     ; ===========================================================================
   20994/   10C72 : 0006                Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
   20995/   10C74 : 0084                		dc.w Obj5B_Move-Obj5B_Index
   20996/   10C76 : 0098                		dc.w Obj5B_Solid-Obj5B_Index
   20997/   10C78 :                     ; ===========================================================================
   20998/   10C78 :                     
   20999/   10C78 :                     Obj5B_Main:				; XREF: Obj5B_Index
   21000/   10C78 : 5428 0024           		addq.b	#2,$24(a0)
   21001/   10C7C : 7638                		moveq	#$38,d3
   21002/   10C7E : 7801                		moveq	#1,d4
   21003/   10C80 : 0828 0000 0022      		btst	#0,$22(a0)
   21004/   10C86 : 6704                		beq.s	loc_10EDA
   21005/   10C88 : 763B                		moveq	#$3B,d3
   21006/   10C8A : 78FF                		moveq	#-1,d4
   21007/   10C8C :                     
   21008/   10C8C :                     loc_10EDA:
   21009/   10C8C : 3428 0008           		move.w	8(a0),d2
   21010/   10C90 : 2248                		movea.l	a0,a1
   21011/   10C92 : 7203                		moveq	#3,d1
   21012/   10C94 : 600E                		bra.s	Obj5B_MakeBlocks
   21013/   10C96 :                     ; ===========================================================================
   21014/   10C96 :                     
   21015/   10C96 :                     Obj5B_Loop:
   21016/   10C96 : 6100 CBD6           		bsr.w	SingleObjLoad2
   21017/   10C9A : 6600 005A           		bne.w	Obj5B_Move
   21018/   10C9E : 137C 0004 0024      		move.b	#4,$24(a1)
   21019/   10CA4 :                     
   21020/   10CA4 :                     Obj5B_MakeBlocks:			; XREF: Obj5B_Main
   21021/   10CA4 : 12BC 005B           		move.b	#$5B,0(a1)	; load another block object
   21022/   10CA8 : 237C 0001 0DEC      		move.l	#Map_obj5B,4(a1)
            10CAE : 0004             
   21023/   10CB0 : 337C 4000 0002      		move.w	#$4000,2(a1)
   21024/   10CB6 : 137C 0004 0001      		move.b	#4,1(a1)
   21025/   10CBC : 137C 0003 0018      		move.b	#3,$18(a1)
   21026/   10CC2 : 137C 0010 0019      		move.b	#$10,$19(a1)
   21027/   10CC8 : 1368 0028 0028      		move.b	$28(a0),$28(a1)
   21028/   10CCE : 3342 0008           		move.w	d2,8(a1)
   21029/   10CD2 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   21030/   10CD8 : 3368 0008 0030      		move.w	8(a0),$30(a1)
   21031/   10CDE : 3369 000C 0032      		move.w	$C(a1),$32(a1)
   21032/   10CE4 : 0642 0020           		addi.w	#$20,d2
   21033/   10CE8 : 1343 0037           		move.b	d3,$37(a1)
   21034/   10CEC : 2348 003C           		move.l	a0,$3C(a1)
   21035/   10CF0 : D604                		add.b	d4,d3
   21036/   10CF2 : 51C9 FFA2           		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
   21037/   10CF6 :                     
   21038/   10CF6 :                     Obj5B_Move:				; XREF: Obj5B_Index
   21039/   10CF6 : 7000                		moveq	#0,d0
   21040/   10CF8 : 1028 0028           		move.b	$28(a0),d0
   21041/   10CFC : 0240 0007           		andi.w	#7,d0
   21042/   10D00 : D040                		add.w	d0,d0
   21043/   10D02 : 323B 004E           		move.w	Obj5B_TypeIndex(pc,d0.w),d1
   21044/   10D06 : 4EBB 104A           		jsr	Obj5B_TypeIndex(pc,d1.w)
   21045/   10D0A :                     
   21046/   10D0A :                     Obj5B_Solid:				; XREF: Obj5B_Index
   21047/   10D0A : 2468 003C           		movea.l	$3C(a0),a2
   21048/   10D0E : 7000                		moveq	#0,d0
   21049/   10D10 : 1028 0037           		move.b	$37(a0),d0
   21050/   10D14 : 1032 0000           		move.b	(a2,d0.w),d0
   21051/   10D18 : D068 0032           		add.w	$32(a0),d0
   21052/   10D1C : 3140 000C           		move.w	d0,$C(a0)
   21053/   10D20 : 7200                		moveq	#0,d1
   21054/   10D22 : 1228 0019           		move.b	$19(a0),d1
   21055/   10D26 : 0641 000B           		addi.w	#$B,d1
   21056/   10D2A : 343C 0010           		move.w	#$10,d2
   21057/   10D2E : 363C 0011           		move.w	#$11,d3
   21058/   10D32 : 3828 0008           		move.w	8(a0),d4
   21059/   10D36 : 6100 EA5A           		bsr.w	SolidObject
   21060/   10D3A : 4A04                		tst.b	d4
   21061/   10D3C : 6A04                		bpl.s	loc_10F92
   21062/   10D3E : 1544 0036           		move.b	d4,$36(a2)
   21063/   10D42 :                     
   21064/   10D42 :                     loc_10F92:
   21065/   10D42 : 0828 0003 0022      		btst	#3,$22(a0)
   21066/   10D48 : 6706                		beq.s	locret_10FA0
   21067/   10D4A : 157C 0001 0036      		move.b	#1,$36(a2)
   21068/   10D50 :                     
   21069/   10D50 :                     locret_10FA0:
   21070/   10D50 : 4E75                		rts	
   21071/   10D52 :                     ; ===========================================================================
   21072/   10D52 : 0008                Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
   21073/   10D54 : 006E                		dc.w Obj5B_Type01-Obj5B_TypeIndex
   21074/   10D56 : 002A                		dc.w Obj5B_Type02-Obj5B_TypeIndex
   21075/   10D58 : 006E                		dc.w Obj5B_Type01-Obj5B_TypeIndex
   21076/   10D5A :                     ; ===========================================================================
   21077/   10D5A :                     
   21078/   10D5A :                     Obj5B_Type00:				; XREF: Obj5B_TypeIndex
   21079/   10D5A : 4A68 0034           		tst.w	$34(a0)
   21080/   10D5E : 6610                		bne.s	loc_10FC0
   21081/   10D60 : 0C28 0001 0036      		cmpi.b	#1,$36(a0)
   21082/   10D66 : 6606                		bne.s	locret_10FBE
   21083/   10D68 : 317C 001E 0034      		move.w	#$1E,$34(a0)
   21084/   10D6E :                     
   21085/   10D6E :                     locret_10FBE:
   21086/   10D6E : 4E75                		rts	
   21087/   10D70 :                     ; ===========================================================================
   21088/   10D70 :                     
   21089/   10D70 :                     loc_10FC0:
   21090/   10D70 : 5368 0034           		subq.w	#1,$34(a0)
   21091/   10D74 : 66F8                		bne.s	locret_10FBE
   21092/   10D76 : 5228 0028           		addq.b	#1,$28(a0)	; add 1	to type
   21093/   10D7A : 4E75                		rts	
   21094/   10D7C :                     ; ===========================================================================
   21095/   10D7C :                     
   21096/   10D7C :                     Obj5B_Type02:				; XREF: Obj5B_TypeIndex
   21097/   10D7C : 4A68 0034           		tst.w	$34(a0)
   21098/   10D80 : 660E                		bne.s	loc_10FE0
   21099/   10D82 : 4A28 0036           		tst.b	$36(a0)
   21100/   10D86 : 6A06                		bpl.s	locret_10FDE
   21101/   10D88 : 317C 003C 0034      		move.w	#$3C,$34(a0)
   21102/   10D8E :                     
   21103/   10D8E :                     locret_10FDE:
   21104/   10D8E : 4E75                		rts	
   21105/   10D90 :                     ; ===========================================================================
   21106/   10D90 :                     
   21107/   10D90 :                     loc_10FE0:
   21108/   10D90 : 5368 0034           		subq.w	#1,$34(a0)
   21109/   10D94 : 6606                		bne.s	loc_10FEC
   21110/   10D96 : 5228 0028           		addq.b	#1,$28(a0)	; add 1	to type
   21111/   10D9A : 4E75                		rts	
   21112/   10D9C :                     ; ===========================================================================
   21113/   10D9C :                     
   21114/   10D9C :                     loc_10FEC:
   21115/   10D9C : 43E8 0038           		lea	$38(a0),a1
   21116/   10DA0 : 3028 0034           		move.w	$34(a0),d0
   21117/   10DA4 : E408                		lsr.b	#2,d0
   21118/   10DA6 : 0200 0001           		andi.b	#1,d0
   21119/   10DAA : 12C0                		move.b	d0,(a1)+
   21120/   10DAC : 0A00 0001           		eori.b	#1,d0
   21121/   10DB0 : 12C0                		move.b	d0,(a1)+
   21122/   10DB2 : 0A00 0001           		eori.b	#1,d0
   21123/   10DB6 : 12C0                		move.b	d0,(a1)+
   21124/   10DB8 : 0A00 0001           		eori.b	#1,d0
   21125/   10DBC : 12C0                		move.b	d0,(a1)+
   21126/   10DBE : 4E75                		rts	
   21127/   10DC0 :                     ; ===========================================================================
   21128/   10DC0 :                     
   21129/   10DC0 :                     Obj5B_Type01:				; XREF: Obj5B_TypeIndex
   21130/   10DC0 : 43E8 0038           		lea	$38(a0),a1
   21131/   10DC4 : 0C11 0080           		cmpi.b	#$80,(a1)
   21132/   10DC8 : 671E                		beq.s	locret_11038
   21133/   10DCA : 5211                		addq.b	#1,(a1)
   21134/   10DCC : 7200                		moveq	#0,d1
   21135/   10DCE : 1219                		move.b	(a1)+,d1
   21136/   10DD0 : 4841                		swap	d1
   21137/   10DD2 : E289                		lsr.l	#1,d1
   21138/   10DD4 : 2401                		move.l	d1,d2
   21139/   10DD6 : E289                		lsr.l	#1,d1
   21140/   10DD8 : 2601                		move.l	d1,d3
   21141/   10DDA : D682                		add.l	d2,d3
   21142/   10DDC : 4841                		swap	d1
   21143/   10DDE : 4842                		swap	d2
   21144/   10DE0 : 4843                		swap	d3
   21145/   10DE2 : 12C3                		move.b	d3,(a1)+
   21146/   10DE4 : 12C2                		move.b	d2,(a1)+
   21147/   10DE6 : 12C1                		move.b	d1,(a1)+
   21148/   10DE8 :                     
   21149/   10DE8 :                     locret_11038:
   21150/   10DE8 : 4E75                		rts	
   21151/   10DEA : 4E75                		rts	
   21152/   10DEC :                     ; ===========================================================================
   21153/   10DEC :                     ; ---------------------------------------------------------------------------
   21154/   10DEC :                     ; Sprite mappings - blocks that	form a staircase (SLZ)
   21155/   10DEC :                     ; ---------------------------------------------------------------------------
   21156/   10DEC :                     Map_obj5B:
   21157/   10DEC :                     	include "_mappings/obj5B.asm"
(1)    1/   10DEC :                     ; ---------------------------------------------------------------------------
(1)    2/   10DEC :                     ; Sprite mappings - blocks that	form a staircase (SLZ)
(1)    3/   10DEC :                     ; ---------------------------------------------------------------------------
(1)    4/   10DEC : 0002                		dc.w byte_1103E-Map_obj5B
(1)    5/   10DEE : 01                  byte_1103E:	dc.b 1
(1)    6/   10DEF : F00F 0021 F0        		dc.b $F0, $F, 0, $21, $F0
(1)    7/   10DF4 : (MACRO)              		even
   21158/   10DF4 :                     
   21159/   10DF4 :                     ; ===========================================================================
   21160/   10DF4 :                     ; ---------------------------------------------------------------------------
   21161/   10DF4 :                     ; Object 5C - metal girders in foreground (SLZ)
   21162/   10DF4 :                     ; ---------------------------------------------------------------------------
   21163/   10DF4 :                     
   21164/   10DF4 :                     Obj5C:					; XREF: Obj_Index
   21165/   10DF4 : 7000                		moveq	#0,d0
   21166/   10DF6 : 1028 0024           		move.b	$24(a0),d0
   21167/   10DFA : 323B 0006           		move.w	Obj5C_Index(pc,d0.w),d1
   21168/   10DFE : 4EFB 1002           		jmp	Obj5C_Index(pc,d1.w)
   21169/   10E02 :                     ; ===========================================================================
   21170/   10E02 : 0004                Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
   21171/   10E04 : 001C                		dc.w Obj5C_Display-Obj5C_Index
   21172/   10E06 :                     ; ===========================================================================
   21173/   10E06 :                     
   21174/   10E06 :                     Obj5C_Main:				; XREF: Obj5C_Index
   21175/   10E06 : 5428 0024           		addq.b	#2,$24(a0)
   21176/   10E0A : 217C 0001 0E46      		move.l	#Map_obj5C,4(a0)
            10E10 : 0004             
   21177/   10E12 : 317C 83CC 0002      		move.w	#$83CC,2(a0)
   21178/   10E18 : 117C 0010 0019      		move.b	#$10,$19(a0)
   21179/   10E1E :                     
   21180/   10E1E :                     Obj5C_Display:				; XREF: Obj5C_Index
   21181/   10E1E : 2238 F700           		move.l	($FFFFF700).w,d1
   21182/   10E22 : D281                		add.l	d1,d1
   21183/   10E24 : 4841                		swap	d1
   21184/   10E26 : 4441                		neg.w	d1
   21185/   10E28 : 3141 0008           		move.w	d1,8(a0)
   21186/   10E2C : 2238 F704           		move.l	($FFFFF704).w,d1
   21187/   10E30 : D281                		add.l	d1,d1
   21188/   10E32 : 4841                		swap	d1
   21189/   10E34 : 0241 003F           		andi.w	#$3F,d1
   21190/   10E38 : 4441                		neg.w	d1
   21191/   10E3A : 0641 0100           		addi.w	#$100,d1
   21192/   10E3E : 3141 000A           		move.w	d1,$A(a0)
   21193/   10E42 : 6000 C58E           		bra.w	DisplaySprite
   21194/   10E46 :                     ; ===========================================================================
   21195/   10E46 :                     ; ---------------------------------------------------------------------------
   21196/   10E46 :                     ; Sprite mappings - metal girders in foreground	(SLZ)
   21197/   10E46 :                     ; ---------------------------------------------------------------------------
   21198/   10E46 :                     Map_obj5C:
   21199/   10E46 :                     	include "_mappings/obj5C.asm"
(1)    1/   10E46 :                     ; ---------------------------------------------------------------------------
(1)    2/   10E46 :                     ; Sprite mappings - metal girders in foreground	(SLZ)
(1)    3/   10E46 :                     ; ---------------------------------------------------------------------------
(1)    4/   10E46 : 0002                		dc.w byte_11098-Map_obj5C
(1)    5/   10E48 : 09                  byte_11098:	dc.b 9
(1)    6/   10E49 : 800F 0000 F0        		dc.b $80, $F, 0, 0, $F0
(1)    7/   10E4E : A00F 1000 F0        		dc.b $A0, $F, $10, 0, $F0
(1)    8/   10E53 : C00F 0000 F0        		dc.b $C0, $F, 0, 0, $F0
(1)    9/   10E58 : E00F 1000 F0        		dc.b $E0, $F, $10, 0, $F0
(1)   10/   10E5D : 000F 0000 F0        		dc.b 0,	$F, 0, 0, $F0
(1)   11/   10E62 : 200F 1000 F0        		dc.b $20, $F, $10, 0, $F0
(1)   12/   10E67 : 400F 0000 F0        		dc.b $40, $F, 0, 0, $F0
(1)   13/   10E6C : 600F 1000 F0        		dc.b $60, $F, $10, 0, $F0
(1)   14/   10E71 : 7F0F 0000 F0        		dc.b $7F, $F, 0, 0, $F0
(1)   15/   10E76 : (MACRO)              		even
   21200/   10E76 :                     
   21201/   10E76 :                     ; ===========================================================================
   21202/   10E76 :                     ; ---------------------------------------------------------------------------
   21203/   10E76 :                     ; Object 1B - water surface (LZ)
   21204/   10E76 :                     ; ---------------------------------------------------------------------------
   21205/   10E76 :                     
   21206/   10E76 :                     Obj1B:					; XREF: Obj_Index
   21207/   10E76 : 7000                		moveq	#0,d0
   21208/   10E78 : 1028 0024           		move.b	$24(a0),d0
   21209/   10E7C : 323B 0006           		move.w	Obj1B_Index(pc,d0.w),d1
   21210/   10E80 : 4EFB 1002           		jmp	Obj1B_Index(pc,d1.w)
   21211/   10E84 :                     ; ===========================================================================
   21212/   10E84 : 0004                Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
   21213/   10E86 : 0028                		dc.w Obj1B_Action-Obj1B_Index
   21214/   10E88 :                     ; ===========================================================================
   21215/   10E88 :                     
   21216/   10E88 :                     Obj1B_Main:				; XREF: Obj1B_Index
   21217/   10E88 : 5428 0024           		addq.b	#2,$24(a0)
   21218/   10E8C : 217C 0001 0F1C      		move.l	#Map_obj1B,4(a0)
            10E92 : 0004             
   21219/   10E94 : 317C C300 0002      		move.w	#$C300,2(a0)
   21220/   10E9A : 117C 0004 0001      		move.b	#4,1(a0)
   21221/   10EA0 : 117C 0080 0019      		move.b	#$80,$19(a0)
   21222/   10EA6 : 3168 0008 0030      		move.w	8(a0),$30(a0)
   21223/   10EAC :                     
   21224/   10EAC :                     Obj1B_Action:				; XREF: Obj1B_Index
   21225/   10EAC : 3238 F700           		move.w	($FFFFF700).w,d1
   21226/   10EB0 : 0241 FFE0           		andi.w	#$FFE0,d1
   21227/   10EB4 : D268 0030           		add.w	$30(a0),d1
   21228/   10EB8 : 0838 0000 FE05      		btst	#0,($FFFFFE05).w
   21229/   10EBE : 6704                		beq.s	loc_11114
   21230/   10EC0 : 0641 0020           		addi.w	#$20,d1
   21231/   10EC4 :                     
   21232/   10EC4 :                     loc_11114:
   21233/   10EC4 : 3141 0008           		move.w	d1,8(a0)	; match	obj x-position to screen position
   21234/   10EC8 : 3238 F646           		move.w	($FFFFF646).w,d1
   21235/   10ECC : 3141 000C           		move.w	d1,$C(a0)	; match	obj y-position to water	height
   21236/   10ED0 : 4A28 0032           		tst.b	$32(a0)
   21237/   10ED4 : 6614                		bne.s	Obj1B_Animate
   21238/   10ED6 : 0838 0007 F605      		btst	#7,($FFFFF605).w ; is Start button pressed?
   21239/   10EDC : 671C                		beq.s	loc_1114A	; if not, branch
   21240/   10EDE : 5628 001A           		addq.b	#3,$1A(a0)	; use different	frames
   21241/   10EE2 : 117C 0001 0032      		move.b	#1,$32(a0)	; stop animation
   21242/   10EE8 : 602E                		bra.s	Obj1B_Display
   21243/   10EEA :                     ; ===========================================================================
   21244/   10EEA :                     
   21245/   10EEA :                     Obj1B_Animate:				; XREF: loc_11114
   21246/   10EEA : 4A78 F63A           		tst.w	($FFFFF63A).w	; is the game paused?
   21247/   10EEE : 6628                		bne.s	Obj1B_Display	; if yes, branch
   21248/   10EF0 : 117C 0000 0032      		move.b	#0,$32(a0)	; resume animation
   21249/   10EF6 : 5728 001A           		subq.b	#3,$1A(a0)	; use normal frames
   21250/   10EFA :                     
   21251/   10EFA :                     loc_1114A:				; XREF: loc_11114
   21252/   10EFA : 5328 001E           		subq.b	#1,$1E(a0)
   21253/   10EFE : 6A18                		bpl.s	Obj1B_Display
   21254/   10F00 : 117C 0007 001E      		move.b	#7,$1E(a0)
   21255/   10F06 : 5228 001A           		addq.b	#1,$1A(a0)
   21256/   10F0A : 0C28 0003 001A      		cmpi.b	#3,$1A(a0)
   21257/   10F10 : 6506                		bcs.s	Obj1B_Display
   21258/   10F12 : 117C 0000 001A      		move.b	#0,$1A(a0)
   21259/   10F18 :                     
   21260/   10F18 :                     Obj1B_Display:
   21261/   10F18 : 6000 C4B8           		bra.w	DisplaySprite
   21262/   10F1C :                     ; ===========================================================================
   21263/   10F1C :                     ; ---------------------------------------------------------------------------
   21264/   10F1C :                     ; Sprite mappings - water surface (LZ)
   21265/   10F1C :                     ; ---------------------------------------------------------------------------
   21266/   10F1C :                     Map_obj1B:
   21267/   10F1C :                     	include "_mappings/obj1B.asm"
(1)    1/   10F1C :                     ; ---------------------------------------------------------------------------
(1)    2/   10F1C :                     ; Sprite mappings - water surface (LZ)
(1)    3/   10F1C :                     ; ---------------------------------------------------------------------------
(1)    4/   10F1C : 000C 001C           		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
(1)    5/   10F20 : 002C 003C           		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
(1)    6/   10F24 : 005B 007A           		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
(1)    7/   10F28 : 03                  byte_11178:	dc.b 3
(1)    8/   10F29 : FD0D 0000 A0        		dc.b $FD, $D, 0, 0, $A0
(1)    9/   10F2E : FD0D 0000 E0        		dc.b $FD, $D, 0, 0, $E0
(1)   10/   10F33 : FD0D 0000 20        		dc.b $FD, $D, 0, 0, $20
(1)   11/   10F38 : 03                  byte_11188:	dc.b 3
(1)   12/   10F39 : FD0D 0008 A0        		dc.b $FD, $D, 0, 8, $A0
(1)   13/   10F3E : FD0D 0008 E0        		dc.b $FD, $D, 0, 8, $E0
(1)   14/   10F43 : FD0D 0008 20        		dc.b $FD, $D, 0, 8, $20
(1)   15/   10F48 : 03                  byte_11198:	dc.b 3
(1)   16/   10F49 : FD0D 0800 A0        		dc.b $FD, $D, 8, 0, $A0
(1)   17/   10F4E : FD0D 0800 E0        		dc.b $FD, $D, 8, 0, $E0
(1)   18/   10F53 : FD0D 0800 20        		dc.b $FD, $D, 8, 0, $20
(1)   19/   10F58 : 06                  byte_111A8:	dc.b 6
(1)   20/   10F59 : FD0D 0000 A0        		dc.b $FD, $D, 0, 0, $A0
(1)   21/   10F5E : FD0D 0000 C0        		dc.b $FD, $D, 0, 0, $C0
(1)   22/   10F63 : FD0D 0000 E0        		dc.b $FD, $D, 0, 0, $E0
(1)   23/   10F68 : FD0D 0000 00        		dc.b $FD, $D, 0, 0, 0
(1)   24/   10F6D : FD0D 0000 20        		dc.b $FD, $D, 0, 0, $20
(1)   25/   10F72 : FD0D 0000 40        		dc.b $FD, $D, 0, 0, $40
(1)   26/   10F77 : 06                  byte_111C7:	dc.b 6
(1)   27/   10F78 : FD0D 0008 A0        		dc.b $FD, $D, 0, 8, $A0
(1)   28/   10F7D : FD0D 0008 C0        		dc.b $FD, $D, 0, 8, $C0
(1)   29/   10F82 : FD0D 0008 E0        		dc.b $FD, $D, 0, 8, $E0
(1)   30/   10F87 : FD0D 0008 00        		dc.b $FD, $D, 0, 8, 0
(1)   31/   10F8C : FD0D 0008 20        		dc.b $FD, $D, 0, 8, $20
(1)   32/   10F91 : FD0D 0008 40        		dc.b $FD, $D, 0, 8, $40
(1)   33/   10F96 : 06                  byte_111E6:	dc.b 6
(1)   34/   10F97 : FD0D 0800 A0        		dc.b $FD, $D, 8, 0, $A0
(1)   35/   10F9C : FD0D 0800 C0        		dc.b $FD, $D, 8, 0, $C0
(1)   36/   10FA1 : FD0D 0800 E0        		dc.b $FD, $D, 8, 0, $E0
(1)   37/   10FA6 : FD0D 0800 00        		dc.b $FD, $D, 8, 0, 0
(1)   38/   10FAB : FD0D 0800 20        		dc.b $FD, $D, 8, 0, $20
(1)   39/   10FB0 : FD0D 0800 40        		dc.b $FD, $D, 8, 0, $40
(1)   40/   10FB5 : (MACRO)              		even
(1)   40/   10FB5 : 00                                          dc.b 0 ;ds.b 1 
   21268/   10FB6 :                     
   21269/   10FB6 :                     ; ===========================================================================
   21270/   10FB6 :                     ; ---------------------------------------------------------------------------
   21271/   10FB6 :                     ; Object 0B - pole that	breaks (LZ)
   21272/   10FB6 :                     ; ---------------------------------------------------------------------------
   21273/   10FB6 :                     
   21274/   10FB6 :                     Obj0B:					; XREF: Obj_Index
   21275/   10FB6 : 7000                		moveq	#0,d0
   21276/   10FB8 : 1028 0024           		move.b	$24(a0),d0
   21277/   10FBC : 323B 0006           		move.w	Obj0B_Index(pc,d0.w),d1
   21278/   10FC0 : 4EFB 1002           		jmp	Obj0B_Index(pc,d1.w)
   21279/   10FC4 :                     ; ===========================================================================
   21280/   10FC4 : 0006                Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
   21281/   10FC6 : 003E                		dc.w Obj0B_Action-Obj0B_Index
   21282/   10FC8 : 010A                		dc.w Obj0B_Display-Obj0B_Index
   21283/   10FCA :                     ; ===========================================================================
   21284/   10FCA :                     
   21285/   10FCA :                     Obj0B_Main:				; XREF: Obj0B_Index
   21286/   10FCA : 5428 0024           		addq.b	#2,$24(a0)
   21287/   10FCE : 217C 0001 10D2      		move.l	#Map_obj0B,4(a0)
            10FD4 : 0004             
   21288/   10FD6 : 317C 43DE 0002      		move.w	#$43DE,2(a0)
   21289/   10FDC : 117C 0004 0001      		move.b	#4,1(a0)
   21290/   10FE2 : 117C 0008 0019      		move.b	#8,$19(a0)
   21291/   10FE8 : 117C 0004 0018      		move.b	#4,$18(a0)
   21292/   10FEE : 117C 00E1 0020      		move.b	#$E1,$20(a0)
   21293/   10FF4 : 7000                		moveq	#0,d0
   21294/   10FF6 : 1028 0028           		move.b	$28(a0),d0	; get object type
   21295/   10FFA : C0FC 003C           		mulu.w	#60,d0		; multiply by 60 (1 second)
   21296/   10FFE : 3140 0030           		move.w	d0,$30(a0)	; set breakage time
   21297/   11002 :                     
   21298/   11002 :                     Obj0B_Action:				; XREF: Obj0B_Index
   21299/   11002 : 4A28 0032           		tst.b	$32(a0)
   21300/   11006 : 6770                		beq.s	Obj0B_Grab
   21301/   11008 : 4A68 0030           		tst.w	$30(a0)
   21302/   1100C : 670E                		beq.s	Obj0B_MoveUp
   21303/   1100E : 5368 0030           		subq.w	#1,$30(a0)
   21304/   11012 : 6608                		bne.s	Obj0B_MoveUp
   21305/   11014 : 117C 0001 001A      		move.b	#1,$1A(a0)	; break	the pole
   21306/   1101A : 6046                		bra.s	Obj0B_Release
   21307/   1101C :                     ; ===========================================================================
   21308/   1101C :                     
   21309/   1101C :                     Obj0B_MoveUp:				; XREF: Obj0B_Action
   21310/   1101C : 43F8 D000           		lea	($FFFFD000).w,a1
   21311/   11020 : 3028 000C           		move.w	$C(a0),d0
   21312/   11024 : 0440 0018           		subi.w	#$18,d0
   21313/   11028 : 0838 0000 F604      		btst	#0,($FFFFF604).w ; check if "up" is pressed
   21314/   1102E : 670E                		beq.s	Obj0B_MoveDown
   21315/   11030 : 5369 000C           		subq.w	#1,$C(a1)	; move Sonic up
   21316/   11034 : B069 000C           		cmp.w	$C(a1),d0
   21317/   11038 : 6504                		bcs.s	Obj0B_MoveDown
   21318/   1103A : 3340 000C           		move.w	d0,$C(a1)
   21319/   1103E :                     
   21320/   1103E :                     Obj0B_MoveDown:
   21321/   1103E : 0640 0024           		addi.w	#$24,d0
   21322/   11042 : 0838 0001 F604      		btst	#1,($FFFFF604).w ; check if "down" is pressed
   21323/   11048 : 670E                		beq.s	Obj0B_LetGo
   21324/   1104A : 5269 000C           		addq.w	#1,$C(a1)	; move Sonic down
   21325/   1104E : B069 000C           		cmp.w	$C(a1),d0
   21326/   11052 : 6404                		bcc.s	Obj0B_LetGo
   21327/   11054 : 3340 000C           		move.w	d0,$C(a1)
   21328/   11058 :                     
   21329/   11058 :                     Obj0B_LetGo:
   21330/   11058 : 1038 F603           		move.b	($FFFFF603).w,d0
   21331/   1105C : 0240 0070           		andi.w	#$70,d0
   21332/   11060 : 676C                		beq.s	Obj0B_Display
   21333/   11062 :                     
   21334/   11062 :                     Obj0B_Release:				; XREF: Obj0B_Action
   21335/   11062 : 4228 0020           		clr.b	$20(a0)
   21336/   11066 : 5428 0024           		addq.b	#2,$24(a0)
   21337/   1106A : 4238 F7C8           		clr.b	($FFFFF7C8).w
   21338/   1106E : 4238 F7C9           		clr.b	($FFFFF7C9).w
   21339/   11072 : 4228 0032           		clr.b	$32(a0)
   21340/   11076 : 6056                		bra.s	Obj0B_Display
   21341/   11078 :                     ; ===========================================================================
   21342/   11078 :                     
   21343/   11078 :                     Obj0B_Grab:				; XREF: Obj0B_Action
   21344/   11078 : 4A28 0021           		tst.b	$21(a0)		; has Sonic touched the	pole?
   21345/   1107C : 6750                		beq.s	Obj0B_Display	; if not, branch
   21346/   1107E : 43F8 D000           		lea	($FFFFD000).w,a1
   21347/   11082 : 3028 0008           		move.w	8(a0),d0
   21348/   11086 : 0640 0014           		addi.w	#$14,d0
   21349/   1108A : B069 0008           		cmp.w	8(a1),d0
   21350/   1108E : 643E                		bcc.s	Obj0B_Display
   21351/   11090 : 4228 0021           		clr.b	$21(a0)
   21352/   11094 : 0C29 0004 0024      		cmpi.b	#4,$24(a1)
   21353/   1109A : 6432                		bcc.s	Obj0B_Display
   21354/   1109C : 4269 0010           		clr.w	$10(a1)		; stop Sonic moving
   21355/   110A0 : 4269 0012           		clr.w	$12(a1)		; stop Sonic moving
   21356/   110A4 : 3028 0008           		move.w	8(a0),d0
   21357/   110A8 : 0640 0014           		addi.w	#$14,d0
   21358/   110AC : 3340 0008           		move.w	d0,8(a1)
   21359/   110B0 : 08A9 0000 0022      		bclr	#0,$22(a1)
   21360/   110B6 : 137C 0011 001C      		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
   21361/   110BC : 11FC 0001 F7C8      		move.b	#1,($FFFFF7C8).w ; lock	controls
   21362/   110C2 : 11FC 0001 F7C9      		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
   21363/   110C8 : 117C 0001 0032      		move.b	#1,$32(a0)	; begin	countdown to breakage
   21364/   110CE :                     
   21365/   110CE :                     Obj0B_Display:				; XREF: Obj0B_Index
   21366/   110CE : 6000 E39A           		bra.w	MarkObjGone
   21367/   110D2 :                     ; ===========================================================================
   21368/   110D2 :                     ; ---------------------------------------------------------------------------
   21369/   110D2 :                     ; Sprite mappings - pole that breaks (LZ)
   21370/   110D2 :                     ; ---------------------------------------------------------------------------
   21371/   110D2 :                     Map_obj0B:
   21372/   110D2 :                     	include "_mappings/obj0B.asm"
(1)    1/   110D2 :                     ; ---------------------------------------------------------------------------
(1)    2/   110D2 :                     ; Sprite mappings - pole that breaks (LZ)
(1)    3/   110D2 :                     ; ---------------------------------------------------------------------------
(1)    4/   110D2 : 0004                		dc.w byte_11326-Map_obj0B
(1)    5/   110D4 : 000F                		dc.w byte_11331-Map_obj0B
(1)    6/   110D6 : 02                  byte_11326:	dc.b 2			; normal pole
(1)    7/   110D7 : E003 0000 FC        		dc.b $E0, 3, 0,	0, $FC
(1)    8/   110DC : 0003 1000 FC        		dc.b 0,	3, $10,	0, $FC
(1)    9/   110E1 : 04                  byte_11331:	dc.b 4			; broken pole
(1)   10/   110E2 : E001 0000 FC        		dc.b $E0, 1, 0,	0, $FC
(1)   11/   110E7 : F005 0004 FC        		dc.b $F0, 5, 0,	4, $FC
(1)   12/   110EC : 0005 1004 FC        		dc.b 0,	5, $10,	4, $FC
(1)   13/   110F1 : 1001 1000 FC        		dc.b $10, 1, $10, 0, $FC
(1)   14/   110F6 : (MACRO)              		even
   21373/   110F6 :                     
   21374/   110F6 :                     ; ===========================================================================
   21375/   110F6 :                     ; ---------------------------------------------------------------------------
   21376/   110F6 :                     ; Object 0C - flapping door (LZ)
   21377/   110F6 :                     ; ---------------------------------------------------------------------------
   21378/   110F6 :                     
   21379/   110F6 :                     Obj0C:					; XREF: Obj_Index
   21380/   110F6 : 7000                		moveq	#0,d0
   21381/   110F8 : 1028 0024           		move.b	$24(a0),d0
   21382/   110FC : 323B 0006           		move.w	Obj0C_Index(pc,d0.w),d1
   21383/   11100 : 4EFB 1002           		jmp	Obj0C_Index(pc,d1.w)
   21384/   11104 :                     ; ===========================================================================
   21385/   11104 : 0004                Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
   21386/   11106 : 0030                		dc.w Obj0C_OpenClose-Obj0C_Index
   21387/   11108 :                     ; ===========================================================================
   21388/   11108 :                     
   21389/   11108 :                     Obj0C_Main:				; XREF: Obj0C_Index
   21390/   11108 : 5428 0024           		addq.b	#2,$24(a0)
   21391/   1110C : 217C 0001 11A2      		move.l	#Map_obj0C,4(a0)
            11112 : 0004             
   21392/   11114 : 317C 4328 0002      		move.w	#$4328,2(a0)
   21393/   1111A : 0028 0004 0001      		ori.b	#4,1(a0)
   21394/   11120 : 117C 0028 0019      		move.b	#$28,$19(a0)
   21395/   11126 : 7000                		moveq	#0,d0
   21396/   11128 : 1028 0028           		move.b	$28(a0),d0	; get object type
   21397/   1112C : C0FC 003C           		mulu.w	#60,d0		; multiply by 60 (1 second)
   21398/   11130 : 3140 0032           		move.w	d0,$32(a0)	; set flap delay time
   21399/   11134 :                     
   21400/   11134 :                     Obj0C_OpenClose:			; XREF: Obj0C_Index
   21401/   11134 : 5368 0030           		subq.w	#1,$30(a0)	; subtract 1 from time delay
   21402/   11138 : 6A1C                		bpl.s	Obj0C_Solid	; if time remains, branch
   21403/   1113A : 3168 0032 0030      		move.w	$32(a0),$30(a0)	; reset	time delay
   21404/   11140 : 0868 0000 001C      		bchg	#0,$1C(a0)	; open/close door
   21405/   11146 : 4A28 0001           		tst.b	1(a0)
   21406/   1114A : 6A0A                		bpl.s	Obj0C_Solid
   21407/   1114C : 303C 00BB           		move.w	#$BB,d0
   21408/   11150 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play door sound
   21409/   11156 :                     
   21410/   11156 :                     Obj0C_Solid:
   21411/   11156 : 43F9 0001 1192      		lea	(Ani_obj0C).l,a1
   21412/   1115C : 6100 93A0           		bsr.w	AnimateSprite
   21413/   11160 : 4238 F7C9           		clr.b	($FFFFF7C9).w	; enable wind tunnel
   21414/   11164 : 4A28 001A           		tst.b	$1A(a0)		; is the door open?
   21415/   11168 : 6624                		bne.s	Obj0C_Display	; if yes, branch
   21416/   1116A : 3038 D008           		move.w	($FFFFD008).w,d0
   21417/   1116E : B068 0008           		cmp.w	8(a0),d0	; is Sonic in front of the door?
   21418/   11172 : 641A                		bcc.s	Obj0C_Display	; if yes, branch
   21419/   11174 : 11FC 0001 F7C9      		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
   21420/   1117A : 323C 0013           		move.w	#$13,d1
   21421/   1117E : 343C 0020           		move.w	#$20,d2
   21422/   11182 : 3602                		move.w	d2,d3
   21423/   11184 : 5243                		addq.w	#1,d3
   21424/   11186 : 3828 0008           		move.w	8(a0),d4
   21425/   1118A : 6100 E606           		bsr.w	SolidObject	; make the door	solid
   21426/   1118E :                     
   21427/   1118E :                     Obj0C_Display:
   21428/   1118E : 6000 E2DA           		bra.w	MarkObjGone
   21429/   11192 :                     ; ===========================================================================
   21430/   11192 :                     Ani_obj0C:
   21431/   11192 :                     	include "_animations/obj0C.asm"
(1)    1/   11192 :                     ; ---------------------------------------------------------------------------
(1)    2/   11192 :                     ; Animation script - flapping door (LZ)
(1)    3/   11192 :                     ; ---------------------------------------------------------------------------
(1)    4/   11192 : 0004                		dc.w byte_113E6-Ani_obj0C
(1)    5/   11194 : 000A                		dc.w byte_113EC-Ani_obj0C
(1)    6/   11196 : 0300 0102 FE01      byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
(1)    7/   1119C : 0302 0100 FE01      byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
(1)    8/   111A2 : (MACRO)              		even
   21432/   111A2 :                     
   21433/   111A2 :                     ; ---------------------------------------------------------------------------
   21434/   111A2 :                     ; Sprite mappings - flapping door (LZ)
   21435/   111A2 :                     ; ---------------------------------------------------------------------------
   21436/   111A2 :                     Map_obj0C:
   21437/   111A2 :                     	include "_mappings/obj0C.asm"
(1)    1/   111A2 :                     ; ---------------------------------------------------------------------------
(1)    2/   111A2 :                     ; Sprite mappings - flapping door (LZ)
(1)    3/   111A2 :                     ; ---------------------------------------------------------------------------
(1)    4/   111A2 : 0006                		dc.w byte_113F8-Map_obj0C
(1)    5/   111A4 : 0011                		dc.w byte_11403-Map_obj0C
(1)    6/   111A6 : 001C                		dc.w byte_1140E-Map_obj0C
(1)    7/   111A8 : 02                  byte_113F8:	dc.b 2
(1)    8/   111A9 : E007 0000 F8        		dc.b $E0, 7, 0,	0, $F8
(1)    9/   111AE : 0007 1000 F8        		dc.b 0,	7, $10,	0, $F8
(1)   10/   111B3 : 02                  byte_11403:	dc.b 2
(1)   11/   111B4 : DA0F 0008 FB        		dc.b $DA, $F, 0, 8, $FB
(1)   12/   111B9 : 060F 1008 FB        		dc.b 6,	$F, $10, 8, $FB
(1)   13/   111BE : 02                  byte_1140E:	dc.b 2
(1)   14/   111BF : D80D 0018 00        		dc.b $D8, $D, 0, $18, 0
(1)   15/   111C4 : 180D 1018 00        		dc.b $18, $D, $10, $18,	0
(1)   16/   111C9 : (MACRO)              		even
(1)   16/   111C9 : 00                                          dc.b 0 ;ds.b 1 
   21438/   111CA :                     
   21439/   111CA :                     ; ===========================================================================
   21440/   111CA :                     ; ---------------------------------------------------------------------------
   21441/   111CA :                     ; Object 71 - invisible	solid blocks
   21442/   111CA :                     ; ---------------------------------------------------------------------------
   21443/   111CA :                     
   21444/   111CA :                     Obj71:					; XREF: Obj_Index
   21445/   111CA : 7000                		moveq	#0,d0
   21446/   111CC : 1028 0024           		move.b	$24(a0),d0
   21447/   111D0 : 323B 0006           		move.w	Obj71_Index(pc,d0.w),d1
   21448/   111D4 : 4EFB 1002           		jmp	Obj71_Index(pc,d1.w)
   21449/   111D8 :                     ; ===========================================================================
   21450/   111D8 : 0004                Obj71_Index:	dc.w Obj71_Main-Obj71_Index
   21451/   111DA : 003C                		dc.w Obj71_Solid-Obj71_Index
   21452/   111DC :                     ; ===========================================================================
   21453/   111DC :                     
   21454/   111DC :                     Obj71_Main:				; XREF: Obj71_Index
   21455/   111DC : 5428 0024           		addq.b	#2,$24(a0)
   21456/   111E0 : 217C 0001 1266      		move.l	#Map_obj71,4(a0)
            111E6 : 0004             
   21457/   111E8 : 317C 8680 0002      		move.w	#$8680,2(a0)
   21458/   111EE : 0028 0004 0001      		ori.b	#4,1(a0)
   21459/   111F4 : 1028 0028           		move.b	$28(a0),d0	; get object type
   21460/   111F8 : 1200                		move.b	d0,d1
   21461/   111FA : 0240 00F0           		andi.w	#$F0,d0		; read only the	1st byte
   21462/   111FE : 0640 0010           		addi.w	#$10,d0
   21463/   11202 : E248                		lsr.w	#1,d0
   21464/   11204 : 1140 0019           		move.b	d0,$19(a0)	; set object width
   21465/   11208 : 0241 000F           		andi.w	#$F,d1		; read only the	2nd byte
   21466/   1120C : 5241                		addq.w	#1,d1
   21467/   1120E : E749                		lsl.w	#3,d1
   21468/   11210 : 1141 0016           		move.b	d1,$16(a0)	; set object height
   21469/   11214 :                     
   21470/   11214 :                     Obj71_Solid:				; XREF: Obj71_Index
   21471/   11214 : 6100 C436           		bsr.w	ChkObjOnScreen
   21472/   11218 : 661C                		bne.s	Obj71_ChkDel
   21473/   1121A : 7200                		moveq	#0,d1
   21474/   1121C : 1228 0019           		move.b	$19(a0),d1
   21475/   11220 : 0641 000B           		addi.w	#$B,d1
   21476/   11224 : 7400                		moveq	#0,d2
   21477/   11226 : 1428 0016           		move.b	$16(a0),d2
   21478/   1122A : 3602                		move.w	d2,d3
   21479/   1122C : 5243                		addq.w	#1,d3
   21480/   1122E : 3828 0008           		move.w	8(a0),d4
   21481/   11232 : 6100 E5A4           		bsr.w	SolidObject71
   21482/   11236 :                     
   21483/   11236 :                     Obj71_ChkDel:
   21484/   11236 : 3028 0008           		move.w	8(a0),d0
   21485/   1123A : 0240 FF80           		andi.w	#$FF80,d0
   21486/   1123E : 3238 F700           		move.w	($FFFFF700).w,d1
   21487/   11242 : 0441 0080           		subi.w	#$80,d1
   21488/   11246 : 0241 FF80           		andi.w	#$FF80,d1
   21489/   1124A : 9041                		sub.w	d1,d0
   21490/   1124C : 0C40 0280           		cmpi.w	#$280,d0
   21491/   11250 : 620E                		bhi.s	Obj71_Delete
   21492/   11252 : 4A78 FE08           		tst.w	($FFFFFE08).w	; are you using	debug mode?
   21493/   11256 : 6706                		beq.s	Obj71_NoDisplay	; if not, branch
   21494/   11258 : 4EF9 0000 D3D2      		jmp	DisplaySprite	; if yes, display the object
   21495/   1125E :                     ; ===========================================================================
   21496/   1125E :                     
   21497/   1125E :                     Obj71_NoDisplay:
   21498/   1125E : 4E75                		rts	
   21499/   11260 :                     ; ===========================================================================
   21500/   11260 :                     
   21501/   11260 :                     Obj71_Delete:
   21502/   11260 : 4EF9 0000 D40E      		jmp	DeleteObject
   21503/   11266 :                     ; ===========================================================================
   21504/   11266 :                     ; ---------------------------------------------------------------------------
   21505/   11266 :                     ; Sprite mappings - invisible solid blocks
   21506/   11266 :                     ; ---------------------------------------------------------------------------
   21507/   11266 :                     Map_obj71:
   21508/   11266 :                     	include "_mappings/obj71.asm"
(1)    1/   11266 :                     ; ---------------------------------------------------------------------------
(1)    2/   11266 :                     ; Sprite mappings - invisible solid blocks
(1)    3/   11266 :                     ; ---------------------------------------------------------------------------
(1)    4/   11266 : 0006                		dc.w byte_114BC-Map_obj71
(1)    5/   11268 : 001B                		dc.w byte_114D1-Map_obj71
(1)    6/   1126A : 0030                		dc.w byte_114E6-Map_obj71
(1)    7/   1126C : 04                  byte_114BC:	dc.b 4
(1)    8/   1126D : F005 0018 F0        		dc.b $F0, 5, 0,	$18, $F0
(1)    9/   11272 : F005 0018 00        		dc.b $F0, 5, 0,	$18, 0
(1)   10/   11277 : 0005 0018 F0        		dc.b 0,	5, 0, $18, $F0
(1)   11/   1127C : 0005 0018 00        		dc.b 0,	5, 0, $18, 0
(1)   12/   11281 : 04                  byte_114D1:	dc.b 4
(1)   13/   11282 : E005 0018 C0        		dc.b $E0, 5, 0,	$18, $C0
(1)   14/   11287 : E005 0018 30        		dc.b $E0, 5, 0,	$18, $30
(1)   15/   1128C : 1005 0018 C0        		dc.b $10, 5, 0,	$18, $C0
(1)   16/   11291 : 1005 0018 30        		dc.b $10, 5, 0,	$18, $30
(1)   17/   11296 : 04                  byte_114E6:	dc.b 4
(1)   18/   11297 : E005 0018 80        		dc.b $E0, 5, 0,	$18, $80
(1)   19/   1129C : E005 0018 70        		dc.b $E0, 5, 0,	$18, $70
(1)   20/   112A1 : 1005 0018 80        		dc.b $10, 5, 0,	$18, $80
(1)   21/   112A6 : 1005 0018 70        		dc.b $10, 5, 0,	$18, $70
(1)   22/   112AB : (MACRO)              		even
(1)   22/   112AB : 00                                          dc.b 0 ;ds.b 1 
   21509/   112AC :                     
   21510/   112AC :                     ; ===========================================================================
   21511/   112AC :                     ; ---------------------------------------------------------------------------
   21512/   112AC :                     ; Object 5D - fans (SLZ)
   21513/   112AC :                     ; ---------------------------------------------------------------------------
   21514/   112AC :                     
   21515/   112AC :                     Obj5D:					; XREF: Obj_Index
   21516/   112AC : 7000                		moveq	#0,d0
   21517/   112AE : 1028 0024           		move.b	$24(a0),d0
   21518/   112B2 : 323B 0006           		move.w	Obj5D_Index(pc,d0.w),d1
   21519/   112B6 : 4EFB 1002           		jmp	Obj5D_Index(pc,d1.w)
   21520/   112BA :                     ; ===========================================================================
   21521/   112BA : 0004                Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
   21522/   112BC : 0028                		dc.w Obj5D_Delay-Obj5D_Index
   21523/   112BE :                     ; ===========================================================================
   21524/   112BE :                     
   21525/   112BE :                     Obj5D_Main:				; XREF: Obj5D_Index
   21526/   112BE : 5428 0024           		addq.b	#2,$24(a0)
   21527/   112C2 : 217C 0001 13C0      		move.l	#Map_obj5D,4(a0)
            112C8 : 0004             
   21528/   112CA : 317C 43A0 0002      		move.w	#$43A0,2(a0)
   21529/   112D0 : 0028 0004 0001      		ori.b	#4,1(a0)
   21530/   112D6 : 117C 0010 0019      		move.b	#$10,$19(a0)
   21531/   112DC : 117C 0004 0018      		move.b	#4,$18(a0)
   21532/   112E2 :                     
   21533/   112E2 :                     Obj5D_Delay:				; XREF: Obj5D_Index
   21534/   112E2 : 0828 0001 0028      		btst	#1,$28(a0)	; is object type 02/03?
   21535/   112E8 : 661A                		bne.s	Obj5D_Blow	; if yes, branch
   21536/   112EA : 5368 0030           		subq.w	#1,$30(a0)	; subtract 1 from time delay
   21537/   112EE : 6A14                		bpl.s	Obj5D_Blow	; if time remains, branch
   21538/   112F0 : 317C 0078 0030      		move.w	#120,$30(a0)	; set delay to 2 seconds
   21539/   112F6 : 0868 0000 0032      		bchg	#0,$32(a0)	; switch fan on/off
   21540/   112FC : 6706                		beq.s	Obj5D_Blow	; if fan is off, branch
   21541/   112FE : 317C 00B4 0030      		move.w	#180,$30(a0)	; set delay to 3 seconds
   21542/   11304 :                     
   21543/   11304 :                     Obj5D_Blow:
   21544/   11304 : 4A28 0032           		tst.b	$32(a0)		; is fan switched on?
   21545/   11308 : 6600 0092           		bne.w	Obj5D_ChkDel	; if not, branch
   21546/   1130C : 43F8 D000           		lea	($FFFFD000).w,a1
   21547/   11310 : 3029 0008           		move.w	8(a1),d0
   21548/   11314 : 9068 0008           		sub.w	8(a0),d0
   21549/   11318 : 0828 0000 0022      		btst	#0,$22(a0)
   21550/   1131E : 6602                		bne.s	Obj5D_ChkSonic
   21551/   11320 : 4440                		neg.w	d0
   21552/   11322 :                     
   21553/   11322 :                     Obj5D_ChkSonic:
   21554/   11322 : 0640 0050           		addi.w	#$50,d0
   21555/   11326 : 0C40 00F0           		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
   21556/   1132A : 643E                		bcc.s	Obj5D_Animate	; if yes, branch
   21557/   1132C : 3229 000C           		move.w	$C(a1),d1
   21558/   11330 : 0641 0060           		addi.w	#$60,d1
   21559/   11334 : 9268 000C           		sub.w	$C(a0),d1
   21560/   11338 : 6530                		bcs.s	Obj5D_Animate
   21561/   1133A : 0C41 0070           		cmpi.w	#$70,d1
   21562/   1133E : 642A                		bcc.s	Obj5D_Animate
   21563/   11340 : 0440 0050           		subi.w	#$50,d0
   21564/   11344 : 6404                		bcc.s	loc_1159A
   21565/   11346 : 4640                		not.w	d0
   21566/   11348 : D040                		add.w	d0,d0
   21567/   1134A :                     
   21568/   1134A :                     loc_1159A:
   21569/   1134A : 0640 0060           		addi.w	#$60,d0
   21570/   1134E : 0828 0000 0022      		btst	#0,$22(a0)
   21571/   11354 : 6602                		bne.s	loc_115A8
   21572/   11356 : 4440                		neg.w	d0
   21573/   11358 :                     
   21574/   11358 :                     loc_115A8:
   21575/   11358 : 4400                		neg.b	d0
   21576/   1135A : E840                		asr.w	#4,d0
   21577/   1135C : 0828 0000 0028      		btst	#0,$28(a0)
   21578/   11362 : 6702                		beq.s	Obj5D_MoveSonic
   21579/   11364 : 4440                		neg.w	d0
   21580/   11366 :                     
   21581/   11366 :                     Obj5D_MoveSonic:
   21582/   11366 : D169 0008           		add.w	d0,8(a1)	; push Sonic away from the fan
   21583/   1136A :                     
   21584/   1136A :                     Obj5D_Animate:				; XREF: Obj5D_ChkSonic
   21585/   1136A : 5328 001E           		subq.b	#1,$1E(a0)
   21586/   1136E : 6A2C                		bpl.s	Obj5D_ChkDel
   21587/   11370 : 117C 0000 001E      		move.b	#0,$1E(a0)
   21588/   11376 : 5228 001B           		addq.b	#1,$1B(a0)
   21589/   1137A : 0C28 0003 001B      		cmpi.b	#3,$1B(a0)
   21590/   11380 : 6506                		bcs.s	loc_115D8
   21591/   11382 : 117C 0000 001B      		move.b	#0,$1B(a0)
   21592/   11388 :                     
   21593/   11388 :                     loc_115D8:
   21594/   11388 : 7000                		moveq	#0,d0
   21595/   1138A : 0828 0000 0028      		btst	#0,$28(a0)
   21596/   11390 : 6702                		beq.s	loc_115E4
   21597/   11392 : 7002                		moveq	#2,d0
   21598/   11394 :                     
   21599/   11394 :                     loc_115E4:
   21600/   11394 : D028 001B           		add.b	$1B(a0),d0
   21601/   11398 : 1140 001A           		move.b	d0,$1A(a0)
   21602/   1139C :                     
   21603/   1139C :                     Obj5D_ChkDel:				; XREF: Obj5D_Animate
   21604/   1139C : 6100 C034           		bsr.w	DisplaySprite
   21605/   113A0 : 3028 0008           		move.w	8(a0),d0
   21606/   113A4 : 0240 FF80           		andi.w	#$FF80,d0
   21607/   113A8 : 3238 F700           		move.w	($FFFFF700).w,d1
   21608/   113AC : 0441 0080           		subi.w	#$80,d1
   21609/   113B0 : 0241 FF80           		andi.w	#$FF80,d1
   21610/   113B4 : 9041                		sub.w	d1,d0
   21611/   113B6 : 0C40 0280           		cmpi.w	#$280,d0
   21612/   113BA : 6200 C052           		bhi.w	DeleteObject
   21613/   113BE : 4E75                		rts	
   21614/   113C0 :                     ; ===========================================================================
   21615/   113C0 :                     ; ---------------------------------------------------------------------------
   21616/   113C0 :                     ; Sprite mappings - fans (SLZ)
   21617/   113C0 :                     ; ---------------------------------------------------------------------------
   21618/   113C0 :                     Map_obj5D:
   21619/   113C0 :                     	include "_mappings/obj5D.asm"
(1)    1/   113C0 :                     ; ---------------------------------------------------------------------------
(1)    2/   113C0 :                     ; Sprite mappings - fans (SLZ)
(1)    3/   113C0 :                     ; ---------------------------------------------------------------------------
(1)    4/   113C0 : 000A 0015           		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
(1)    5/   113C4 : 0020 0015           		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
(1)    6/   113C8 : 000A                		dc.w byte_1161A-Map_obj5D
(1)    7/   113CA : 02                  byte_1161A:	dc.b 2
(1)    8/   113CB : F009 0000 F8        		dc.b $F0, 9, 0,	0, $F8
(1)    9/   113D0 : 000D 0006 F0        		dc.b 0,	$D, 0, 6, $F0
(1)   10/   113D5 : 02                  byte_11625:	dc.b 2
(1)   11/   113D6 : F00D 000E F0        		dc.b $F0, $D, 0, $E, $F0
(1)   12/   113DB : 000D 0016 F0        		dc.b 0,	$D, 0, $16, $F0
(1)   13/   113E0 : 02                  byte_11630:	dc.b 2
(1)   14/   113E1 : F00D 001E F0        		dc.b $F0, $D, 0, $1E, $F0
(1)   15/   113E6 : 0009 0026 F8        		dc.b 0,	9, 0, $26, $F8
(1)   16/   113EB : (MACRO)              		even
(1)   16/   113EB : 00                                          dc.b 0 ;ds.b 1 
   21620/   113EC :                     
   21621/   113EC :                     ; ===========================================================================
   21622/   113EC :                     ; ---------------------------------------------------------------------------
   21623/   113EC :                     ; Object 5E - seesaws (SLZ)
   21624/   113EC :                     ; ---------------------------------------------------------------------------
   21625/   113EC :                     
   21626/   113EC :                     Obj5E:					; XREF: Obj_Index
   21627/   113EC : 7000                		moveq	#0,d0
   21628/   113EE : 1028 0024           		move.b	$24(a0),d0
   21629/   113F2 : 323B 002C           		move.w	Obj5E_Index(pc,d0.w),d1
   21630/   113F6 : 4EBB 1028           		jsr	Obj5E_Index(pc,d1.w)
   21631/   113FA : 3028 0030           		move.w	$30(a0),d0
   21632/   113FE : 0240 FF80           		andi.w	#$FF80,d0
   21633/   11402 : 3238 F700           		move.w	($FFFFF700).w,d1
   21634/   11406 : 0441 0080           		subi.w	#$80,d1
   21635/   1140A : 0241 FF80           		andi.w	#$FF80,d1
   21636/   1140E : 9041                		sub.w	d1,d0
   21637/   11410 : 6B00 BFFC           		bmi.w	DeleteObject
   21638/   11414 : 0C40 0280           		cmpi.w	#$280,d0
   21639/   11418 : 6200 BFF4           		bhi.w	DeleteObject
   21640/   1141C : 6000 BFB4           		bra.w	DisplaySprite
   21641/   11420 :                     ; ===========================================================================
   21642/   11420 : 000C                Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
   21643/   11422 : 0074                		dc.w Obj5E_Slope-Obj5E_Index
   21644/   11424 : 00A6                		dc.w Obj5E_Slope2-Obj5E_Index
   21645/   11426 : 0120                		dc.w Obj5E_Spikeball-Obj5E_Index
   21646/   11428 : 0176                		dc.w Obj5E_MoveSpike-Obj5E_Index
   21647/   1142A : 020A                		dc.w Obj5E_SpikeFall-Obj5E_Index
   21648/   1142C :                     ; ===========================================================================
   21649/   1142C :                     
   21650/   1142C :                     Obj5E_Main:				; XREF: Obj5E_Index
   21651/   1142C : 5428 0024           		addq.b	#2,$24(a0)
   21652/   11430 : 217C 0001 1752      		move.l	#Map_obj5E,4(a0)
            11436 : 0004             
   21653/   11438 : 317C 0374 0002      		move.w	#$374,2(a0)
   21654/   1143E : 0028 0004 0001      		ori.b	#4,1(a0)
   21655/   11444 : 117C 0004 0018      		move.b	#4,$18(a0)
   21656/   1144A : 117C 0030 0019      		move.b	#$30,$19(a0)
   21657/   11450 : 3168 0008 0030      		move.w	8(a0),$30(a0)
   21658/   11456 : 4A28 0028           		tst.b	$28(a0)		; is object type 00 ?
   21659/   1145A : 6624                		bne.s	loc_116D2	; if not, branch
   21660/   1145C : 6100 C410           		bsr.w	SingleObjLoad2
   21661/   11460 : 661E                		bne.s	loc_116D2
   21662/   11462 : 12BC 005E           		move.b	#$5E,0(a1)	; load spikeball object
   21663/   11466 : 5C29 0024           		addq.b	#6,$24(a1)
   21664/   1146A : 3368 0008 0008      		move.w	8(a0),8(a1)
   21665/   11470 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   21666/   11476 : 1368 0022 0022      		move.b	$22(a0),$22(a1)
   21667/   1147C : 2348 003C           		move.l	a0,$3C(a1)
   21668/   11480 :                     
   21669/   11480 :                     loc_116D2:
   21670/   11480 : 0828 0000 0022      		btst	#0,$22(a0)
   21671/   11486 : 6706                		beq.s	loc_116E0
   21672/   11488 : 117C 0002 001A      		move.b	#2,$1A(a0)
   21673/   1148E :                     
   21674/   1148E :                     loc_116E0:
   21675/   1148E : 1168 001A 003A      		move.b	$1A(a0),$3A(a0)
   21676/   11494 :                     
   21677/   11494 :                     Obj5E_Slope:				; XREF: Obj5E_Index
   21678/   11494 : 1228 003A           		move.b	$3A(a0),d1
   21679/   11498 : 6100 007A           		bsr.w	loc_11766
   21680/   1149C : 45F9 0001 16F2      		lea	(Obj5E_Data1).l,a2
   21681/   114A2 : 0828 0000 001A      		btst	#0,$1A(a0)
   21682/   114A8 : 6706                		beq.s	loc_11702
   21683/   114AA : 45F9 0001 1722      		lea	(Obj5E_Data2).l,a2
   21684/   114B0 :                     
   21685/   114B0 :                     loc_11702:
   21686/   114B0 : 43F8 D000           		lea	($FFFFD000).w,a1
   21687/   114B4 : 3169 0012 0038      		move.w	$12(a1),$38(a0)
   21688/   114BA : 323C 0030           		move.w	#$30,d1
   21689/   114BE : 4EB9 0000 7330      		jsr	(SlopeObject).l
   21690/   114C4 : 4E75                		rts	
   21691/   114C6 :                     ; ===========================================================================
   21692/   114C6 :                     
   21693/   114C6 :                     Obj5E_Slope2:				; XREF: Obj5E_Index
   21694/   114C6 : 6100 0030           		bsr.w	loc_1174A
   21695/   114CA : 45F9 0001 16F2      		lea	(Obj5E_Data1).l,a2
   21696/   114D0 : 0828 0000 001A      		btst	#0,$1A(a0)
   21697/   114D6 : 6706                		beq.s	loc_11730
   21698/   114D8 : 45F9 0001 1722      		lea	(Obj5E_Data2).l,a2
   21699/   114DE :                     
   21700/   114DE :                     loc_11730:
   21701/   114DE : 323C 0030           		move.w	#$30,d1
   21702/   114E2 : 4EB9 0000 73D0      		jsr	(ExitPlatform).l
   21703/   114E8 : 323C 0030           		move.w	#$30,d1
   21704/   114EC : 3428 0008           		move.w	8(a0),d2
   21705/   114F0 : 4EB9 0000 832E      		jsr	SlopeObject2
   21706/   114F6 : 4E75                		rts	
   21707/   114F8 :                     ; ===========================================================================
   21708/   114F8 :                     
   21709/   114F8 :                     loc_1174A:				; XREF: Obj5E_Slope2
   21710/   114F8 : 7202                		moveq	#2,d1
   21711/   114FA : 43F8 D000           		lea	($FFFFD000).w,a1
   21712/   114FE : 3028 0008           		move.w	8(a0),d0
   21713/   11502 : 9069 0008           		sub.w	8(a1),d0
   21714/   11506 : 6404                		bcc.s	loc_1175E
   21715/   11508 : 4440                		neg.w	d0
   21716/   1150A : 7200                		moveq	#0,d1
   21717/   1150C :                     
   21718/   1150C :                     loc_1175E:
   21719/   1150C : 0C40 0008           		cmpi.w	#8,d0
   21720/   11510 : 6402                		bcc.s	loc_11766
   21721/   11512 : 7201                		moveq	#1,d1
   21722/   11514 :                     
   21723/   11514 :                     loc_11766:
   21724/   11514 : 1028 001A           		move.b	$1A(a0),d0
   21725/   11518 : B001                		cmp.b	d1,d0
   21726/   1151A : 6722                		beq.s	locret_11790
   21727/   1151C : 6402                		bcc.s	loc_11772
   21728/   1151E : 5400                		addq.b	#2,d0
   21729/   11520 :                     
   21730/   11520 :                     loc_11772:
   21731/   11520 : 5300                		subq.b	#1,d0
   21732/   11522 : 1140 001A           		move.b	d0,$1A(a0)
   21733/   11526 : 1141 003A           		move.b	d1,$3A(a0)
   21734/   1152A : 08A8 0000 0001      		bclr	#0,1(a0)
   21735/   11530 : 0828 0001 001A      		btst	#1,$1A(a0)
   21736/   11536 : 6706                		beq.s	locret_11790
   21737/   11538 : 08E8 0000 0001      		bset	#0,1(a0)
   21738/   1153E :                     
   21739/   1153E :                     locret_11790:
   21740/   1153E : 4E75                		rts	
   21741/   11540 :                     ; ===========================================================================
   21742/   11540 :                     
   21743/   11540 :                     Obj5E_Spikeball:			; XREF: Obj5E_Index
   21744/   11540 : 5428 0024           		addq.b	#2,$24(a0)
   21745/   11544 : 217C 0001 1794      		move.l	#Map_obj5Ea,4(a0)
            1154A : 0004             
   21746/   1154C : 317C 04F0 0002      		move.w	#$4F0,2(a0)
   21747/   11552 : 0028 0004 0001      		ori.b	#4,1(a0)
   21748/   11558 : 117C 0004 0018      		move.b	#4,$18(a0)
   21749/   1155E : 117C 008B 0020      		move.b	#$8B,$20(a0)
   21750/   11564 : 117C 000C 0019      		move.b	#$C,$19(a0)
   21751/   1156A : 3168 0008 0030      		move.w	8(a0),$30(a0)
   21752/   11570 : 0668 0028 0008      		addi.w	#$28,8(a0)
   21753/   11576 : 3168 000C 0034      		move.w	$C(a0),$34(a0)
   21754/   1157C : 117C 0001 001A      		move.b	#1,$1A(a0)
   21755/   11582 : 0828 0000 0022      		btst	#0,$22(a0)
   21756/   11588 : 670C                		beq.s	Obj5E_MoveSpike
   21757/   1158A : 0468 0050 0008      		subi.w	#$50,8(a0)
   21758/   11590 : 117C 0002 003A      		move.b	#2,$3A(a0)
   21759/   11596 :                     
   21760/   11596 :                     Obj5E_MoveSpike:			; XREF: Obj5E_Index
   21761/   11596 : 2268 003C           		movea.l	$3C(a0),a1
   21762/   1159A : 7000                		moveq	#0,d0
   21763/   1159C : 1028 003A           		move.b	$3A(a0),d0
   21764/   115A0 : 9029 003A           		sub.b	$3A(a1),d0
   21765/   115A4 : 6746                		beq.s	loc_1183E
   21766/   115A6 : 6402                		bcc.s	loc_117FC
   21767/   115A8 : 4400                		neg.b	d0
   21768/   115AA :                     
   21769/   115AA :                     loc_117FC:
   21770/   115AA : 323C F7E8           		move.w	#-$818,d1
   21771/   115AE : 343C FEEC           		move.w	#-$114,d2
   21772/   115B2 : 0C00 0001           		cmpi.b	#1,d0
   21773/   115B6 : 6718                		beq.s	loc_11822
   21774/   115B8 : 323C F510           		move.w	#-$AF0,d1
   21775/   115BC : 343C FF34           		move.w	#-$CC,d2
   21776/   115C0 : 0C69 0A00 0038      		cmpi.w	#$A00,$38(a1)
   21777/   115C6 : 6D08                		blt.s	loc_11822
   21778/   115C8 : 323C F200           		move.w	#-$E00,d1
   21779/   115CC : 343C FF60           		move.w	#-$A0,d2
   21780/   115D0 :                     
   21781/   115D0 :                     loc_11822:
   21782/   115D0 : 3141 0012           		move.w	d1,$12(a0)
   21783/   115D4 : 3142 0010           		move.w	d2,$10(a0)
   21784/   115D8 : 3028 0008           		move.w	8(a0),d0
   21785/   115DC : 9068 0030           		sub.w	$30(a0),d0
   21786/   115E0 : 6404                		bcc.s	loc_11838
   21787/   115E2 : 4468 0010           		neg.w	$10(a0)
   21788/   115E6 :                     
   21789/   115E6 :                     loc_11838:
   21790/   115E6 : 5428 0024           		addq.b	#2,$24(a0)
   21791/   115EA : 603E                		bra.s	Obj5E_SpikeFall
   21792/   115EC :                     ; ===========================================================================
   21793/   115EC :                     
   21794/   115EC :                     loc_1183E:				; XREF: Obj5E_MoveSpike
   21795/   115EC : 45F9 0001 16E8      		lea	(Obj5E_Speeds).l,a2
   21796/   115F2 : 7000                		moveq	#0,d0
   21797/   115F4 : 1029 001A           		move.b	$1A(a1),d0
   21798/   115F8 : 343C 0028           		move.w	#$28,d2
   21799/   115FC : 3228 0008           		move.w	8(a0),d1
   21800/   11600 : 9268 0030           		sub.w	$30(a0),d1
   21801/   11604 : 6404                		bcc.s	loc_1185C
   21802/   11606 : 4442                		neg.w	d2
   21803/   11608 : 5440                		addq.w	#2,d0
   21804/   1160A :                     
   21805/   1160A :                     loc_1185C:
   21806/   1160A : D040                		add.w	d0,d0
   21807/   1160C : 3228 0034           		move.w	$34(a0),d1
   21808/   11610 : D272 0000           		add.w	(a2,d0.w),d1
   21809/   11614 : 3141 000C           		move.w	d1,$C(a0)
   21810/   11618 : D468 0030           		add.w	$30(a0),d2
   21811/   1161C : 3142 0008           		move.w	d2,8(a0)
   21812/   11620 : 4268 000E           		clr.w	$E(a0)
   21813/   11624 : 4268 000A           		clr.w	$A(a0)
   21814/   11628 : 4E75                		rts	
   21815/   1162A :                     ; ===========================================================================
   21816/   1162A :                     
   21817/   1162A :                     Obj5E_SpikeFall:			; XREF: Obj5E_Index
   21818/   1162A : 4A68 0012           		tst.w	$12(a0)
   21819/   1162E : 6A18                		bpl.s	loc_1189A
   21820/   11630 : 6100 BD4E           		bsr.w	ObjectFall
   21821/   11634 : 3028 0034           		move.w	$34(a0),d0
   21822/   11638 : 0440 002F           		subi.w	#$2F,d0
   21823/   1163C : B068 000C           		cmp.w	$C(a0),d0
   21824/   11640 : 6E04                		bgt.s	locret_11898
   21825/   11642 : 6100 BD3C           		bsr.w	ObjectFall
   21826/   11646 :                     
   21827/   11646 :                     locret_11898:
   21828/   11646 : 4E75                		rts	
   21829/   11648 :                     ; ===========================================================================
   21830/   11648 :                     
   21831/   11648 :                     loc_1189A:				; XREF: Obj5E_SpikeFall
   21832/   11648 : 6100 BD36           		bsr.w	ObjectFall
   21833/   1164C : 2268 003C           		movea.l	$3C(a0),a1
   21834/   11650 : 45F9 0001 16E8      		lea	(Obj5E_Speeds).l,a2
   21835/   11656 : 7000                		moveq	#0,d0
   21836/   11658 : 1029 001A           		move.b	$1A(a1),d0
   21837/   1165C : 3228 0008           		move.w	8(a0),d1
   21838/   11660 : 9268 0030           		sub.w	$30(a0),d1
   21839/   11664 : 6402                		bcc.s	loc_118BA
   21840/   11666 : 5440                		addq.w	#2,d0
   21841/   11668 :                     
   21842/   11668 :                     loc_118BA:
   21843/   11668 : D040                		add.w	d0,d0
   21844/   1166A : 3228 0034           		move.w	$34(a0),d1
   21845/   1166E : D272 0000           		add.w	(a2,d0.w),d1
   21846/   11672 : B268 000C           		cmp.w	$C(a0),d1
   21847/   11676 : 6E6E                		bgt.s	locret_11938
   21848/   11678 : 2268 003C           		movea.l	$3C(a0),a1
   21849/   1167C : 7202                		moveq	#2,d1
   21850/   1167E : 4A68 0010           		tst.w	$10(a0)
   21851/   11682 : 6B02                		bmi.s	Obj5E_Spring
   21852/   11684 : 7200                		moveq	#0,d1
   21853/   11686 :                     
   21854/   11686 :                     Obj5E_Spring:
   21855/   11686 : 1341 003A           		move.b	d1,$3A(a1)
   21856/   1168A : 1141 003A           		move.b	d1,$3A(a0)
   21857/   1168E : B229 001A           		cmp.b	$1A(a1),d1
   21858/   11692 : 6746                		beq.s	loc_1192C
   21859/   11694 : 08A9 0003 0022      		bclr	#3,$22(a1)
   21860/   1169A : 673E                		beq.s	loc_1192C
   21861/   1169C : 4229 0025           		clr.b	$25(a1)
   21862/   116A0 : 137C 0002 0024      		move.b	#2,$24(a1)
   21863/   116A6 : 45F8 D000           		lea	($FFFFD000).w,a2
   21864/   116AA : 3568 0012 0012      		move.w	$12(a0),$12(a2)
   21865/   116B0 : 446A 0012           		neg.w	$12(a2)
   21866/   116B4 : 08EA 0001 0022      		bset	#1,$22(a2)
   21867/   116BA : 08AA 0003 0022      		bclr	#3,$22(a2)
   21868/   116C0 : 422A 003C           		clr.b	$3C(a2)
   21869/   116C4 : 157C 0010 001C      		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
   21870/   116CA : 157C 0002 0024      		move.b	#2,$24(a2)
   21871/   116D0 : 303C 00CC           		move.w	#$CC,d0
   21872/   116D4 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play spring sound
   21873/   116DA :                     
   21874/   116DA :                     loc_1192C:
   21875/   116DA : 4268 0010           		clr.w	$10(a0)
   21876/   116DE : 4268 0012           		clr.w	$12(a0)
   21877/   116E2 : 5528 0024           		subq.b	#2,$24(a0)
   21878/   116E6 :                     
   21879/   116E6 :                     locret_11938:
   21880/   116E6 : 4E75                		rts	
   21881/   116E8 :                     ; ===========================================================================
   21882/   116E8 : FFF8 FFE4 FFD1      Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
            116EE : FFE4 FFF8          
   21883/   116F2 :                     
   21884/   116F2 :                     Obj5E_Data1:	binclude	"_misc/slzssaw1.bin"
   21885/   11722 : (MACRO)              		even
   21886/   11722 :                     Obj5E_Data2:	binclude	"_misc/slzssaw2.bin"
   21887/   11752 : (MACRO)              		even
   21888/   11752 :                     ; ---------------------------------------------------------------------------
   21889/   11752 :                     ; Sprite mappings - seesaws (SLZ)
   21890/   11752 :                     ; ---------------------------------------------------------------------------
   21891/   11752 :                     Map_obj5E:
   21892/   11752 :                     	include "_mappings/obj5E.asm"
(1)    1/   11752 :                     ; ---------------------------------------------------------------------------
(1)    2/   11752 :                     ; Sprite mappings - seesaws (SLZ)
(1)    3/   11752 :                     ; ---------------------------------------------------------------------------
(1)    4/   11752 : 0008 002C           		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
(1)    5/   11756 : 0008 002C           		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
(1)    6/   1175A : 07                  byte_119AC:	dc.b 7
(1)    7/   1175B : D406 0000 D3        		dc.b $D4, 6, 0,	0, $D3
(1)    8/   11760 : DC06 0006 E3        		dc.b $DC, 6, 0,	6, $E3
(1)    9/   11765 : E404 000C F3        		dc.b $E4, 4, 0,	$C, $F3
(1)   10/   1176A : EC0D 000E F3        		dc.b $EC, $D, 0, $E, $F3
(1)   11/   1176F : FC08 0016 FB        		dc.b $FC, 8, 0,	$16, $FB
(1)   12/   11774 : F406 0006 13        		dc.b $F4, 6, 0,	6, $13
(1)   13/   11779 : FC05 0019 23        		dc.b $FC, 5, 0,	$19, $23
(1)   14/   1177E : 04                  byte_119D0:	dc.b 4
(1)   15/   1177F : E60A 001D D0        		dc.b $E6, $A, 0, $1D, $D0
(1)   16/   11784 : E60A 0023 E8        		dc.b $E6, $A, 0, $23, $E8
(1)   17/   11789 : E60A 0823 00        		dc.b $E6, $A, 8, $23, 0
(1)   18/   1178E : E60A 081D 18        		dc.b $E6, $A, 8, $1D, $18
(1)   19/   11793 : (MACRO)              		even
(1)   19/   11793 : 00                                          dc.b 0 ;ds.b 1 
   21893/   11794 :                     
   21894/   11794 :                     ; ---------------------------------------------------------------------------
   21895/   11794 :                     ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
   21896/   11794 :                     ; ---------------------------------------------------------------------------
   21897/   11794 :                     Map_obj5Ea:
   21898/   11794 :                     	include "_mappings/obj5Eballs.asm"
(1)    1/   11794 :                     ; ---------------------------------------------------------------------------
(1)    2/   11794 :                     ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
(1)    3/   11794 :                     ; ---------------------------------------------------------------------------
(1)    4/   11794 : 0004                		dc.w byte_119EA-Map_obj5Ea
(1)    5/   11796 : 000A                		dc.w byte_119F0-Map_obj5Ea
(1)    6/   11798 : 01                  byte_119EA:	dc.b 1
(1)    7/   11799 : F40A 0000 F4        		dc.b $F4, $A, 0, 0, $F4
(1)    8/   1179E : 01                  byte_119F0:	dc.b 1
(1)    9/   1179F : F40A 0009 F4        		dc.b $F4, $A, 0, 9, $F4
(1)   10/   117A4 : (MACRO)              		even
   21899/   117A4 :                     
   21900/   117A4 :                     ; ===========================================================================
   21901/   117A4 :                     ; ---------------------------------------------------------------------------
   21902/   117A4 :                     ; Object 5F - walking bomb enemy (SLZ, SBZ)
   21903/   117A4 :                     ; ---------------------------------------------------------------------------
   21904/   117A4 :                     
   21905/   117A4 :                     Obj5F:					; XREF: Obj_Index
   21906/   117A4 : 7000                		moveq	#0,d0
   21907/   117A6 : 1028 0024           		move.b	$24(a0),d0
   21908/   117AA : 323B 0006           		move.w	Obj5F_Index(pc,d0.w),d1
   21909/   117AE : 4EFB 1002           		jmp	Obj5F_Index(pc,d1.w)
   21910/   117B2 :                     ; ===========================================================================
   21911/   117B2 : 0008                Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
   21912/   117B4 : 0044                		dc.w Obj5F_Action-Obj5F_Index
   21913/   117B6 : 0158                		dc.w Obj5F_Display-Obj5F_Index
   21914/   117B8 : 01CE                		dc.w Obj5F_End-Obj5F_Index
   21915/   117BA :                     ; ===========================================================================
   21916/   117BA :                     
   21917/   117BA :                     Obj5F_Main:				; XREF: Obj5F_Index
   21918/   117BA : 5428 0024           		addq.b	#2,$24(a0)
   21919/   117BE : 217C 0001 19D0      		move.l	#Map_obj5F,4(a0)
            117C4 : 0004             
   21920/   117C6 : 317C 0400 0002      		move.w	#$400,2(a0)
   21921/   117CC : 0028 0004 0001      		ori.b	#4,1(a0)
   21922/   117D2 : 117C 0003 0018      		move.b	#3,$18(a0)
   21923/   117D8 : 117C 000C 0019      		move.b	#$C,$19(a0)
   21924/   117DE : 1028 0028           		move.b	$28(a0),d0
   21925/   117E2 : 6706                		beq.s	loc_11A3C
   21926/   117E4 : 1140 0024           		move.b	d0,$24(a0)
   21927/   117E8 : 4E75                		rts	
   21928/   117EA :                     ; ===========================================================================
   21929/   117EA :                     
   21930/   117EA :                     loc_11A3C:
   21931/   117EA : 117C 009A 0020      		move.b	#$9A,$20(a0)
   21932/   117F0 : 0868 0000 0022      		bchg	#0,$22(a0)
   21933/   117F6 :                     
   21934/   117F6 :                     Obj5F_Action:				; XREF: Obj5F_Index
   21935/   117F6 : 7000                		moveq	#0,d0
   21936/   117F8 : 1028 0025           		move.b	$25(a0),d0
   21937/   117FC : 323B 0014           		move.w	Obj5F_Index2(pc,d0.w),d1
   21938/   11800 : 4EBB 1010           		jsr	Obj5F_Index2(pc,d1.w)
   21939/   11804 : 43F9 0001 19B0      		lea	(Ani_obj5F).l,a1
   21940/   1180A : 6100 8CF2           		bsr.w	AnimateSprite
   21941/   1180E : 6000 DC5A           		bra.w	MarkObjGone
   21942/   11812 :                     ; ===========================================================================
   21943/   11812 : 0006                Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
   21944/   11814 : 0034                		dc.w Obj5F_Wait-Obj5F_Index2
   21945/   11816 : 005A                		dc.w Obj5F_Explode-Obj5F_Index2
   21946/   11818 :                     ; ===========================================================================
   21947/   11818 :                     
   21948/   11818 :                     Obj5F_Walk:				; XREF: Obj5F_Index2
   21949/   11818 : 6100 0064           		bsr.w	Obj5F_ChkSonic
   21950/   1181C : 5368 0030           		subq.w	#1,$30(a0)	; subtract 1 from time delay
   21951/   11820 : 6A22                		bpl.s	locret_11A96	; if time remains, branch
   21952/   11822 : 5428 0025           		addq.b	#2,$25(a0)
   21953/   11826 : 317C 05FF 0030      		move.w	#1535,$30(a0)	; set time delay to 25 seconds
   21954/   1182C : 317C 0010 0010      		move.w	#$10,$10(a0)
   21955/   11832 : 117C 0001 001C      		move.b	#1,$1C(a0)
   21956/   11838 : 0868 0000 0022      		bchg	#0,$22(a0)
   21957/   1183E : 6704                		beq.s	locret_11A96
   21958/   11840 : 4468 0010           		neg.w	$10(a0)		; change direction
   21959/   11844 :                     
   21960/   11844 :                     locret_11A96:
   21961/   11844 : 4E75                		rts	
   21962/   11846 :                     ; ===========================================================================
   21963/   11846 :                     
   21964/   11846 :                     Obj5F_Wait:				; XREF: Obj5F_Index2
   21965/   11846 : 6100 0036           		bsr.w	Obj5F_ChkSonic
   21966/   1184A : 5368 0030           		subq.w	#1,$30(a0)	; subtract 1 from time delay
   21967/   1184E : 6B06                		bmi.s	loc_11AA8
   21968/   11850 : 6100 BB5A           		bsr.w	SpeedToPos
   21969/   11854 : 4E75                		rts	
   21970/   11856 :                     ; ===========================================================================
   21971/   11856 :                     
   21972/   11856 :                     loc_11AA8:
   21973/   11856 : 5528 0025           		subq.b	#2,$25(a0)
   21974/   1185A : 317C 00B3 0030      		move.w	#179,$30(a0)	; set time delay to 3 seconds
   21975/   11860 : 4268 0010           		clr.w	$10(a0)		; stop walking
   21976/   11864 : 117C 0000 001C      		move.b	#0,$1C(a0)	; stop animation
   21977/   1186A : 4E75                		rts	
   21978/   1186C :                     ; ===========================================================================
   21979/   1186C :                     
   21980/   1186C :                     Obj5F_Explode:				; XREF: Obj5F_Index2
   21981/   1186C : 5368 0030           		subq.w	#1,$30(a0)
   21982/   11870 : 6A0A                		bpl.s	locret_11AD0
   21983/   11872 : 10BC 003F           		move.b	#$3F,0(a0)	; change bomb into an explosion
   21984/   11876 : 117C 0000 0024      		move.b	#0,$24(a0)
   21985/   1187C :                     
   21986/   1187C :                     locret_11AD0:
   21987/   1187C : 4E75                		rts	
   21988/   1187E :                     ; ===========================================================================
   21989/   1187E :                     
   21990/   1187E :                     Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
   21991/   1187E : 3038 D008           		move.w	($FFFFD008).w,d0
   21992/   11882 : 9068 0008           		sub.w	8(a0),d0
   21993/   11886 : 6402                		bcc.s	loc_11ADE
   21994/   11888 : 4440                		neg.w	d0
   21995/   1188A :                     
   21996/   1188A :                     loc_11ADE:
   21997/   1188A : 0C40 0060           		cmpi.w	#$60,d0
   21998/   1188E : 6478                		bcc.s	locret_11B5E
   21999/   11890 : 3038 D00C           		move.w	($FFFFD00C).w,d0
   22000/   11894 : 9068 000C           		sub.w	$C(a0),d0
   22001/   11898 : 6402                		bcc.s	Obj5F_MakeFuse
   22002/   1189A : 4440                		neg.w	d0
   22003/   1189C :                     
   22004/   1189C :                     Obj5F_MakeFuse:
   22005/   1189C : 0C40 0060           		cmpi.w	#$60,d0
   22006/   118A0 : 6466                		bcc.s	locret_11B5E
   22007/   118A2 : 4A78 FE08           		tst.w	($FFFFFE08).w
   22008/   118A6 : 6660                		bne.s	locret_11B5E
   22009/   118A8 : 117C 0004 0025      		move.b	#4,$25(a0)
   22010/   118AE : 317C 008F 0030      		move.w	#143,$30(a0)	; set fuse time
   22011/   118B4 : 4268 0010           		clr.w	$10(a0)
   22012/   118B8 : 117C 0002 001C      		move.b	#2,$1C(a0)
   22013/   118BE : 6100 BFAE           		bsr.w	SingleObjLoad2
   22014/   118C2 : 6644                		bne.s	locret_11B5E
   22015/   118C4 : 12BC 005F           		move.b	#$5F,0(a1)	; load fuse object
   22016/   118C8 : 3368 0008 0008      		move.w	8(a0),8(a1)
   22017/   118CE : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   22018/   118D4 : 3368 000C 0034      		move.w	$C(a0),$34(a1)
   22019/   118DA : 1368 0022 0022      		move.b	$22(a0),$22(a1)
   22020/   118E0 : 137C 0004 0028      		move.b	#4,$28(a1)
   22021/   118E6 : 137C 0003 001C      		move.b	#3,$1C(a1)
   22022/   118EC : 337C 0010 0012      		move.w	#$10,$12(a1)
   22023/   118F2 : 0828 0001 0022      		btst	#1,$22(a0)
   22024/   118F8 : 6704                		beq.s	loc_11B54
   22025/   118FA : 4469 0012           		neg.w	$12(a1)
   22026/   118FE :                     
   22027/   118FE :                     loc_11B54:
   22028/   118FE : 337C 008F 0030      		move.w	#143,$30(a1)	; set fuse time
   22029/   11904 : 2348 003C           		move.l	a0,$3C(a1)
   22030/   11908 :                     
   22031/   11908 :                     locret_11B5E:
   22032/   11908 : 4E75                		rts	
   22033/   1190A :                     ; ===========================================================================
   22034/   1190A :                     
   22035/   1190A :                     Obj5F_Display:				; XREF: Obj5F_Index
   22036/   1190A : 610E                		bsr.s	loc_11B70
   22037/   1190C : 43F9 0001 19B0      		lea	(Ani_obj5F).l,a1
   22038/   11912 : 6100 8BEA           		bsr.w	AnimateSprite
   22039/   11916 : 6000 DB52           		bra.w	MarkObjGone
   22040/   1191A :                     ; ===========================================================================
   22041/   1191A :                     
   22042/   1191A :                     loc_11B70:
   22043/   1191A : 5368 0030           		subq.w	#1,$30(a0)
   22044/   1191E : 6B06                		bmi.s	loc_11B7C
   22045/   11920 : 6100 BA8A           		bsr.w	SpeedToPos
   22046/   11924 : 4E75                		rts	
   22047/   11926 :                     ; ===========================================================================
   22048/   11926 :                     
   22049/   11926 :                     loc_11B7C:
   22050/   11926 : 4268 0030           		clr.w	$30(a0)
   22051/   1192A : 4228 0024           		clr.b	$24(a0)
   22052/   1192E : 3168 0034 000C      		move.w	$34(a0),$C(a0)
   22053/   11934 : 7203                		moveq	#3,d1
   22054/   11936 : 2248                		movea.l	a0,a1
   22055/   11938 : 45F9 0001 19A0      		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
   22056/   1193E : 6006                		bra.s	Obj5F_MakeShrap
   22057/   11940 :                     ; ===========================================================================
   22058/   11940 :                     
   22059/   11940 :                     Obj5F_Loop:
   22060/   11940 : 6100 BF2C           		bsr.w	SingleObjLoad2
   22061/   11944 : 6630                		bne.s	loc_11BCE
   22062/   11946 :                     
   22063/   11946 :                     Obj5F_MakeShrap:			; XREF: loc_11B7C
   22064/   11946 : 12BC 005F           		move.b	#$5F,0(a1)	; load shrapnel	object
   22065/   1194A : 3368 0008 0008      		move.w	8(a0),8(a1)
   22066/   11950 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   22067/   11956 : 137C 0006 0028      		move.b	#6,$28(a1)
   22068/   1195C : 137C 0004 001C      		move.b	#4,$1C(a1)
   22069/   11962 : 335A 0010           		move.w	(a2)+,$10(a1)
   22070/   11966 : 335A 0012           		move.w	(a2)+,$12(a1)
   22071/   1196A : 137C 0098 0020      		move.b	#$98,$20(a1)
   22072/   11970 : 08E9 0007 0001      		bset	#7,1(a1)
   22073/   11976 :                     
   22074/   11976 :                     loc_11BCE:
   22075/   11976 : 51C9 FFC8           		dbf	d1,Obj5F_Loop	; repeat 3 more	times
   22076/   1197A :                     
   22077/   1197A : 117C 0006 0024      		move.b	#6,$24(a0)
   22078/   11980 :                     
   22079/   11980 :                     Obj5F_End:				; XREF: Obj5F_Index
   22080/   11980 : 6100 BA2A           		bsr.w	SpeedToPos
   22081/   11984 : 0668 0018 0012      		addi.w	#$18,$12(a0)
   22082/   1198A : 43F9 0001 19B0      		lea	(Ani_obj5F).l,a1
   22083/   11990 : 6100 8B6C           		bsr.w	AnimateSprite
   22084/   11994 : 4A28 0001           		tst.b	1(a0)
   22085/   11998 : 6A00 BA74           		bpl.w	DeleteObject
   22086/   1199C : 6000 BA34           		bra.w	DisplaySprite
   22087/   119A0 :                     ; ===========================================================================
   22088/   119A0 : FE00 FD00 FF00      Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
            119A6 : FE00 0200 FD00 
            119AC : 0100 FE00          
   22089/   119B0 :                     
   22090/   119B0 :                     Ani_obj5F:
   22091/   119B0 :                     	include "_animations/obj5F.asm"
(1)    1/   119B0 :                     ; ---------------------------------------------------------------------------
(1)    2/   119B0 :                     ; Animation script - Bomb enemy
(1)    3/   119B0 :                     ; ---------------------------------------------------------------------------
(1)    4/   119B0 : 000A                		dc.w byte_11C12-Ani_obj5F
(1)    5/   119B2 : 000E                		dc.w byte_11C16-Ani_obj5F
(1)    6/   119B4 : 0014                		dc.w byte_11C1C-Ani_obj5F
(1)    7/   119B6 : 0018                		dc.w byte_11C20-Ani_obj5F
(1)    8/   119B8 : 001C                		dc.w byte_11C24-Ani_obj5F
(1)    9/   119BA : 1301 00FF           byte_11C12:	dc.b $13, 1, 0,	$FF
(1)   10/   119BE : 1305 0403 02FF      byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
(1)   11/   119C4 : 1307 06FF           byte_11C1C:	dc.b $13, 7, 6,	$FF
(1)   12/   119C8 : 0308 09FF           byte_11C20:	dc.b 3,	8, 9, $FF
(1)   13/   119CC : 030A 0BFF           byte_11C24:	dc.b 3,	$A, $B,	$FF
(1)   14/   119D0 : (MACRO)              		even
   22092/   119D0 :                     
   22093/   119D0 :                     ; ---------------------------------------------------------------------------
   22094/   119D0 :                     ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
   22095/   119D0 :                     ; ---------------------------------------------------------------------------
   22096/   119D0 :                     Map_obj5F:
   22097/   119D0 :                     	include "_mappings/obj5F.asm"
(1)    1/   119D0 :                     ; ---------------------------------------------------------------------------
(1)    2/   119D0 :                     ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
(1)    3/   119D0 :                     ; ---------------------------------------------------------------------------
(1)    4/   119D0 : 0018 0028           		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
(1)    5/   119D4 : 0038 0048           		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
(1)    6/   119D8 : 0058 0068           		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
(1)    7/   119DC : 0078 0083           		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
(1)    8/   119E0 : 008E 0094           		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
(1)    9/   119E4 : 009A 00A0           		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
(1)   10/   119E8 : 03                  byte_11C40:	dc.b 3
(1)   11/   119E9 : F10A 0000 F4        		dc.b $F1, $A, 0, 0, $F4
(1)   12/   119EE : 0908 0012 F4        		dc.b 9,	8, 0, $12, $F4
(1)   13/   119F3 : E701 0021 FC        		dc.b $E7, 1, 0,	$21, $FC
(1)   14/   119F8 : 03                  byte_11C50:	dc.b 3
(1)   15/   119F9 : F10A 0009 F4        		dc.b $F1, $A, 0, 9, $F4
(1)   16/   119FE : 0908 0012 F4        		dc.b 9,	8, 0, $12, $F4
(1)   17/   11A03 : E701 0021 FC        		dc.b $E7, 1, 0,	$21, $FC
(1)   18/   11A08 : 03                  byte_11C60:	dc.b 3
(1)   19/   11A09 : F00A 0000 F4        		dc.b $F0, $A, 0, 0, $F4
(1)   20/   11A0E : 0808 0015 F4        		dc.b 8,	8, 0, $15, $F4
(1)   21/   11A13 : E601 0021 FC        		dc.b $E6, 1, 0,	$21, $FC
(1)   22/   11A18 : 03                  byte_11C70:	dc.b 3
(1)   23/   11A19 : F10A 0009 F4        		dc.b $F1, $A, 0, 9, $F4
(1)   24/   11A1E : 0908 0018 F4        		dc.b 9,	8, 0, $18, $F4
(1)   25/   11A23 : E701 0021 FC        		dc.b $E7, 1, 0,	$21, $FC
(1)   26/   11A28 : 03                  byte_11C80:	dc.b 3
(1)   27/   11A29 : F00A 0000 F4        		dc.b $F0, $A, 0, 0, $F4
(1)   28/   11A2E : 0808 001B F4        		dc.b 8,	8, 0, $1B, $F4
(1)   29/   11A33 : E601 0021 FC        		dc.b $E6, 1, 0,	$21, $FC
(1)   30/   11A38 : 03                  byte_11C90:	dc.b 3
(1)   31/   11A39 : F10A 0009 F4        		dc.b $F1, $A, 0, 9, $F4
(1)   32/   11A3E : 0908 001E F4        		dc.b 9,	8, 0, $1E, $F4
(1)   33/   11A43 : E701 0021 FC        		dc.b $E7, 1, 0,	$21, $FC
(1)   34/   11A48 : 02                  byte_11CA0:	dc.b 2
(1)   35/   11A49 : F10A 0000 F4        		dc.b $F1, $A, 0, 0, $F4
(1)   36/   11A4E : 0908 0012 F4        		dc.b 9,	8, 0, $12, $F4
(1)   37/   11A53 : 02                  byte_11CAB:	dc.b 2
(1)   38/   11A54 : F10A 0009 F4        		dc.b $F1, $A, 0, 9, $F4
(1)   39/   11A59 : 0908 0012 F4        		dc.b 9,	8, 0, $12, $F4
(1)   40/   11A5E : 01                  byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
(1)   41/   11A5F : E701 0023 FC        		dc.b $E7, 1, 0,	$23, $FC
(1)   42/   11A64 : 01                  byte_11CBC:	dc.b 1			; fuse
(1)   43/   11A65 : E701 0025 FC        		dc.b $E7, 1, 0,	$25, $FC
(1)   44/   11A6A : 01                  byte_11CC2:	dc.b 1			; fireball (after it exploded)
(1)   45/   11A6B : FC00 0027 FC        		dc.b $FC, 0, 0,	$27, $FC
(1)   46/   11A70 : 01                  byte_11CC8:	dc.b 1			; fireball
(1)   47/   11A71 : FC00 0028 FC        		dc.b $FC, 0, 0,	$28, $FC
(1)   48/   11A76 : (MACRO)              		even
   22098/   11A76 :                     
   22099/   11A76 :                     ; ===========================================================================
   22100/   11A76 :                     ; ---------------------------------------------------------------------------
   22101/   11A76 :                     ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
   22102/   11A76 :                     ; ---------------------------------------------------------------------------
   22103/   11A76 :                     
   22104/   11A76 :                     Obj60:					; XREF: Obj_Index
   22105/   11A76 : 7000                		moveq	#0,d0
   22106/   11A78 : 1028 0024           		move.b	$24(a0),d0
   22107/   11A7C : 323B 0006           		move.w	Obj60_Index(pc,d0.w),d1
   22108/   11A80 : 4EFB 1002           		jmp	Obj60_Index(pc,d1.w)
   22109/   11A84 :                     ; ===========================================================================
   22110/   11A84 : 000A                Obj60_Index:	dc.w Obj60_Main-Obj60_Index
   22111/   11A86 : 00DE                		dc.w Obj60_ChkSonic-Obj60_Index
   22112/   11A88 : 011C                		dc.w Obj60_Display-Obj60_Index
   22113/   11A8A : 017A                		dc.w Obj60_MoveOrb-Obj60_Index
   22114/   11A8C : 01E4                		dc.w Obj60_ChkDel2-Obj60_Index
   22115/   11A8E :                     ; ===========================================================================
   22116/   11A8E :                     
   22117/   11A8E :                     Obj60_Main:				; XREF: Obj60_Index
   22118/   11A8E : 217C 0001 1C86      		move.l	#Map_obj60,4(a0)
            11A94 : 0004             
   22119/   11A96 : 317C 0429 0002      		move.w	#$429,2(a0)	; SBZ specific code
   22120/   11A9C : 0C38 0005 FE10      		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
   22121/   11AA2 : 6706                		beq.s	loc_11D02
   22122/   11AA4 : 317C 2429 0002      		move.w	#$2429,2(a0)	; SLZ specific code
   22123/   11AAA :                     
   22124/   11AAA :                     loc_11D02:
   22125/   11AAA : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
   22126/   11AB0 : 6606                		bne.s	loc_11D10
   22127/   11AB2 : 317C 0467 0002      		move.w	#$467,2(a0)	; LZ specific code
   22128/   11AB8 :                     
   22129/   11AB8 :                     loc_11D10:
   22130/   11AB8 : 0028 0004 0001      		ori.b	#4,1(a0)
   22131/   11ABE : 117C 0004 0018      		move.b	#4,$18(a0)
   22132/   11AC4 : 117C 000B 0020      		move.b	#$B,$20(a0)
   22133/   11ACA : 117C 000C 0019      		move.b	#$C,$19(a0)
   22134/   11AD0 : 7400                		moveq	#0,d2
   22135/   11AD2 : 45E8 0037           		lea	$37(a0),a2
   22136/   11AD6 : 264A                		movea.l	a2,a3
   22137/   11AD8 : 524A                		addq.w	#1,a2
   22138/   11ADA : 7203                		moveq	#3,d1
   22139/   11ADC :                     
   22140/   11ADC :                     Obj60_MakeOrbs:
   22141/   11ADC : 6100 BD90           		bsr.w	SingleObjLoad2
   22142/   11AE0 : 6652                		bne.s	loc_11D90
   22143/   11AE2 : 5213                		addq.b	#1,(a3)
   22144/   11AE4 : 3A09                		move.w	a1,d5
   22145/   11AE6 : 0445 D000           		subi.w	#-$3000,d5
   22146/   11AEA : EC4D                		lsr.w	#6,d5
   22147/   11AEC : 0245 007F           		andi.w	#$7F,d5
   22148/   11AF0 : 14C5                		move.b	d5,(a2)+
   22149/   11AF2 : 1290                		move.b	0(a0),0(a1)	; load spiked orb object
   22150/   11AF4 : 137C 0006 0024      		move.b	#6,$24(a1)
   22151/   11AFA : 2368 0004 0004      		move.l	4(a0),4(a1)
   22152/   11B00 : 3368 0002 0002      		move.w	2(a0),2(a1)
   22153/   11B06 : 0029 0004 0001      		ori.b	#4,1(a1)
   22154/   11B0C : 137C 0004 0018      		move.b	#4,$18(a1)
   22155/   11B12 : 137C 0008 0019      		move.b	#8,$19(a1)
   22156/   11B18 : 137C 0003 001A      		move.b	#3,$1A(a1)
   22157/   11B1E : 137C 0098 0020      		move.b	#$98,$20(a1)
   22158/   11B24 : 1342 0026           		move.b	d2,$26(a1)
   22159/   11B28 : 0602 0040           		addi.b	#$40,d2
   22160/   11B2C : 2348 003C           		move.l	a0,$3C(a1)
   22161/   11B30 : 51C9 FFAA           		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
   22162/   11B34 :                     
   22163/   11B34 :                     loc_11D90:
   22164/   11B34 : 7001                		moveq	#1,d0
   22165/   11B36 : 0828 0000 0022      		btst	#0,$22(a0)
   22166/   11B3C : 6702                		beq.s	Obj60_Move
   22167/   11B3E : 4440                		neg.w	d0
   22168/   11B40 :                     
   22169/   11B40 :                     Obj60_Move:
   22170/   11B40 : 1140 0036           		move.b	d0,$36(a0)
   22171/   11B44 : 1168 0028 0024      		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
   22172/   11B4A : 5428 0024           		addq.b	#2,$24(a0)
   22173/   11B4E : 317C FFC0 0010      		move.w	#-$40,$10(a0)	; move orbinaut	to the left
   22174/   11B54 : 0828 0000 0022      		btst	#0,$22(a0)	; is orbinaut reversed?
   22175/   11B5A : 6704                		beq.s	locret_11DBC	; if not, branch
   22176/   11B5C : 4468 0010           		neg.w	$10(a0)		; move orbinaut	to the right
   22177/   11B60 :                     
   22178/   11B60 :                     locret_11DBC:
   22179/   11B60 : 4E75                		rts	
   22180/   11B62 :                     ; ===========================================================================
   22181/   11B62 :                     
   22182/   11B62 :                     Obj60_ChkSonic:				; XREF: Obj60_Index
   22183/   11B62 : 3038 D008           		move.w	($FFFFD008).w,d0
   22184/   11B66 : 9068 0008           		sub.w	8(a0),d0
   22185/   11B6A : 6402                		bcc.s	loc_11DCA
   22186/   11B6C : 4440                		neg.w	d0
   22187/   11B6E :                     
   22188/   11B6E :                     loc_11DCA:
   22189/   11B6E : 0C40 00A0           		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
   22190/   11B72 : 641E                		bcc.s	Obj60_Animate	; if not, branch
   22191/   11B74 : 3038 D00C           		move.w	($FFFFD00C).w,d0
   22192/   11B78 : 9068 000C           		sub.w	$C(a0),d0
   22193/   11B7C : 6402                		bcc.s	loc_11DDC
   22194/   11B7E : 4440                		neg.w	d0
   22195/   11B80 :                     
   22196/   11B80 :                     loc_11DDC:
   22197/   11B80 : 0C40 0050           		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
   22198/   11B84 : 640C                		bcc.s	Obj60_Animate	; if not, branch
   22199/   11B86 : 4A78 FE08           		tst.w	($FFFFFE08).w	; is debug mode	on?
   22200/   11B8A : 6606                		bne.s	Obj60_Animate	; if yes, branch
   22201/   11B8C : 117C 0001 001C      		move.b	#1,$1C(a0)	; use "angry" animation
   22202/   11B92 :                     
   22203/   11B92 :                     Obj60_Animate:
   22204/   11B92 : 43F9 0001 1C78      		lea	(Ani_obj60).l,a1
   22205/   11B98 : 6100 8964           		bsr.w	AnimateSprite
   22206/   11B9C : 6000 0006           		bra.w	Obj60_ChkDel
   22207/   11BA0 :                     ; ===========================================================================
   22208/   11BA0 :                     
   22209/   11BA0 :                     Obj60_Display:				; XREF: Obj60_Index
   22210/   11BA0 : 6100 B80A           		bsr.w	SpeedToPos
   22211/   11BA4 :                     
   22212/   11BA4 :                     Obj60_ChkDel:				; XREF: Obj60_Animate
   22213/   11BA4 : 3028 0008           		move.w	8(a0),d0
   22214/   11BA8 : 0240 FF80           		andi.w	#$FF80,d0
   22215/   11BAC : 3238 F700           		move.w	($FFFFF700).w,d1
   22216/   11BB0 : 0441 0080           		subi.w	#$80,d1
   22217/   11BB4 : 0241 FF80           		andi.w	#$FF80,d1
   22218/   11BB8 : 9041                		sub.w	d1,d0
   22219/   11BBA : 0C40 0280           		cmpi.w	#$280,d0
   22220/   11BBE : 6200 0006           		bhi.w	Obj60_ChkGone
   22221/   11BC2 : 6000 B80E           		bra.w	DisplaySprite
   22222/   11BC6 :                     ; ===========================================================================
   22223/   11BC6 :                     
   22224/   11BC6 :                     Obj60_ChkGone:				; XREF: Obj60_ChkDel
   22225/   11BC6 : 45F8 FC00           		lea	($FFFFFC00).w,a2
   22226/   11BCA : 7000                		moveq	#0,d0
   22227/   11BCC : 1028 0023           		move.b	$23(a0),d0
   22228/   11BD0 : 6706                		beq.s	loc_11E34
   22229/   11BD2 : 08B2 0007 0002      		bclr	#7,2(a2,d0.w)
   22230/   11BD8 :                     
   22231/   11BD8 :                     loc_11E34:
   22232/   11BD8 : 45E8 0037           		lea	$37(a0),a2
   22233/   11BDC : 7400                		moveq	#0,d2
   22234/   11BDE : 141A                		move.b	(a2)+,d2
   22235/   11BE0 : 5342                		subq.w	#1,d2
   22236/   11BE2 : 6516                		bcs.s	Obj60_Delete
   22237/   11BE4 :                     
   22238/   11BE4 :                     loc_11E40:
   22239/   11BE4 : 7000                		moveq	#0,d0
   22240/   11BE6 : 101A                		move.b	(a2)+,d0
   22241/   11BE8 : ED48                		lsl.w	#6,d0
   22242/   11BEA : 0680 00FF D000      		addi.l	#$FFD000,d0
   22243/   11BF0 : 2240                		movea.l	d0,a1
   22244/   11BF2 : 6100 B81C           		bsr.w	DeleteObject2
   22245/   11BF6 : 51CA FFEC           		dbf	d2,loc_11E40
   22246/   11BFA :                     
   22247/   11BFA :                     Obj60_Delete:
   22248/   11BFA : 6000 B812           		bra.w	DeleteObject
   22249/   11BFE :                     ; ===========================================================================
   22250/   11BFE :                     
   22251/   11BFE :                     Obj60_MoveOrb:				; XREF: Obj60_Index
   22252/   11BFE : 2268 003C           		movea.l	$3C(a0),a1
   22253/   11C02 : 0C11 0060           		cmpi.b	#$60,0(a1)
   22254/   11C06 : 6600 B806           		bne.w	DeleteObject
   22255/   11C0A : 0C29 0002 001A      		cmpi.b	#2,$1A(a1)
   22256/   11C10 : 662C                		bne.s	Obj60_Circle
   22257/   11C12 : 0C28 0040 0026      		cmpi.b	#$40,$26(a0)
   22258/   11C18 : 6624                		bne.s	Obj60_Circle
   22259/   11C1A : 5428 0024           		addq.b	#2,$24(a0)
   22260/   11C1E : 5329 0037           		subq.b	#1,$37(a1)
   22261/   11C22 : 6604                		bne.s	Obj60_FireOrb
   22262/   11C24 : 5429 0024           		addq.b	#2,$24(a1)
   22263/   11C28 :                     
   22264/   11C28 :                     Obj60_FireOrb:
   22265/   11C28 : 317C FE00 0010      		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
   22266/   11C2E : 0829 0000 0022      		btst	#0,$22(a1)
   22267/   11C34 : 6704                		beq.s	Obj60_Display2
   22268/   11C36 : 4468 0010           		neg.w	$10(a0)
   22269/   11C3A :                     
   22270/   11C3A :                     Obj60_Display2:
   22271/   11C3A : 6000 B796           		bra.w	DisplaySprite
   22272/   11C3E :                     ; ===========================================================================
   22273/   11C3E :                     
   22274/   11C3E :                     Obj60_Circle:				; XREF: Obj60_MoveOrb
   22275/   11C3E : 1028 0026           		move.b	$26(a0),d0
   22276/   11C42 : 4EB9 0000 27C0      		jsr	(CalcSine).l
   22277/   11C48 : E841                		asr.w	#4,d1
   22278/   11C4A : D269 0008           		add.w	8(a1),d1
   22279/   11C4E : 3141 0008           		move.w	d1,8(a0)
   22280/   11C52 : E840                		asr.w	#4,d0
   22281/   11C54 : D069 000C           		add.w	$C(a1),d0
   22282/   11C58 : 3140 000C           		move.w	d0,$C(a0)
   22283/   11C5C : 1029 0036           		move.b	$36(a1),d0
   22284/   11C60 : D128 0026           		add.b	d0,$26(a0)
   22285/   11C64 : 6000 B76C           		bra.w	DisplaySprite
   22286/   11C68 :                     ; ===========================================================================
   22287/   11C68 :                     
   22288/   11C68 :                     Obj60_ChkDel2:				; XREF: Obj60_Index
   22289/   11C68 : 6100 B742           		bsr.w	SpeedToPos
   22290/   11C6C : 4A28 0001           		tst.b	1(a0)
   22291/   11C70 : 6A00 B79C           		bpl.w	DeleteObject
   22292/   11C74 : 6000 B75C           		bra.w	DisplaySprite
   22293/   11C78 :                     ; ===========================================================================
   22294/   11C78 :                     Ani_obj60:
   22295/   11C78 :                     	include "_animations/obj60.asm"
(1)    1/   11C78 :                     ; ---------------------------------------------------------------------------
(1)    2/   11C78 :                     ; Animation script - Orbinaut enemy
(1)    3/   11C78 :                     ; ---------------------------------------------------------------------------
(1)    4/   11C78 : 0004                		dc.w byte_11EDA-Ani_obj60
(1)    5/   11C7A : 0008                		dc.w byte_11EDE-Ani_obj60
(1)    6/   11C7C : 0F00 FF00           byte_11EDA:	dc.b $F, 0, $FF, 0
(1)    7/   11C80 : 0F01 02FE 0100      byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
(1)    8/   11C86 : (MACRO)              		even
   22296/   11C86 :                     
   22297/   11C86 :                     ; ---------------------------------------------------------------------------
   22298/   11C86 :                     ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
   22299/   11C86 :                     ; ---------------------------------------------------------------------------
   22300/   11C86 :                     Map_obj60:
   22301/   11C86 :                     	include "_mappings/obj60.asm"
(1)    1/   11C86 :                     ; ---------------------------------------------------------------------------
(1)    2/   11C86 :                     ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
(1)    3/   11C86 :                     ; ---------------------------------------------------------------------------
(1)    4/   11C86 : 0008 000E           		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
(1)    5/   11C8A : 0014 001A           		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
(1)    6/   11C8E : 01                  byte_11EEC:	dc.b 1
(1)    7/   11C8F : F40A 0000 F4        		dc.b $F4, $A, 0, 0, $F4
(1)    8/   11C94 : 01                  byte_11EF2:	dc.b 1
(1)    9/   11C95 : F40A 2009 F4        		dc.b $F4, $A, $20, 9, $F4
(1)   10/   11C9A : 01                  byte_11EF8:	dc.b 1
(1)   11/   11C9B : F40A 0012 F4        		dc.b $F4, $A, 0, $12, $F4
(1)   12/   11CA0 : 01                  byte_11EFE:	dc.b 1
(1)   13/   11CA1 : F805 001B F8        		dc.b $F8, 5, 0,	$1B, $F8
(1)   14/   11CA6 : (MACRO)              		even
   22302/   11CA6 :                     
   22303/   11CA6 :                     ; ===========================================================================
   22304/   11CA6 :                     ; ---------------------------------------------------------------------------
   22305/   11CA6 :                     ; Object 16 - harpoon (LZ)
   22306/   11CA6 :                     ; ---------------------------------------------------------------------------
   22307/   11CA6 :                     
   22308/   11CA6 :                     Obj16:					; XREF: Obj_Index
   22309/   11CA6 : 7000                		moveq	#0,d0
   22310/   11CA8 : 1028 0024           		move.b	$24(a0),d0
   22311/   11CAC : 323B 0006           		move.w	Obj16_Index(pc,d0.w),d1
   22312/   11CB0 : 4EFB 1002           		jmp	Obj16_Index(pc,d1.w)
   22313/   11CB4 :                     ; ===========================================================================
   22314/   11CB4 : 0006                Obj16_Index:	dc.w Obj16_Main-Obj16_Index
   22315/   11CB6 : 0036                		dc.w Obj16_Move-Obj16_Index
   22316/   11CB8 : 0056                		dc.w Obj16_Wait-Obj16_Index
   22317/   11CBA :                     ; ===========================================================================
   22318/   11CBA :                     
   22319/   11CBA :                     Obj16_Main:				; XREF: Obj16_Index
   22320/   11CBA : 5428 0024           		addq.b	#2,$24(a0)
   22321/   11CBE : 217C 0001 1D3C      		move.l	#Map_obj16,4(a0)
            11CC4 : 0004             
   22322/   11CC6 : 317C 03CC 0002      		move.w	#$3CC,2(a0)
   22323/   11CCC : 0028 0004 0001      		ori.b	#4,1(a0)
   22324/   11CD2 : 117C 0004 0018      		move.b	#4,$18(a0)
   22325/   11CD8 : 1168 0028 001C      		move.b	$28(a0),$1C(a0)
   22326/   11CDE : 117C 0014 0019      		move.b	#$14,$19(a0)
   22327/   11CE4 : 317C 003C 0030      		move.w	#60,$30(a0)
   22328/   11CEA :                     
   22329/   11CEA :                     Obj16_Move:				; XREF: Obj16_Index
   22330/   11CEA : 43F9 0001 1D24      		lea	(Ani_obj16).l,a1
   22331/   11CF0 : 6100 880C           		bsr.w	AnimateSprite
   22332/   11CF4 : 7000                		moveq	#0,d0
   22333/   11CF6 : 1028 001A           		move.b	$1A(a0),d0	; move frame number to d0
   22334/   11CFA : 117B 0008 0020      		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
   22335/   11D00 : 6000 D768           		bra.w	MarkObjGone
   22336/   11D04 :                     ; ===========================================================================
   22337/   11D04 : 9B9C 9D9E 9FA0      Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
   22338/   11D0A :                     ; ===========================================================================
   22339/   11D0A :                     
   22340/   11D0A :                     Obj16_Wait:				; XREF: Obj16_Index
   22341/   11D0A : 5368 0030           		subq.w	#1,$30(a0)
   22342/   11D0E : 6A10                		bpl.s	Obj16_ChkDel
   22343/   11D10 : 317C 003C 0030      		move.w	#60,$30(a0)
   22344/   11D16 : 5528 0024           		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
   22345/   11D1A : 0868 0000 001C      		bchg	#0,$1C(a0)	; reverse animation
   22346/   11D20 :                     
   22347/   11D20 :                     Obj16_ChkDel:
   22348/   11D20 : 6000 D748           		bra.w	MarkObjGone
   22349/   11D24 :                     ; ===========================================================================
   22350/   11D24 :                     Ani_obj16:
   22351/   11D24 :                     	include "_animations/obj16.asm"
(1)    1/   11D24 :                     ; ---------------------------------------------------------------------------
(1)    2/   11D24 :                     ; Animation script - harpoon (LZ)
(1)    3/   11D24 :                     ; ---------------------------------------------------------------------------
(1)    4/   11D24 : 0008                		dc.w byte_11F8A-Ani_obj16
(1)    5/   11D26 : 000C                		dc.w byte_11F8E-Ani_obj16
(1)    6/   11D28 : 0010                		dc.w byte_11F92-Ani_obj16
(1)    7/   11D2A : 0014                		dc.w byte_11F96-Ani_obj16
(1)    8/   11D2C : 0301 02FC           byte_11F8A:	dc.b 3,	1, 2, $FC
(1)    9/   11D30 : 0301 00FC           byte_11F8E:	dc.b 3,	1, 0, $FC
(1)   10/   11D34 : 0304 05FC           byte_11F92:	dc.b 3,	4, 5, $FC
(1)   11/   11D38 : 0304 03FC           byte_11F96:	dc.b 3,	4, 3, $FC
(1)   12/   11D3C : (MACRO)              		even
   22352/   11D3C :                     
   22353/   11D3C :                     ; ---------------------------------------------------------------------------
   22354/   11D3C :                     ; Sprite mappings - harpoon (LZ)
   22355/   11D3C :                     ; ---------------------------------------------------------------------------
   22356/   11D3C :                     Map_obj16:
   22357/   11D3C :                     	include "_mappings/obj16.asm"
(1)    1/   11D3C :                     ; ---------------------------------------------------------------------------
(1)    2/   11D3C :                     ; Sprite mappings - harpoon (LZ)
(1)    3/   11D3C :                     ; ---------------------------------------------------------------------------
(1)    4/   11D3C : 000C 0012           		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
(1)    5/   11D40 : 0018 0023           		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
(1)    6/   11D44 : 0029 002F           		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
(1)    7/   11D48 : 01                  byte_11FA6:	dc.b 1
(1)    8/   11D49 : FC04 0000 F8        		dc.b $FC, 4, 0,	0, $F8
(1)    9/   11D4E : 01                  byte_11FAC:	dc.b 1
(1)   10/   11D4F : FC0C 0002 F8        		dc.b $FC, $C, 0, 2, $F8
(1)   11/   11D54 : 02                  byte_11FB2:	dc.b 2
(1)   12/   11D55 : FC08 0006 F8        		dc.b $FC, 8, 0,	6, $F8
(1)   13/   11D5A : FC08 0003 10        		dc.b $FC, 8, 0,	3, $10
(1)   14/   11D5F : 01                  byte_11FBD:	dc.b 1
(1)   15/   11D60 : F801 0009 FC        		dc.b $F8, 1, 0,	9, $FC
(1)   16/   11D65 : 01                  byte_11FC3:	dc.b 1
(1)   17/   11D66 : E803 000B FC        		dc.b $E8, 3, 0,	$B, $FC
(1)   18/   11D6B : 02                  byte_11FC9:	dc.b 2
(1)   19/   11D6C : D802 000B FC        		dc.b $D8, 2, 0,	$B, $FC
(1)   20/   11D71 : F002 000F FC        		dc.b $F0, 2, 0,	$F, $FC
(1)   21/   11D76 : (MACRO)              		even
   22358/   11D76 :                     
   22359/   11D76 :                     ; ===========================================================================
   22360/   11D76 :                     ; ---------------------------------------------------------------------------
   22361/   11D76 :                     ; Object 61 - blocks (LZ)
   22362/   11D76 :                     ; ---------------------------------------------------------------------------
   22363/   11D76 :                     
   22364/   11D76 :                     Obj61:					; XREF: Obj_Index
   22365/   11D76 : 7000                		moveq	#0,d0
   22366/   11D78 : 1028 0024           		move.b	$24(a0),d0
   22367/   11D7C : 323B 0006           		move.w	Obj61_Index(pc,d0.w),d1
   22368/   11D80 : 4EFB 1002           		jmp	Obj61_Index(pc,d1.w)
   22369/   11D84 :                     ; ===========================================================================
   22370/   11D84 : 000C                Obj61_Index:	dc.w Obj61_Main-Obj61_Index
   22371/   11D86 : 006A                		dc.w Obj61_Action-Obj61_Index
   22372/   11D88 :                     
   22373/   11D88 : 1010                Obj61_Var:	dc.b $10, $10		; width, height
   22374/   11D8A : 200C                		dc.b $20, $C
   22375/   11D8C : 1010                		dc.b $10, $10
   22376/   11D8E : 1010                		dc.b $10, $10
   22377/   11D90 :                     ; ===========================================================================
   22378/   11D90 :                     
   22379/   11D90 :                     Obj61_Main:				; XREF: Obj61_Index
   22380/   11D90 : 5428 0024           		addq.b	#2,$24(a0)
   22381/   11D94 : 217C 0001 1F64      		move.l	#Map_obj61,4(a0)
            11D9A : 0004             
   22382/   11D9C : 317C 43E6 0002      		move.w	#$43E6,2(a0)
   22383/   11DA2 : 117C 0004 0001      		move.b	#4,1(a0)
   22384/   11DA8 : 117C 0003 0018      		move.b	#3,$18(a0)
   22385/   11DAE : 7000                		moveq	#0,d0
   22386/   11DB0 : 1028 0028           		move.b	$28(a0),d0
   22387/   11DB4 : E648                		lsr.w	#3,d0
   22388/   11DB6 : 0240 000E           		andi.w	#$E,d0
   22389/   11DBA : 45FB 00CC           		lea	Obj61_Var(pc,d0.w),a2
   22390/   11DBE : 115A 0019           		move.b	(a2)+,$19(a0)
   22391/   11DC2 : 1152 0016           		move.b	(a2),$16(a0)
   22392/   11DC6 : E248                		lsr.w	#1,d0
   22393/   11DC8 : 1140 001A           		move.b	d0,$1A(a0)
   22394/   11DCC : 3168 0008 0034      		move.w	8(a0),$34(a0)
   22395/   11DD2 : 3168 000C 0030      		move.w	$C(a0),$30(a0)
   22396/   11DD8 : 1028 0028           		move.b	$28(a0),d0
   22397/   11DDC : 0200 000F           		andi.b	#$F,d0
   22398/   11DE0 : 670C                		beq.s	Obj61_Action
   22399/   11DE2 : 0C00 0007           		cmpi.b	#7,d0
   22400/   11DE6 : 6706                		beq.s	Obj61_Action
   22401/   11DE8 : 117C 0001 0038      		move.b	#1,$38(a0)
   22402/   11DEE :                     
   22403/   11DEE :                     Obj61_Action:				; XREF: Obj61_Index
   22404/   11DEE : 3F28 0008           		move.w	8(a0),-(sp)
   22405/   11DF2 : 7000                		moveq	#0,d0
   22406/   11DF4 : 1028 0028           		move.b	$28(a0),d0
   22407/   11DF8 : 0240 000F           		andi.w	#$F,d0
   22408/   11DFC : D040                		add.w	d0,d0
   22409/   11DFE : 323B 0050           		move.w	Obj61_TypeIndex(pc,d0.w),d1
   22410/   11E02 : 4EBB 104C           		jsr	Obj61_TypeIndex(pc,d1.w)
   22411/   11E06 : 381F                		move.w	(sp)+,d4
   22412/   11E08 : 4A28 0001           		tst.b	1(a0)
   22413/   11E0C : 6A20                		bpl.s	Obj61_ChkDel
   22414/   11E0E : 7200                		moveq	#0,d1
   22415/   11E10 : 1228 0019           		move.b	$19(a0),d1
   22416/   11E14 : 0641 000B           		addi.w	#$B,d1
   22417/   11E18 : 7400                		moveq	#0,d2
   22418/   11E1A : 1428 0016           		move.b	$16(a0),d2
   22419/   11E1E : 3602                		move.w	d2,d3
   22420/   11E20 : 5243                		addq.w	#1,d3
   22421/   11E22 : 6100 D96E           		bsr.w	SolidObject
   22422/   11E26 : 1144 003F           		move.b	d4,$3F(a0)
   22423/   11E2A : 6100 00F6           		bsr.w	loc_12180
   22424/   11E2E :                     
   22425/   11E2E :                     Obj61_ChkDel:
   22426/   11E2E : 3028 0034           		move.w	$34(a0),d0
   22427/   11E32 : 0240 FF80           		andi.w	#$FF80,d0
   22428/   11E36 : 3238 F700           		move.w	($FFFFF700).w,d1
   22429/   11E3A : 0441 0080           		subi.w	#$80,d1
   22430/   11E3E : 0241 FF80           		andi.w	#$FF80,d1
   22431/   11E42 : 9041                		sub.w	d1,d0
   22432/   11E44 : 0C40 0280           		cmpi.w	#$280,d0
   22433/   11E48 : 6200 B5C4           		bhi.w	DeleteObject
   22434/   11E4C : 6000 B584           		bra.w	DisplaySprite
   22435/   11E50 :                     ; ===========================================================================
   22436/   11E50 : 0010 0012           Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
   22437/   11E54 : 0038 0012           		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
   22438/   11E58 : 005A 007A           		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
   22439/   11E5C : 0038 008C           		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
   22440/   11E60 :                     ; ===========================================================================
   22441/   11E60 :                     
   22442/   11E60 :                     Obj61_Type00:				; XREF: Obj61_TypeIndex
   22443/   11E60 : 4E75                		rts	
   22444/   11E62 :                     ; ===========================================================================
   22445/   11E62 :                     
   22446/   11E62 :                     Obj61_Type01:				; XREF: Obj61_TypeIndex
   22447/   11E62 : 4A68 0036           		tst.w	$36(a0)		; is Sonic standing on the object?
   22448/   11E66 : 6610                		bne.s	loc_120D6	; if yes, branch
   22449/   11E68 : 0828 0003 0022      		btst	#3,$22(a0)
   22450/   11E6E : 6706                		beq.s	locret_120D4
   22451/   11E70 : 317C 001E 0036      		move.w	#30,$36(a0)	; wait for « second
   22452/   11E76 :                     
   22453/   11E76 :                     locret_120D4:
   22454/   11E76 : 4E75                		rts	
   22455/   11E78 :                     ; ===========================================================================
   22456/   11E78 :                     
   22457/   11E78 :                     loc_120D6:
   22458/   11E78 : 5368 0036           		subq.w	#1,$36(a0)	; subtract 1 from waiting time
   22459/   11E7C : 66F8                		bne.s	locret_120D4	; if time remains, branch
   22460/   11E7E : 5228 0028           		addq.b	#1,$28(a0)	; add 1	to type
   22461/   11E82 : 4228 0038           		clr.b	$38(a0)
   22462/   11E86 : 4E75                		rts	
   22463/   11E88 :                     ; ===========================================================================
   22464/   11E88 :                     
   22465/   11E88 :                     Obj61_Type02:				; XREF: Obj61_TypeIndex
   22466/   11E88 : 6100 B522           		bsr.w	SpeedToPos
   22467/   11E8C : 5068 0012           		addq.w	#8,$12(a0)	; make object fall
   22468/   11E90 : 6100 2D76           		bsr.w	ObjHitFloor
   22469/   11E94 : 4A41                		tst.w	d1
   22470/   11E96 : 6A00 0010           		bpl.w	locret_12106
   22471/   11E9A : 5241                		addq.w	#1,d1
   22472/   11E9C : D368 000C           		add.w	d1,$C(a0)
   22473/   11EA0 : 4268 0012           		clr.w	$12(a0)		; stop when it touches the floor
   22474/   11EA4 : 4228 0028           		clr.b	$28(a0)		; set type to 00 (non-moving type)
   22475/   11EA8 :                     
   22476/   11EA8 :                     locret_12106:
   22477/   11EA8 : 4E75                		rts	
   22478/   11EAA :                     ; ===========================================================================
   22479/   11EAA :                     
   22480/   11EAA :                     Obj61_Type04:				; XREF: Obj61_TypeIndex
   22481/   11EAA : 6100 B500           		bsr.w	SpeedToPos
   22482/   11EAE : 5168 0012           		subq.w	#8,$12(a0)	; make object rise
   22483/   11EB2 : 6100 2EDA           		bsr.w	ObjHitCeiling
   22484/   11EB6 : 4A41                		tst.w	d1
   22485/   11EB8 : 6A00 000E           		bpl.w	locret_12126
   22486/   11EBC : 9368 000C           		sub.w	d1,$C(a0)
   22487/   11EC0 : 4268 0012           		clr.w	$12(a0)		; stop when it touches the ceiling
   22488/   11EC4 : 4228 0028           		clr.b	$28(a0)		; set type to 00 (non-moving type)
   22489/   11EC8 :                     
   22490/   11EC8 :                     locret_12126:
   22491/   11EC8 : 4E75                		rts	
   22492/   11ECA :                     ; ===========================================================================
   22493/   11ECA :                     
   22494/   11ECA :                     Obj61_Type05:				; XREF: Obj61_TypeIndex
   22495/   11ECA : 0C28 0001 003F      		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
   22496/   11ED0 : 6608                		bne.s	locret_12138	; if not, branch
   22497/   11ED2 : 5228 0028           		addq.b	#1,$28(a0)	; if yes, add 1	to type
   22498/   11ED6 : 4228 0038           		clr.b	$38(a0)
   22499/   11EDA :                     
   22500/   11EDA :                     locret_12138:
   22501/   11EDA : 4E75                		rts	
   22502/   11EDC :                     ; ===========================================================================
   22503/   11EDC :                     
   22504/   11EDC :                     Obj61_Type07:				; XREF: Obj61_TypeIndex
   22505/   11EDC : 3038 F646           		move.w	($FFFFF646).w,d0
   22506/   11EE0 : 9068 000C           		sub.w	$C(a0),d0
   22507/   11EE4 : 673A                		beq.s	locret_1217E
   22508/   11EE6 : 641C                		bcc.s	loc_12162
   22509/   11EE8 : 0C40 FFFE           		cmpi.w	#-2,d0
   22510/   11EEC : 6C02                		bge.s	loc_1214E
   22511/   11EEE : 70FE                		moveq	#-2,d0
   22512/   11EF0 :                     
   22513/   11EF0 :                     loc_1214E:
   22514/   11EF0 : D168 000C           		add.w	d0,$C(a0)	; make the block rise with water level
   22515/   11EF4 : 6100 2E98           		bsr.w	ObjHitCeiling
   22516/   11EF8 : 4A41                		tst.w	d1
   22517/   11EFA : 6A00 0006           		bpl.w	locret_12160
   22518/   11EFE : 9368 000C           		sub.w	d1,$C(a0)
   22519/   11F02 :                     
   22520/   11F02 :                     locret_12160:
   22521/   11F02 : 4E75                		rts	
   22522/   11F04 :                     ; ===========================================================================
   22523/   11F04 :                     
   22524/   11F04 :                     loc_12162:				; XREF: Obj61_Type07
   22525/   11F04 : 0C40 0002           		cmpi.w	#2,d0
   22526/   11F08 : 6F02                		ble.s	loc_1216A
   22527/   11F0A : 7002                		moveq	#2,d0
   22528/   11F0C :                     
   22529/   11F0C :                     loc_1216A:
   22530/   11F0C : D168 000C           		add.w	d0,$C(a0)	; make the block sink with water level
   22531/   11F10 : 6100 2CF6           		bsr.w	ObjHitFloor
   22532/   11F14 : 4A41                		tst.w	d1
   22533/   11F16 : 6A00 0008           		bpl.w	locret_1217E
   22534/   11F1A : 5241                		addq.w	#1,d1
   22535/   11F1C : D368 000C           		add.w	d1,$C(a0)
   22536/   11F20 :                     
   22537/   11F20 :                     locret_1217E:
   22538/   11F20 : 4E75                		rts	
   22539/   11F22 :                     ; ===========================================================================
   22540/   11F22 :                     
   22541/   11F22 :                     loc_12180:				; XREF: Obj61_Action
   22542/   11F22 : 4A28 0038           		tst.b	$38(a0)
   22543/   11F26 : 673A                		beq.s	locret_121C0
   22544/   11F28 : 0828 0003 0022      		btst	#3,$22(a0)
   22545/   11F2E : 660C                		bne.s	loc_1219A
   22546/   11F30 : 4A28 003E           		tst.b	$3E(a0)
   22547/   11F34 : 672C                		beq.s	locret_121C0
   22548/   11F36 : 5928 003E           		subq.b	#4,$3E(a0)
   22549/   11F3A : 600C                		bra.s	loc_121A6
   22550/   11F3C :                     ; ===========================================================================
   22551/   11F3C :                     
   22552/   11F3C :                     loc_1219A:
   22553/   11F3C : 0C28 0040 003E      		cmpi.b	#$40,$3E(a0)
   22554/   11F42 : 671E                		beq.s	locret_121C0
   22555/   11F44 : 5828 003E           		addq.b	#4,$3E(a0)
   22556/   11F48 :                     
   22557/   11F48 :                     loc_121A6:
   22558/   11F48 : 1028 003E           		move.b	$3E(a0),d0
   22559/   11F4C : 4EB9 0000 27C0      		jsr	(CalcSine).l
   22560/   11F52 : 323C 0400           		move.w	#$400,d1
   22561/   11F56 : C1C1                		muls.w	d1,d0
   22562/   11F58 : 4840                		swap	d0
   22563/   11F5A : D068 0030           		add.w	$30(a0),d0
   22564/   11F5E : 3140 000C           		move.w	d0,$C(a0)
   22565/   11F62 :                     
   22566/   11F62 :                     locret_121C0:
   22567/   11F62 : 4E75                		rts	
   22568/   11F64 :                     ; ===========================================================================
   22569/   11F64 :                     ; ---------------------------------------------------------------------------
   22570/   11F64 :                     ; Sprite mappings - blocks (LZ)
   22571/   11F64 :                     ; ---------------------------------------------------------------------------
   22572/   11F64 :                     Map_obj61:
   22573/   11F64 :                     	include "_mappings/obj61.asm"
(1)    1/   11F64 :                     ; ---------------------------------------------------------------------------
(1)    2/   11F64 :                     ; Sprite mappings - blocks (LZ)
(1)    3/   11F64 :                     ; ---------------------------------------------------------------------------
(1)    4/   11F64 : 0008 000E           		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
(1)    5/   11F68 : 0019 001F           		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
(1)    6/   11F6C : 01                  byte_121CA:	dc.b 1
(1)    7/   11F6D : F00F 0000 F0        		dc.b $F0, $F, 0, 0, $F0
(1)    8/   11F72 : 02                  byte_121D0:	dc.b 2
(1)    9/   11F73 : F40E 0069 E0        		dc.b $F4, $E, 0, $69, $E0
(1)   10/   11F78 : F40E 0075 00        		dc.b $F4, $E, 0, $75, 0
(1)   11/   11F7D : 01                  byte_121DB:	dc.b 1
(1)   12/   11F7E : F00F 011A F0        		dc.b $F0, $F, 1, $1A, $F0
(1)   13/   11F83 : 01                  byte_121E1:	dc.b 1
(1)   14/   11F84 : F00F FDFA F0        		dc.b $F0, $F, $FD, $FA,	$F0
(1)   15/   11F89 : (MACRO)              		even
(1)   15/   11F89 : 00                                          dc.b 0 ;ds.b 1 
   22574/   11F8A :                     
   22575/   11F8A :                     ; ===========================================================================
   22576/   11F8A :                     ; ---------------------------------------------------------------------------
   22577/   11F8A :                     ; Object 62 - gargoyle head (LZ)
   22578/   11F8A :                     ; ---------------------------------------------------------------------------
   22579/   11F8A :                     
   22580/   11F8A :                     Obj62:					; XREF: Obj_Index
   22581/   11F8A : 7000                		moveq	#0,d0
   22582/   11F8C : 1028 0024           		move.b	$24(a0),d0
   22583/   11F90 : 323B 000A           		move.w	Obj62_Index(pc,d0.w),d1
   22584/   11F94 : 4EBB 1006           		jsr	Obj62_Index(pc,d1.w)
   22585/   11F98 : 6000 D4D0           		bra.w	MarkObjGone
   22586/   11F9C :                     ; ===========================================================================
   22587/   11F9C : 0010                Obj62_Index:	dc.w Obj62_Main-Obj62_Index
   22588/   11F9E : 004E                		dc.w Obj62_MakeFire-Obj62_Index
   22589/   11FA0 : 0088                		dc.w Obj62_FireBall-Obj62_Index
   22590/   11FA2 : 00E4                		dc.w Obj62_AniFire-Obj62_Index
   22591/   11FA4 :                     
   22592/   11FA4 : 1E3C 5A78 96B4      Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
            11FAA : D2F0             
   22593/   11FAC :                     ; ===========================================================================
   22594/   11FAC :                     
   22595/   11FAC :                     Obj62_Main:				; XREF: Obj62_Index
   22596/   11FAC : 5428 0024           		addq.b	#2,$24(a0)
   22597/   11FB0 : 217C 0001 20B8      		move.l	#Map_obj62,4(a0)
            11FB6 : 0004             
   22598/   11FB8 : 317C 42E9 0002      		move.w	#$42E9,2(a0)
   22599/   11FBE : 0028 0004 0001      		ori.b	#4,1(a0)
   22600/   11FC4 : 117C 0003 0018      		move.b	#3,$18(a0)
   22601/   11FCA : 117C 0010 0019      		move.b	#$10,$19(a0)
   22602/   11FD0 : 1028 0028           		move.b	$28(a0),d0	; get object type
   22603/   11FD4 : 0240 000F           		andi.w	#$F,d0		; read only the	2nd digit
   22604/   11FD8 : 117B 00CA 001F      		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
   22605/   11FDE : 1168 001F 001E      		move.b	$1F(a0),$1E(a0)
   22606/   11FE4 : 0228 000F 0028      		andi.b	#$F,$28(a0)
   22607/   11FEA :                     
   22608/   11FEA :                     Obj62_MakeFire:				; XREF: Obj62_Index
   22609/   11FEA : 5328 001E           		subq.b	#1,$1E(a0)
   22610/   11FEE : 6632                		bne.s	Obj62_NoFire
   22611/   11FF0 : 1168 001F 001E      		move.b	$1F(a0),$1E(a0)
   22612/   11FF6 : 6100 B654           		bsr.w	ChkObjOnScreen
   22613/   11FFA : 6626                		bne.s	Obj62_NoFire
   22614/   11FFC : 6100 B85A           		bsr.w	SingleObjLoad
   22615/   12000 : 6620                		bne.s	Obj62_NoFire
   22616/   12002 : 12BC 0062           		move.b	#$62,0(a1)	; load fireball	object
   22617/   12006 : 5829 0024           		addq.b	#4,$24(a1)
   22618/   1200A : 3368 0008 0008      		move.w	8(a0),8(a1)
   22619/   12010 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   22620/   12016 : 1368 0001 0001      		move.b	1(a0),1(a1)
   22621/   1201C : 1368 0022 0022      		move.b	$22(a0),$22(a1)
   22622/   12022 :                     
   22623/   12022 :                     Obj62_NoFire:
   22624/   12022 : 4E75                		rts	
   22625/   12024 :                     ; ===========================================================================
   22626/   12024 :                     
   22627/   12024 :                     Obj62_FireBall:				; XREF: Obj62_Index
   22628/   12024 : 5428 0024           		addq.b	#2,$24(a0)
   22629/   12028 : 117C 0008 0016      		move.b	#8,$16(a0)
   22630/   1202E : 117C 0008 0017      		move.b	#8,$17(a0)
   22631/   12034 : 217C 0001 20B8      		move.l	#Map_obj62,4(a0)
            1203A : 0004             
   22632/   1203C : 317C 02E9 0002      		move.w	#$2E9,2(a0)
   22633/   12042 : 0028 0004 0001      		ori.b	#4,1(a0)
   22634/   12048 : 117C 0004 0018      		move.b	#4,$18(a0)
   22635/   1204E : 117C 0098 0020      		move.b	#$98,$20(a0)
   22636/   12054 : 117C 0008 0019      		move.b	#8,$19(a0)
   22637/   1205A : 117C 0002 001A      		move.b	#2,$1A(a0)
   22638/   12060 : 5068 000C           		addq.w	#8,$C(a0)
   22639/   12064 : 317C 0200 0010      		move.w	#$200,$10(a0)
   22640/   1206A : 0828 0000 0022      		btst	#0,$22(a0)
   22641/   12070 : 6604                		bne.s	Obj62_Sound
   22642/   12072 : 4468 0010           		neg.w	$10(a0)
   22643/   12076 :                     
   22644/   12076 :                     Obj62_Sound:
   22645/   12076 : 303C 00AE           		move.w	#$AE,d0
   22646/   1207A : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play lava ball sound
   22647/   12080 :                     
   22648/   12080 :                     Obj62_AniFire:				; XREF: Obj62_Index
   22649/   12080 : 1038 FE05           		move.b	($FFFFFE05).w,d0
   22650/   12084 : 0200 0007           		andi.b	#7,d0
   22651/   12088 : 6606                		bne.s	Obj62_StopFire
   22652/   1208A : 0868 0000 001A      		bchg	#0,$1A(a0)	; switch between frame 01 and 02
   22653/   12090 :                     
   22654/   12090 :                     Obj62_StopFire:
   22655/   12090 : 6100 B31A           		bsr.w	SpeedToPos
   22656/   12094 : 0828 0000 0022      		btst	#0,$22(a0)
   22657/   1209A : 660E                		bne.s	Obj62_StopFire2
   22658/   1209C : 76F8                		moveq	#-8,d3
   22659/   1209E : 6100 2DBC           		bsr.w	ObjHitWallLeft
   22660/   120A2 : 4A41                		tst.w	d1
   22661/   120A4 : 6B00 B368           		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
   22662/   120A8 : 4E75                		rts	
   22663/   120AA :                     ; ===========================================================================
   22664/   120AA :                     
   22665/   120AA :                     Obj62_StopFire2:
   22666/   120AA : 7608                		moveq	#8,d3
   22667/   120AC : 6100 2C1C           		bsr.w	ObjHitWallRight
   22668/   120B0 : 4A41                		tst.w	d1
   22669/   120B2 : 6B00 B35A           		bmi.w	DeleteObject
   22670/   120B6 : 4E75                		rts	
   22671/   120B8 :                     ; ===========================================================================
   22672/   120B8 :                     ; ---------------------------------------------------------------------------
   22673/   120B8 :                     ; Sprite mappings - gargoyle head (LZ)
   22674/   120B8 :                     ; ---------------------------------------------------------------------------
   22675/   120B8 :                     Map_obj62:
   22676/   120B8 :                     	include "_mappings/obj62.asm"
(1)    1/   120B8 :                     ; ---------------------------------------------------------------------------
(1)    2/   120B8 :                     ; Sprite mappings - gargoyle head (LZ)
(1)    3/   120B8 :                     ; ---------------------------------------------------------------------------
(1)    4/   120B8 : 0008 0008           		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
(1)    5/   120BC : 0018 001E           		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
(1)    6/   120C0 : 03                  byte_12320:	dc.b 3
(1)    7/   120C1 : F004 0000 00        		dc.b $F0, 4, 0,	0, 0
(1)    8/   120C6 : F80D 0002 F0        		dc.b $F8, $D, 0, 2, $F0
(1)    9/   120CB : 0808 000A F8        		dc.b 8,	8, 0, $A, $F8
(1)   10/   120D0 : 01                  byte_12330:	dc.b 1
(1)   11/   120D1 : FC04 000D F8        		dc.b $FC, 4, 0,	$D, $F8
(1)   12/   120D6 : 01                  byte_12336:	dc.b 1
(1)   13/   120D7 : FC04 000F F8        		dc.b $FC, 4, 0,	$F, $F8
(1)   14/   120DC : (MACRO)              		even
   22677/   120DC :                     
   22678/   120DC :                     ; ===========================================================================
   22679/   120DC :                     ; ---------------------------------------------------------------------------
   22680/   120DC :                     ; Object 63 - platforms	on a conveyor belt (LZ)
   22681/   120DC :                     ; ---------------------------------------------------------------------------
   22682/   120DC :                     
   22683/   120DC :                     Obj63:					; XREF: Obj_Index
   22684/   120DC : 7000                		moveq	#0,d0
   22685/   120DE : 1028 0024           		move.b	$24(a0),d0
   22686/   120E2 : 323B 004E           		move.w	Obj63_Index(pc,d0.w),d1
   22687/   120E6 : 4EBB 104A           		jsr	Obj63_Index(pc,d1.w)
   22688/   120EA : 3028 0030           		move.w	$30(a0),d0
   22689/   120EE : 0240 FF80           		andi.w	#$FF80,d0
   22690/   120F2 : 3238 F700           		move.w	($FFFFF700).w,d1
   22691/   120F6 : 0441 0080           		subi.w	#$80,d1
   22692/   120FA : 0241 FF80           		andi.w	#$FF80,d1
   22693/   120FE : 9041                		sub.w	d1,d0
   22694/   12100 : 0C40 0280           		cmpi.w	#$280,d0
   22695/   12104 : 6204                		bhi.s	loc_1236A
   22696/   12106 :                     
   22697/   12106 :                     Obj63_Display:				; XREF: loc_1236A
   22698/   12106 : 6000 B2CA           		bra.w	DisplaySprite
   22699/   1210A :                     ; ===========================================================================
   22700/   1210A :                     
   22701/   1210A :                     loc_1236A:				; XREF: Obj63
   22702/   1210A : 0C38 0002 FE11      		cmpi.b	#2,($FFFFFE11).w
   22703/   12110 : 6606                		bne.s	loc_12378
   22704/   12112 : 0C40 FF80           		cmpi.w	#-$80,d0
   22705/   12116 : 64EE                		bcc.s	Obj63_Display
   22706/   12118 :                     
   22707/   12118 :                     loc_12378:
   22708/   12118 : 1028 002F           		move.b	$2F(a0),d0
   22709/   1211C : 6A00 B2F0           		bpl.w	DeleteObject
   22710/   12120 : 0240 007F           		andi.w	#$7F,d0
   22711/   12124 : 45F8 F7C1           		lea	($FFFFF7C1).w,a2
   22712/   12128 : 08B2 0000 0000      		bclr	#0,(a2,d0.w)
   22713/   1212E : 6000 B2DE           		bra.w	DeleteObject
   22714/   12132 :                     ; ===========================================================================
   22715/   12132 : 0008                Obj63_Index:	dc.w Obj63_Main-Obj63_Index
   22716/   12134 : 011E                		dc.w loc_124B2-Obj63_Index
   22717/   12136 : 012E                		dc.w loc_124C2-Obj63_Index
   22718/   12138 : 014A                		dc.w loc_124DE-Obj63_Index
   22719/   1213A :                     ; ===========================================================================
   22720/   1213A :                     
   22721/   1213A :                     Obj63_Main:				; XREF: Obj63_Index
   22722/   1213A : 1028 0028           		move.b	$28(a0),d0
   22723/   1213E : 6B00 00C0           		bmi.w	loc_12460
   22724/   12142 : 5428 0024           		addq.b	#2,$24(a0)
   22725/   12146 : 217C 0001 241A      		move.l	#Map_obj63,4(a0)
            1214C : 0004             
   22726/   1214E : 317C 43F6 0002      		move.w	#$43F6,2(a0)
   22727/   12154 : 0028 0004 0001      		ori.b	#4,1(a0)
   22728/   1215A : 117C 0010 0019      		move.b	#$10,$19(a0)
   22729/   12160 : 117C 0004 0018      		move.b	#4,$18(a0)
   22730/   12166 : 0C28 007F 0028      		cmpi.b	#$7F,$28(a0)
   22731/   1216C : 6614                		bne.s	loc_123E2
   22732/   1216E : 5828 0024           		addq.b	#4,$24(a0)
   22733/   12172 : 317C 03F6 0002      		move.w	#$3F6,2(a0)
   22734/   12178 : 117C 0001 0018      		move.b	#1,$18(a0)
   22735/   1217E : 6000 00FC           		bra.w	loc_124DE
   22736/   12182 :                     ; ===========================================================================
   22737/   12182 :                     
   22738/   12182 :                     loc_123E2:
   22739/   12182 : 117C 0004 001A      		move.b	#4,$1A(a0)
   22740/   12188 : 7000                		moveq	#0,d0
   22741/   1218A : 1028 0028           		move.b	$28(a0),d0
   22742/   1218E : 3200                		move.w	d0,d1
   22743/   12190 : E648                		lsr.w	#3,d0
   22744/   12192 : 0240 001E           		andi.w	#$1E,d0
   22745/   12196 : 45FA 01EE           		lea	Obj63_Data(pc),a2
   22746/   1219A : D4F2 0000           		adda.w	(a2,d0.w),a2
   22747/   1219E : 315A 0038           		move.w	(a2)+,$38(a0)
   22748/   121A2 : 315A 0030           		move.w	(a2)+,$30(a0)
   22749/   121A6 : 214A 003C           		move.l	a2,$3C(a0)
   22750/   121AA : 0241 000F           		andi.w	#$F,d1
   22751/   121AE : E549                		lsl.w	#2,d1
   22752/   121B0 : 1141 0038           		move.b	d1,$38(a0)
   22753/   121B4 : 117C 0004 003A      		move.b	#4,$3A(a0)
   22754/   121BA : 4A38 F7C0           		tst.b	($FFFFF7C0).w
   22755/   121BE : 672C                		beq.s	loc_1244C
   22756/   121C0 : 117C 0001 003B      		move.b	#1,$3B(a0)
   22757/   121C6 : 4428 003A           		neg.b	$3A(a0)
   22758/   121CA : 7200                		moveq	#0,d1
   22759/   121CC : 1228 0038           		move.b	$38(a0),d1
   22760/   121D0 : D228 003A           		add.b	$3A(a0),d1
   22761/   121D4 : B228 0039           		cmp.b	$39(a0),d1
   22762/   121D8 : 650E                		bcs.s	loc_12448
   22763/   121DA : 1001                		move.b	d1,d0
   22764/   121DC : 7200                		moveq	#0,d1
   22765/   121DE : 4A00                		tst.b	d0
   22766/   121E0 : 6A06                		bpl.s	loc_12448
   22767/   121E2 : 1228 0039           		move.b	$39(a0),d1
   22768/   121E6 : 5901                		subq.b	#4,d1
   22769/   121E8 :                     
   22770/   121E8 :                     loc_12448:
   22771/   121E8 : 1141 0038           		move.b	d1,$38(a0)
   22772/   121EC :                     
   22773/   121EC :                     loc_1244C:
   22774/   121EC : 3172 1000 0034      		move.w	(a2,d1.w),$34(a0)
   22775/   121F2 : 3172 1002 0036      		move.w	2(a2,d1.w),$36(a0)
   22776/   121F8 : 6100 0114           		bsr.w	Obj63_ChangeDir
   22777/   121FC : 6000 0052           		bra.w	loc_124B2
   22778/   12200 :                     ; ===========================================================================
   22779/   12200 :                     
   22780/   12200 :                     loc_12460:				; XREF: Obj63_Main
   22781/   12200 : 1140 002F           		move.b	d0,$2F(a0)
   22782/   12204 : 0240 007F           		andi.w	#$7F,d0
   22783/   12208 : 45F8 F7C1           		lea	($FFFFF7C1).w,a2
   22784/   1220C : 08F2 0000 0000      		bset	#0,(a2,d0.w)
   22785/   12212 : 6600 B1FA           		bne.w	DeleteObject
   22786/   12216 : D040                		add.w	d0,d0
   22787/   12218 : 0240 001E           		andi.w	#$1E,d0
   22788/   1221C : 0640 0070           		addi.w	#$70,d0
   22789/   12220 : 45F9 0008 0042      		lea	(ObjPos_Index).l,a2
   22790/   12226 : D4F2 0000           		adda.w	(a2,d0.w),a2
   22791/   1222A : 321A                		move.w	(a2)+,d1
   22792/   1222C : 2248                		movea.l	a0,a1
   22793/   1222E : 6006                		bra.s	Obj63_MakePtfms
   22794/   12230 :                     ; ===========================================================================
   22795/   12230 :                     
   22796/   12230 :                     Obj63_Loop:
   22797/   12230 : 6100 B626           		bsr.w	SingleObjLoad
   22798/   12234 : 6612                		bne.s	loc_124AA
   22799/   12236 :                     
   22800/   12236 :                     Obj63_MakePtfms:			; XREF: loc_12460
   22801/   12236 : 12BC 0063           		move.b	#$63,0(a1)
   22802/   1223A : 335A 0008           		move.w	(a2)+,8(a1)
   22803/   1223E : 335A 000C           		move.w	(a2)+,$C(a1)
   22804/   12242 : 301A                		move.w	(a2)+,d0
   22805/   12244 : 1340 0028           		move.b	d0,$28(a1)
   22806/   12248 :                     
   22807/   12248 :                     loc_124AA:
   22808/   12248 : 51C9 FFE6           		dbf	d1,Obj63_Loop
   22809/   1224C :                     
   22810/   1224C : 588F                		addq.l	#4,sp
   22811/   1224E : 4E75                		rts	
   22812/   12250 :                     ; ===========================================================================
   22813/   12250 :                     
   22814/   12250 :                     loc_124B2:				; XREF: Obj63_Index
   22815/   12250 : 7200                		moveq	#0,d1
   22816/   12252 : 1228 0019           		move.b	$19(a0),d1
   22817/   12256 : 4EB9 0000 725C      		jsr	(PlatformObject).l
   22818/   1225C : 6000 0042           		bra.w	sub_12502
   22819/   12260 :                     ; ===========================================================================
   22820/   12260 :                     
   22821/   12260 :                     loc_124C2:				; XREF: Obj63_Index
   22822/   12260 : 7200                		moveq	#0,d1
   22823/   12262 : 1228 0019           		move.b	$19(a0),d1
   22824/   12266 : 4EB9 0000 73D0      		jsr	(ExitPlatform).l
   22825/   1226C : 3F28 0008           		move.w	8(a0),-(sp)
   22826/   12270 : 6100 002E           		bsr.w	sub_12502
   22827/   12274 : 341F                		move.w	(sp)+,d2
   22828/   12276 : 4EF9 0000 793A      		jmp	(MvSonicOnPtfm2).l
   22829/   1227C :                     ; ===========================================================================
   22830/   1227C :                     
   22831/   1227C :                     loc_124DE:				; XREF: Obj63_Index
   22832/   1227C : 3038 FE04           		move.w	($FFFFFE04).w,d0
   22833/   12280 : 0240 0003           		andi.w	#3,d0
   22834/   12284 : 6614                		bne.s	loc_124FC
   22835/   12286 : 7201                		moveq	#1,d1
   22836/   12288 : 4A38 F7C0           		tst.b	($FFFFF7C0).w
   22837/   1228C : 6702                		beq.s	loc_124F2
   22838/   1228E : 4401                		neg.b	d1
   22839/   12290 :                     
   22840/   12290 :                     loc_124F2:
   22841/   12290 : D328 001A           		add.b	d1,$1A(a0)
   22842/   12294 : 0228 0003 001A      		andi.b	#3,$1A(a0)
   22843/   1229A :                     
   22844/   1229A :                     loc_124FC:
   22845/   1229A : 588F                		addq.l	#4,sp
   22846/   1229C : 6000 D1CC           		bra.w	MarkObjGone
   22847/   122A0 :                     
   22848/   122A0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   22849/   122A0 :                     
   22850/   122A0 :                     
   22851/   122A0 :                     sub_12502:				; XREF: loc_124B2; loc_124C2
   22852/   122A0 : 4A38 F7EE           		tst.b	($FFFFF7EE).w
   22853/   122A4 : 6718                		beq.s	loc_12520
   22854/   122A6 : 4A28 003B           		tst.b	$3B(a0)
   22855/   122AA : 6612                		bne.s	loc_12520
   22856/   122AC : 117C 0001 003B      		move.b	#1,$3B(a0)
   22857/   122B2 : 11FC 0001 F7C0      		move.b	#1,($FFFFF7C0).w
   22858/   122B8 : 4428 003A           		neg.b	$3A(a0)
   22859/   122BC : 6014                		bra.s	loc_12534
   22860/   122BE :                     ; ===========================================================================
   22861/   122BE :                     
   22862/   122BE :                     loc_12520:
   22863/   122BE : 3028 0008           		move.w	8(a0),d0
   22864/   122C2 : B068 0034           		cmp.w	$34(a0),d0
   22865/   122C6 : 6640                		bne.s	loc_1256A
   22866/   122C8 : 3028 000C           		move.w	$C(a0),d0
   22867/   122CC : B068 0036           		cmp.w	$36(a0),d0
   22868/   122D0 : 6636                		bne.s	loc_1256A
   22869/   122D2 :                     
   22870/   122D2 :                     loc_12534:
   22871/   122D2 : 7200                		moveq	#0,d1
   22872/   122D4 : 1228 0038           		move.b	$38(a0),d1
   22873/   122D8 : D228 003A           		add.b	$3A(a0),d1
   22874/   122DC : B228 0039           		cmp.b	$39(a0),d1
   22875/   122E0 : 650E                		bcs.s	loc_12552
   22876/   122E2 : 1001                		move.b	d1,d0
   22877/   122E4 : 7200                		moveq	#0,d1
   22878/   122E6 : 4A00                		tst.b	d0
   22879/   122E8 : 6A06                		bpl.s	loc_12552
   22880/   122EA : 1228 0039           		move.b	$39(a0),d1
   22881/   122EE : 5901                		subq.b	#4,d1
   22882/   122F0 :                     
   22883/   122F0 :                     loc_12552:
   22884/   122F0 : 1141 0038           		move.b	d1,$38(a0)
   22885/   122F4 : 2268 003C           		movea.l	$3C(a0),a1
   22886/   122F8 : 3171 1000 0034      		move.w	(a1,d1.w),$34(a0)
   22887/   122FE : 3171 1002 0036      		move.w	2(a1,d1.w),$36(a0)
   22888/   12304 : 6100 0008           		bsr.w	Obj63_ChangeDir
   22889/   12308 :                     
   22890/   12308 :                     loc_1256A:
   22891/   12308 : 6100 B0A2           		bsr.w	SpeedToPos
   22892/   1230C : 4E75                		rts	
   22893/   1230E :                     ; End of function sub_12502
   22894/   1230E :                     
   22895/   1230E :                     
   22896/   1230E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   22897/   1230E :                     
   22898/   1230E :                     
   22899/   1230E :                     Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
   22900/   1230E : 7000                		moveq	#0,d0
   22901/   12310 : 343C FF00           		move.w	#-$100,d2
   22902/   12314 : 3028 0008           		move.w	8(a0),d0
   22903/   12318 : 9068 0034           		sub.w	$34(a0),d0
   22904/   1231C : 6404                		bcc.s	loc_12584
   22905/   1231E : 4440                		neg.w	d0
   22906/   12320 : 4442                		neg.w	d2
   22907/   12322 :                     
   22908/   12322 :                     loc_12584:
   22909/   12322 : 7200                		moveq	#0,d1
   22910/   12324 : 363C FF00           		move.w	#-$100,d3
   22911/   12328 : 3228 000C           		move.w	$C(a0),d1
   22912/   1232C : 9268 0036           		sub.w	$36(a0),d1
   22913/   12330 : 6404                		bcc.s	loc_12598
   22914/   12332 : 4441                		neg.w	d1
   22915/   12334 : 4443                		neg.w	d3
   22916/   12336 :                     
   22917/   12336 :                     loc_12598:
   22918/   12336 : B240                		cmp.w	d0,d1
   22919/   12338 : 6526                		bcs.s	loc_125C2
   22920/   1233A : 3028 0008           		move.w	8(a0),d0
   22921/   1233E : 9068 0034           		sub.w	$34(a0),d0
   22922/   12342 : 6708                		beq.s	loc_125AE
   22923/   12344 : 48C0                		ext.l	d0
   22924/   12346 : E180                		asl.l	#8,d0
   22925/   12348 : 81C1                		divs.w	d1,d0
   22926/   1234A : 4440                		neg.w	d0
   22927/   1234C :                     
   22928/   1234C :                     loc_125AE:
   22929/   1234C : 3140 0010           		move.w	d0,$10(a0)
   22930/   12350 : 3143 0012           		move.w	d3,$12(a0)
   22931/   12354 : 4840                		swap	d0
   22932/   12356 : 3140 000A           		move.w	d0,$A(a0)
   22933/   1235A : 4268 000E           		clr.w	$E(a0)
   22934/   1235E : 4E75                		rts	
   22935/   12360 :                     ; ===========================================================================
   22936/   12360 :                     
   22937/   12360 :                     loc_125C2:				; XREF: Obj63_ChangeDir
   22938/   12360 : 3228 000C           		move.w	$C(a0),d1
   22939/   12364 : 9268 0036           		sub.w	$36(a0),d1
   22940/   12368 : 6708                		beq.s	loc_125D4
   22941/   1236A : 48C1                		ext.l	d1
   22942/   1236C : E181                		asl.l	#8,d1
   22943/   1236E : 83C0                		divs.w	d0,d1
   22944/   12370 : 4441                		neg.w	d1
   22945/   12372 :                     
   22946/   12372 :                     loc_125D4:
   22947/   12372 : 3141 0012           		move.w	d1,$12(a0)
   22948/   12376 : 3142 0010           		move.w	d2,$10(a0)
   22949/   1237A : 4841                		swap	d1
   22950/   1237C : 3141 000E           		move.w	d1,$E(a0)
   22951/   12380 : 4268 000A           		clr.w	$A(a0)
   22952/   12384 : 4E75                		rts	
   22953/   12386 :                     ; End of function Obj63_ChangeDir
   22954/   12386 :                     
   22955/   12386 :                     ; ===========================================================================
   22956/   12386 : 000C                Obj63_Data:	dc.w word_125F4-Obj63_Data
   22957/   12388 : 0028                		dc.w word_12610-Obj63_Data
   22958/   1238A : 0040                		dc.w word_12628-Obj63_Data
   22959/   1238C : 0054                		dc.w word_1263C-Obj63_Data
   22960/   1238E : 0068                		dc.w word_12650-Obj63_Data
   22961/   12390 : 0080                		dc.w word_12668-Obj63_Data
   22962/   12392 : 0018 1070 1078      word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
            12398 : 021A 10BE 0260 
            1239E : 10BE 0393          
   22963/   123A2 : 108C 03C5 1022      		dc.w $108C, $3C5, $1022, $390, $1022, $244
            123A8 : 0390 1022 0244    
   22964/   123AE : 0014 1280 127E      word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
            123B4 : 0280 12CE 02D0 
            123BA : 12CE 046E          
   22965/   123BE : 1232 0420 1232      		dc.w $1232, $420, $1232, $2CC
            123C4 : 02CC             
   22966/   123C6 : 0010 0D68 0D22      word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
            123CC : 0482 0D22 05DE 
            123D2 : 0DAE 05DE 0DAE 
            123D8 : 0482             
   22967/   123DA : 0010 0DA0 0D62      word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
            123E0 : 03A2 0DEE 03A2 
            123E6 : 0DEE 04DE 0D62 
            123EC : 04DE             
   22968/   123EE : 0014 0D00 0CAC      word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
            123F4 : 0242 0DDE 0242 
            123FA : 0DDE 03DE 0C52 
            12400 : 03DE 0C52 029C    
   22969/   12406 : 0010 1300 1252      word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
            1240C : 020A 13DE 020A 
            12412 : 13DE 02BE 1252 
            12418 : 02BE             
   22970/   1241A :                     
   22971/   1241A :                     ; ---------------------------------------------------------------------------
   22972/   1241A :                     ; Sprite mappings - platforms on a conveyor belt (LZ)
   22973/   1241A :                     ; ---------------------------------------------------------------------------
   22974/   1241A :                     Map_obj63:
   22975/   1241A :                     	include "_mappings/obj63.asm"
(1)    1/   1241A :                     ; ---------------------------------------------------------------------------
(1)    2/   1241A :                     ; Sprite mappings - platforms on a conveyor belt (LZ)
(1)    3/   1241A :                     ; ---------------------------------------------------------------------------
(1)    4/   1241A : 000A 0010           		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
(1)    5/   1241E : 0016 001C           		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
(1)    6/   12422 : 0022                		dc.w byte_1269E-Map_obj63
(1)    7/   12424 : 01                  byte_12686:	dc.b 1
(1)    8/   12425 : F00F 0000 F0        		dc.b $F0, $F, 0, 0, $F0
(1)    9/   1242A : 01                  byte_1268C:	dc.b 1
(1)   10/   1242B : F00F 0010 F0        		dc.b $F0, $F, 0, $10, $F0
(1)   11/   12430 : 01                  byte_12692:	dc.b 1
(1)   12/   12431 : F00F 0020 F0        		dc.b $F0, $F, 0, $20, $F0
(1)   13/   12436 : 01                  byte_12698:	dc.b 1
(1)   14/   12437 : F00F 0030 F0        		dc.b $F0, $F, 0, $30, $F0
(1)   15/   1243C : 01                  byte_1269E:	dc.b 1
(1)   16/   1243D : F80D 0040 F0        		dc.b $F8, $D, 0, $40, $F0
(1)   17/   12442 : (MACRO)              		even
   22976/   12442 :                     
   22977/   12442 :                     ; ===========================================================================
   22978/   12442 :                     ; ---------------------------------------------------------------------------
   22979/   12442 :                     ; Object 64 - bubbles (LZ)
   22980/   12442 :                     ; ---------------------------------------------------------------------------
   22981/   12442 :                     
   22982/   12442 :                     Obj64:					; XREF: Obj_Index
   22983/   12442 : 7000                		moveq	#0,d0
   22984/   12444 : 1028 0024           		move.b	$24(a0),d0
   22985/   12448 : 323B 0006           		move.w	Obj64_Index(pc,d0.w),d1
   22986/   1244C : 4EFB 1002           		jmp	Obj64_Index(pc,d1.w)
   22987/   12450 :                     ; ===========================================================================
   22988/   12450 : 000C                Obj64_Index:	dc.w Obj64_Main-Obj64_Index
   22989/   12452 : 006A                		dc.w Obj64_Animate-Obj64_Index
   22990/   12454 : 0084                		dc.w Obj64_ChkWater-Obj64_Index
   22991/   12456 : 013E                		dc.w Obj64_Display2-Obj64_Index
   22992/   12458 : 015C                		dc.w Obj64_Delete3-Obj64_Index
   22993/   1245A : 0160                		dc.w Obj64_BblMaker-Obj64_Index
   22994/   1245C :                     ; ===========================================================================
   22995/   1245C :                     
   22996/   1245C :                     Obj64_Main:				; XREF: Obj64_Index
   22997/   1245C : 5428 0024           		addq.b	#2,$24(a0)
   22998/   12460 : 217C 0001 2768      		move.l	#Map_obj64,4(a0)
            12466 : 0004             
   22999/   12468 : 317C 8348 0002      		move.w	#$8348,2(a0)
   23000/   1246E : 117C 0084 0001      		move.b	#$84,1(a0)
   23001/   12474 : 117C 0010 0019      		move.b	#$10,$19(a0)
   23002/   1247A : 117C 0001 0018      		move.b	#1,$18(a0)
   23003/   12480 : 1028 0028           		move.b	$28(a0),d0	; get object type
   23004/   12484 : 6A1A                		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
   23005/   12486 : 5028 0024           		addq.b	#8,$24(a0)
   23006/   1248A : 0240 007F           		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
   23007/   1248E : 1140 0032           		move.b	d0,$32(a0)
   23008/   12492 : 1140 0033           		move.b	d0,$33(a0)
   23009/   12496 : 117C 0006 001C      		move.b	#6,$1C(a0)
   23010/   1249C : 6000 0112           		bra.w	Obj64_BblMaker
   23011/   124A0 :                     ; ===========================================================================
   23012/   124A0 :                     
   23013/   124A0 :                     Obj64_Bubble:				; XREF: Obj64_Main
   23014/   124A0 : 1140 001C           		move.b	d0,$1C(a0)
   23015/   124A4 : 3168 0008 0030      		move.w	8(a0),$30(a0)
   23016/   124AA : 317C FF78 0012      		move.w	#-$88,$12(a0)	; float	bubble upwards
   23017/   124B0 : 4EB9 0000 279A      		jsr	(RandomNumber).l
   23018/   124B6 : 1140 0026           		move.b	d0,$26(a0)
   23019/   124BA :                     
   23020/   124BA :                     Obj64_Animate:				; XREF: Obj64_Index
   23021/   124BA : 43F9 0001 2738      		lea	(Ani_obj64).l,a1
   23022/   124C0 : 4EB9 0000 A4FE      		jsr	AnimateSprite
   23023/   124C6 : 0C28 0006 001A      		cmpi.b	#6,$1A(a0)
   23024/   124CC : 6606                		bne.s	Obj64_ChkWater
   23025/   124CE : 117C 0001 002E      		move.b	#1,$2E(a0)
   23026/   124D4 :                     
   23027/   124D4 :                     Obj64_ChkWater:				; XREF: Obj64_Index
   23028/   124D4 : 3038 F646           		move.w	($FFFFF646).w,d0
   23029/   124D8 : B068 000C           		cmp.w	$C(a0),d0	; is bubble underwater?
   23030/   124DC : 650E                		bcs.s	Obj64_Wobble	; if yes, branch
   23031/   124DE :                     
   23032/   124DE :                     Obj64_Burst:				; XREF: Obj64_Wobble
   23033/   124DE : 117C 0006 0024      		move.b	#6,$24(a0)
   23034/   124E4 : 5628 001C           		addq.b	#3,$1C(a0)	; run "bursting" animation
   23035/   124E8 : 6000 00A4           		bra.w	Obj64_Display2
   23036/   124EC :                     ; ===========================================================================
   23037/   124EC :                     
   23038/   124EC :                     Obj64_Wobble:				; XREF: Obj64_ChkWater
   23039/   124EC : 1028 0026           		move.b	$26(a0),d0
   23040/   124F0 : 5228 0026           		addq.b	#1,$26(a0)
   23041/   124F4 : 0240 007F           		andi.w	#$7F,d0
   23042/   124F8 : 43F9 0001 3BDC      		lea	(Obj0A_WobbleData).l,a1
   23043/   124FE : 1031 0000           		move.b	(a1,d0.w),d0
   23044/   12502 : 4880                		ext.w	d0
   23045/   12504 : D068 0030           		add.w	$30(a0),d0
   23046/   12508 : 3140 0008           		move.w	d0,8(a0)	; change bubble's horizontal position
   23047/   1250C : 4A28 002E           		tst.b	$2E(a0)
   23048/   12510 : 6766                		beq.s	Obj64_Display
   23049/   12512 : 6100 01E6           		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
   23050/   12516 : 6760                		beq.s	Obj64_Display	; if not, branch
   23051/   12518 :                     
   23052/   12518 : 6100 1932           		bsr.w	ResumeMusic	; cancel countdown music
   23053/   1251C : 303C 00AD           		move.w	#$AD,d0
   23054/   12520 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
   23055/   12526 : 43F8 D000           		lea	($FFFFD000).w,a1
   23056/   1252A : 4269 0010           		clr.w	$10(a1)
   23057/   1252E : 4269 0012           		clr.w	$12(a1)
   23058/   12532 : 4269 0014           		clr.w	$14(a1)
   23059/   12536 : 137C 0015 001C      		move.b	#$15,$1C(a1)
   23060/   1253C : 337C 0023 003E      		move.w	#$23,$3E(a1)
   23061/   12542 : 137C 0000 003C      		move.b	#0,$3C(a1)
   23062/   12548 : 08A9 0005 0022      		bclr	#5,$22(a1)
   23063/   1254E : 08A9 0004 0022      		bclr	#4,$22(a1)
   23064/   12554 : 0829 0002 0022      		btst	#2,$22(a1)
   23065/   1255A : 6700 FF82           		beq.w	Obj64_Burst
   23066/   1255E : 08A9 0002 0022      		bclr	#2,$22(a1)
   23067/   12564 : 137C 0013 0016      		move.b	#$13,$16(a1)
   23068/   1256A : 137C 0009 0017      		move.b	#9,$17(a1)
   23069/   12570 : 5B69 000C           		subq.w	#5,$C(a1)
   23070/   12574 : 6000 FF68           		bra.w	Obj64_Burst
   23071/   12578 :                     ; ===========================================================================
   23072/   12578 :                     
   23073/   12578 :                     Obj64_Display:				; XREF: Obj64_Wobble
   23074/   12578 : 6100 AE32           		bsr.w	SpeedToPos
   23075/   1257C : 4A28 0001           		tst.b	1(a0)
   23076/   12580 : 6A06                		bpl.s	Obj64_Delete
   23077/   12582 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   23078/   12588 :                     ; ===========================================================================
   23079/   12588 :                     
   23080/   12588 :                     Obj64_Delete:
   23081/   12588 : 4EF9 0000 D40E      		jmp	DeleteObject
   23082/   1258E :                     ; ===========================================================================
   23083/   1258E :                     
   23084/   1258E :                     Obj64_Display2:				; XREF: Obj64_Index
   23085/   1258E : 43F9 0001 2738      		lea	(Ani_obj64).l,a1
   23086/   12594 : 4EB9 0000 A4FE      		jsr	AnimateSprite
   23087/   1259A : 4A28 0001           		tst.b	1(a0)
   23088/   1259E : 6A06                		bpl.s	Obj64_Delete2
   23089/   125A0 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   23090/   125A6 :                     ; ===========================================================================
   23091/   125A6 :                     
   23092/   125A6 :                     Obj64_Delete2:
   23093/   125A6 : 4EF9 0000 D40E      		jmp	DeleteObject
   23094/   125AC :                     ; ===========================================================================
   23095/   125AC :                     
   23096/   125AC :                     Obj64_Delete3:				; XREF: Obj64_Index
   23097/   125AC : 6000 AE60           		bra.w	DeleteObject
   23098/   125B0 :                     ; ===========================================================================
   23099/   125B0 :                     
   23100/   125B0 :                     Obj64_BblMaker:				; XREF: Obj64_Index
   23101/   125B0 : 4A68 0036           		tst.w	$36(a0)
   23102/   125B4 : 665C                		bne.s	loc_12874
   23103/   125B6 : 3038 F646           		move.w	($FFFFF646).w,d0
   23104/   125BA : B068 000C           		cmp.w	$C(a0),d0	; is bubble maker underwater?
   23105/   125BE : 6400 00FC           		bcc.w	Obj64_ChkDel	; if not, branch
   23106/   125C2 : 4A28 0001           		tst.b	1(a0)
   23107/   125C6 : 6A00 00F4           		bpl.w	Obj64_ChkDel
   23108/   125CA : 5368 0038           		subq.w	#1,$38(a0)
   23109/   125CE : 6A00 00E0           		bpl.w	loc_12914
   23110/   125D2 : 317C 0001 0036      		move.w	#1,$36(a0)
   23111/   125D8 :                     
   23112/   125D8 :                     loc_1283A:
   23113/   125D8 : 4EB9 0000 279A      		jsr	(RandomNumber).l
   23114/   125DE : 3200                		move.w	d0,d1
   23115/   125E0 : 0240 0007           		andi.w	#7,d0
   23116/   125E4 : 0C40 0006           		cmpi.w	#6,d0
   23117/   125E8 : 64EE                		bcc.s	loc_1283A
   23118/   125EA :                     
   23119/   125EA : 1140 0034           		move.b	d0,$34(a0)
   23120/   125EE : 0241 000C           		andi.w	#$C,d1
   23121/   125F2 : 43F9 0001 26E8      		lea	(Obj64_BblTypes).l,a1
   23122/   125F8 : D2C1                		adda.w	d1,a1
   23123/   125FA : 2149 003C           		move.l	a1,$3C(a0)
   23124/   125FE : 5328 0032           		subq.b	#1,$32(a0)
   23125/   12602 : 6A0C                		bpl.s	loc_12872
   23126/   12604 : 1168 0033 0032      		move.b	$33(a0),$32(a0)
   23127/   1260A : 08E8 0007 0036      		bset	#7,$36(a0)
   23128/   12610 :                     
   23129/   12610 :                     loc_12872:
   23130/   12610 : 6008                		bra.s	loc_1287C
   23131/   12612 :                     ; ===========================================================================
   23132/   12612 :                     
   23133/   12612 :                     loc_12874:				; XREF: Obj64_BblMaker
   23134/   12612 : 5368 0038           		subq.w	#1,$38(a0)
   23135/   12616 : 6A00 0098           		bpl.w	loc_12914
   23136/   1261A :                     
   23137/   1261A :                     loc_1287C:
   23138/   1261A : 4EB9 0000 279A      		jsr	(RandomNumber).l
   23139/   12620 : 0240 001F           		andi.w	#$1F,d0
   23140/   12624 : 3140 0038           		move.w	d0,$38(a0)
   23141/   12628 : 6100 B22E           		bsr.w	SingleObjLoad
   23142/   1262C : 6666                		bne.s	loc_128F8
   23143/   1262E : 12BC 0064           		move.b	#$64,0(a1)	; load bubble object
   23144/   12632 : 3368 0008 0008      		move.w	8(a0),8(a1)
   23145/   12638 : 4EB9 0000 279A      		jsr	(RandomNumber).l
   23146/   1263E : 0240 000F           		andi.w	#$F,d0
   23147/   12642 : 5140                		subq.w	#8,d0
   23148/   12644 : D169 0008           		add.w	d0,8(a1)
   23149/   12648 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   23150/   1264E : 7000                		moveq	#0,d0
   23151/   12650 : 1028 0034           		move.b	$34(a0),d0
   23152/   12654 : 2468 003C           		movea.l	$3C(a0),a2
   23153/   12658 : 1372 0000 0028      		move.b	(a2,d0.w),$28(a1)
   23154/   1265E : 0828 0007 0036      		btst	#7,$36(a0)
   23155/   12664 : 672E                		beq.s	loc_128F8
   23156/   12666 : 4EB9 0000 279A      		jsr	(RandomNumber).l
   23157/   1266C : 0240 0003           		andi.w	#3,d0
   23158/   12670 : 660E                		bne.s	loc_128E4
   23159/   12672 : 08E8 0006 0036      		bset	#6,$36(a0)
   23160/   12678 : 661A                		bne.s	loc_128F8
   23161/   1267A : 137C 0002 0028      		move.b	#2,$28(a1)
   23162/   12680 :                     
   23163/   12680 :                     loc_128E4:
   23164/   12680 : 4A28 0034           		tst.b	$34(a0)
   23165/   12684 : 660E                		bne.s	loc_128F8
   23166/   12686 : 08E8 0006 0036      		bset	#6,$36(a0)
   23167/   1268C : 6606                		bne.s	loc_128F8
   23168/   1268E : 137C 0002 0028      		move.b	#2,$28(a1)
   23169/   12694 :                     
   23170/   12694 :                     loc_128F8:
   23171/   12694 : 5328 0034           		subq.b	#1,$34(a0)
   23172/   12698 : 6A16                		bpl.s	loc_12914
   23173/   1269A : 4EB9 0000 279A      		jsr	(RandomNumber).l
   23174/   126A0 : 0240 007F           		andi.w	#$7F,d0
   23175/   126A4 : 0640 0080           		addi.w	#$80,d0
   23176/   126A8 : D168 0038           		add.w	d0,$38(a0)
   23177/   126AC : 4268 0036           		clr.w	$36(a0)
   23178/   126B0 :                     
   23179/   126B0 :                     loc_12914:
   23180/   126B0 : 43F9 0001 2738      		lea	(Ani_obj64).l,a1
   23181/   126B6 : 4EB9 0000 A4FE      		jsr	AnimateSprite
   23182/   126BC :                     
   23183/   126BC :                     Obj64_ChkDel:				; XREF: Obj64_BblMaker
   23184/   126BC : 3028 0008           		move.w	8(a0),d0
   23185/   126C0 : 0240 FF80           		andi.w	#$FF80,d0
   23186/   126C4 : 3238 F700           		move.w	($FFFFF700).w,d1
   23187/   126C8 : 0441 0080           		subi.w	#$80,d1
   23188/   126CC : 0241 FF80           		andi.w	#$FF80,d1
   23189/   126D0 : 9041                		sub.w	d1,d0
   23190/   126D2 : 0C40 0280           		cmpi.w	#$280,d0
   23191/   126D6 : 6200 AD36           		bhi.w	DeleteObject
   23192/   126DA : 3038 F646           		move.w	($FFFFF646).w,d0
   23193/   126DE : B068 000C           		cmp.w	$C(a0),d0
   23194/   126E2 : 6500 ACEE           		bcs.w	DisplaySprite
   23195/   126E6 : 4E75                		rts	
   23196/   126E8 :                     ; ===========================================================================
   23197/   126E8 :                     ; bubble production sequence
   23198/   126E8 :                     
   23199/   126E8 :                     ; 0 = small bubble, 1 =	large bubble
   23200/   126E8 :                     
   23201/   126E8 : 0001 0000 0000      Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
            126EE : 0100 0000 0001 
            126F4 : 0001 0000 0100    
   23202/   126FA :                     
   23203/   126FA :                     ; ===========================================================================
   23204/   126FA :                     
   23205/   126FA :                     Obj64_ChkSonic:				; XREF: Obj64_Wobble
   23206/   126FA : 4A38 F7C8           		tst.b	($FFFFF7C8).w
   23207/   126FE : 6B34                		bmi.s	loc_12998
   23208/   12700 : 43F8 D000           		lea	($FFFFD000).w,a1
   23209/   12704 : 3029 0008           		move.w	8(a1),d0
   23210/   12708 : 3228 0008           		move.w	8(a0),d1
   23211/   1270C : 0441 0010           		subi.w	#$10,d1
   23212/   12710 : B240                		cmp.w	d0,d1
   23213/   12712 : 6420                		bcc.s	loc_12998
   23214/   12714 : 0641 0020           		addi.w	#$20,d1
   23215/   12718 : B240                		cmp.w	d0,d1
   23216/   1271A : 6518                		bcs.s	loc_12998
   23217/   1271C : 3029 000C           		move.w	$C(a1),d0
   23218/   12720 : 3228 000C           		move.w	$C(a0),d1
   23219/   12724 : B240                		cmp.w	d0,d1
   23220/   12726 : 640C                		bcc.s	loc_12998
   23221/   12728 : 0641 0010           		addi.w	#$10,d1
   23222/   1272C : B240                		cmp.w	d0,d1
   23223/   1272E : 6504                		bcs.s	loc_12998
   23224/   12730 : 7001                		moveq	#1,d0
   23225/   12732 : 4E75                		rts	
   23226/   12734 :                     ; ===========================================================================
   23227/   12734 :                     
   23228/   12734 :                     loc_12998:
   23229/   12734 : 7000                		moveq	#0,d0
   23230/   12736 : 4E75                		rts	
   23231/   12738 :                     ; ===========================================================================
   23232/   12738 :                     Ani_obj64:
   23233/   12738 :                     	include "_animations/obj64.asm"
(1)    1/   12738 :                     ; ---------------------------------------------------------------------------
(1)    2/   12738 :                     ; Animation script - bubbles (LZ)
(1)    3/   12738 :                     ; ---------------------------------------------------------------------------
(1)    4/   12738 : 000E                		dc.w byte_129AA-Ani_obj64
(1)    5/   1273A : 0014                		dc.w byte_129B0-Ani_obj64
(1)    6/   1273C : 001A                		dc.w byte_129B6-Ani_obj64
(1)    7/   1273E : 0022                		dc.w byte_129BE-Ani_obj64
(1)    8/   12740 : 0022                		dc.w byte_129BE-Ani_obj64
(1)    9/   12742 : 0024                		dc.w byte_129C0-Ani_obj64
(1)   10/   12744 : 002A                		dc.w byte_129C6-Ani_obj64
(1)   11/   12746 : 0E00 0102 FC00      byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
(1)   12/   1274C : 0E01 0203 04FC      byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
(1)   13/   12752 : 0E02 0304 0506      byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
            12758 : FC00             
(1)   14/   1275A : 04FC                byte_129BE:	dc.b 4,	$FC
(1)   15/   1275C : 0406 0708 FC00      byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
(1)   16/   12762 : 0F13 1415 FF        byte_129C6:	dc.b $F, $13, $14, $15,	$FF
(1)   17/   12767 : (MACRO)              		even
(1)   17/   12767 : 00                                          dc.b 0 ;ds.b 1 
   23234/   12768 :                     
   23235/   12768 :                     ; ---------------------------------------------------------------------------
   23236/   12768 :                     ; Sprite mappings - bubbles (LZ)
   23237/   12768 :                     ; ---------------------------------------------------------------------------
   23238/   12768 :                     Map_obj64:
   23239/   12768 :                     	include "_mappings/obj64.asm"
(1)    1/   12768 :                     ; ---------------------------------------------------------------------------
(1)    2/   12768 :                     ; Sprite mappings - bubbles (LZ)
(1)    3/   12768 :                     ; ---------------------------------------------------------------------------
(1)    4/   12768 : 002E 0034           		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
(1)    5/   1276C : 003A 0040           		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
(1)    6/   12770 : 0046 004C           		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
(1)    7/   12774 : 0052 0058           		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
(1)    8/   12778 : 006D 0082           		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
(1)    9/   1277C : 0088 008E           		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
(1)   10/   12780 : 0094 009A           		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
(1)   11/   12784 : 00A0 00A6           		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
(1)   12/   12788 : 00AC 00B2           		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
(1)   13/   1278C : 00B8 00BE           		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
(1)   14/   12790 : 00C4 00CA           		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
(1)   15/   12794 : 00D0                		dc.w byte_12A9C-Map_obj64
(1)   16/   12796 : 01                  byte_129FA:	dc.b 1
(1)   17/   12797 : FC00 0000 FC        		dc.b $FC, 0, 0,	0, $FC
(1)   18/   1279C : 01                  byte_12A00:	dc.b 1
(1)   19/   1279D : FC00 0001 FC        		dc.b $FC, 0, 0,	1, $FC
(1)   20/   127A2 : 01                  byte_12A06:	dc.b 1
(1)   21/   127A3 : FC00 0002 FC        		dc.b $FC, 0, 0,	2, $FC
(1)   22/   127A8 : 01                  byte_12A0C:	dc.b 1
(1)   23/   127A9 : F805 0003 F8        		dc.b $F8, 5, 0,	3, $F8
(1)   24/   127AE : 01                  byte_12A12:	dc.b 1
(1)   25/   127AF : F805 0007 F8        		dc.b $F8, 5, 0,	7, $F8
(1)   26/   127B4 : 01                  byte_12A18:	dc.b 1
(1)   27/   127B5 : F40A 000B F4        		dc.b $F4, $A, 0, $B, $F4
(1)   28/   127BA : 01                  byte_12A1E:	dc.b 1
(1)   29/   127BB : F00F 0014 F0        		dc.b $F0, $F, 0, $14, $F0
(1)   30/   127C0 : 04                  byte_12A24:	dc.b 4
(1)   31/   127C1 : F005 0024 F0        		dc.b $F0, 5, 0,	$24, $F0
(1)   32/   127C6 : F005 0824 00        		dc.b $F0, 5, 8,	$24, 0
(1)   33/   127CB : 0005 1024 F0        		dc.b 0,	5, $10,	$24, $F0
(1)   34/   127D0 : 0005 1824 00        		dc.b 0,	5, $18,	$24, 0
(1)   35/   127D5 : 04                  byte_12A39:	dc.b 4
(1)   36/   127D6 : F005 0028 F0        		dc.b $F0, 5, 0,	$28, $F0
(1)   37/   127DB : F005 0828 00        		dc.b $F0, 5, 8,	$28, 0
(1)   38/   127E0 : 0005 1028 F0        		dc.b 0,	5, $10,	$28, $F0
(1)   39/   127E5 : 0005 1828 00        		dc.b 0,	5, $18,	$28, 0
(1)   40/   127EA : 01                  byte_12A4E:	dc.b 1
(1)   41/   127EB : F406 002C F8        		dc.b $F4, 6, 0,	$2C, $F8
(1)   42/   127F0 : 01                  byte_12A54:	dc.b 1
(1)   43/   127F1 : F406 0032 F8        		dc.b $F4, 6, 0,	$32, $F8
(1)   44/   127F6 : 01                  byte_12A5A:	dc.b 1
(1)   45/   127F7 : F406 0038 F8        		dc.b $F4, 6, 0,	$38, $F8
(1)   46/   127FC : 01                  byte_12A60:	dc.b 1
(1)   47/   127FD : F406 003E F8        		dc.b $F4, 6, 0,	$3E, $F8
(1)   48/   12802 : 01                  byte_12A66:	dc.b 1
(1)   49/   12803 : F406 2044 F8        		dc.b $F4, 6, $20, $44, $F8
(1)   50/   12808 : 01                  byte_12A6C:	dc.b 1
(1)   51/   12809 : F406 204A F8        		dc.b $F4, 6, $20, $4A, $F8
(1)   52/   1280E : 01                  byte_12A72:	dc.b 1
(1)   53/   1280F : F406 2050 F8        		dc.b $F4, 6, $20, $50, $F8
(1)   54/   12814 : 01                  byte_12A78:	dc.b 1
(1)   55/   12815 : F406 2056 F8        		dc.b $F4, 6, $20, $56, $F8
(1)   56/   1281A : 01                  byte_12A7E:	dc.b 1
(1)   57/   1281B : F406 205C F8        		dc.b $F4, 6, $20, $5C, $F8
(1)   58/   12820 : 01                  byte_12A84:	dc.b 1
(1)   59/   12821 : F406 2062 F8        		dc.b $F4, 6, $20, $62, $F8
(1)   60/   12826 : 01                  byte_12A8A:	dc.b 1
(1)   61/   12827 : F805 0068 F8        		dc.b $F8, 5, 0,	$68, $F8
(1)   62/   1282C : 01                  byte_12A90:	dc.b 1
(1)   63/   1282D : F805 006C F8        		dc.b $F8, 5, 0,	$6C, $F8
(1)   64/   12832 : 01                  byte_12A96:	dc.b 1
(1)   65/   12833 : F805 0070 F8        		dc.b $F8, 5, 0,	$70, $F8
(1)   66/   12838 : 00                  byte_12A9C:	dc.b 0
(1)   67/   12839 : (MACRO)              		even
(1)   67/   12839 : 00                                          dc.b 0 ;ds.b 1 
   23240/   1283A :                     
   23241/   1283A :                     ; ===========================================================================
   23242/   1283A :                     ; ---------------------------------------------------------------------------
   23243/   1283A :                     ; Object 65 - waterfalls (LZ)
   23244/   1283A :                     ; ---------------------------------------------------------------------------
   23245/   1283A :                     
   23246/   1283A :                     Obj65:					; XREF: Obj_Index
   23247/   1283A : 7000                		moveq	#0,d0
   23248/   1283C : 1028 0024           		move.b	$24(a0),d0
   23249/   12840 : 323B 0006           		move.w	Obj65_Index(pc,d0.w),d1
   23250/   12844 : 4EFB 1002           		jmp	Obj65_Index(pc,d1.w)
   23251/   12848 :                     ; ===========================================================================
   23252/   12848 : 000A                Obj65_Index:	dc.w Obj65_Main-Obj65_Index
   23253/   1284A : 006C                		dc.w Obj65_Animate-Obj65_Index
   23254/   1284C : 0078                		dc.w Obj65_ChkDel-Obj65_Index
   23255/   1284E : 007C                		dc.w Obj65_FixHeight-Obj65_Index
   23256/   12850 : 008A                		dc.w loc_12B36-Obj65_Index
   23257/   12852 :                     ; ===========================================================================
   23258/   12852 :                     
   23259/   12852 :                     Obj65_Main:				; XREF: Obj65_Index
   23260/   12852 : 5828 0024           		addq.b	#4,$24(a0)
   23261/   12856 : 217C 0001 28F0      		move.l	#Map_obj65,4(a0)
            1285C : 0004             
   23262/   1285E : 317C 4259 0002      		move.w	#$4259,2(a0)
   23263/   12864 : 0028 0004 0001      		ori.b	#4,1(a0)
   23264/   1286A : 117C 0018 0019      		move.b	#$18,$19(a0)
   23265/   12870 : 117C 0001 0018      		move.b	#1,$18(a0)
   23266/   12876 : 1028 0028           		move.b	$28(a0),d0	; get object type
   23267/   1287A : 6A06                		bpl.s	loc_12AE6
   23268/   1287C : 08E8 0007 0002      		bset	#7,2(a0)
   23269/   12882 :                     
   23270/   12882 :                     loc_12AE6:
   23271/   12882 : 0200 000F           		andi.b	#$F,d0		; read only the	2nd byte
   23272/   12886 : 1140 001A           		move.b	d0,$1A(a0)	; set frame number
   23273/   1288A : 0C00 0009           		cmpi.b	#9,d0		; is object type $x9 ?
   23274/   1288E : 6630                		bne.s	Obj65_ChkDel	; if not, branch
   23275/   12890 : 4228 0018           		clr.b	$18(a0)
   23276/   12894 : 5528 0024           		subq.b	#2,$24(a0)
   23277/   12898 : 0828 0006 0028      		btst	#6,$28(a0)	; is object type $4x ?
   23278/   1289E : 6706                		beq.s	loc_12B0A	; if not, branch
   23279/   128A0 : 117C 0006 0024      		move.b	#6,$24(a0)
   23280/   128A6 :                     
   23281/   128A6 :                     loc_12B0A:
   23282/   128A6 : 0828 0005 0028      		btst	#5,$28(a0)	; is object type $Ax ?
   23283/   128AC : 6706                		beq.s	Obj65_Animate	; if not, branch
   23284/   128AE : 117C 0008 0024      		move.b	#8,$24(a0)
   23285/   128B4 :                     
   23286/   128B4 :                     Obj65_Animate:				; XREF: Obj65_Index
   23287/   128B4 : 43F9 0001 28E8      		lea	(Ani_obj65).l,a1
   23288/   128BA : 4EB9 0000 A4FE      		jsr	AnimateSprite
   23289/   128C0 :                     
   23290/   128C0 :                     Obj65_ChkDel:				; XREF: Obj65_Index
   23291/   128C0 : 6000 CBA8           		bra.w	MarkObjGone
   23292/   128C4 :                     ; ===========================================================================
   23293/   128C4 :                     
   23294/   128C4 :                     Obj65_FixHeight:			; XREF: Obj65_Index
   23295/   128C4 : 3038 F646           		move.w	($FFFFF646).w,d0
   23296/   128C8 : 0440 0010           		subi.w	#$10,d0
   23297/   128CC : 3140 000C           		move.w	d0,$C(a0)	; match	object position	to water height
   23298/   128D0 : 60E2                		bra.s	Obj65_Animate
   23299/   128D2 :                     ; ===========================================================================
   23300/   128D2 :                     
   23301/   128D2 :                     loc_12B36:				; XREF: Obj65_Index
   23302/   128D2 : 08A8 0007 0002      		bclr	#7,2(a0)
   23303/   128D8 : 0C38 0007 A506      		cmpi.b	#7,($FFFFA506).w
   23304/   128DE : 6606                		bne.s	Obj65_Animate2
   23305/   128E0 : 08E8 0007 0002      		bset	#7,2(a0)
   23306/   128E6 :                     
   23307/   128E6 :                     Obj65_Animate2:
   23308/   128E6 : 60CC                		bra.s	Obj65_Animate
   23309/   128E8 :                     ; ===========================================================================
   23310/   128E8 :                     Ani_obj65:
   23311/   128E8 :                     	include "_animations/obj65.asm"
(1)    1/   128E8 :                     ; ---------------------------------------------------------------------------
(1)    2/   128E8 :                     ; Animation script - waterfall (LZ)
(1)    3/   128E8 :                     ; ---------------------------------------------------------------------------
(1)    4/   128E8 : 0002                		dc.w byte_12B4E-Ani_obj65
(1)    5/   128EA : 0509 0A0B FF        byte_12B4E:	dc.b 5,	9, $A, $B, $FF
(1)    6/   128EF : (MACRO)              		even
(1)    6/   128EF : 00                                          dc.b 0 ;ds.b 1 
   23312/   128F0 :                     
   23313/   128F0 :                     ; ---------------------------------------------------------------------------
   23314/   128F0 :                     ; Sprite mappings - waterfalls (LZ)
   23315/   128F0 :                     ; ---------------------------------------------------------------------------
   23316/   128F0 :                     Map_obj65:
   23317/   128F0 :                     	include "_mappings/obj65.asm"
(1)    1/   128F0 :                     ; ---------------------------------------------------------------------------
(1)    2/   128F0 :                     ; Sprite mappings - waterfalls (LZ)
(1)    3/   128F0 :                     ; ---------------------------------------------------------------------------
(1)    4/   128F0 : 0018 001E           		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
(1)    5/   128F4 : 0029 0034           		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
(1)    6/   128F8 : 003A 0045           		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
(1)    7/   128FC : 004B 0051           		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
(1)    8/   12900 : 0057 0062           		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
(1)    9/   12904 : 006D 0078           		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
(1)   10/   12908 : 01                  byte_12B6C:	dc.b 1
(1)   11/   12909 : F007 0000 F8        		dc.b $F0, 7, 0,	0, $F8
(1)   12/   1290E : 02                  byte_12B72:	dc.b 2
(1)   13/   1290F : F804 0008 FC        		dc.b $F8, 4, 0,	8, $FC
(1)   14/   12914 : 0008 000A F4        		dc.b 0,	8, 0, $A, $F4
(1)   15/   12919 : 02                  byte_12B7D:	dc.b 2
(1)   16/   1291A : F800 0008 00        		dc.b $F8, 0, 0,	8, 0
(1)   17/   1291F : 0004 000D F8        		dc.b 0,	4, 0, $D, $F8
(1)   18/   12924 : 01                  byte_12B88:	dc.b 1
(1)   19/   12925 : F801 000F 00        		dc.b $F8, 1, 0,	$F, 0
(1)   20/   1292A : 02                  byte_12B8E:	dc.b 2
(1)   21/   1292B : F800 0008 00        		dc.b $F8, 0, 0,	8, 0
(1)   22/   12930 : 0004 000D F8        		dc.b 0,	4, 0, $D, $F8
(1)   23/   12935 : 01                  byte_12B99:	dc.b 1
(1)   24/   12936 : F801 0011 00        		dc.b $F8, 1, 0,	$11, 0
(1)   25/   1293B : 01                  byte_12B9F:	dc.b 1
(1)   26/   1293C : F801 0013 00        		dc.b $F8, 1, 0,	$13, 0
(1)   27/   12941 : 01                  byte_12BA5:	dc.b 1
(1)   28/   12942 : F007 0015 F8        		dc.b $F0, 7, 0,	$15, $F8
(1)   29/   12947 : 02                  byte_12BAB:	dc.b 2
(1)   30/   12948 : F80C 001D F6        		dc.b $F8, $C, 0, $1D, $F6
(1)   31/   1294D : 000C 0021 E8        		dc.b 0,	$C, 0, $21, $E8
(1)   32/   12952 : 02                  byte_12BB6:	dc.b 2
(1)   33/   12953 : F00B 0025 E8        		dc.b $F0, $B, 0, $25, $E8
(1)   34/   12958 : F00B 0031 00        		dc.b $F0, $B, 0, $31, 0
(1)   35/   1295D : 02                  byte_12BC1:	dc.b 2
(1)   36/   1295E : F00B 003D E8        		dc.b $F0, $B, 0, $3D, $E8
(1)   37/   12963 : F00B 0049 00        		dc.b $F0, $B, 0, $49, 0
(1)   38/   12968 : 02                  byte_12BCC:	dc.b 2
(1)   39/   12969 : F00B 0055 E8        		dc.b $F0, $B, 0, $55, $E8
(1)   40/   1296E : F00B 0061 00        		dc.b $F0, $B, 0, $61, 0
(1)   41/   12973 : (MACRO)              		even
(1)   41/   12973 : 00                                          dc.b 0 ;ds.b 1 
   23318/   12974 :                     
   23319/   12974 :                     ; ===========================================================================
   23320/   12974 :                     ; ---------------------------------------------------------------------------
   23321/   12974 :                     ; Object 01 - Sonic
   23322/   12974 :                     ; ---------------------------------------------------------------------------
   23323/   12974 :                     
   23324/   12974 :                     Obj01:					; XREF: Obj_Index
   23325/   12974 : 4A78 FE08           		tst.w	($FFFFFE08).w	; is debug mode	being used?
   23326/   12978 : 6706                		beq.s	Obj01_Normal	; if not, branch
   23327/   1297A : 4EF9 0001 CF76      		jmp	DebugMode
   23328/   12980 :                     ; ===========================================================================
   23329/   12980 :                     
   23330/   12980 :                     Obj01_Normal:
   23331/   12980 : 7000                		moveq	#0,d0
   23332/   12982 : 1028 0024           		move.b	$24(a0),d0
   23333/   12986 : 323B 0006           		move.w	Obj01_Index(pc,d0.w),d1
   23334/   1298A : 4EFB 1002           		jmp	Obj01_Index(pc,d1.w)
   23335/   1298E :                     ; ===========================================================================
   23336/   1298E : 000A                Obj01_Index:	dc.w Obj01_Main-Obj01_Index
   23337/   12990 : 0052                		dc.w Obj01_Control-Obj01_Index
   23338/   12992 : 0C06                		dc.w Obj01_Hurt-Obj01_Index
   23339/   12994 : 0C76                		dc.w Obj01_Death-Obj01_Index
   23340/   12996 : 0D16                		dc.w Obj01_ResetLevel-Obj01_Index
   23341/   12998 :                     ; ===========================================================================
   23342/   12998 :                     
   23343/   12998 :                     Obj01_Main:				; XREF: Obj01_Index
   23344/   12998 : 11FC 0000 FFF7      		move.b	#$00,($FFFFFFF7).w			; MJ: set collision to 1st
   23345/   1299E : 5428 0024           		addq.b	#2,$24(a0)
   23346/   129A2 : 117C 0013 0016      		move.b	#$13,$16(a0)
   23347/   129A8 : 117C 0009 0017      		move.b	#9,$17(a0)
   23348/   129AE : 217C 0002 1148      		move.l	#Map_Sonic,4(a0)
            129B4 : 0004             
   23349/   129B6 : 317C 0780 0002      		move.w	#$780,2(a0)
   23350/   129BC : 117C 0002 0018      		move.b	#2,$18(a0)
   23351/   129C2 : 117C 0018 0019      		move.b	#$18,$19(a0)
   23352/   129C8 : 117C 0004 0001      		move.b	#4,1(a0)
   23353/   129CE : 31FC 0600 F760      		move.w	#$600,($FFFFF760).w ; Sonic's top speed
   23354/   129D4 : 31FC 000C F762      		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
   23355/   129DA : 31FC 0080 F764      		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
   23356/   129E0 :                     
   23357/   129E0 :                     Obj01_Control:				; XREF: Obj01_Index
   23358/   129E0 : 4A78 FFFA           		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
   23359/   129E4 : 6714                		beq.s	loc_12C58	; if not, branch
   23360/   129E6 : 0838 0004 F605      		btst	#4,($FFFFF605).w ; is button C pressed?
   23361/   129EC : 670C                		beq.s	loc_12C58	; if not, branch
   23362/   129EE : 31FC 0001 FE08      		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
   23363/   129F4 : 4238 F7CC           		clr.b	($FFFFF7CC).w
   23364/   129F8 : 4E75                		rts	
   23365/   129FA :                     ; ===========================================================================
   23366/   129FA :                     
   23367/   129FA :                     loc_12C58:
   23368/   129FA : 4A38 F7CC           		tst.b	($FFFFF7CC).w	; are controls locked?
   23369/   129FE : 6606                		bne.s	loc_12C64	; if yes, branch
   23370/   12A00 : 31F8 F604 F602      		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
   23371/   12A06 :                     
   23372/   12A06 :                     loc_12C64:
   23373/   12A06 : 0838 0000 F7C8      		btst	#0,($FFFFF7C8).w ; are controls	locked?
   23374/   12A0C : 6612                		bne.s	loc_12C7E	; if yes, branch
   23375/   12A0E : 7000                		moveq	#0,d0
   23376/   12A10 : 1028 0022           		move.b	$22(a0),d0
   23377/   12A14 : 0240 0006           		andi.w	#6,d0
   23378/   12A18 : 323B 0048           		move.w	Obj01_Modes(pc,d0.w),d1
   23379/   12A1C : 4EBB 1044           		jsr	Obj01_Modes(pc,d1.w)
   23380/   12A20 :                     
   23381/   12A20 :                     loc_12C7E:
   23382/   12A20 : 614E                		bsr.s	Sonic_Display
   23383/   12A22 : 6100 00DC           		bsr.w	Sonic_RecordPos
   23384/   12A26 : 6100 00F2           		bsr.w	Sonic_Water
   23385/   12A2A : 1178 F768 0036      		move.b	($FFFFF768).w,$36(a0)
   23386/   12A30 : 1178 F76A 0037      		move.b	($FFFFF76A).w,$37(a0)
   23387/   12A36 : 4A38 F7C7           		tst.b	($FFFFF7C7).w
   23388/   12A3A : 670C                		beq.s	loc_12CA6
   23389/   12A3C : 4A28 001C           		tst.b	$1C(a0)
   23390/   12A40 : 6606                		bne.s	loc_12CA6
   23391/   12A42 : 1168 001D 001C      		move.b	$1D(a0),$1C(a0)
   23392/   12A48 :                     
   23393/   12A48 :                     loc_12CA6:
   23394/   12A48 : 6100 0D3A           		bsr.w	Sonic_Animate
   23395/   12A4C : 4A38 F7C8           		tst.b	($FFFFF7C8).w
   23396/   12A50 : 6B06                		bmi.s	loc_12CB6
   23397/   12A52 : 4EB9 0001 ABB0      		jsr	TouchResponse
   23398/   12A58 :                     
   23399/   12A58 :                     loc_12CB6:
   23400/   12A58 : 6100 0C5E           		bsr.w	Sonic_Loops
   23401/   12A5C : 6100 0FA0           		bsr.w	LoadSonicDynPLC
   23402/   12A60 : 4E75                		rts	
   23403/   12A62 :                     ; ===========================================================================
   23404/   12A62 : 0158                Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
   23405/   12A64 : 017C                		dc.w Obj01_MdJump-Obj01_Modes
   23406/   12A66 : 01A6                		dc.w Obj01_MdRoll-Obj01_Modes
   23407/   12A68 : 01C6                		dc.w Obj01_MdJump2-Obj01_Modes
   23408/   12A6A :                     ; ---------------------------------------------------------------------------
   23409/   12A6A :                     ; Music	to play	after invincibility wears off
   23410/   12A6A :                     ; ---------------------------------------------------------------------------
   23411/   12A6A :                     MusicList2:	binclude	"_misc/muslist2.bin"
   23412/   12A70 : (MACRO)              		even
   23413/   12A70 :                     ; ===========================================================================
   23414/   12A70 :                     
   23415/   12A70 :                     Sonic_Display:				; XREF: loc_12C7E
   23416/   12A70 : 3028 0030           		move.w	$30(a0),d0
   23417/   12A74 : 6708                		beq.s	Obj01_Display
   23418/   12A76 : 5368 0030           		subq.w	#1,$30(a0)
   23419/   12A7A : E648                		lsr.w	#3,d0
   23420/   12A7C : 6406                		bcc.s	Obj01_ChkInvin
   23421/   12A7E :                     
   23422/   12A7E :                     Obj01_Display:
   23423/   12A7E : 4EB9 0000 D3D2      		jsr	DisplaySprite
   23424/   12A84 :                     
   23425/   12A84 :                     Obj01_ChkInvin:
   23426/   12A84 : 4A38 FE2D           		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
   23427/   12A88 : 6740                		beq.s	Obj01_ChkShoes	; if not, branch
   23428/   12A8A : 4A68 0032           		tst.w	$32(a0)		; check	time remaining for invinciblity
   23429/   12A8E : 673A                		beq.s	Obj01_ChkShoes	; if no	time remains, branch
   23430/   12A90 : 5368 0032           		subq.w	#1,$32(a0)	; subtract 1 from time
   23431/   12A94 : 6634                		bne.s	Obj01_ChkShoes
   23432/   12A96 : 4A38 F7AA           		tst.b	($FFFFF7AA).w
   23433/   12A9A : 6628                		bne.s	Obj01_RmvInvin
   23434/   12A9C : 0C78 000C FE14      		cmpi.w	#$C,($FFFFFE14).w
   23435/   12AA2 : 6520                		bcs.s	Obj01_RmvInvin
   23436/   12AA4 : 7000                		moveq	#0,d0
   23437/   12AA6 : 1038 FE10           		move.b	($FFFFFE10).w,d0
   23438/   12AAA : 0C78 0103 FE10      		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ3
   23439/   12AB0 : 6602                		bne.s	Obj01_PlayMusic
   23440/   12AB2 : 7005                		moveq	#5,d0		; play SBZ music
   23441/   12AB4 :                     
   23442/   12AB4 :                     Obj01_PlayMusic:
   23443/   12AB4 : 43F9 0001 2A6A      		lea	(MusicList2).l,a1
   23444/   12ABA : 1031 0000           		move.b	(a1,d0.w),d0
   23445/   12ABE : 4EB9 0000 117C      		jsr	(PlaySound).l	; play normal music
   23446/   12AC4 :                     
   23447/   12AC4 :                     Obj01_RmvInvin:
   23448/   12AC4 : 11FC 0000 FE2D      		move.b	#0,($FFFFFE2D).w ; cancel invincibility
   23449/   12ACA :                     
   23450/   12ACA :                     Obj01_ChkShoes:
   23451/   12ACA : 4A38 FE2E           		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
   23452/   12ACE : 672E                		beq.s	Obj01_ExitChk	; if not, branch
   23453/   12AD0 : 4A68 0034           		tst.w	$34(a0)		; check	time remaining
   23454/   12AD4 : 6728                		beq.s	Obj01_ExitChk
   23455/   12AD6 : 5368 0034           		subq.w	#1,$34(a0)	; subtract 1 from time
   23456/   12ADA : 6622                		bne.s	Obj01_ExitChk
   23457/   12ADC : 31FC 0600 F760      		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
   23458/   12AE2 : 31FC 000C F762      		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
   23459/   12AE8 : 31FC 0080 F764      		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
   23460/   12AEE : 11FC 0000 FE2E      		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
   23461/   12AF4 : 303C 00E3           		move.w	#$E3,d0
   23462/   12AF8 : 4EF9 0000 117C      		jmp	(PlaySound).l	; run music at normal speed
   23463/   12AFE :                     ; ===========================================================================
   23464/   12AFE :                     
   23465/   12AFE :                     Obj01_ExitChk:
   23466/   12AFE : 4E75                		rts	
   23467/   12B00 :                     
   23468/   12B00 :                     ; ---------------------------------------------------------------------------
   23469/   12B00 :                     ; Subroutine to	record Sonic's previous positions for invincibility stars
   23470/   12B00 :                     ; ---------------------------------------------------------------------------
   23471/   12B00 :                     
   23472/   12B00 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   23473/   12B00 :                     
   23474/   12B00 :                     
   23475/   12B00 :                     Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
   23476/   12B00 : 3038 F7A8           		move.w	($FFFFF7A8).w,d0
   23477/   12B04 : 43F8 CB00           		lea	($FFFFCB00).w,a1
   23478/   12B08 : 43F1 0000           		lea	(a1,d0.w),a1
   23479/   12B0C : 32E8 0008           		move.w	8(a0),(a1)+
   23480/   12B10 : 32E8 000C           		move.w	$C(a0),(a1)+
   23481/   12B14 : 5838 F7A9           		addq.b	#4,($FFFFF7A9).w
   23482/   12B18 : 4E75                		rts	
   23483/   12B1A :                     ; End of function Sonic_RecordPos
   23484/   12B1A :                     
   23485/   12B1A :                     ; ---------------------------------------------------------------------------
   23486/   12B1A :                     ; Subroutine for Sonic when he's underwater
   23487/   12B1A :                     ; ---------------------------------------------------------------------------
   23488/   12B1A :                     
   23489/   12B1A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   23490/   12B1A :                     
   23491/   12B1A :                     
   23492/   12B1A :                     Sonic_Water:				; XREF: loc_12C7E
   23493/   12B1A : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
   23494/   12B20 : 6702                		beq.s	Obj01_InWater	; if yes, branch
   23495/   12B22 :                     
   23496/   12B22 :                     locret_12D80:
   23497/   12B22 : 4E75                		rts	
   23498/   12B24 :                     ; ===========================================================================
   23499/   12B24 :                     
   23500/   12B24 :                     Obj01_InWater:
   23501/   12B24 : 3038 F646           		move.w	($FFFFF646).w,d0
   23502/   12B28 : B068 000C           		cmp.w	$C(a0),d0	; is Sonic above the water?
   23503/   12B2C : 6C48                		bge.s	Obj01_OutWater	; if yes, branch
   23504/   12B2E : 08E8 0006 0022      		bset	#6,$22(a0)
   23505/   12B34 : 66EC                		bne.s	locret_12D80
   23506/   12B36 : 6100 1314           		bsr.w	ResumeMusic
   23507/   12B3A : 11FC 000A D340      		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
   23508/   12B40 : 11FC 0081 D368      		move.b	#$81,($FFFFD368).w
   23509/   12B46 : 31FC 0300 F760      		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
   23510/   12B4C : 31FC 0006 F762      		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
   23511/   12B52 : 31FC 0040 F764      		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
   23512/   12B58 : E0E8 0010           		asr	$10(a0)
   23513/   12B5C : E0E8 0012           		asr	$12(a0)
   23514/   12B60 : E0E8 0012           		asr	$12(a0)
   23515/   12B64 : 67BC                		beq.s	locret_12D80
   23516/   12B66 : 11FC 0008 D300      		move.b	#8,($FFFFD300).w ; load	splash object
   23517/   12B6C : 303C 00AA           		move.w	#$AA,d0
   23518/   12B70 : 4EF9 0000 1182      		jmp	(PlaySound_Special).l ;	play splash sound
   23519/   12B76 :                     ; ===========================================================================
   23520/   12B76 :                     
   23521/   12B76 :                     Obj01_OutWater:
   23522/   12B76 : 08A8 0006 0022      		bclr	#6,$22(a0)
   23523/   12B7C : 67A4                		beq.s	locret_12D80
   23524/   12B7E : 6100 12CC           		bsr.w	ResumeMusic
   23525/   12B82 : 31FC 0600 F760      		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
   23526/   12B88 : 31FC 000C F762      		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
   23527/   12B8E : 31FC 0080 F764      		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
   23528/   12B94 : E1E8 0012           		asl	$12(a0)
   23529/   12B98 : 6700 FF88           		beq.w	locret_12D80
   23530/   12B9C : 11FC 0008 D300      		move.b	#8,($FFFFD300).w ; load	splash object
   23531/   12BA2 : 0C68 F000 0012      		cmpi.w	#-$1000,$12(a0)
   23532/   12BA8 : 6E06                		bgt.s	loc_12E0E
   23533/   12BAA : 317C F000 0012      		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
   23534/   12BB0 :                     
   23535/   12BB0 :                     loc_12E0E:
   23536/   12BB0 : 303C 00AA           		move.w	#$AA,d0
   23537/   12BB4 : 4EF9 0000 1182      		jmp	(PlaySound_Special).l ;	play splash sound
   23538/   12BBA :                     ; End of function Sonic_Water
   23539/   12BBA :                     
   23540/   12BBA :                     ; ===========================================================================
   23541/   12BBA :                     ; ---------------------------------------------------------------------------
   23542/   12BBA :                     ; Modes	for controlling	Sonic
   23543/   12BBA :                     ; ---------------------------------------------------------------------------
   23544/   12BBA :                     
   23545/   12BBA :                     Obj01_MdNormal:				; XREF: Obj01_Modes
   23546/   12BBA : 6100 05D0           		bsr.w	Sonic_Jump
   23547/   12BBE : 6100 06B6           		bsr.w	Sonic_SlopeResist
   23548/   12BC2 : 6100 008E           		bsr.w	Sonic_Move
   23549/   12BC6 : 6100 055E           		bsr.w	Sonic_Roll
   23550/   12BCA : 6100 04DA           		bsr.w	Sonic_LevelBound
   23551/   12BCE : 4EB9 0000 D3AC      		jsr	SpeedToPos
   23552/   12BD4 : 6100 17D6           		bsr.w	Sonic_AnglePos
   23553/   12BD8 : 6100 070E           		bsr.w	Sonic_SlopeRepel
   23554/   12BDC : 4E75                		rts	
   23555/   12BDE :                     ; ===========================================================================
   23556/   12BDE :                     
   23557/   12BDE :                     Obj01_MdJump:				; XREF: Obj01_Modes
   23558/   12BDE : 6100 065A           		bsr.w	Sonic_JumpHeight
   23559/   12BE2 : 6100 0406           		bsr.w	Sonic_ChgJumpDir
   23560/   12BE6 : 6100 04BE           		bsr.w	Sonic_LevelBound
   23561/   12BEA : 4EB9 0000 D380      		jsr	ObjectFall
   23562/   12BF0 : 0828 0006 0022      		btst	#6,$22(a0)
   23563/   12BF6 : 6706                		beq.s	loc_12E5C
   23564/   12BF8 : 0468 0028 0012      		subi.w	#$28,$12(a0)
   23565/   12BFE :                     
   23566/   12BFE :                     loc_12E5C:
   23567/   12BFE : 6100 072A           		bsr.w	Sonic_JumpAngle
   23568/   12C02 : 6100 0742           		bsr.w	Sonic_Floor
   23569/   12C06 : 4E75                		rts	
   23570/   12C08 :                     ; ===========================================================================
   23571/   12C08 :                     
   23572/   12C08 :                     Obj01_MdRoll:				; XREF: Obj01_Modes
   23573/   12C08 : 6100 0582           		bsr.w	Sonic_Jump
   23574/   12C0C : 6100 069E           		bsr.w	Sonic_RollRepel
   23575/   12C10 : 6100 02E0           		bsr.w	Sonic_RollSpeed
   23576/   12C14 : 6100 0490           		bsr.w	Sonic_LevelBound
   23577/   12C18 : 4EB9 0000 D3AC      		jsr	SpeedToPos
   23578/   12C1E : 6100 178C           		bsr.w	Sonic_AnglePos
   23579/   12C22 : 6100 06C4           		bsr.w	Sonic_SlopeRepel
   23580/   12C26 : 4E75                		rts	
   23581/   12C28 :                     ; ===========================================================================
   23582/   12C28 :                     
   23583/   12C28 :                     Obj01_MdJump2:				; XREF: Obj01_Modes
   23584/   12C28 : 6100 0610           		bsr.w	Sonic_JumpHeight
   23585/   12C2C : 6100 03BC           		bsr.w	Sonic_ChgJumpDir
   23586/   12C30 : 6100 0474           		bsr.w	Sonic_LevelBound
   23587/   12C34 : 4EB9 0000 D380      		jsr	ObjectFall
   23588/   12C3A : 0828 0006 0022      		btst	#6,$22(a0)
   23589/   12C40 : 6706                		beq.s	loc_12EA6
   23590/   12C42 : 0468 0028 0012      		subi.w	#$28,$12(a0)
   23591/   12C48 :                     
   23592/   12C48 :                     loc_12EA6:
   23593/   12C48 : 6100 06E0           		bsr.w	Sonic_JumpAngle
   23594/   12C4C : 6100 06F8           		bsr.w	Sonic_Floor
   23595/   12C50 : 4E75                		rts	
   23596/   12C52 :                     ; ---------------------------------------------------------------------------
   23597/   12C52 :                     ; Subroutine to	make Sonic walk/run
   23598/   12C52 :                     ; ---------------------------------------------------------------------------
   23599/   12C52 :                     
   23600/   12C52 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   23601/   12C52 :                     
   23602/   12C52 :                     
   23603/   12C52 :                     Sonic_Move:				; XREF: Obj01_MdNormal
   23604/   12C52 : 3C38 F760           		move.w	($FFFFF760).w,d6
   23605/   12C56 : 3A38 F762           		move.w	($FFFFF762).w,d5
   23606/   12C5A : 3838 F764           		move.w	($FFFFF764).w,d4
   23607/   12C5E : 4A38 F7CA           		tst.b	($FFFFF7CA).w
   23608/   12C62 : 6600 012C           		bne.w	loc_12FEE
   23609/   12C66 : 4A68 003E           		tst.w	$3E(a0)
   23610/   12C6A : 6600 00E6           		bne.w	Obj01_ResetScr
   23611/   12C6E : 0838 0002 F602      		btst	#2,($FFFFF602).w ; is left being pressed?
   23612/   12C74 : 6704                		beq.s	Obj01_NotLeft	; if not, branch
   23613/   12C76 : 6100 01A8           		bsr.w	Sonic_MoveLeft
   23614/   12C7A :                     
   23615/   12C7A :                     Obj01_NotLeft:
   23616/   12C7A : 0838 0003 F602      		btst	#3,($FFFFF602).w ; is right being pressed?
   23617/   12C80 : 6704                		beq.s	Obj01_NotRight	; if not, branch
   23618/   12C82 : 6100 0208           		bsr.w	Sonic_MoveRight
   23619/   12C86 :                     
   23620/   12C86 :                     Obj01_NotRight:
   23621/   12C86 : 1028 0026           		move.b	$26(a0),d0
   23622/   12C8A : 0600 0020           		addi.b	#$20,d0
   23623/   12C8E : 0200 00C0           		andi.b	#$C0,d0		; is Sonic on a	slope?
   23624/   12C92 : 6600 00BE           		bne.w	Obj01_ResetScr	; if yes, branch
   23625/   12C96 : 4A68 0014           		tst.w	$14(a0)		; is Sonic moving?
   23626/   12C9A : 6600 00B6           		bne.w	Obj01_ResetScr	; if yes, branch
   23627/   12C9E : 08A8 0005 0022      		bclr	#5,$22(a0)
   23628/   12CA4 : 117C 0005 001C      		move.b	#5,$1C(a0)	; use "standing" animation
   23629/   12CAA : 0828 0003 0022      		btst	#3,$22(a0)
   23630/   12CB0 : 6736                		beq.s	Sonic_Balance
   23631/   12CB2 : 7000                		moveq	#0,d0
   23632/   12CB4 : 1028 003D           		move.b	$3D(a0),d0
   23633/   12CB8 : ED48                		lsl.w	#6,d0
   23634/   12CBA : 43F8 D000           		lea	($FFFFD000).w,a1
   23635/   12CBE : 43F1 0000           		lea	(a1,d0.w),a1
   23636/   12CC2 : 4A29 0022           		tst.b	$22(a1)
   23637/   12CC6 : 6B52                		bmi.s	Sonic_LookUp
   23638/   12CC8 : 7200                		moveq	#0,d1
   23639/   12CCA : 1229 0019           		move.b	$19(a1),d1
   23640/   12CCE : 3401                		move.w	d1,d2
   23641/   12CD0 : D442                		add.w	d2,d2
   23642/   12CD2 : 5942                		subq.w	#4,d2
   23643/   12CD4 : D268 0008           		add.w	8(a0),d1
   23644/   12CD8 : 9269 0008           		sub.w	8(a1),d1
   23645/   12CDC : 0C41 0004           		cmpi.w	#4,d1
   23646/   12CE0 : 6D2A                		blt.s	loc_12F6A
   23647/   12CE2 : B242                		cmp.w	d2,d1
   23648/   12CE4 : 6C16                		bge.s	loc_12F5A
   23649/   12CE6 : 6032                		bra.s	Sonic_LookUp
   23650/   12CE8 :                     ; ===========================================================================
   23651/   12CE8 :                     
   23652/   12CE8 :                     Sonic_Balance:
   23653/   12CE8 : 4EB9 0001 4C08      		jsr	ObjHitFloor
   23654/   12CEE : 0C41 000C           		cmpi.w	#$C,d1
   23655/   12CF2 : 6D26                		blt.s	Sonic_LookUp
   23656/   12CF4 : 0C28 0003 0036      		cmpi.b	#3,$36(a0)
   23657/   12CFA : 6608                		bne.s	loc_12F62
   23658/   12CFC :                     
   23659/   12CFC :                     loc_12F5A:
   23660/   12CFC : 08A8 0000 0022      		bclr	#0,$22(a0)
   23661/   12D02 : 600E                		bra.s	loc_12F70
   23662/   12D04 :                     ; ===========================================================================
   23663/   12D04 :                     
   23664/   12D04 :                     loc_12F62:
   23665/   12D04 : 0C28 0003 0037      		cmpi.b	#3,$37(a0)
   23666/   12D0A : 660E                		bne.s	Sonic_LookUp
   23667/   12D0C :                     
   23668/   12D0C :                     loc_12F6A:
   23669/   12D0C : 08E8 0000 0022      		bset	#0,$22(a0)
   23670/   12D12 :                     
   23671/   12D12 :                     loc_12F70:
   23672/   12D12 : 117C 0006 001C      		move.b	#6,$1C(a0)	; use "balancing" animation
   23673/   12D18 : 6038                		bra.s	Obj01_ResetScr
   23674/   12D1A :                     ; ===========================================================================
   23675/   12D1A :                     
   23676/   12D1A :                     Sonic_LookUp:
   23677/   12D1A : 0838 0000 F602      		btst	#0,($FFFFF602).w ; is up being pressed?
   23678/   12D20 : 6714                		beq.s	Sonic_Duck	; if not, branch
   23679/   12D22 : 117C 0007 001C      		move.b	#7,$1C(a0)	; use "looking up" animation
   23680/   12D28 : 0C78 00C8 F73E      		cmpi.w	#$C8,($FFFFF73E).w
   23681/   12D2E : 6734                		beq.s	loc_12FC2
   23682/   12D30 : 5478 F73E           		addq.w	#2,($FFFFF73E).w
   23683/   12D34 : 602E                		bra.s	loc_12FC2
   23684/   12D36 :                     ; ===========================================================================
   23685/   12D36 :                     
   23686/   12D36 :                     Sonic_Duck:
   23687/   12D36 : 0838 0001 F602      		btst	#1,($FFFFF602).w ; is down being pressed?
   23688/   12D3C : 6714                		beq.s	Obj01_ResetScr	; if not, branch
   23689/   12D3E : 117C 0008 001C      		move.b	#8,$1C(a0)	; use "ducking"	animation
   23690/   12D44 : 0C78 0008 F73E      		cmpi.w	#8,($FFFFF73E).w
   23691/   12D4A : 6718                		beq.s	loc_12FC2
   23692/   12D4C : 5578 F73E           		subq.w	#2,($FFFFF73E).w
   23693/   12D50 : 6012                		bra.s	loc_12FC2
   23694/   12D52 :                     ; ===========================================================================
   23695/   12D52 :                     
   23696/   12D52 :                     Obj01_ResetScr:
   23697/   12D52 : 0C78 0060 F73E      		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
   23698/   12D58 : 670A                		beq.s	loc_12FC2	; if yes, branch
   23699/   12D5A : 6404                		bcc.s	loc_12FBE
   23700/   12D5C : 5878 F73E           		addq.w	#4,($FFFFF73E).w ; move	screen back to default
   23701/   12D60 :                     
   23702/   12D60 :                     loc_12FBE:
   23703/   12D60 : 5578 F73E           		subq.w	#2,($FFFFF73E).w ; move	screen back to default
   23704/   12D64 :                     
   23705/   12D64 :                     loc_12FC2:
   23706/   12D64 : 1038 F602           		move.b	($FFFFF602).w,d0
   23707/   12D68 : 0200 000C           		andi.b	#$C,d0		; is left/right	pressed?
   23708/   12D6C : 6622                		bne.s	loc_12FEE	; if yes, branch
   23709/   12D6E : 3028 0014           		move.w	$14(a0),d0
   23710/   12D72 : 671C                		beq.s	loc_12FEE
   23711/   12D74 : 6B0E                		bmi.s	loc_12FE2
   23712/   12D76 : 9045                		sub.w	d5,d0
   23713/   12D78 : 6404                		bcc.s	loc_12FDC
   23714/   12D7A : 303C 0000           		move.w	#0,d0
   23715/   12D7E :                     
   23716/   12D7E :                     loc_12FDC:
   23717/   12D7E : 3140 0014           		move.w	d0,$14(a0)
   23718/   12D82 : 600C                		bra.s	loc_12FEE
   23719/   12D84 :                     ; ===========================================================================
   23720/   12D84 :                     
   23721/   12D84 :                     loc_12FE2:
   23722/   12D84 : D045                		add.w	d5,d0
   23723/   12D86 : 6404                		bcc.s	loc_12FEA
   23724/   12D88 : 303C 0000           		move.w	#0,d0
   23725/   12D8C :                     
   23726/   12D8C :                     loc_12FEA:
   23727/   12D8C : 3140 0014           		move.w	d0,$14(a0)
   23728/   12D90 :                     
   23729/   12D90 :                     loc_12FEE:
   23730/   12D90 : 1028 0026           		move.b	$26(a0),d0
   23731/   12D94 : 4EB9 0000 27C0      		jsr	(CalcSine).l
   23732/   12D9A : C3E8 0014           		muls.w	$14(a0),d1
   23733/   12D9E : E081                		asr.l	#8,d1
   23734/   12DA0 : 3141 0010           		move.w	d1,$10(a0)
   23735/   12DA4 : C1E8 0014           		muls.w	$14(a0),d0
   23736/   12DA8 : E080                		asr.l	#8,d0
   23737/   12DAA : 3140 0012           		move.w	d0,$12(a0)
   23738/   12DAE :                     
   23739/   12DAE :                     loc_1300C:
   23740/   12DAE : 1028 0026           		move.b	$26(a0),d0
   23741/   12DB2 : 0600 0040           		addi.b	#$40,d0
   23742/   12DB6 : 6B66                		bmi.s	locret_1307C
   23743/   12DB8 : 123C 0040           		move.b	#$40,d1
   23744/   12DBC : 4A68 0014           		tst.w	$14(a0)
   23745/   12DC0 : 675C                		beq.s	locret_1307C
   23746/   12DC2 : 6B02                		bmi.s	loc_13024
   23747/   12DC4 : 4441                		neg.w	d1
   23748/   12DC6 :                     
   23749/   12DC6 :                     loc_13024:
   23750/   12DC6 : 1028 0026           		move.b	$26(a0),d0
   23751/   12DCA : D001                		add.b	d1,d0
   23752/   12DCC : 3F00                		move.w	d0,-(sp)
   23753/   12DCE : 6100 1CFE           		bsr.w	Sonic_WalkSpeed
   23754/   12DD2 : 301F                		move.w	(sp)+,d0
   23755/   12DD4 : 4A41                		tst.w	d1
   23756/   12DD6 : 6A46                		bpl.s	locret_1307C
   23757/   12DD8 : E141                		asl.w	#8,d1
   23758/   12DDA : 0600 0020           		addi.b	#$20,d0
   23759/   12DDE : 0200 00C0           		andi.b	#$C0,d0
   23760/   12DE2 : 6736                		beq.s	loc_13078
   23761/   12DE4 : 0C00 0040           		cmpi.b	#$40,d0
   23762/   12DE8 : 671E                		beq.s	loc_13066
   23763/   12DEA : 0C00 0080           		cmpi.b	#$80,d0
   23764/   12DEE : 6712                		beq.s	loc_13060
   23765/   12DF0 : D368 0010           		add.w	d1,$10(a0)
   23766/   12DF4 : 08E8 0005 0022      		bset	#5,$22(a0)
   23767/   12DFA : 317C 0000 0014      		move.w	#0,$14(a0)
   23768/   12E00 : 4E75                		rts	
   23769/   12E02 :                     ; ===========================================================================
   23770/   12E02 :                     
   23771/   12E02 :                     loc_13060:
   23772/   12E02 : 9368 0012           		sub.w	d1,$12(a0)
   23773/   12E06 : 4E75                		rts	
   23774/   12E08 :                     ; ===========================================================================
   23775/   12E08 :                     
   23776/   12E08 :                     loc_13066:
   23777/   12E08 : 9368 0010           		sub.w	d1,$10(a0)
   23778/   12E0C : 08E8 0005 0022      		bset	#5,$22(a0)
   23779/   12E12 : 317C 0000 0014      		move.w	#0,$14(a0)
   23780/   12E18 : 4E75                		rts	
   23781/   12E1A :                     ; ===========================================================================
   23782/   12E1A :                     
   23783/   12E1A :                     loc_13078:
   23784/   12E1A : D368 0012           		add.w	d1,$12(a0)
   23785/   12E1E :                     
   23786/   12E1E :                     locret_1307C:
   23787/   12E1E : 4E75                		rts	
   23788/   12E20 :                     ; End of function Sonic_Move
   23789/   12E20 :                     
   23790/   12E20 :                     
   23791/   12E20 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   23792/   12E20 :                     
   23793/   12E20 :                     
   23794/   12E20 :                     Sonic_MoveLeft:				; XREF: Sonic_Move
   23795/   12E20 : 3028 0014           		move.w	$14(a0),d0
   23796/   12E24 : 6702                		beq.s	loc_13086
   23797/   12E26 : 6A2C                		bpl.s	loc_130B2
   23798/   12E28 :                     
   23799/   12E28 :                     loc_13086:
   23800/   12E28 : 08E8 0000 0022      		bset	#0,$22(a0)
   23801/   12E2E : 660C                		bne.s	loc_1309A
   23802/   12E30 : 08A8 0005 0022      		bclr	#5,$22(a0)
   23803/   12E36 : 117C 0001 001D      		move.b	#1,$1D(a0)
   23804/   12E3C :                     
   23805/   12E3C :                     loc_1309A:
   23806/   12E3C : 9045                		sub.w	d5,d0
   23807/   12E3E : 3206                		move.w	d6,d1
   23808/   12E40 : 4441                		neg.w	d1
   23809/   12E42 : B041                		cmp.w	d1,d0
   23810/   12E44 : 6E02                		bgt.s	loc_130A6
   23811/   12E46 : 3001                		move.w	d1,d0
   23812/   12E48 :                     
   23813/   12E48 :                     loc_130A6:
   23814/   12E48 : 3140 0014           		move.w	d0,$14(a0)
   23815/   12E4C : 117C 0000 001C      		move.b	#0,$1C(a0)	; use walking animation
   23816/   12E52 : 4E75                		rts	
   23817/   12E54 :                     ; ===========================================================================
   23818/   12E54 :                     
   23819/   12E54 :                     loc_130B2:				; XREF: Sonic_MoveLeft
   23820/   12E54 : 9044                		sub.w	d4,d0
   23821/   12E56 : 6404                		bcc.s	loc_130BA
   23822/   12E58 : 303C FF80           		move.w	#-$80,d0
   23823/   12E5C :                     
   23824/   12E5C :                     loc_130BA:
   23825/   12E5C : 3140 0014           		move.w	d0,$14(a0)
   23826/   12E60 : 1028 0026           		move.b	$26(a0),d0
   23827/   12E64 : 0600 0020           		addi.b	#$20,d0
   23828/   12E68 : 0200 00C0           		andi.b	#$C0,d0
   23829/   12E6C : 661C                		bne.s	locret_130E8
   23830/   12E6E : 0C40 0400           		cmpi.w	#$400,d0
   23831/   12E72 : 6D16                		blt.s	locret_130E8
   23832/   12E74 : 117C 000D 001C      		move.b	#$D,$1C(a0)	; use "stopping" animation
   23833/   12E7A : 08A8 0000 0022      		bclr	#0,$22(a0)
   23834/   12E80 : 303C 00A4           		move.w	#$A4,d0
   23835/   12E84 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play stopping sound
   23836/   12E8A :                     
   23837/   12E8A :                     locret_130E8:
   23838/   12E8A : 4E75                		rts	
   23839/   12E8C :                     ; End of function Sonic_MoveLeft
   23840/   12E8C :                     
   23841/   12E8C :                     
   23842/   12E8C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   23843/   12E8C :                     
   23844/   12E8C :                     
   23845/   12E8C :                     Sonic_MoveRight:			; XREF: Sonic_Move
   23846/   12E8C : 3028 0014           		move.w	$14(a0),d0
   23847/   12E90 : 6B28                		bmi.s	loc_13118
   23848/   12E92 : 08A8 0000 0022      		bclr	#0,$22(a0)
   23849/   12E98 : 670C                		beq.s	loc_13104
   23850/   12E9A : 08A8 0005 0022      		bclr	#5,$22(a0)
   23851/   12EA0 : 117C 0001 001D      		move.b	#1,$1D(a0)
   23852/   12EA6 :                     
   23853/   12EA6 :                     loc_13104:
   23854/   12EA6 : D045                		add.w	d5,d0
   23855/   12EA8 : B046                		cmp.w	d6,d0
   23856/   12EAA : 6D02                		blt.s	loc_1310C
   23857/   12EAC : 3006                		move.w	d6,d0
   23858/   12EAE :                     
   23859/   12EAE :                     loc_1310C:
   23860/   12EAE : 3140 0014           		move.w	d0,$14(a0)
   23861/   12EB2 : 117C 0000 001C      		move.b	#0,$1C(a0)	; use walking animation
   23862/   12EB8 : 4E75                		rts	
   23863/   12EBA :                     ; ===========================================================================
   23864/   12EBA :                     
   23865/   12EBA :                     loc_13118:				; XREF: Sonic_MoveRight
   23866/   12EBA : D044                		add.w	d4,d0
   23867/   12EBC : 6404                		bcc.s	loc_13120
   23868/   12EBE : 303C 0080           		move.w	#$80,d0
   23869/   12EC2 :                     
   23870/   12EC2 :                     loc_13120:
   23871/   12EC2 : 3140 0014           		move.w	d0,$14(a0)
   23872/   12EC6 : 1028 0026           		move.b	$26(a0),d0
   23873/   12ECA : 0600 0020           		addi.b	#$20,d0
   23874/   12ECE : 0200 00C0           		andi.b	#$C0,d0
   23875/   12ED2 : 661C                		bne.s	locret_1314E
   23876/   12ED4 : 0C40 FC00           		cmpi.w	#-$400,d0
   23877/   12ED8 : 6E16                		bgt.s	locret_1314E
   23878/   12EDA : 117C 000D 001C      		move.b	#$D,$1C(a0)	; use "stopping" animation
   23879/   12EE0 : 08E8 0000 0022      		bset	#0,$22(a0)
   23880/   12EE6 : 303C 00A4           		move.w	#$A4,d0
   23881/   12EEA : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play stopping sound
   23882/   12EF0 :                     
   23883/   12EF0 :                     locret_1314E:
   23884/   12EF0 : 4E75                		rts	
   23885/   12EF2 :                     ; End of function Sonic_MoveRight
   23886/   12EF2 :                     
   23887/   12EF2 :                     ; ---------------------------------------------------------------------------
   23888/   12EF2 :                     ; Subroutine to	change Sonic's speed as he rolls
   23889/   12EF2 :                     ; ---------------------------------------------------------------------------
   23890/   12EF2 :                     
   23891/   12EF2 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   23892/   12EF2 :                     
   23893/   12EF2 :                     
   23894/   12EF2 :                     Sonic_RollSpeed:			; XREF: Obj01_MdRoll
   23895/   12EF2 : 3C38 F760           		move.w	($FFFFF760).w,d6
   23896/   12EF6 : E346                		asl.w	#1,d6
   23897/   12EF8 : 3A38 F762           		move.w	($FFFFF762).w,d5
   23898/   12EFC : E245                		asr.w	#1,d5
   23899/   12EFE : 3838 F764           		move.w	($FFFFF764).w,d4
   23900/   12F02 : E444                		asr.w	#2,d4
   23901/   12F04 : 4A38 F7CA           		tst.b	($FFFFF7CA).w
   23902/   12F08 : 6600 0064           		bne.w	loc_131CC
   23903/   12F0C : 4A68 003E           		tst.w	$3E(a0)
   23904/   12F10 : 6618                		bne.s	loc_13188
   23905/   12F12 : 0838 0002 F602      		btst	#2,($FFFFF602).w ; is left being pressed?
   23906/   12F18 : 6704                		beq.s	loc_1317C	; if not, branch
   23907/   12F1A : 6100 0088           		bsr.w	Sonic_RollLeft
   23908/   12F1E :                     
   23909/   12F1E :                     loc_1317C:
   23910/   12F1E : 0838 0003 F602      		btst	#3,($FFFFF602).w ; is right being pressed?
   23911/   12F24 : 6704                		beq.s	loc_13188	; if not, branch
   23912/   12F26 : 6100 00A0           		bsr.w	Sonic_RollRight
   23913/   12F2A :                     
   23914/   12F2A :                     loc_13188:
   23915/   12F2A : 3028 0014           		move.w	$14(a0),d0
   23916/   12F2E : 671C                		beq.s	loc_131AA
   23917/   12F30 : 6B0E                		bmi.s	loc_1319E
   23918/   12F32 : 9045                		sub.w	d5,d0
   23919/   12F34 : 6404                		bcc.s	loc_13198
   23920/   12F36 : 303C 0000           		move.w	#0,d0
   23921/   12F3A :                     
   23922/   12F3A :                     loc_13198:
   23923/   12F3A : 3140 0014           		move.w	d0,$14(a0)
   23924/   12F3E : 600C                		bra.s	loc_131AA
   23925/   12F40 :                     ; ===========================================================================
   23926/   12F40 :                     
   23927/   12F40 :                     loc_1319E:				; XREF: Sonic_RollSpeed
   23928/   12F40 : D045                		add.w	d5,d0
   23929/   12F42 : 6404                		bcc.s	loc_131A6
   23930/   12F44 : 303C 0000           		move.w	#0,d0
   23931/   12F48 :                     
   23932/   12F48 :                     loc_131A6:
   23933/   12F48 : 3140 0014           		move.w	d0,$14(a0)
   23934/   12F4C :                     
   23935/   12F4C :                     loc_131AA:
   23936/   12F4C : 4A68 0014           		tst.w	$14(a0)		; is Sonic moving?
   23937/   12F50 : 661C                		bne.s	loc_131CC	; if yes, branch
   23938/   12F52 : 08A8 0002 0022      		bclr	#2,$22(a0)
   23939/   12F58 : 117C 0013 0016      		move.b	#$13,$16(a0)
   23940/   12F5E : 117C 0009 0017      		move.b	#9,$17(a0)
   23941/   12F64 : 117C 0005 001C      		move.b	#5,$1C(a0)	; use "standing" animation
   23942/   12F6A : 5B68 000C           		subq.w	#5,$C(a0)
   23943/   12F6E :                     
   23944/   12F6E :                     loc_131CC:
   23945/   12F6E : 1028 0026           		move.b	$26(a0),d0
   23946/   12F72 : 4EB9 0000 27C0      		jsr	(CalcSine).l
   23947/   12F78 : C1E8 0014           		muls.w	$14(a0),d0
   23948/   12F7C : E080                		asr.l	#8,d0
   23949/   12F7E : 3140 0012           		move.w	d0,$12(a0)
   23950/   12F82 : C3E8 0014           		muls.w	$14(a0),d1
   23951/   12F86 : E081                		asr.l	#8,d1
   23952/   12F88 : 0C41 1000           		cmpi.w	#$1000,d1
   23953/   12F8C : 6F04                		ble.s	loc_131F0
   23954/   12F8E : 323C 1000           		move.w	#$1000,d1
   23955/   12F92 :                     
   23956/   12F92 :                     loc_131F0:
   23957/   12F92 : 0C41 F000           		cmpi.w	#-$1000,d1
   23958/   12F96 : 6C04                		bge.s	loc_131FA
   23959/   12F98 : 323C F000           		move.w	#-$1000,d1
   23960/   12F9C :                     
   23961/   12F9C :                     loc_131FA:
   23962/   12F9C : 3141 0010           		move.w	d1,$10(a0)
   23963/   12FA0 : 6000 FE0C           		bra.w	loc_1300C
   23964/   12FA4 :                     ; End of function Sonic_RollSpeed
   23965/   12FA4 :                     
   23966/   12FA4 :                     
   23967/   12FA4 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   23968/   12FA4 :                     
   23969/   12FA4 :                     
   23970/   12FA4 :                     Sonic_RollLeft:				; XREF: Sonic_RollSpeed
   23971/   12FA4 : 3028 0014           		move.w	$14(a0),d0
   23972/   12FA8 : 6702                		beq.s	loc_1320A
   23973/   12FAA : 6A0E                		bpl.s	loc_13218
   23974/   12FAC :                     
   23975/   12FAC :                     loc_1320A:
   23976/   12FAC : 08E8 0000 0022      		bset	#0,$22(a0)
   23977/   12FB2 : 117C 0002 001C      		move.b	#2,$1C(a0)	; use "rolling"	animation
   23978/   12FB8 : 4E75                		rts	
   23979/   12FBA :                     ; ===========================================================================
   23980/   12FBA :                     
   23981/   12FBA :                     loc_13218:
   23982/   12FBA : 9044                		sub.w	d4,d0
   23983/   12FBC : 6404                		bcc.s	loc_13220
   23984/   12FBE : 303C FF80           		move.w	#-$80,d0
   23985/   12FC2 :                     
   23986/   12FC2 :                     loc_13220:
   23987/   12FC2 : 3140 0014           		move.w	d0,$14(a0)
   23988/   12FC6 : 4E75                		rts	
   23989/   12FC8 :                     ; End of function Sonic_RollLeft
   23990/   12FC8 :                     
   23991/   12FC8 :                     
   23992/   12FC8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   23993/   12FC8 :                     
   23994/   12FC8 :                     
   23995/   12FC8 :                     Sonic_RollRight:			; XREF: Sonic_RollSpeed
   23996/   12FC8 : 3028 0014           		move.w	$14(a0),d0
   23997/   12FCC : 6B0E                		bmi.s	loc_1323A
   23998/   12FCE : 08A8 0000 0022      		bclr	#0,$22(a0)
   23999/   12FD4 : 117C 0002 001C      		move.b	#2,$1C(a0)	; use "rolling"	animation
   24000/   12FDA : 4E75                		rts	
   24001/   12FDC :                     ; ===========================================================================
   24002/   12FDC :                     
   24003/   12FDC :                     loc_1323A:
   24004/   12FDC : D044                		add.w	d4,d0
   24005/   12FDE : 6404                		bcc.s	loc_13242
   24006/   12FE0 : 303C 0080           		move.w	#$80,d0
   24007/   12FE4 :                     
   24008/   12FE4 :                     loc_13242:
   24009/   12FE4 : 3140 0014           		move.w	d0,$14(a0)
   24010/   12FE8 : 4E75                		rts	
   24011/   12FEA :                     ; End of function Sonic_RollRight
   24012/   12FEA :                     
   24013/   12FEA :                     ; ---------------------------------------------------------------------------
   24014/   12FEA :                     ; Subroutine to	change Sonic's direction while jumping
   24015/   12FEA :                     ; ---------------------------------------------------------------------------
   24016/   12FEA :                     
   24017/   12FEA :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   24018/   12FEA :                     
   24019/   12FEA :                     
   24020/   12FEA :                     Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
   24021/   12FEA : 3C38 F760           		move.w	($FFFFF760).w,d6
   24022/   12FEE : 3A38 F762           		move.w	($FFFFF762).w,d5
   24023/   12FF2 : E345                		asl.w	#1,d5
   24024/   12FF4 : 0828 0004 0022      		btst	#4,$22(a0)
   24025/   12FFA : 6638                		bne.s	Obj01_ResetScr2
   24026/   12FFC : 3028 0010           		move.w	$10(a0),d0
   24027/   13000 : 0838 0002 F602      		btst	#2,($FFFFF602).w ; is left being pressed?
   24028/   13006 : 6712                		beq.s	loc_13278	; if not, branch
   24029/   13008 : 08E8 0000 0022      		bset	#0,$22(a0)
   24030/   1300E : 9045                		sub.w	d5,d0
   24031/   13010 : 3206                		move.w	d6,d1
   24032/   13012 : 4441                		neg.w	d1
   24033/   13014 : B041                		cmp.w	d1,d0
   24034/   13016 : 6E02                		bgt.s	loc_13278
   24035/   13018 : 3001                		move.w	d1,d0
   24036/   1301A :                     
   24037/   1301A :                     loc_13278:
   24038/   1301A : 0838 0003 F602      		btst	#3,($FFFFF602).w ; is right being pressed?
   24039/   13020 : 670E                		beq.s	Obj01_JumpMove	; if not, branch
   24040/   13022 : 08A8 0000 0022      		bclr	#0,$22(a0)
   24041/   13028 : D045                		add.w	d5,d0
   24042/   1302A : B046                		cmp.w	d6,d0
   24043/   1302C : 6D02                		blt.s	Obj01_JumpMove
   24044/   1302E : 3006                		move.w	d6,d0
   24045/   13030 :                     
   24046/   13030 :                     Obj01_JumpMove:
   24047/   13030 : 3140 0010           		move.w	d0,$10(a0)	; change Sonic's horizontal speed
   24048/   13034 :                     
   24049/   13034 :                     Obj01_ResetScr2:
   24050/   13034 : 0C78 0060 F73E      		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
   24051/   1303A : 670A                		beq.s	loc_132A4	; if yes, branch
   24052/   1303C : 6404                		bcc.s	loc_132A0
   24053/   1303E : 5878 F73E           		addq.w	#4,($FFFFF73E).w
   24054/   13042 :                     
   24055/   13042 :                     loc_132A0:
   24056/   13042 : 5578 F73E           		subq.w	#2,($FFFFF73E).w
   24057/   13046 :                     
   24058/   13046 :                     loc_132A4:
   24059/   13046 : 0C68 FC00 0012      		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
   24060/   1304C : 6526                		bcs.s	locret_132D2	; if yes, branch
   24061/   1304E : 3028 0010           		move.w	$10(a0),d0
   24062/   13052 : 3200                		move.w	d0,d1
   24063/   13054 : EA41                		asr.w	#5,d1
   24064/   13056 : 671C                		beq.s	locret_132D2
   24065/   13058 : 6B0E                		bmi.s	loc_132C6
   24066/   1305A : 9041                		sub.w	d1,d0
   24067/   1305C : 6404                		bcc.s	loc_132C0
   24068/   1305E : 303C 0000           		move.w	#0,d0
   24069/   13062 :                     
   24070/   13062 :                     loc_132C0:
   24071/   13062 : 3140 0010           		move.w	d0,$10(a0)
   24072/   13066 : 4E75                		rts	
   24073/   13068 :                     ; ===========================================================================
   24074/   13068 :                     
   24075/   13068 :                     loc_132C6:
   24076/   13068 : 9041                		sub.w	d1,d0
   24077/   1306A : 6504                		bcs.s	loc_132CE
   24078/   1306C : 303C 0000           		move.w	#0,d0
   24079/   13070 :                     
   24080/   13070 :                     loc_132CE:
   24081/   13070 : 3140 0010           		move.w	d0,$10(a0)
   24082/   13074 :                     
   24083/   13074 :                     locret_132D2:
   24084/   13074 : 4E75                		rts	
   24085/   13076 :                     ; End of function Sonic_ChgJumpDir
   24086/   13076 :                     
   24087/   13076 :                     ; ===========================================================================
   24088/   13076 :                     ; ---------------------------------------------------------------------------
   24089/   13076 :                     ; Unused subroutine to squash Sonic
   24090/   13076 :                     ; ---------------------------------------------------------------------------
   24091/   13076 : 1028 0026           		move.b	$26(a0),d0
   24092/   1307A : 0600 0020           		addi.b	#$20,d0
   24093/   1307E : 0200 00C0           		andi.b	#$C0,d0
   24094/   13082 : 6620                		bne.s	locret_13302
   24095/   13084 : 6100 1C72           		bsr.w	Sonic_DontRunOnWalls
   24096/   13088 : 4A41                		tst.w	d1
   24097/   1308A : 6A18                		bpl.s	locret_13302
   24098/   1308C : 317C 0000 0014      		move.w	#0,$14(a0)	; stop Sonic moving
   24099/   13092 : 317C 0000 0010      		move.w	#0,$10(a0)
   24100/   13098 : 317C 0000 0012      		move.w	#0,$12(a0)
   24101/   1309E : 117C 000B 001C      		move.b	#$B,$1C(a0)	; use "warping"	animation
   24102/   130A4 :                     
   24103/   130A4 :                     locret_13302:
   24104/   130A4 : 4E75                		rts	
   24105/   130A6 :                     ; ---------------------------------------------------------------------------
   24106/   130A6 :                     ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
   24107/   130A6 :                     ; ---------------------------------------------------------------------------
   24108/   130A6 :                     
   24109/   130A6 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   24110/   130A6 :                     
   24111/   130A6 :                     
   24112/   130A6 :                     Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
   24113/   130A6 : 2228 0008           		move.l	8(a0),d1
   24114/   130AA : 3028 0010           		move.w	$10(a0),d0
   24115/   130AE : 48C0                		ext.l	d0
   24116/   130B0 : E180                		asl.l	#8,d0
   24117/   130B2 : D280                		add.l	d0,d1
   24118/   130B4 : 4841                		swap	d1
   24119/   130B6 : 3038 F728           		move.w	($FFFFF728).w,d0
   24120/   130BA : 0640 0010           		addi.w	#$10,d0
   24121/   130BE : B041                		cmp.w	d1,d0		; has Sonic touched the	side boundary?
   24122/   130C0 : 624C                		bhi.s	Boundary_Sides	; if yes, branch
   24123/   130C2 : 3038 F72A           		move.w	($FFFFF72A).w,d0
   24124/   130C6 : 0640 0128           		addi.w	#$128,d0
   24125/   130CA : 4A38 F7AA           		tst.b	($FFFFF7AA).w
   24126/   130CE : 6604                		bne.s	loc_13332
   24127/   130D0 : 0640 0040           		addi.w	#$40,d0
   24128/   130D4 :                     
   24129/   130D4 :                     loc_13332:
   24130/   130D4 : B041                		cmp.w	d1,d0		; has Sonic touched the	side boundary?
   24131/   130D6 : 6336                		bls.s	Boundary_Sides	; if yes, branch
   24132/   130D8 :                     
   24133/   130D8 :                     loc_13336:
   24134/   130D8 : 3038 F72E           		move.w	($FFFFF72E).w,d0
   24135/   130DC : 0640 00E0           		addi.w	#$E0,d0
   24136/   130E0 : B068 000C           		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
   24137/   130E4 : 6D02                		blt.s	Boundary_Bottom	; if yes, branch
   24138/   130E6 : 4E75                		rts	
   24139/   130E8 :                     ; ===========================================================================
   24140/   130E8 :                     
   24141/   130E8 :                     Boundary_Bottom:
   24142/   130E8 : 0C78 0501 FE10      		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
   24143/   130EE : 6600 7D70           		bne.w	KillSonic	; if not, kill Sonic
   24144/   130F2 : 0C78 2000 D008      		cmpi.w	#$2000,($FFFFD008).w
   24145/   130F8 : 6500 7D66           		bcs.w	KillSonic
   24146/   130FC : 4238 FE30           		clr.b	($FFFFFE30).w	; clear	lamppost counter
   24147/   13100 : 31FC 0001 FE02      		move.w	#1,($FFFFFE02).w ; restart the level
   24148/   13106 : 31FC 0103 FE10      		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
   24149/   1310C : 4E75                		rts	
   24150/   1310E :                     ; ===========================================================================
   24151/   1310E :                     
   24152/   1310E :                     Boundary_Sides:
   24153/   1310E : 3140 0008           		move.w	d0,8(a0)
   24154/   13112 : 317C 0000 000A      		move.w	#0,$A(a0)
   24155/   13118 : 317C 0000 0010      		move.w	#0,$10(a0)	; stop Sonic moving
   24156/   1311E : 317C 0000 0014      		move.w	#0,$14(a0)
   24157/   13124 : 60B2                		bra.s	loc_13336
   24158/   13126 :                     ; End of function Sonic_LevelBound
   24159/   13126 :                     
   24160/   13126 :                     ; ---------------------------------------------------------------------------
   24161/   13126 :                     ; Subroutine allowing Sonic to roll when he's moving
   24162/   13126 :                     ; ---------------------------------------------------------------------------
   24163/   13126 :                     
   24164/   13126 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   24165/   13126 :                     
   24166/   13126 :                     
   24167/   13126 :                     Sonic_Roll:				; XREF: Obj01_MdNormal
   24168/   13126 : 4A38 F7CA           		tst.b	($FFFFF7CA).w
   24169/   1312A : 6620                		bne.s	Obj01_NoRoll
   24170/   1312C : 3028 0014           		move.w	$14(a0),d0
   24171/   13130 : 6A02                		bpl.s	loc_13392
   24172/   13132 : 4440                		neg.w	d0
   24173/   13134 :                     
   24174/   13134 :                     loc_13392:
   24175/   13134 : 0C40 0080           		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
   24176/   13138 : 6512                		bcs.s	Obj01_NoRoll	; if not, branch
   24177/   1313A : 1038 F602           		move.b	($FFFFF602).w,d0
   24178/   1313E : 0200 000C           		andi.b	#$C,d0		; is left/right	being pressed?
   24179/   13142 : 6608                		bne.s	Obj01_NoRoll	; if yes, branch
   24180/   13144 : 0838 0001 F602      		btst	#1,($FFFFF602).w ; is down being pressed?
   24181/   1314A : 6602                		bne.s	Obj01_ChkRoll	; if yes, branch
   24182/   1314C :                     
   24183/   1314C :                     Obj01_NoRoll:
   24184/   1314C : 4E75                		rts	
   24185/   1314E :                     ; ===========================================================================
   24186/   1314E :                     
   24187/   1314E :                     Obj01_ChkRoll:
   24188/   1314E : 0828 0002 0022      		btst	#2,$22(a0)	; is Sonic already rolling?
   24189/   13154 : 6702                		beq.s	Obj01_DoRoll	; if not, branch
   24190/   13156 : 4E75                		rts	
   24191/   13158 :                     ; ===========================================================================
   24192/   13158 :                     
   24193/   13158 :                     Obj01_DoRoll:
   24194/   13158 : 08E8 0002 0022      		bset	#2,$22(a0)
   24195/   1315E : 117C 000E 0016      		move.b	#$E,$16(a0)
   24196/   13164 : 117C 0007 0017      		move.b	#7,$17(a0)
   24197/   1316A : 117C 0002 001C      		move.b	#2,$1C(a0)	; use "rolling"	animation
   24198/   13170 : 5A68 000C           		addq.w	#5,$C(a0)
   24199/   13174 : 303C 00BE           		move.w	#$BE,d0
   24200/   13178 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play rolling sound
   24201/   1317E : 4A68 0014           		tst.w	$14(a0)
   24202/   13182 : 6606                		bne.s	locret_133E8
   24203/   13184 : 317C 0200 0014      		move.w	#$200,$14(a0)
   24204/   1318A :                     
   24205/   1318A :                     locret_133E8:
   24206/   1318A : 4E75                		rts	
   24207/   1318C :                     ; End of function Sonic_Roll
   24208/   1318C :                     
   24209/   1318C :                     ; ---------------------------------------------------------------------------
   24210/   1318C :                     ; Subroutine allowing Sonic to jump
   24211/   1318C :                     ; ---------------------------------------------------------------------------
   24212/   1318C :                     
   24213/   1318C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   24214/   1318C :                     
   24215/   1318C :                     
   24216/   1318C :                     Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
   24217/   1318C : 1038 F603           		move.b	($FFFFF603).w,d0
   24218/   13190 : 0200 0070           		andi.b	#$70,d0		; is A,	B or C pressed?
   24219/   13194 : 6700 009A           		beq.w	locret_1348E	; if not, branch
   24220/   13198 : 7000                		moveq	#0,d0
   24221/   1319A : 1028 0026           		move.b	$26(a0),d0
   24222/   1319E : 0600 0080           		addi.b	#$80,d0
   24223/   131A2 : 6100 1994           		bsr.w	sub_14D48
   24224/   131A6 : 0C41 0006           		cmpi.w	#6,d1
   24225/   131AA : 6D00 0084           		blt.w	locret_1348E
   24226/   131AE : 343C 0680           		move.w	#$680,d2
   24227/   131B2 : 0828 0006 0022      		btst	#6,$22(a0)
   24228/   131B8 : 6704                		beq.s	loc_1341C
   24229/   131BA : 343C 0380           		move.w	#$380,d2
   24230/   131BE :                     
   24231/   131BE :                     loc_1341C:
   24232/   131BE : 7000                		moveq	#0,d0
   24233/   131C0 : 1028 0026           		move.b	$26(a0),d0
   24234/   131C4 : 0400 0040           		subi.b	#$40,d0
   24235/   131C8 : 4EB9 0000 27C0      		jsr	(CalcSine).l
   24236/   131CE : C3C2                		muls.w	d2,d1
   24237/   131D0 : E081                		asr.l	#8,d1
   24238/   131D2 : D368 0010           		add.w	d1,$10(a0)	; make Sonic jump
   24239/   131D6 : C1C2                		muls.w	d2,d0
   24240/   131D8 : E080                		asr.l	#8,d0
   24241/   131DA : D168 0012           		add.w	d0,$12(a0)	; make Sonic jump
   24242/   131DE : 08E8 0001 0022      		bset	#1,$22(a0)
   24243/   131E4 : 08A8 0005 0022      		bclr	#5,$22(a0)
   24244/   131EA : 588F                		addq.l	#4,sp
   24245/   131EC : 117C 0001 003C      		move.b	#1,$3C(a0)
   24246/   131F2 : 4228 0038           		clr.b	$38(a0)
   24247/   131F6 : 303C 00A0           		move.w	#$A0,d0
   24248/   131FA : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play jumping sound
   24249/   13200 : 117C 0013 0016      		move.b	#$13,$16(a0)
   24250/   13206 : 117C 0009 0017      		move.b	#9,$17(a0)
   24251/   1320C : 0828 0002 0022      		btst	#2,$22(a0)
   24252/   13212 : 661E                		bne.s	loc_13490
   24253/   13214 : 117C 000E 0016      		move.b	#$E,$16(a0)
   24254/   1321A : 117C 0007 0017      		move.b	#7,$17(a0)
   24255/   13220 : 117C 0002 001C      		move.b	#2,$1C(a0)	; use "jumping"	animation
   24256/   13226 : 08E8 0002 0022      		bset	#2,$22(a0)
   24257/   1322C : 5A68 000C           		addq.w	#5,$C(a0)
   24258/   13230 :                     
   24259/   13230 :                     locret_1348E:
   24260/   13230 : 4E75                		rts	
   24261/   13232 :                     ; ===========================================================================
   24262/   13232 :                     
   24263/   13232 :                     loc_13490:
   24264/   13232 : 08E8 0004 0022      		bset	#4,$22(a0)
   24265/   13238 : 4E75                		rts	
   24266/   1323A :                     ; End of function Sonic_Jump
   24267/   1323A :                     
   24268/   1323A :                     
   24269/   1323A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   24270/   1323A :                     
   24271/   1323A :                     
   24272/   1323A :                     Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
   24273/   1323A : 4A28 003C           		tst.b	$3C(a0)
   24274/   1323E : 6726                		beq.s	loc_134C4
   24275/   13240 : 323C FC00           		move.w	#-$400,d1
   24276/   13244 : 0828 0006 0022      		btst	#6,$22(a0)
   24277/   1324A : 6704                		beq.s	loc_134AE
   24278/   1324C : 323C FE00           		move.w	#-$200,d1
   24279/   13250 :                     
   24280/   13250 :                     loc_134AE:
   24281/   13250 : B268 0012           		cmp.w	$12(a0),d1
   24282/   13254 : 6F0E                		ble.s	locret_134C2
   24283/   13256 : 1038 F602           		move.b	($FFFFF602).w,d0
   24284/   1325A : 0200 0070           		andi.b	#$70,d0		; is A,	B or C pressed?
   24285/   1325E : 6604                		bne.s	locret_134C2	; if yes, branch
   24286/   13260 : 3141 0012           		move.w	d1,$12(a0)
   24287/   13264 :                     
   24288/   13264 :                     locret_134C2:
   24289/   13264 : 4E75                		rts	
   24290/   13266 :                     ; ===========================================================================
   24291/   13266 :                     
   24292/   13266 :                     loc_134C4:
   24293/   13266 : 0C68 F040 0012      		cmpi.w	#-$FC0,$12(a0)
   24294/   1326C : 6C06                		bge.s	locret_134D2
   24295/   1326E : 317C F040 0012      		move.w	#-$FC0,$12(a0)
   24296/   13274 :                     
   24297/   13274 :                     locret_134D2:
   24298/   13274 : 4E75                		rts	
   24299/   13276 :                     ; End of function Sonic_JumpHeight
   24300/   13276 :                     
   24301/   13276 :                     ; ---------------------------------------------------------------------------
   24302/   13276 :                     ; Subroutine to	slow Sonic walking up a	slope
   24303/   13276 :                     ; ---------------------------------------------------------------------------
   24304/   13276 :                     
   24305/   13276 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   24306/   13276 :                     
   24307/   13276 :                     
   24308/   13276 :                     Sonic_SlopeResist:			; XREF: Obj01_MdNormal
   24309/   13276 : 1028 0026           		move.b	$26(a0),d0
   24310/   1327A : 0600 0060           		addi.b	#$60,d0
   24311/   1327E : 0C00 00C0           		cmpi.b	#$C0,d0
   24312/   13282 : 6426                		bcc.s	locret_13508
   24313/   13284 : 1028 0026           		move.b	$26(a0),d0
   24314/   13288 : 4EB9 0000 27C0      		jsr	(CalcSine).l
   24315/   1328E : C1FC 0020           		muls.w	#$20,d0
   24316/   13292 : E080                		asr.l	#8,d0
   24317/   13294 : 4A68 0014           		tst.w	$14(a0)
   24318/   13298 : 6710                		beq.s	locret_13508
   24319/   1329A : 6B0A                		bmi.s	loc_13504
   24320/   1329C : 4A40                		tst.w	d0
   24321/   1329E : 6704                		beq.s	locret_13502
   24322/   132A0 : D168 0014           		add.w	d0,$14(a0)	; change Sonic's inertia
   24323/   132A4 :                     
   24324/   132A4 :                     locret_13502:
   24325/   132A4 : 4E75                		rts	
   24326/   132A6 :                     ; ===========================================================================
   24327/   132A6 :                     
   24328/   132A6 :                     loc_13504:
   24329/   132A6 : D168 0014           		add.w	d0,$14(a0)
   24330/   132AA :                     
   24331/   132AA :                     locret_13508:
   24332/   132AA : 4E75                		rts	
   24333/   132AC :                     ; End of function Sonic_SlopeResist
   24334/   132AC :                     
   24335/   132AC :                     ; ---------------------------------------------------------------------------
   24336/   132AC :                     ; Subroutine to	push Sonic down	a slope	while he's rolling
   24337/   132AC :                     ; ---------------------------------------------------------------------------
   24338/   132AC :                     
   24339/   132AC :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   24340/   132AC :                     
   24341/   132AC :                     
   24342/   132AC :                     Sonic_RollRepel:			; XREF: Obj01_MdRoll
   24343/   132AC : 1028 0026           		move.b	$26(a0),d0
   24344/   132B0 : 0600 0060           		addi.b	#$60,d0
   24345/   132B4 : 0C00 00C0           		cmpi.b	#-$40,d0
   24346/   132B8 : 642C                		bcc.s	locret_13544
   24347/   132BA : 1028 0026           		move.b	$26(a0),d0
   24348/   132BE : 4EB9 0000 27C0      		jsr	(CalcSine).l
   24349/   132C4 : C1FC 0050           		muls.w	#$50,d0
   24350/   132C8 : E080                		asr.l	#8,d0
   24351/   132CA : 4A68 0014           		tst.w	$14(a0)
   24352/   132CE : 6B0C                		bmi.s	loc_1353A
   24353/   132D0 : 4A40                		tst.w	d0
   24354/   132D2 : 6A02                		bpl.s	loc_13534
   24355/   132D4 : E480                		asr.l	#2,d0
   24356/   132D6 :                     
   24357/   132D6 :                     loc_13534:
   24358/   132D6 : D168 0014           		add.w	d0,$14(a0)
   24359/   132DA : 4E75                		rts	
   24360/   132DC :                     ; ===========================================================================
   24361/   132DC :                     
   24362/   132DC :                     loc_1353A:
   24363/   132DC : 4A40                		tst.w	d0
   24364/   132DE : 6B02                		bmi.s	loc_13540
   24365/   132E0 : E480                		asr.l	#2,d0
   24366/   132E2 :                     
   24367/   132E2 :                     loc_13540:
   24368/   132E2 : D168 0014           		add.w	d0,$14(a0)
   24369/   132E6 :                     
   24370/   132E6 :                     locret_13544:
   24371/   132E6 : 4E75                		rts	
   24372/   132E8 :                     ; End of function Sonic_RollRepel
   24373/   132E8 :                     
   24374/   132E8 :                     ; ---------------------------------------------------------------------------
   24375/   132E8 :                     ; Subroutine to	push Sonic down	a slope
   24376/   132E8 :                     ; ---------------------------------------------------------------------------
   24377/   132E8 :                     
   24378/   132E8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   24379/   132E8 :                     
   24380/   132E8 :                     
   24381/   132E8 :                     Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
   24382/   132E8 : 4E71                		nop	
   24383/   132EA : 4A28 0038           		tst.b	$38(a0)
   24384/   132EE : 6632                		bne.s	locret_13580
   24385/   132F0 : 4A68 003E           		tst.w	$3E(a0)
   24386/   132F4 : 662E                		bne.s	loc_13582
   24387/   132F6 : 1028 0026           		move.b	$26(a0),d0
   24388/   132FA : 0600 0020           		addi.b	#$20,d0
   24389/   132FE : 0200 00C0           		andi.b	#$C0,d0
   24390/   13302 : 671E                		beq.s	locret_13580
   24391/   13304 : 3028 0014           		move.w	$14(a0),d0
   24392/   13308 : 6A02                		bpl.s	loc_1356A
   24393/   1330A : 4440                		neg.w	d0
   24394/   1330C :                     
   24395/   1330C :                     loc_1356A:
   24396/   1330C : 0C40 0280           		cmpi.w	#$280,d0
   24397/   13310 : 6410                		bcc.s	locret_13580
   24398/   13312 : 4268 0014           		clr.w	$14(a0)
   24399/   13316 : 08E8 0001 0022      		bset	#1,$22(a0)
   24400/   1331C : 317C 001E 003E      		move.w	#$1E,$3E(a0)
   24401/   13322 :                     
   24402/   13322 :                     locret_13580:
   24403/   13322 : 4E75                		rts	
   24404/   13324 :                     ; ===========================================================================
   24405/   13324 :                     
   24406/   13324 :                     loc_13582:
   24407/   13324 : 5368 003E           		subq.w	#1,$3E(a0)
   24408/   13328 : 4E75                		rts	
   24409/   1332A :                     ; End of function Sonic_SlopeRepel
   24410/   1332A :                     
   24411/   1332A :                     ; ---------------------------------------------------------------------------
   24412/   1332A :                     ; Subroutine to	return Sonic's angle to 0 as he jumps
   24413/   1332A :                     ; ---------------------------------------------------------------------------
   24414/   1332A :                     
   24415/   1332A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   24416/   1332A :                     
   24417/   1332A :                     
   24418/   1332A :                     Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
   24419/   1332A : 1028 0026           		move.b	$26(a0),d0	; get Sonic's angle
   24420/   1332E : 6714                		beq.s	locret_135A2	; if already 0,	branch
   24421/   13330 : 6A08                		bpl.s	loc_13598	; if higher than 0, branch
   24422/   13332 :                     
   24423/   13332 : 5400                		addq.b	#2,d0		; increase angle
   24424/   13334 : 6402                		bcc.s	loc_13596
   24425/   13336 : 7000                		moveq	#0,d0
   24426/   13338 :                     
   24427/   13338 :                     loc_13596:
   24428/   13338 : 6006                		bra.s	loc_1359E
   24429/   1333A :                     ; ===========================================================================
   24430/   1333A :                     
   24431/   1333A :                     loc_13598:
   24432/   1333A : 5500                		subq.b	#2,d0		; decrease angle
   24433/   1333C : 6402                		bcc.s	loc_1359E
   24434/   1333E : 7000                		moveq	#0,d0
   24435/   13340 :                     
   24436/   13340 :                     loc_1359E:
   24437/   13340 : 1140 0026           		move.b	d0,$26(a0)
   24438/   13344 :                     
   24439/   13344 :                     locret_135A2:
   24440/   13344 : 4E75                		rts	
   24441/   13346 :                     ; End of function Sonic_JumpAngle
   24442/   13346 :                     
   24443/   13346 :                     ; ---------------------------------------------------------------------------
   24444/   13346 :                     ; Subroutine for Sonic to interact with	the floor after	jumping/falling
   24445/   13346 :                     ; ---------------------------------------------------------------------------
   24446/   13346 :                     
   24447/   13346 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   24448/   13346 :                     
   24449/   13346 :                     
   24450/   13346 :                     Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
   24451/   13346 : 3228 0010           		move.w	$10(a0),d1
   24452/   1334A : 3428 0012           		move.w	$12(a0),d2
   24453/   1334E : 4EB9 0000 2A8E      		jsr	(CalcAngle).l
   24454/   13354 : 11C0 FFEC           		move.b	d0,($FFFFFFEC).w
   24455/   13358 : 0400 0020           		subi.b	#$20,d0
   24456/   1335C : 11C0 FFED           		move.b	d0,($FFFFFFED).w
   24457/   13360 : 0200 00C0           		andi.b	#$C0,d0
   24458/   13364 : 11C0 FFEE           		move.b	d0,($FFFFFFEE).w
   24459/   13368 : 0C00 0040           		cmpi.b	#$40,d0
   24460/   1336C : 6700 00B4           		beq.w	loc_13680
   24461/   13370 : 0C00 0080           		cmpi.b	#$80,d0
   24462/   13374 : 6700 010E           		beq.w	loc_136E2
   24463/   13378 : 0C00 00C0           		cmpi.b	#-$40,d0
   24464/   1337C : 6700 0162           		beq.w	loc_1373E
   24465/   13380 : 6100 1AB0           		bsr.w	Sonic_HitWall
   24466/   13384 : 4A41                		tst.w	d1
   24467/   13386 : 6A0A                		bpl.s	loc_135F0
   24468/   13388 : 9368 0008           		sub.w	d1,8(a0)
   24469/   1338C : 317C 0000 0010      		move.w	#0,$10(a0)
   24470/   13392 :                     
   24471/   13392 :                     loc_135F0:
   24472/   13392 : 6100 1910           		bsr.w	sub_14EB4
   24473/   13396 : 4A41                		tst.w	d1
   24474/   13398 : 6A0A                		bpl.s	loc_13602
   24475/   1339A : D368 0008           		add.w	d1,8(a0)
   24476/   1339E : 317C 0000 0010      		move.w	#0,$10(a0)
   24477/   133A4 :                     
   24478/   133A4 :                     loc_13602:
   24479/   133A4 : 6100 17BA           		bsr.w	Sonic_HitFloor
   24480/   133A8 : 11C1 FFEF           		move.b	d1,($FFFFFFEF).w
   24481/   133AC : 4A41                		tst.w	d1
   24482/   133AE : 6A70                		bpl.s	locret_1367E
   24483/   133B0 : 1428 0012           		move.b	$12(a0),d2
   24484/   133B4 : 5002                		addq.b	#8,d2
   24485/   133B6 : 4402                		neg.b	d2
   24486/   133B8 : B202                		cmp.b	d2,d1
   24487/   133BA : 6C04                		bge.s	loc_1361E
   24488/   133BC : B002                		cmp.b	d2,d0
   24489/   133BE : 6D60                		blt.s	locret_1367E
   24490/   133C0 :                     
   24491/   133C0 :                     loc_1361E:
   24492/   133C0 : D368 000C           		add.w	d1,$C(a0)
   24493/   133C4 : 1143 0026           		move.b	d3,$26(a0)
   24494/   133C8 : 6100 0178           		bsr.w	Sonic_ResetOnFloor
   24495/   133CC : 117C 0000 001C      		move.b	#0,$1C(a0)
   24496/   133D2 : 1003                		move.b	d3,d0
   24497/   133D4 : 0600 0020           		addi.b	#$20,d0
   24498/   133D8 : 0200 0040           		andi.b	#$40,d0
   24499/   133DC : 6620                		bne.s	loc_1365C
   24500/   133DE : 1003                		move.b	d3,d0
   24501/   133E0 : 0600 0010           		addi.b	#$10,d0
   24502/   133E4 : 0200 0020           		andi.b	#$20,d0
   24503/   133E8 : 6706                		beq.s	loc_1364E
   24504/   133EA : E0E8 0012           		asr	$12(a0)
   24505/   133EE : 6022                		bra.s	loc_13670
   24506/   133F0 :                     ; ===========================================================================
   24507/   133F0 :                     
   24508/   133F0 :                     loc_1364E:
   24509/   133F0 : 317C 0000 0012      		move.w	#0,$12(a0)
   24510/   133F6 : 3168 0010 0014      		move.w	$10(a0),$14(a0)
   24511/   133FC : 4E75                		rts	
   24512/   133FE :                     ; ===========================================================================
   24513/   133FE :                     
   24514/   133FE :                     loc_1365C:
   24515/   133FE : 317C 0000 0010      		move.w	#0,$10(a0)
   24516/   13404 : 0C68 0FC0 0012      		cmpi.w	#$FC0,$12(a0)
   24517/   1340A : 6F06                		ble.s	loc_13670
   24518/   1340C : 317C 0FC0 0012      		move.w	#$FC0,$12(a0)
   24519/   13412 :                     
   24520/   13412 :                     loc_13670:
   24521/   13412 : 3168 0012 0014      		move.w	$12(a0),$14(a0)
   24522/   13418 : 4A03                		tst.b	d3
   24523/   1341A : 6A04                		bpl.s	locret_1367E
   24524/   1341C : 4468 0014           		neg.w	$14(a0)
   24525/   13420 :                     
   24526/   13420 :                     locret_1367E:
   24527/   13420 : 4E75                		rts	
   24528/   13422 :                     ; ===========================================================================
   24529/   13422 :                     
   24530/   13422 :                     loc_13680:
   24531/   13422 : 6100 1A0E           		bsr.w	Sonic_HitWall
   24532/   13426 : 4A41                		tst.w	d1
   24533/   13428 : 6A12                		bpl.s	loc_1369A
   24534/   1342A : 9368 0008           		sub.w	d1,8(a0)
   24535/   1342E : 317C 0000 0010      		move.w	#0,$10(a0)
   24536/   13434 : 3168 0012 0014      		move.w	$12(a0),$14(a0)
   24537/   1343A : 4E75                		rts	
   24538/   1343C :                     ; ===========================================================================
   24539/   1343C :                     
   24540/   1343C :                     loc_1369A:
   24541/   1343C : 6100 18BA           		bsr.w	Sonic_DontRunOnWalls
   24542/   13440 : 4A41                		tst.w	d1
   24543/   13442 : 6A12                		bpl.s	loc_136B4
   24544/   13444 : 9368 000C           		sub.w	d1,$C(a0)
   24545/   13448 : 4A68 0012           		tst.w	$12(a0)
   24546/   1344C : 6A06                		bpl.s	locret_136B2
   24547/   1344E : 317C 0000 0012      		move.w	#0,$12(a0)
   24548/   13454 :                     
   24549/   13454 :                     locret_136B2:
   24550/   13454 : 4E75                		rts	
   24551/   13456 :                     ; ===========================================================================
   24552/   13456 :                     
   24553/   13456 :                     loc_136B4:
   24554/   13456 : 4A68 0012           		tst.w	$12(a0)
   24555/   1345A : 6B26                		bmi.s	locret_136E0
   24556/   1345C : 6100 1702           		bsr.w	Sonic_HitFloor
   24557/   13460 : 4A41                		tst.w	d1
   24558/   13462 : 6A1E                		bpl.s	locret_136E0
   24559/   13464 : D368 000C           		add.w	d1,$C(a0)
   24560/   13468 : 1143 0026           		move.b	d3,$26(a0)
   24561/   1346C : 6100 00D4           		bsr.w	Sonic_ResetOnFloor
   24562/   13470 : 117C 0000 001C      		move.b	#0,$1C(a0)
   24563/   13476 : 317C 0000 0012      		move.w	#0,$12(a0)
   24564/   1347C : 3168 0010 0014      		move.w	$10(a0),$14(a0)
   24565/   13482 :                     
   24566/   13482 :                     locret_136E0:
   24567/   13482 : 4E75                		rts	
   24568/   13484 :                     ; ===========================================================================
   24569/   13484 :                     
   24570/   13484 :                     loc_136E2:
   24571/   13484 : 6100 19AC           		bsr.w	Sonic_HitWall
   24572/   13488 : 4A41                		tst.w	d1
   24573/   1348A : 6A0A                		bpl.s	loc_136F4
   24574/   1348C : 9368 0008           		sub.w	d1,8(a0)
   24575/   13490 : 317C 0000 0010      		move.w	#0,$10(a0)
   24576/   13496 :                     
   24577/   13496 :                     loc_136F4:
   24578/   13496 : 6100 180C           		bsr.w	sub_14EB4
   24579/   1349A : 4A41                		tst.w	d1
   24580/   1349C : 6A0A                		bpl.s	loc_13706
   24581/   1349E : D368 0008           		add.w	d1,8(a0)
   24582/   134A2 : 317C 0000 0010      		move.w	#0,$10(a0)
   24583/   134A8 :                     
   24584/   134A8 :                     loc_13706:
   24585/   134A8 : 6100 184E           		bsr.w	Sonic_DontRunOnWalls
   24586/   134AC : 4A41                		tst.w	d1
   24587/   134AE : 6A2E                		bpl.s	locret_1373C
   24588/   134B0 : 9368 000C           		sub.w	d1,$C(a0)
   24589/   134B4 : 1003                		move.b	d3,d0
   24590/   134B6 : 0600 0020           		addi.b	#$20,d0
   24591/   134BA : 0200 0040           		andi.b	#$40,d0
   24592/   134BE : 6608                		bne.s	loc_13726
   24593/   134C0 : 317C 0000 0012      		move.w	#0,$12(a0)
   24594/   134C6 : 4E75                		rts	
   24595/   134C8 :                     ; ===========================================================================
   24596/   134C8 :                     
   24597/   134C8 :                     loc_13726:
   24598/   134C8 : 1143 0026           		move.b	d3,$26(a0)
   24599/   134CC : 6100 0074           		bsr.w	Sonic_ResetOnFloor
   24600/   134D0 : 3168 0012 0014      		move.w	$12(a0),$14(a0)
   24601/   134D6 : 4A03                		tst.b	d3
   24602/   134D8 : 6A04                		bpl.s	locret_1373C
   24603/   134DA : 4468 0014           		neg.w	$14(a0)
   24604/   134DE :                     
   24605/   134DE :                     locret_1373C:
   24606/   134DE : 4E75                		rts	
   24607/   134E0 :                     ; ===========================================================================
   24608/   134E0 :                     
   24609/   134E0 :                     loc_1373E:
   24610/   134E0 : 6100 17C2           		bsr.w	sub_14EB4
   24611/   134E4 : 4A41                		tst.w	d1
   24612/   134E6 : 6A12                		bpl.s	loc_13758
   24613/   134E8 : D368 0008           		add.w	d1,8(a0)
   24614/   134EC : 317C 0000 0010      		move.w	#0,$10(a0)
   24615/   134F2 : 3168 0012 0014      		move.w	$12(a0),$14(a0)
   24616/   134F8 : 4E75                		rts	
   24617/   134FA :                     ; ===========================================================================
   24618/   134FA :                     
   24619/   134FA :                     loc_13758:
   24620/   134FA : 6100 17FC           		bsr.w	Sonic_DontRunOnWalls
   24621/   134FE : 4A41                		tst.w	d1
   24622/   13500 : 6A12                		bpl.s	loc_13772
   24623/   13502 : 9368 000C           		sub.w	d1,$C(a0)
   24624/   13506 : 4A68 0012           		tst.w	$12(a0)
   24625/   1350A : 6A06                		bpl.s	locret_13770
   24626/   1350C : 317C 0000 0012      		move.w	#0,$12(a0)
   24627/   13512 :                     
   24628/   13512 :                     locret_13770:
   24629/   13512 : 4E75                		rts	
   24630/   13514 :                     ; ===========================================================================
   24631/   13514 :                     
   24632/   13514 :                     loc_13772:
   24633/   13514 : 4A68 0012           		tst.w	$12(a0)
   24634/   13518 : 6B26                		bmi.s	locret_1379E
   24635/   1351A : 6100 1644           		bsr.w	Sonic_HitFloor
   24636/   1351E : 4A41                		tst.w	d1
   24637/   13520 : 6A1E                		bpl.s	locret_1379E
   24638/   13522 : D368 000C           		add.w	d1,$C(a0)
   24639/   13526 : 1143 0026           		move.b	d3,$26(a0)
   24640/   1352A : 6100 0016           		bsr.w	Sonic_ResetOnFloor
   24641/   1352E : 117C 0000 001C      		move.b	#0,$1C(a0)
   24642/   13534 : 317C 0000 0012      		move.w	#0,$12(a0)
   24643/   1353A : 3168 0010 0014      		move.w	$10(a0),$14(a0)
   24644/   13540 :                     
   24645/   13540 :                     locret_1379E:
   24646/   13540 : 4E75                		rts	
   24647/   13542 :                     ; End of function Sonic_Floor
   24648/   13542 :                     
   24649/   13542 :                     ; ---------------------------------------------------------------------------
   24650/   13542 :                     ; Subroutine to	reset Sonic's mode when he lands on the floor
   24651/   13542 :                     ; ---------------------------------------------------------------------------
   24652/   13542 :                     
   24653/   13542 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   24654/   13542 :                     
   24655/   13542 :                     
   24656/   13542 :                     Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
   24657/   13542 : 0828 0004 0022      		btst	#4,$22(a0)
   24658/   13548 : 6706                		beq.s	loc_137AE
   24659/   1354A : 4E71                		nop	
   24660/   1354C : 4E71                		nop	
   24661/   1354E : 4E71                		nop	
   24662/   13550 :                     
   24663/   13550 :                     loc_137AE:
   24664/   13550 : 08A8 0005 0022      		bclr	#5,$22(a0)
   24665/   13556 : 08A8 0001 0022      		bclr	#1,$22(a0)
   24666/   1355C : 08A8 0004 0022      		bclr	#4,$22(a0)
   24667/   13562 : 0828 0002 0022      		btst	#2,$22(a0)
   24668/   13568 : 671C                		beq.s	loc_137E4
   24669/   1356A : 08A8 0002 0022      		bclr	#2,$22(a0)
   24670/   13570 : 117C 0013 0016      		move.b	#$13,$16(a0)
   24671/   13576 : 117C 0009 0017      		move.b	#9,$17(a0)
   24672/   1357C : 117C 0000 001C      		move.b	#0,$1C(a0)	; use running/walking animation
   24673/   13582 : 5B68 000C           		subq.w	#5,$C(a0)
   24674/   13586 :                     
   24675/   13586 :                     loc_137E4:
   24676/   13586 : 117C 0000 003C      		move.b	#0,$3C(a0)
   24677/   1358C : 31FC 0000 F7D0      		move.w	#0,($FFFFF7D0).w
   24678/   13592 : 4E75                		rts	
   24679/   13594 :                     ; End of function Sonic_ResetOnFloor
   24680/   13594 :                     
   24681/   13594 :                     ; ===========================================================================
   24682/   13594 :                     ; ---------------------------------------------------------------------------
   24683/   13594 :                     ; Sonic	when he	gets hurt
   24684/   13594 :                     ; ---------------------------------------------------------------------------
   24685/   13594 :                     
   24686/   13594 :                     Obj01_Hurt:				; XREF: Obj01_Index
   24687/   13594 : 4EB9 0000 D3AC      		jsr	SpeedToPos
   24688/   1359A : 0668 0030 0012      		addi.w	#$30,$12(a0)
   24689/   135A0 : 0828 0006 0022      		btst	#6,$22(a0)
   24690/   135A6 : 6706                		beq.s	loc_1380C
   24691/   135A8 : 0468 0020 0012      		subi.w	#$20,$12(a0)
   24692/   135AE :                     
   24693/   135AE :                     loc_1380C:
   24694/   135AE : 6100 0018           		bsr.w	Sonic_HurtStop
   24695/   135B2 : 6100 FAF2           		bsr.w	Sonic_LevelBound
   24696/   135B6 : 6100 F548           		bsr.w	Sonic_RecordPos
   24697/   135BA : 6100 01C8           		bsr.w	Sonic_Animate
   24698/   135BE : 6100 043E           		bsr.w	LoadSonicDynPLC
   24699/   135C2 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   24700/   135C8 :                     
   24701/   135C8 :                     ; ---------------------------------------------------------------------------
   24702/   135C8 :                     ; Subroutine to	stop Sonic falling after he's been hurt
   24703/   135C8 :                     ; ---------------------------------------------------------------------------
   24704/   135C8 :                     
   24705/   135C8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   24706/   135C8 :                     
   24707/   135C8 :                     
   24708/   135C8 :                     Sonic_HurtStop:				; XREF: Obj01_Hurt
   24709/   135C8 : 3038 F72E           		move.w	($FFFFF72E).w,d0
   24710/   135CC : 0640 00E0           		addi.w	#$E0,d0
   24711/   135D0 : B068 000C           		cmp.w	$C(a0),d0
   24712/   135D4 : 6500 788A           		bcs.w	KillSonic
   24713/   135D8 : 6100 FD6C           		bsr.w	Sonic_Floor
   24714/   135DC : 0828 0001 0022      		btst	#1,$22(a0)
   24715/   135E2 : 661E                		bne.s	locret_13860
   24716/   135E4 : 7000                		moveq	#0,d0
   24717/   135E6 : 3140 0012           		move.w	d0,$12(a0)
   24718/   135EA : 3140 0010           		move.w	d0,$10(a0)
   24719/   135EE : 3140 0014           		move.w	d0,$14(a0)
   24720/   135F2 : 117C 0000 001C      		move.b	#0,$1C(a0)
   24721/   135F8 : 5528 0024           		subq.b	#2,$24(a0)
   24722/   135FC : 317C 0078 0030      		move.w	#$78,$30(a0)
   24723/   13602 :                     
   24724/   13602 :                     locret_13860:
   24725/   13602 : 4E75                		rts	
   24726/   13604 :                     ; End of function Sonic_HurtStop
   24727/   13604 :                     
   24728/   13604 :                     ; ===========================================================================
   24729/   13604 :                     ; ---------------------------------------------------------------------------
   24730/   13604 :                     ; Sonic	when he	dies
   24731/   13604 :                     ; ---------------------------------------------------------------------------
   24732/   13604 :                     
   24733/   13604 :                     Obj01_Death:				; XREF: Obj01_Index
   24734/   13604 : 6100 001A           		bsr.w	GameOver
   24735/   13608 : 4EB9 0000 D380      		jsr	ObjectFall
   24736/   1360E : 6100 F4F0           		bsr.w	Sonic_RecordPos
   24737/   13612 : 6100 0170           		bsr.w	Sonic_Animate
   24738/   13616 : 6100 03E6           		bsr.w	LoadSonicDynPLC
   24739/   1361A : 4EF9 0000 D3D2      		jmp	DisplaySprite
   24740/   13620 :                     
   24741/   13620 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   24742/   13620 :                     
   24743/   13620 :                     
   24744/   13620 :                     GameOver:				; XREF: Obj01_Death
   24745/   13620 : 3038 F72E           		move.w	($FFFFF72E).w,d0
   24746/   13624 : 0640 0100           		addi.w	#$100,d0
   24747/   13628 : B068 000C           		cmp.w	$C(a0),d0
   24748/   1362C : 6400 0074           		bcc.w	locret_13900
   24749/   13630 : 317C FFC8 0012      		move.w	#-$38,$12(a0)
   24750/   13636 : 5428 0024           		addq.b	#2,$24(a0)
   24751/   1363A : 4238 FE1E           		clr.b	($FFFFFE1E).w	; stop time counter
   24752/   1363E : 5238 FE1C           		addq.b	#1,($FFFFFE1C).w ; update lives	counter
   24753/   13642 : 5338 FE12           		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
   24754/   13646 : 662E                		bne.s	loc_138D4
   24755/   13648 : 317C 0000 003A      		move.w	#0,$3A(a0)
   24756/   1364E : 11FC 0039 D080      		move.b	#$39,($FFFFD080).w ; load GAME object
   24757/   13654 : 11FC 0039 D0C0      		move.b	#$39,($FFFFD0C0).w ; load OVER object
   24758/   1365A : 11FC 0001 D0DA      		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
   24759/   13660 : 4238 FE1A           		clr.b	($FFFFFE1A).w
   24760/   13664 :                     
   24761/   13664 :                     loc_138C2:
   24762/   13664 : 303C 008F           		move.w	#$8F,d0
   24763/   13668 : 4EB9 0000 117C      		jsr	(PlaySound).l	; play game over music
   24764/   1366E : 7003                		moveq	#3,d0
   24765/   13670 : 4EF9 0000 1366      		jmp	(LoadPLC).l	; load game over patterns
   24766/   13676 :                     ; ===========================================================================
   24767/   13676 :                     
   24768/   13676 :                     loc_138D4:
   24769/   13676 : 317C 003C 003A      		move.w	#60,$3A(a0)	; set time delay to 1 second
   24770/   1367C : 4A38 FE1A           		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
   24771/   13680 : 6720                		beq.s	locret_13900	; if not, branch
   24772/   13682 : 317C 0000 003A      		move.w	#0,$3A(a0)
   24773/   13688 : 11FC 0039 D080      		move.b	#$39,($FFFFD080).w ; load TIME object
   24774/   1368E : 11FC 0039 D0C0      		move.b	#$39,($FFFFD0C0).w ; load OVER object
   24775/   13694 : 11FC 0002 D09A      		move.b	#2,($FFFFD09A).w
   24776/   1369A : 11FC 0003 D0DA      		move.b	#3,($FFFFD0DA).w
   24777/   136A0 : 60C2                		bra.s	loc_138C2
   24778/   136A2 :                     ; ===========================================================================
   24779/   136A2 :                     
   24780/   136A2 :                     locret_13900:
   24781/   136A2 : 4E75                		rts	
   24782/   136A4 :                     ; End of function GameOver
   24783/   136A4 :                     
   24784/   136A4 :                     ; ===========================================================================
   24785/   136A4 :                     ; ---------------------------------------------------------------------------
   24786/   136A4 :                     ; Sonic	when the level is restarted
   24787/   136A4 :                     ; ---------------------------------------------------------------------------
   24788/   136A4 :                     
   24789/   136A4 :                     Obj01_ResetLevel:			; XREF: Obj01_Index
   24790/   136A4 : 4A68 003A           		tst.w	$3A(a0)
   24791/   136A8 : 670C                		beq.s	locret_13914
   24792/   136AA : 5368 003A           		subq.w	#1,$3A(a0)	; subtract 1 from time delay
   24793/   136AE : 6606                		bne.s	locret_13914
   24794/   136B0 : 31FC 0001 FE02      		move.w	#1,($FFFFFE02).w ; restart the level
   24795/   136B6 :                     
   24796/   136B6 :                     locret_13914:
   24797/   136B6 : 4E75                		rts	
   24798/   136B8 :                     
   24799/   136B8 :                     ; ---------------------------------------------------------------------------
   24800/   136B8 :                     ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
   24801/   136B8 :                     ; ---------------------------------------------------------------------------
   24802/   136B8 :                     
   24803/   136B8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   24804/   136B8 :                     
   24805/   136B8 :                     
   24806/   136B8 :                     Sonic_Loops:				; XREF: Obj01_Control
   24807/   136B8 :                     	;	cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?	; MJ: Commented out, we don't want SLZ having any rolling chunks =P
   24808/   136B8 :                     	;	beq.s	loc_13926	; if yes, branch
   24809/   136B8 : 4A38 FE10           		tst.b	($FFFFFE10).w	; is level GHZ ?
   24810/   136BC : 6600 00C4           		bne.w	locret_139C2	; if not, branch
   24811/   136C0 :                     
   24812/   136C0 :                     loc_13926:
   24813/   136C0 : 3028 000C           		move.w	$0C(a0),d0				; MJ: Load Y position
   24814/   136C4 : 3228 0008           		move.w	$08(a0),d1				; MJ: Load X position
   24815/   136C8 : C07C 0780           		and.w	#$0780,d0				; MJ: keep Y position within 800 pixels (in multiples of 80)
   24816/   136CC : E348                		lsl.w	#$01,d0					; MJ: multiply by 2 (Because every 80 bytes switch from FG to BG..)
   24817/   136CE : EE49                		lsr.w	#$07,d1					; MJ: divide X position by 80 (00 = 0, 80 = 1, etc)
   24818/   136D0 : C23C 007F           		and.b	#$7F,d1					; MJ: keep within 4000 pixels (4000 / 80 = 80)
   24819/   136D4 : D041                		add.w	d1,d0					; MJ: add together
   24820/   136D6 : 2278 A400           		movea.l	($FFFFA400).w,a1			; MJ: Load address of layout
   24821/   136DA : 1231 0000           		move.b	(a1,d0.w),d1				; MJ: collect correct 128x128 chunk ID based on the position of Sonic
   24822/   136DE :                     
   24823/   136DE : B23C 0075           		cmp.b	#$75,d1					; MJ: is the chunk 75 (Top top left S Bend)
   24824/   136E2 : 6700 FA6A           		beq.w	Obj01_ChkRoll				; MJ: if so, branch
   24825/   136E6 : B23C 0076           		cmp.b	#$76,d1					; MJ: is the chunk 76 (Top top right S Bend)
   24826/   136EA : 6700 FA62           		beq.w	Obj01_ChkRoll				; MJ: if so, branch
   24827/   136EE : B23C 0077           		cmp.b	#$77,d1					; MJ: is the chunk 77 (Top bottom left S Bend)
   24828/   136F2 : 6700 FA5A           		beq.w	Obj01_ChkRoll				; MJ: if so, branch
   24829/   136F6 : B23C 0078           		cmp.b	#$78,d1					; MJ: is the chunk 78 (Top bottom right S Bend)
   24830/   136FA : 6700 FA52           		beq.w	Obj01_ChkRoll				; MJ: if so, branch
   24831/   136FE : B23C 0079           		cmp.b	#$79,d1					; MJ: is the chunk 79 (Bottom top left S Bend)
   24832/   13702 : 6700 FA4A           		beq.w	Obj01_ChkRoll				; MJ: if so, branch
   24833/   13706 : B23C 007A           		cmp.b	#$7A,d1					; MJ: is the chunk 7A (Bottom top right S Bend)
   24834/   1370A : 6700 FA42           		beq.w	Obj01_ChkRoll				; MJ: if so, branch
   24835/   1370E : B23C 007B           		cmp.b	#$7B,d1					; MJ: is the chunk 7B (Bottom bottom left S Bend)
   24836/   13712 : 6700 FA3A           		beq.w	Obj01_ChkRoll				; MJ: if so, branch
   24837/   13716 : B23C 007C           		cmp.b	#$7C,d1					; MJ: is the chunk 7C (Bottom bottom right S Bend)
   24838/   1371A : 6700 FA32           		beq.w	Obj01_ChkRoll				; MJ: if so, branch
   24839/   1371E :                     
   24840/   1371E :                     	;	cmp.b	($FFFFF7AE).w,d1			; MJ: this shit is commented out as it's used for loops (Which will be delt with by pathswappers)
   24841/   1371E :                     	;	beq.w	Obj01_ChkRoll
   24842/   1371E :                     	;	cmp.b	($FFFFF7AF).w,d1
   24843/   1371E :                     	;	beq.w	Obj01_ChkRoll
   24844/   1371E :                     	;	cmp.b	($FFFFF7AC).w,d1
   24845/   1371E :                     	;	beq.s	loc_13976
   24846/   1371E :                     	;	cmp.b	($FFFFF7AD).w,d1
   24847/   1371E :                     	;	beq.s	loc_13966
   24848/   1371E : 08A8 0006 0001      		bclr	#6,1(a0)
   24849/   13724 : 4E75                		rts	
   24850/   13726 :                     ; ===========================================================================
   24851/   13726 :                     
   24852/   13726 :                     loc_13966:
   24853/   13726 : 0828 0001 0022      		btst	#1,$22(a0)
   24854/   1372C : 6708                		beq.s	loc_13976
   24855/   1372E : 08A8 0006 0001      		bclr	#6,1(a0)	; send Sonic to	high plane
   24856/   13734 : 4E75                		rts	
   24857/   13736 :                     ; ===========================================================================
   24858/   13736 :                     
   24859/   13736 :                     loc_13976:
   24860/   13736 : 3428 0008           		move.w	8(a0),d2
   24861/   1373A : 0C02 002C           		cmpi.b	#$2C,d2
   24862/   1373E : 6408                		bcc.s	loc_13988
   24863/   13740 : 08A8 0006 0001      		bclr	#6,1(a0)	; send Sonic to	high plane
   24864/   13746 : 4E75                		rts	
   24865/   13748 :                     ; ===========================================================================
   24866/   13748 :                     
   24867/   13748 :                     loc_13988:
   24868/   13748 : 0C02 00E0           		cmpi.b	#-$20,d2
   24869/   1374C : 6508                		bcs.s	loc_13996
   24870/   1374E : 08E8 0006 0001      		bset	#6,1(a0)	; send Sonic to	low plane
   24871/   13754 : 4E75                		rts	
   24872/   13756 :                     ; ===========================================================================
   24873/   13756 :                     
   24874/   13756 :                     loc_13996:
   24875/   13756 : 0828 0006 0001      		btst	#6,1(a0)
   24876/   1375C : 6614                		bne.s	loc_139B2
   24877/   1375E : 1228 0026           		move.b	$26(a0),d1
   24878/   13762 : 671E                		beq.s	locret_139C2
   24879/   13764 : 0C01 0080           		cmpi.b	#-$80,d1
   24880/   13768 : 6218                		bhi.s	locret_139C2
   24881/   1376A : 08E8 0006 0001      		bset	#6,1(a0)	; send Sonic to	low plane
   24882/   13770 : 4E75                		rts	
   24883/   13772 :                     ; ===========================================================================
   24884/   13772 :                     
   24885/   13772 :                     loc_139B2:
   24886/   13772 : 1228 0026           		move.b	$26(a0),d1
   24887/   13776 : 0C01 0080           		cmpi.b	#-$80,d1
   24888/   1377A : 6306                		bls.s	locret_139C2
   24889/   1377C : 08A8 0006 0001      		bclr	#6,1(a0)	; send Sonic to	high plane
   24890/   13782 :                     
   24891/   13782 :                     locret_139C2:
   24892/   13782 : 4E75                		rts	
   24893/   13784 :                     ; End of function Sonic_Loops
   24894/   13784 :                     
   24895/   13784 :                     ; ---------------------------------------------------------------------------
   24896/   13784 :                     ; Subroutine to	animate	Sonic's sprites
   24897/   13784 :                     ; ---------------------------------------------------------------------------
   24898/   13784 :                     
   24899/   13784 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   24900/   13784 :                     
   24901/   13784 :                     
   24902/   13784 :                     Sonic_Animate:				; XREF: Obj01_Control; et al
   24903/   13784 : 43F9 0001 3908      		lea	(SonicAniData).l,a1
   24904/   1378A : 7000                		moveq	#0,d0
   24905/   1378C : 1028 001C           		move.b	$1C(a0),d0
   24906/   13790 : B028 001D           		cmp.b	$1D(a0),d0	; is animation set to restart?
   24907/   13794 : 6710                		beq.s	SAnim_Do	; if not, branch
   24908/   13796 : 1140 001D           		move.b	d0,$1D(a0)	; set to "no restart"
   24909/   1379A : 117C 0000 001B      		move.b	#0,$1B(a0)	; reset	animation
   24910/   137A0 : 117C 0000 001E      		move.b	#0,$1E(a0)	; reset	frame duration
   24911/   137A6 :                     
   24912/   137A6 :                     SAnim_Do:
   24913/   137A6 : D040                		add.w	d0,d0
   24914/   137A8 : D2F1 0000           		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
   24915/   137AC : 1011                		move.b	(a1),d0
   24916/   137AE : 6B62                		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
   24917/   137B0 : 1228 0022           		move.b	$22(a0),d1
   24918/   137B4 : 0201 0001           		andi.b	#1,d1
   24919/   137B8 : 0228 00FC 0001      		andi.b	#$FC,1(a0)
   24920/   137BE : 8328 0001           		or.b	d1,1(a0)
   24921/   137C2 : 5328 001E           		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
   24922/   137C6 : 6A18                		bpl.s	SAnim_Delay	; if time remains, branch
   24923/   137C8 : 1140 001E           		move.b	d0,$1E(a0)	; load frame duration
   24924/   137CC :                     
   24925/   137CC :                     SAnim_Do2:
   24926/   137CC : 7200                		moveq	#0,d1
   24927/   137CE : 1228 001B           		move.b	$1B(a0),d1	; load current frame number
   24928/   137D2 : 1031 1001           		move.b	1(a1,d1.w),d0	; read sprite number from script
   24929/   137D6 : 6B0A                		bmi.s	SAnim_End_FF	; if animation is complete, branch
   24930/   137D8 :                     
   24931/   137D8 :                     SAnim_Next:
   24932/   137D8 : 1140 001A           		move.b	d0,$1A(a0)	; load sprite number
   24933/   137DC : 5228 001B           		addq.b	#1,$1B(a0)	; next frame number
   24934/   137E0 :                     
   24935/   137E0 :                     SAnim_Delay:
   24936/   137E0 : 4E75                		rts	
   24937/   137E2 :                     ; ===========================================================================
   24938/   137E2 :                     
   24939/   137E2 :                     SAnim_End_FF:
   24940/   137E2 : 5200                		addq.b	#1,d0		; is the end flag = $FF	?
   24941/   137E4 : 660C                		bne.s	SAnim_End_FE	; if not, branch
   24942/   137E6 : 117C 0000 001B      		move.b	#0,$1B(a0)	; restart the animation
   24943/   137EC : 1029 0001           		move.b	1(a1),d0	; read sprite number
   24944/   137F0 : 60E6                		bra.s	SAnim_Next
   24945/   137F2 :                     ; ===========================================================================
   24946/   137F2 :                     
   24947/   137F2 :                     SAnim_End_FE:
   24948/   137F2 : 5200                		addq.b	#1,d0		; is the end flag = $FE	?
   24949/   137F4 : 6610                		bne.s	SAnim_End_FD	; if not, branch
   24950/   137F6 : 1031 1002           		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
   24951/   137FA : 9128 001B           		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
   24952/   137FE : 9200                		sub.b	d0,d1
   24953/   13800 : 1031 1001           		move.b	1(a1,d1.w),d0	; read sprite number
   24954/   13804 : 60D2                		bra.s	SAnim_Next
   24955/   13806 :                     ; ===========================================================================
   24956/   13806 :                     
   24957/   13806 :                     SAnim_End_FD:
   24958/   13806 : 5200                		addq.b	#1,d0		; is the end flag = $FD	?
   24959/   13808 : 6606                		bne.s	SAnim_End	; if not, branch
   24960/   1380A : 1171 1002 001C      		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
   24961/   13810 :                     
   24962/   13810 :                     SAnim_End:
   24963/   13810 : 4E75                		rts	
   24964/   13812 :                     ; ===========================================================================
   24965/   13812 :                     
   24966/   13812 :                     SAnim_WalkRun:				; XREF: SAnim_Do
   24967/   13812 : 5328 001E           		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
   24968/   13816 : 6AC8                		bpl.s	SAnim_Delay	; if time remains, branch
   24969/   13818 : 5200                		addq.b	#1,d0		; is animation walking/running?
   24970/   1381A : 6600 0076           		bne.w	SAnim_RollJump	; if not, branch
   24971/   1381E : 7200                		moveq	#0,d1
   24972/   13820 : 1028 0026           		move.b	$26(a0),d0	; get Sonic's angle
   24973/   13824 : 1428 0022           		move.b	$22(a0),d2
   24974/   13828 : 0202 0001           		andi.b	#1,d2		; is Sonic mirrored horizontally?
   24975/   1382C : 6602                		bne.s	loc_13A70	; if yes, branch
   24976/   1382E : 4600                		not.b	d0		; reverse angle
   24977/   13830 :                     
   24978/   13830 :                     loc_13A70:
   24979/   13830 : 0600 0010           		addi.b	#$10,d0		; add $10 to angle
   24980/   13834 : 6A02                		bpl.s	loc_13A78	; if angle is $0-$7F, branch
   24981/   13836 : 7203                		moveq	#3,d1
   24982/   13838 :                     
   24983/   13838 :                     loc_13A78:
   24984/   13838 : 0228 00FC 0001      		andi.b	#$FC,1(a0)
   24985/   1383E : B302                		eor.b	d1,d2
   24986/   13840 : 8528 0001           		or.b	d2,1(a0)
   24987/   13844 : 0828 0005 0022      		btst	#5,$22(a0)
   24988/   1384A : 6600 008A           		bne.w	SAnim_Push
   24989/   1384E : E808                		lsr.b	#4,d0		; divide angle by $10
   24990/   13850 : 0200 0006           		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
   24991/   13854 : 3428 0014           		move.w	$14(a0),d2	; get Sonic's speed
   24992/   13858 : 6A02                		bpl.s	loc_13A9C
   24993/   1385A : 4442                		neg.w	d2
   24994/   1385C :                     
   24995/   1385C :                     loc_13A9C:
   24996/   1385C : 43F9 0001 394E      		lea	(SonAni_Run).l,a1 ; use	running	animation
   24997/   13862 : 0C42 0600           		cmpi.w	#$600,d2	; is Sonic at running speed?
   24998/   13866 : 640C                		bcc.s	loc_13AB4	; if yes, branch
   24999/   13868 : 43F9 0001 3946      		lea	(SonAni_Walk).l,a1 ; use walking animation
   25000/   1386E : 1200                		move.b	d0,d1
   25001/   13870 : E209                		lsr.b	#1,d1
   25002/   13872 : D001                		add.b	d1,d0
   25003/   13874 :                     
   25004/   13874 :                     loc_13AB4:
   25005/   13874 : D000                		add.b	d0,d0
   25006/   13876 : 1600                		move.b	d0,d3
   25007/   13878 : 4442                		neg.w	d2
   25008/   1387A : 0642 0800           		addi.w	#$800,d2
   25009/   1387E : 6A02                		bpl.s	loc_13AC2
   25010/   13880 : 7400                		moveq	#0,d2
   25011/   13882 :                     
   25012/   13882 :                     loc_13AC2:
   25013/   13882 : E04A                		lsr.w	#8,d2
   25014/   13884 : 1142 001E           		move.b	d2,$1E(a0)	; modify frame duration
   25015/   13888 : 6100 FF42           		bsr.w	SAnim_Do2
   25016/   1388C : D728 001A           		add.b	d3,$1A(a0)	; modify frame number
   25017/   13890 : 4E75                		rts	
   25018/   13892 :                     ; ===========================================================================
   25019/   13892 :                     
   25020/   13892 :                     SAnim_RollJump:				; XREF: SAnim_WalkRun
   25021/   13892 : 5200                		addq.b	#1,d0		; is animation rolling/jumping?
   25022/   13894 : 6640                		bne.s	SAnim_Push	; if not, branch
   25023/   13896 : 3428 0014           		move.w	$14(a0),d2	; get Sonic's speed
   25024/   1389A : 6A02                		bpl.s	loc_13ADE
   25025/   1389C : 4442                		neg.w	d2
   25026/   1389E :                     
   25027/   1389E :                     loc_13ADE:
   25028/   1389E : 43F9 0001 395E      		lea	(SonAni_Roll2).l,a1 ; use fast animation
   25029/   138A4 : 0C42 0600           		cmpi.w	#$600,d2	; is Sonic moving fast?
   25030/   138A8 : 6406                		bcc.s	loc_13AF0	; if yes, branch
   25031/   138AA : 43F9 0001 3956      		lea	(SonAni_Roll).l,a1 ; use slower	animation
   25032/   138B0 :                     
   25033/   138B0 :                     loc_13AF0:
   25034/   138B0 : 4442                		neg.w	d2
   25035/   138B2 : 0642 0400           		addi.w	#$400,d2
   25036/   138B6 : 6A02                		bpl.s	loc_13AFA
   25037/   138B8 : 7400                		moveq	#0,d2
   25038/   138BA :                     
   25039/   138BA :                     loc_13AFA:
   25040/   138BA : E04A                		lsr.w	#8,d2
   25041/   138BC : 1142 001E           		move.b	d2,$1E(a0)	; modify frame duration
   25042/   138C0 : 1228 0022           		move.b	$22(a0),d1
   25043/   138C4 : 0201 0001           		andi.b	#1,d1
   25044/   138C8 : 0228 00FC 0001      		andi.b	#$FC,1(a0)
   25045/   138CE : 8328 0001           		or.b	d1,1(a0)
   25046/   138D2 : 6000 FEF8           		bra.w	SAnim_Do2
   25047/   138D6 :                     ; ===========================================================================
   25048/   138D6 :                     
   25049/   138D6 :                     SAnim_Push:				; XREF: SAnim_RollJump
   25050/   138D6 : 3428 0014           		move.w	$14(a0),d2	; get Sonic's speed
   25051/   138DA : 6B02                		bmi.s	loc_13B1E
   25052/   138DC : 4442                		neg.w	d2
   25053/   138DE :                     
   25054/   138DE :                     loc_13B1E:
   25055/   138DE : 0642 0800           		addi.w	#$800,d2
   25056/   138E2 : 6A02                		bpl.s	loc_13B26
   25057/   138E4 : 7400                		moveq	#0,d2
   25058/   138E6 :                     
   25059/   138E6 :                     loc_13B26:
   25060/   138E6 : EC4A                		lsr.w	#6,d2
   25061/   138E8 : 1142 001E           		move.b	d2,$1E(a0)	; modify frame duration
   25062/   138EC : 43F9 0001 3966      		lea	(SonAni_Push).l,a1
   25063/   138F2 : 1228 0022           		move.b	$22(a0),d1
   25064/   138F6 : 0201 0001           		andi.b	#1,d1
   25065/   138FA : 0228 00FC 0001      		andi.b	#$FC,1(a0)
   25066/   13900 : 8328 0001           		or.b	d1,1(a0)
   25067/   13904 : 6000 FEC6           		bra.w	SAnim_Do2
   25068/   13908 :                     ; End of function Sonic_Animate
   25069/   13908 :                     
   25070/   13908 :                     ; ===========================================================================
   25071/   13908 :                     SonicAniData:
   25072/   13908 :                     	include "_animations/Sonic.asm"
(1)    1/   13908 :                     ; ---------------------------------------------------------------------------
(1)    2/   13908 :                     ; Animation script - Sonic
(1)    3/   13908 :                     ; ---------------------------------------------------------------------------
(1)    4/   13908 : 003E                		dc.w SonAni_Walk-SonicAniData
(1)    5/   1390A : 0046                		dc.w SonAni_Run-SonicAniData
(1)    6/   1390C : 004E                		dc.w SonAni_Roll-SonicAniData
(1)    7/   1390E : 0056                		dc.w SonAni_Roll2-SonicAniData
(1)    8/   13910 : 005E                		dc.w SonAni_Push-SonicAniData
(1)    9/   13912 : 0066                		dc.w SonAni_Wait-SonicAniData
(1)   10/   13914 : 007C                		dc.w SonAni_Balance-SonicAniData
(1)   11/   13916 : 0080                		dc.w SonAni_LookUp-SonicAniData
(1)   12/   13918 : 0084                		dc.w SonAni_Duck-SonicAniData
(1)   13/   1391A : 0088                		dc.w SonAni_Warp1-SonicAniData
(1)   14/   1391C : 008C                		dc.w SonAni_Warp2-SonicAniData
(1)   15/   1391E : 0090                		dc.w SonAni_Warp3-SonicAniData
(1)   16/   13920 : 0094                		dc.w SonAni_Warp4-SonicAniData
(1)   17/   13922 : 0098                		dc.w SonAni_Stop-SonicAniData
(1)   18/   13924 : 009C                		dc.w SonAni_Float1-SonicAniData
(1)   19/   13926 : 00A0                		dc.w SonAni_Float2-SonicAniData
(1)   20/   13928 : 00A8                		dc.w SonAni_Spring-SonicAniData
(1)   21/   1392A : 00AC                		dc.w SonAni_LZHang-SonicAniData
(1)   22/   1392C : 00B0                		dc.w SonAni_Leap1-SonicAniData
(1)   23/   1392E : 00B6                		dc.w SonAni_Leap2-SonicAniData
(1)   24/   13930 : 00BC                		dc.w SonAni_Surf-SonicAniData
(1)   25/   13932 : 00C0                		dc.w SonAni_Bubble-SonicAniData
(1)   26/   13934 : 00C8                		dc.w SonAni_Death1-SonicAniData
(1)   27/   13936 : 00CC                		dc.w SonAni_Drown-SonicAniData
(1)   28/   13938 : 00D0                		dc.w SonAni_Death2-SonicAniData
(1)   29/   1393A : 00D4                		dc.w SonAni_Shrink-SonicAniData
(1)   30/   1393C : 00DE                		dc.w SonAni_Hurt-SonicAniData
(1)   31/   1393E : 00E2                		dc.w SonAni_LZSlide-SonicAniData
(1)   32/   13940 : 00E6                		dc.w SonAni_Blank-SonicAniData
(1)   33/   13942 : 00EA                		dc.w SonAni_Float3-SonicAniData
(1)   34/   13944 : 00F2                		dc.w SonAni_Float4-SonicAniData
(1)   35/   13946 : FF08 090A 0B06      SonAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
            1394C : 07FF             
(1)   36/   1394E : FF1E 1F20 21FF      SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
            13954 : FFFF             
(1)   37/   13956 : FE2E 2F30 3132      SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
            1395C : FFFF             
(1)   38/   1395E : FE2E 2F32 3031      SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
            13964 : 32FF             
(1)   39/   13966 : FD45 4647 48FF      SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
            1396C : FFFF             
(1)   40/   1396E : 1701 0101 0101      SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
            13974 : 0101 0101 0101 
            1397A : 0103 0202 0203 
            13980 : 04FE 0200          
(1)   41/   13984 : 1F3A 3BFF           SonAni_Balance:	dc.b $1F, $3A, $3B, $FF
(1)   42/   13988 : 3F05 FF00           SonAni_LookUp:	dc.b $3F, 5, $FF, 0
(1)   43/   1398C : 3F39 FF00           SonAni_Duck:	dc.b $3F, $39, $FF, 0
(1)   44/   13990 : 3F33 FF00           SonAni_Warp1:	dc.b $3F, $33, $FF, 0
(1)   45/   13994 : 3F34 FF00           SonAni_Warp2:	dc.b $3F, $34, $FF, 0
(1)   46/   13998 : 3F35 FF00           SonAni_Warp3:	dc.b $3F, $35, $FF, 0
(1)   47/   1399C : 3F36 FF00           SonAni_Warp4:	dc.b $3F, $36, $FF, 0
(1)   48/   139A0 : 0737 38FF           SonAni_Stop:	dc.b 7,	$37, $38, $FF
(1)   49/   139A4 : 073C 3FFF           SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
(1)   50/   139A8 : 073C 3D53 3E54      SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
            139AE : FF00             
(1)   51/   139B0 : 2F40 FD00           SonAni_Spring:	dc.b $2F, $40, $FD, 0
(1)   52/   139B4 : 0441 42FF           SonAni_LZHang:	dc.b 4,	$41, $42, $FF
(1)   53/   139B8 : 0F43 4343 FE01      SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
(1)   54/   139BE : 0F43 44FE 0100      SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
(1)   55/   139C4 : 3F49 FF00           SonAni_Surf:	dc.b $3F, $49, $FF, 0
(1)   56/   139C8 : 0B56 560A 0BFD      SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
            139CE : 0000             
(1)   57/   139D0 : 204B FF00           SonAni_Death1:	dc.b $20, $4B, $FF, 0
(1)   58/   139D4 : 2F4C FF00           SonAni_Drown:	dc.b $2F, $4C, $FF, 0
(1)   59/   139D8 : 034D FF00           SonAni_Death2:	dc.b 3,	$4D, $FF, 0
(1)   60/   139DC : 034E 4F50 5152      SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
            139E2 : 00FE 0100          
(1)   61/   139E6 : 0355 FF00           SonAni_Hurt:	dc.b 3,	$55, $FF, 0
(1)   62/   139EA : 0755 57FF           SonAni_LZSlide:	dc.b 7, $55, $57, $FF
(1)   63/   139EE : 7700 FD00           SonAni_Blank:	dc.b $77, 0, $FD, 0
(1)   64/   139F2 : 033C 3D53 3E54      SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
            139F8 : FF00             
(1)   65/   139FA : 033C FD00           SonAni_Float4:	dc.b 3,	$3C, $FD, 0
(1)   66/   139FE : (MACRO)              		even
   25073/   139FE :                     
   25074/   139FE :                     ; ---------------------------------------------------------------------------
   25075/   139FE :                     ; Sonic	pattern	loading	subroutine
   25076/   139FE :                     ; ---------------------------------------------------------------------------
   25077/   139FE :                     
   25078/   139FE :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   25079/   139FE :                     
   25080/   139FE :                     
   25081/   139FE :                     LoadSonicDynPLC:			; XREF: Obj01_Control; et al
   25082/   139FE : 7000                		moveq	#0,d0
   25083/   13A00 : 1028 001A           		move.b	$1A(a0),d0	; load frame number
   25084/   13A04 : B038 F766           		cmp.b	($FFFFF766).w,d0
   25085/   13A08 : 674C                		beq.s	locret_13C96
   25086/   13A0A : 11C0 F766           		move.b	d0,($FFFFF766).w
   25087/   13A0E : 45F9 0002 1764      		lea	(SonicDynPLC).l,a2
   25088/   13A14 : D040                		add.w	d0,d0
   25089/   13A16 : D4F2 0000           		adda.w	(a2,d0.w),a2
   25090/   13A1A : 7200                		moveq	#0,d1
   25091/   13A1C : 121A                		move.b	(a2)+,d1	; read "number of entries" value
   25092/   13A1E : 5301                		subq.b	#1,d1
   25093/   13A20 : 6B34                		bmi.s	locret_13C96
   25094/   13A22 : 47F8 C800           		lea	($FFFFC800).w,a3
   25095/   13A26 : 11FC 0001 F767      		move.b	#1,($FFFFF767).w
   25096/   13A2C :                     
   25097/   13A2C :                     SPLC_ReadEntry:
   25098/   13A2C : 7400                		moveq	#0,d2
   25099/   13A2E : 141A                		move.b	(a2)+,d2
   25100/   13A30 : 3002                		move.w	d2,d0
   25101/   13A32 : E808                		lsr.b	#4,d0
   25102/   13A34 : E14A                		lsl.w	#8,d2
   25103/   13A36 : 141A                		move.b	(a2)+,d2
   25104/   13A38 : EB4A                		lsl.w	#5,d2
   25105/   13A3A : 43F9 0002 1A64      		lea	(Art_Sonic).l,a1
   25106/   13A40 : D3C2                		adda.l	d2,a1
   25107/   13A42 :                     
   25108/   13A42 :                     SPLC_LoadTile:
   25109/   13A42 : 4CD9 707C           		movem.l	(a1)+,d2-d6/a4-a6
   25110/   13A46 : 48D3 707C           		movem.l	d2-d6/a4-a6,(a3)
   25111/   13A4A : 47EB 0020           		lea	$20(a3),a3	; next tile
   25112/   13A4E : 51C8 FFF2           		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
   25113/   13A52 :                     
   25114/   13A52 : 51C9 FFD8           		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
   25115/   13A56 :                     
   25116/   13A56 :                     locret_13C96:
   25117/   13A56 : 4E75                		rts	
   25118/   13A58 :                     ; End of function LoadSonicDynPLC
   25119/   13A58 :                     
   25120/   13A58 :                     ; ===========================================================================
   25121/   13A58 :                     ; ---------------------------------------------------------------------------
   25122/   13A58 :                     ; Object 0A - drowning countdown numbers and small bubbles (LZ)
   25123/   13A58 :                     ; ---------------------------------------------------------------------------
   25124/   13A58 :                     
   25125/   13A58 :                     Obj0A:					; XREF: Obj_Index
   25126/   13A58 : 7000                		moveq	#0,d0
   25127/   13A5A : 1028 0024           		move.b	$24(a0),d0
   25128/   13A5E : 323B 0006           		move.w	Obj0A_Index(pc,d0.w),d1
   25129/   13A62 : 4EFB 1002           		jmp	Obj0A_Index(pc,d1.w)
   25130/   13A66 :                     ; ===========================================================================
   25131/   13A66 : 0012 006A           Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
   25132/   13A6A : 0076 00D8           		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
   25133/   13A6E : 00EC 01F6           		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
   25134/   13A72 : 00F2 00D8           		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
   25135/   13A76 : 00EC                		dc.w Obj0A_Delete2-Obj0A_Index
   25136/   13A78 :                     ; ===========================================================================
   25137/   13A78 :                     
   25138/   13A78 :                     Obj0A_Main:				; XREF: Obj0A_Index
   25139/   13A78 : 5428 0024           		addq.b	#2,$24(a0)
   25140/   13A7C : 217C 0001 2768      		move.l	#Map_obj64,4(a0)
            13A82 : 0004             
   25141/   13A84 : 317C 8348 0002      		move.w	#$8348,2(a0)
   25142/   13A8A : 117C 0084 0001      		move.b	#$84,1(a0)
   25143/   13A90 : 117C 0010 0019      		move.b	#$10,$19(a0)
   25144/   13A96 : 117C 0001 0018      		move.b	#1,$18(a0)
   25145/   13A9C : 1028 0028           		move.b	$28(a0),d0
   25146/   13AA0 : 6A1E                		bpl.s	loc_13D00
   25147/   13AA2 : 5028 0024           		addq.b	#8,$24(a0)
   25148/   13AA6 : 217C 0001 3F0E      		move.l	#Map_obj0A,4(a0)
            13AAC : 0004             
   25149/   13AAE : 317C 0440 0002      		move.w	#$440,2(a0)
   25150/   13AB4 : 0240 007F           		andi.w	#$7F,d0
   25151/   13AB8 : 1140 0033           		move.b	d0,$33(a0)
   25152/   13ABC : 6000 019E           		bra.w	Obj0A_Countdown
   25153/   13AC0 :                     ; ===========================================================================
   25154/   13AC0 :                     
   25155/   13AC0 :                     loc_13D00:
   25156/   13AC0 : 1140 001C           		move.b	d0,$1C(a0)
   25157/   13AC4 : 3168 0008 0030      		move.w	8(a0),$30(a0)
   25158/   13ACA : 317C FF78 0012      		move.w	#-$88,$12(a0)
   25159/   13AD0 :                     
   25160/   13AD0 :                     Obj0A_Animate:				; XREF: Obj0A_Index
   25161/   13AD0 : 43F9 0001 3E76      		lea	(Ani_obj0A).l,a1
   25162/   13AD6 : 4EB9 0000 A4FE      		jsr	AnimateSprite
   25163/   13ADC :                     
   25164/   13ADC :                     Obj0A_ChkWater:				; XREF: Obj0A_Index
   25165/   13ADC : 3038 F646           		move.w	($FFFFF646).w,d0
   25166/   13AE0 : B068 000C           		cmp.w	$C(a0),d0	; has bubble reached the water surface?
   25167/   13AE4 : 6514                		bcs.s	Obj0A_Wobble	; if not, branch
   25168/   13AE6 : 117C 0006 0024      		move.b	#6,$24(a0)
   25169/   13AEC : 5E28 001C           		addq.b	#7,$1C(a0)
   25170/   13AF0 : 0C28 000D 001C      		cmpi.b	#$D,$1C(a0)
   25171/   13AF6 : 6746                		beq.s	Obj0A_Display
   25172/   13AF8 : 6044                		bra.s	Obj0A_Display
   25173/   13AFA :                     ; ===========================================================================
   25174/   13AFA :                     
   25175/   13AFA :                     Obj0A_Wobble:
   25176/   13AFA : 4A38 F7C7           		tst.b	($FFFFF7C7).w
   25177/   13AFE : 6704                		beq.s	loc_13D44
   25178/   13B00 : 5868 0030           		addq.w	#4,$30(a0)
   25179/   13B04 :                     
   25180/   13B04 :                     loc_13D44:
   25181/   13B04 : 1028 0026           		move.b	$26(a0),d0
   25182/   13B08 : 5228 0026           		addq.b	#1,$26(a0)
   25183/   13B0C : 0240 007F           		andi.w	#$7F,d0
   25184/   13B10 : 43F9 0001 3BDC      		lea	(Obj0A_WobbleData).l,a1
   25185/   13B16 : 1031 0000           		move.b	(a1,d0.w),d0
   25186/   13B1A : 4880                		ext.w	d0
   25187/   13B1C : D068 0030           		add.w	$30(a0),d0
   25188/   13B20 : 3140 0008           		move.w	d0,8(a0)
   25189/   13B24 : 616A                		bsr.s	Obj0A_ShowNumber
   25190/   13B26 : 4EB9 0000 D3AC      		jsr	SpeedToPos
   25191/   13B2C : 4A28 0001           		tst.b	1(a0)
   25192/   13B30 : 6A06                		bpl.s	Obj0A_Delete
   25193/   13B32 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   25194/   13B38 :                     ; ===========================================================================
   25195/   13B38 :                     
   25196/   13B38 :                     Obj0A_Delete:
   25197/   13B38 : 4EF9 0000 D40E      		jmp	DeleteObject
   25198/   13B3E :                     ; ===========================================================================
   25199/   13B3E :                     
   25200/   13B3E :                     Obj0A_Display:				; XREF: Obj0A_Index
   25201/   13B3E : 6150                		bsr.s	Obj0A_ShowNumber
   25202/   13B40 : 43F9 0001 3E76      		lea	(Ani_obj0A).l,a1
   25203/   13B46 : 4EB9 0000 A4FE      		jsr	AnimateSprite
   25204/   13B4C : 4EF9 0000 D3D2      		jmp	DisplaySprite
   25205/   13B52 :                     ; ===========================================================================
   25206/   13B52 :                     
   25207/   13B52 :                     Obj0A_Delete2:				; XREF: Obj0A_Index
   25208/   13B52 : 4EF9 0000 D40E      		jmp	DeleteObject
   25209/   13B58 :                     ; ===========================================================================
   25210/   13B58 :                     
   25211/   13B58 :                     Obj0A_AirLeft:				; XREF: Obj0A_Index
   25212/   13B58 : 0C78 000C FE14      		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
   25213/   13B5E : 622A                		bhi.s	Obj0A_Delete3	; if higher than $C, branch
   25214/   13B60 : 5368 0038           		subq.w	#1,$38(a0)
   25215/   13B64 : 660C                		bne.s	Obj0A_Display2
   25216/   13B66 : 117C 000E 0024      		move.b	#$E,$24(a0)
   25217/   13B6C : 5E28 001C           		addq.b	#7,$1C(a0)
   25218/   13B70 : 60CC                		bra.s	Obj0A_Display
   25219/   13B72 :                     ; ===========================================================================
   25220/   13B72 :                     
   25221/   13B72 :                     Obj0A_Display2:
   25222/   13B72 : 43F9 0001 3E76      		lea	(Ani_obj0A).l,a1
   25223/   13B78 : 4EB9 0000 A4FE      		jsr	AnimateSprite
   25224/   13B7E : 4A28 0001           		tst.b	1(a0)
   25225/   13B82 : 6A06                		bpl.s	Obj0A_Delete3
   25226/   13B84 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   25227/   13B8A :                     ; ===========================================================================
   25228/   13B8A :                     
   25229/   13B8A :                     Obj0A_Delete3:
   25230/   13B8A : 4EF9 0000 D40E      		jmp	DeleteObject
   25231/   13B90 :                     ; ===========================================================================
   25232/   13B90 :                     
   25233/   13B90 :                     Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
   25234/   13B90 : 4A68 0038           		tst.w	$38(a0)
   25235/   13B94 : 6744                		beq.s	locret_13E1A
   25236/   13B96 : 5368 0038           		subq.w	#1,$38(a0)
   25237/   13B9A : 663E                		bne.s	locret_13E1A
   25238/   13B9C : 0C28 0007 001C      		cmpi.b	#7,$1C(a0)
   25239/   13BA2 : 6436                		bcc.s	locret_13E1A
   25240/   13BA4 : 317C 000F 0038      		move.w	#$F,$38(a0)
   25241/   13BAA : 4268 0012           		clr.w	$12(a0)
   25242/   13BAE : 117C 0080 0001      		move.b	#$80,1(a0)
   25243/   13BB4 : 3028 0008           		move.w	8(a0),d0
   25244/   13BB8 : 9078 F700           		sub.w	($FFFFF700).w,d0
   25245/   13BBC : 0640 0080           		addi.w	#$80,d0
   25246/   13BC0 : 3140 0008           		move.w	d0,8(a0)
   25247/   13BC4 : 3028 000C           		move.w	$C(a0),d0
   25248/   13BC8 : 9078 F704           		sub.w	($FFFFF704).w,d0
   25249/   13BCC : 0640 0080           		addi.w	#$80,d0
   25250/   13BD0 : 3140 000A           		move.w	d0,$A(a0)
   25251/   13BD4 : 117C 000C 0024      		move.b	#$C,$24(a0)
   25252/   13BDA :                     
   25253/   13BDA :                     locret_13E1A:
   25254/   13BDA : 4E75                		rts	
   25255/   13BDC :                     ; ===========================================================================
   25256/   13BDC :                     Obj0A_WobbleData:
   25257/   13BDC : 0000 0000 0000      		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
            13BE2 : 0101 0101 0102 
            13BE8 : 0202 0202 02       
   25258/   13BED : 0203 0303 0303      		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
            13BF3 : 0303 0303 0303 
            13BF9 : 0303 0304 03       
   25259/   13BFE : 0303 0303 0303      		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
            13C04 : 0303 0303 0303 
            13C0A : 0302 0202 02       
   25260/   13C0F : 0202 0201 0101      		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
            13C15 : 0101 0000 0000 
            13C1B : 0000 FFFF          
   25261/   13C1F : FFFF FFFE FEFE      		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
            13C25 : FEFE FDFD FDFD FD 
   25262/   13C2C : FDFD FCFC FCFC      		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
            13C32 : FCFC FCFC FCFC FC 
   25263/   13C39 : FCFC FCFC FCFC      		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
            13C3F : FCFC FCFC FCFC FC 
   25264/   13C46 : FCFC FCFC FCFD      		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
            13C4C : FDFD FDFD FDFD FE 
   25265/   13C53 : FEFE FEFE FFFF      		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
            13C59 : FFFF FF          
   25266/   13C5C :                     ; ===========================================================================
   25267/   13C5C :                     
   25268/   13C5C :                     Obj0A_Countdown:			; XREF: Obj0A_Index
   25269/   13C5C : 4A68 002C           		tst.w	$2C(a0)
   25270/   13C60 : 6600 00E4           		bne.w	loc_13F86
   25271/   13C64 : 0C38 0006 D024      		cmpi.b	#6,($FFFFD024).w
   25272/   13C6A : 6400 01DE           		bcc.w	locret_1408C
   25273/   13C6E : 0838 0006 D022      		btst	#6,($FFFFD022).w
   25274/   13C74 : 6700 01D4           		beq.w	locret_1408C
   25275/   13C78 : 5368 0038           		subq.w	#1,$38(a0)
   25276/   13C7C : 6A00 00EE           		bpl.w	loc_13FAC
   25277/   13C80 : 317C 003B 0038      		move.w	#59,$38(a0)
   25278/   13C86 : 317C 0001 0036      		move.w	#1,$36(a0)
   25279/   13C8C : 4EB9 0000 279A      		jsr	(RandomNumber).l
   25280/   13C92 : 0240 0001           		andi.w	#1,d0
   25281/   13C96 : 1140 0034           		move.b	d0,$34(a0)
   25282/   13C9A : 3038 FE14           		move.w	($FFFFFE14).w,d0 ; check air remaining
   25283/   13C9E : 0C40 0019           		cmpi.w	#$19,d0
   25284/   13CA2 : 6732                		beq.s	Obj0A_WarnSound	; play sound if	air is $19
   25285/   13CA4 : 0C40 0014           		cmpi.w	#$14,d0
   25286/   13CA8 : 672C                		beq.s	Obj0A_WarnSound
   25287/   13CAA : 0C40 000F           		cmpi.w	#$F,d0
   25288/   13CAE : 6726                		beq.s	Obj0A_WarnSound
   25289/   13CB0 : 0C40 000C           		cmpi.w	#$C,d0
   25290/   13CB4 : 622A                		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
   25291/   13CB6 : 660A                		bne.s	loc_13F02
   25292/   13CB8 : 303C 0092           		move.w	#$92,d0
   25293/   13CBC : 4EB9 0000 117C      		jsr	(PlaySound).l	; play countdown music
   25294/   13CC2 :                     
   25295/   13CC2 :                     loc_13F02:
   25296/   13CC2 : 5328 0032           		subq.b	#1,$32(a0)
   25297/   13CC6 : 6A18                		bpl.s	Obj0A_ReduceAir
   25298/   13CC8 : 1168 0033 0032      		move.b	$33(a0),$32(a0)
   25299/   13CCE : 08E8 0007 0036      		bset	#7,$36(a0)
   25300/   13CD4 : 600A                		bra.s	Obj0A_ReduceAir
   25301/   13CD6 :                     ; ===========================================================================
   25302/   13CD6 :                     
   25303/   13CD6 :                     Obj0A_WarnSound:			; XREF: Obj0A_Countdown
   25304/   13CD6 : 303C 00C2           		move.w	#$C2,d0
   25305/   13CDA : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
   25306/   13CE0 :                     
   25307/   13CE0 :                     Obj0A_ReduceAir:
   25308/   13CE0 : 5378 FE14           		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
   25309/   13CE4 : 6400 0084           		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
   25310/   13CE8 : 6100 0162           		bsr.w	ResumeMusic
   25311/   13CEC : 11FC 0081 F7C8      		move.b	#$81,($FFFFF7C8).w ; lock controls
   25312/   13CF2 : 303C 00B2           		move.w	#$B2,d0
   25313/   13CF6 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play drowning sound
   25314/   13CFC : 117C 000A 0034      		move.b	#$A,$34(a0)
   25315/   13D02 : 317C 0001 0036      		move.w	#1,$36(a0)
   25316/   13D08 : 317C 0078 002C      		move.w	#$78,$2C(a0)
   25317/   13D0E : 2F08                		move.l	a0,-(sp)
   25318/   13D10 : 41F8 D000           		lea	($FFFFD000).w,a0
   25319/   13D14 : 6100 F82C           		bsr.w	Sonic_ResetOnFloor
   25320/   13D18 : 117C 0017 001C      		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
   25321/   13D1E : 08E8 0001 0022      		bset	#1,$22(a0)
   25322/   13D24 : 08E8 0007 0002      		bset	#7,2(a0)
   25323/   13D2A : 317C 0000 0012      		move.w	#0,$12(a0)
   25324/   13D30 : 317C 0000 0010      		move.w	#0,$10(a0)
   25325/   13D36 : 317C 0000 0014      		move.w	#0,$14(a0)
   25326/   13D3C : 11FC 0001 F744      		move.b	#1,($FFFFF744).w
   25327/   13D42 : 205F                		movea.l	(sp)+,a0
   25328/   13D44 : 4E75                		rts	
   25329/   13D46 :                     ; ===========================================================================
   25330/   13D46 :                     
   25331/   13D46 :                     loc_13F86:
   25332/   13D46 : 5368 002C           		subq.w	#1,$2C(a0)
   25333/   13D4A : 6608                		bne.s	loc_13F94
   25334/   13D4C : 11FC 0006 D024      		move.b	#6,($FFFFD024).w
   25335/   13D52 : 4E75                		rts	
   25336/   13D54 :                     ; ===========================================================================
   25337/   13D54 :                     
   25338/   13D54 :                     loc_13F94:
   25339/   13D54 : 2F08                		move.l	a0,-(sp)
   25340/   13D56 : 41F8 D000           		lea	($FFFFD000).w,a0
   25341/   13D5A : 4EB9 0000 D3AC      		jsr	SpeedToPos
   25342/   13D60 : 0668 0010 0012      		addi.w	#$10,$12(a0)
   25343/   13D66 : 205F                		movea.l	(sp)+,a0
   25344/   13D68 : 6002                		bra.s	loc_13FAC
   25345/   13D6A :                     ; ===========================================================================
   25346/   13D6A :                     
   25347/   13D6A :                     Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
   25348/   13D6A : 6010                		bra.s	Obj0A_MakeItem
   25349/   13D6C :                     ; ===========================================================================
   25350/   13D6C :                     
   25351/   13D6C :                     loc_13FAC:
   25352/   13D6C : 4A68 0036           		tst.w	$36(a0)
   25353/   13D70 : 6700 00D8           		beq.w	locret_1408C
   25354/   13D74 : 5368 003A           		subq.w	#1,$3A(a0)
   25355/   13D78 : 6A00 00D0           		bpl.w	locret_1408C
   25356/   13D7C :                     
   25357/   13D7C :                     Obj0A_MakeItem:
   25358/   13D7C : 4EB9 0000 279A      		jsr	(RandomNumber).l
   25359/   13D82 : 0240 000F           		andi.w	#$F,d0
   25360/   13D86 : 3140 003A           		move.w	d0,$3A(a0)
   25361/   13D8A : 4EB9 0000 D858      		jsr	SingleObjLoad
   25362/   13D90 : 6600 00B8           		bne.w	locret_1408C
   25363/   13D94 : 12BC 000A           		move.b	#$A,0(a1)	; load object
   25364/   13D98 : 3378 D008 0008      		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
   25365/   13D9E : 7006                		moveq	#6,d0
   25366/   13DA0 : 0838 0000 D022      		btst	#0,($FFFFD022).w
   25367/   13DA6 : 6708                		beq.s	loc_13FF2
   25368/   13DA8 : 4440                		neg.w	d0
   25369/   13DAA : 137C 0040 0026      		move.b	#$40,$26(a1)
   25370/   13DB0 :                     
   25371/   13DB0 :                     loc_13FF2:
   25372/   13DB0 : D169 0008           		add.w	d0,8(a1)
   25373/   13DB4 : 3378 D00C 000C      		move.w	($FFFFD00C).w,$C(a1)
   25374/   13DBA : 137C 0006 0028      		move.b	#6,$28(a1)
   25375/   13DC0 : 4A68 002C           		tst.w	$2C(a0)
   25376/   13DC4 : 6700 0036           		beq.w	loc_1403E
   25377/   13DC8 : 0268 0007 003A      		andi.w	#7,$3A(a0)
   25378/   13DCE : 0668 0000 003A      		addi.w	#0,$3A(a0)
   25379/   13DD4 : 3038 D00C           		move.w	($FFFFD00C).w,d0
   25380/   13DD8 : 0440 000C           		subi.w	#$C,d0
   25381/   13DDC : 3340 000C           		move.w	d0,$C(a1)
   25382/   13DE0 : 4EB9 0000 279A      		jsr	(RandomNumber).l
   25383/   13DE6 : 1340 0026           		move.b	d0,$26(a1)
   25384/   13DEA : 3038 FE04           		move.w	($FFFFFE04).w,d0
   25385/   13DEE : 0200 0003           		andi.b	#3,d0
   25386/   13DF2 : 664C                		bne.s	loc_14082
   25387/   13DF4 : 137C 000E 0028      		move.b	#$E,$28(a1)
   25388/   13DFA : 6044                		bra.s	loc_14082
   25389/   13DFC :                     ; ===========================================================================
   25390/   13DFC :                     
   25391/   13DFC :                     loc_1403E:
   25392/   13DFC : 0828 0007 0036      		btst	#7,$36(a0)
   25393/   13E02 : 673C                		beq.s	loc_14082
   25394/   13E04 : 3438 FE14           		move.w	($FFFFFE14).w,d2
   25395/   13E08 : E24A                		lsr.w	#1,d2
   25396/   13E0A : 4EB9 0000 279A      		jsr	(RandomNumber).l
   25397/   13E10 : 0240 0003           		andi.w	#3,d0
   25398/   13E14 : 6612                		bne.s	loc_1406A
   25399/   13E16 : 08E8 0006 0036      		bset	#6,$36(a0)
   25400/   13E1C : 6622                		bne.s	loc_14082
   25401/   13E1E : 1342 0028           		move.b	d2,$28(a1)
   25402/   13E22 : 337C 001C 0038      		move.w	#$1C,$38(a1)
   25403/   13E28 :                     
   25404/   13E28 :                     loc_1406A:
   25405/   13E28 : 4A28 0034           		tst.b	$34(a0)
   25406/   13E2C : 6612                		bne.s	loc_14082
   25407/   13E2E : 08E8 0006 0036      		bset	#6,$36(a0)
   25408/   13E34 : 660A                		bne.s	loc_14082
   25409/   13E36 : 1342 0028           		move.b	d2,$28(a1)
   25410/   13E3A : 337C 001C 0038      		move.w	#$1C,$38(a1)
   25411/   13E40 :                     
   25412/   13E40 :                     loc_14082:
   25413/   13E40 : 5328 0034           		subq.b	#1,$34(a0)
   25414/   13E44 : 6A04                		bpl.s	locret_1408C
   25415/   13E46 : 4268 0036           		clr.w	$36(a0)
   25416/   13E4A :                     
   25417/   13E4A :                     locret_1408C:
   25418/   13E4A : 4E75                		rts	
   25419/   13E4C :                     
   25420/   13E4C :                     ; ---------------------------------------------------------------------------
   25421/   13E4C :                     ; Subroutine to	play music for LZ/SBZ3 after a countdown
   25422/   13E4C :                     ; ---------------------------------------------------------------------------
   25423/   13E4C :                     
   25424/   13E4C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   25425/   13E4C :                     
   25426/   13E4C :                     
   25427/   13E4C :                     ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
   25428/   13E4C : 0C78 000C FE14      		cmpi.w	#$C,($FFFFFE14).w
   25429/   13E52 : 6216                		bhi.s	loc_140AC
   25430/   13E54 : 303C 0082           		move.w	#$82,d0		; play LZ music
   25431/   13E58 : 0C78 0103 FE10      		cmpi.w	#$103,($FFFFFE10).w ; check if level is	0103 (SBZ3)
   25432/   13E5E : 6604                		bne.s	loc_140A6
   25433/   13E60 : 303C 0086           		move.w	#$86,d0		; play SBZ music
   25434/   13E64 :                     
   25435/   13E64 :                     loc_140A6:
   25436/   13E64 : 4EB9 0000 117C      		jsr	(PlaySound).l
   25437/   13E6A :                     
   25438/   13E6A :                     loc_140AC:
   25439/   13E6A : 31FC 001E FE14      		move.w	#$1E,($FFFFFE14).w
   25440/   13E70 : 4238 D372           		clr.b	($FFFFD372).w
   25441/   13E74 : 4E75                		rts	
   25442/   13E76 :                     ; End of function ResumeMusic
   25443/   13E76 :                     
   25444/   13E76 :                     ; ===========================================================================
   25445/   13E76 :                     Ani_obj0A:
   25446/   13E76 :                     	include "_animations/obj0A.asm"
(1)    1/   13E76 :                     ; ---------------------------------------------------------------------------
(1)    2/   13E76 :                     ; Animation script - countdown numbers and bubbles (LZ)
(1)    3/   13E76 :                     ; ---------------------------------------------------------------------------
(1)    4/   13E76 : 001E                		dc.w byte_140D6-Ani_obj0A
(1)    5/   13E78 : 0028                		dc.w byte_140E0-Ani_obj0A
(1)    6/   13E7A : 0032                		dc.w byte_140EA-Ani_obj0A
(1)    7/   13E7C : 003C                		dc.w byte_140F4-Ani_obj0A
(1)    8/   13E7E : 0046                		dc.w byte_140FE-Ani_obj0A
(1)    9/   13E80 : 0050                		dc.w byte_14108-Ani_obj0A
(1)   10/   13E82 : 005A                		dc.w byte_14112-Ani_obj0A
(1)   11/   13E84 : 0060                		dc.w byte_14118-Ani_obj0A
(1)   12/   13E86 : 0068                		dc.w byte_14120-Ani_obj0A
(1)   13/   13E88 : 0070                		dc.w byte_14128-Ani_obj0A
(1)   14/   13E8A : 0078                		dc.w byte_14130-Ani_obj0A
(1)   15/   13E8C : 0080                		dc.w byte_14138-Ani_obj0A
(1)   16/   13E8E : 0088                		dc.w byte_14140-Ani_obj0A
(1)   17/   13E90 : 0090                		dc.w byte_14148-Ani_obj0A
(1)   18/   13E92 : 0092                		dc.w byte_1414A-Ani_obj0A
(1)   19/   13E94 : 0500 0102 0304      byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
            13E9A : 090D FC00          
(1)   20/   13E9E : 0500 0102 0304      byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
            13EA4 : 0C12 FC00          
(1)   21/   13EA8 : 0500 0102 0304      byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
            13EAE : 0C11 FC00          
(1)   22/   13EB2 : 0500 0102 0304      byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
            13EB8 : 0B10 FC00          
(1)   23/   13EBC : 0500 0102 0304      byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
            13EC2 : 090F FC00          
(1)   24/   13EC6 : 0500 0102 0304      byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
            13ECC : 0A0E FC00          
(1)   25/   13ED0 : 0E00 0102 FC00      byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
(1)   26/   13ED6 : 0716 0D16 0D16      byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
            13EDC : 0DFC             
(1)   27/   13EDE : 0716 1216 1216      byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
            13EE4 : 12FC             
(1)   28/   13EE6 : 0716 1116 1116      byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
            13EEC : 11FC             
(1)   29/   13EEE : 0716 1016 1016      byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
            13EF4 : 10FC             
(1)   30/   13EF6 : 0716 0F16 0F16      byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
            13EFC : 0FFC             
(1)   31/   13EFE : 0716 0E16 0E16      byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
            13F04 : 0EFC             
(1)   32/   13F06 : 0EFC                byte_14148:	dc.b $E, $FC
(1)   33/   13F08 : 0E01 0203 04FC      byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
(1)   34/   13F0E : (MACRO)              		even
   25447/   13F0E :                     
   25448/   13F0E :                     ; ---------------------------------------------------------------------------
   25449/   13F0E :                     ; Sprite mappings - drowning countdown numbers (LZ)
   25450/   13F0E :                     ; ---------------------------------------------------------------------------
   25451/   13F0E :                     Map_obj0A:
   25452/   13F0E :                     	include "_mappings/obj0A.asm"
(1)    1/   13F0E :                     ; ---------------------------------------------------------------------------
(1)    2/   13F0E :                     ; Sprite mappings - drowning countdown numbers (LZ)
(1)    3/   13F0E :                     ; ---------------------------------------------------------------------------
(1)    4/   13F0E : 0002                		dc.w byte_14152-Map_obj0A
(1)    5/   13F10 : 01                  byte_14152:	dc.b 1
(1)    6/   13F11 : E80E 0000 F2        		dc.b $E8, $E, 0, 0, $F2
(1)    7/   13F16 : (MACRO)              		even
   25453/   13F16 :                     
   25454/   13F16 :                     ; ===========================================================================
   25455/   13F16 :                     ; ---------------------------------------------------------------------------
   25456/   13F16 :                     ; Object 38 - shield and invincibility stars
   25457/   13F16 :                     ; ---------------------------------------------------------------------------
   25458/   13F16 :                     
   25459/   13F16 :                     Obj38:					; XREF: Obj_Index
   25460/   13F16 : 7000                		moveq	#0,d0
   25461/   13F18 : 1028 0024           		move.b	$24(a0),d0
   25462/   13F1C : 323B 0006           		move.w	Obj38_Index(pc,d0.w),d1
   25463/   13F20 : 4EFB 1002           		jmp	Obj38_Index(pc,d1.w)
   25464/   13F24 :                     ; ===========================================================================
   25465/   13F24 : 0006                Obj38_Index:	dc.w Obj38_Main-Obj38_Index
   25466/   13F26 : 003E                		dc.w Obj38_Shield-Obj38_Index
   25467/   13F28 : 0076                		dc.w Obj38_Stars-Obj38_Index
   25468/   13F2A :                     ; ===========================================================================
   25469/   13F2A :                     
   25470/   13F2A :                     Obj38_Main:				; XREF: Obj38_Index
   25471/   13F2A : 5428 0024           		addq.b	#2,$24(a0)
   25472/   13F2E : 217C 0001 4170      		move.l	#Map_obj38,4(a0)
            13F34 : 0004             
   25473/   13F36 : 117C 0004 0001      		move.b	#4,1(a0)
   25474/   13F3C : 117C 0001 0018      		move.b	#1,$18(a0)
   25475/   13F42 : 117C 0010 0019      		move.b	#$10,$19(a0)
   25476/   13F48 : 4A28 001C           		tst.b	$1C(a0)		; is object a shield?
   25477/   13F4C : 6608                		bne.s	Obj38_DoStars	; if not, branch
   25478/   13F4E : 317C 0541 0002      		move.w	#$541,2(a0)	; shield specific code
   25479/   13F54 : 4E75                		rts	
   25480/   13F56 :                     ; ===========================================================================
   25481/   13F56 :                     
   25482/   13F56 :                     Obj38_DoStars:
   25483/   13F56 : 5428 0024           		addq.b	#2,$24(a0)	; stars	specific code
   25484/   13F5A : 317C 055C 0002      		move.w	#$55C,2(a0)
   25485/   13F60 : 4E75                		rts	
   25486/   13F62 :                     ; ===========================================================================
   25487/   13F62 :                     
   25488/   13F62 :                     Obj38_Shield:				; XREF: Obj38_Index
   25489/   13F62 : 4A38 FE2D           		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
   25490/   13F66 : 662A                		bne.s	Obj38_RmvShield	; if yes, branch
   25491/   13F68 : 4A38 FE2C           		tst.b	($FFFFFE2C).w	; does Sonic have shield?
   25492/   13F6C : 6726                		beq.s	Obj38_Delete	; if not, branch
   25493/   13F6E : 3178 D008 0008      		move.w	($FFFFD008).w,8(a0)
   25494/   13F74 : 3178 D00C 000C      		move.w	($FFFFD00C).w,$C(a0)
   25495/   13F7A : 1178 D022 0022      		move.b	($FFFFD022).w,$22(a0)
   25496/   13F80 : 43F9 0001 410A      		lea	(Ani_obj38).l,a1
   25497/   13F86 : 4EB9 0000 A4FE      		jsr	AnimateSprite
   25498/   13F8C : 4EF9 0000 D3D2      		jmp	DisplaySprite
   25499/   13F92 :                     ; ===========================================================================
   25500/   13F92 :                     
   25501/   13F92 :                     Obj38_RmvShield:
   25502/   13F92 : 4E75                		rts	
   25503/   13F94 :                     ; ===========================================================================
   25504/   13F94 :                     
   25505/   13F94 :                     Obj38_Delete:
   25506/   13F94 : 4EF9 0000 D40E      		jmp	DeleteObject
   25507/   13F9A :                     ; ===========================================================================
   25508/   13F9A :                     
   25509/   13F9A :                     Obj38_Stars:				; XREF: Obj38_Index
   25510/   13F9A : 4A38 FE2D           		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
   25511/   13F9E : 676C                		beq.s	Obj38_Delete2	; if not, branch
   25512/   13FA0 : 3038 F7A8           		move.w	($FFFFF7A8).w,d0
   25513/   13FA4 : 1228 001C           		move.b	$1C(a0),d1
   25514/   13FA8 : 5301                		subq.b	#1,d1
   25515/   13FAA : 6018                		bra.s	Obj38_StarTrail
   25516/   13FAC :                     ; ===========================================================================
   25517/   13FAC : E909                		lsl.b	#4,d1
   25518/   13FAE : 5801                		addq.b	#4,d1
   25519/   13FB0 : 9001                		sub.b	d1,d0
   25520/   13FB2 : 1228 0030           		move.b	$30(a0),d1
   25521/   13FB6 : 9001                		sub.b	d1,d0
   25522/   13FB8 : 5801                		addq.b	#4,d1
   25523/   13FBA : 0201 000F           		andi.b	#$F,d1
   25524/   13FBE : 1141 0030           		move.b	d1,$30(a0)
   25525/   13FC2 : 6020                		bra.s	Obj38_StarTrail2a
   25526/   13FC4 :                     ; ===========================================================================
   25527/   13FC4 :                     
   25528/   13FC4 :                     Obj38_StarTrail:			; XREF: Obj38_Stars
   25529/   13FC4 : E709                		lsl.b	#3,d1
   25530/   13FC6 : 1401                		move.b	d1,d2
   25531/   13FC8 : D201                		add.b	d1,d1
   25532/   13FCA : D202                		add.b	d2,d1
   25533/   13FCC : 5801                		addq.b	#4,d1
   25534/   13FCE : 9001                		sub.b	d1,d0
   25535/   13FD0 : 1228 0030           		move.b	$30(a0),d1
   25536/   13FD4 : 9001                		sub.b	d1,d0
   25537/   13FD6 : 5801                		addq.b	#4,d1
   25538/   13FD8 : 0C01 0018           		cmpi.b	#$18,d1
   25539/   13FDC : 6502                		bcs.s	Obj38_StarTrail2
   25540/   13FDE : 7200                		moveq	#0,d1
   25541/   13FE0 :                     
   25542/   13FE0 :                     Obj38_StarTrail2:
   25543/   13FE0 : 1141 0030           		move.b	d1,$30(a0)
   25544/   13FE4 :                     
   25545/   13FE4 :                     Obj38_StarTrail2a:
   25546/   13FE4 : 43F8 CB00           		lea	($FFFFCB00).w,a1
   25547/   13FE8 : 43F1 0000           		lea	(a1,d0.w),a1
   25548/   13FEC : 3159 0008           		move.w	(a1)+,8(a0)
   25549/   13FF0 : 3159 000C           		move.w	(a1)+,$C(a0)
   25550/   13FF4 : 1178 D022 0022      		move.b	($FFFFD022).w,$22(a0)
   25551/   13FFA : 43F9 0001 410A      		lea	(Ani_obj38).l,a1
   25552/   14000 : 4EB9 0000 A4FE      		jsr	AnimateSprite
   25553/   14006 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   25554/   1400C :                     ; ===========================================================================
   25555/   1400C :                     
   25556/   1400C :                     Obj38_Delete2:				; XREF: Obj38_Stars
   25557/   1400C : 4EF9 0000 D40E      		jmp	DeleteObject
   25558/   14012 :                     ; ===========================================================================
   25559/   14012 :                     ; ---------------------------------------------------------------------------
   25560/   14012 :                     ; Object 4A - special stage entry from beta
   25561/   14012 :                     ; ---------------------------------------------------------------------------
   25562/   14012 :                     
   25563/   14012 :                     Obj4A:					; XREF: Obj_Index
   25564/   14012 : 7000                		moveq	#0,d0
   25565/   14014 : 1028 0024           		move.b	$24(a0),d0
   25566/   14018 : 323B 0006           		move.w	Obj4A_Index(pc,d0.w),d1
   25567/   1401C : 4EFB 1002           		jmp	Obj4A_Index(pc,d1.w)
   25568/   14020 :                     ; ===========================================================================
   25569/   14020 : 0006                Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
   25570/   14022 : 0038                		dc.w Obj4A_RmvSonic-Obj4A_Index
   25571/   14024 : 007A                		dc.w Obj4A_LoadSonic-Obj4A_Index
   25572/   14026 :                     ; ===========================================================================
   25573/   14026 :                     
   25574/   14026 :                     Obj4A_Main:				; XREF: Obj4A_Index
   25575/   14026 : 4AB8 F680           		tst.l	($FFFFF680).w	; are pattern load cues	empty?
   25576/   1402A : 6702                		beq.s	Obj4A_Main2	; if yes, branch
   25577/   1402C : 4E75                		rts	
   25578/   1402E :                     ; ===========================================================================
   25579/   1402E :                     
   25580/   1402E :                     Obj4A_Main2:
   25581/   1402E : 5428 0024           		addq.b	#2,$24(a0)
   25582/   14032 : 217C 0001 422A      		move.l	#Map_obj4A,4(a0)
            14038 : 0004             
   25583/   1403A : 117C 0004 0001      		move.b	#4,1(a0)
   25584/   14040 : 117C 0001 0018      		move.b	#1,$18(a0)
   25585/   14046 : 117C 0038 0019      		move.b	#$38,$19(a0)
   25586/   1404C : 317C 0541 0002      		move.w	#$541,2(a0)
   25587/   14052 : 317C 0078 0030      		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
   25588/   14058 :                     
   25589/   14058 :                     Obj4A_RmvSonic:				; XREF: Obj4A_Index
   25590/   14058 : 3178 D008 0008      		move.w	($FFFFD008).w,8(a0)
   25591/   1405E : 3178 D00C 000C      		move.w	($FFFFD00C).w,$C(a0)
   25592/   14064 : 1178 D022 0022      		move.b	($FFFFD022).w,$22(a0)
   25593/   1406A : 43F9 0001 4214      		lea	(Ani_obj4A).l,a1
   25594/   14070 : 4EB9 0000 A4FE      		jsr	AnimateSprite
   25595/   14076 : 0C28 0002 001A      		cmpi.b	#2,$1A(a0)
   25596/   1407C : 6616                		bne.s	Obj4A_Display
   25597/   1407E : 4A38 D000           		tst.b	($FFFFD000).w
   25598/   14082 : 6710                		beq.s	Obj4A_Display
   25599/   14084 : 11FC 0000 D000      		move.b	#0,($FFFFD000).w ; remove Sonic
   25600/   1408A : 303C 00A8           		move.w	#$A8,d0
   25601/   1408E : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
   25602/   14094 :                     
   25603/   14094 :                     Obj4A_Display:
   25604/   14094 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   25605/   1409A :                     ; ===========================================================================
   25606/   1409A :                     
   25607/   1409A :                     Obj4A_LoadSonic:			; XREF: Obj4A_Index
   25608/   1409A : 5368 0030           		subq.w	#1,$30(a0)	; subtract 1 from time
   25609/   1409E : 660C                		bne.s	Obj4A_Wait	; if time remains, branch
   25610/   140A0 : 11FC 0001 D000      		move.b	#1,($FFFFD000).w ; load	Sonic object
   25611/   140A6 : 4EF9 0000 D40E      		jmp	DeleteObject
   25612/   140AC :                     ; ===========================================================================
   25613/   140AC :                     
   25614/   140AC :                     Obj4A_Wait:
   25615/   140AC : 4E75                		rts	
   25616/   140AE :                     ; ===========================================================================
   25617/   140AE :                     ; ---------------------------------------------------------------------------
   25618/   140AE :                     ; Object 08 - water splash (LZ)
   25619/   140AE :                     ; ---------------------------------------------------------------------------
   25620/   140AE :                     
   25621/   140AE :                     Obj08:					; XREF: Obj_Index
   25622/   140AE : 7000                		moveq	#0,d0
   25623/   140B0 : 1028 0024           		move.b	$24(a0),d0
   25624/   140B4 : 323B 0006           		move.w	Obj08_Index(pc,d0.w),d1
   25625/   140B8 : 4EFB 1002           		jmp	Obj08_Index(pc,d1.w)
   25626/   140BC :                     ; ===========================================================================
   25627/   140BC : 0006                Obj08_Index:	dc.w Obj08_Main-Obj08_Index
   25628/   140BE : 0030                		dc.w Obj08_Display-Obj08_Index
   25629/   140C0 : 0048                		dc.w Obj08_Delete-Obj08_Index
   25630/   140C2 :                     ; ===========================================================================
   25631/   140C2 :                     
   25632/   140C2 :                     Obj08_Main:				; XREF: Obj08_Index
   25633/   140C2 : 5428 0024           		addq.b	#2,$24(a0)
   25634/   140C6 : 217C 0001 438A      		move.l	#Map_obj08,4(a0)
            140CC : 0004             
   25635/   140CE : 0028 0004 0001      		ori.b	#4,1(a0)
   25636/   140D4 : 117C 0001 0018      		move.b	#1,$18(a0)
   25637/   140DA : 117C 0010 0019      		move.b	#$10,$19(a0)
   25638/   140E0 : 317C 4259 0002      		move.w	#$4259,2(a0)
   25639/   140E6 : 3178 D008 0008      		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
   25640/   140EC :                     
   25641/   140EC :                     Obj08_Display:				; XREF: Obj08_Index
   25642/   140EC : 3178 F646 000C      		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
   25643/   140F2 : 43F9 0001 4382      		lea	(Ani_obj08).l,a1
   25644/   140F8 : 4EB9 0000 A4FE      		jsr	AnimateSprite
   25645/   140FE : 4EF9 0000 D3D2      		jmp	DisplaySprite
   25646/   14104 :                     ; ===========================================================================
   25647/   14104 :                     
   25648/   14104 :                     Obj08_Delete:				; XREF: Obj08_Index
   25649/   14104 : 4EF9 0000 D40E      		jmp	DeleteObject	; delete when animation	is complete
   25650/   1410A :                     ; ===========================================================================
   25651/   1410A :                     Ani_obj38:
   25652/   1410A :                     	include "_animations/obj38.asm"
(1)    1/   1410A :                     ; ---------------------------------------------------------------------------
(1)    2/   1410A :                     ; Animation script - shield and invincibility stars
(1)    3/   1410A :                     ; ---------------------------------------------------------------------------
(1)    4/   1410A : 000A                		dc.w byte_14356-Ani_obj38
(1)    5/   1410C : 0012                		dc.w byte_1435E-Ani_obj38
(1)    6/   1410E : 0018                		dc.w byte_14364-Ani_obj38
(1)    7/   14110 : 0032                		dc.w byte_1437E-Ani_obj38
(1)    8/   14112 : 004C                		dc.w byte_14398-Ani_obj38
(1)    9/   14114 : 0101 0002 0003      byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
            1411A : 00FF             
(1)   10/   1411C : 0504 0506 07FF      byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
(1)   11/   14122 : 0004 0400 0404      byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
            14128 : 0005 0500 0505 
            1412E : 0006 0600 06       
(1)   12/   14133 : 0600 0707 0007      		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
            14139 : 0700 FF          
(1)   13/   1413C : 0004 0400 0400      byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
            14142 : 0005 0500 0500 
            14148 : 0006 0600 06       
(1)   14/   1414D : 0000 0707 0007      		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
            14153 : 0000 FF          
(1)   15/   14156 : 0004 0000 0400      byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
            1415C : 0005 0000 0500 
            14162 : 0006 0000 06       
(1)   16/   14167 : 0000 0700 0007      		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
            1416D : 0000 FF          
(1)   17/   14170 : (MACRO)              		even
   25653/   14170 :                     
   25654/   14170 :                     ; ---------------------------------------------------------------------------
   25655/   14170 :                     ; Sprite mappings - shield and invincibility stars
   25656/   14170 :                     ; ---------------------------------------------------------------------------
   25657/   14170 :                     Map_obj38:
   25658/   14170 :                     	include "_mappings/obj38.asm"
(1)    1/   14170 :                     ; ---------------------------------------------------------------------------
(1)    2/   14170 :                     ; Sprite mappings - shield and invincibility stars
(1)    3/   14170 :                     ; ---------------------------------------------------------------------------
(1)    4/   14170 : 001B 0010           		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
(1)    5/   14174 : 0025 003A           		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
(1)    6/   14178 : 004F 0064           		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
(1)    7/   1417C : 0079 008E           		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
(1)    8/   14180 : 04                  byte_143C2:	dc.b 4
(1)    9/   14181 : E80A 0000 E8        		dc.b $E8, $A, 0, 0, $E8
(1)   10/   14186 : E80A 0009 00        		dc.b $E8, $A, 0, 9, 0
(1)   11/   1418B : 000A 1000 E8        byte_143CD:	dc.b 0,	$A, $10, 0, $E8
(1)   12/   14190 : 000A 1009 00        		dc.b 0,	$A, $10, 9, 0
(1)   13/   14195 : 04                  byte_143D7:	dc.b 4
(1)   14/   14196 : E80A 0812 E9        		dc.b $E8, $A, 8, $12, $E9
(1)   15/   1419B : E80A 0012 00        		dc.b $E8, $A, 0, $12, 0
(1)   16/   141A0 : 000A 1812 E9        		dc.b 0,	$A, $18, $12, $E9
(1)   17/   141A5 : 000A 1012 00        		dc.b 0,	$A, $10, $12, 0
(1)   18/   141AA : 04                  byte_143EC:	dc.b 4
(1)   19/   141AB : E80A 0809 E8        		dc.b $E8, $A, 8, 9, $E8
(1)   20/   141B0 : E80A 0800 00        		dc.b $E8, $A, 8, 0, 0
(1)   21/   141B5 : 000A 1809 E8        		dc.b 0,	$A, $18, 9, $E8
(1)   22/   141BA : 000A 1800 00        		dc.b 0,	$A, $18, 0, 0
(1)   23/   141BF : 04                  byte_14401:	dc.b 4
(1)   24/   141C0 : E80A 0000 E8        		dc.b $E8, $A, 0, 0, $E8
(1)   25/   141C5 : E80A 0009 00        		dc.b $E8, $A, 0, 9, 0
(1)   26/   141CA : 000A 1809 E8        		dc.b 0,	$A, $18, 9, $E8
(1)   27/   141CF : 000A 1800 00        		dc.b 0,	$A, $18, 0, 0
(1)   28/   141D4 : 04                  byte_14416:	dc.b 4
(1)   29/   141D5 : E80A 0809 E8        		dc.b $E8, $A, 8, 9, $E8
(1)   30/   141DA : E80A 0800 00        		dc.b $E8, $A, 8, 0, 0
(1)   31/   141DF : 000A 1000 E8        		dc.b 0,	$A, $10, 0, $E8
(1)   32/   141E4 : 000A 1009 00        		dc.b 0,	$A, $10, 9, 0
(1)   33/   141E9 : 04                  byte_1442B:	dc.b 4
(1)   34/   141EA : E80A 0012 E8        		dc.b $E8, $A, 0, $12, $E8
(1)   35/   141EF : E80A 001B 00        		dc.b $E8, $A, 0, $1B, 0
(1)   36/   141F4 : 000A 181B E8        		dc.b 0,	$A, $18, $1B, $E8
(1)   37/   141F9 : 000A 1812 00        		dc.b 0,	$A, $18, $12, 0
(1)   38/   141FE : 04                  byte_14440:	dc.b 4
(1)   39/   141FF : E80A 081B E8        		dc.b $E8, $A, 8, $1B, $E8
(1)   40/   14204 : E80A 0812 00        		dc.b $E8, $A, 8, $12, 0
(1)   41/   14209 : 000A 1012 E8        		dc.b 0,	$A, $10, $12, $E8
(1)   42/   1420E : 000A 101B 00        		dc.b 0,	$A, $10, $1B, 0
(1)   43/   14213 : (MACRO)              		even
(1)   43/   14213 : 00                                          dc.b 0 ;ds.b 1 
   25659/   14214 :                     
   25660/   14214 :                     Ani_obj4A:
   25661/   14214 :                     	include "_animations/obj4A.asm"
(1)    1/   14214 :                     ; ---------------------------------------------------------------------------
(1)    2/   14214 :                     ; Animation script - special stage entry effect from beta
(1)    3/   14214 :                     ; ---------------------------------------------------------------------------
(1)    4/   14214 : 0002                		dc.w byte_14458-Ani_obj4A
(1)    5/   14216 : 0500 0100 0100      byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
            1421C : 0701 0702 0703 
            14222 : 0704 0705 0706 
            14228 : 07FC             
(1)    6/   1422A : (MACRO)              		even
   25662/   1422A :                     
   25663/   1422A :                     ; ---------------------------------------------------------------------------
   25664/   1422A :                     ; Sprite mappings - special stage entry	from beta
   25665/   1422A :                     ; ---------------------------------------------------------------------------
   25666/   1422A :                     Map_obj4A:
   25667/   1422A :                     	include "_mappings/obj4A.asm"
(1)    1/   1422A :                     ; ---------------------------------------------------------------------------
(1)    2/   1422A :                     ; Sprite mappings - special stage entry	from beta
(1)    3/   1422A :                     ; ---------------------------------------------------------------------------
(1)    4/   1422A : 0010 0020           		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
(1)    5/   1422E : 0030 004A           		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
(1)    6/   14232 : 0078 00D3           		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
(1)    7/   14236 : 0129 0153           		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
(1)    8/   1423A : 03                  byte_1447C:	dc.b 3
(1)    9/   1423B : F800 0000 08        		dc.b $F8, 0, 0,	0, 8
(1)   10/   14240 : 0004 0001 00        		dc.b 0,	4, 0, 1, 0
(1)   11/   14245 : 0800 1000 08        		dc.b 8,	0, $10,	0, 8
(1)   12/   1424A : 03                  byte_1448C:	dc.b 3
(1)   13/   1424B : F00D 0003 F0        		dc.b $F0, $D, 0, 3, $F0
(1)   14/   14250 : 000C 000B F0        		dc.b 0,	$C, 0, $B, $F0
(1)   15/   14255 : 080D 1003 F0        		dc.b 8,	$D, $10, 3, $F0
(1)   16/   1425A : 05                  byte_1449C:	dc.b 5
(1)   17/   1425B : E40E 000F F4        		dc.b $E4, $E, 0, $F, $F4
(1)   18/   14260 : EC02 001B EC        		dc.b $EC, 2, 0,	$1B, $EC
(1)   19/   14265 : FC0C 001E F4        		dc.b $FC, $C, 0, $1E, $F4
(1)   20/   1426A : 040E 100F F4        		dc.b 4,	$E, $10, $F, $F4
(1)   21/   1426F : 0401 101B EC        		dc.b 4,	1, $10,	$1B, $EC
(1)   22/   14274 : 09                  byte_144B6:	dc.b 9
(1)   23/   14275 : F008 0022 F8        		dc.b $F0, 8, 0,	$22, $F8
(1)   24/   1427A : F80E 0025 F0        		dc.b $F8, $E, 0, $25, $F0
(1)   25/   1427F : 1008 0031 F0        		dc.b $10, 8, 0,	$31, $F0
(1)   26/   14284 : 0005 0034 10        		dc.b 0,	5, 0, $34, $10
(1)   27/   14289 : F800 0825 10        		dc.b $F8, 0, 8,	$25, $10
(1)   28/   1428E : F000 1836 18        		dc.b $F0, 0, $18, $36, $18
(1)   29/   14293 : F800 1825 20        		dc.b $F8, 0, $18, $25, $20
(1)   30/   14298 : 0000 0825 28        		dc.b 0,	0, 8, $25, $28
(1)   31/   1429D : F800 0025 30        		dc.b $F8, 0, 0,	$25, $30
(1)   32/   142A2 : 12                  byte_144E4:	dc.b $12
(1)   33/   142A3 : 0000 1825 F0        		dc.b 0,	0, $18,	$25, $F0
(1)   34/   142A8 : F804 0038 F8        		dc.b $F8, 4, 0,	$38, $F8
(1)   35/   142AD : F000 0026 08        		dc.b $F0, 0, 0,	$26, 8
(1)   36/   142B2 : 0000 0025 00        		dc.b 0,	0, 0, $25, 0
(1)   37/   142B7 : 0800 1825 F8        		dc.b 8,	0, $18,	$25, $F8
(1)   38/   142BC : 1000 1026 00        		dc.b $10, 0, $10, $26, 0
(1)   39/   142C1 : 0800 1038 08        		dc.b 8,	0, $10,	$38, 8
(1)   40/   142C6 : F800 0029 10        		dc.b $F8, 0, 0,	$29, $10
(1)   41/   142CB : 0000 0026 10        		dc.b 0,	0, 0, $26, $10
(1)   42/   142D0 : 0000 002D 18        		dc.b 0,	0, 0, $2D, $18
(1)   43/   142D5 : 0800 0826 18        		dc.b 8,	0, 8, $26, $18
(1)   44/   142DA : 0800 0029 20        		dc.b 8,	0, 0, $29, $20
(1)   45/   142DF : F800 0026 20        		dc.b $F8, 0, 0,	$26, $20
(1)   46/   142E4 : F800 002D 28        		dc.b $F8, 0, 0,	$2D, $28
(1)   47/   142E9 : 0000 003A 28        		dc.b 0,	0, 0, $3A, $28
(1)   48/   142EE : F800 1826 30        		dc.b $F8, 0, $18, $26, $30
(1)   49/   142F3 : 0000 1025 38        		dc.b 0,	0, $10,	$25, $38
(1)   50/   142F8 : F800 1025 40        		dc.b $F8, 0, $10, $25, $40
(1)   51/   142FD : 11                  byte_1453F:	dc.b $11
(1)   52/   142FE : F800 0825 00        		dc.b $F8, 0, 8,	$25, 0
(1)   53/   14303 : F000 0038 10        		dc.b $F0, 0, 0,	$38, $10
(1)   54/   14308 : 1000 0825 00        		dc.b $10, 0, 8,	$25, 0
(1)   55/   1430D : 0000 1825 10        		dc.b 0,	0, $18,	$25, $10
(1)   56/   14312 : 0800 1025 18        		dc.b 8,	0, $10,	$25, $18
(1)   57/   14317 : F800 1825 20        		dc.b $F8, 0, $18, $25, $20
(1)   58/   1431C : 0000 1026 28        		dc.b 0,	0, $10,	$26, $28
(1)   59/   14321 : F800 1025 30        		dc.b $F8, 0, $10, $25, $30
(1)   60/   14326 : 0000 0025 30        		dc.b 0,	0, 0, $25, $30
(1)   61/   1432B : 0800 0825 30        		dc.b 8,	0, 8, $25, $30
(1)   62/   14330 : 0000 0826 38        		dc.b 0,	0, 8, $26, $38
(1)   63/   14335 : 0800 0029 38        		dc.b 8,	0, 0, $29, $38
(1)   64/   1433A : F800 0826 40        		dc.b $F8, 0, 8,	$26, $40
(1)   65/   1433F : 0000 002D 40        		dc.b 0,	0, 0, $2D, $40
(1)   66/   14344 : F800 0825 48        		dc.b $F8, 0, 8,	$25, $48
(1)   67/   14349 : 0000 0025 48        		dc.b 0,	0, 0, $25, $48
(1)   68/   1434E : 0000 1025 50        		dc.b 0,	0, $10,	$25, $50
(1)   69/   14353 : 09                  byte_14595:	dc.b 9
(1)   70/   14354 : FC00 0826 30        		dc.b $FC, 0, 8,	$26, $30
(1)   71/   14359 : 0400 0825 28        		dc.b 4,	0, 8, $25, $28
(1)   72/   1435E : 0400 1027 38        		dc.b 4,	0, $10,	$27, $38
(1)   73/   14363 : 0400 0826 40        		dc.b 4,	0, 8, $26, $40
(1)   74/   14368 : FC00 1025 40        		dc.b $FC, 0, $10, $25, $40
(1)   75/   1436D : FC00 1026 48        		dc.b $FC, 0, $10, $26, $48
(1)   76/   14372 : 0C00 0827 48        		dc.b $C, 0, 8, $27, $48
(1)   77/   14377 : 0400 1826 50        		dc.b 4,	0, $18,	$26, $50
(1)   78/   1437C : 04                  		dc.b 4
(1)   79/   1437D : 0008 2758 00        byte_145BF:	dc.b 0,	8, $27,	$58, 0
(1)   80/   14382 : (MACRO)              		even
   25668/   14382 :                     
   25669/   14382 :                     Ani_obj08:
   25670/   14382 :                     	include "_animations/obj08.asm"
(1)    1/   14382 :                     ; ---------------------------------------------------------------------------
(1)    2/   14382 :                     ; Animation script - water splash (LZ)
(1)    3/   14382 :                     ; ---------------------------------------------------------------------------
(1)    4/   14382 : 0002                		dc.w byte_145C6-Ani_obj08
(1)    5/   14384 : 0400 0102 FC00      byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
(1)    6/   1438A : (MACRO)              		even
   25671/   1438A :                     
   25672/   1438A :                     ; ---------------------------------------------------------------------------
   25673/   1438A :                     ; Sprite mappings - water splash (LZ)
   25674/   1438A :                     ; ---------------------------------------------------------------------------
   25675/   1438A :                     Map_obj08:
   25676/   1438A :                     	include "_mappings/obj08.asm"
(1)    1/   1438A :                     ; ---------------------------------------------------------------------------
(1)    2/   1438A :                     ; Sprite mappings - water splash (LZ)
(1)    3/   1438A :                     ; ---------------------------------------------------------------------------
(1)    4/   1438A : 0006                		dc.w byte_145D2-Map_obj08
(1)    5/   1438C : 0011                		dc.w byte_145DD-Map_obj08
(1)    6/   1438E : 001C                		dc.w byte_145E8-Map_obj08
(1)    7/   14390 : 02                  byte_145D2:	dc.b 2
(1)    8/   14391 : F204 006D F8        		dc.b $F2, 4, 0,	$6D, $F8
(1)    9/   14396 : FA0C 006F F0        		dc.b $FA, $C, 0, $6F, $F0
(1)   10/   1439B : 02                  byte_145DD:	dc.b 2
(1)   11/   1439C : E200 0073 F8        		dc.b $E2, 0, 0,	$73, $F8
(1)   12/   143A1 : EA0E 0074 F0        		dc.b $EA, $E, 0, $74, $F0
(1)   13/   143A6 : 01                  byte_145E8:	dc.b 1
(1)   14/   143A7 : E20F 0080 F0        		dc.b $E2, $F, 0, $80, $F0
(1)   15/   143AC : (MACRO)              		even
   25677/   143AC :                     
   25678/   143AC :                     
   25679/   143AC :                     
   25680/   143AC :                     
   25681/   143AC :                     
   25682/   143AC :                     
   25683/   143AC :                     ; ===========================================================================
   25684/   143AC :                     ; ---------------------------------------------------------------------------
   25685/   143AC :                     ; Subroutine to	change Sonic's angle & position as he walks along the floor
   25686/   143AC :                     ; ---------------------------------------------------------------------------
   25687/   143AC :                     
   25688/   143AC :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   25689/   143AC :                     
   25690/   143AC :                     Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
   25691/   143AC : 21F8 FFD0 F796      		move.l	($FFFFFFD0).w,($FFFFF796).w		; MJ: load first collision data location
   25692/   143B2 : 4A38 FFF7           		tst.b	($FFFFFFF7).w				; MJ: is second sollision set to be used?
   25693/   143B6 : 6706                		beq.s	SAP_First				; MJ: if not, branch
   25694/   143B8 : 21F8 FFD4 F796      		move.l	($FFFFFFD4).w,($FFFFF796).w		; MJ: load second collision data location
   25695/   143BE :                     
   25696/   143BE :                     SAP_First:
   25697/   143BE : 0828 0003 0022      		btst	#3,$22(a0)
   25698/   143C4 : 670C                		beq.s	loc_14602
   25699/   143C6 : 7000                		moveq	#0,d0
   25700/   143C8 : 11C0 F768           		move.b	d0,($FFFFF768).w
   25701/   143CC : 11C0 F76A           		move.b	d0,($FFFFF76A).w
   25702/   143D0 : 4E75                		rts	
   25703/   143D2 :                     ; ===========================================================================
   25704/   143D2 :                     
   25705/   143D2 :                     loc_14602:
   25706/   143D2 : 7003                		moveq	#3,d0
   25707/   143D4 : 11C0 F768           		move.b	d0,($FFFFF768).w
   25708/   143D8 : 11C0 F76A           		move.b	d0,($FFFFF76A).w
   25709/   143DC : 1028 0026           		move.b	$26(a0),d0
   25710/   143E0 : 0600 0020           		addi.b	#$20,d0
   25711/   143E4 : 6A0E                		bpl.s	loc_14624
   25712/   143E6 : 1028 0026           		move.b	$26(a0),d0
   25713/   143EA : 6A02                		bpl.s	loc_1461E
   25714/   143EC : 5300                		subq.b	#1,d0
   25715/   143EE :                     
   25716/   143EE :                     loc_1461E:
   25717/   143EE : 0600 0020           		addi.b	#$20,d0
   25718/   143F2 : 600C                		bra.s	loc_14630
   25719/   143F4 :                     ; ===========================================================================
   25720/   143F4 :                     
   25721/   143F4 :                     loc_14624:
   25722/   143F4 : 1028 0026           		move.b	$26(a0),d0
   25723/   143F8 : 6A02                		bpl.s	loc_1462C
   25724/   143FA : 5200                		addq.b	#1,d0
   25725/   143FC :                     
   25726/   143FC :                     loc_1462C:
   25727/   143FC : 0600 001F           		addi.b	#$1F,d0
   25728/   14400 :                     
   25729/   14400 :                     loc_14630:
   25730/   14400 : 0200 00C0           		andi.b	#$C0,d0
   25731/   14404 : 0C00 0040           		cmpi.b	#$40,d0
   25732/   14408 : 6700 0280           		beq.w	Sonic_WalkVertL
   25733/   1440C : 0C00 0080           		cmpi.b	#$80,d0
   25734/   14410 : 6700 01D6           		beq.w	Sonic_WalkCeiling
   25735/   14414 : 0C00 00C0           		cmpi.b	#$C0,d0
   25736/   14418 : 6700 0132           		beq.w	Sonic_WalkVertR
   25737/   1441C : 3428 000C           		move.w	$C(a0),d2
   25738/   14420 : 3628 0008           		move.w	8(a0),d3
   25739/   14424 : 7000                		moveq	#0,d0
   25740/   14426 : 1028 0016           		move.b	$16(a0),d0
   25741/   1442A : 4880                		ext.w	d0
   25742/   1442C : D440                		add.w	d0,d2
   25743/   1442E : 1028 0017           		move.b	$17(a0),d0
   25744/   14432 : 4880                		ext.w	d0
   25745/   14434 : D640                		add.w	d0,d3
   25746/   14436 : 49F8 F768           		lea	($FFFFF768).w,a4
   25747/   1443A : 367C 0010           		movea.w	#$10,a3
   25748/   1443E : 3C3C 0000           		move.w	#0,d6
   25749/   14442 : 7A0C                		moveq	#$C,d5					; MJ: set solid type to check
   25750/   14444 : 6100 0368           		bsr.w	FindFloor				; MJ: check solidity
   25751/   14448 : 3F01                		move.w	d1,-(sp)
   25752/   1444A : 3428 000C           		move.w	$C(a0),d2
   25753/   1444E : 3628 0008           		move.w	8(a0),d3
   25754/   14452 : 7000                		moveq	#0,d0
   25755/   14454 : 1028 0016           		move.b	$16(a0),d0
   25756/   14458 : 4880                		ext.w	d0
   25757/   1445A : D440                		add.w	d0,d2
   25758/   1445C : 1028 0017           		move.b	$17(a0),d0
   25759/   14460 : 4880                		ext.w	d0
   25760/   14462 : 4440                		neg.w	d0
   25761/   14464 : D640                		add.w	d0,d3
   25762/   14466 : 49F8 F76A           		lea	($FFFFF76A).w,a4
   25763/   1446A : 367C 0010           		movea.w	#$10,a3
   25764/   1446E : 3C3C 0000           		move.w	#0,d6
   25765/   14472 : 7A0C                		moveq	#$C,d5					; MJ: set solid type to check
   25766/   14474 : 6100 0338           		bsr.w	FindFloor				; MJ: check solidity
   25767/   14478 : 301F                		move.w	(sp)+,d0
   25768/   1447A : 6100 00A4           		bsr.w	Sonic_Angle
   25769/   1447E : 4A41                		tst.w	d1
   25770/   14480 : 670C                		beq.s	locret_146BE
   25771/   14482 : 6A0C                		bpl.s	loc_146C0
   25772/   14484 : 0C41 FFF2           		cmpi.w	#-$E,d1
   25773/   14488 : 6D2C                		blt.s	locret_146E6
   25774/   1448A : D368 000C           		add.w	d1,$C(a0)
   25775/   1448E :                     
   25776/   1448E :                     locret_146BE:
   25777/   1448E : 4E75                		rts	
   25778/   14490 :                     ; ===========================================================================
   25779/   14490 :                     
   25780/   14490 :                     loc_146C0:
   25781/   14490 : 0C41 000E           		cmpi.w	#$E,d1
   25782/   14494 : 6E06                		bgt.s	loc_146CC
   25783/   14496 :                     
   25784/   14496 :                     loc_146C6:
   25785/   14496 : D368 000C           		add.w	d1,$C(a0)
   25786/   1449A : 4E75                		rts	
   25787/   1449C :                     ; ===========================================================================
   25788/   1449C :                     
   25789/   1449C :                     loc_146CC:
   25790/   1449C : 4A28 0038           		tst.b	$38(a0)
   25791/   144A0 : 66F4                		bne.s	loc_146C6
   25792/   144A2 : 08E8 0001 0022      		bset	#1,$22(a0)
   25793/   144A8 : 08A8 0005 0022      		bclr	#5,$22(a0)
   25794/   144AE : 117C 0001 001D      		move.b	#1,$1D(a0)
   25795/   144B4 : 4E75                		rts	
   25796/   144B6 :                     ; ===========================================================================
   25797/   144B6 :                     
   25798/   144B6 :                     locret_146E6:
   25799/   144B6 : 4E75                		rts	
   25800/   144B8 :                     ; End of function Sonic_AnglePos
   25801/   144B8 :                     
   25802/   144B8 :                     ; ===========================================================================
   25803/   144B8 : 2428 0008           		move.l	8(a0),d2
   25804/   144BC : 3028 0010           		move.w	$10(a0),d0
   25805/   144C0 : 48C0                		ext.l	d0
   25806/   144C2 : E180                		asl.l	#8,d0
   25807/   144C4 : 9480                		sub.l	d0,d2
   25808/   144C6 : 2142 0008           		move.l	d2,8(a0)
   25809/   144CA : 303C 0038           		move.w	#$38,d0
   25810/   144CE : 48C0                		ext.l	d0
   25811/   144D0 : E180                		asl.l	#8,d0
   25812/   144D2 : 9680                		sub.l	d0,d3
   25813/   144D4 : 2143 000C           		move.l	d3,$C(a0)
   25814/   144D8 : 4E75                		rts	
   25815/   144DA :                     ; ===========================================================================
   25816/   144DA :                     
   25817/   144DA :                     locret_1470A:
   25818/   144DA : 4E75                		rts	
   25819/   144DC :                     ; ===========================================================================
   25820/   144DC : 2628 000C           		move.l	$C(a0),d3
   25821/   144E0 : 3028 0012           		move.w	$12(a0),d0
   25822/   144E4 : 0440 0038           		subi.w	#$38,d0
   25823/   144E8 : 3140 0012           		move.w	d0,$12(a0)
   25824/   144EC : 48C0                		ext.l	d0
   25825/   144EE : E180                		asl.l	#8,d0
   25826/   144F0 : 9680                		sub.l	d0,d3
   25827/   144F2 : 2143 000C           		move.l	d3,$C(a0)
   25828/   144F6 : 4E75                		rts	
   25829/   144F8 : 4E75                		rts	
   25830/   144FA :                     ; ===========================================================================
   25831/   144FA : 2428 0008           		move.l	8(a0),d2
   25832/   144FE : 2628 000C           		move.l	$C(a0),d3
   25833/   14502 : 3028 0010           		move.w	$10(a0),d0
   25834/   14506 : 48C0                		ext.l	d0
   25835/   14508 : E180                		asl.l	#8,d0
   25836/   1450A : 9480                		sub.l	d0,d2
   25837/   1450C : 3028 0012           		move.w	$12(a0),d0
   25838/   14510 : 48C0                		ext.l	d0
   25839/   14512 : E180                		asl.l	#8,d0
   25840/   14514 : 9680                		sub.l	d0,d3
   25841/   14516 : 2142 0008           		move.l	d2,8(a0)
   25842/   1451A : 2143 000C           		move.l	d3,$C(a0)
   25843/   1451E : 4E75                		rts	
   25844/   14520 :                     
   25845/   14520 :                     ; ---------------------------------------------------------------------------
   25846/   14520 :                     ; Subroutine to	change Sonic's angle as he walks along the floor
   25847/   14520 :                     ; ---------------------------------------------------------------------------
   25848/   14520 :                     
   25849/   14520 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   25850/   14520 :                     
   25851/   14520 :                     
   25852/   14520 :                     Sonic_Angle:				; XREF: Sonic_AnglePos; et al
   25853/   14520 : 1438 F76A           		move.b	($FFFFF76A).w,d2
   25854/   14524 : B240                		cmp.w	d0,d1
   25855/   14526 : 6F06                		ble.s	loc_1475E
   25856/   14528 : 1438 F768           		move.b	($FFFFF768).w,d2
   25857/   1452C : 3200                		move.w	d0,d1
   25858/   1452E :                     
   25859/   1452E :                     loc_1475E:
   25860/   1452E : 0802 0000           		btst	#0,d2
   25861/   14532 : 6606                		bne.s	loc_1476A
   25862/   14534 : 1142 0026           		move.b	d2,$26(a0)
   25863/   14538 : 4E75                		rts	
   25864/   1453A :                     ; ===========================================================================
   25865/   1453A :                     
   25866/   1453A :                     loc_1476A:
   25867/   1453A : 1428 0026           		move.b	$26(a0),d2
   25868/   1453E : 0602 0020           		addi.b	#$20,d2
   25869/   14542 : 0202 00C0           		andi.b	#$C0,d2
   25870/   14546 : 1142 0026           		move.b	d2,$26(a0)
   25871/   1454A : 4E75                		rts	
   25872/   1454C :                     ; End of function Sonic_Angle
   25873/   1454C :                     
   25874/   1454C :                     ; ---------------------------------------------------------------------------
   25875/   1454C :                     ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
   25876/   1454C :                     ; ---------------------------------------------------------------------------
   25877/   1454C :                     
   25878/   1454C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   25879/   1454C :                     
   25880/   1454C :                     
   25881/   1454C :                     Sonic_WalkVertR:			; XREF: Sonic_AnglePos
   25882/   1454C : 3428 000C           		move.w	$C(a0),d2
   25883/   14550 : 3628 0008           		move.w	8(a0),d3
   25884/   14554 : 7000                		moveq	#0,d0
   25885/   14556 : 1028 0017           		move.b	$17(a0),d0
   25886/   1455A : 4880                		ext.w	d0
   25887/   1455C : 4440                		neg.w	d0
   25888/   1455E : D440                		add.w	d0,d2
   25889/   14560 : 1028 0016           		move.b	$16(a0),d0
   25890/   14564 : 4880                		ext.w	d0
   25891/   14566 : D640                		add.w	d0,d3
   25892/   14568 : 49F8 F768           		lea	($FFFFF768).w,a4
   25893/   1456C : 367C 0010           		movea.w	#$10,a3
   25894/   14570 : 3C3C 0000           		move.w	#0,d6
   25895/   14574 : 7A0C                		moveq	#$C,d5					; MJ: set solid type to check
   25896/   14576 : 6100 037C           		bsr.w	FindWall				; MJ: check solidity
   25897/   1457A : 3F01                		move.w	d1,-(sp)
   25898/   1457C : 3428 000C           		move.w	$C(a0),d2
   25899/   14580 : 3628 0008           		move.w	8(a0),d3
   25900/   14584 : 7000                		moveq	#0,d0
   25901/   14586 : 1028 0017           		move.b	$17(a0),d0
   25902/   1458A : 4880                		ext.w	d0
   25903/   1458C : D440                		add.w	d0,d2
   25904/   1458E : 1028 0016           		move.b	$16(a0),d0
   25905/   14592 : 4880                		ext.w	d0
   25906/   14594 : D640                		add.w	d0,d3
   25907/   14596 : 49F8 F76A           		lea	($FFFFF76A).w,a4
   25908/   1459A : 367C 0010           		movea.w	#$10,a3
   25909/   1459E : 3C3C 0000           		move.w	#0,d6
   25910/   145A2 : 7A0C                		moveq	#$C,d5					; MJ: set solid type to check
   25911/   145A4 : 6100 034E           		bsr.w	FindWall				; MJ: check solidity
   25912/   145A8 : 301F                		move.w	(sp)+,d0
   25913/   145AA : 6100 FF74           		bsr.w	Sonic_Angle
   25914/   145AE : 4A41                		tst.w	d1
   25915/   145B0 : 670E                		beq.s	locret_147F0
   25916/   145B2 : 6A0E                		bpl.s	loc_147F2
   25917/   145B4 : 0C41 FFF2           		cmpi.w	#-$E,d1
   25918/   145B8 : 6D00 FF20           		blt.w	locret_1470A
   25919/   145BC : D368 0008           		add.w	d1,8(a0)
   25920/   145C0 :                     
   25921/   145C0 :                     locret_147F0:
   25922/   145C0 : 4E75                		rts	
   25923/   145C2 :                     ; ===========================================================================
   25924/   145C2 :                     
   25925/   145C2 :                     loc_147F2:
   25926/   145C2 : 0C41 000E           		cmpi.w	#$E,d1
   25927/   145C6 : 6E06                		bgt.s	loc_147FE
   25928/   145C8 :                     
   25929/   145C8 :                     loc_147F8:
   25930/   145C8 : D368 0008           		add.w	d1,8(a0)
   25931/   145CC : 4E75                		rts	
   25932/   145CE :                     ; ===========================================================================
   25933/   145CE :                     
   25934/   145CE :                     loc_147FE:
   25935/   145CE : 4A28 0038           		tst.b	$38(a0)
   25936/   145D2 : 66F4                		bne.s	loc_147F8
   25937/   145D4 : 08E8 0001 0022      		bset	#1,$22(a0)
   25938/   145DA : 08A8 0005 0022      		bclr	#5,$22(a0)
   25939/   145E0 : 117C 0001 001D      		move.b	#1,$1D(a0)
   25940/   145E6 : 4E75                		rts	
   25941/   145E8 :                     ; End of function Sonic_WalkVertR
   25942/   145E8 :                     
   25943/   145E8 :                     ; ---------------------------------------------------------------------------
   25944/   145E8 :                     ; Subroutine allowing Sonic to walk upside-down
   25945/   145E8 :                     ; ---------------------------------------------------------------------------
   25946/   145E8 :                     
   25947/   145E8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   25948/   145E8 :                     
   25949/   145E8 :                     
   25950/   145E8 :                     Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
   25951/   145E8 : 3428 000C           		move.w	$C(a0),d2
   25952/   145EC : 3628 0008           		move.w	8(a0),d3
   25953/   145F0 : 7000                		moveq	#0,d0
   25954/   145F2 : 1028 0016           		move.b	$16(a0),d0
   25955/   145F6 : 4880                		ext.w	d0
   25956/   145F8 : 9440                		sub.w	d0,d2
   25957/   145FA : 0A42 000F           		eori.w	#$F,d2
   25958/   145FE : 1028 0017           		move.b	$17(a0),d0
   25959/   14602 : 4880                		ext.w	d0
   25960/   14604 : D640                		add.w	d0,d3
   25961/   14606 : 49F8 F768           		lea	($FFFFF768).w,a4
   25962/   1460A : 367C FFF0           		movea.w	#-$10,a3
   25963/   1460E : 3C3C 0800           		move.w	#$0800,d6
   25964/   14612 : 7A0C                		moveq	#$C,d5					; MJ: set solid type to check
   25965/   14614 : 6100 0198           		bsr.w	FindFloor				; MJ: check solidity
   25966/   14618 : 3F01                		move.w	d1,-(sp)
   25967/   1461A : 3428 000C           		move.w	$C(a0),d2
   25968/   1461E : 3628 0008           		move.w	8(a0),d3
   25969/   14622 : 7000                		moveq	#0,d0
   25970/   14624 : 1028 0016           		move.b	$16(a0),d0
   25971/   14628 : 4880                		ext.w	d0
   25972/   1462A : 9440                		sub.w	d0,d2
   25973/   1462C : 0A42 000F           		eori.w	#$F,d2
   25974/   14630 : 1028 0017           		move.b	$17(a0),d0
   25975/   14634 : 4880                		ext.w	d0
   25976/   14636 : 9640                		sub.w	d0,d3
   25977/   14638 : 49F8 F76A           		lea	($FFFFF76A).w,a4
   25978/   1463C : 367C FFF0           		movea.w	#-$10,a3
   25979/   14640 : 3C3C 0800           		move.w	#$0800,d6
   25980/   14644 : 7A0C                		moveq	#$C,d5					; MJ: set solid type to check
   25981/   14646 : 6100 0166           		bsr.w	FindFloor				; MJ: check solidity
   25982/   1464A : 301F                		move.w	(sp)+,d0
   25983/   1464C : 6100 FED2           		bsr.w	Sonic_Angle
   25984/   14650 : 4A41                		tst.w	d1
   25985/   14652 : 670E                		beq.s	locret_14892
   25986/   14654 : 6A0E                		bpl.s	loc_14894
   25987/   14656 : 0C41 FFF2           		cmpi.w	#-$E,d1
   25988/   1465A : 6D00 FE5A           		blt.w	locret_146E6
   25989/   1465E : 9368 000C           		sub.w	d1,$C(a0)
   25990/   14662 :                     
   25991/   14662 :                     locret_14892:
   25992/   14662 : 4E75                		rts	
   25993/   14664 :                     ; ===========================================================================
   25994/   14664 :                     
   25995/   14664 :                     loc_14894:
   25996/   14664 : 0C41 000E           		cmpi.w	#$E,d1
   25997/   14668 : 6E06                		bgt.s	loc_148A0
   25998/   1466A :                     
   25999/   1466A :                     loc_1489A:
   26000/   1466A : 9368 000C           		sub.w	d1,$C(a0)
   26001/   1466E : 4E75                		rts	
   26002/   14670 :                     ; ===========================================================================
   26003/   14670 :                     
   26004/   14670 :                     loc_148A0:
   26005/   14670 : 4A28 0038           		tst.b	$38(a0)
   26006/   14674 : 66F4                		bne.s	loc_1489A
   26007/   14676 : 08E8 0001 0022      		bset	#1,$22(a0)
   26008/   1467C : 08A8 0005 0022      		bclr	#5,$22(a0)
   26009/   14682 : 117C 0001 001D      		move.b	#1,$1D(a0)
   26010/   14688 : 4E75                		rts	
   26011/   1468A :                     ; End of function Sonic_WalkCeiling
   26012/   1468A :                     
   26013/   1468A :                     ; ---------------------------------------------------------------------------
   26014/   1468A :                     ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
   26015/   1468A :                     ; ---------------------------------------------------------------------------
   26016/   1468A :                     
   26017/   1468A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26018/   1468A :                     
   26019/   1468A :                     
   26020/   1468A :                     Sonic_WalkVertL:
   26021/   1468A : 3428 000C           		move.w	$C(a0),d2				; MJ: Load Y position
   26022/   1468E : 3628 0008           		move.w	8(a0),d3				; MJ: Load X position
   26023/   14692 : 7000                		moveq	#0,d0					; MJ: clear d0
   26024/   14694 : 1028 0017           		move.b	$17(a0),d0				; MJ: load height
   26025/   14698 : 4880                		ext.w	d0					; MJ: set left byte pos or neg
   26026/   1469A : 9440                		sub.w	d0,d2					; MJ: subtract from Y position
   26027/   1469C : 1028 0016           		move.b	$16(a0),d0				; MJ: load width
   26028/   146A0 : 4880                		ext.w	d0					; MJ: set left byte pos or neg
   26029/   146A2 : 9640                		sub.w	d0,d3					; MJ: subtract from X position
   26030/   146A4 : 0A43 000F           		eori.w	#$F,d3
   26031/   146A8 : 49F8 F768           		lea	($FFFFF768).w,a4			; MJ: load address of the angle value set
   26032/   146AC : 367C FFF0           		movea.w	#-$10,a3
   26033/   146B0 : 3C3C 0400           		move.w	#$400,d6
   26034/   146B4 : 7A0C                		moveq	#$C,d5					; MJ: set solid type to check
   26035/   146B6 : 6100 023C           		bsr.w	FindWall				; MJ: check solidity
   26036/   146BA : 3F01                		move.w	d1,-(sp)
   26037/   146BC : 3428 000C           		move.w	$C(a0),d2
   26038/   146C0 : 3628 0008           		move.w	8(a0),d3
   26039/   146C4 : 7000                		moveq	#0,d0
   26040/   146C6 : 1028 0017           		move.b	$17(a0),d0
   26041/   146CA : 4880                		ext.w	d0
   26042/   146CC : D440                		add.w	d0,d2
   26043/   146CE : 1028 0016           		move.b	$16(a0),d0
   26044/   146D2 : 4880                		ext.w	d0
   26045/   146D4 : 9640                		sub.w	d0,d3
   26046/   146D6 : 0A43 000F           		eori.w	#$F,d3
   26047/   146DA : 49F8 F76A           		lea	($FFFFF76A).w,a4
   26048/   146DE : 367C FFF0           		movea.w	#-$10,a3
   26049/   146E2 : 3C3C 0400           		move.w	#$400,d6
   26050/   146E6 : 7A0C                		moveq	#$C,d5					; MJ: set solid type to check
   26051/   146E8 : 6100 020A           		bsr.w	FindWall				; MJ: check solidity
   26052/   146EC : 301F                		move.w	(sp)+,d0
   26053/   146EE : 6100 FE30           		bsr.w	Sonic_Angle
   26054/   146F2 : 4A41                		tst.w	d1
   26055/   146F4 : 670E                		beq.s	locret_14934
   26056/   146F6 : 6A0E                		bpl.s	loc_14936
   26057/   146F8 : 0C41 FFF2           		cmpi.w	#-$E,d1
   26058/   146FC : 6D00 FDDC           		blt.w	locret_1470A
   26059/   14700 : 9368 0008           		sub.w	d1,8(a0)
   26060/   14704 :                     
   26061/   14704 :                     locret_14934:
   26062/   14704 : 4E75                		rts
   26063/   14706 :                     
   26064/   14706 :                     ; ===========================================================================
   26065/   14706 :                     
   26066/   14706 :                     loc_14936:
   26067/   14706 : 0C41 000E           		cmpi.w	#$E,d1
   26068/   1470A : 6E06                		bgt.s	loc_14942
   26069/   1470C :                     
   26070/   1470C :                     loc_1493C:
   26071/   1470C : 9368 0008           		sub.w	d1,8(a0)
   26072/   14710 : 4E75                		rts	
   26073/   14712 :                     
   26074/   14712 :                     ; ===========================================================================
   26075/   14712 :                     
   26076/   14712 :                     loc_14942:
   26077/   14712 : 4A28 0038           		tst.b	$38(a0)
   26078/   14716 : 66F4                		bne.s	loc_1493C
   26079/   14718 : 08E8 0001 0022      		bset	#1,$22(a0)
   26080/   1471E : 08A8 0005 0022      		bclr	#5,$22(a0)
   26081/   14724 : 117C 0001 001D      		move.b	#1,$1D(a0)
   26082/   1472A : 4E75                		rts	
   26083/   1472C :                     ; End of function Sonic_WalkVertL
   26084/   1472C :                     
   26085/   1472C :                     ; ---------------------------------------------------------------------------
   26086/   1472C :                     ; Subroutine to	find which tile	the object is standing on
   26087/   1472C :                     ; ---------------------------------------------------------------------------
   26088/   1472C :                     
   26089/   1472C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26090/   1472C :                     
   26091/   1472C :                     Floor_ChkTile:				; XREF: FindFloor; et al
   26092/   1472C : 3002                		move.w	d2,d0					; MJ: load Y position
   26093/   1472E : 0240 0780           		andi.w	#$0780,d0				; MJ: get within 780 (E00 pixels) in multiples of 80
   26094/   14732 : D040                		add.w	d0,d0					; MJ: multiply by 2
   26095/   14734 : 3203                		move.w	d3,d1					; MJ: load X position
   26096/   14736 : EE49                		lsr.w	#7,d1					; MJ: shift to right side
   26097/   14738 : 0241 007F           		andi.w	#$007F,d1				; MJ: get within 7F
   26098/   1473C : D041                		add.w	d1,d0					; MJ: add calc'd Y to calc'd X
   26099/   1473E : 72FF                		moveq	#-1,d1					; MJ: prepare FFFF in d3
   26100/   14740 : 2278 A400           		movea.l	($FFFFA400).w,a1			; MJ: load address of Layout to a1
   26101/   14744 : 1231 0000           		move.b	(a1,d0.w),d1				; MJ: collect correct chunk ID based on the X and Y position
   26102/   14748 : 0241 00FF           		andi.w	#$FF,d1					; MJ: keep within FF
   26103/   1474C : EF49                		lsl.w	#$07,d1					; MJ: multiply by 80
   26104/   1474E : 3002                		move.w	d2,d0					; MJ: load Y position
   26105/   14750 : 0240 0070           		andi.w	#$0070,d0				; MJ: keep Y within 80 pixels
   26106/   14754 : D240                		add.w	d0,d1					; MJ: add to ror'd chunk ID
   26107/   14756 : 3003                		move.w	d3,d0					; MJ: load X position
   26108/   14758 : E648                		lsr.w	#3,d0					; MJ: divide by 8
   26109/   1475A : 0240 000E           		andi.w	#$000E,d0				; MJ: keep X within 10 pixels
   26110/   1475E : D240                		add.w	d0,d1					; MJ: add to ror'd chunk ID
   26111/   14760 :                     
   26112/   14760 :                     loc_14996:
   26113/   14760 : 2241                		movea.l	d1,a1					; MJ: set address (Chunk to read)
   26114/   14762 : 4E75                		rts						; MJ: return
   26115/   14764 :                     ; ===========================================================================
   26116/   14764 :                     
   26117/   14764 :                     loc_1499A:
   26118/   14764 : 0241 007F           		andi.w	#$7F,d1
   26119/   14768 : 0828 0006 0001      		btst	#6,1(a0)
   26120/   1476E : 670C                		beq.s	loc_149B2
   26121/   14770 : 5241                		addq.w	#1,d1
   26122/   14772 : 0C41 0029           		cmpi.w	#$29,d1
   26123/   14776 : 6604                		bne.s	loc_149B2
   26124/   14778 : 323C 0051           		move.w	#$51,d1
   26125/   1477C :                     
   26126/   1477C :                     loc_149B2:
   26127/   1477C : EE59                		ror.w	#7,d1
   26128/   1477E : E459                		ror.w	#2,d1
   26129/   14780 : 3002                		move.w	d2,d0
   26130/   14782 : D040                		add.w	d0,d0
   26131/   14784 : 0240 0070           		andi.w	#$070,d0
   26132/   14788 : D240                		add.w	d0,d1
   26133/   1478A : 3003                		move.w	d3,d0
   26134/   1478C : E648                		lsr.w	#3,d0
   26135/   1478E : 0240 000E           		andi.w	#$0E,d0
   26136/   14792 : D240                		add.w	d0,d1
   26137/   14794 : 2241                		movea.l	d1,a1
   26138/   14796 : 4E75                		rts
   26139/   14798 :                     ; End of function Floor_ChkTile
   26140/   14798 :                     
   26141/   14798 :                     
   26142/   14798 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26143/   14798 :                     
   26144/   14798 :                     
   26145/   14798 :                     ColisionChkLayer:
   26146/   14798 : 4A38 FFF7           		tst.b	($FFFFFFF7).w				; MJ: is collision set to first?
   26147/   1479C : 670E                		beq.s	CCL_NoChange				; MJ: if so, branch
   26148/   1479E : 3800                		move.w	d0,d4					; MJ: load block ID to d4
   26149/   147A0 : C07C 0FFF           		and.w	#$0FFF,d0				; MJ: clear solid settings of d0
   26150/   147A4 : C87C C000           		and.w	#$C000,d4				; MJ: get only second solid settings of d4
   26151/   147A8 : E44C                		lsr.w	#$02,d4					; MJ: shift them to first solid settings location
   26152/   147AA : D044                		add.w	d4,d0					; MJ: add to rest of block ID
   26153/   147AC :                     
   26154/   147AC :                     CCL_NoChange:
   26155/   147AC : 4E75                		rts						; MJ: return
   26156/   147AE :                     
   26157/   147AE :                     
   26158/   147AE :                     FindFloor:
   26159/   147AE : 6100 FF7C           		bsr.w	Floor_ChkTile
   26160/   147B2 : 3011                		move.w	(a1),d0
   26161/   147B4 : 61E2                		bsr.s	ColisionChkLayer			; MJ: check solid settings to use
   26162/   147B6 : 3800                		move.w	d0,d4
   26163/   147B8 : 0240 03FF           		andi.w	#$3FF,d0
   26164/   147BC : 6704                		beq.s	loc_149DE
   26165/   147BE : 0B04                		btst	d5,d4
   26166/   147C0 : 660E                		bne.s	loc_149EC
   26167/   147C2 :                     
   26168/   147C2 :                     loc_149DE:
   26169/   147C2 : D44B                		add.w	a3,d2
   26170/   147C4 : 6100 0092           		bsr.w	FindFloor2
   26171/   147C8 : 944B                		sub.w	a3,d2
   26172/   147CA : 0641 0010           		addi.w	#$10,d1
   26173/   147CE : 4E75                		rts	
   26174/   147D0 :                     ; ===========================================================================
   26175/   147D0 :                     
   26176/   147D0 :                     loc_149EC:
   26177/   147D0 : 2478 F796           		movea.l	($FFFFF796).w,a2			; MJ: load collision index address
   26178/   147D4 : 1032 0000           		move.b	(a2,d0.w),d0				; MJ: load correct Collision ID based on the Block ID
   26179/   147D8 : 0240 00FF           		andi.w	#$FF,d0					; MJ: clear the left byte
   26180/   147DC : 67E4                		beq.s	loc_149DE				; MJ: if collision ID is 00, branch
   26181/   147DE : 45F9 0006 40A6      		lea	(AngleMap).l,a2				; MJ: load angle map data to a2
   26182/   147E4 : 18B2 0000           		move.b	(a2,d0.w),(a4)				; MJ: collect correct angle based on the collision ID
   26183/   147E8 : E948                		lsl.w	#4,d0					; MJ: multiply collision ID by 10
   26184/   147EA : 3203                		move.w	d3,d1					; MJ: load X position
   26185/   147EC : 0804 000A           		btst	#$A,d4					; MJ: is the block mirrored?
   26186/   147F0 : 6704                		beq.s	loc_14A12				; MJ: if not, branch
   26187/   147F2 : 4641                		not.w	d1					; MJ: reverse bits of the X position
   26188/   147F4 : 4414                		neg.b	(a4)					; MJ: reverse the angle ID
   26189/   147F6 :                     
   26190/   147F6 :                     loc_14A12:
   26191/   147F6 : 0804 000B           		btst	#$B,d4					; MJ: is the block flipped?
   26192/   147FA : 670A                		beq.s	loc_14A22				; MJ: if not, branch
   26193/   147FC : 0614 0040           		addi.b	#$40,(a4)				; MJ: increase angle ID by 40..
   26194/   14800 : 4414                		neg.b	(a4)					; MJ: ..reverse the angle ID..
   26195/   14802 : 0414 0040           		subi.b	#$40,(a4)				; MJ: ..and subtract 40 again 
   26196/   14806 :                     
   26197/   14806 :                     loc_14A22:
   26198/   14806 : 0241 000F           		andi.w	#$F,d1					; MJ: get only within 10 (d1 is pixel based on the collision block)
   26199/   1480A : D240                		add.w	d0,d1					; MJ: add collision ID (x10) (d0 is the collision block being read)
   26200/   1480C : 45F9 0006 41A6      		lea	(CollArray1).l,a2			; MJ: load collision array
   26201/   14812 : 1032 1000           		move.b	(a2,d1.w),d0				; MJ: load solid value
   26202/   14816 : 4880                		ext.w	d0					; MJ: clear left byte
   26203/   14818 : BD44                		eor.w	d6,d4					; MJ: set ceiling/wall bits
   26204/   1481A : 0804 000B           		btst	#$B,d4					; MJ: is sonic walking on the left wall?
   26205/   1481E : 6702                		beq.s	loc_14A3E				; MJ: if not, branch
   26206/   14820 : 4440                		neg.w	d0					; MJ: reverse solid value
   26207/   14822 :                     
   26208/   14822 :                     loc_14A3E:
   26209/   14822 : 4A40                		tst.w	d0					; MJ: is the solid data null?
   26210/   14824 : 679C                		beq.s	loc_149DE				; MJ: if so, branch
   26211/   14826 : 6B16                		bmi.s	loc_14A5A				; MJ: if it's negative, branch
   26212/   14828 : 0C00 0010           		cmpi.b	#$10,d0					; MJ: is it 10?
   26213/   1482C : 671C                		beq.s	loc_14A66				; MJ: if so, branch
   26214/   1482E : 3202                		move.w	d2,d1					; MJ: load Y position
   26215/   14830 : 0241 000F           		andi.w	#$F,d1					; MJ: get only within 10 pixels
   26216/   14834 : D041                		add.w	d1,d0					; MJ: add to solid value
   26217/   14836 : 323C 000F           		move.w	#$F,d1					; MJ: set F
   26218/   1483A : 9240                		sub.w	d0,d1					; MJ: minus solid value from F
   26219/   1483C : 4E75                		rts			; d1 = position?	; MJ: return
   26220/   1483E :                     
   26221/   1483E :                     ; ===========================================================================
   26222/   1483E :                     
   26223/   1483E :                     loc_14A5A:
   26224/   1483E : 3202                		move.w	d2,d1
   26225/   14840 : 0241 000F           		andi.w	#$F,d1
   26226/   14844 : D041                		add.w	d1,d0
   26227/   14846 : 6A00 FF7A           		bpl.w	loc_149DE
   26228/   1484A :                     
   26229/   1484A :                     loc_14A66:
   26230/   1484A : 944B                		sub.w	a3,d2
   26231/   1484C : 6100 000A           		bsr.w	FindFloor2
   26232/   14850 : D44B                		add.w	a3,d2
   26233/   14852 : 0441 0010           		subi.w	#$10,d1
   26234/   14856 : 4E75                		rts	
   26235/   14858 :                     ; End of function FindFloor
   26236/   14858 :                     
   26237/   14858 :                     
   26238/   14858 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26239/   14858 :                     
   26240/   14858 :                     
   26241/   14858 :                     FindFloor2:				; XREF: FindFloor
   26242/   14858 : 6100 FED2           		bsr.w	Floor_ChkTile
   26243/   1485C : 3011                		move.w	(a1),d0
   26244/   1485E : 6100 FF38           		bsr.w	ColisionChkLayer			; MJ: check solid settings to use
   26245/   14862 : 3800                		move.w	d0,d4
   26246/   14864 : 0240 03FF           		andi.w	#$3FF,d0
   26247/   14868 : 6704                		beq.s	loc_14A86
   26248/   1486A : 0B04                		btst	d5,d4
   26249/   1486C : 660E                		bne.s	loc_14A94
   26250/   1486E :                     
   26251/   1486E :                     loc_14A86:
   26252/   1486E : 323C 000F           		move.w	#$F,d1
   26253/   14872 : 3002                		move.w	d2,d0
   26254/   14874 : 0240 000F           		andi.w	#$F,d0
   26255/   14878 : 9240                		sub.w	d0,d1
   26256/   1487A : 4E75                		rts	
   26257/   1487C :                     ; ===========================================================================
   26258/   1487C :                     
   26259/   1487C :                     loc_14A94:
   26260/   1487C : 2478 F796           		movea.l	($FFFFF796).w,a2
   26261/   14880 : 1032 0000           		move.b	(a2,d0.w),d0
   26262/   14884 : 0240 00FF           		andi.w	#$FF,d0
   26263/   14888 : 67E4                		beq.s	loc_14A86
   26264/   1488A : 45F9 0006 40A6      		lea	(AngleMap).l,a2
   26265/   14890 : 18B2 0000           		move.b	(a2,d0.w),(a4)
   26266/   14894 : E948                		lsl.w	#4,d0
   26267/   14896 : 3203                		move.w	d3,d1
   26268/   14898 : 0804 000A           		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
   26269/   1489C : 6704                		beq.s	loc_14ABA
   26270/   1489E : 4641                		not.w	d1
   26271/   148A0 : 4414                		neg.b	(a4)
   26272/   148A2 :                     
   26273/   148A2 :                     loc_14ABA:
   26274/   148A2 : 0804 000B           		btst	#$B,d4					; MJ: C to B (because S2 format has two solids)
   26275/   148A6 : 670A                		beq.s	loc_14ACA
   26276/   148A8 : 0614 0040           		addi.b	#$40,(a4)
   26277/   148AC : 4414                		neg.b	(a4)
   26278/   148AE : 0414 0040           		subi.b	#$40,(a4)
   26279/   148B2 :                     
   26280/   148B2 :                     loc_14ACA:
   26281/   148B2 : 0241 000F           		andi.w	#$F,d1
   26282/   148B6 : D240                		add.w	d0,d1
   26283/   148B8 : 45F9 0006 41A6      		lea	(CollArray1).l,a2
   26284/   148BE : 1032 1000           		move.b	(a2,d1.w),d0
   26285/   148C2 : 4880                		ext.w	d0
   26286/   148C4 : BD44                		eor.w	d6,d4
   26287/   148C6 : 0804 000B           		btst	#$B,d4					; MJ: C to B (because S2 format has two solids)
   26288/   148CA : 6702                		beq.s	loc_14AE6
   26289/   148CC : 4440                		neg.w	d0
   26290/   148CE :                     
   26291/   148CE :                     loc_14AE6:
   26292/   148CE : 4A40                		tst.w	d0
   26293/   148D0 : 679C                		beq.s	loc_14A86
   26294/   148D2 : 6B10                		bmi.s	loc_14AFC
   26295/   148D4 : 3202                		move.w	d2,d1
   26296/   148D6 : 0241 000F           		andi.w	#$F,d1
   26297/   148DA : D041                		add.w	d1,d0
   26298/   148DC : 323C 000F           		move.w	#$F,d1
   26299/   148E0 : 9240                		sub.w	d0,d1
   26300/   148E2 : 4E75                		rts	
   26301/   148E4 :                     ; ===========================================================================
   26302/   148E4 :                     
   26303/   148E4 :                     loc_14AFC:
   26304/   148E4 : 3202                		move.w	d2,d1
   26305/   148E6 : 0241 000F           		andi.w	#$F,d1
   26306/   148EA : D041                		add.w	d1,d0
   26307/   148EC : 6A00 FF80           		bpl.w	loc_14A86
   26308/   148F0 : 4641                		not.w	d1
   26309/   148F2 : 4E75                		rts	
   26310/   148F4 :                     ; End of function FindFloor2
   26311/   148F4 :                     
   26312/   148F4 :                     
   26313/   148F4 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26314/   148F4 :                     
   26315/   148F4 :                     
   26316/   148F4 :                     FindWall:
   26317/   148F4 : 6100 FE36           		bsr.w	Floor_ChkTile				; MJ: get chunk/block location
   26318/   148F8 : 3011                		move.w	(a1),d0					; MJ: load block ID from chunk
   26319/   148FA : 6100 FE9C           		bsr.w	ColisionChkLayer			; MJ: check solid settings to use
   26320/   148FE : 3800                		move.w	d0,d4					; MJ: copy to d4
   26321/   14900 : 0240 03FF           		andi.w	#$3FF,d0				; MJ: clear flip/mirror/etc data
   26322/   14904 : 6704                		beq.s	loc_14B1E				; MJ: if it was null, branch
   26323/   14906 : 0B04                		btst	d5,d4					; MJ: check solid set (C top solid | D Left/right solid)
   26324/   14908 : 660E                		bne.s	loc_14B2C				; MJ: if the specific solid is set, branch
   26325/   1490A :                     
   26326/   1490A :                     loc_14B1E:
   26327/   1490A : D64B                		add.w	a3,d3					; MJ: add 10 to X position
   26328/   1490C : 6100 0092           		bsr.w	FindWall2
   26329/   14910 : 964B                		sub.w	a3,d3					; MJ: minus 10 from X position
   26330/   14912 : 0641 0010           		addi.w	#$10,d1
   26331/   14916 : 4E75                		rts	
   26332/   14918 :                     ; ===========================================================================
   26333/   14918 :                     
   26334/   14918 :                     loc_14B2C:
   26335/   14918 : 2478 F796           		movea.l	($FFFFF796).w,a2			; MJ: load address of collision for level
   26336/   1491C : 1032 0000           		move.b	(a2,d0.w),d0				; MJ: load correct colision ID based on the block ID
   26337/   14920 : 0240 00FF           		andi.w	#$FF,d0					; MJ: keep within FF
   26338/   14924 : 67E4                		beq.s	loc_14B1E				; MJ: if it's null, branch
   26339/   14926 : 45F9 0006 40A6      		lea	(AngleMap).l,a2				; MJ: load angle map data to a2
   26340/   1492C : 18B2 0000           		move.b	(a2,d0.w),(a4)				; MJ: load angle set location based on collision ID
   26341/   14930 : E948                		lsl.w	#4,d0					; MJ: multiply by 10
   26342/   14932 : 3202                		move.w	d2,d1					; MJ: load Y position
   26343/   14934 : 0804 000B           		btst	#$B,d4					; MJ: is the block ID flipped?
   26344/   14938 : 670C                		beq.s	loc_14B5A				; MJ: if not, branch
   26345/   1493A : 4641                		not.w	d1
   26346/   1493C : 0614 0040           		addi.b	#$40,(a4)				; MJ: increase angle set by 40
   26347/   14940 : 4414                		neg.b	(a4)					; MJ: negate to opposite
   26348/   14942 : 0414 0040           		subi.b	#$40,(a4)				; MJ: decrease angle set by 40
   26349/   14946 :                     
   26350/   14946 :                     loc_14B5A:
   26351/   14946 : 0804 000A           		btst	#$A,d4					; MJ: is the block ID mirrored?
   26352/   1494A : 6702                		beq.s	loc_14B62				; MJ: if not, branch
   26353/   1494C : 4414                		neg.b	(a4)					; MJ: negate to opposite
   26354/   1494E :                     
   26355/   1494E :                     loc_14B62:
   26356/   1494E : 0241 000F           		andi.w	#$F,d1
   26357/   14952 : D240                		add.w	d0,d1
   26358/   14954 : 45F9 0006 51A6      		lea	(CollArray2).l,a2
   26359/   1495A : 1032 1000           		move.b	(a2,d1.w),d0
   26360/   1495E : 4880                		ext.w	d0
   26361/   14960 : BD44                		eor.w	d6,d4
   26362/   14962 : 0804 000A           		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
   26363/   14966 : 6702                		beq.s	loc_14B7E
   26364/   14968 : 4440                		neg.w	d0
   26365/   1496A :                     
   26366/   1496A :                     loc_14B7E:
   26367/   1496A : 4A40                		tst.w	d0
   26368/   1496C : 679C                		beq.s	loc_14B1E
   26369/   1496E : 6B16                		bmi.s	loc_14B9A
   26370/   14970 : 0C00 0010           		cmpi.b	#$10,d0
   26371/   14974 : 671C                		beq.s	loc_14BA6
   26372/   14976 : 3203                		move.w	d3,d1
   26373/   14978 : 0241 000F           		andi.w	#$F,d1
   26374/   1497C : D041                		add.w	d1,d0
   26375/   1497E : 323C 000F           		move.w	#$F,d1
   26376/   14982 : 9240                		sub.w	d0,d1
   26377/   14984 : 4E75                		rts	
   26378/   14986 :                     ; ===========================================================================
   26379/   14986 :                     
   26380/   14986 :                     loc_14B9A:
   26381/   14986 : 3203                		move.w	d3,d1
   26382/   14988 : 0241 000F           		andi.w	#$F,d1
   26383/   1498C : D041                		add.w	d1,d0
   26384/   1498E : 6A00 FF7A           		bpl.w	loc_14B1E
   26385/   14992 :                     
   26386/   14992 :                     loc_14BA6:
   26387/   14992 : 964B                		sub.w	a3,d3
   26388/   14994 : 6100 000A           		bsr.w	FindWall2
   26389/   14998 : D64B                		add.w	a3,d3
   26390/   1499A : 0441 0010           		subi.w	#$10,d1
   26391/   1499E : 4E75                		rts	
   26392/   149A0 :                     ; End of function FindWall
   26393/   149A0 :                     
   26394/   149A0 :                     
   26395/   149A0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26396/   149A0 :                     
   26397/   149A0 :                     
   26398/   149A0 :                     FindWall2:				; XREF: FindWall
   26399/   149A0 : 6100 FD8A           		bsr.w	Floor_ChkTile
   26400/   149A4 : 3011                		move.w	(a1),d0
   26401/   149A6 : 6100 FDF0           		bsr.w	ColisionChkLayer			; MJ: check solid settings to use
   26402/   149AA : 3800                		move.w	d0,d4
   26403/   149AC : 0240 03FF           		andi.w	#$3FF,d0
   26404/   149B0 : 6704                		beq.s	loc_14BC6
   26405/   149B2 : 0B04                		btst	d5,d4
   26406/   149B4 : 660E                		bne.s	loc_14BD4
   26407/   149B6 :                     
   26408/   149B6 :                     loc_14BC6:
   26409/   149B6 : 323C 000F           		move.w	#$F,d1
   26410/   149BA : 3003                		move.w	d3,d0
   26411/   149BC : 0240 000F           		andi.w	#$F,d0
   26412/   149C0 : 9240                		sub.w	d0,d1
   26413/   149C2 : 4E75                		rts	
   26414/   149C4 :                     ; ===========================================================================
   26415/   149C4 :                     
   26416/   149C4 :                     loc_14BD4:
   26417/   149C4 : 2478 F796           		movea.l	($FFFFF796).w,a2
   26418/   149C8 : 1032 0000           		move.b	(a2,d0.w),d0
   26419/   149CC : 0240 00FF           		andi.w	#$FF,d0
   26420/   149D0 : 67E4                		beq.s	loc_14BC6
   26421/   149D2 : 45F9 0006 40A6      		lea	(AngleMap).l,a2
   26422/   149D8 : 18B2 0000           		move.b	(a2,d0.w),(a4)
   26423/   149DC : E948                		lsl.w	#4,d0
   26424/   149DE : 3202                		move.w	d2,d1
   26425/   149E0 : 0804 000B           		btst	#$B,d4					; MJ: C to B (because S2 format has two solids)
   26426/   149E4 : 670C                		beq.s	loc_14C02
   26427/   149E6 : 4641                		not.w	d1
   26428/   149E8 : 0614 0040           		addi.b	#$40,(a4)
   26429/   149EC : 4414                		neg.b	(a4)
   26430/   149EE : 0414 0040           		subi.b	#$40,(a4)
   26431/   149F2 :                     
   26432/   149F2 :                     loc_14C02:
   26433/   149F2 : 0804 000A           		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
   26434/   149F6 : 6702                		beq.s	loc_14C0A
   26435/   149F8 : 4414                		neg.b	(a4)
   26436/   149FA :                     
   26437/   149FA :                     loc_14C0A:
   26438/   149FA : 0241 000F           		andi.w	#$F,d1
   26439/   149FE : D240                		add.w	d0,d1
   26440/   14A00 : 45F9 0006 51A6      		lea	(CollArray2).l,a2
   26441/   14A06 : 1032 1000           		move.b	(a2,d1.w),d0
   26442/   14A0A : 4880                		ext.w	d0
   26443/   14A0C : BD44                		eor.w	d6,d4
   26444/   14A0E : 0804 000A           		btst	#$A,d4					; MJ: B to A (because S2 format has two solids)
   26445/   14A12 : 6702                		beq.s	loc_14C26
   26446/   14A14 : 4440                		neg.w	d0
   26447/   14A16 :                     
   26448/   14A16 :                     loc_14C26:
   26449/   14A16 : 4A40                		tst.w	d0
   26450/   14A18 : 679C                		beq.s	loc_14BC6
   26451/   14A1A : 6B10                		bmi.s	loc_14C3C
   26452/   14A1C : 3203                		move.w	d3,d1
   26453/   14A1E : 0241 000F           		andi.w	#$F,d1
   26454/   14A22 : D041                		add.w	d1,d0
   26455/   14A24 : 323C 000F           		move.w	#$F,d1
   26456/   14A28 : 9240                		sub.w	d0,d1
   26457/   14A2A : 4E75                		rts	
   26458/   14A2C :                     ; ===========================================================================
   26459/   14A2C :                     
   26460/   14A2C :                     loc_14C3C:
   26461/   14A2C : 3203                		move.w	d3,d1
   26462/   14A2E : 0241 000F           		andi.w	#$F,d1
   26463/   14A32 : D041                		add.w	d1,d0
   26464/   14A34 : 6A00 FF80           		bpl.w	loc_14BC6
   26465/   14A38 : 4641                		not.w	d1
   26466/   14A3A : 4E75                		rts	
   26467/   14A3C :                     ; End of function FindWall2
   26468/   14A3C :                     
   26469/   14A3C :                     ; ---------------------------------------------------------------------------
   26470/   14A3C :                     ; Unused floor/wall subroutine - logs something	to do with collision
   26471/   14A3C :                     ; ---------------------------------------------------------------------------
   26472/   14A3C :                     
   26473/   14A3C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26474/   14A3C :                     
   26475/   14A3C :                     
   26476/   14A3C :                     FloorLog_Unk:				; XREF: Level
   26477/   14A3C : 4E75                		rts	
   26478/   14A3E :                     
   26479/   14A3E : 43F9 0006 41A6      		lea	(CollArray1).l,a1
   26480/   14A44 : 45F9 0006 41A6      		lea	(CollArray1).l,a2
   26481/   14A4A : 363C 00FF           		move.w	#$FF,d3
   26482/   14A4E :                     
   26483/   14A4E :                     loc_14C5E:
   26484/   14A4E : 7A10                		moveq	#$10,d5
   26485/   14A50 : 343C 000F           		move.w	#$F,d2
   26486/   14A54 :                     
   26487/   14A54 :                     loc_14C64:
   26488/   14A54 : 7800                		moveq	#0,d4
   26489/   14A56 : 323C 000F           		move.w	#$F,d1
   26490/   14A5A :                     
   26491/   14A5A :                     loc_14C6A:
   26492/   14A5A : 3019                		move.w	(a1)+,d0
   26493/   14A5C : EAA8                		lsr.l	d5,d0
   26494/   14A5E : D944                		addx.w	d4,d4
   26495/   14A60 : 51C9 FFF8           		dbf	d1,loc_14C6A
   26496/   14A64 :                     
   26497/   14A64 : 34C4                		move.w	d4,(a2)+
   26498/   14A66 : 92FC 0020           		suba.w	#$20,a1
   26499/   14A6A : 5345                		subq.w	#1,d5
   26500/   14A6C : 51CA FFE6           		dbf	d2,loc_14C64
   26501/   14A70 :                     
   26502/   14A70 : D2FC 0020           		adda.w	#$20,a1
   26503/   14A74 : 51CB FFD8           		dbf	d3,loc_14C5E
   26504/   14A78 :                     
   26505/   14A78 : 43F9 0006 41A6      		lea	(CollArray1).l,a1
   26506/   14A7E : 45F9 0006 51A6      		lea	(CollArray2).l,a2
   26507/   14A84 : 610C                		bsr.s	FloorLog_Unk2
   26508/   14A86 : 43F9 0006 41A6      		lea	(CollArray1).l,a1
   26509/   14A8C : 45F9 0006 41A6      		lea	(CollArray1).l,a2
   26510/   14A92 :                     
   26511/   14A92 :                     ; End of function FloorLog_Unk
   26512/   14A92 :                     
   26513/   14A92 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26514/   14A92 :                     
   26515/   14A92 :                     
   26516/   14A92 :                     FloorLog_Unk2:				; XREF: FloorLog_Unk
   26517/   14A92 : 363C 0FFF           		move.w	#$FFF,d3
   26518/   14A96 :                     
   26519/   14A96 :                     loc_14CA6:
   26520/   14A96 : 7400                		moveq	#0,d2
   26521/   14A98 : 323C 000F           		move.w	#$F,d1
   26522/   14A9C : 3019                		move.w	(a1)+,d0
   26523/   14A9E : 6724                		beq.s	loc_14CD4
   26524/   14AA0 : 6B0C                		bmi.s	loc_14CBE
   26525/   14AA2 :                     
   26526/   14AA2 :                     loc_14CB2:
   26527/   14AA2 : E248                		lsr.w	#1,d0
   26528/   14AA4 : 6402                		bcc.s	loc_14CB8
   26529/   14AA6 : 5202                		addq.b	#1,d2
   26530/   14AA8 :                     
   26531/   14AA8 :                     loc_14CB8:
   26532/   14AA8 : 51C9 FFF8           		dbf	d1,loc_14CB2
   26533/   14AAC :                     
   26534/   14AAC : 6018                		bra.s	loc_14CD6
   26535/   14AAE :                     ; ===========================================================================
   26536/   14AAE :                     
   26537/   14AAE :                     loc_14CBE:
   26538/   14AAE : 0C40 FFFF           		cmpi.w	#-1,d0
   26539/   14AB2 : 670C                		beq.s	loc_14CD0
   26540/   14AB4 :                     
   26541/   14AB4 :                     loc_14CC4:
   26542/   14AB4 : E348                		lsl.w	#1,d0
   26543/   14AB6 : 6402                		bcc.s	loc_14CCA
   26544/   14AB8 : 5302                		subq.b	#1,d2
   26545/   14ABA :                     
   26546/   14ABA :                     loc_14CCA:
   26547/   14ABA : 51C9 FFF8           		dbf	d1,loc_14CC4
   26548/   14ABE :                     
   26549/   14ABE : 6006                		bra.s	loc_14CD6
   26550/   14AC0 :                     ; ===========================================================================
   26551/   14AC0 :                     
   26552/   14AC0 :                     loc_14CD0:
   26553/   14AC0 : 303C 0010           		move.w	#$10,d0
   26554/   14AC4 :                     
   26555/   14AC4 :                     loc_14CD4:
   26556/   14AC4 : 3400                		move.w	d0,d2
   26557/   14AC6 :                     
   26558/   14AC6 :                     loc_14CD6:
   26559/   14AC6 : 14C2                		move.b	d2,(a2)+
   26560/   14AC8 : 51CB FFCC           		dbf	d3,loc_14CA6
   26561/   14ACC :                     
   26562/   14ACC : 4E75                		rts	
   26563/   14ACE :                     
   26564/   14ACE :                     ; End of function FloorLog_Unk2
   26565/   14ACE :                     
   26566/   14ACE :                     
   26567/   14ACE :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26568/   14ACE :                     
   26569/   14ACE :                     
   26570/   14ACE :                     Sonic_WalkSpeed:			; XREF: Sonic_Move
   26571/   14ACE : 2628 0008           		move.l	8(a0),d3
   26572/   14AD2 : 2428 000C           		move.l	$C(a0),d2
   26573/   14AD6 : 3228 0010           		move.w	$10(a0),d1
   26574/   14ADA : 48C1                		ext.l	d1
   26575/   14ADC : E181                		asl.l	#8,d1
   26576/   14ADE : D681                		add.l	d1,d3
   26577/   14AE0 : 3228 0012           		move.w	$12(a0),d1
   26578/   14AE4 : 48C1                		ext.l	d1
   26579/   14AE6 : E181                		asl.l	#8,d1
   26580/   14AE8 : D481                		add.l	d1,d2
   26581/   14AEA : 4842                		swap	d2
   26582/   14AEC : 4843                		swap	d3
   26583/   14AEE : 11C0 F768           		move.b	d0,($FFFFF768).w
   26584/   14AF2 : 11C0 F76A           		move.b	d0,($FFFFF76A).w
   26585/   14AF6 : 1200                		move.b	d0,d1
   26586/   14AF8 : 0600 0020           		addi.b	#$20,d0
   26587/   14AFC : 6A0C                		bpl.s	loc_14D1A
   26588/   14AFE : 1001                		move.b	d1,d0
   26589/   14B00 : 6A02                		bpl.s	loc_14D14
   26590/   14B02 : 5300                		subq.b	#1,d0
   26591/   14B04 :                     
   26592/   14B04 :                     loc_14D14:
   26593/   14B04 : 0600 0020           		addi.b	#$20,d0
   26594/   14B08 : 600A                		bra.s	loc_14D24
   26595/   14B0A :                     ; ===========================================================================
   26596/   14B0A :                     
   26597/   14B0A :                     loc_14D1A:
   26598/   14B0A : 1001                		move.b	d1,d0
   26599/   14B0C : 6A02                		bpl.s	loc_14D20
   26600/   14B0E : 5200                		addq.b	#1,d0
   26601/   14B10 :                     
   26602/   14B10 :                     loc_14D20:
   26603/   14B10 : 0600 001F           		addi.b	#$1F,d0
   26604/   14B14 :                     
   26605/   14B14 :                     loc_14D24:
   26606/   14B14 : 0200 00C0           		andi.b	#$C0,d0
   26607/   14B18 : 6700 00C6           		beq.w	loc_14DF0
   26608/   14B1C : 0C00 0080           		cmpi.b	#$80,d0
   26609/   14B20 : 6700 024A           		beq.w	loc_14F7C
   26610/   14B24 : 0201 0038           		andi.b	#$38,d1
   26611/   14B28 : 6602                		bne.s	loc_14D3C
   26612/   14B2A : 5042                		addq.w	#8,d2
   26613/   14B2C :                     
   26614/   14B2C :                     loc_14D3C:
   26615/   14B2C : 0C00 0040           		cmpi.b	#$40,d0
   26616/   14B30 : 6700 0308           		beq.w	loc_1504A
   26617/   14B34 : 6000 0176           		bra.w	loc_14EBC
   26618/   14B38 :                     
   26619/   14B38 :                     ; End of function Sonic_WalkSpeed
   26620/   14B38 :                     
   26621/   14B38 :                     
   26622/   14B38 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26623/   14B38 :                     
   26624/   14B38 :                     
   26625/   14B38 :                     sub_14D48:				; XREF: Sonic_Jump
   26626/   14B38 : 11C0 F768           		move.b	d0,($FFFFF768).w
   26627/   14B3C : 11C0 F76A           		move.b	d0,($FFFFF76A).w
   26628/   14B40 : 0600 0020           		addi.b	#$20,d0
   26629/   14B44 : 0200 00C0           		andi.b	#$C0,d0
   26630/   14B48 : 0C00 0040           		cmpi.b	#$40,d0
   26631/   14B4C : 6700 0278           		beq.w	loc_14FD6
   26632/   14B50 : 0C00 0080           		cmpi.b	#$80,d0
   26633/   14B54 : 6700 01A2           		beq.w	Sonic_DontRunOnWalls
   26634/   14B58 : 0C00 00C0           		cmpi.b	#$C0,d0
   26635/   14B5C : 6700 00E2           		beq.w	sub_14E50
   26636/   14B60 :                     
   26637/   14B60 :                     ; End of function sub_14D48
   26638/   14B60 :                     
   26639/   14B60 :                     ; ---------------------------------------------------------------------------
   26640/   14B60 :                     ; Subroutine to	make Sonic land	on the floor after jumping
   26641/   14B60 :                     ; ---------------------------------------------------------------------------
   26642/   14B60 :                     
   26643/   14B60 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26644/   14B60 :                     
   26645/   14B60 :                     
   26646/   14B60 :                     Sonic_HitFloor:				; XREF: Sonic_Floor
   26647/   14B60 : 3428 000C           		move.w	$C(a0),d2
   26648/   14B64 : 3628 0008           		move.w	8(a0),d3
   26649/   14B68 : 7000                		moveq	#0,d0
   26650/   14B6A : 1028 0016           		move.b	$16(a0),d0
   26651/   14B6E : 4880                		ext.w	d0
   26652/   14B70 : D440                		add.w	d0,d2
   26653/   14B72 : 1028 0017           		move.b	$17(a0),d0
   26654/   14B76 : 4880                		ext.w	d0
   26655/   14B78 : D640                		add.w	d0,d3
   26656/   14B7A : 49F8 F768           		lea	($FFFFF768).w,a4
   26657/   14B7E : 367C 0010           		movea.w	#$10,a3
   26658/   14B82 : 3C3C 0000           		move.w	#0,d6
   26659/   14B86 : 7A0C                		moveq	#$C,d5					; MJ: set solid type to check
   26660/   14B88 : 6100 FC24           		bsr.w	FindFloor				; MJ: check solidity
   26661/   14B8C : 3F01                		move.w	d1,-(sp)
   26662/   14B8E : 3428 000C           		move.w	$C(a0),d2
   26663/   14B92 : 3628 0008           		move.w	8(a0),d3
   26664/   14B96 : 7000                		moveq	#0,d0
   26665/   14B98 : 1028 0016           		move.b	$16(a0),d0
   26666/   14B9C : 4880                		ext.w	d0
   26667/   14B9E : D440                		add.w	d0,d2
   26668/   14BA0 : 1028 0017           		move.b	$17(a0),d0
   26669/   14BA4 : 4880                		ext.w	d0
   26670/   14BA6 : 9640                		sub.w	d0,d3
   26671/   14BA8 : 49F8 F76A           		lea	($FFFFF76A).w,a4
   26672/   14BAC : 367C 0010           		movea.w	#$10,a3
   26673/   14BB0 : 3C3C 0000           		move.w	#0,d6
   26674/   14BB4 : 7A0C                		moveq	#$C,d5					; MJ: set solid type to check
   26675/   14BB6 : 6100 FBF6           		bsr.w	FindFloor				; MJ: check solidity
   26676/   14BBA : 301F                		move.w	(sp)+,d0
   26677/   14BBC : 143C 0000           		move.b	#0,d2
   26678/   14BC0 :                     
   26679/   14BC0 :                     loc_14DD0:
   26680/   14BC0 : 1638 F76A           		move.b	($FFFFF76A).w,d3
   26681/   14BC4 : B240                		cmp.w	d0,d1
   26682/   14BC6 : 6F06                		ble.s	loc_14DDE
   26683/   14BC8 : 1638 F768           		move.b	($FFFFF768).w,d3
   26684/   14BCC : C141                		exg	d0,d1
   26685/   14BCE :                     
   26686/   14BCE :                     loc_14DDE:
   26687/   14BCE : 0803 0000           		btst	#0,d3
   26688/   14BD2 : 6702                		beq.s	locret_14DE6
   26689/   14BD4 : 1602                		move.b	d2,d3
   26690/   14BD6 :                     
   26691/   14BD6 :                     locret_14DE6:
   26692/   14BD6 : 4E75                		rts	
   26693/   14BD8 :                     
   26694/   14BD8 :                     ; End of function Sonic_HitFloor
   26695/   14BD8 :                     
   26696/   14BD8 :                     ; ===========================================================================
   26697/   14BD8 : 3428 000C           		move.w	$C(a0),d2
   26698/   14BDC : 3628 0008           		move.w	8(a0),d3
   26699/   14BE0 :                     
   26700/   14BE0 :                     loc_14DF0:				; XREF: Sonic_WalkSpeed
   26701/   14BE0 : 0642 000A           		addi.w	#$A,d2
   26702/   14BE4 : 49F8 F768           		lea	($FFFFF768).w,a4
   26703/   14BE8 : 367C 0010           		movea.w	#$10,a3
   26704/   14BEC : 3C3C 0000           		move.w	#0,d6
   26705/   14BF0 : 7A0D                		moveq	#$D,d5					; MJ: set solid type to check
   26706/   14BF2 : 6100 FBBA           		bsr.w	FindFloor				; MJ: check solidity
   26707/   14BF6 : 143C 0000           		move.b	#0,d2
   26708/   14BFA :                     
   26709/   14BFA :                     loc_14E0A:				; XREF: sub_14EB4
   26710/   14BFA : 1638 F768           		move.b	($FFFFF768).w,d3
   26711/   14BFE : 0803 0000           		btst	#0,d3
   26712/   14C02 : 6702                		beq.s	locret_14E16
   26713/   14C04 : 1602                		move.b	d2,d3
   26714/   14C06 :                     
   26715/   14C06 :                     locret_14E16:
   26716/   14C06 : 4E75                		rts	
   26717/   14C08 :                     
   26718/   14C08 :                     ; ---------------------------------------------------------------------------
   26719/   14C08 :                     ; Subroutine allowing objects to interact with the floor
   26720/   14C08 :                     ; ---------------------------------------------------------------------------
   26721/   14C08 :                     
   26722/   14C08 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26723/   14C08 :                     
   26724/   14C08 :                     
   26725/   14C08 :                     ObjHitFloor:
   26726/   14C08 : 3628 0008           		move.w	8(a0),d3
   26727/   14C0C :                     
   26728/   14C0C :                     ; End of function ObjHitFloor
   26729/   14C0C :                     
   26730/   14C0C :                     
   26731/   14C0C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26732/   14C0C :                     
   26733/   14C0C :                     
   26734/   14C0C :                     ObjHitFloor2:
   26735/   14C0C : 3428 000C           		move.w	$C(a0),d2
   26736/   14C10 : 7000                		moveq	#0,d0
   26737/   14C12 : 1028 0016           		move.b	$16(a0),d0
   26738/   14C16 : 4880                		ext.w	d0
   26739/   14C18 : D440                		add.w	d0,d2
   26740/   14C1A : 49F8 F768           		lea	($FFFFF768).w,a4
   26741/   14C1E : 18BC 0000           		move.b	#0,(a4)
   26742/   14C22 : 367C 0010           		movea.w	#$10,a3
   26743/   14C26 : 3C3C 0000           		move.w	#0,d6
   26744/   14C2A : 7A0C                		moveq	#$C,d5					; MJ: set solid type to check
   26745/   14C2C : 6100 FB80           		bsr.w	FindFloor				; MJ: check solidity
   26746/   14C30 : 1638 F768           		move.b	($FFFFF768).w,d3
   26747/   14C34 : 0803 0000           		btst	#0,d3
   26748/   14C38 : 6704                		beq.s	locret_14E4E
   26749/   14C3A : 163C 0000           		move.b	#0,d3
   26750/   14C3E :                     
   26751/   14C3E :                     locret_14E4E:
   26752/   14C3E : 4E75                		rts	
   26753/   14C40 :                     ; End of function ObjHitFloor2
   26754/   14C40 :                     
   26755/   14C40 :                     
   26756/   14C40 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26757/   14C40 :                     
   26758/   14C40 :                     
   26759/   14C40 :                     sub_14E50:				; XREF: sub_14D48
   26760/   14C40 : 3428 000C           		move.w	$C(a0),d2
   26761/   14C44 : 3628 0008           		move.w	8(a0),d3
   26762/   14C48 : 7000                		moveq	#0,d0
   26763/   14C4A : 1028 0017           		move.b	$17(a0),d0
   26764/   14C4E : 4880                		ext.w	d0
   26765/   14C50 : 9440                		sub.w	d0,d2
   26766/   14C52 : 1028 0016           		move.b	$16(a0),d0
   26767/   14C56 : 4880                		ext.w	d0
   26768/   14C58 : D640                		add.w	d0,d3
   26769/   14C5A : 49F8 F768           		lea	($FFFFF768).w,a4
   26770/   14C5E : 367C 0010           		movea.w	#$10,a3
   26771/   14C62 : 3C3C 0000           		move.w	#0,d6
   26772/   14C66 : 7A0D                		moveq	#$D,d5					; MJ: set solid type to check
   26773/   14C68 : 6100 FC8A           		bsr.w	FindWall				; MJ: check solidity
   26774/   14C6C : 3F01                		move.w	d1,-(sp)
   26775/   14C6E : 3428 000C           		move.w	$C(a0),d2
   26776/   14C72 : 3628 0008           		move.w	8(a0),d3
   26777/   14C76 : 7000                		moveq	#0,d0
   26778/   14C78 : 1028 0017           		move.b	$17(a0),d0
   26779/   14C7C : 4880                		ext.w	d0
   26780/   14C7E : D440                		add.w	d0,d2
   26781/   14C80 : 1028 0016           		move.b	$16(a0),d0
   26782/   14C84 : 4880                		ext.w	d0
   26783/   14C86 : D640                		add.w	d0,d3
   26784/   14C88 : 49F8 F76A           		lea	($FFFFF76A).w,a4
   26785/   14C8C : 367C 0010           		movea.w	#$10,a3
   26786/   14C90 : 3C3C 0000           		move.w	#0,d6
   26787/   14C94 : 7A0D                		moveq	#$D,d5					; MJ: set solid type to check
   26788/   14C96 : 6100 FC5C           		bsr.w	FindWall				; MJ: check solidity
   26789/   14C9A : 301F                		move.w	(sp)+,d0
   26790/   14C9C : 143C 00C0           		move.b	#-$40,d2
   26791/   14CA0 : 6000 FF1E           		bra.w	loc_14DD0
   26792/   14CA4 :                     
   26793/   14CA4 :                     ; End of function sub_14E50
   26794/   14CA4 :                     
   26795/   14CA4 :                     
   26796/   14CA4 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26797/   14CA4 :                     
   26798/   14CA4 :                     
   26799/   14CA4 :                     sub_14EB4:				; XREF: Sonic_Floor
   26800/   14CA4 : 3428 000C           		move.w	$C(a0),d2
   26801/   14CA8 : 3628 0008           		move.w	8(a0),d3
   26802/   14CAC :                     
   26803/   14CAC :                     loc_14EBC:
   26804/   14CAC : 0643 000A           		addi.w	#$A,d3
   26805/   14CB0 : 49F8 F768           		lea	($FFFFF768).w,a4
   26806/   14CB4 : 367C 0010           		movea.w	#$10,a3
   26807/   14CB8 : 3C3C 0000           		move.w	#0,d6
   26808/   14CBC : 7A0D                		moveq	#$D,d5					; MJ: set solid type to check
   26809/   14CBE : 6100 FC34           		bsr.w	FindWall				; MJ: check solidity
   26810/   14CC2 : 143C 00C0           		move.b	#-$40,d2
   26811/   14CC6 : 6000 FF32           		bra.w	loc_14E0A
   26812/   14CCA :                     
   26813/   14CCA :                     ; End of function sub_14EB4
   26814/   14CCA :                     
   26815/   14CCA :                     ; ---------------------------------------------------------------------------
   26816/   14CCA :                     ; Subroutine to	detect when an object hits a wall to its right
   26817/   14CCA :                     ; ---------------------------------------------------------------------------
   26818/   14CCA :                     
   26819/   14CCA :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26820/   14CCA :                     
   26821/   14CCA :                     
   26822/   14CCA :                     ObjHitWallRight:
   26823/   14CCA : D668 0008           		add.w	8(a0),d3
   26824/   14CCE : 3428 000C           		move.w	$C(a0),d2
   26825/   14CD2 : 49F8 F768           		lea	($FFFFF768).w,a4
   26826/   14CD6 : 18BC 0000           		move.b	#0,(a4)
   26827/   14CDA : 367C 0010           		movea.w	#$10,a3
   26828/   14CDE : 3C3C 0000           		move.w	#0,d6
   26829/   14CE2 : 7A0D                		moveq	#$D,d5					; MJ: set solid type to check
   26830/   14CE4 : 6100 FC0E           		bsr.w	FindWall				; MJ: check solidity
   26831/   14CE8 : 1638 F768           		move.b	($FFFFF768).w,d3
   26832/   14CEC : 0803 0000           		btst	#0,d3
   26833/   14CF0 : 6704                		beq.s	locret_14F06
   26834/   14CF2 : 163C 00C0           		move.b	#-$40,d3
   26835/   14CF6 :                     
   26836/   14CF6 :                     locret_14F06:
   26837/   14CF6 : 4E75                		rts	
   26838/   14CF8 :                     
   26839/   14CF8 :                     ; End of function ObjHitWallRight
   26840/   14CF8 :                     
   26841/   14CF8 :                     ; ---------------------------------------------------------------------------
   26842/   14CF8 :                     ; Subroutine preventing	Sonic from running on walls and	ceilings when he
   26843/   14CF8 :                     ; touches them
   26844/   14CF8 :                     ; ---------------------------------------------------------------------------
   26845/   14CF8 :                     
   26846/   14CF8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26847/   14CF8 :                     
   26848/   14CF8 :                     
   26849/   14CF8 :                     Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
   26850/   14CF8 : 3428 000C           		move.w	$C(a0),d2
   26851/   14CFC : 3628 0008           		move.w	8(a0),d3
   26852/   14D00 : 7000                		moveq	#0,d0
   26853/   14D02 : 1028 0016           		move.b	$16(a0),d0
   26854/   14D06 : 4880                		ext.w	d0
   26855/   14D08 : 9440                		sub.w	d0,d2
   26856/   14D0A : 0A42 000F           		eori.w	#$F,d2
   26857/   14D0E : 1028 0017           		move.b	$17(a0),d0
   26858/   14D12 : 4880                		ext.w	d0
   26859/   14D14 : D640                		add.w	d0,d3
   26860/   14D16 : 49F8 F768           		lea	($FFFFF768).w,a4
   26861/   14D1A : 367C FFF0           		movea.w	#-$10,a3
   26862/   14D1E : 3C3C 0800           		move.w	#$0800,d6
   26863/   14D22 : 7A0D                		moveq	#$D,d5					; MJ: set solid type to check
   26864/   14D24 : 6100 FA88           		bsr.w	FindFloor				; MJ: check solidity
   26865/   14D28 : 3F01                		move.w	d1,-(sp)
   26866/   14D2A : 3428 000C           		move.w	$C(a0),d2
   26867/   14D2E : 3628 0008           		move.w	8(a0),d3
   26868/   14D32 : 7000                		moveq	#0,d0
   26869/   14D34 : 1028 0016           		move.b	$16(a0),d0
   26870/   14D38 : 4880                		ext.w	d0
   26871/   14D3A : 9440                		sub.w	d0,d2
   26872/   14D3C : 0A42 000F           		eori.w	#$F,d2
   26873/   14D40 : 1028 0017           		move.b	$17(a0),d0
   26874/   14D44 : 4880                		ext.w	d0
   26875/   14D46 : 9640                		sub.w	d0,d3
   26876/   14D48 : 49F8 F76A           		lea	($FFFFF76A).w,a4
   26877/   14D4C : 367C FFF0           		movea.w	#-$10,a3
   26878/   14D50 : 3C3C 0800           		move.w	#$0800,d6
   26879/   14D54 : 7A0D                		moveq	#$D,d5					; MJ: set solid type to check
   26880/   14D56 : 6100 FA56           		bsr.w	FindFloor				; MJ: check solidity
   26881/   14D5A : 301F                		move.w	(sp)+,d0
   26882/   14D5C : 143C 0080           		move.b	#-$80,d2
   26883/   14D60 : 6000 FE5E           		bra.w	loc_14DD0
   26884/   14D64 :                     ; End of function Sonic_DontRunOnWalls
   26885/   14D64 :                     
   26886/   14D64 :                     ; ===========================================================================
   26887/   14D64 : 3428 000C           		move.w	$C(a0),d2
   26888/   14D68 : 3628 0008           		move.w	8(a0),d3
   26889/   14D6C :                     
   26890/   14D6C :                     loc_14F7C:
   26891/   14D6C : 0442 000A           		subi.w	#$A,d2
   26892/   14D70 : 0A42 000F           		eori.w	#$F,d2
   26893/   14D74 : 49F8 F768           		lea	($FFFFF768).w,a4
   26894/   14D78 : 367C FFF0           		movea.w	#-$10,a3
   26895/   14D7C : 3C3C 0800           		move.w	#$0800,d6
   26896/   14D80 : 7A0D                		moveq	#$D,d5					; MJ: set solid type to check
   26897/   14D82 : 6100 FA2A           		bsr.w	FindFloor				; MJ: check solidity
   26898/   14D86 : 143C 0080           		move.b	#-$80,d2
   26899/   14D8A : 6000 FE6E           		bra.w	loc_14E0A
   26900/   14D8E :                     
   26901/   14D8E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26902/   14D8E :                     
   26903/   14D8E :                     
   26904/   14D8E :                     ObjHitCeiling:
   26905/   14D8E : 3428 000C           		move.w	$C(a0),d2
   26906/   14D92 : 3628 0008           		move.w	8(a0),d3
   26907/   14D96 : 7000                		moveq	#0,d0
   26908/   14D98 : 1028 0016           		move.b	$16(a0),d0
   26909/   14D9C : 4880                		ext.w	d0
   26910/   14D9E : 9440                		sub.w	d0,d2
   26911/   14DA0 : 0A42 000F           		eori.w	#$F,d2
   26912/   14DA4 : 49F8 F768           		lea	($FFFFF768).w,a4
   26913/   14DA8 : 367C FFF0           		movea.w	#-$10,a3
   26914/   14DAC : 3C3C 0800           		move.w	#$0800,d6
   26915/   14DB0 : 7A0D                		moveq	#$D,d5					; MJ: set solid type to check
   26916/   14DB2 : 6100 F9FA           		bsr.w	FindFloor				; MJ: check solidity
   26917/   14DB6 : 1638 F768           		move.b	($FFFFF768).w,d3
   26918/   14DBA : 0803 0000           		btst	#0,d3
   26919/   14DBE : 6704                		beq.s	locret_14FD4
   26920/   14DC0 : 163C 0080           		move.b	#-$80,d3
   26921/   14DC4 :                     
   26922/   14DC4 :                     locret_14FD4:
   26923/   14DC4 : 4E75                		rts	
   26924/   14DC6 :                     ; End of function ObjHitCeiling
   26925/   14DC6 :                     
   26926/   14DC6 :                     ; ===========================================================================
   26927/   14DC6 :                     
   26928/   14DC6 :                     loc_14FD6:				; XREF: sub_14D48
   26929/   14DC6 : 3428 000C           		move.w	$C(a0),d2
   26930/   14DCA : 3628 0008           		move.w	8(a0),d3
   26931/   14DCE : 7000                		moveq	#0,d0
   26932/   14DD0 : 1028 0017           		move.b	$17(a0),d0
   26933/   14DD4 : 4880                		ext.w	d0
   26934/   14DD6 : 9440                		sub.w	d0,d2
   26935/   14DD8 : 1028 0016           		move.b	$16(a0),d0
   26936/   14DDC : 4880                		ext.w	d0
   26937/   14DDE : 9640                		sub.w	d0,d3
   26938/   14DE0 : 0A43 000F           		eori.w	#$F,d3
   26939/   14DE4 : 49F8 F768           		lea	($FFFFF768).w,a4
   26940/   14DE8 : 367C FFF0           		movea.w	#-$10,a3
   26941/   14DEC : 3C3C 0400           		move.w	#$400,d6
   26942/   14DF0 : 7A0D                		moveq	#$D,d5					; MJ: set solid type to check
   26943/   14DF2 : 6100 FB00           		bsr.w	FindWall				; MJ: check solidity
   26944/   14DF6 : 3F01                		move.w	d1,-(sp)
   26945/   14DF8 : 3428 000C           		move.w	$C(a0),d2
   26946/   14DFC : 3628 0008           		move.w	8(a0),d3
   26947/   14E00 : 7000                		moveq	#0,d0
   26948/   14E02 : 1028 0017           		move.b	$17(a0),d0
   26949/   14E06 : 4880                		ext.w	d0
   26950/   14E08 : D440                		add.w	d0,d2
   26951/   14E0A : 1028 0016           		move.b	$16(a0),d0
   26952/   14E0E : 4880                		ext.w	d0
   26953/   14E10 : 9640                		sub.w	d0,d3
   26954/   14E12 : 0A43 000F           		eori.w	#$F,d3
   26955/   14E16 : 49F8 F76A           		lea	($FFFFF76A).w,a4
   26956/   14E1A : 367C FFF0           		movea.w	#-$10,a3
   26957/   14E1E : 3C3C 0400           		move.w	#$400,d6
   26958/   14E22 : 7A0D                		moveq	#$D,d5					; MJ: set solid type to check
   26959/   14E24 : 6100 FACE           		bsr.w	FindWall				; MJ: check solidity
   26960/   14E28 : 301F                		move.w	(sp)+,d0
   26961/   14E2A : 143C 0040           		move.b	#$40,d2
   26962/   14E2E : 6000 FD90           		bra.w	loc_14DD0
   26963/   14E32 :                     
   26964/   14E32 :                     ; ---------------------------------------------------------------------------
   26965/   14E32 :                     ; Subroutine to	stop Sonic when	he jumps at a wall
   26966/   14E32 :                     ; ---------------------------------------------------------------------------
   26967/   14E32 :                     
   26968/   14E32 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26969/   14E32 :                     
   26970/   14E32 :                     
   26971/   14E32 :                     Sonic_HitWall:				; XREF: Sonic_Floor
   26972/   14E32 : 3428 000C           		move.w	$C(a0),d2
   26973/   14E36 : 3628 0008           		move.w	8(a0),d3
   26974/   14E3A :                     
   26975/   14E3A :                     loc_1504A:
   26976/   14E3A : 0443 000A           		subi.w	#$A,d3
   26977/   14E3E : 0A43 000F           		eori.w	#$F,d3
   26978/   14E42 : 49F8 F768           		lea	($FFFFF768).w,a4
   26979/   14E46 : 367C FFF0           		movea.w	#-$10,a3
   26980/   14E4A : 3C3C 0400           		move.w	#$400,d6
   26981/   14E4E : 7A0D                		moveq	#$D,d5					; MJ: set solid type to check
   26982/   14E50 : 6100 FAA2           		bsr.w	FindWall				; MJ: check solidity
   26983/   14E54 : 143C 0040           		move.b	#$40,d2
   26984/   14E58 : 6000 FDA0           		bra.w	loc_14E0A
   26985/   14E5C :                     ; End of function Sonic_HitWall
   26986/   14E5C :                     
   26987/   14E5C :                     ; ---------------------------------------------------------------------------
   26988/   14E5C :                     ; Subroutine to	detect when an object hits a wall to its left
   26989/   14E5C :                     ; ---------------------------------------------------------------------------
   26990/   14E5C :                     
   26991/   14E5C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   26992/   14E5C :                     
   26993/   14E5C :                     
   26994/   14E5C :                     ObjHitWallLeft:
   26995/   14E5C : D668 0008           		add.w	8(a0),d3
   26996/   14E60 : 3428 000C           		move.w	$C(a0),d2
   26997/   14E64 : 49F8 F768           		lea	($FFFFF768).w,a4
   26998/   14E68 : 18BC 0000           		move.b	#0,(a4)
   26999/   14E6C : 367C FFF0           		movea.w	#-$10,a3
   27000/   14E70 : 3C3C 0400           		move.w	#$400,d6
   27001/   14E74 : 7A0D                		moveq	#$D,d5					; MJ: set solid type to check
   27002/   14E76 : 6100 FA7C           		bsr.w	FindWall				; MJ: check solidity
   27003/   14E7A : 1638 F768           		move.b	($FFFFF768).w,d3
   27004/   14E7E : 0803 0000           		btst	#0,d3
   27005/   14E82 : 6704                		beq.s	locret_15098
   27006/   14E84 : 163C 0040           		move.b	#$40,d3
   27007/   14E88 :                     
   27008/   14E88 :                     locret_15098:
   27009/   14E88 : 4E75                		rts	
   27010/   14E8A :                     ; End of function ObjHitWallLeft
   27011/   14E8A :                     
   27012/   14E8A :                     ; ===========================================================================
   27013/   14E8A :                     
   27014/   14E8A :                     
   27015/   14E8A :                     
   27016/   14E8A :                     
   27017/   14E8A :                     
   27018/   14E8A :                     
   27019/   14E8A :                     
   27020/   14E8A :                     
   27021/   14E8A :                     
   27022/   14E8A :                     
   27023/   14E8A :                     
   27024/   14E8A :                     ; ===========================================================================
   27025/   14E8A :                     ; ---------------------------------------------------------------------------
   27026/   14E8A :                     ; Object 66 - rotating disc that grabs Sonic (SBZ)
   27027/   14E8A :                     ; ---------------------------------------------------------------------------
   27028/   14E8A :                     
   27029/   14E8A :                     Obj66:					; XREF: Obj_Index
   27030/   14E8A : 7000                		moveq	#0,d0
   27031/   14E8C : 1028 0024           		move.b	$24(a0),d0
   27032/   14E90 : 323B 0006           		move.w	Obj66_Index(pc,d0.w),d1
   27033/   14E94 : 4EFB 1002           		jmp	Obj66_Index(pc,d1.w)
   27034/   14E98 :                     ; ===========================================================================
   27035/   14E98 : 0008                Obj66_Index:	dc.w Obj66_Main-Obj66_Index
   27036/   14E9A : 0076                		dc.w Obj66_Action-Obj66_Index
   27037/   14E9C : 010A                		dc.w Obj66_Display-Obj66_Index
   27038/   14E9E : 010E                		dc.w Obj66_Release-Obj66_Index
   27039/   14EA0 :                     ; ===========================================================================
   27040/   14EA0 :                     
   27041/   14EA0 :                     Obj66_Main:				; XREF: Obj66_Index
   27042/   14EA0 : 5428 0024           		addq.b	#2,$24(a0)
   27043/   14EA4 : 323C 0001           		move.w	#1,d1
   27044/   14EA8 : 2248                		movea.l	a0,a1
   27045/   14EAA : 6026                		bra.s	Obj66_MakeItem
   27046/   14EAC :                     ; ===========================================================================
   27047/   14EAC :                     
   27048/   14EAC :                     Obj66_Loop:
   27049/   14EAC : 6100 89AA           		bsr.w	SingleObjLoad
   27050/   14EB0 : 663A                		bne.s	loc_150FE
   27051/   14EB2 : 12BC 0066           		move.b	#$66,0(a1)
   27052/   14EB6 : 5829 0024           		addq.b	#4,$24(a1)
   27053/   14EBA : 3368 0008 0008      		move.w	8(a0),8(a1)
   27054/   14EC0 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   27055/   14EC6 : 137C 0003 0018      		move.b	#3,$18(a1)
   27056/   14ECC : 137C 0010 001A      		move.b	#$10,$1A(a1)
   27057/   14ED2 :                     
   27058/   14ED2 :                     Obj66_MakeItem:				; XREF: Obj66_Main
   27059/   14ED2 : 237C 0001 5080      		move.l	#Map_obj66,4(a1)
            14ED8 : 0004             
   27060/   14EDA : 337C 4348 0002      		move.w	#$4348,2(a1)
   27061/   14EE0 : 0029 0004 0001      		ori.b	#4,1(a1)
   27062/   14EE6 : 137C 0038 0019      		move.b	#$38,$19(a1)
   27063/   14EEC :                     
   27064/   14EEC :                     loc_150FE:
   27065/   14EEC : 51C9 FFBE           		dbf	d1,Obj66_Loop
   27066/   14EF0 :                     
   27067/   14EF0 : 117C 0030 0019      		move.b	#$30,$19(a0)
   27068/   14EF6 : 117C 0004 0018      		move.b	#4,$18(a0)
   27069/   14EFC : 317C 003C 0030      		move.w	#$3C,$30(a0)
   27070/   14F02 : 117C 0001 0034      		move.b	#1,$34(a0)
   27071/   14F08 : 1168 0028 0038      		move.b	$28(a0),$38(a0)
   27072/   14F0E :                     
   27073/   14F0E :                     Obj66_Action:				; XREF: Obj66_Index
   27074/   14F0E : 6100 00DE           		bsr.w	Obj66_ChkSwitch
   27075/   14F12 : 4A28 0001           		tst.b	1(a0)
   27076/   14F16 : 6A00 008A           		bpl.w	Obj66_Display
   27077/   14F1A : 323C 0030           		move.w	#$30,d1
   27078/   14F1E : 3401                		move.w	d1,d2
   27079/   14F20 : 3602                		move.w	d2,d3
   27080/   14F22 : 5243                		addq.w	#1,d3
   27081/   14F24 : 3828 0008           		move.w	8(a0),d4
   27082/   14F28 : 6100 A868           		bsr.w	SolidObject
   27083/   14F2C : 0828 0005 0022      		btst	#5,$22(a0)
   27084/   14F32 : 6700 006E           		beq.w	Obj66_Display
   27085/   14F36 : 43F8 D000           		lea	($FFFFD000).w,a1
   27086/   14F3A : 720E                		moveq	#$E,d1
   27087/   14F3C : 3029 0008           		move.w	8(a1),d0
   27088/   14F40 : B068 0008           		cmp.w	8(a0),d0
   27089/   14F44 : 6502                		bcs.s	Obj66_GrabSonic
   27090/   14F46 : 7207                		moveq	#7,d1
   27091/   14F48 :                     
   27092/   14F48 :                     Obj66_GrabSonic:
   27093/   14F48 : B228 001A           		cmp.b	$1A(a0),d1
   27094/   14F4C : 6654                		bne.s	Obj66_Display
   27095/   14F4E : 1141 0032           		move.b	d1,$32(a0)
   27096/   14F52 : 5828 0024           		addq.b	#4,$24(a0)
   27097/   14F56 : 11FC 0001 F7C8      		move.b	#1,($FFFFF7C8).w ; lock	controls
   27098/   14F5C : 137C 0002 001C      		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
   27099/   14F62 : 337C 0800 0014      		move.w	#$800,$14(a1)
   27100/   14F68 : 337C 0000 0010      		move.w	#0,$10(a1)
   27101/   14F6E : 337C 0000 0012      		move.w	#0,$12(a1)
   27102/   14F74 : 08A8 0005 0022      		bclr	#5,$22(a0)
   27103/   14F7A : 08A9 0005 0022      		bclr	#5,$22(a1)
   27104/   14F80 : 08E9 0001 0022      		bset	#1,$22(a1)
   27105/   14F86 : 3429 0008           		move.w	8(a1),d2
   27106/   14F8A : 3629 000C           		move.w	$C(a1),d3
   27107/   14F8E : 6100 00A6           		bsr.w	Obj66_ChgPos
   27108/   14F92 : D569 0008           		add.w	d2,8(a1)
   27109/   14F96 : D769 000C           		add.w	d3,$C(a1)
   27110/   14F9A : E0E9 0008           		asr	8(a1)
   27111/   14F9E : E0E9 000C           		asr	$C(a1)
   27112/   14FA2 :                     
   27113/   14FA2 :                     Obj66_Display:				; XREF: Obj66_Index
   27114/   14FA2 : 6000 A4C6           		bra.w	MarkObjGone
   27115/   14FA6 :                     ; ===========================================================================
   27116/   14FA6 :                     
   27117/   14FA6 :                     Obj66_Release:				; XREF: Obj66_Index
   27118/   14FA6 : 1028 001A           		move.b	$1A(a0),d0
   27119/   14FAA : 0C00 0004           		cmpi.b	#4,d0
   27120/   14FAE : 6706                		beq.s	loc_151C8
   27121/   14FB0 : 0C00 0007           		cmpi.b	#7,d0
   27122/   14FB4 : 6630                		bne.s	loc_151F8
   27123/   14FB6 :                     
   27124/   14FB6 :                     loc_151C8:
   27125/   14FB6 : B028 0032           		cmp.b	$32(a0),d0
   27126/   14FBA : 672A                		beq.s	loc_151F8
   27127/   14FBC : 43F8 D000           		lea	($FFFFD000).w,a1
   27128/   14FC0 : 337C 0000 0010      		move.w	#0,$10(a1)
   27129/   14FC6 : 337C 0800 0012      		move.w	#$800,$12(a1)
   27130/   14FCC : 0C00 0004           		cmpi.b	#4,d0
   27131/   14FD0 : 670C                		beq.s	loc_151F0
   27132/   14FD2 : 337C 0800 0010      		move.w	#$800,$10(a1)
   27133/   14FD8 : 337C 0800 0012      		move.w	#$800,$12(a1)
   27134/   14FDE :                     
   27135/   14FDE :                     loc_151F0:
   27136/   14FDE : 4238 F7C8           		clr.b	($FFFFF7C8).w	; unlock controls
   27137/   14FE2 : 5928 0024           		subq.b	#4,$24(a0)
   27138/   14FE6 :                     
   27139/   14FE6 :                     loc_151F8:
   27140/   14FE6 : 6106                		bsr.s	Obj66_ChkSwitch
   27141/   14FE8 : 614C                		bsr.s	Obj66_ChgPos
   27142/   14FEA : 6000 A47E           		bra.w	MarkObjGone
   27143/   14FEE :                     
   27144/   14FEE :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   27145/   14FEE :                     
   27146/   14FEE :                     
   27147/   14FEE :                     Obj66_ChkSwitch:			; XREF: Obj66_Action
   27148/   14FEE : 45F8 F7E0           		lea	($FFFFF7E0).w,a2
   27149/   14FF2 : 7000                		moveq	#0,d0
   27150/   14FF4 : 1028 0038           		move.b	$38(a0),d0
   27151/   14FF8 : 0832 0000 0000      		btst	#0,(a2,d0.w)	; is switch pressed?
   27152/   14FFE : 6712                		beq.s	loc_15224	; if not, branch
   27153/   15000 : 4A28 0036           		tst.b	$36(a0)		; has switch previously	been pressed?
   27154/   15004 : 6610                		bne.s	Obj66_Animate	; if yes, branch
   27155/   15006 : 4428 0034           		neg.b	$34(a0)
   27156/   1500A : 117C 0001 0036      		move.b	#1,$36(a0)	; set to "previously pressed"
   27157/   15010 : 6004                		bra.s	Obj66_Animate
   27158/   15012 :                     ; ===========================================================================
   27159/   15012 :                     
   27160/   15012 :                     loc_15224:
   27161/   15012 : 4228 0036           		clr.b	$36(a0)		; set to "not yet pressed"
   27162/   15016 :                     
   27163/   15016 :                     Obj66_Animate:
   27164/   15016 : 5328 001E           		subq.b	#1,$1E(a0)
   27165/   1501A : 6A18                		bpl.s	locret_15246
   27166/   1501C : 117C 0007 001E      		move.b	#7,$1E(a0)
   27167/   15022 : 1228 0034           		move.b	$34(a0),d1
   27168/   15026 : 1028 001A           		move.b	$1A(a0),d0
   27169/   1502A : D001                		add.b	d1,d0
   27170/   1502C : 0200 000F           		andi.b	#$F,d0
   27171/   15030 : 1140 001A           		move.b	d0,$1A(a0)
   27172/   15034 :                     
   27173/   15034 :                     locret_15246:
   27174/   15034 : 4E75                		rts	
   27175/   15036 :                     ; End of function Obj66_ChkSwitch
   27176/   15036 :                     
   27177/   15036 :                     
   27178/   15036 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   27179/   15036 :                     
   27180/   15036 :                     
   27181/   15036 :                     Obj66_ChgPos:				; XREF: Obj66_GrabSonic
   27182/   15036 : 43F8 D000           		lea	($FFFFD000).w,a1
   27183/   1503A : 7000                		moveq	#0,d0
   27184/   1503C : 1028 001A           		move.b	$1A(a0),d0
   27185/   15040 : D040                		add.w	d0,d0
   27186/   15042 : 45FB 001C           		lea	Obj66_PosData(pc,d0.w),a2
   27187/   15046 : 101A                		move.b	(a2)+,d0
   27188/   15048 : 4880                		ext.w	d0
   27189/   1504A : D068 0008           		add.w	8(a0),d0
   27190/   1504E : 3340 0008           		move.w	d0,8(a1)
   27191/   15052 : 101A                		move.b	(a2)+,d0
   27192/   15054 : 4880                		ext.w	d0
   27193/   15056 : D068 000C           		add.w	$C(a0),d0
   27194/   1505A : 3340 000C           		move.w	d0,$C(a1)
   27195/   1505E : 4E75                		rts	
   27196/   15060 :                     ; End of function Obj66_ChgPos
   27197/   15060 :                     
   27198/   15060 :                     ; ===========================================================================
   27199/   15060 : E000 E20E           Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
   27200/   15064 : E818 F21E           		dc.b  $E8, $18,	$F2, $1E
   27201/   15068 : 0020 0E1E           		dc.b	0, $20,	 $E, $1E
   27202/   1506C : 1818 1E0E           		dc.b  $18, $18,	$1E,  $E
   27203/   15070 : 2000 1EF2           		dc.b  $20,   0,	$1E, $F2
   27204/   15074 : 18E8 0EE2           		dc.b  $18, $E8,	 $E, $E2
   27205/   15078 : 00E0 F2E2           		dc.b	0, $E0,	$F2, $E2
   27206/   1507C : E8E8 E2F2           		dc.b  $E8, $E8,	$E2, $F2
   27207/   15080 :                     ; ---------------------------------------------------------------------------
   27208/   15080 :                     ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
   27209/   15080 :                     ; ---------------------------------------------------------------------------
   27210/   15080 :                     Map_obj66:
   27211/   15080 :                     	include "_mappings/obj66.asm"
(1)    1/   15080 :                     ; ---------------------------------------------------------------------------
(1)    2/   15080 :                     ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
(1)    3/   15080 :                     ; ---------------------------------------------------------------------------
(1)    4/   15080 : 0022 0041           		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
(1)    5/   15084 : 0060 007F           		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
(1)    6/   15088 : 009E 00BD           		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
(1)    7/   1508C : 00DC 00FB           		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
(1)    8/   15090 : 011A 0139           		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
(1)    9/   15094 : 0158 0177           		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
(1)   10/   15098 : 0196 01B5           		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
(1)   11/   1509C : 01D4 01F3           		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
(1)   12/   150A0 : 0212                		dc.w byte_154A4-Map_obj66
(1)   13/   150A2 : 06                  byte_152B4:	dc.b 6
(1)   14/   150A3 : E805 0022 D0        		dc.b $E8, 5, 0,	$22, $D0
(1)   15/   150A8 : 0805 1022 D0        		dc.b 8,	5, $10,	$22, $D0
(1)   16/   150AD : E80A 0000 C8        		dc.b $E8, $A, 0, 0, $C8
(1)   17/   150B2 : E80A 0800 E0        		dc.b $E8, $A, 8, 0, $E0
(1)   18/   150B7 : 000A 1000 C8        		dc.b 0,	$A, $10, 0, $C8
(1)   19/   150BC : 000A 1800 E0        		dc.b 0,	$A, $18, 0, $E0
(1)   20/   150C1 : 06                  byte_152D3:	dc.b 6
(1)   21/   150C2 : F803 0026 D0        		dc.b $F8, 3, 0,	$26, $D0
(1)   22/   150C7 : 1805 002A D8        		dc.b $18, 5, 0,	$2A, $D8
(1)   23/   150CC : F60A 0000 CA        		dc.b $F6, $A, 0, 0, $CA
(1)   24/   150D1 : F60A 0800 E2        		dc.b $F6, $A, 8, 0, $E2
(1)   25/   150D6 : 0E0A 1000 CA        		dc.b $E, $A, $10, 0, $CA
(1)   26/   150DB : 0E0A 1800 E2        		dc.b $E, $A, $18, 0, $E2
(1)   27/   150E0 : 06                  byte_152F2:	dc.b 6
(1)   28/   150E1 : 0006 002E D0        		dc.b 0,	6, 0, $2E, $D0
(1)   29/   150E6 : 2009 0034 E8        		dc.b $20, 9, 0,	$34, $E8
(1)   30/   150EB : 000A 0000 D0        		dc.b 0,	$A, 0, 0, $D0
(1)   31/   150F0 : 000A 0800 E8        		dc.b 0,	$A, 8, 0, $E8
(1)   32/   150F5 : 180A 1000 D0        		dc.b $18, $A, $10, 0, $D0
(1)   33/   150FA : 180A 1800 E8        		dc.b $18, $A, $18, 0, $E8
(1)   34/   150FF : 06                  byte_15311:	dc.b 6
(1)   35/   15100 : 0807 003A D8        		dc.b 8,	7, 0, $3A, $D8
(1)   36/   15105 : 2808 0042 F0        		dc.b $28, 8, 0,	$42, $F0
(1)   37/   1510A : 060A 0000 DA        		dc.b 6,	$A, 0, 0, $DA
(1)   38/   1510F : 060A 0800 F2        		dc.b 6,	$A, 8, 0, $F2
(1)   39/   15114 : 1E0A 1000 DA        		dc.b $1E, $A, $10, 0, $DA
(1)   40/   15119 : 1E0A 1800 F2        		dc.b $1E, $A, $18, 0, $F2
(1)   41/   1511E : 06                  byte_15330:	dc.b 6
(1)   42/   1511F : 2005 0045 E8        		dc.b $20, 5, 0,	$45, $E8
(1)   43/   15124 : 2005 0845 08        		dc.b $20, 5, 8,	$45, 8
(1)   44/   15129 : 080A 0000 E8        		dc.b 8,	$A, 0, 0, $E8
(1)   45/   1512E : 080A 0800 00        		dc.b 8,	$A, 8, 0, 0
(1)   46/   15133 : 200A 1000 E8        		dc.b $20, $A, $10, 0, $E8
(1)   47/   15138 : 200A 1800 00        		dc.b $20, $A, $18, 0, 0
(1)   48/   1513D : 06                  byte_1534F:	dc.b 6
(1)   49/   1513E : 2808 0842 F8        		dc.b $28, 8, 8,	$42, $F8
(1)   50/   15143 : 0807 083A 18        		dc.b 8,	7, 8, $3A, $18
(1)   51/   15148 : 060A 0000 F6        		dc.b 6,	$A, 0, 0, $F6
(1)   52/   1514D : 060A 0800 0E        		dc.b 6,	$A, 8, 0, $E
(1)   53/   15152 : 1E0A 1000 F6        		dc.b $1E, $A, $10, 0, $F6
(1)   54/   15157 : 1E0A 1800 0E        		dc.b $1E, $A, $18, 0, $E
(1)   55/   1515C : 06                  byte_1536E:	dc.b 6
(1)   56/   1515D : 2009 0834 00        		dc.b $20, 9, 8,	$34, 0
(1)   57/   15162 : 0006 082E 20        		dc.b 0,	6, 8, $2E, $20
(1)   58/   15167 : 000A 0000 00        		dc.b 0,	$A, 0, 0, 0
(1)   59/   1516C : 000A 0800 18        		dc.b 0,	$A, 8, 0, $18
(1)   60/   15171 : 180A 1000 00        		dc.b $18, $A, $10, 0, 0
(1)   61/   15176 : 180A 1800 18        		dc.b $18, $A, $18, 0, $18
(1)   62/   1517B : 06                  byte_1538D:	dc.b 6
(1)   63/   1517C : 1805 082A 18        		dc.b $18, 5, 8,	$2A, $18
(1)   64/   15181 : F803 0826 28        		dc.b $F8, 3, 8,	$26, $28
(1)   65/   15186 : F60A 0000 06        		dc.b $F6, $A, 0, 0, 6
(1)   66/   1518B : F60A 0800 1E        		dc.b $F6, $A, 8, 0, $1E
(1)   67/   15190 : 0E0A 1000 06        		dc.b $E, $A, $10, 0, 6
(1)   68/   15195 : 0E0A 1800 1E        		dc.b $E, $A, $18, 0, $1E
(1)   69/   1519A : 06                  byte_153AC:	dc.b 6
(1)   70/   1519B : E805 0822 20        		dc.b $E8, 5, 8,	$22, $20
(1)   71/   151A0 : 0805 1822 20        		dc.b 8,	5, $18,	$22, $20
(1)   72/   151A5 : E80A 0000 08        		dc.b $E8, $A, 0, 0, 8
(1)   73/   151AA : E80A 0800 20        		dc.b $E8, $A, 8, 0, $20
(1)   74/   151AF : 000A 1000 08        		dc.b 0,	$A, $10, 0, 8
(1)   75/   151B4 : 000A 1800 20        		dc.b 0,	$A, $18, 0, $20
(1)   76/   151B9 : 06                  byte_153CB:	dc.b 6
(1)   77/   151BA : D805 182A 18        		dc.b $D8, 5, $18, $2A, $18
(1)   78/   151BF : E803 1826 28        		dc.b $E8, 3, $18, $26, $28
(1)   79/   151C4 : DA0A 0000 06        		dc.b $DA, $A, 0, 0, 6
(1)   80/   151C9 : DA0A 0800 1E        		dc.b $DA, $A, 8, 0, $1E
(1)   81/   151CE : F20A 1000 06        		dc.b $F2, $A, $10, 0, 6
(1)   82/   151D3 : F20A 1800 1E        		dc.b $F2, $A, $18, 0, $1E
(1)   83/   151D8 : 06                  byte_153EA:	dc.b 6
(1)   84/   151D9 : D009 1834 00        		dc.b $D0, 9, $18, $34, 0
(1)   85/   151DE : E806 182E 20        		dc.b $E8, 6, $18, $2E, $20
(1)   86/   151E3 : D00A 0000 00        		dc.b $D0, $A, 0, 0, 0
(1)   87/   151E8 : D00A 0800 18        		dc.b $D0, $A, 8, 0, $18
(1)   88/   151ED : E80A 1000 00        		dc.b $E8, $A, $10, 0, 0
(1)   89/   151F2 : E80A 1800 18        		dc.b $E8, $A, $18, 0, $18
(1)   90/   151F7 : 06                  byte_15409:	dc.b 6
(1)   91/   151F8 : D008 1842 F8        		dc.b $D0, 8, $18, $42, $F8
(1)   92/   151FD : D807 183A 18        		dc.b $D8, 7, $18, $3A, $18
(1)   93/   15202 : CA0A 0000 F6        		dc.b $CA, $A, 0, 0, $F6
(1)   94/   15207 : CA0A 0800 0E        		dc.b $CA, $A, 8, 0, $E
(1)   95/   1520C : E20A 1000 F6        		dc.b $E2, $A, $10, 0, $F6
(1)   96/   15211 : E20A 1800 0E        		dc.b $E2, $A, $18, 0, $E
(1)   97/   15216 : 06                  byte_15428:	dc.b 6
(1)   98/   15217 : D005 1045 E8        		dc.b $D0, 5, $10, $45, $E8
(1)   99/   1521C : D005 1845 08        		dc.b $D0, 5, $18, $45, 8
(1)  100/   15221 : C80A 0000 E8        		dc.b $C8, $A, 0, 0, $E8
(1)  101/   15226 : C80A 0800 00        		dc.b $C8, $A, 8, 0, 0
(1)  102/   1522B : E00A 1000 E8        		dc.b $E0, $A, $10, 0, $E8
(1)  103/   15230 : E00A 1800 00        		dc.b $E0, $A, $18, 0, 0
(1)  104/   15235 : 06                  byte_15447:	dc.b 6
(1)  105/   15236 : D807 103A D8        		dc.b $D8, 7, $10, $3A, $D8
(1)  106/   1523B : D008 1042 F0        		dc.b $D0, 8, $10, $42, $F0
(1)  107/   15240 : CA0A 0000 DA        		dc.b $CA, $A, 0, 0, $DA
(1)  108/   15245 : CA0A 0800 F2        		dc.b $CA, $A, 8, 0, $F2
(1)  109/   1524A : E20A 1000 DA        		dc.b $E2, $A, $10, 0, $DA
(1)  110/   1524F : E20A 1800 F2        		dc.b $E2, $A, $18, 0, $F2
(1)  111/   15254 : 06                  byte_15466:	dc.b 6
(1)  112/   15255 : E806 102E D0        		dc.b $E8, 6, $10, $2E, $D0
(1)  113/   1525A : D009 1034 E8        		dc.b $D0, 9, $10, $34, $E8
(1)  114/   1525F : D00A 0000 D0        		dc.b $D0, $A, 0, 0, $D0
(1)  115/   15264 : D00A 0800 E8        		dc.b $D0, $A, 8, 0, $E8
(1)  116/   15269 : E80A 1000 D0        		dc.b $E8, $A, $10, 0, $D0
(1)  117/   1526E : E80A 1800 E8        		dc.b $E8, $A, $18, 0, $E8
(1)  118/   15273 : 06                  byte_15485:	dc.b 6
(1)  119/   15274 : E803 1026 D0        		dc.b $E8, 3, $10, $26, $D0
(1)  120/   15279 : D805 102A D8        		dc.b $D8, 5, $10, $2A, $D8
(1)  121/   1527E : DA0A 0000 CA        		dc.b $DA, $A, 0, 0, $CA
(1)  122/   15283 : DA0A 0800 E2        		dc.b $DA, $A, 8, 0, $E2
(1)  123/   15288 : F20A 1000 CA        		dc.b $F2, $A, $10, 0, $CA
(1)  124/   1528D : F20A 1800 E2        		dc.b $F2, $A, $18, 0, $E2
(1)  125/   15292 : 0C                  byte_154A4:	dc.b $C
(1)  126/   15293 : C80D 0009 E0        		dc.b $C8, $D, 0, 9, $E0
(1)  127/   15298 : D00A 0011 D0        		dc.b $D0, $A, 0, $11, $D0
(1)  128/   1529D : E007 001A C8        		dc.b $E0, 7, 0,	$1A, $C8
(1)  129/   152A2 : C80D 0809 00        		dc.b $C8, $D, 8, 9, 0
(1)  130/   152A7 : D00A 0811 18        		dc.b $D0, $A, 8, $11, $18
(1)  131/   152AC : E007 081A 28        		dc.b $E0, 7, 8,	$1A, $28
(1)  132/   152B1 : 0007 101A C8        		dc.b 0,	7, $10,	$1A, $C8
(1)  133/   152B6 : 180A 1011 D0        		dc.b $18, $A, $10, $11,	$D0
(1)  134/   152BB : 280D 1009 E0        		dc.b $28, $D, $10, 9, $E0
(1)  135/   152C0 : 280D 1809 00        		dc.b $28, $D, $18, 9, 0
(1)  136/   152C5 : 180A 1811 18        		dc.b $18, $A, $18, $11,	$18
(1)  137/   152CA : 0007 181A 28        		dc.b 0,	7, $18,	$1A, $28
(1)  138/   152CF : (MACRO)              		even
(1)  138/   152CF : 00                                          dc.b 0 ;ds.b 1 
   27212/   152D0 :                     
   27213/   152D0 :                     ; ===========================================================================
   27214/   152D0 :                     ; ---------------------------------------------------------------------------
   27215/   152D0 :                     ; Object 67 - disc that	you run	around (SBZ)
   27216/   152D0 :                     ; ---------------------------------------------------------------------------
   27217/   152D0 :                     
   27218/   152D0 :                     Obj67:					; XREF: Obj_Index
   27219/   152D0 : 7000                		moveq	#0,d0
   27220/   152D2 : 1028 0024           		move.b	$24(a0),d0
   27221/   152D6 : 323B 0006           		move.w	Obj67_Index(pc,d0.w),d1
   27222/   152DA : 4EFB 1002           		jmp	Obj67_Index(pc,d1.w)
   27223/   152DE :                     ; ===========================================================================
   27224/   152DE : 0004                Obj67_Index:	dc.w Obj67_Main-Obj67_Index
   27225/   152E0 : 0074                		dc.w Obj67_Action-Obj67_Index
   27226/   152E2 :                     ; ===========================================================================
   27227/   152E2 :                     
   27228/   152E2 :                     Obj67_Main:				; XREF: Obj67_Index
   27229/   152E2 : 5428 0024           		addq.b	#2,$24(a0)
   27230/   152E6 : 217C 0001 5474      		move.l	#Map_obj67,4(a0)
            152EC : 0004             
   27231/   152EE : 317C C344 0002      		move.w	#$C344,2(a0)
   27232/   152F4 : 117C 0004 0001      		move.b	#4,1(a0)
   27233/   152FA : 117C 0004 0018      		move.b	#4,$18(a0)
   27234/   15300 : 117C 0008 0019      		move.b	#8,$19(a0)
   27235/   15306 : 3168 0008 0032      		move.w	8(a0),$32(a0)
   27236/   1530C : 3168 000C 0030      		move.w	$C(a0),$30(a0)
   27237/   15312 : 117C 0018 0034      		move.b	#$18,$34(a0)
   27238/   15318 : 117C 0048 0038      		move.b	#$48,$38(a0)
   27239/   1531E : 1228 0028           		move.b	$28(a0),d1	; get object type
   27240/   15322 : 0201 000F           		andi.b	#$F,d1		; read only the	2nd digit
   27241/   15326 : 670C                		beq.s	loc_15546
   27242/   15328 : 117C 0010 0034      		move.b	#$10,$34(a0)
   27243/   1532E : 117C 0038 0038      		move.b	#$38,$38(a0)
   27244/   15334 :                     
   27245/   15334 :                     loc_15546:
   27246/   15334 : 1228 0028           		move.b	$28(a0),d1	; get object type
   27247/   15338 : 0201 00F0           		andi.b	#$F0,d1		; read only the	1st digit
   27248/   1533C : 4881                		ext.w	d1
   27249/   1533E : E741                		asl.w	#3,d1
   27250/   15340 : 3141 0036           		move.w	d1,$36(a0)
   27251/   15344 : 1028 0022           		move.b	$22(a0),d0
   27252/   15348 : E418                		ror.b	#2,d0
   27253/   1534A : 0200 00C0           		andi.b	#-$40,d0
   27254/   1534E : 1140 0026           		move.b	d0,$26(a0)
   27255/   15352 :                     
   27256/   15352 :                     Obj67_Action:				; XREF: Obj67_Index
   27257/   15352 : 6100 000A           		bsr.w	Obj67_MoveSonic
   27258/   15356 : 6100 00BA           		bsr.w	Obj67_MoveSpot
   27259/   1535A : 6000 00F0           		bra.w	Obj67_ChkDel
   27260/   1535E :                     ; ===========================================================================
   27261/   1535E :                     
   27262/   1535E :                     Obj67_MoveSonic:			; XREF: Obj67_Action
   27263/   1535E : 7400                		moveq	#0,d2
   27264/   15360 : 1428 0038           		move.b	$38(a0),d2
   27265/   15364 : 3602                		move.w	d2,d3
   27266/   15366 : D643                		add.w	d3,d3
   27267/   15368 : 43F8 D000           		lea	($FFFFD000).w,a1
   27268/   1536C : 3029 0008           		move.w	8(a1),d0
   27269/   15370 : 9068 0032           		sub.w	$32(a0),d0
   27270/   15374 : D042                		add.w	d2,d0
   27271/   15376 : B043                		cmp.w	d3,d0
   27272/   15378 : 641C                		bcc.s	loc_155A8
   27273/   1537A : 3229 000C           		move.w	$C(a1),d1
   27274/   1537E : 9268 0030           		sub.w	$30(a0),d1
   27275/   15382 : D242                		add.w	d2,d1
   27276/   15384 : B243                		cmp.w	d3,d1
   27277/   15386 : 640E                		bcc.s	loc_155A8
   27278/   15388 : 0829 0001 0022      		btst	#1,$22(a1)
   27279/   1538E : 6716                		beq.s	loc_155B8
   27280/   15390 : 4228 003A           		clr.b	$3A(a0)
   27281/   15394 : 4E75                		rts	
   27282/   15396 :                     ; ===========================================================================
   27283/   15396 :                     
   27284/   15396 :                     loc_155A8:
   27285/   15396 : 4A28 003A           		tst.b	$3A(a0)
   27286/   1539A : 6708                		beq.s	locret_155B6
   27287/   1539C : 4229 0038           		clr.b	$38(a1)
   27288/   153A0 : 4228 003A           		clr.b	$3A(a0)
   27289/   153A4 :                     
   27290/   153A4 :                     locret_155B6:
   27291/   153A4 : 4E75                		rts	
   27292/   153A6 :                     ; ===========================================================================
   27293/   153A6 :                     
   27294/   153A6 :                     loc_155B8:
   27295/   153A6 : 4A28 003A           		tst.b	$3A(a0)
   27296/   153AA : 6624                		bne.s	loc_155E2
   27297/   153AC : 117C 0001 003A      		move.b	#1,$3A(a0)
   27298/   153B2 : 0829 0002 0022      		btst	#2,$22(a1)
   27299/   153B8 : 6604                		bne.s	loc_155D0
   27300/   153BA : 4229 001C           		clr.b	$1C(a1)
   27301/   153BE :                     
   27302/   153BE :                     loc_155D0:
   27303/   153BE : 08A9 0005 0022      		bclr	#5,$22(a1)
   27304/   153C4 : 137C 0001 001D      		move.b	#1,$1D(a1)
   27305/   153CA : 137C 0001 0038      		move.b	#1,$38(a1)
   27306/   153D0 :                     
   27307/   153D0 :                     loc_155E2:
   27308/   153D0 : 3029 0014           		move.w	$14(a1),d0
   27309/   153D4 : 4A68 0036           		tst.w	$36(a0)
   27310/   153D8 : 6A1C                		bpl.s	loc_15608
   27311/   153DA : 0C40 FC00           		cmpi.w	#-$400,d0
   27312/   153DE : 6F08                		ble.s	loc_155FA
   27313/   153E0 : 337C FC00 0014      		move.w	#-$400,$14(a1)
   27314/   153E6 : 4E75                		rts	
   27315/   153E8 :                     ; ===========================================================================
   27316/   153E8 :                     
   27317/   153E8 :                     loc_155FA:
   27318/   153E8 : 0C40 F100           		cmpi.w	#-$F00,d0
   27319/   153EC : 6C06                		bge.s	locret_15606
   27320/   153EE : 337C F100 0014      		move.w	#-$F00,$14(a1)
   27321/   153F4 :                     
   27322/   153F4 :                     locret_15606:
   27323/   153F4 : 4E75                		rts	
   27324/   153F6 :                     ; ===========================================================================
   27325/   153F6 :                     
   27326/   153F6 :                     loc_15608:
   27327/   153F6 : 0C40 0400           		cmpi.w	#$400,d0
   27328/   153FA : 6C08                		bge.s	loc_15616
   27329/   153FC : 337C 0400 0014      		move.w	#$400,$14(a1)
   27330/   15402 : 4E75                		rts	
   27331/   15404 :                     ; ===========================================================================
   27332/   15404 :                     
   27333/   15404 :                     loc_15616:
   27334/   15404 : 0C40 0F00           		cmpi.w	#$F00,d0
   27335/   15408 : 6F06                		ble.s	locret_15622
   27336/   1540A : 337C 0F00 0014      		move.w	#$F00,$14(a1)
   27337/   15410 :                     
   27338/   15410 :                     locret_15622:
   27339/   15410 : 4E75                		rts	
   27340/   15412 :                     ; ===========================================================================
   27341/   15412 :                     
   27342/   15412 :                     Obj67_MoveSpot:				; XREF: Obj67_Action
   27343/   15412 : 3028 0036           		move.w	$36(a0),d0
   27344/   15416 : D168 0026           		add.w	d0,$26(a0)
   27345/   1541A : 1028 0026           		move.b	$26(a0),d0
   27346/   1541E : 4EB9 0000 27C0      		jsr	(CalcSine).l
   27347/   15424 : 3428 0030           		move.w	$30(a0),d2
   27348/   15428 : 3628 0032           		move.w	$32(a0),d3
   27349/   1542C : 7800                		moveq	#0,d4
   27350/   1542E : 1828 0034           		move.b	$34(a0),d4
   27351/   15432 : E14C                		lsl.w	#8,d4
   27352/   15434 : 2A04                		move.l	d4,d5
   27353/   15436 : C9C0                		muls.w	d0,d4
   27354/   15438 : 4844                		swap	d4
   27355/   1543A : CBC1                		muls.w	d1,d5
   27356/   1543C : 4845                		swap	d5
   27357/   1543E : D842                		add.w	d2,d4
   27358/   15440 : DA43                		add.w	d3,d5
   27359/   15442 : 3144 000C           		move.w	d4,$C(a0)
   27360/   15446 : 3145 0008           		move.w	d5,8(a0)
   27361/   1544A : 4E75                		rts	
   27362/   1544C :                     ; ===========================================================================
   27363/   1544C :                     
   27364/   1544C :                     Obj67_ChkDel:				; XREF: Obj67_Action
   27365/   1544C : 3028 0032           		move.w	$32(a0),d0
   27366/   15450 : 0240 FF80           		andi.w	#-$80,d0
   27367/   15454 : 3238 F700           		move.w	($FFFFF700).w,d1
   27368/   15458 : 0441 0080           		subi.w	#$80,d1
   27369/   1545C : 0241 FF80           		andi.w	#-$80,d1
   27370/   15460 : 9041                		sub.w	d1,d0
   27371/   15462 : 0C40 0280           		cmpi.w	#$280,d0
   27372/   15466 : 6206                		bhi.s	Obj67_Delete
   27373/   15468 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   27374/   1546E :                     ; ===========================================================================
   27375/   1546E :                     
   27376/   1546E :                     Obj67_Delete:
   27377/   1546E : 4EF9 0000 D40E      		jmp	DeleteObject
   27378/   15474 :                     ; ===========================================================================
   27379/   15474 :                     ; ---------------------------------------------------------------------------
   27380/   15474 :                     ; Sprite mappings - disc that you run around (SBZ)
   27381/   15474 :                     ; (It's just a small blob that moves around in a circle. The disc itself is
   27382/   15474 :                     ; part of the level tiles.)
   27383/   15474 :                     ; ---------------------------------------------------------------------------
   27384/   15474 :                     Map_obj67:
   27385/   15474 :                     	include "_mappings/obj67.asm"
(1)    1/   15474 :                     ; ---------------------------------------------------------------------------
(1)    2/   15474 :                     ; Sprite mappings - disc that you run around (SBZ)
(1)    3/   15474 :                     ; (It's just a small blob that moves around in a circle. The disc itself is
(1)    4/   15474 :                     ; part of the level tiles.)
(1)    5/   15474 :                     ; ---------------------------------------------------------------------------
(1)    6/   15474 : 0002                		dc.w byte_15688-Map_obj67
(1)    7/   15476 : 01                  byte_15688:	dc.b 1
(1)    8/   15477 : F805 0000 F8        		dc.b $F8, 5, 0,	0, $F8
(1)    9/   1547C : (MACRO)              		even
   27386/   1547C :                     
   27387/   1547C :                     ; ===========================================================================
   27388/   1547C :                     ; ---------------------------------------------------------------------------
   27389/   1547C :                     ; Object 68 - conveyor belts (SBZ)
   27390/   1547C :                     ; ---------------------------------------------------------------------------
   27391/   1547C :                     
   27392/   1547C :                     Obj68:					; XREF: Obj_Index
   27393/   1547C : 7000                		moveq	#0,d0
   27394/   1547E : 1028 0024           		move.b	$24(a0),d0
   27395/   15482 : 323B 0006           		move.w	Obj68_Index(pc,d0.w),d1
   27396/   15486 : 4EFB 1002           		jmp	Obj68_Index(pc,d1.w)
   27397/   1548A :                     ; ===========================================================================
   27398/   1548A : 0004                Obj68_Index:	dc.w Obj68_Main-Obj68_Index
   27399/   1548C : 002E                		dc.w Obj68_Action-Obj68_Index
   27400/   1548E :                     ; ===========================================================================
   27401/   1548E :                     
   27402/   1548E :                     Obj68_Main:				; XREF: Obj68_Index
   27403/   1548E : 5428 0024           		addq.b	#2,$24(a0)
   27404/   15492 : 117C 0080 0038      		move.b	#128,$38(a0)	; set width to 128 pixels
   27405/   15498 : 1228 0028           		move.b	$28(a0),d1	; get object type
   27406/   1549C : 0201 000F           		andi.b	#$F,d1		; read only the	2nd digit
   27407/   154A0 : 6706                		beq.s	loc_156BA	; if zero, branch
   27408/   154A2 : 117C 0038 0038      		move.b	#56,$38(a0)	; set width to 56 pixels
   27409/   154A8 :                     
   27410/   154A8 :                     loc_156BA:
   27411/   154A8 : 1228 0028           		move.b	$28(a0),d1	; get object type
   27412/   154AC : 0201 00F0           		andi.b	#$F0,d1		; read only the	1st digit
   27413/   154B0 : 4881                		ext.w	d1
   27414/   154B2 : E841                		asr.w	#4,d1
   27415/   154B4 : 3141 0036           		move.w	d1,$36(a0)	; set belt speed
   27416/   154B8 :                     
   27417/   154B8 :                     Obj68_Action:				; XREF: Obj68_Index
   27418/   154B8 : 6124                		bsr.s	Obj68_MoveSonic
   27419/   154BA : 3028 0008           		move.w	8(a0),d0
   27420/   154BE : 0240 FF80           		andi.w	#$FF80,d0
   27421/   154C2 : 3238 F700           		move.w	($FFFFF700).w,d1
   27422/   154C6 : 0441 0080           		subi.w	#$80,d1
   27423/   154CA : 0241 FF80           		andi.w	#$FF80,d1
   27424/   154CE : 9041                		sub.w	d1,d0
   27425/   154D0 : 0C40 0280           		cmpi.w	#$280,d0
   27426/   154D4 : 6202                		bhi.s	Obj68_Delete
   27427/   154D6 : 4E75                		rts	
   27428/   154D8 :                     ; ===========================================================================
   27429/   154D8 :                     
   27430/   154D8 :                     Obj68_Delete:
   27431/   154D8 : 4EF9 0000 D40E      		jmp	DeleteObject
   27432/   154DE :                     ; ===========================================================================
   27433/   154DE :                     
   27434/   154DE :                     Obj68_MoveSonic:			; XREF: Obj68_Action
   27435/   154DE : 7400                		moveq	#0,d2
   27436/   154E0 : 1428 0038           		move.b	$38(a0),d2
   27437/   154E4 : 3602                		move.w	d2,d3
   27438/   154E6 : D643                		add.w	d3,d3
   27439/   154E8 : 43F8 D000           		lea	($FFFFD000).w,a1
   27440/   154EC : 3029 0008           		move.w	8(a1),d0
   27441/   154F0 : 9068 0008           		sub.w	8(a0),d0
   27442/   154F4 : D042                		add.w	d2,d0
   27443/   154F6 : B043                		cmp.w	d3,d0
   27444/   154F8 : 6422                		bcc.s	locret_1572E
   27445/   154FA : 3229 000C           		move.w	$C(a1),d1
   27446/   154FE : 9268 000C           		sub.w	$C(a0),d1
   27447/   15502 : 0641 0030           		addi.w	#$30,d1
   27448/   15506 : 0C41 0030           		cmpi.w	#$30,d1
   27449/   1550A : 6410                		bcc.s	locret_1572E
   27450/   1550C : 0829 0001 0022      		btst	#1,$22(a1)
   27451/   15512 : 6608                		bne.s	locret_1572E
   27452/   15514 : 3028 0036           		move.w	$36(a0),d0
   27453/   15518 : D169 0008           		add.w	d0,8(a1)
   27454/   1551C :                     
   27455/   1551C :                     locret_1572E:
   27456/   1551C : 4E75                		rts	
   27457/   1551E :                     
   27458/   1551E :                     ; ===========================================================================
   27459/   1551E :                     ; ---------------------------------------------------------------------------
   27460/   1551E :                     ; Object 69 - spinning platforms and trapdoors (SBZ)
   27461/   1551E :                     ; ---------------------------------------------------------------------------
   27462/   1551E :                     
   27463/   1551E :                     Obj69:					; XREF: Obj_Index
   27464/   1551E : 7000                		moveq	#0,d0
   27465/   15520 : 1028 0024           		move.b	$24(a0),d0
   27466/   15524 : 323B 0006           		move.w	Obj69_Index(pc,d0.w),d1
   27467/   15528 : 4EFB 1002           		jmp	Obj69_Index(pc,d1.w)
   27468/   1552C :                     ; ===========================================================================
   27469/   1552C : 0006                Obj69_Index:	dc.w Obj69_Main-Obj69_Index
   27470/   1552E : 0084                		dc.w Obj69_Trapdoor-Obj69_Index
   27471/   15530 : 00F0                		dc.w Obj69_Spinner-Obj69_Index
   27472/   15532 :                     ; ===========================================================================
   27473/   15532 :                     
   27474/   15532 :                     Obj69_Main:				; XREF: Obj69_Index
   27475/   15532 : 5428 0024           		addq.b	#2,$24(a0)
   27476/   15536 : 217C 0001 56CE      		move.l	#Map_obj69,4(a0)
            1553C : 0004             
   27477/   1553E : 317C 4492 0002      		move.w	#$4492,2(a0)
   27478/   15544 : 0028 0004 0001      		ori.b	#4,1(a0)
   27479/   1554A : 117C 0080 0019      		move.b	#$80,$19(a0)
   27480/   15550 : 7000                		moveq	#0,d0
   27481/   15552 : 1028 0028           		move.b	$28(a0),d0
   27482/   15556 : 0240 000F           		andi.w	#$F,d0
   27483/   1555A : C0FC 003C           		mulu.w	#$3C,d0
   27484/   1555E : 3140 0032           		move.w	d0,$32(a0)
   27485/   15562 : 4A28 0028           		tst.b	$28(a0)
   27486/   15566 : 6A48                		bpl.s	Obj69_Trapdoor
   27487/   15568 : 5428 0024           		addq.b	#2,$24(a0)
   27488/   1556C : 217C 0001 5728      		move.l	#Map_obj69a,4(a0)
            15572 : 0004             
   27489/   15574 : 317C 04DF 0002      		move.w	#$4DF,2(a0)
   27490/   1557A : 117C 0010 0019      		move.b	#$10,$19(a0)
   27491/   15580 : 117C 0002 001C      		move.b	#2,$1C(a0)
   27492/   15586 : 7000                		moveq	#0,d0
   27493/   15588 : 1028 0028           		move.b	$28(a0),d0	; get object type
   27494/   1558C : 3200                		move.w	d0,d1
   27495/   1558E : 0240 000F           		andi.w	#$F,d0		; read only the	2nd digit
   27496/   15592 : C0FC 0006           		mulu.w	#6,d0		; multiply by 6
   27497/   15596 : 3140 0030           		move.w	d0,$30(a0)	; set time delay
   27498/   1559A : 3140 0032           		move.w	d0,$32(a0)
   27499/   1559E : 0241 0070           		andi.w	#$70,d1
   27500/   155A2 : 0641 0010           		addi.w	#$10,d1
   27501/   155A6 : E549                		lsl.w	#2,d1
   27502/   155A8 : 5341                		subq.w	#1,d1
   27503/   155AA : 3141 0036           		move.w	d1,$36(a0)
   27504/   155AE : 606C                		bra.s	Obj69_Spinner
   27505/   155B0 :                     ; ===========================================================================
   27506/   155B0 :                     
   27507/   155B0 :                     Obj69_Trapdoor:				; XREF: Obj69_Index
   27508/   155B0 : 5368 0030           		subq.w	#1,$30(a0)
   27509/   155B4 : 6A1C                		bpl.s	Obj69_Animate
   27510/   155B6 : 3168 0032 0030      		move.w	$32(a0),$30(a0)
   27511/   155BC : 0868 0000 001C      		bchg	#0,$1C(a0)
   27512/   155C2 : 4A28 0001           		tst.b	1(a0)
   27513/   155C6 : 6A0A                		bpl.s	Obj69_Animate
   27514/   155C8 : 303C 00BB           		move.w	#$BB,d0
   27515/   155CC : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play door sound
   27516/   155D2 :                     
   27517/   155D2 :                     Obj69_Animate:
   27518/   155D2 : 43F9 0001 5692      		lea	(Ani_obj69).l,a1
   27519/   155D8 : 4EB9 0000 A4FE      		jsr	AnimateSprite
   27520/   155DE : 4A28 001A           		tst.b	$1A(a0)		; is frame number 0 displayed?
   27521/   155E2 : 6618                		bne.s	Obj69_NotSolid	; if not, branch
   27522/   155E4 : 323C 004B           		move.w	#$4B,d1
   27523/   155E8 : 343C 000C           		move.w	#$C,d2
   27524/   155EC : 3602                		move.w	d2,d3
   27525/   155EE : 5243                		addq.w	#1,d3
   27526/   155F0 : 3828 0008           		move.w	8(a0),d4
   27527/   155F4 : 6100 A19C           		bsr.w	SolidObject
   27528/   155F8 : 6000 9E70           		bra.w	MarkObjGone
   27529/   155FC :                     ; ===========================================================================
   27530/   155FC :                     
   27531/   155FC :                     Obj69_NotSolid:
   27532/   155FC : 0828 0003 0022      		btst	#3,$22(a0)
   27533/   15602 : 6714                		beq.s	Obj69_Display
   27534/   15604 : 43F8 D000           		lea	($FFFFD000).w,a1
   27535/   15608 : 08A9 0003 0022      		bclr	#3,$22(a1)
   27536/   1560E : 08A8 0003 0022      		bclr	#3,$22(a0)
   27537/   15614 : 4228 0025           		clr.b	$25(a0)
   27538/   15618 :                     
   27539/   15618 :                     Obj69_Display:
   27540/   15618 : 6000 9E50           		bra.w	MarkObjGone
   27541/   1561C :                     ; ===========================================================================
   27542/   1561C :                     
   27543/   1561C :                     Obj69_Spinner:				; XREF: Obj69_Index
   27544/   1561C : 3038 FE04           		move.w	($FFFFFE04).w,d0
   27545/   15620 : C068 0036           		and.w	$36(a0),d0
   27546/   15624 : 6606                		bne.s	Obj69_Delay
   27547/   15626 : 117C 0001 0034      		move.b	#1,$34(a0)
   27548/   1562C :                     
   27549/   1562C :                     Obj69_Delay:
   27550/   1562C : 4A28 0034           		tst.b	$34(a0)
   27551/   15630 : 6716                		beq.s	Obj69_Animate2
   27552/   15632 : 5368 0030           		subq.w	#1,$30(a0)
   27553/   15636 : 6A10                		bpl.s	Obj69_Animate2
   27554/   15638 : 3168 0032 0030      		move.w	$32(a0),$30(a0)
   27555/   1563E : 4228 0034           		clr.b	$34(a0)
   27556/   15642 : 0868 0000 001C      		bchg	#0,$1C(a0)
   27557/   15648 :                     
   27558/   15648 :                     Obj69_Animate2:
   27559/   15648 : 43F9 0001 5692      		lea	(Ani_obj69).l,a1
   27560/   1564E : 4EB9 0000 A4FE      		jsr	AnimateSprite
   27561/   15654 : 4A28 001A           		tst.b	$1A(a0)		; check	if frame number	0 is displayed
   27562/   15658 : 6618                		bne.s	Obj69_NotSolid2	; if not, branch
   27563/   1565A : 323C 001B           		move.w	#$1B,d1
   27564/   1565E : 343C 0007           		move.w	#7,d2
   27565/   15662 : 3602                		move.w	d2,d3
   27566/   15664 : 5243                		addq.w	#1,d3
   27567/   15666 : 3828 0008           		move.w	8(a0),d4
   27568/   1566A : 6100 A126           		bsr.w	SolidObject
   27569/   1566E : 6000 9DFA           		bra.w	MarkObjGone
   27570/   15672 :                     ; ===========================================================================
   27571/   15672 :                     
   27572/   15672 :                     Obj69_NotSolid2:
   27573/   15672 : 0828 0003 0022      		btst	#3,$22(a0)
   27574/   15678 : 6714                		beq.s	Obj69_Display2
   27575/   1567A : 43F8 D000           		lea	($FFFFD000).w,a1
   27576/   1567E : 08A9 0003 0022      		bclr	#3,$22(a1)
   27577/   15684 : 08A8 0003 0022      		bclr	#3,$22(a0)
   27578/   1568A : 4228 0025           		clr.b	$25(a0)
   27579/   1568E :                     
   27580/   1568E :                     Obj69_Display2:
   27581/   1568E : 6000 9DDA           		bra.w	MarkObjGone
   27582/   15692 :                     ; ===========================================================================
   27583/   15692 :                     Ani_obj69:
   27584/   15692 :                     	include "_animations/obj69.asm"
(1)    1/   15692 :                     ; ---------------------------------------------------------------------------
(1)    2/   15692 :                     ; Animation script - trapdoor (SBZ)
(1)    3/   15692 :                     ; ---------------------------------------------------------------------------
(1)    4/   15692 : 0008                		dc.w byte_158AC-Ani_obj69
(1)    5/   15694 : 000E                		dc.w byte_158B2-Ani_obj69
(1)    6/   15696 : 0014                		dc.w byte_158B8-Ani_obj69
(1)    7/   15698 : 0028                		dc.w byte_158CC-Ani_obj69
(1)    8/   1569A : 0300 0102 FE01      byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
(1)    9/   156A0 : 0302 0100 FE01      byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
(1)   10/   156A6 : 0100 0102 0304      byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
            156AC : 4342 4140 6162 63 
(1)   11/   156B3 : 6423 2221 00FE 01   		dc.b $64, $23, $22, $21, 0, $FE, 1
(1)   12/   156BA : 0100 0102 0304      byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
            156C0 : 4342 4140 6162 63 
(1)   13/   156C7 : 6423 2221 00FE 01   		dc.b $64, $23, $22, $21, 0, $FE, 1
(1)   14/   156CE : (MACRO)              		even
   27585/   156CE :                     
   27586/   156CE :                     ; ---------------------------------------------------------------------------
   27587/   156CE :                     ; Sprite mappings - trapdoor (SBZ)
   27588/   156CE :                     ; ---------------------------------------------------------------------------
   27589/   156CE :                     Map_obj69:
   27590/   156CE :                     	include "_mappings/obj69.asm"
(1)    1/   156CE :                     ; ---------------------------------------------------------------------------
(1)    2/   156CE :                     ; Sprite mappings - trapdoor (SBZ)
(1)    3/   156CE :                     ; ---------------------------------------------------------------------------
(1)    4/   156CE : 0006                		dc.w byte_158E6-Map_obj69
(1)    5/   156D0 : 001B                		dc.w byte_158FB-Map_obj69
(1)    6/   156D2 : 0044                		dc.w byte_15924-Map_obj69
(1)    7/   156D4 : 04                  byte_158E6:	dc.b 4
(1)    8/   156D5 : F40E 0000 C0        		dc.b $F4, $E, 0, 0, $C0
(1)    9/   156DA : F40E 0800 E0        		dc.b $F4, $E, 8, 0, $E0
(1)   10/   156DF : F40E 0000 00        		dc.b $F4, $E, 0, 0, 0
(1)   11/   156E4 : F40E 0800 20        		dc.b $F4, $E, 8, 0, $20
(1)   12/   156E9 : 08                  byte_158FB:	dc.b 8
(1)   13/   156EA : F20F 000C B6        		dc.b $F2, $F, 0, $C, $B6
(1)   14/   156EF : 1A0F 180C D6        		dc.b $1A, $F, $18, $C, $D6
(1)   15/   156F4 : 020A 001C D6        		dc.b 2,	$A, 0, $1C, $D6
(1)   16/   156F9 : 120A 181C BE        		dc.b $12, $A, $18, $1C,	$BE
(1)   17/   156FE : F20F 080C 2A        		dc.b $F2, $F, 8, $C, $2A
(1)   18/   15703 : 1A0F 100C 0A        		dc.b $1A, $F, $10, $C, $A
(1)   19/   15708 : 020A 081C 12        		dc.b 2,	$A, 8, $1C, $12
(1)   20/   1570D : 120A 101C 2A        		dc.b $12, $A, $10, $1C,	$2A
(1)   21/   15712 : 04                  byte_15924:	dc.b 4
(1)   22/   15713 : 000B 0025 B4        		dc.b 0,	$B, 0, $25, $B4
(1)   23/   15718 : 200B 1025 B4        		dc.b $20, $B, $10, $25,	$B4
(1)   24/   1571D : 000B 0025 34        		dc.b 0,	$B, 0, $25, $34
(1)   25/   15722 : 200B 1025 34        		dc.b $20, $B, $10, $25,	$34
(1)   26/   15727 : (MACRO)              		even
(1)   26/   15727 : 00                                          dc.b 0 ;ds.b 1 
   27591/   15728 :                     
   27592/   15728 :                     ; ---------------------------------------------------------------------------
   27593/   15728 :                     ; Sprite mappings - spinning platforms (SBZ)
   27594/   15728 :                     ; ---------------------------------------------------------------------------
   27595/   15728 :                     Map_obj69a:
   27596/   15728 :                     	include "_mappings/obj69a.asm"
(1)    1/   15728 :                     ; ---------------------------------------------------------------------------
(1)    2/   15728 :                     ; Sprite mappings - spinning platforms (SBZ)
(1)    3/   15728 :                     ; ---------------------------------------------------------------------------
(1)    4/   15728 : 000A 0015           		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
(1)    5/   1572C : 0020 002B           		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
(1)    6/   15730 : 0036                		dc.w byte_15970-Map_obj69a
(1)    7/   15732 : 02                  byte_15944:	dc.b 2
(1)    8/   15733 : F805 0000 F0        		dc.b $F8, 5, 0,	0, $F0
(1)    9/   15738 : F805 0800 00        		dc.b $F8, 5, 8,	0, 0
(1)   10/   1573D : 02                  byte_1594F:	dc.b 2
(1)   11/   1573E : F00D 0014 F0        		dc.b $F0, $D, 0, $14, $F0
(1)   12/   15743 : 000D 001C F0        		dc.b 0,	$D, 0, $1C, $F0
(1)   13/   15748 : 02                  byte_1595A:	dc.b 2
(1)   14/   15749 : F009 0004 F0        		dc.b $F0, 9, 0,	4, $F0
(1)   15/   1574E : 0009 000A F8        		dc.b 0,	9, 0, $A, $F8
(1)   16/   15753 : 02                  byte_15965:	dc.b 2
(1)   17/   15754 : F009 0024 F0        		dc.b $F0, 9, 0,	$24, $F0
(1)   18/   15759 : 0009 002A F8        		dc.b 0,	9, 0, $2A, $F8
(1)   19/   1575E : 02                  byte_15970:	dc.b 2
(1)   20/   1575F : F005 0010 F8        		dc.b $F0, 5, 0,	$10, $F8
(1)   21/   15764 : 0005 1010 F8        		dc.b 0,	5, $10,	$10, $F8
(1)   22/   15769 : (MACRO)              		even
(1)   22/   15769 : 00                                          dc.b 0 ;ds.b 1 
   27597/   1576A :                     
   27598/   1576A :                     ; ===========================================================================
   27599/   1576A :                     ; ---------------------------------------------------------------------------
   27600/   1576A :                     ; Object 6A - ground saws and pizza cutters (SBZ)
   27601/   1576A :                     ; ---------------------------------------------------------------------------
   27602/   1576A :                     
   27603/   1576A :                     Obj6A:					; XREF: Obj_Index
   27604/   1576A : 7000                		moveq	#0,d0
   27605/   1576C : 1028 0024           		move.b	$24(a0),d0
   27606/   15770 : 323B 0006           		move.w	Obj6A_Index(pc,d0.w),d1
   27607/   15774 : 4EFB 1002           		jmp	Obj6A_Index(pc,d1.w)
   27608/   15778 :                     ; ===========================================================================
   27609/   15778 : 0004                Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
   27610/   1577A : 0042                		dc.w Obj6A_Action-Obj6A_Index
   27611/   1577C :                     ; ===========================================================================
   27612/   1577C :                     
   27613/   1577C :                     Obj6A_Main:				; XREF: Obj6A_Index
   27614/   1577C : 5428 0024           		addq.b	#2,$24(a0)
   27615/   15780 : 217C 0001 5986      		move.l	#Map_obj6A,4(a0)
            15786 : 0004             
   27616/   15788 : 317C 43B5 0002      		move.w	#$43B5,2(a0)
   27617/   1578E : 117C 0004 0001      		move.b	#4,1(a0)
   27618/   15794 : 117C 0004 0018      		move.b	#4,$18(a0)
   27619/   1579A : 117C 0020 0019      		move.b	#$20,$19(a0)
   27620/   157A0 : 3168 0008 003A      		move.w	8(a0),$3A(a0)
   27621/   157A6 : 3168 000C 0038      		move.w	$C(a0),$38(a0)
   27622/   157AC : 0C28 0003 0028      		cmpi.b	#3,$28(a0)
   27623/   157B2 : 6406                		bcc.s	Obj6A_Action
   27624/   157B4 : 117C 00A2 0020      		move.b	#$A2,$20(a0)
   27625/   157BA :                     
   27626/   157BA :                     Obj6A_Action:				; XREF: Obj6A_Index
   27627/   157BA : 7000                		moveq	#0,d0
   27628/   157BC : 1028 0028           		move.b	$28(a0),d0
   27629/   157C0 : 0240 0007           		andi.w	#7,d0
   27630/   157C4 : D040                		add.w	d0,d0
   27631/   157C6 : 323B 002E           		move.w	Obj6A_TypeIndex(pc,d0.w),d1
   27632/   157CA : 4EBB 102A           		jsr	Obj6A_TypeIndex(pc,d1.w)
   27633/   157CE : 3028 003A           		move.w	$3A(a0),d0
   27634/   157D2 : 0240 FF80           		andi.w	#$FF80,d0
   27635/   157D6 : 3238 F700           		move.w	($FFFFF700).w,d1
   27636/   157DA : 0441 0080           		subi.w	#$80,d1
   27637/   157DE : 0241 FF80           		andi.w	#$FF80,d1
   27638/   157E2 : 9041                		sub.w	d1,d0
   27639/   157E4 : 0C40 0280           		cmpi.w	#$280,d0
   27640/   157E8 : 6206                		bhi.s	Obj6A_Delete
   27641/   157EA : 4EF9 0000 D3D2      		jmp	DisplaySprite
   27642/   157F0 :                     ; ===========================================================================
   27643/   157F0 :                     
   27644/   157F0 :                     Obj6A_Delete:
   27645/   157F0 : 4EF9 0000 D40E      		jmp	DeleteObject
   27646/   157F6 :                     ; ===========================================================================
   27647/   157F6 : 000A 000C           Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
   27648/   157FA : 005A 00AA           		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
   27649/   157FE : 011E                		dc.w Obj6A_Type04-Obj6A_TypeIndex
   27650/   15800 :                     ; ===========================================================================
   27651/   15800 :                     
   27652/   15800 :                     Obj6A_Type00:				; XREF: Obj6A_TypeIndex
   27653/   15800 : 4E75                		rts	
   27654/   15802 :                     ; ===========================================================================
   27655/   15802 :                     
   27656/   15802 :                     Obj6A_Type01:				; XREF: Obj6A_TypeIndex
   27657/   15802 : 323C 0060           		move.w	#$60,d1
   27658/   15806 : 7000                		moveq	#0,d0
   27659/   15808 : 1038 FE6C           		move.b	($FFFFFE6C).w,d0
   27660/   1580C : 0828 0000 0022      		btst	#0,$22(a0)
   27661/   15812 : 6704                		beq.s	Obj6A_Animate01
   27662/   15814 : 4440                		neg.w	d0
   27663/   15816 : D041                		add.w	d1,d0
   27664/   15818 :                     
   27665/   15818 :                     Obj6A_Animate01:
   27666/   15818 : 3228 003A           		move.w	$3A(a0),d1
   27667/   1581C : 9240                		sub.w	d0,d1
   27668/   1581E : 3141 0008           		move.w	d1,8(a0)	; move saw sideways
   27669/   15822 : 5328 001E           		subq.b	#1,$1E(a0)
   27670/   15826 : 6A0C                		bpl.s	loc_15A46
   27671/   15828 : 117C 0002 001E      		move.b	#2,$1E(a0)	; time between frame changes
   27672/   1582E : 0868 0000 001A      		bchg	#0,$1A(a0)	; change frame
   27673/   15834 :                     
   27674/   15834 :                     loc_15A46:
   27675/   15834 : 4A28 0001           		tst.b	1(a0)
   27676/   15838 : 6A14                		bpl.s	locret_15A60
   27677/   1583A : 3038 FE04           		move.w	($FFFFFE04).w,d0
   27678/   1583E : 0240 000F           		andi.w	#$F,d0
   27679/   15842 : 660A                		bne.s	locret_15A60
   27680/   15844 : 303C 00B0           		move.w	#$B0,d0
   27681/   15848 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play saw sound
   27682/   1584E :                     
   27683/   1584E :                     locret_15A60:
   27684/   1584E : 4E75                		rts	
   27685/   15850 :                     ; ===========================================================================
   27686/   15850 :                     
   27687/   15850 :                     Obj6A_Type02:				; XREF: Obj6A_TypeIndex
   27688/   15850 : 323C 0030           		move.w	#$30,d1
   27689/   15854 : 7000                		moveq	#0,d0
   27690/   15856 : 1038 FE64           		move.b	($FFFFFE64).w,d0
   27691/   1585A : 0828 0000 0022      		btst	#0,$22(a0)
   27692/   15860 : 6706                		beq.s	Obj6A_Animate02
   27693/   15862 : 4440                		neg.w	d0
   27694/   15864 : 0640 0080           		addi.w	#$80,d0
   27695/   15868 :                     
   27696/   15868 :                     Obj6A_Animate02:
   27697/   15868 : 3228 0038           		move.w	$38(a0),d1
   27698/   1586C : 9240                		sub.w	d0,d1
   27699/   1586E : 3141 000C           		move.w	d1,$C(a0)	; move saw vertically
   27700/   15872 : 5328 001E           		subq.b	#1,$1E(a0)
   27701/   15876 : 6A0C                		bpl.s	loc_15A96
   27702/   15878 : 117C 0002 001E      		move.b	#2,$1E(a0)
   27703/   1587E : 0868 0000 001A      		bchg	#0,$1A(a0)
   27704/   15884 :                     
   27705/   15884 :                     loc_15A96:
   27706/   15884 : 4A28 0001           		tst.b	1(a0)
   27707/   15888 : 6A14                		bpl.s	locret_15AB0
   27708/   1588A : 1038 FE64           		move.b	($FFFFFE64).w,d0
   27709/   1588E : 0C00 0018           		cmpi.b	#$18,d0
   27710/   15892 : 660A                		bne.s	locret_15AB0
   27711/   15894 : 303C 00B0           		move.w	#$B0,d0
   27712/   15898 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play saw sound
   27713/   1589E :                     
   27714/   1589E :                     locret_15AB0:
   27715/   1589E : 4E75                		rts	
   27716/   158A0 :                     ; ===========================================================================
   27717/   158A0 :                     
   27718/   158A0 :                     Obj6A_Type03:				; XREF: Obj6A_TypeIndex
   27719/   158A0 : 4A28 003D           		tst.b	$3D(a0)
   27720/   158A4 : 664E                		bne.s	Obj6A_Animate03
   27721/   158A6 : 3038 D008           		move.w	($FFFFD008).w,d0
   27722/   158AA : 0440 00C0           		subi.w	#$C0,d0
   27723/   158AE : 6540                		bcs.s	loc_15B02
   27724/   158B0 : 9068 0008           		sub.w	8(a0),d0
   27725/   158B4 : 653A                		bcs.s	loc_15B02
   27726/   158B6 : 3038 D00C           		move.w	($FFFFD00C).w,d0
   27727/   158BA : 0440 0080           		subi.w	#$80,d0
   27728/   158BE : B068 000C           		cmp.w	$C(a0),d0
   27729/   158C2 : 642E                		bcc.s	locret_15B04
   27730/   158C4 : 0640 0100           		addi.w	#$100,d0
   27731/   158C8 : B068 000C           		cmp.w	$C(a0),d0
   27732/   158CC : 6524                		bcs.s	locret_15B04
   27733/   158CE : 117C 0001 003D      		move.b	#1,$3D(a0)
   27734/   158D4 : 317C 0600 0010      		move.w	#$600,$10(a0)	; move object to the right
   27735/   158DA : 117C 00A2 0020      		move.b	#$A2,$20(a0)
   27736/   158E0 : 117C 0002 001A      		move.b	#2,$1A(a0)
   27737/   158E6 : 303C 00B0           		move.w	#$B0,d0
   27738/   158EA : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play saw sound
   27739/   158F0 :                     
   27740/   158F0 :                     loc_15B02:
   27741/   158F0 : 588F                		addq.l	#4,sp
   27742/   158F2 :                     
   27743/   158F2 :                     locret_15B04:
   27744/   158F2 : 4E75                		rts	
   27745/   158F4 :                     ; ===========================================================================
   27746/   158F4 :                     
   27747/   158F4 :                     Obj6A_Animate03:			; XREF: ROM:00015AB6j
   27748/   158F4 : 4EB9 0000 D3AC      		jsr	SpeedToPos
   27749/   158FA : 3168 0008 003A      		move.w	8(a0),$3A(a0)
   27750/   15900 : 5328 001E           		subq.b	#1,$1E(a0)
   27751/   15904 : 6A0C                		bpl.s	locret_15B24
   27752/   15906 : 117C 0002 001E      		move.b	#2,$1E(a0)
   27753/   1590C : 0868 0000 001A      		bchg	#0,$1A(a0)
   27754/   15912 :                     
   27755/   15912 :                     locret_15B24:
   27756/   15912 : 4E75                		rts	
   27757/   15914 :                     ; ===========================================================================
   27758/   15914 :                     
   27759/   15914 :                     Obj6A_Type04:				; XREF: Obj6A_TypeIndex
   27760/   15914 : 4A28 003D           		tst.b	$3D(a0)
   27761/   15918 : 664C                		bne.s	Obj6A_Animate04
   27762/   1591A : 3038 D008           		move.w	($FFFFD008).w,d0
   27763/   1591E : 0640 00E0           		addi.w	#$E0,d0
   27764/   15922 : 9068 0008           		sub.w	8(a0),d0
   27765/   15926 : 643A                		bcc.s	loc_15B74
   27766/   15928 : 3038 D00C           		move.w	($FFFFD00C).w,d0
   27767/   1592C : 0440 0080           		subi.w	#$80,d0
   27768/   15930 : B068 000C           		cmp.w	$C(a0),d0
   27769/   15934 : 642E                		bcc.s	locret_15B76
   27770/   15936 : 0640 0100           		addi.w	#$100,d0
   27771/   1593A : B068 000C           		cmp.w	$C(a0),d0
   27772/   1593E : 6524                		bcs.s	locret_15B76
   27773/   15940 : 117C 0001 003D      		move.b	#1,$3D(a0)
   27774/   15946 : 317C FA00 0010      		move.w	#-$600,$10(a0)	; move object to the left
   27775/   1594C : 117C 00A2 0020      		move.b	#$A2,$20(a0)
   27776/   15952 : 117C 0002 001A      		move.b	#2,$1A(a0)
   27777/   15958 : 303C 00B0           		move.w	#$B0,d0
   27778/   1595C : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play saw sound
   27779/   15962 :                     
   27780/   15962 :                     loc_15B74:
   27781/   15962 : 588F                		addq.l	#4,sp
   27782/   15964 :                     
   27783/   15964 :                     locret_15B76:
   27784/   15964 : 4E75                		rts	
   27785/   15966 :                     ; ===========================================================================
   27786/   15966 :                     
   27787/   15966 :                     Obj6A_Animate04:
   27788/   15966 : 4EB9 0000 D3AC      		jsr	SpeedToPos
   27789/   1596C : 3168 0008 003A      		move.w	8(a0),$3A(a0)
   27790/   15972 : 5328 001E           		subq.b	#1,$1E(a0)
   27791/   15976 : 6A0C                		bpl.s	locret_15B96
   27792/   15978 : 117C 0002 001E      		move.b	#2,$1E(a0)
   27793/   1597E : 0868 0000 001A      		bchg	#0,$1A(a0)
   27794/   15984 :                     
   27795/   15984 :                     locret_15B96:
   27796/   15984 : 4E75                		rts	
   27797/   15986 :                     ; ===========================================================================
   27798/   15986 :                     ; ---------------------------------------------------------------------------
   27799/   15986 :                     ; Sprite mappings - ground saws	and pizza cutters (SBZ)
   27800/   15986 :                     ; ---------------------------------------------------------------------------
   27801/   15986 :                     Map_obj6A:
   27802/   15986 :                     	include "_mappings/obj6A.asm"
(1)    1/   15986 :                     ; ---------------------------------------------------------------------------
(1)    2/   15986 :                     ; Sprite mappings - ground saws	and pizza cutters (SBZ)
(1)    3/   15986 :                     ; ---------------------------------------------------------------------------
(1)    4/   15986 : 0008 002C           		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
(1)    5/   1598A : 0050 0065           		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
(1)    6/   1598E : 07                  byte_15BA0:	dc.b 7
(1)    7/   1598F : C401 0020 FC        		dc.b $C4, 1, 0,	$20, $FC
(1)    8/   15994 : D401 0020 FC        		dc.b $D4, 1, 0,	$20, $FC
(1)    9/   15999 : E403 0020 FC        		dc.b $E4, 3, 0,	$20, $FC
(1)   10/   1599E : E00F 0000 E0        		dc.b $E0, $F, 0, 0, $E0
(1)   11/   159A3 : E00F 0800 00        		dc.b $E0, $F, 8, 0, 0
(1)   12/   159A8 : 000F 1000 E0        		dc.b 0,	$F, $10, 0, $E0
(1)   13/   159AD : 000F 1800 00        		dc.b 0,	$F, $18, 0, 0
(1)   14/   159B2 : 07                  byte_15BC4:	dc.b 7
(1)   15/   159B3 : C401 0020 FC        		dc.b $C4, 1, 0,	$20, $FC
(1)   16/   159B8 : D401 0020 FC        		dc.b $D4, 1, 0,	$20, $FC
(1)   17/   159BD : E403 0020 FC        		dc.b $E4, 3, 0,	$20, $FC
(1)   18/   159C2 : E00F 0010 E0        		dc.b $E0, $F, 0, $10, $E0
(1)   19/   159C7 : E00F 0810 00        		dc.b $E0, $F, 8, $10, 0
(1)   20/   159CC : 000F 1010 E0        		dc.b 0,	$F, $10, $10, $E0
(1)   21/   159D1 : 000F 1810 00        		dc.b 0,	$F, $18, $10, 0
(1)   22/   159D6 : 04                  byte_15BE8:	dc.b 4
(1)   23/   159D7 : E00F 0000 E0        		dc.b $E0, $F, 0, 0, $E0
(1)   24/   159DC : E00F 0800 00        		dc.b $E0, $F, 8, 0, 0
(1)   25/   159E1 : 000F 1000 E0        		dc.b 0,	$F, $10, 0, $E0
(1)   26/   159E6 : 000F 1800 00        		dc.b 0,	$F, $18, 0, 0
(1)   27/   159EB : 04                  byte_15BFD:	dc.b 4
(1)   28/   159EC : E00F 0010 E0        		dc.b $E0, $F, 0, $10, $E0
(1)   29/   159F1 : E00F 0810 00        		dc.b $E0, $F, 8, $10, 0
(1)   30/   159F6 : 000F 1010 E0        		dc.b 0,	$F, $10, $10, $E0
(1)   31/   159FB : 000F 1810 00        		dc.b 0,	$F, $18, $10, 0
(1)   32/   15A00 : (MACRO)              		even
   27803/   15A00 :                     
   27804/   15A00 :                     ; ===========================================================================
   27805/   15A00 :                     ; ---------------------------------------------------------------------------
   27806/   15A00 :                     ; Object 6B - stomper (SBZ)
   27807/   15A00 :                     ; ---------------------------------------------------------------------------
   27808/   15A00 :                     
   27809/   15A00 :                     Obj6B:					; XREF: Obj_Index
   27810/   15A00 : 7000                		moveq	#0,d0
   27811/   15A02 : 1028 0024           		move.b	$24(a0),d0
   27812/   15A06 : 323B 0006           		move.w	Obj6B_Index(pc,d0.w),d1
   27813/   15A0A : 4EFB 1002           		jmp	Obj6B_Index(pc,d1.w)
   27814/   15A0E :                     ; ===========================================================================
   27815/   15A0E : 0018                Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
   27816/   15A10 : 00EA                		dc.w Obj6B_Action-Obj6B_Index
   27817/   15A12 :                     
   27818/   15A12 : 400C 8001           Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
   27819/   15A16 : 1C20 3803           		dc.b  $1C, $20,	$38,   3
   27820/   15A1A : 1C20 4004           		dc.b  $1C, $20,	$40,   4
   27821/   15A1E : 1C20 6004           		dc.b  $1C, $20,	$60,   4
   27822/   15A22 : 8040 0005           		dc.b  $80, $40,	  0,   5
   27823/   15A26 :                     ; ===========================================================================
   27824/   15A26 :                     
   27825/   15A26 :                     Obj6B_Main:				; XREF: Obj6B_Index
   27826/   15A26 : 5428 0024           		addq.b	#2,$24(a0)
   27827/   15A2A : 7000                		moveq	#0,d0
   27828/   15A2C : 1028 0028           		move.b	$28(a0),d0
   27829/   15A30 : E448                		lsr.w	#2,d0
   27830/   15A32 : 0240 001C           		andi.w	#$1C,d0
   27831/   15A36 : 47FB 00DA           		lea	Obj6B_Var(pc,d0.w),a3
   27832/   15A3A : 115B 0019           		move.b	(a3)+,$19(a0)
   27833/   15A3E : 115B 0016           		move.b	(a3)+,$16(a0)
   27834/   15A42 : E448                		lsr.w	#2,d0
   27835/   15A44 : 1140 001A           		move.b	d0,$1A(a0)
   27836/   15A48 : 217C 0001 5D56      		move.l	#Map_obj6B,4(a0)
            15A4E : 0004             
   27837/   15A50 : 317C 22C0 0002      		move.w	#$22C0,2(a0)
   27838/   15A56 : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
   27839/   15A5C : 6648                		bne.s	Obj6B_SBZ12	; if not, branch
   27840/   15A5E : 08F8 0000 F7CB      		bset	#0,($FFFFF7CB).w
   27841/   15A64 : 6718                		beq.s	Obj6B_SBZ3
   27842/   15A66 :                     
   27843/   15A66 :                     Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
   27844/   15A66 : 45F8 FC00           		lea	($FFFFFC00).w,a2
   27845/   15A6A : 7000                		moveq	#0,d0
   27846/   15A6C : 1028 0023           		move.b	$23(a0),d0
   27847/   15A70 : 6706                		beq.s	Obj6B_Delete
   27848/   15A72 : 08B2 0007 0002      		bclr	#7,2(a2,d0.w)
   27849/   15A78 :                     
   27850/   15A78 :                     Obj6B_Delete:
   27851/   15A78 : 4EF9 0000 D40E      		jmp	DeleteObject
   27852/   15A7E :                     ; ===========================================================================
   27853/   15A7E :                     
   27854/   15A7E :                     Obj6B_SBZ3:				; XREF: Obj6B_Main
   27855/   15A7E : 317C 41F0 0002      		move.w	#$41F0,2(a0)
   27856/   15A84 : 0C68 0A80 0008      		cmpi.w	#$A80,8(a0)
   27857/   15A8A : 661A                		bne.s	Obj6B_SBZ12
   27858/   15A8C : 45F8 FC00           		lea	($FFFFFC00).w,a2
   27859/   15A90 : 7000                		moveq	#0,d0
   27860/   15A92 : 1028 0023           		move.b	$23(a0),d0
   27861/   15A96 : 670E                		beq.s	Obj6B_SBZ12
   27862/   15A98 : 0832 0000 0002      		btst	#0,2(a2,d0.w)
   27863/   15A9E : 6706                		beq.s	Obj6B_SBZ12
   27864/   15AA0 : 4238 F7CB           		clr.b	($FFFFF7CB).w
   27865/   15AA4 : 60C0                		bra.s	Obj6B_ChkGone
   27866/   15AA6 :                     ; ===========================================================================
   27867/   15AA6 :                     
   27868/   15AA6 :                     Obj6B_SBZ12:				; XREF: Obj6B_Main
   27869/   15AA6 : 0028 0004 0001      		ori.b	#4,1(a0)
   27870/   15AAC : 117C 0004 0018      		move.b	#4,$18(a0)
   27871/   15AB2 : 3168 0008 0034      		move.w	8(a0),$34(a0)
   27872/   15AB8 : 3168 000C 0030      		move.w	$C(a0),$30(a0)
   27873/   15ABE : 7000                		moveq	#0,d0
   27874/   15AC0 : 101B                		move.b	(a3)+,d0
   27875/   15AC2 : 3140 003C           		move.w	d0,$3C(a0)
   27876/   15AC6 : 7000                		moveq	#0,d0
   27877/   15AC8 : 1028 0028           		move.b	$28(a0),d0
   27878/   15ACC : 6A2A                		bpl.s	Obj6B_Action
   27879/   15ACE : 0200 000F           		andi.b	#$F,d0
   27880/   15AD2 : 1140 003E           		move.b	d0,$3E(a0)
   27881/   15AD6 : 1153 0028           		move.b	(a3),$28(a0)
   27882/   15ADA : 0C13 0005           		cmpi.b	#5,(a3)
   27883/   15ADE : 6606                		bne.s	Obj6B_ChkGone2
   27884/   15AE0 : 08E8 0004 0001      		bset	#4,1(a0)
   27885/   15AE6 :                     
   27886/   15AE6 :                     Obj6B_ChkGone2:
   27887/   15AE6 : 45F8 FC00           		lea	($FFFFFC00).w,a2
   27888/   15AEA : 7000                		moveq	#0,d0
   27889/   15AEC : 1028 0023           		move.b	$23(a0),d0
   27890/   15AF0 : 6706                		beq.s	Obj6B_Action
   27891/   15AF2 : 08B2 0007 0002      		bclr	#7,2(a2,d0.w)
   27892/   15AF8 :                     
   27893/   15AF8 :                     Obj6B_Action:				; XREF: Obj6B_Index
   27894/   15AF8 : 3F28 0008           		move.w	8(a0),-(sp)
   27895/   15AFC : 7000                		moveq	#0,d0
   27896/   15AFE : 1028 0028           		move.b	$28(a0),d0
   27897/   15B02 : 0240 000F           		andi.w	#$F,d0
   27898/   15B06 : D040                		add.w	d0,d0
   27899/   15B08 : 323B 006C           		move.w	Obj6B_TypeIndex(pc,d0.w),d1
   27900/   15B0C : 4EBB 1068           		jsr	Obj6B_TypeIndex(pc,d1.w)
   27901/   15B10 : 381F                		move.w	(sp)+,d4
   27902/   15B12 : 4A28 0001           		tst.b	1(a0)
   27903/   15B16 : 6A18                		bpl.s	Obj6B_ChkDel
   27904/   15B18 : 7200                		moveq	#0,d1
   27905/   15B1A : 1228 0019           		move.b	$19(a0),d1
   27906/   15B1E : 0641 000B           		addi.w	#$B,d1
   27907/   15B22 : 7400                		moveq	#0,d2
   27908/   15B24 : 1428 0016           		move.b	$16(a0),d2
   27909/   15B28 : 3602                		move.w	d2,d3
   27910/   15B2A : 5243                		addq.w	#1,d3
   27911/   15B2C : 6100 9C64           		bsr.w	SolidObject
   27912/   15B30 :                     
   27913/   15B30 :                     Obj6B_ChkDel:
   27914/   15B30 : 3028 0034           		move.w	$34(a0),d0
   27915/   15B34 : 0240 FF80           		andi.w	#$FF80,d0
   27916/   15B38 : 3238 F700           		move.w	($FFFFF700).w,d1
   27917/   15B3C : 0441 0080           		subi.w	#$80,d1
   27918/   15B40 : 0241 FF80           		andi.w	#$FF80,d1
   27919/   15B44 : 9041                		sub.w	d1,d0
   27920/   15B46 : 0C40 0280           		cmpi.w	#$280,d0
   27921/   15B4A : 6206                		bhi.s	loc_15D64
   27922/   15B4C : 4EF9 0000 D3D2      		jmp	DisplaySprite
   27923/   15B52 :                     ; ===========================================================================
   27924/   15B52 :                     
   27925/   15B52 :                     loc_15D64:
   27926/   15B52 : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w
   27927/   15B58 : 6616                		bne.s	Obj6B_Delete2
   27928/   15B5A : 4238 F7CB           		clr.b	($FFFFF7CB).w
   27929/   15B5E : 45F8 FC00           		lea	($FFFFFC00).w,a2
   27930/   15B62 : 7000                		moveq	#0,d0
   27931/   15B64 : 1028 0023           		move.b	$23(a0),d0
   27932/   15B68 : 6706                		beq.s	Obj6B_Delete2
   27933/   15B6A : 08B2 0007 0002      		bclr	#7,2(a2,d0.w)
   27934/   15B70 :                     
   27935/   15B70 :                     Obj6B_Delete2:
   27936/   15B70 : 4EF9 0000 D40E      		jmp	DeleteObject
   27937/   15B76 :                     ; ===========================================================================
   27938/   15B76 : 000C 000E           Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
   27939/   15B7A : 007A 00D0           		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
   27940/   15B7E : 0124 0186           		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
   27941/   15B82 :                     ; ===========================================================================
   27942/   15B82 :                     
   27943/   15B82 :                     Obj6B_Type00:				; XREF: Obj6B_TypeIndex
   27944/   15B82 : 4E75                		rts	
   27945/   15B84 :                     ; ===========================================================================
   27946/   15B84 :                     
   27947/   15B84 :                     Obj6B_Type01:				; XREF: Obj6B_TypeIndex
   27948/   15B84 : 4A28 0038           		tst.b	$38(a0)
   27949/   15B88 : 6618                		bne.s	loc_15DB4
   27950/   15B8A : 45F8 F7E0           		lea	($FFFFF7E0).w,a2
   27951/   15B8E : 7000                		moveq	#0,d0
   27952/   15B90 : 1028 003E           		move.b	$3E(a0),d0
   27953/   15B94 : 0832 0000 0000      		btst	#0,(a2,d0.w)
   27954/   15B9A : 6714                		beq.s	loc_15DC2
   27955/   15B9C : 117C 0001 0038      		move.b	#1,$38(a0)
   27956/   15BA2 :                     
   27957/   15BA2 :                     loc_15DB4:
   27958/   15BA2 : 3028 003C           		move.w	$3C(a0),d0
   27959/   15BA6 : B068 003A           		cmp.w	$3A(a0),d0
   27960/   15BAA : 6722                		beq.s	loc_15DE0
   27961/   15BAC : 5468 003A           		addq.w	#2,$3A(a0)
   27962/   15BB0 :                     
   27963/   15BB0 :                     loc_15DC2:
   27964/   15BB0 : 3028 003A           		move.w	$3A(a0),d0
   27965/   15BB4 : 0828 0000 0022      		btst	#0,$22(a0)
   27966/   15BBA : 6706                		beq.s	loc_15DD4
   27967/   15BBC : 4440                		neg.w	d0
   27968/   15BBE : 0640 0080           		addi.w	#$80,d0
   27969/   15BC2 :                     
   27970/   15BC2 :                     loc_15DD4:
   27971/   15BC2 : 3228 0034           		move.w	$34(a0),d1
   27972/   15BC6 : 9240                		sub.w	d0,d1
   27973/   15BC8 : 3141 0008           		move.w	d1,8(a0)
   27974/   15BCC : 4E75                		rts	
   27975/   15BCE :                     ; ===========================================================================
   27976/   15BCE :                     
   27977/   15BCE :                     loc_15DE0:
   27978/   15BCE : 5228 0028           		addq.b	#1,$28(a0)
   27979/   15BD2 : 317C 00B4 0036      		move.w	#$B4,$36(a0)
   27980/   15BD8 : 4228 0038           		clr.b	$38(a0)
   27981/   15BDC : 45F8 FC00           		lea	($FFFFFC00).w,a2
   27982/   15BE0 : 7000                		moveq	#0,d0
   27983/   15BE2 : 1028 0023           		move.b	$23(a0),d0
   27984/   15BE6 : 67C8                		beq.s	loc_15DC2
   27985/   15BE8 : 08F2 0000 0002      		bset	#0,2(a2,d0.w)
   27986/   15BEE : 60C0                		bra.s	loc_15DC2
   27987/   15BF0 :                     ; ===========================================================================
   27988/   15BF0 :                     
   27989/   15BF0 :                     Obj6B_Type02:				; XREF: Obj6B_TypeIndex
   27990/   15BF0 : 4A28 0038           		tst.b	$38(a0)
   27991/   15BF4 : 660C                		bne.s	loc_15E14
   27992/   15BF6 : 5368 0036           		subq.w	#1,$36(a0)
   27993/   15BFA : 6610                		bne.s	loc_15E1E
   27994/   15BFC : 117C 0001 0038      		move.b	#1,$38(a0)
   27995/   15C02 :                     
   27996/   15C02 :                     loc_15E14:
   27997/   15C02 : 4A68 003A           		tst.w	$3A(a0)
   27998/   15C06 : 6722                		beq.s	loc_15E3C
   27999/   15C08 : 5568 003A           		subq.w	#2,$3A(a0)
   28000/   15C0C :                     
   28001/   15C0C :                     loc_15E1E:
   28002/   15C0C : 3028 003A           		move.w	$3A(a0),d0
   28003/   15C10 : 0828 0000 0022      		btst	#0,$22(a0)
   28004/   15C16 : 6706                		beq.s	loc_15E30
   28005/   15C18 : 4440                		neg.w	d0
   28006/   15C1A : 0640 0080           		addi.w	#$80,d0
   28007/   15C1E :                     
   28008/   15C1E :                     loc_15E30:
   28009/   15C1E : 3228 0034           		move.w	$34(a0),d1
   28010/   15C22 : 9240                		sub.w	d0,d1
   28011/   15C24 : 3141 0008           		move.w	d1,8(a0)
   28012/   15C28 : 4E75                		rts	
   28013/   15C2A :                     ; ===========================================================================
   28014/   15C2A :                     
   28015/   15C2A :                     loc_15E3C:
   28016/   15C2A : 5328 0028           		subq.b	#1,$28(a0)
   28017/   15C2E : 4228 0038           		clr.b	$38(a0)
   28018/   15C32 : 45F8 FC00           		lea	($FFFFFC00).w,a2
   28019/   15C36 : 7000                		moveq	#0,d0
   28020/   15C38 : 1028 0023           		move.b	$23(a0),d0
   28021/   15C3C : 67CE                		beq.s	loc_15E1E
   28022/   15C3E : 08B2 0000 0002      		bclr	#0,2(a2,d0.w)
   28023/   15C44 : 60C6                		bra.s	loc_15E1E
   28024/   15C46 :                     ; ===========================================================================
   28025/   15C46 :                     
   28026/   15C46 :                     Obj6B_Type03:				; XREF: Obj6B_TypeIndex
   28027/   15C46 : 4A28 0038           		tst.b	$38(a0)
   28028/   15C4A : 661E                		bne.s	loc_15E7C
   28029/   15C4C : 4A68 003A           		tst.w	$3A(a0)
   28030/   15C50 : 6706                		beq.s	loc_15E6A
   28031/   15C52 : 5368 003A           		subq.w	#1,$3A(a0)
   28032/   15C56 : 6024                		bra.s	loc_15E8E
   28033/   15C58 :                     ; ===========================================================================
   28034/   15C58 :                     
   28035/   15C58 :                     loc_15E6A:
   28036/   15C58 : 5368 0036           		subq.w	#1,$36(a0)
   28037/   15C5C : 6A1E                		bpl.s	loc_15E8E
   28038/   15C5E : 317C 003C 0036      		move.w	#$3C,$36(a0)
   28039/   15C64 : 117C 0001 0038      		move.b	#1,$38(a0)
   28040/   15C6A :                     
   28041/   15C6A :                     loc_15E7C:
   28042/   15C6A : 5068 003A           		addq.w	#8,$3A(a0)
   28043/   15C6E : 3028 003A           		move.w	$3A(a0),d0
   28044/   15C72 : B068 003C           		cmp.w	$3C(a0),d0
   28045/   15C76 : 6604                		bne.s	loc_15E8E
   28046/   15C78 : 4228 0038           		clr.b	$38(a0)
   28047/   15C7C :                     
   28048/   15C7C :                     loc_15E8E:
   28049/   15C7C : 3028 003A           		move.w	$3A(a0),d0
   28050/   15C80 : 0828 0000 0022      		btst	#0,$22(a0)
   28051/   15C86 : 6706                		beq.s	loc_15EA0
   28052/   15C88 : 4440                		neg.w	d0
   28053/   15C8A : 0640 0038           		addi.w	#$38,d0
   28054/   15C8E :                     
   28055/   15C8E :                     loc_15EA0:
   28056/   15C8E : 3228 0030           		move.w	$30(a0),d1
   28057/   15C92 : D240                		add.w	d0,d1
   28058/   15C94 : 3141 000C           		move.w	d1,$C(a0)
   28059/   15C98 : 4E75                		rts	
   28060/   15C9A :                     ; ===========================================================================
   28061/   15C9A :                     
   28062/   15C9A :                     Obj6B_Type04:				; XREF: Obj6B_TypeIndex
   28063/   15C9A : 4A28 0038           		tst.b	$38(a0)
   28064/   15C9E : 661E                		bne.s	loc_15ED0
   28065/   15CA0 : 4A68 003A           		tst.w	$3A(a0)
   28066/   15CA4 : 6706                		beq.s	loc_15EBE
   28067/   15CA6 : 5168 003A           		subq.w	#8,$3A(a0)
   28068/   15CAA : 6032                		bra.s	loc_15EF0
   28069/   15CAC :                     ; ===========================================================================
   28070/   15CAC :                     
   28071/   15CAC :                     loc_15EBE:
   28072/   15CAC : 5368 0036           		subq.w	#1,$36(a0)
   28073/   15CB0 : 6A2C                		bpl.s	loc_15EF0
   28074/   15CB2 : 317C 003C 0036      		move.w	#$3C,$36(a0)
   28075/   15CB8 : 117C 0001 0038      		move.b	#1,$38(a0)
   28076/   15CBE :                     
   28077/   15CBE :                     loc_15ED0:
   28078/   15CBE : 3028 003A           		move.w	$3A(a0),d0
   28079/   15CC2 : B068 003C           		cmp.w	$3C(a0),d0
   28080/   15CC6 : 6706                		beq.s	loc_15EE0
   28081/   15CC8 : 5068 003A           		addq.w	#8,$3A(a0)
   28082/   15CCC : 6010                		bra.s	loc_15EF0
   28083/   15CCE :                     ; ===========================================================================
   28084/   15CCE :                     
   28085/   15CCE :                     loc_15EE0:
   28086/   15CCE : 5368 0036           		subq.w	#1,$36(a0)
   28087/   15CD2 : 6A0A                		bpl.s	loc_15EF0
   28088/   15CD4 : 317C 003C 0036      		move.w	#$3C,$36(a0)
   28089/   15CDA : 4228 0038           		clr.b	$38(a0)
   28090/   15CDE :                     
   28091/   15CDE :                     loc_15EF0:
   28092/   15CDE : 3028 003A           		move.w	$3A(a0),d0
   28093/   15CE2 : 0828 0000 0022      		btst	#0,$22(a0)
   28094/   15CE8 : 6706                		beq.s	loc_15F02
   28095/   15CEA : 4440                		neg.w	d0
   28096/   15CEC : 0640 0038           		addi.w	#$38,d0
   28097/   15CF0 :                     
   28098/   15CF0 :                     loc_15F02:
   28099/   15CF0 : 3228 0030           		move.w	$30(a0),d1
   28100/   15CF4 : D240                		add.w	d0,d1
   28101/   15CF6 : 3141 000C           		move.w	d1,$C(a0)
   28102/   15CFA : 4E75                		rts	
   28103/   15CFC :                     ; ===========================================================================
   28104/   15CFC :                     
   28105/   15CFC :                     Obj6B_Type05:				; XREF: Obj6B_TypeIndex
   28106/   15CFC : 4A28 0038           		tst.b	$38(a0)
   28107/   15D00 : 662A                		bne.s	loc_15F3E
   28108/   15D02 : 45F8 F7E0           		lea	($FFFFF7E0).w,a2
   28109/   15D06 : 7000                		moveq	#0,d0
   28110/   15D08 : 1028 003E           		move.b	$3E(a0),d0
   28111/   15D0C : 0832 0000 0000      		btst	#0,(a2,d0.w)
   28112/   15D12 : 6736                		beq.s	locret_15F5C
   28113/   15D14 : 117C 0001 0038      		move.b	#1,$38(a0)
   28114/   15D1A : 45F8 FC00           		lea	($FFFFFC00).w,a2
   28115/   15D1E : 7000                		moveq	#0,d0
   28116/   15D20 : 1028 0023           		move.b	$23(a0),d0
   28117/   15D24 : 6706                		beq.s	loc_15F3E
   28118/   15D26 : 08F2 0000 0002      		bset	#0,2(a2,d0.w)
   28119/   15D2C :                     
   28120/   15D2C :                     loc_15F3E:
   28121/   15D2C : 04A8 0001 0000      		subi.l	#$10000,8(a0)
            15D32 : 0008             
   28122/   15D34 : 06A8 0000 8000      		addi.l	#$8000,$C(a0)
            15D3A : 000C             
   28123/   15D3C : 3168 0008 0034      		move.w	8(a0),$34(a0)
   28124/   15D42 : 0C68 0980 0008      		cmpi.w	#$980,8(a0)
   28125/   15D48 : 6702                		beq.s	loc_15F5E
   28126/   15D4A :                     
   28127/   15D4A :                     locret_15F5C:
   28128/   15D4A : 4E75                		rts	
   28129/   15D4C :                     ; ===========================================================================
   28130/   15D4C :                     
   28131/   15D4C :                     loc_15F5E:
   28132/   15D4C : 4228 0028           		clr.b	$28(a0)
   28133/   15D50 : 4228 0038           		clr.b	$38(a0)
   28134/   15D54 : 4E75                		rts	
   28135/   15D56 :                     ; ===========================================================================
   28136/   15D56 :                     ; ---------------------------------------------------------------------------
   28137/   15D56 :                     ; Sprite mappings - stomper and	platforms (SBZ)
   28138/   15D56 :                     ; ---------------------------------------------------------------------------
   28139/   15D56 :                     Map_obj6B:
   28140/   15D56 :                     	include "_mappings/obj6B.asm"
(1)    1/   15D56 :                     ; ---------------------------------------------------------------------------
(1)    2/   15D56 :                     ; Sprite mappings - stomper and	platforms (SBZ)
(1)    3/   15D56 :                     ; ---------------------------------------------------------------------------
(1)    4/   15D56 : 000A 001F           		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
(1)    5/   15D5A : 001F 001F           		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
(1)    6/   15D5E : 0048                		dc.w byte_15FB0-Map_obj6B
(1)    7/   15D60 : 04                  byte_15F72:	dc.b 4
(1)    8/   15D61 : F40E 21AF C0        		dc.b $F4, $E, $21, $AF,	$C0
(1)    9/   15D66 : F40E 21B2 E0        		dc.b $F4, $E, $21, $B2,	$E0
(1)   10/   15D6B : F40E 21B2 00        		dc.b $F4, $E, $21, $B2,	0
(1)   11/   15D70 : F40E 29AF 20        		dc.b $F4, $E, $29, $AF,	$20
(1)   12/   15D75 : 08                  byte_15F87:	dc.b 8
(1)   13/   15D76 : E00C 000C E4        		dc.b $E0, $C, 0, $C, $E4
(1)   14/   15D7B : E008 0010 04        		dc.b $E0, 8, 0,	$10, 4
(1)   15/   15D80 : E80E 2013 E4        		dc.b $E8, $E, $20, $13,	$E4
(1)   16/   15D85 : E80A 201F 04        		dc.b $E8, $A, $20, $1F,	4
(1)   17/   15D8A : 000E 2013 E4        		dc.b 0,	$E, $20, $13, $E4
(1)   18/   15D8F : 000A 201F 04        		dc.b 0,	$A, $20, $1F, 4
(1)   19/   15D94 : 180C 000C E4        		dc.b $18, $C, 0, $C, $E4
(1)   20/   15D99 : 1808 0010 04        		dc.b $18, 8, 0,	$10, 4
(1)   21/   15D9E : 0E                  byte_15FB0:	dc.b $E
(1)   22/   15D9F : C00F 0000 80        		dc.b $C0, $F, 0, 0, $80
(1)   23/   15DA4 : C00F 0010 A0        		dc.b $C0, $F, 0, $10, $A0
(1)   24/   15DA9 : C00F 0020 C0        		dc.b $C0, $F, 0, $20, $C0
(1)   25/   15DAE : C00F 0010 E0        		dc.b $C0, $F, 0, $10, $E0
(1)   26/   15DB3 : C00F 0020 00        		dc.b $C0, $F, 0, $20, 0
(1)   27/   15DB8 : C00F 0010 20        		dc.b $C0, $F, 0, $10, $20
(1)   28/   15DBD : C00F 0030 40        		dc.b $C0, $F, 0, $30, $40
(1)   29/   15DC2 : C00D 0040 60        		dc.b $C0, $D, 0, $40, $60
(1)   30/   15DC7 : E00F 0048 80        		dc.b $E0, $F, 0, $48, $80
(1)   31/   15DCC : E00F 0048 C0        		dc.b $E0, $F, 0, $48, $C0
(1)   32/   15DD1 : E00F 0058 00        		dc.b $E0, $F, 0, $58, 0
(1)   33/   15DD6 : 000F 0048 80        		dc.b 0,	$F, 0, $48, $80
(1)   34/   15DDB : 000F 0058 C0        		dc.b 0,	$F, 0, $58, $C0
(1)   35/   15DE0 : 200F 0058 80        		dc.b $20, $F, 0, $58, $80
(1)   36/   15DE5 : (MACRO)              		even
(1)   36/   15DE5 : 00                                          dc.b 0 ;ds.b 1 
   28141/   15DE6 :                     
   28142/   15DE6 :                     ; ===========================================================================
   28143/   15DE6 :                     ; ---------------------------------------------------------------------------
   28144/   15DE6 :                     ; Object 6C - vanishing	platforms (SBZ)
   28145/   15DE6 :                     ; ---------------------------------------------------------------------------
   28146/   15DE6 :                     
   28147/   15DE6 :                     Obj6C:					; XREF: Obj_Index
   28148/   15DE6 : 7000                		moveq	#0,d0
   28149/   15DE8 : 1028 0024           		move.b	$24(a0),d0
   28150/   15DEC : 323B 0006           		move.w	Obj6C_Index(pc,d0.w),d1
   28151/   15DF0 : 4EFB 1002           		jmp	Obj6C_Index(pc,d1.w)
   28152/   15DF4 :                     ; ===========================================================================
   28153/   15DF4 : 0008                Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
   28154/   15DF6 : 0086                		dc.w Obj6C_Vanish-Obj6C_Index
   28155/   15DF8 : 0086                		dc.w Obj6C_Vanish-Obj6C_Index
   28156/   15DFA : 0062                		dc.w loc_16068-Obj6C_Index
   28157/   15DFC :                     ; ===========================================================================
   28158/   15DFC :                     
   28159/   15DFC :                     Obj6C_Main:				; XREF: Obj6C_Index
   28160/   15DFC : 5C28 0024           		addq.b	#6,$24(a0)
   28161/   15E00 : 217C 0001 5F18      		move.l	#Map_obj6C,4(a0)
            15E06 : 0004             
   28162/   15E08 : 317C 44C3 0002      		move.w	#$44C3,2(a0)
   28163/   15E0E : 0028 0004 0001      		ori.b	#4,1(a0)
   28164/   15E14 : 117C 0010 0019      		move.b	#$10,$19(a0)
   28165/   15E1A : 117C 0004 0018      		move.b	#4,$18(a0)
   28166/   15E20 : 7000                		moveq	#0,d0
   28167/   15E22 : 1028 0028           		move.b	$28(a0),d0	; get object type
   28168/   15E26 : 0240 000F           		andi.w	#$F,d0		; read only the	2nd digit
   28169/   15E2A : 5240                		addq.w	#1,d0		; add 1
   28170/   15E2C : EF48                		lsl.w	#7,d0		; multiply by $80
   28171/   15E2E : 3200                		move.w	d0,d1
   28172/   15E30 : 5340                		subq.w	#1,d0
   28173/   15E32 : 3140 0030           		move.w	d0,$30(a0)
   28174/   15E36 : 3140 0032           		move.w	d0,$32(a0)
   28175/   15E3A : 7000                		moveq	#0,d0
   28176/   15E3C : 1028 0028           		move.b	$28(a0),d0	; get object type
   28177/   15E40 : 0240 00F0           		andi.w	#$F0,d0		; read only the	1st digit
   28178/   15E44 : 0641 0080           		addi.w	#$80,d1
   28179/   15E48 : C0C1                		mulu.w	d1,d0
   28180/   15E4A : E088                		lsr.l	#8,d0
   28181/   15E4C : 3140 0036           		move.w	d0,$36(a0)
   28182/   15E50 : 5341                		subq.w	#1,d1
   28183/   15E52 : 3141 0038           		move.w	d1,$38(a0)
   28184/   15E56 :                     
   28185/   15E56 :                     loc_16068:				; XREF: Obj6C_Index
   28186/   15E56 : 3038 FE04           		move.w	($FFFFFE04).w,d0
   28187/   15E5A : 9068 0036           		sub.w	$36(a0),d0
   28188/   15E5E : C068 0038           		and.w	$38(a0),d0
   28189/   15E62 : 6606                		bne.s	Obj6C_Animate
   28190/   15E64 : 5928 0024           		subq.b	#4,$24(a0)
   28191/   15E68 : 6010                		bra.s	Obj6C_Vanish
   28192/   15E6A :                     ; ===========================================================================
   28193/   15E6A :                     
   28194/   15E6A :                     Obj6C_Animate:
   28195/   15E6A : 43F9 0001 5F04      		lea	(Ani_obj6C).l,a1
   28196/   15E70 : 4EB9 0000 A4FE      		jsr	AnimateSprite
   28197/   15E76 : 6000 95F2           		bra.w	MarkObjGone
   28198/   15E7A :                     ; ===========================================================================
   28199/   15E7A :                     
   28200/   15E7A :                     Obj6C_Vanish:				; XREF: Obj6C_Index
   28201/   15E7A : 5368 0030           		subq.w	#1,$30(a0)
   28202/   15E7E : 6A18                		bpl.s	loc_160AA
   28203/   15E80 : 317C 007F 0030      		move.w	#127,$30(a0)
   28204/   15E86 : 4A28 001C           		tst.b	$1C(a0)
   28205/   15E8A : 6706                		beq.s	loc_160A4
   28206/   15E8C : 3168 0032 0030      		move.w	$32(a0),$30(a0)
   28207/   15E92 :                     
   28208/   15E92 :                     loc_160A4:
   28209/   15E92 : 0868 0000 001C      		bchg	#0,$1C(a0)
   28210/   15E98 :                     
   28211/   15E98 :                     loc_160AA:
   28212/   15E98 : 43F9 0001 5F04      		lea	(Ani_obj6C).l,a1
   28213/   15E9E : 4EB9 0000 A4FE      		jsr	AnimateSprite
   28214/   15EA4 : 0828 0001 001A      		btst	#1,$1A(a0)	; has platform vanished?
   28215/   15EAA : 6632                		bne.s	Obj6C_NotSolid	; if yes, branch
   28216/   15EAC : 0C28 0002 0024      		cmpi.b	#2,$24(a0)
   28217/   15EB2 : 6610                		bne.s	loc_160D6
   28218/   15EB4 : 7200                		moveq	#0,d1
   28219/   15EB6 : 1228 0019           		move.b	$19(a0),d1
   28220/   15EBA : 4EB9 0000 725C      		jsr	(PlatformObject).l
   28221/   15EC0 : 6000 95A8           		bra.w	MarkObjGone
   28222/   15EC4 :                     ; ===========================================================================
   28223/   15EC4 :                     
   28224/   15EC4 :                     loc_160D6:
   28225/   15EC4 : 7200                		moveq	#0,d1
   28226/   15EC6 : 1228 0019           		move.b	$19(a0),d1
   28227/   15ECA : 4EB9 0000 73D0      		jsr	(ExitPlatform).l
   28228/   15ED0 : 3428 0008           		move.w	8(a0),d2
   28229/   15ED4 : 4EB9 0000 793A      		jsr	(MvSonicOnPtfm2).l
   28230/   15EDA : 6000 958E           		bra.w	MarkObjGone
   28231/   15EDE :                     ; ===========================================================================
   28232/   15EDE :                     
   28233/   15EDE :                     Obj6C_NotSolid:				; XREF: Obj6C_Vanish
   28234/   15EDE : 0828 0003 0022      		btst	#3,$22(a0)
   28235/   15EE4 : 671A                		beq.s	Obj6C_Display
   28236/   15EE6 : 43F8 D000           		lea	($FFFFD000).w,a1
   28237/   15EEA : 08A9 0003 0022      		bclr	#3,$22(a1)
   28238/   15EF0 : 08A8 0003 0022      		bclr	#3,$22(a0)
   28239/   15EF6 : 117C 0002 0024      		move.b	#2,$24(a0)
   28240/   15EFC : 4228 0025           		clr.b	$25(a0)
   28241/   15F00 :                     
   28242/   15F00 :                     Obj6C_Display:
   28243/   15F00 : 6000 9568           		bra.w	MarkObjGone
   28244/   15F04 :                     ; ===========================================================================
   28245/   15F04 :                     Ani_obj6C:
   28246/   15F04 :                     	include "_animations/obj6C.asm"
(1)    1/   15F04 :                     ; ---------------------------------------------------------------------------
(1)    2/   15F04 :                     ; Animation script - vanishing platforms (SBZ)
(1)    3/   15F04 :                     ; ---------------------------------------------------------------------------
(1)    4/   15F04 : 0004                		dc.w byte_1611A-Ani_obj6C
(1)    5/   15F06 : 000C                		dc.w byte_16122-Ani_obj6C
(1)    6/   15F08 : 0700 0102 03FE      byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
            15F0E : 0100             
(1)    7/   15F10 : 0703 0201 00FE      byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
            15F16 : 0100             
(1)    8/   15F18 : (MACRO)              		even
   28247/   15F18 :                     
   28248/   15F18 :                     ; ---------------------------------------------------------------------------
   28249/   15F18 :                     ; Sprite mappings - vanishing platforms	(SBZ)
   28250/   15F18 :                     ; ---------------------------------------------------------------------------
   28251/   15F18 :                     Map_obj6C:
   28252/   15F18 :                     	include "_mappings/obj6C.asm"
(1)    1/   15F18 :                     ; ---------------------------------------------------------------------------
(1)    2/   15F18 :                     ; Sprite mappings - vanishing platforms	(SBZ)
(1)    3/   15F18 :                     ; ---------------------------------------------------------------------------
(1)    4/   15F18 : 0008 000E           		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
(1)    5/   15F1C : 0014 001A           		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
(1)    6/   15F20 : 01                  byte_16132:	dc.b 1
(1)    7/   15F21 : F80F 0000 F0        		dc.b $F8, $F, 0, 0, $F0
(1)    8/   15F26 : 01                  byte_16138:	dc.b 1
(1)    9/   15F27 : F807 0010 F8        		dc.b $F8, 7, 0,	$10, $F8
(1)   10/   15F2C : 01                  byte_1613E:	dc.b 1
(1)   11/   15F2D : F803 0018 FC        		dc.b $F8, 3, 0,	$18, $FC
(1)   12/   15F32 : 00                  byte_16144:	dc.b 0
(1)   13/   15F33 : (MACRO)              		even
(1)   13/   15F33 : 00                                          dc.b 0 ;ds.b 1 
   28253/   15F34 :                     
   28254/   15F34 :                     ; ===========================================================================
   28255/   15F34 :                     ; ---------------------------------------------------------------------------
   28256/   15F34 :                     ; Object 6E - electrocution orbs (SBZ)
   28257/   15F34 :                     ; ---------------------------------------------------------------------------
   28258/   15F34 :                     
   28259/   15F34 :                     Obj6E:					; XREF: Obj_Index
   28260/   15F34 : 7000                		moveq	#0,d0
   28261/   15F36 : 1028 0024           		move.b	$24(a0),d0
   28262/   15F3A : 323B 0006           		move.w	Obj6E_Index(pc,d0.w),d1
   28263/   15F3E : 4EFB 1002           		jmp	Obj6E_Index(pc,d1.w)
   28264/   15F42 :                     ; ===========================================================================
   28265/   15F42 : 0004                Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
   28266/   15F44 : 0030                		dc.w Obj6E_Shock-Obj6E_Index
   28267/   15F46 :                     ; ===========================================================================
   28268/   15F46 :                     
   28269/   15F46 :                     Obj6E_Main:				; XREF: Obj6E_Index
   28270/   15F46 : 5428 0024           		addq.b	#2,$24(a0)
   28271/   15F4A : 217C 0001 5FCE      		move.l	#Map_obj6E,4(a0)
            15F50 : 0004             
   28272/   15F52 : 317C 047E 0002      		move.w	#$47E,2(a0)
   28273/   15F58 : 0028 0004 0001      		ori.b	#4,1(a0)
   28274/   15F5E : 117C 0028 0019      		move.b	#$28,$19(a0)
   28275/   15F64 : 7000                		moveq	#0,d0
   28276/   15F66 : 1028 0028           		move.b	$28(a0),d0	; read object type
   28277/   15F6A : E948                		lsl.w	#4,d0		; multiply by $10
   28278/   15F6C : 5340                		subq.w	#1,d0
   28279/   15F6E : 3140 0034           		move.w	d0,$34(a0)
   28280/   15F72 :                     
   28281/   15F72 :                     Obj6E_Shock:				; XREF: Obj6E_Index
   28282/   15F72 : 3038 FE04           		move.w	($FFFFFE04).w,d0
   28283/   15F76 : C068 0034           		and.w	$34(a0),d0
   28284/   15F7A : 6616                		bne.s	Obj6E_Animate
   28285/   15F7C : 117C 0001 001C      		move.b	#1,$1C(a0)	; run "shocking" animation
   28286/   15F82 : 4A28 0001           		tst.b	1(a0)
   28287/   15F86 : 6A0A                		bpl.s	Obj6E_Animate
   28288/   15F88 : 303C 00B1           		move.w	#$B1,d0
   28289/   15F8C : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play electricity sound
   28290/   15F92 :                     
   28291/   15F92 :                     Obj6E_Animate:
   28292/   15F92 : 43F9 0001 5FB6      		lea	(Ani_obj6E).l,a1
   28293/   15F98 : 4EB9 0000 A4FE      		jsr	AnimateSprite
   28294/   15F9E : 117C 0000 0020      		move.b	#0,$20(a0)
   28295/   15FA4 : 0C28 0004 001A      		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
   28296/   15FAA : 6606                		bne.s	Obj6E_Display	; if not, branch
   28297/   15FAC : 117C 00A4 0020      		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
   28298/   15FB2 :                     
   28299/   15FB2 :                     Obj6E_Display:
   28300/   15FB2 : 6000 94B6           		bra.w	MarkObjGone
   28301/   15FB6 :                     ; ===========================================================================
   28302/   15FB6 :                     Ani_obj6E:
   28303/   15FB6 :                     	include "_animations/obj6E.asm"
(1)    1/   15FB6 :                     ; ---------------------------------------------------------------------------
(1)    2/   15FB6 :                     ; Animation script - electrocution orbs (SBZ)
(1)    3/   15FB6 :                     ; ---------------------------------------------------------------------------
(1)    4/   15FB6 : 0004                		dc.w byte_161CC-Ani_obj6E
(1)    5/   15FB8 : 0008                		dc.w byte_161D0-Ani_obj6E
(1)    6/   15FBA : 0700 FF00           byte_161CC:	dc.b 7,	0, $FF,	0
(1)    7/   15FBE : 0001 0101 0203      byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
            15FC4 : 0304 0404 0505 
            15FCA : 0500 FD00          
(1)    8/   15FCE : (MACRO)              		even
   28304/   15FCE :                     
   28305/   15FCE :                     ; ---------------------------------------------------------------------------
   28306/   15FCE :                     ; Sprite mappings - electrocution orbs (SBZ)
   28307/   15FCE :                     ; ---------------------------------------------------------------------------
   28308/   15FCE :                     Map_obj6E:
   28309/   15FCE :                     	include "_mappings/obj6E.asm"
(1)    1/   15FCE :                     ; ---------------------------------------------------------------------------
(1)    2/   15FCE :                     ; Sprite mappings - electrocution orbs (SBZ)
(1)    3/   15FCE :                     ; ---------------------------------------------------------------------------
(1)    4/   15FCE : 000C 0017           		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
(1)    5/   15FD2 : 0027 0041           		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
(1)    6/   15FD6 : 0056 0075           		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
(1)    7/   15FDA : 02                  byte_161EC:	dc.b 2
(1)    8/   15FDB : F804 6000 F8        		dc.b $F8, 4, $60, 0, $F8
(1)    9/   15FE0 : 0006 4002 F8        		dc.b 0,	6, $40,	2, $F8
(1)   10/   15FE5 : 03                  byte_161F7:	dc.b 3
(1)   11/   15FE6 : F805 0008 F8        		dc.b $F8, 5, 0,	8, $F8
(1)   12/   15FEB : F804 6000 F8        		dc.b $F8, 4, $60, 0, $F8
(1)   13/   15FF0 : 0006 4002 F8        		dc.b 0,	6, $40,	2, $F8
(1)   14/   15FF5 : 05                  byte_16207:	dc.b 5
(1)   15/   15FF6 : F805 0008 F8        		dc.b $F8, 5, 0,	8, $F8
(1)   16/   15FFB : F804 6000 F8        		dc.b $F8, 4, $60, 0, $F8
(1)   17/   16000 : 0006 4002 F8        		dc.b 0,	6, $40,	2, $F8
(1)   18/   16005 : F60D 000C 08        		dc.b $F6, $D, 0, $C, 8
(1)   19/   1600A : F60D 080C DC        		dc.b $F6, $D, 8, $C, $DC
(1)   20/   1600F : 04                  byte_16221:	dc.b 4
(1)   21/   16010 : F804 6000 F8        		dc.b $F8, 4, $60, 0, $F8
(1)   22/   16015 : 0006 4002 F8        		dc.b 0,	6, $40,	2, $F8
(1)   23/   1601A : F60D 000C 08        		dc.b $F6, $D, 0, $C, 8
(1)   24/   1601F : F60D 080C DC        		dc.b $F6, $D, 8, $C, $DC
(1)   25/   16024 : 06                  byte_16236:	dc.b 6
(1)   26/   16025 : F804 6000 F8        		dc.b $F8, 4, $60, 0, $F8
(1)   27/   1602A : 0006 4002 F8        		dc.b 0,	6, $40,	2, $F8
(1)   28/   1602F : F60D 100C 08        		dc.b $F6, $D, $10, $C, 8
(1)   29/   16034 : F60D 180C DC        		dc.b $F6, $D, $18, $C, $DC
(1)   30/   16039 : F60D 000C 24        		dc.b $F6, $D, 0, $C, $24
(1)   31/   1603E : F60D 080C C0        		dc.b $F6, $D, 8, $C, $C0
(1)   32/   16043 : 04                  byte_16255:	dc.b 4
(1)   33/   16044 : F804 6000 F8        		dc.b $F8, 4, $60, 0, $F8
(1)   34/   16049 : 0006 4002 F8        		dc.b 0,	6, $40,	2, $F8
(1)   35/   1604E : F60D 100C 24        		dc.b $F6, $D, $10, $C, $24
(1)   36/   16053 : F60D 180C C0        		dc.b $F6, $D, $18, $C, $C0
(1)   37/   16058 : (MACRO)              		even
   28310/   16058 :                     
   28311/   16058 :                     ; ===========================================================================
   28312/   16058 :                     ; ---------------------------------------------------------------------------
   28313/   16058 :                     ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
   28314/   16058 :                     ; ---------------------------------------------------------------------------
   28315/   16058 :                     
   28316/   16058 :                     Obj6F:					; XREF: Obj_Index
   28317/   16058 : 7000                		moveq	#0,d0
   28318/   1605A : 1028 0024           		move.b	$24(a0),d0
   28319/   1605E : 323B 0050           		move.w	Obj6F_Index(pc,d0.w),d1
   28320/   16062 : 4EBB 104C           		jsr	Obj6F_Index(pc,d1.w)
   28321/   16066 : 3028 0030           		move.w	$30(a0),d0
   28322/   1606A : 0240 FF80           		andi.w	#$FF80,d0
   28323/   1606E : 3238 F700           		move.w	($FFFFF700).w,d1
   28324/   16072 : 0441 0080           		subi.w	#$80,d1
   28325/   16076 : 0241 FF80           		andi.w	#$FF80,d1
   28326/   1607A : 9041                		sub.w	d1,d0
   28327/   1607C : 0C40 0280           		cmpi.w	#$280,d0
   28328/   16080 : 6206                		bhi.s	loc_1629A
   28329/   16082 :                     
   28330/   16082 :                     Obj6F_Display:
   28331/   16082 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   28332/   16088 :                     ; ===========================================================================
   28333/   16088 :                     
   28334/   16088 :                     loc_1629A:
   28335/   16088 : 0C38 0002 FE11      		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
   28336/   1608E : 6606                		bne.s	Obj6F_Act1or2	; if not, branch
   28337/   16090 : 0C40 FF80           		cmpi.w	#-$80,d0
   28338/   16094 : 64EC                		bcc.s	Obj6F_Display
   28339/   16096 :                     
   28340/   16096 :                     Obj6F_Act1or2:
   28341/   16096 : 1028 002F           		move.b	$2F(a0),d0
   28342/   1609A : 6A0E                		bpl.s	Obj6F_Delete
   28343/   1609C : 0240 007F           		andi.w	#$7F,d0
   28344/   160A0 : 45F8 F7C1           		lea	($FFFFF7C1).w,a2
   28345/   160A4 : 08B2 0000 0000      		bclr	#0,(a2,d0.w)
   28346/   160AA :                     
   28347/   160AA :                     Obj6F_Delete:
   28348/   160AA : 4EF9 0000 D40E      		jmp	DeleteObject
   28349/   160B0 :                     ; ===========================================================================
   28350/   160B0 : 0004                Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
   28351/   160B2 : 0114                		dc.w loc_163D8-Obj6F_Index
   28352/   160B4 :                     ; ===========================================================================
   28353/   160B4 :                     
   28354/   160B4 :                     Obj6F_Main:				; XREF: Obj6F_Index
   28355/   160B4 : 1028 0028           		move.b	$28(a0),d0
   28356/   160B8 : 6B00 00B4           		bmi.w	loc_16380
   28357/   160BC : 5428 0024           		addq.b	#2,$24(a0)
   28358/   160C0 : 217C 0001 5728      		move.l	#Map_obj69a,4(a0)
            160C6 : 0004             
   28359/   160C8 : 317C 04DF 0002      		move.w	#$4DF,2(a0)
   28360/   160CE : 117C 0010 0019      		move.b	#$10,$19(a0)
   28361/   160D4 : 0028 0004 0001      		ori.b	#4,1(a0)
   28362/   160DA : 117C 0004 0018      		move.b	#4,$18(a0)
   28363/   160E0 : 7000                		moveq	#0,d0
   28364/   160E2 : 1028 0028           		move.b	$28(a0),d0
   28365/   160E6 : 3200                		move.w	d0,d1
   28366/   160E8 : E648                		lsr.w	#3,d0
   28367/   160EA : 0240 001E           		andi.w	#$1E,d0
   28368/   160EE : 45FA 01A2           		lea	off_164A6(pc),a2
   28369/   160F2 : D4F2 0000           		adda.w	(a2,d0.w),a2
   28370/   160F6 : 315A 0038           		move.w	(a2)+,$38(a0)
   28371/   160FA : 315A 0030           		move.w	(a2)+,$30(a0)
   28372/   160FE : 214A 003C           		move.l	a2,$3C(a0)
   28373/   16102 : 0241 000F           		andi.w	#$F,d1
   28374/   16106 : E549                		lsl.w	#2,d1
   28375/   16108 : 1141 0038           		move.b	d1,$38(a0)
   28376/   1610C : 117C 0004 003A      		move.b	#4,$3A(a0)
   28377/   16112 : 4A38 F7C0           		tst.b	($FFFFF7C0).w
   28378/   16116 : 672C                		beq.s	loc_16356
   28379/   16118 : 117C 0001 003B      		move.b	#1,$3B(a0)
   28380/   1611E : 4428 003A           		neg.b	$3A(a0)
   28381/   16122 : 7200                		moveq	#0,d1
   28382/   16124 : 1228 0038           		move.b	$38(a0),d1
   28383/   16128 : D228 003A           		add.b	$3A(a0),d1
   28384/   1612C : B228 0039           		cmp.b	$39(a0),d1
   28385/   16130 : 650E                		bcs.s	loc_16352
   28386/   16132 : 1001                		move.b	d1,d0
   28387/   16134 : 7200                		moveq	#0,d1
   28388/   16136 : 4A00                		tst.b	d0
   28389/   16138 : 6A06                		bpl.s	loc_16352
   28390/   1613A : 1228 0039           		move.b	$39(a0),d1
   28391/   1613E : 5901                		subq.b	#4,d1
   28392/   16140 :                     
   28393/   16140 :                     loc_16352:
   28394/   16140 : 1141 0038           		move.b	d1,$38(a0)
   28395/   16144 :                     
   28396/   16144 :                     loc_16356:
   28397/   16144 : 3172 1000 0034      		move.w	(a2,d1.w),$34(a0)
   28398/   1614A : 3172 1002 0036      		move.w	2(a2,d1.w),$36(a0)
   28399/   16150 : 4A41                		tst.w	d1
   28400/   16152 : 6606                		bne.s	loc_1636C
   28401/   16154 : 117C 0001 001C      		move.b	#1,$1C(a0)
   28402/   1615A :                     
   28403/   1615A :                     loc_1636C:
   28404/   1615A : 0C41 0008           		cmpi.w	#8,d1
   28405/   1615E : 6606                		bne.s	loc_16378
   28406/   16160 : 117C 0000 001C      		move.b	#0,$1C(a0)
   28407/   16166 :                     
   28408/   16166 :                     loc_16378:
   28409/   16166 : 6100 C1A6           		bsr.w	Obj63_ChangeDir
   28410/   1616A : 6000 0058           		bra.w	loc_163D8
   28411/   1616E :                     ; ===========================================================================
   28412/   1616E :                     
   28413/   1616E :                     loc_16380:				; XREF: Obj6F_Main
   28414/   1616E : 1140 002F           		move.b	d0,$2F(a0)
   28415/   16172 : 0240 007F           		andi.w	#$7F,d0
   28416/   16176 : 45F8 F7C1           		lea	($FFFFF7C1).w,a2
   28417/   1617A : 08F2 0000 0000      		bset	#0,(a2,d0.w)
   28418/   16180 : 6706                		beq.s	loc_1639A
   28419/   16182 : 4EF9 0000 D40E      		jmp	DeleteObject
   28420/   16188 :                     ; ===========================================================================
   28421/   16188 :                     
   28422/   16188 :                     loc_1639A:
   28423/   16188 : D040                		add.w	d0,d0
   28424/   1618A : 0240 001E           		andi.w	#$1E,d0
   28425/   1618E : 0640 0080           		addi.w	#$80,d0
   28426/   16192 : 45F9 0008 0042      		lea	(ObjPos_Index).l,a2
   28427/   16198 : D4F2 0000           		adda.w	(a2,d0.w),a2
   28428/   1619C : 321A                		move.w	(a2)+,d1
   28429/   1619E : 2248                		movea.l	a0,a1
   28430/   161A0 : 6008                		bra.s	Obj6F_LoadPform
   28431/   161A2 :                     ; ===========================================================================
   28432/   161A2 :                     
   28433/   161A2 :                     Obj6F_Loop:
   28434/   161A2 : 4EB9 0000 D858      		jsr	SingleObjLoad
   28435/   161A8 : 6612                		bne.s	loc_163D0
   28436/   161AA :                     
   28437/   161AA :                     Obj6F_LoadPform:			; XREF: loc_1639A
   28438/   161AA : 12BC 006F           		move.b	#$6F,0(a1)
   28439/   161AE : 335A 0008           		move.w	(a2)+,8(a1)
   28440/   161B2 : 335A 000C           		move.w	(a2)+,$C(a1)
   28441/   161B6 : 301A                		move.w	(a2)+,d0
   28442/   161B8 : 1340 0028           		move.b	d0,$28(a1)
   28443/   161BC :                     
   28444/   161BC :                     loc_163D0:
   28445/   161BC : 51C9 FFE4           		dbf	d1,Obj6F_Loop
   28446/   161C0 :                     
   28447/   161C0 : 588F                		addq.l	#4,sp
   28448/   161C2 : 4E75                		rts	
   28449/   161C4 :                     ; ===========================================================================
   28450/   161C4 :                     
   28451/   161C4 :                     loc_163D8:				; XREF: Obj6F_Index
   28452/   161C4 : 43F9 0001 6276      		lea	(Ani_obj6F).l,a1
   28453/   161CA : 4EB9 0000 A4FE      		jsr	AnimateSprite
   28454/   161D0 : 4A28 001A           		tst.b	$1A(a0)
   28455/   161D4 : 661A                		bne.s	loc_16404
   28456/   161D6 : 3F28 0008           		move.w	8(a0),-(sp)
   28457/   161DA : 6100 0034           		bsr.w	loc_16424
   28458/   161DE : 323C 001B           		move.w	#$1B,d1
   28459/   161E2 : 343C 0007           		move.w	#7,d2
   28460/   161E6 : 3602                		move.w	d2,d3
   28461/   161E8 : 5243                		addq.w	#1,d3
   28462/   161EA : 381F                		move.w	(sp)+,d4
   28463/   161EC : 6000 95A4           		bra.w	SolidObject
   28464/   161F0 :                     ; ===========================================================================
   28465/   161F0 :                     
   28466/   161F0 :                     loc_16404:
   28467/   161F0 : 0828 0003 0022      		btst	#3,$22(a0)
   28468/   161F6 : 6714                		beq.s	loc_16420
   28469/   161F8 : 43F8 D000           		lea	($FFFFD000).w,a1
   28470/   161FC : 08A9 0003 0022      		bclr	#3,$22(a1)
   28471/   16202 : 08A8 0003 0022      		bclr	#3,$22(a0)
   28472/   16208 : 4228 0025           		clr.b	$25(a0)
   28473/   1620C :                     
   28474/   1620C :                     loc_16420:
   28475/   1620C : 6000 0002           		bra.w	*+4
   28476/   16210 :                     
   28477/   16210 :                     loc_16424:
   28478/   16210 : 3028 0008           		move.w	8(a0),d0
   28479/   16214 : B068 0034           		cmp.w	$34(a0),d0
   28480/   16218 : 6656                		bne.s	loc_16484
   28481/   1621A : 3028 000C           		move.w	$C(a0),d0
   28482/   1621E : B068 0036           		cmp.w	$36(a0),d0
   28483/   16222 : 664C                		bne.s	loc_16484
   28484/   16224 : 7200                		moveq	#0,d1
   28485/   16226 : 1228 0038           		move.b	$38(a0),d1
   28486/   1622A : D228 003A           		add.b	$3A(a0),d1
   28487/   1622E : B228 0039           		cmp.b	$39(a0),d1
   28488/   16232 : 650E                		bcs.s	loc_16456
   28489/   16234 : 1001                		move.b	d1,d0
   28490/   16236 : 7200                		moveq	#0,d1
   28491/   16238 : 4A00                		tst.b	d0
   28492/   1623A : 6A06                		bpl.s	loc_16456
   28493/   1623C : 1228 0039           		move.b	$39(a0),d1
   28494/   16240 : 5901                		subq.b	#4,d1
   28495/   16242 :                     
   28496/   16242 :                     loc_16456:
   28497/   16242 : 1141 0038           		move.b	d1,$38(a0)
   28498/   16246 : 2268 003C           		movea.l	$3C(a0),a1
   28499/   1624A : 3171 1000 0034      		move.w	(a1,d1.w),$34(a0)
   28500/   16250 : 3171 1002 0036      		move.w	2(a1,d1.w),$36(a0)
   28501/   16256 : 4A41                		tst.w	d1
   28502/   16258 : 6606                		bne.s	loc_16474
   28503/   1625A : 117C 0001 001C      		move.b	#1,$1C(a0)
   28504/   16260 :                     
   28505/   16260 :                     loc_16474:
   28506/   16260 : 0C41 0008           		cmpi.w	#8,d1
   28507/   16264 : 6606                		bne.s	loc_16480
   28508/   16266 : 117C 0000 001C      		move.b	#0,$1C(a0)
   28509/   1626C :                     
   28510/   1626C :                     loc_16480:
   28511/   1626C : 6100 C0A0           		bsr.w	Obj63_ChangeDir
   28512/   16270 :                     
   28513/   16270 :                     loc_16484:
   28514/   16270 : 4EF9 0000 D3AC      		jmp	SpeedToPos
   28515/   16276 :                     ; ===========================================================================
   28516/   16276 :                     Ani_obj6F:
   28517/   16276 :                     	include "_animations/obj6F.asm"
(1)    1/   16276 :                     ; ---------------------------------------------------------------------------
(1)    2/   16276 :                     ; Animation script - platform on conveyor belt (SBZ)
(1)    3/   16276 :                     ; ---------------------------------------------------------------------------
(1)    4/   16276 : 0004                		dc.w byte_1648E-Ani_obj6F
(1)    5/   16278 : 0018                		dc.w byte_164A2-Ani_obj6F
(1)    6/   1627A : 0000 0102 0304      byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
            16280 : 4342 4140 6162 63 
(1)    7/   16287 : 6423 2221 00FF 00   		dc.b $64, $23, $22, $21, 0, $FF, 0
(1)    8/   1628E : 0F00 FF             byte_164A2:	dc.b $F, 0, $FF
(1)    9/   16291 : (MACRO)              		even
(1)    9/   16291 : 00                                          dc.b 0 ;ds.b 1 
   28518/   16292 :                     
   28519/   16292 : 000C 0020 0034      off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
   28520/   16298 : 0048 005C 0070      		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
   28521/   1629E : 0010 0E80 0E14      word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
            162A4 : 0370 0EEF 0302 
            162AA : 0EEF 0340 0E14 
            162B0 : 03AE             
   28522/   162B2 : 0010 0F80 0F14      word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
            162B8 : 02E0 0FEF 0272 
            162BE : 0FEF 02B0 0F14 
            162C4 : 031E             
   28523/   162C6 : 0010 1080 1014      word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
            162CC : 0270 10EF 0202 
            162D2 : 10EF 0240 1014 
            162D8 : 02AE             
   28524/   162DA : 0010 0F80 0F14      word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
            162E0 : 0570 0FEF 0502 
            162E6 : 0FEF 0540 0F14 
            162EC : 05AE             
   28525/   162EE : 0010 1B80 1B14      word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
            162F4 : 0670 1BEF 0602 
            162FA : 1BEF 0640 1B14 
            16300 : 06AE             
   28526/   16302 : 0010 1C80 1C14      word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
            16308 : 05E0 1CEF 0572 
            1630E : 1CEF 05B0 1C14 
            16314 : 061E             
   28527/   16316 :                     ; ===========================================================================
   28528/   16316 :                     ; ---------------------------------------------------------------------------
   28529/   16316 :                     ; Object 70 - large girder block (SBZ)
   28530/   16316 :                     ; ---------------------------------------------------------------------------
   28531/   16316 :                     
   28532/   16316 :                     Obj70:					; XREF: Obj_Index
   28533/   16316 : 7000                		moveq	#0,d0
   28534/   16318 : 1028 0024           		move.b	$24(a0),d0
   28535/   1631C : 323B 0006           		move.w	Obj70_Index(pc,d0.w),d1
   28536/   16320 : 4EFB 1002           		jmp	Obj70_Index(pc,d1.w)
   28537/   16324 :                     ; ===========================================================================
   28538/   16324 : 0004                Obj70_Index:	dc.w Obj70_Main-Obj70_Index
   28539/   16326 : 003E                		dc.w Obj70_Action-Obj70_Index
   28540/   16328 :                     ; ===========================================================================
   28541/   16328 :                     
   28542/   16328 :                     Obj70_Main:				; XREF: Obj70_Index
   28543/   16328 : 5428 0024           		addq.b	#2,$24(a0)
   28544/   1632C : 217C 0001 6414      		move.l	#Map_obj70,4(a0)
            16332 : 0004             
   28545/   16334 : 317C 42F0 0002      		move.w	#$42F0,2(a0)
   28546/   1633A : 0028 0004 0001      		ori.b	#4,1(a0)
   28547/   16340 : 117C 0004 0018      		move.b	#4,$18(a0)
   28548/   16346 : 117C 0060 0019      		move.b	#$60,$19(a0)
   28549/   1634C : 117C 0018 0016      		move.b	#$18,$16(a0)
   28550/   16352 : 3168 0008 0032      		move.w	8(a0),$32(a0)
   28551/   16358 : 3168 000C 0030      		move.w	$C(a0),$30(a0)
   28552/   1635E : 6100 006A           		bsr.w	Obj70_Move2
   28553/   16362 :                     
   28554/   16362 :                     Obj70_Action:				; XREF: Obj70_Index
   28555/   16362 : 3F28 0008           		move.w	8(a0),-(sp)
   28556/   16366 : 4A68 003A           		tst.w	$3A(a0)
   28557/   1636A : 6706                		beq.s	Obj70_Move
   28558/   1636C : 5368 003A           		subq.w	#1,$3A(a0)
   28559/   16370 : 6610                		bne.s	Obj70_Solid
   28560/   16372 :                     
   28561/   16372 :                     Obj70_Move:
   28562/   16372 : 4EB9 0000 D3AC      		jsr	SpeedToPos
   28563/   16378 : 5368 0034           		subq.w	#1,$34(a0)	; subtract 1 from movement duration
   28564/   1637C : 6604                		bne.s	Obj70_Solid	; if time remains, branch
   28565/   1637E : 6100 004A           		bsr.w	Obj70_Move2	; if time is zero, branch
   28566/   16382 :                     
   28567/   16382 :                     Obj70_Solid:
   28568/   16382 : 381F                		move.w	(sp)+,d4
   28569/   16384 : 4A28 0001           		tst.b	1(a0)
   28570/   16388 : 6A18                		bpl.s	Obj70_ChkDel
   28571/   1638A : 7200                		moveq	#0,d1
   28572/   1638C : 1228 0019           		move.b	$19(a0),d1
   28573/   16390 : 0641 000B           		addi.w	#$B,d1
   28574/   16394 : 7400                		moveq	#0,d2
   28575/   16396 : 1428 0016           		move.b	$16(a0),d2
   28576/   1639A : 3602                		move.w	d2,d3
   28577/   1639C : 5243                		addq.w	#1,d3
   28578/   1639E : 6100 93F2           		bsr.w	SolidObject
   28579/   163A2 :                     
   28580/   163A2 :                     Obj70_ChkDel:
   28581/   163A2 : 3028 0032           		move.w	$32(a0),d0
   28582/   163A6 : 0240 FF80           		andi.w	#$FF80,d0
   28583/   163AA : 3238 F700           		move.w	($FFFFF700).w,d1
   28584/   163AE : 0441 0080           		subi.w	#$80,d1
   28585/   163B2 : 0241 FF80           		andi.w	#$FF80,d1
   28586/   163B6 : 9041                		sub.w	d1,d0
   28587/   163B8 : 0C40 0280           		cmpi.w	#$280,d0
   28588/   163BC : 6206                		bhi.s	Obj70_Delete
   28589/   163BE : 4EF9 0000 D3D2      		jmp	DisplaySprite
   28590/   163C4 :                     ; ===========================================================================
   28591/   163C4 :                     
   28592/   163C4 :                     Obj70_Delete:
   28593/   163C4 : 4EF9 0000 D40E      		jmp	DeleteObject
   28594/   163CA :                     ; ===========================================================================
   28595/   163CA :                     
   28596/   163CA :                     Obj70_Move2:				; XREF: Obj70_Main
   28597/   163CA : 1028 0038           		move.b	$38(a0),d0
   28598/   163CE : 0240 0018           		andi.w	#$18,d0
   28599/   163D2 : 43F9 0001 63F4      		lea	(Obj70_MoveData).l,a1
   28600/   163D8 : 43F1 0000           		lea	(a1,d0.w),a1
   28601/   163DC : 3159 0010           		move.w	(a1)+,$10(a0)
   28602/   163E0 : 3159 0012           		move.w	(a1)+,$12(a0)
   28603/   163E4 : 3159 0034           		move.w	(a1)+,$34(a0)
   28604/   163E8 : 5028 0038           		addq.b	#8,$38(a0)	; use next movedata set
   28605/   163EC : 317C 0007 003A      		move.w	#7,$3A(a0)
   28606/   163F2 : 4E75                		rts	
   28607/   163F4 :                     ; ===========================================================================
   28608/   163F4 : 0100 0000 0060      Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
            163FA : 0000             
   28609/   163FC : 0000 0100 0030      		dc.w	  0,  $100,   $30,     0
            16402 : 0000             
   28610/   16404 : FF00 FFC0 0060      		dc.w  $FF00, $FFC0,   $60,     0
            1640A : 0000             
   28611/   1640C : 0000 FF00 0018      		dc.w	  0, $FF00,   $18,     0
            16412 : 0000             
   28612/   16414 :                     ; ---------------------------------------------------------------------------
   28613/   16414 :                     ; Sprite mappings - large girder block (SBZ)
   28614/   16414 :                     ; ---------------------------------------------------------------------------
   28615/   16414 :                     Map_obj70:
   28616/   16414 :                     	include "_mappings/obj70.asm"
(1)    1/   16414 :                     ; ---------------------------------------------------------------------------
(1)    2/   16414 :                     ; Sprite mappings - large girder block (SBZ)
(1)    3/   16414 :                     ; ---------------------------------------------------------------------------
(1)    4/   16414 : 0002                		dc.w byte_1662A-Map_obj70
(1)    5/   16416 : 0C                  byte_1662A:	dc.b $C
(1)    6/   16417 : E80E 0000 A0        		dc.b $E8, $E, 0, 0, $A0
(1)    7/   1641C : 000E 1000 A0        		dc.b 0,	$E, $10, 0, $A0
(1)    8/   16421 : E80E 0006 C0        		dc.b $E8, $E, 0, 6, $C0
(1)    9/   16426 : 000E 1006 C0        		dc.b 0,	$E, $10, 6, $C0
(1)   10/   1642B : E80E 0006 E0        		dc.b $E8, $E, 0, 6, $E0
(1)   11/   16430 : 000E 1006 E0        		dc.b 0,	$E, $10, 6, $E0
(1)   12/   16435 : E80E 0006 00        		dc.b $E8, $E, 0, 6, 0
(1)   13/   1643A : 000E 1006 00        		dc.b 0,	$E, $10, 6, 0
(1)   14/   1643F : E80E 0006 20        		dc.b $E8, $E, 0, 6, $20
(1)   15/   16444 : 000E 1006 20        		dc.b 0,	$E, $10, 6, $20
(1)   16/   16449 : E80E 0006 40        		dc.b $E8, $E, 0, 6, $40
(1)   17/   1644E : 000E 1006 40        		dc.b 0,	$E, $10, 6, $40
(1)   18/   16453 : (MACRO)              		even
(1)   18/   16453 : 00                                          dc.b 0 ;ds.b 1 
   28617/   16454 :                     
   28618/   16454 :                     ; ===========================================================================
   28619/   16454 :                     ; ---------------------------------------------------------------------------
   28620/   16454 :                     ; Object 72 - teleporter (SBZ)
   28621/   16454 :                     ; ---------------------------------------------------------------------------
   28622/   16454 :                     
   28623/   16454 :                     Obj72:					; XREF: Obj_Index
   28624/   16454 : 7000                		moveq	#0,d0
   28625/   16456 : 1028 0024           		move.b	$24(a0),d0
   28626/   1645A : 323B 002A           		move.w	Obj72_Index(pc,d0.w),d1
   28627/   1645E : 4EBB 1026           		jsr	Obj72_Index(pc,d1.w)
   28628/   16462 : 3028 0008           		move.w	8(a0),d0
   28629/   16466 : 0240 FF80           		andi.w	#$FF80,d0
   28630/   1646A : 3238 F700           		move.w	($FFFFF700).w,d1
   28631/   1646E : 0441 0080           		subi.w	#$80,d1
   28632/   16472 : 0241 FF80           		andi.w	#$FF80,d1
   28633/   16476 : 9041                		sub.w	d1,d0
   28634/   16478 : 0C40 0280           		cmpi.w	#$280,d0
   28635/   1647C : 6202                		bhi.s	Obj72_Delete
   28636/   1647E : 4E75                		rts	
   28637/   16480 :                     ; ===========================================================================
   28638/   16480 :                     
   28639/   16480 :                     Obj72_Delete:
   28640/   16480 : 4EF9 0000 D40E      		jmp	DeleteObject
   28641/   16486 :                     ; ===========================================================================
   28642/   16486 : 0008                Obj72_Index:	dc.w Obj72_Main-Obj72_Index
   28643/   16488 : 002E                		dc.w loc_166C8-Obj72_Index
   28644/   1648A : 00C4                		dc.w loc_1675E-Obj72_Index
   28645/   1648C : 00FE                		dc.w loc_16798-Obj72_Index
   28646/   1648E :                     ; ===========================================================================
   28647/   1648E :                     
   28648/   1648E :                     Obj72_Main:				; XREF: Obj72_Index
   28649/   1648E : 5428 0024           		addq.b	#2,$24(a0)
   28650/   16492 : 1028 0028           		move.b	$28(a0),d0
   28651/   16496 : D040                		add.w	d0,d0
   28652/   16498 : 0240 001E           		andi.w	#$1E,d0
   28653/   1649C : 45FA 01FA           		lea	Obj72_Data(pc),a2
   28654/   164A0 : D4F2 0000           		adda.w	(a2,d0.w),a2
   28655/   164A4 : 315A 003A           		move.w	(a2)+,$3A(a0)
   28656/   164A8 : 214A 003C           		move.l	a2,$3C(a0)
   28657/   164AC : 315A 0036           		move.w	(a2)+,$36(a0)
   28658/   164B0 : 315A 0038           		move.w	(a2)+,$38(a0)
   28659/   164B4 :                     
   28660/   164B4 :                     loc_166C8:				; XREF: Obj72_Index
   28661/   164B4 : 43F8 D000           		lea	($FFFFD000).w,a1
   28662/   164B8 : 3029 0008           		move.w	8(a1),d0
   28663/   164BC : 9068 0008           		sub.w	8(a0),d0
   28664/   164C0 : 0828 0000 0022      		btst	#0,$22(a0)
   28665/   164C6 : 6704                		beq.s	loc_166E0
   28666/   164C8 : 0640 000F           		addi.w	#$F,d0
   28667/   164CC :                     
   28668/   164CC :                     loc_166E0:
   28669/   164CC : 0C40 0010           		cmpi.w	#$10,d0
   28670/   164D0 : 6476                		bcc.s	locret_1675C
   28671/   164D2 : 3229 000C           		move.w	$C(a1),d1
   28672/   164D6 : 9268 000C           		sub.w	$C(a0),d1
   28673/   164DA : 0641 0020           		addi.w	#$20,d1
   28674/   164DE : 0C41 0040           		cmpi.w	#$40,d1
   28675/   164E2 : 6464                		bcc.s	locret_1675C
   28676/   164E4 : 4A38 F7C8           		tst.b	($FFFFF7C8).w
   28677/   164E8 : 665E                		bne.s	locret_1675C
   28678/   164EA : 0C28 0007 0028      		cmpi.b	#7,$28(a0)
   28679/   164F0 : 6608                		bne.s	loc_1670E
   28680/   164F2 : 0C78 0032 FE20      		cmpi.w	#50,($FFFFFE20).w
   28681/   164F8 : 654E                		bcs.s	locret_1675C
   28682/   164FA :                     
   28683/   164FA :                     loc_1670E:
   28684/   164FA : 5428 0024           		addq.b	#2,$24(a0)
   28685/   164FE : 11FC 0081 F7C8      		move.b	#$81,($FFFFF7C8).w ; lock controls
   28686/   16504 : 137C 0002 001C      		move.b	#2,$1C(a1)	; use Sonic's rolling animation
   28687/   1650A : 337C 0800 0014      		move.w	#$800,$14(a1)
   28688/   16510 : 337C 0000 0010      		move.w	#0,$10(a1)
   28689/   16516 : 337C 0000 0012      		move.w	#0,$12(a1)
   28690/   1651C : 08A8 0005 0022      		bclr	#5,$22(a0)
   28691/   16522 : 08A9 0005 0022      		bclr	#5,$22(a1)
   28692/   16528 : 08E9 0001 0022      		bset	#1,$22(a1)
   28693/   1652E : 3368 0008 0008      		move.w	8(a0),8(a1)
   28694/   16534 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   28695/   1653A : 4228 0032           		clr.b	$32(a0)
   28696/   1653E : 303C 00BE           		move.w	#$BE,d0
   28697/   16542 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
   28698/   16548 :                     
   28699/   16548 :                     locret_1675C:
   28700/   16548 : 4E75                		rts	
   28701/   1654A :                     ; ===========================================================================
   28702/   1654A :                     
   28703/   1654A :                     loc_1675E:				; XREF: Obj72_Index
   28704/   1654A : 43F8 D000           		lea	($FFFFD000).w,a1
   28705/   1654E : 1028 0032           		move.b	$32(a0),d0
   28706/   16552 : 5428 0032           		addq.b	#2,$32(a0)
   28707/   16556 : 4EB9 0000 27C0      		jsr	(CalcSine).l
   28708/   1655C : EA40                		asr.w	#5,d0
   28709/   1655E : 3428 000C           		move.w	$C(a0),d2
   28710/   16562 : 9440                		sub.w	d0,d2
   28711/   16564 : 3342 000C           		move.w	d2,$C(a1)
   28712/   16568 : 0C28 0080 0032      		cmpi.b	#$80,$32(a0)
   28713/   1656E : 6612                		bne.s	locret_16796
   28714/   16570 : 6100 0096           		bsr.w	sub_1681C
   28715/   16574 : 5428 0024           		addq.b	#2,$24(a0)
   28716/   16578 : 303C 00BC           		move.w	#$BC,d0
   28717/   1657C : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play teleport sound
   28718/   16582 :                     
   28719/   16582 :                     locret_16796:
   28720/   16582 : 4E75                		rts	
   28721/   16584 :                     ; ===========================================================================
   28722/   16584 :                     
   28723/   16584 :                     loc_16798:				; XREF: Obj72_Index
   28724/   16584 : 588F                		addq.l	#4,sp
   28725/   16586 : 43F8 D000           		lea	($FFFFD000).w,a1
   28726/   1658A : 5328 002E           		subq.b	#1,$2E(a0)
   28727/   1658E : 6A36                		bpl.s	loc_167DA
   28728/   16590 : 3368 0036 0008      		move.w	$36(a0),8(a1)
   28729/   16596 : 3368 0038 000C      		move.w	$38(a0),$C(a1)
   28730/   1659C : 7200                		moveq	#0,d1
   28731/   1659E : 1228 003A           		move.b	$3A(a0),d1
   28732/   165A2 : 5801                		addq.b	#4,d1
   28733/   165A4 : B228 003B           		cmp.b	$3B(a0),d1
   28734/   165A8 : 6504                		bcs.s	loc_167C2
   28735/   165AA : 7200                		moveq	#0,d1
   28736/   165AC : 603E                		bra.s	loc_16800
   28737/   165AE :                     ; ===========================================================================
   28738/   165AE :                     
   28739/   165AE :                     loc_167C2:
   28740/   165AE : 1141 003A           		move.b	d1,$3A(a0)
   28741/   165B2 : 2468 003C           		movea.l	$3C(a0),a2
   28742/   165B6 : 3172 1000 0036      		move.w	(a2,d1.w),$36(a0)
   28743/   165BC : 3172 1002 0038      		move.w	2(a2,d1.w),$38(a0)
   28744/   165C2 : 6000 0044           		bra.w	sub_1681C
   28745/   165C6 :                     ; ===========================================================================
   28746/   165C6 :                     
   28747/   165C6 :                     loc_167DA:
   28748/   165C6 : 2429 0008           		move.l	8(a1),d2
   28749/   165CA : 2629 000C           		move.l	$C(a1),d3
   28750/   165CE : 3029 0010           		move.w	$10(a1),d0
   28751/   165D2 : 48C0                		ext.l	d0
   28752/   165D4 : E180                		asl.l	#8,d0
   28753/   165D6 : D480                		add.l	d0,d2
   28754/   165D8 : 3029 0012           		move.w	$12(a1),d0
   28755/   165DC : 48C0                		ext.l	d0
   28756/   165DE : E180                		asl.l	#8,d0
   28757/   165E0 : D680                		add.l	d0,d3
   28758/   165E2 : 2342 0008           		move.l	d2,8(a1)
   28759/   165E6 : 2343 000C           		move.l	d3,$C(a1)
   28760/   165EA : 4E75                		rts	
   28761/   165EC :                     ; ===========================================================================
   28762/   165EC :                     
   28763/   165EC :                     loc_16800:
   28764/   165EC : 0269 07FF 000C      		andi.w	#$7FF,$C(a1)
   28765/   165F2 : 4228 0024           		clr.b	$24(a0)
   28766/   165F6 : 4238 F7C8           		clr.b	($FFFFF7C8).w
   28767/   165FA : 337C 0000 0010      		move.w	#0,$10(a1)
   28768/   16600 : 337C 0200 0012      		move.w	#$200,$12(a1)
   28769/   16606 : 4E75                		rts	
   28770/   16608 :                     
   28771/   16608 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   28772/   16608 :                     
   28773/   16608 :                     
   28774/   16608 :                     sub_1681C:
   28775/   16608 : 7000                		moveq	#0,d0
   28776/   1660A : 343C 1000           		move.w	#$1000,d2
   28777/   1660E : 3028 0036           		move.w	$36(a0),d0
   28778/   16612 : 9069 0008           		sub.w	8(a1),d0
   28779/   16616 : 6C04                		bge.s	loc_16830
   28780/   16618 : 4440                		neg.w	d0
   28781/   1661A : 4442                		neg.w	d2
   28782/   1661C :                     
   28783/   1661C :                     loc_16830:
   28784/   1661C : 7200                		moveq	#0,d1
   28785/   1661E : 363C 1000           		move.w	#$1000,d3
   28786/   16622 : 3228 0038           		move.w	$38(a0),d1
   28787/   16626 : 9269 000C           		sub.w	$C(a1),d1
   28788/   1662A : 6C04                		bge.s	loc_16844
   28789/   1662C : 4441                		neg.w	d1
   28790/   1662E : 4443                		neg.w	d3
   28791/   16630 :                     
   28792/   16630 :                     loc_16844:
   28793/   16630 : B240                		cmp.w	d0,d1
   28794/   16632 : 6532                		bcs.s	loc_1687A
   28795/   16634 : 7200                		moveq	#0,d1
   28796/   16636 : 3228 0038           		move.w	$38(a0),d1
   28797/   1663A : 9269 000C           		sub.w	$C(a1),d1
   28798/   1663E : 4841                		swap	d1
   28799/   16640 : 83C3                		divs.w	d3,d1
   28800/   16642 : 7000                		moveq	#0,d0
   28801/   16644 : 3028 0036           		move.w	$36(a0),d0
   28802/   16648 : 9069 0008           		sub.w	8(a1),d0
   28803/   1664C : 6704                		beq.s	loc_16866
   28804/   1664E : 4840                		swap	d0
   28805/   16650 : 81C1                		divs.w	d1,d0
   28806/   16652 :                     
   28807/   16652 :                     loc_16866:
   28808/   16652 : 3340 0010           		move.w	d0,$10(a1)
   28809/   16656 : 3343 0012           		move.w	d3,$12(a1)
   28810/   1665A : 4A41                		tst.w	d1
   28811/   1665C : 6A02                		bpl.s	loc_16874
   28812/   1665E : 4441                		neg.w	d1
   28813/   16660 :                     
   28814/   16660 :                     loc_16874:
   28815/   16660 : 3141 002E           		move.w	d1,$2E(a0)
   28816/   16664 : 4E75                		rts	
   28817/   16666 :                     ; ===========================================================================
   28818/   16666 :                     
   28819/   16666 :                     loc_1687A:
   28820/   16666 : 7000                		moveq	#0,d0
   28821/   16668 : 3028 0036           		move.w	$36(a0),d0
   28822/   1666C : 9069 0008           		sub.w	8(a1),d0
   28823/   16670 : 4840                		swap	d0
   28824/   16672 : 81C2                		divs.w	d2,d0
   28825/   16674 : 7200                		moveq	#0,d1
   28826/   16676 : 3228 0038           		move.w	$38(a0),d1
   28827/   1667A : 9269 000C           		sub.w	$C(a1),d1
   28828/   1667E : 6704                		beq.s	loc_16898
   28829/   16680 : 4841                		swap	d1
   28830/   16682 : 83C0                		divs.w	d0,d1
   28831/   16684 :                     
   28832/   16684 :                     loc_16898:
   28833/   16684 : 3341 0012           		move.w	d1,$12(a1)
   28834/   16688 : 3342 0010           		move.w	d2,$10(a1)
   28835/   1668C : 4A40                		tst.w	d0
   28836/   1668E : 6A02                		bpl.s	loc_168A6
   28837/   16690 : 4440                		neg.w	d0
   28838/   16692 :                     
   28839/   16692 :                     loc_168A6:
   28840/   16692 : 3140 002E           		move.w	d0,$2E(a0)
   28841/   16696 : 4E75                		rts	
   28842/   16698 :                     ; End of function sub_1681C
   28843/   16698 :                     
   28844/   16698 :                     ; ===========================================================================
   28845/   16698 : 0010 0016 001C      Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
   28846/   1669E : 003A 0040 005E      		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
   28847/   166A4 : 0064 0082           		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
   28848/   166A8 : 0004 0794 098C      word_168BC:	dc.w 4,	$794, $98C
   28849/   166AE : 0004 0094 038C      word_168C2:	dc.w 4,	$94, $38C
   28850/   166B4 : 001C 0794 02E8      word_168C8:	dc.w $1C, $794,	$2E8
   28851/   166BA : 07A4 02C0 07D0      		dc.w $7A4, $2C0, $7D0
   28852/   166C0 : 02AC 0858 02AC      		dc.w $2AC, $858, $2AC
   28853/   166C6 : 0884 0298 0894      		dc.w $884, $298, $894
   28854/   166CC : 0270 0894 0190      		dc.w $270, $894, $190
   28855/   166D2 : 0004 0894 0690      word_168E6:	dc.w 4,	$894, $690
   28856/   166D8 : 001C 1194 0470      word_168EC:	dc.w $1C, $1194, $470
   28857/   166DE : 1184 0498 1158      		dc.w $1184, $498, $1158
   28858/   166E4 : 04AC 0FD0 04AC      		dc.w $4AC, $FD0, $4AC
   28859/   166EA : 0FA4 04C0 0F94      		dc.w $FA4, $4C0, $F94
   28860/   166F0 : 04E8 0F94 0590      		dc.w $4E8, $F94, $590
   28861/   166F6 : 0004 1294 0490      word_1690A:	dc.w 4,	$1294, $490
   28862/   166FC : 001C 1594 FFE8      word_16910:	dc.w $1C, $1594, $FFE8
   28863/   16702 : 1584 FFC0 1560      		dc.w $1584, $FFC0, $1560
   28864/   16708 : FFAC 14D0 FFAC      		dc.w $FFAC, $14D0, $FFAC
   28865/   1670E : 14A4 FF98 1494      		dc.w $14A4, $FF98, $1494
   28866/   16714 : FF70 1494 FD90      		dc.w $FF70, $1494, $FD90
   28867/   1671A : 0004 0894 0090      word_1692E:	dc.w 4,	$894, $90
   28868/   16720 :                     ; ===========================================================================
   28869/   16720 :                     ; ---------------------------------------------------------------------------
   28870/   16720 :                     ; Object 78 - Caterkiller enemy	(MZ, SBZ)
   28871/   16720 :                     ; ---------------------------------------------------------------------------
   28872/   16720 :                     
   28873/   16720 :                     Obj78:					; XREF: Obj_Index
   28874/   16720 : 7000                		moveq	#0,d0
   28875/   16722 : 1028 0024           		move.b	$24(a0),d0
   28876/   16726 : 323B 0006           		move.w	Obj78_Index(pc,d0.w),d1
   28877/   1672A : 4EFB 1002           		jmp	Obj78_Index(pc,d1.w)
   28878/   1672E :                     ; ===========================================================================
   28879/   1672E : 0010                Obj78_Index:	dc.w Obj78_Main-Obj78_Index
   28880/   16730 : 00FC                		dc.w Obj78_Action-Obj78_Index
   28881/   16732 : 0286                		dc.w Obj78_BodySeg1-Obj78_Index
   28882/   16734 : 0254                		dc.w Obj78_BodySeg2-Obj78_Index
   28883/   16736 : 0286                		dc.w Obj78_BodySeg1-Obj78_Index
   28884/   16738 : 0180                		dc.w Obj78_Delete-Obj78_Index
   28885/   1673A : 037A                		dc.w loc_16CC0-Obj78_Index
   28886/   1673C :                     ; ===========================================================================
   28887/   1673C :                     
   28888/   1673C :                     locret_16950:
   28889/   1673C : 4E75                		rts	
   28890/   1673E :                     ; ===========================================================================
   28891/   1673E :                     
   28892/   1673E :                     Obj78_Main:				; XREF: Obj78_Index
   28893/   1673E : 117C 0007 0016      		move.b	#7,$16(a0)
   28894/   16744 : 117C 0008 0017      		move.b	#8,$17(a0)
   28895/   1674A : 4EB9 0000 D380      		jsr	ObjectFall
   28896/   16750 : 4EB9 0001 4C08      		jsr	ObjHitFloor
   28897/   16756 : 4A41                		tst.w	d1
   28898/   16758 : 6AE2                		bpl.s	locret_16950
   28899/   1675A : D368 000C           		add.w	d1,$C(a0)
   28900/   1675E : 4268 0012           		clr.w	$12(a0)
   28901/   16762 : 5428 0024           		addq.b	#2,$24(a0)
   28902/   16766 : 217C 0001 6B56      		move.l	#Map_obj78,4(a0)
            1676C : 0004             
   28903/   1676E : 317C 22B0 0002      		move.w	#$22B0,2(a0)
   28904/   16774 : 0C38 0005 FE10      		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
   28905/   1677A : 6706                		beq.s	loc_16996
   28906/   1677C : 317C 24FF 0002      		move.w	#$24FF,2(a0)	; MZ specific code
   28907/   16782 :                     
   28908/   16782 :                     loc_16996:
   28909/   16782 : 0228 0003 0001      		andi.b	#3,1(a0)
   28910/   16788 : 0028 0004 0001      		ori.b	#4,1(a0)
   28911/   1678E : 1168 0001 0022      		move.b	1(a0),$22(a0)
   28912/   16794 : 117C 0004 0018      		move.b	#4,$18(a0)
   28913/   1679A : 117C 0008 0019      		move.b	#8,$19(a0)
   28914/   167A0 : 117C 000B 0020      		move.b	#$B,$20(a0)
   28915/   167A6 : 3428 0008           		move.w	8(a0),d2
   28916/   167AA : 7A0C                		moveq	#$C,d5
   28917/   167AC : 0828 0000 0022      		btst	#0,$22(a0)
   28918/   167B2 : 6702                		beq.s	loc_169CA
   28919/   167B4 : 4445                		neg.w	d5
   28920/   167B6 :                     
   28921/   167B6 :                     loc_169CA:
   28922/   167B6 : 1C3C 0004           		move.b	#4,d6
   28923/   167BA : 7600                		moveq	#0,d3
   28924/   167BC : 7804                		moveq	#4,d4
   28925/   167BE : 2448                		movea.l	a0,a2
   28926/   167C0 : 7202                		moveq	#2,d1
   28927/   167C2 :                     
   28928/   167C2 :                     Obj78_LoadBody:
   28929/   167C2 : 4EB9 0000 D86E      		jsr	SingleObjLoad2
   28930/   167C8 : 6652                		bne.s	Obj78_QuitLoad
   28931/   167CA : 12BC 0078           		move.b	#$78,0(a1)	; load body segment object
   28932/   167CE : 1346 0024           		move.b	d6,$24(a1)
   28933/   167D2 : 5406                		addq.b	#2,d6
   28934/   167D4 : 2368 0004 0004      		move.l	4(a0),4(a1)
   28935/   167DA : 3368 0002 0002      		move.w	2(a0),2(a1)
   28936/   167E0 : 137C 0005 0018      		move.b	#5,$18(a1)
   28937/   167E6 : 137C 0008 0019      		move.b	#8,$19(a1)
   28938/   167EC : 137C 00CB 0020      		move.b	#$CB,$20(a1)
   28939/   167F2 : D445                		add.w	d5,d2
   28940/   167F4 : 3342 0008           		move.w	d2,8(a1)
   28941/   167F8 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   28942/   167FE : 1368 0022 0022      		move.b	$22(a0),$22(a1)
   28943/   16804 : 1368 0022 0001      		move.b	$22(a0),1(a1)
   28944/   1680A : 137C 0008 001A      		move.b	#8,$1A(a1)
   28945/   16810 : 234A 003C           		move.l	a2,$3C(a1)
   28946/   16814 : 1344 003C           		move.b	d4,$3C(a1)
   28947/   16818 : 5804                		addq.b	#4,d4
   28948/   1681A : 2449                		movea.l	a1,a2
   28949/   1681C :                     
   28950/   1681C :                     Obj78_QuitLoad:
   28951/   1681C : 51C9 FFA4           		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
   28952/   16820 :                     
   28953/   16820 : 117C 0007 002A      		move.b	#7,$2A(a0)
   28954/   16826 : 4228 003C           		clr.b	$3C(a0)
   28955/   1682A :                     
   28956/   1682A :                     Obj78_Action:				; XREF: Obj78_Index
   28957/   1682A : 4A28 0022           		tst.b	$22(a0)
   28958/   1682E : 6B00 024E           		bmi.w	loc_16C96
   28959/   16832 : 7000                		moveq	#0,d0
   28960/   16834 : 1028 0025           		move.b	$25(a0),d0
   28961/   16838 : 323B 007A           		move.w	Obj78_Index2(pc,d0.w),d1
   28962/   1683C : 4EBB 1076           		jsr	Obj78_Index2(pc,d1.w)
   28963/   16840 : 1228 002B           		move.b	$2B(a0),d1
   28964/   16844 : 6A2A                		bpl.s	Obj78_Display
   28965/   16846 : 43F9 0001 6AD6      		lea	(Ani_obj78).l,a1
   28966/   1684C : 1028 0026           		move.b	$26(a0),d0
   28967/   16850 : 0240 007F           		andi.w	#$7F,d0
   28968/   16854 : 5828 0026           		addq.b	#4,$26(a0)
   28969/   16858 : 1031 0000           		move.b	(a1,d0.w),d0
   28970/   1685C : 6A08                		bpl.s	Obj78_AniHead
   28971/   1685E : 08A8 0007 002B      		bclr	#7,$2B(a0)
   28972/   16864 : 600A                		bra.s	Obj78_Display
   28973/   16866 :                     ; ===========================================================================
   28974/   16866 :                     
   28975/   16866 :                     Obj78_AniHead:
   28976/   16866 : 0201 0010           		andi.b	#$10,d1
   28977/   1686A : D001                		add.b	d1,d0
   28978/   1686C : 1140 001A           		move.b	d0,$1A(a0)
   28979/   16870 :                     
   28980/   16870 :                     Obj78_Display:
   28981/   16870 : 3028 0008           		move.w	8(a0),d0
   28982/   16874 : 0240 FF80           		andi.w	#$FF80,d0
   28983/   16878 : 3238 F700           		move.w	($FFFFF700).w,d1
   28984/   1687C : 0441 0080           		subi.w	#$80,d1
   28985/   16880 : 0241 FF80           		andi.w	#$FF80,d1
   28986/   16884 : 9041                		sub.w	d1,d0
   28987/   16886 : 0C40 0280           		cmpi.w	#$280,d0
   28988/   1688A : 6200 0008           		bhi.w	Obj78_ChkGone
   28989/   1688E : 4EF9 0000 D3D2      		jmp	DisplaySprite
   28990/   16894 :                     ; ===========================================================================
   28991/   16894 :                     
   28992/   16894 :                     Obj78_ChkGone:
   28993/   16894 : 45F8 FC00           		lea	($FFFFFC00).w,a2
   28994/   16898 : 7000                		moveq	#0,d0
   28995/   1689A : 1028 0023           		move.b	$23(a0),d0
   28996/   1689E : 6706                		beq.s	loc_16ABC
   28997/   168A0 : 08B2 0007 0002      		bclr	#7,2(a2,d0.w)
   28998/   168A6 :                     
   28999/   168A6 :                     loc_16ABC:
   29000/   168A6 : 117C 000A 0024      		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
   29001/   168AC : 4E75                		rts	
   29002/   168AE :                     ; ===========================================================================
   29003/   168AE :                     
   29004/   168AE :                     Obj78_Delete:				; XREF: Obj78_Index
   29005/   168AE : 4EF9 0000 D40E      		jmp	DeleteObject
   29006/   168B4 :                     ; ===========================================================================
   29007/   168B4 : 0004                Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
   29008/   168B6 : 0038                		dc.w loc_16B02-Obj78_Index2
   29009/   168B8 :                     ; ===========================================================================
   29010/   168B8 :                     
   29011/   168B8 :                     Obj78_Move:				; XREF: Obj78_Index2
   29012/   168B8 : 5328 002A           		subq.b	#1,$2A(a0)
   29013/   168BC : 6B02                		bmi.s	Obj78_Move2
   29014/   168BE : 4E75                		rts	
   29015/   168C0 :                     ; ===========================================================================
   29016/   168C0 :                     
   29017/   168C0 :                     Obj78_Move2:
   29018/   168C0 : 5428 0025           		addq.b	#2,$25(a0)
   29019/   168C4 : 117C 0010 002A      		move.b	#$10,$2A(a0)
   29020/   168CA : 317C FF40 0010      		move.w	#-$C0,$10(a0)
   29021/   168D0 : 317C 0040 0014      		move.w	#$40,$14(a0)
   29022/   168D6 : 0868 0004 002B      		bchg	#4,$2B(a0)
   29023/   168DC : 6608                		bne.s	loc_16AFC
   29024/   168DE : 4268 0010           		clr.w	$10(a0)
   29025/   168E2 : 4468 0014           		neg.w	$14(a0)
   29026/   168E6 :                     
   29027/   168E6 :                     loc_16AFC:
   29028/   168E6 : 08E8 0007 002B      		bset	#7,$2B(a0)
   29029/   168EC :                     
   29030/   168EC :                     loc_16B02:				; XREF: Obj78_Index2
   29031/   168EC : 5328 002A           		subq.b	#1,$2A(a0)
   29032/   168F0 : 6B56                		bmi.s	loc_16B5E
   29033/   168F2 : 2F28 0008           		move.l	8(a0),-(sp)
   29034/   168F6 : 2428 0008           		move.l	8(a0),d2
   29035/   168FA : 3028 0010           		move.w	$10(a0),d0
   29036/   168FE : 0828 0000 0022      		btst	#0,$22(a0)
   29037/   16904 : 6702                		beq.s	loc_16B1E
   29038/   16906 : 4440                		neg.w	d0
   29039/   16908 :                     
   29040/   16908 :                     loc_16B1E:
   29041/   16908 : 48C0                		ext.l	d0
   29042/   1690A : E180                		asl.l	#8,d0
   29043/   1690C : D480                		add.l	d0,d2
   29044/   1690E : 2142 0008           		move.l	d2,8(a0)
   29045/   16912 : 4EB9 0001 4C08      		jsr	ObjHitFloor
   29046/   16918 : 241F                		move.l	(sp)+,d2
   29047/   1691A : 0C41 FFF8           		cmpi.w	#-8,d1
   29048/   1691E : 6D3A                		blt.s	loc_16B70
   29049/   16920 : 0C41 000C           		cmpi.w	#$C,d1
   29050/   16924 : 6C34                		bge.s	loc_16B70
   29051/   16926 : D368 000C           		add.w	d1,$C(a0)
   29052/   1692A : 4842                		swap	d2
   29053/   1692C : B468 0008           		cmp.w	8(a0),d2
   29054/   16930 : 6714                		beq.s	locret_16B5C
   29055/   16932 : 7000                		moveq	#0,d0
   29056/   16934 : 1028 003C           		move.b	$3C(a0),d0
   29057/   16938 : 5228 003C           		addq.b	#1,$3C(a0)
   29058/   1693C : 0228 000F 003C      		andi.b	#$F,$3C(a0)
   29059/   16942 : 1181 002C           		move.b	d1,$2C(a0,d0.w)
   29060/   16946 :                     
   29061/   16946 :                     locret_16B5C:
   29062/   16946 : 4E75                		rts	
   29063/   16948 :                     ; ===========================================================================
   29064/   16948 :                     
   29065/   16948 :                     loc_16B5E:
   29066/   16948 : 5528 0025           		subq.b	#2,$25(a0)
   29067/   1694C : 117C 0007 002A      		move.b	#7,$2A(a0)
   29068/   16952 : 317C 0000 0010      		move.w	#0,$10(a0)
   29069/   16958 : 4E75                		rts	
   29070/   1695A :                     ; ===========================================================================
   29071/   1695A :                     
   29072/   1695A :                     loc_16B70:
   29073/   1695A : 2142 0008           		move.l	d2,8(a0)
   29074/   1695E : 0868 0000 0022      		bchg	#0,$22(a0)
   29075/   16964 : 1168 0022 0001      		move.b	$22(a0),1(a0)
   29076/   1696A : 7000                		moveq	#0,d0
   29077/   1696C : 1028 003C           		move.b	$3C(a0),d0
   29078/   16970 : 11BC 0080 002C      		move.b	#$80,$2C(a0,d0.w)
   29079/   16976 : 5228 003C           		addq.b	#1,$3C(a0)
   29080/   1697A : 0228 000F 003C      		andi.b	#$F,$3C(a0)
   29081/   16980 : 4E75                		rts	
   29082/   16982 :                     ; ===========================================================================
   29083/   16982 :                     
   29084/   16982 :                     Obj78_BodySeg2:				; XREF: Obj78_Index
   29085/   16982 : 2268 003C           		movea.l	$3C(a0),a1
   29086/   16986 : 1169 002B 002B      		move.b	$2B(a1),$2B(a0)
   29087/   1698C : 6A26                		bpl.s	Obj78_BodySeg1
   29088/   1698E : 43F9 0001 6AD6      		lea	(Ani_obj78).l,a1
   29089/   16994 : 1028 0026           		move.b	$26(a0),d0
   29090/   16998 : 0240 007F           		andi.w	#$7F,d0
   29091/   1699C : 5828 0026           		addq.b	#4,$26(a0)
   29092/   169A0 : 4A31 0004           		tst.b	4(a1,d0.w)
   29093/   169A4 : 6A04                		bpl.s	Obj78_AniBody
   29094/   169A6 : 5828 0026           		addq.b	#4,$26(a0)
   29095/   169AA :                     
   29096/   169AA :                     Obj78_AniBody:
   29097/   169AA : 1031 0000           		move.b	(a1,d0.w),d0
   29098/   169AE : 5000                		addq.b	#8,d0
   29099/   169B0 : 1140 001A           		move.b	d0,$1A(a0)
   29100/   169B4 :                     
   29101/   169B4 :                     Obj78_BodySeg1:				; XREF: Obj78_Index
   29102/   169B4 : 2268 003C           		movea.l	$3C(a0),a1
   29103/   169B8 : 4A28 0022           		tst.b	$22(a0)
   29104/   169BC : 6B00 00BA           		bmi.w	loc_16C90
   29105/   169C0 : 1169 002B 002B      		move.b	$2B(a1),$2B(a0)
   29106/   169C6 : 1169 0025 0025      		move.b	$25(a1),$25(a0)
   29107/   169CC : 6700 0080           		beq.w	loc_16C64
   29108/   169D0 : 3169 0014 0014      		move.w	$14(a1),$14(a0)
   29109/   169D6 : 3029 0010           		move.w	$10(a1),d0
   29110/   169DA : D069 0014           		add.w	$14(a1),d0
   29111/   169DE : 3140 0010           		move.w	d0,$10(a0)
   29112/   169E2 : 2428 0008           		move.l	8(a0),d2
   29113/   169E6 : 2602                		move.l	d2,d3
   29114/   169E8 : 3028 0010           		move.w	$10(a0),d0
   29115/   169EC : 0828 0000 0022      		btst	#0,$22(a0)
   29116/   169F2 : 6702                		beq.s	loc_16C0C
   29117/   169F4 : 4440                		neg.w	d0
   29118/   169F6 :                     
   29119/   169F6 :                     loc_16C0C:
   29120/   169F6 : 48C0                		ext.l	d0
   29121/   169F8 : E180                		asl.l	#8,d0
   29122/   169FA : D480                		add.l	d0,d2
   29123/   169FC : 2142 0008           		move.l	d2,8(a0)
   29124/   16A00 : 4843                		swap	d3
   29125/   16A02 : B668 0008           		cmp.w	8(a0),d3
   29126/   16A06 : 6746                		beq.s	loc_16C64
   29127/   16A08 : 7000                		moveq	#0,d0
   29128/   16A0A : 1028 003C           		move.b	$3C(a0),d0
   29129/   16A0E : 1231 002C           		move.b	$2C(a1,d0.w),d1
   29130/   16A12 : 0C01 0080           		cmpi.b	#-$80,d1
   29131/   16A16 : 6622                		bne.s	loc_16C50
   29132/   16A18 : 4843                		swap	d3
   29133/   16A1A : 2143 0008           		move.l	d3,8(a0)
   29134/   16A1E : 1181 002C           		move.b	d1,$2C(a0,d0.w)
   29135/   16A22 : 0868 0000 0022      		bchg	#0,$22(a0)
   29136/   16A28 : 1168 0022 0001      		move.b	$22(a0),1(a0)
   29137/   16A2E : 5228 003C           		addq.b	#1,$3C(a0)
   29138/   16A32 : 0228 000F 003C      		andi.b	#$F,$3C(a0)
   29139/   16A38 : 6014                		bra.s	loc_16C64
   29140/   16A3A :                     ; ===========================================================================
   29141/   16A3A :                     
   29142/   16A3A :                     loc_16C50:
   29143/   16A3A : 4881                		ext.w	d1
   29144/   16A3C : D368 000C           		add.w	d1,$C(a0)
   29145/   16A40 : 5228 003C           		addq.b	#1,$3C(a0)
   29146/   16A44 : 0228 000F 003C      		andi.b	#$F,$3C(a0)
   29147/   16A4A : 1181 002C           		move.b	d1,$2C(a0,d0.w)
   29148/   16A4E :                     
   29149/   16A4E :                     loc_16C64:
   29150/   16A4E : 0C29 000C 0024      		cmpi.b	#$C,$24(a1)
   29151/   16A54 : 6722                		beq.s	loc_16C90
   29152/   16A56 : 0C11 0027           		cmpi.b	#$27,0(a1)
   29153/   16A5A : 6708                		beq.s	loc_16C7C
   29154/   16A5C : 0C29 000A 0024      		cmpi.b	#$A,$24(a1)
   29155/   16A62 : 6606                		bne.s	loc_16C82
   29156/   16A64 :                     
   29157/   16A64 :                     loc_16C7C:
   29158/   16A64 : 117C 000A 0024      		move.b	#$A,$24(a0)
   29159/   16A6A :                     
   29160/   16A6A :                     loc_16C82:
   29161/   16A6A : 4EF9 0000 D3D2      		jmp	DisplaySprite
   29162/   16A70 :                     
   29163/   16A70 :                     ; ===========================================================================
   29164/   16A70 : FE00 FE80 0180      Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
            16A76 : 0200             
   29165/   16A78 :                     ; ===========================================================================
   29166/   16A78 :                     
   29167/   16A78 :                     loc_16C90:
   29168/   16A78 : 08E9 0007 0022      		bset	#7,$22(a1)
   29169/   16A7E :                     
   29170/   16A7E :                     loc_16C96:
   29171/   16A7E : 7000                		moveq	#0,d0
   29172/   16A80 : 1028 0024           		move.b	$24(a0),d0
   29173/   16A84 : 303B 00E8           		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
   29174/   16A88 : 0828 0000 0022      		btst	#0,$22(a0)
   29175/   16A8E : 6702                		beq.s	loc_16CAA
   29176/   16A90 : 4440                		neg.w	d0
   29177/   16A92 :                     
   29178/   16A92 :                     loc_16CAA:
   29179/   16A92 : 3140 0010           		move.w	d0,$10(a0)
   29180/   16A96 : 317C FC00 0012      		move.w	#-$400,$12(a0)
   29181/   16A9C : 117C 000C 0024      		move.b	#$C,$24(a0)
   29182/   16AA2 : 0228 00F8 001A      		andi.b	#-8,$1A(a0)
   29183/   16AA8 :                     
   29184/   16AA8 :                     loc_16CC0:				; XREF: Obj78_Index
   29185/   16AA8 : 4EB9 0000 D380      		jsr	ObjectFall
   29186/   16AAE : 4A68 0012           		tst.w	$12(a0)
   29187/   16AB2 : 6B14                		bmi.s	loc_16CE0
   29188/   16AB4 : 4EB9 0001 4C08      		jsr	ObjHitFloor
   29189/   16ABA : 4A41                		tst.w	d1
   29190/   16ABC : 6A0A                		bpl.s	loc_16CE0
   29191/   16ABE : D368 000C           		add.w	d1,$C(a0)
   29192/   16AC2 : 317C FC00 0012      		move.w	#-$400,$12(a0)
   29193/   16AC8 :                     
   29194/   16AC8 :                     loc_16CE0:
   29195/   16AC8 : 4A28 0001           		tst.b	1(a0)
   29196/   16ACC : 6A00 FDC6           		bpl.w	Obj78_ChkGone
   29197/   16AD0 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   29198/   16AD6 :                     ; ===========================================================================
   29199/   16AD6 :                     Ani_obj78:
   29200/   16AD6 :                     	include "_animations/obj78.asm"
(1)    1/   16AD6 :                     ; ---------------------------------------------------------------------------
(1)    2/   16AD6 :                     ; Animation script - Caterkiller enemy (uses non-standard format)
(1)    3/   16AD6 :                     ; ---------------------------------------------------------------------------
(1)    4/   16AD6 : 0000 0000 0000      	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
            16ADC : 0000 0000 0000 
            16AE2 : 0000 0001          
(1)    5/   16AE6 : 0101 0101 0101      	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
            16AEC : 0202 0202 0203 
            16AF2 : 0303 0303          
(1)    6/   16AF6 : 0404 0404 0404      	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
            16AFC : 0505 0505 0506 
            16B02 : 0606 0606          
(1)    7/   16B06 : 0606 0707 0707      	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
            16B0C : 0707 0707 0707 
            16B12 : FF07 07FF          
(1)    8/   16B16 : 0707 0707 0707      	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
            16B1C : 0707 0707 0707 
            16B22 : 0707 0706          
(1)    9/   16B26 : 0606 0606 0606      	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
            16B2C : 0505 0505 0504 
            16B32 : 0404 0404          
(1)   10/   16B36 : 0403 0303 0303      	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
            16B3C : 0202 0202 0201 
            16B42 : 0101 0101          
(1)   11/   16B46 : 0101 0000 0000      	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
            16B4C : 0000 0000 0000 
            16B52 : FF00 00FF          
(1)   12/   16B56 : (MACRO)              	even
   29201/   16B56 :                     
   29202/   16B56 :                     ; ---------------------------------------------------------------------------
   29203/   16B56 :                     ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
   29204/   16B56 :                     ; ---------------------------------------------------------------------------
   29205/   16B56 :                     Map_obj78:
   29206/   16B56 :                     	include "_mappings/obj78.asm"
(1)    1/   16B56 :                     ; ---------------------------------------------------------------------------
(1)    2/   16B56 :                     ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
(1)    3/   16B56 :                     ; ---------------------------------------------------------------------------
(1)    4/   16B56 : 0030 0036           		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
(1)    5/   16B5A : 003C 0042           		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
(1)    6/   16B5E : 0048 004E           		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
(1)    7/   16B62 : 0054 005A           		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
(1)    8/   16B66 : 0060 0066           		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
(1)    9/   16B6A : 006C 0072           		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
(1)   10/   16B6E : 0078 007E           		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
(1)   11/   16B72 : 0084 008A           		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
(1)   12/   16B76 : 0090 0096           		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
(1)   13/   16B7A : 009C 00A2           		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
(1)   14/   16B7E : 00A8 00AE           		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
(1)   15/   16B82 : 00B4 00BA           		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
(1)   16/   16B86 : 01                  byte_16D9E:	dc.b 1
(1)   17/   16B87 : F206 0000 F8        		dc.b $F2, 6, 0,	0, $F8
(1)   18/   16B8C : 01                  byte_16DA4:	dc.b 1
(1)   19/   16B8D : F106 0000 F8        		dc.b $F1, 6, 0,	0, $F8
(1)   20/   16B92 : 01                  byte_16DAA:	dc.b 1
(1)   21/   16B93 : F006 0000 F8        		dc.b $F0, 6, 0,	0, $F8
(1)   22/   16B98 : 01                  byte_16DB0:	dc.b 1
(1)   23/   16B99 : EF06 0000 F8        		dc.b $EF, 6, 0,	0, $F8
(1)   24/   16B9E : 01                  byte_16DB6:	dc.b 1
(1)   25/   16B9F : EE06 0000 F8        		dc.b $EE, 6, 0,	0, $F8
(1)   26/   16BA4 : 01                  byte_16DBC:	dc.b 1
(1)   27/   16BA5 : ED06 0000 F8        		dc.b $ED, 6, 0,	0, $F8
(1)   28/   16BAA : 01                  byte_16DC2:	dc.b 1
(1)   29/   16BAB : EC06 0000 F8        		dc.b $EC, 6, 0,	0, $F8
(1)   30/   16BB0 : 01                  byte_16DC8:	dc.b 1
(1)   31/   16BB1 : EB06 0000 F8        		dc.b $EB, 6, 0,	0, $F8
(1)   32/   16BB6 : 01                  byte_16DCE:	dc.b 1
(1)   33/   16BB7 : F805 000C F8        		dc.b $F8, 5, 0,	$C, $F8
(1)   34/   16BBC : 01                  byte_16DD4:	dc.b 1
(1)   35/   16BBD : F705 000C F8        		dc.b $F7, 5, 0,	$C, $F8
(1)   36/   16BC2 : 01                  byte_16DDA:	dc.b 1
(1)   37/   16BC3 : F605 000C F8        		dc.b $F6, 5, 0,	$C, $F8
(1)   38/   16BC8 : 01                  byte_16DE0:	dc.b 1
(1)   39/   16BC9 : F505 000C F8        		dc.b $F5, 5, 0,	$C, $F8
(1)   40/   16BCE : 01                  byte_16DE6:	dc.b 1
(1)   41/   16BCF : F405 000C F8        		dc.b $F4, 5, 0,	$C, $F8
(1)   42/   16BD4 : 01                  byte_16DEC:	dc.b 1
(1)   43/   16BD5 : F305 000C F8        		dc.b $F3, 5, 0,	$C, $F8
(1)   44/   16BDA : 01                  byte_16DF2:	dc.b 1
(1)   45/   16BDB : F205 000C F8        		dc.b $F2, 5, 0,	$C, $F8
(1)   46/   16BE0 : 01                  byte_16DF8:	dc.b 1
(1)   47/   16BE1 : F105 000C F8        		dc.b $F1, 5, 0,	$C, $F8
(1)   48/   16BE6 : 01                  byte_16DFE:	dc.b 1
(1)   49/   16BE7 : F206 0006 F8        		dc.b $F2, 6, 0,	6, $F8
(1)   50/   16BEC : 01                  byte_16E04:	dc.b 1
(1)   51/   16BED : F106 0006 F8        		dc.b $F1, 6, 0,	6, $F8
(1)   52/   16BF2 : 01                  byte_16E0A:	dc.b 1
(1)   53/   16BF3 : F006 0006 F8        		dc.b $F0, 6, 0,	6, $F8
(1)   54/   16BF8 : 01                  byte_16E10:	dc.b 1
(1)   55/   16BF9 : EF06 0006 F8        		dc.b $EF, 6, 0,	6, $F8
(1)   56/   16BFE : 01                  byte_16E16:	dc.b 1
(1)   57/   16BFF : EE06 0006 F8        		dc.b $EE, 6, 0,	6, $F8
(1)   58/   16C04 : 01                  byte_16E1C:	dc.b 1
(1)   59/   16C05 : ED06 0006 F8        		dc.b $ED, 6, 0,	6, $F8
(1)   60/   16C0A : 01                  byte_16E22:	dc.b 1
(1)   61/   16C0B : EC06 0006 F8        		dc.b $EC, 6, 0,	6, $F8
(1)   62/   16C10 : 01                  byte_16E28:	dc.b 1
(1)   63/   16C11 : EB06 0006 F8        		dc.b $EB, 6, 0,	6, $F8
(1)   64/   16C16 : (MACRO)              		even
   29207/   16C16 :                     
   29208/   16C16 :                     ; ===========================================================================
   29209/   16C16 :                     ; ---------------------------------------------------------------------------
   29210/   16C16 :                     ; Object 79 - lamppost
   29211/   16C16 :                     ; ---------------------------------------------------------------------------
   29212/   16C16 :                     
   29213/   16C16 :                     Obj79:					; XREF: Obj_Index
   29214/   16C16 : 7000                		moveq	#0,d0
   29215/   16C18 : 1028 0024           		move.b	$24(a0),d0
   29216/   16C1C : 323B 000C           		move.w	Obj79_Index(pc,d0.w),d1
   29217/   16C20 : 4EBB 1008           		jsr	Obj79_Index(pc,d1.w)
   29218/   16C24 : 4EF9 0000 F46A      		jmp	MarkObjGone
   29219/   16C2A :                     ; ===========================================================================
   29220/   16C2A : 0008                Obj79_Index:	dc.w Obj79_Main-Obj79_Index
   29221/   16C2C : 006C                		dc.w Obj79_BlueLamp-Obj79_Index
   29222/   16C2E : 014E                		dc.w Obj79_AfterHit-Obj79_Index
   29223/   16C30 : 0150                		dc.w Obj79_Twirl-Obj79_Index
   29224/   16C32 :                     ; ===========================================================================
   29225/   16C32 :                     
   29226/   16C32 :                     Obj79_Main:				; XREF: Obj79_Index
   29227/   16C32 : 5428 0024           		addq.b	#2,$24(a0)
   29228/   16C36 : 217C 0001 6EDE      		move.l	#Map_obj79,4(a0)
            16C3C : 0004             
   29229/   16C3E : 317C 07A0 0002      		move.w	#$7A0,2(a0)
   29230/   16C44 : 117C 0004 0001      		move.b	#4,1(a0)
   29231/   16C4A : 117C 0008 0019      		move.b	#8,$19(a0)
   29232/   16C50 : 117C 0005 0018      		move.b	#5,$18(a0)
   29233/   16C56 : 45F8 FC00           		lea	($FFFFFC00).w,a2
   29234/   16C5A : 7000                		moveq	#0,d0
   29235/   16C5C : 1028 0023           		move.b	$23(a0),d0
   29236/   16C60 : 08B2 0007 0002      		bclr	#7,2(a2,d0.w)
   29237/   16C66 : 0832 0000 0002      		btst	#0,2(a2,d0.w)
   29238/   16C6C : 6614                		bne.s	Obj79_RedLamp
   29239/   16C6E : 1238 FE30           		move.b	($FFFFFE30).w,d1
   29240/   16C72 : 0201 007F           		andi.b	#$7F,d1
   29241/   16C76 : 1428 0028           		move.b	$28(a0),d2	; get lamppost number
   29242/   16C7A : 0202 007F           		andi.b	#$7F,d2
   29243/   16C7E : B202                		cmp.b	d2,d1		; is lamppost number higher than the number hit?
   29244/   16C80 : 6514                		bcs.s	Obj79_BlueLamp	; if yes, branch
   29245/   16C82 :                     
   29246/   16C82 :                     Obj79_RedLamp:
   29247/   16C82 : 08F2 0000 0002      		bset	#0,2(a2,d0.w)
   29248/   16C88 : 117C 0004 0024      		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
   29249/   16C8E : 117C 0003 001A      		move.b	#3,$1A(a0)	; use red lamppost frame
   29250/   16C94 : 4E75                		rts	
   29251/   16C96 :                     ; ===========================================================================
   29252/   16C96 :                     
   29253/   16C96 :                     Obj79_BlueLamp:				; XREF: Obj79_Index
   29254/   16C96 : 4A78 FE08           		tst.w	($FFFFFE08).w	; is debug mode	being used?
   29255/   16C9A : 6600 00DA           		bne.w	locret_16F90	; if yes, branch
   29256/   16C9E : 4A38 F7C8           		tst.b	($FFFFF7C8).w
   29257/   16CA2 : 6B00 00D2           		bmi.w	locret_16F90
   29258/   16CA6 : 1238 FE30           		move.b	($FFFFFE30).w,d1
   29259/   16CAA : 0201 007F           		andi.b	#$7F,d1
   29260/   16CAE : 1428 0028           		move.b	$28(a0),d2
   29261/   16CB2 : 0202 007F           		andi.b	#$7F,d2
   29262/   16CB6 : B202                		cmp.b	d2,d1
   29263/   16CB8 : 6520                		bcs.s	Obj79_HitLamp
   29264/   16CBA : 45F8 FC00           		lea	($FFFFFC00).w,a2
   29265/   16CBE : 7000                		moveq	#0,d0
   29266/   16CC0 : 1028 0023           		move.b	$23(a0),d0
   29267/   16CC4 : 08F2 0000 0002      		bset	#0,2(a2,d0.w)
   29268/   16CCA : 117C 0004 0024      		move.b	#4,$24(a0)
   29269/   16CD0 : 117C 0003 001A      		move.b	#3,$1A(a0)
   29270/   16CD6 : 6000 009E           		bra.w	locret_16F90
   29271/   16CDA :                     ; ===========================================================================
   29272/   16CDA :                     
   29273/   16CDA :                     Obj79_HitLamp:
   29274/   16CDA : 3038 D008           		move.w	($FFFFD008).w,d0
   29275/   16CDE : 9068 0008           		sub.w	8(a0),d0
   29276/   16CE2 : 5040                		addq.w	#8,d0
   29277/   16CE4 : 0C40 0010           		cmpi.w	#$10,d0
   29278/   16CE8 : 6400 008C           		bcc.w	locret_16F90
   29279/   16CEC : 3038 D00C           		move.w	($FFFFD00C).w,d0
   29280/   16CF0 : 9068 000C           		sub.w	$C(a0),d0
   29281/   16CF4 : 0640 0040           		addi.w	#$40,d0
   29282/   16CF8 : 0C40 0068           		cmpi.w	#$68,d0
   29283/   16CFC : 6478                		bcc.s	locret_16F90
   29284/   16CFE : 303C 00A1           		move.w	#$A1,d0
   29285/   16D02 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play lamppost sound
   29286/   16D08 : 5428 0024           		addq.b	#2,$24(a0)
   29287/   16D0C : 4EB9 0000 D858      		jsr	SingleObjLoad
   29288/   16D12 : 6648                		bne.s	loc_16F76
   29289/   16D14 : 12BC 0079           		move.b	#$79,0(a1)	; load twirling	lamp object
   29290/   16D18 : 137C 0006 0024      		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
   29291/   16D1E : 3368 0008 0030      		move.w	8(a0),$30(a1)
   29292/   16D24 : 3368 000C 0032      		move.w	$C(a0),$32(a1)
   29293/   16D2A : 0469 0018 0032      		subi.w	#$18,$32(a1)
   29294/   16D30 : 237C 0001 6EDE      		move.l	#Map_obj79,4(a1)
            16D36 : 0004             
   29295/   16D38 : 337C 07A0 0002      		move.w	#$7A0,2(a1)
   29296/   16D3E : 137C 0004 0001      		move.b	#4,1(a1)
   29297/   16D44 : 137C 0008 0019      		move.b	#8,$19(a1)
   29298/   16D4A : 137C 0004 0018      		move.b	#4,$18(a1)
   29299/   16D50 : 137C 0002 001A      		move.b	#2,$1A(a1)
   29300/   16D56 : 337C 0020 0036      		move.w	#$20,$36(a1)
   29301/   16D5C :                     
   29302/   16D5C :                     loc_16F76:
   29303/   16D5C : 117C 0001 001A      		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
   29304/   16D62 : 6100 0054           		bsr.w	Obj79_StoreInfo
   29305/   16D66 : 45F8 FC00           		lea	($FFFFFC00).w,a2
   29306/   16D6A : 7000                		moveq	#0,d0
   29307/   16D6C : 1028 0023           		move.b	$23(a0),d0
   29308/   16D70 : 08F2 0000 0002      		bset	#0,2(a2,d0.w)
   29309/   16D76 :                     
   29310/   16D76 :                     locret_16F90:
   29311/   16D76 : 4E75                		rts	
   29312/   16D78 :                     ; ===========================================================================
   29313/   16D78 :                     
   29314/   16D78 :                     Obj79_AfterHit:				; XREF: Obj79_Index
   29315/   16D78 : 4E75                		rts	
   29316/   16D7A :                     ; ===========================================================================
   29317/   16D7A :                     
   29318/   16D7A :                     Obj79_Twirl:				; XREF: Obj79_Index
   29319/   16D7A : 5368 0036           		subq.w	#1,$36(a0)
   29320/   16D7E : 6A06                		bpl.s	loc_16FA0
   29321/   16D80 : 117C 0004 0024      		move.b	#4,$24(a0)
   29322/   16D86 :                     
   29323/   16D86 :                     loc_16FA0:
   29324/   16D86 : 1028 0026           		move.b	$26(a0),d0
   29325/   16D8A : 0428 0010 0026      		subi.b	#$10,$26(a0)
   29326/   16D90 : 0400 0040           		subi.b	#$40,d0
   29327/   16D94 : 4EB9 0000 27C0      		jsr	(CalcSine).l
   29328/   16D9A : C3FC 0C00           		muls.w	#$C00,d1
   29329/   16D9E : 4841                		swap	d1
   29330/   16DA0 : D268 0030           		add.w	$30(a0),d1
   29331/   16DA4 : 3141 0008           		move.w	d1,8(a0)
   29332/   16DA8 : C1FC 0C00           		muls.w	#$C00,d0
   29333/   16DAC : 4840                		swap	d0
   29334/   16DAE : D068 0032           		add.w	$32(a0),d0
   29335/   16DB2 : 3140 000C           		move.w	d0,$C(a0)
   29336/   16DB6 : 4E75                		rts	
   29337/   16DB8 :                     ; ===========================================================================
   29338/   16DB8 :                     ; ---------------------------------------------------------------------------
   29339/   16DB8 :                     ; Subroutine to	store information when you hit a lamppost
   29340/   16DB8 :                     ; ---------------------------------------------------------------------------
   29341/   16DB8 :                     
   29342/   16DB8 :                     Obj79_StoreInfo:			; XREF: Obj79_HitLamp
   29343/   16DB8 : 11E8 0028 FE30      		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
   29344/   16DBE : 11F8 FE30 FE31      		move.b	($FFFFFE30).w,($FFFFFE31).w
   29345/   16DC4 : 31E8 0008 FE32      		move.w	8(a0),($FFFFFE32).w		; x-position
   29346/   16DCA : 31E8 000C FE34      		move.w	$C(a0),($FFFFFE34).w		; y-position
   29347/   16DD0 : 31F8 FE20 FE36      		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
   29348/   16DD6 : 11F8 FE1B FE54      		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
   29349/   16DDC : 21F8 FE22 FE38      		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
   29350/   16DE2 : 11F8 F742 FE3C      		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
   29351/   16DE8 : 31F8 F72E FE3E      		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
   29352/   16DEE : 31F8 F700 FE40      		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
   29353/   16DF4 : 31F8 F704 FE42      		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
   29354/   16DFA : 31F8 F708 FE44      		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
   29355/   16E00 : 31F8 F70C FE46      		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
   29356/   16E06 : 31F8 F710 FE48      		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
   29357/   16E0C : 31F8 F714 FE4A      		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
   29358/   16E12 : 31F8 F718 FE4C      		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
   29359/   16E18 : 31F8 F71C FE4E      		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
   29360/   16E1E : 31F8 F648 FE50      		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
   29361/   16E24 : 11F8 F64D FE52      		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
   29362/   16E2A : 11F8 F64E FE53      		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
   29363/   16E30 : 4E75                		rts	
   29364/   16E32 :                     
   29365/   16E32 :                     ; ---------------------------------------------------------------------------
   29366/   16E32 :                     ; Subroutine to	load stored info when you start	a level	from a lamppost
   29367/   16E32 :                     ; ---------------------------------------------------------------------------
   29368/   16E32 :                     
   29369/   16E32 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   29370/   16E32 :                     
   29371/   16E32 :                     
   29372/   16E32 :                     Obj79_LoadInfo:				; XREF: LevelSizeLoad
   29373/   16E32 : 11F8 FE31 FE30      		move.b	($FFFFFE31).w,($FFFFFE30).w
   29374/   16E38 : 31F8 FE32 D008      		move.w	($FFFFFE32).w,($FFFFD008).w
   29375/   16E3E : 31F8 FE34 D00C      		move.w	($FFFFFE34).w,($FFFFD00C).w
   29376/   16E44 : 31F8 FE36 FE20      		move.w	($FFFFFE36).w,($FFFFFE20).w
   29377/   16E4A : 11F8 FE54 FE1B      		move.b	($FFFFFE54).w,($FFFFFE1B).w
   29378/   16E50 : 4278 FE20           		clr.w	($FFFFFE20).w
   29379/   16E54 : 4238 FE1B           		clr.b	($FFFFFE1B).w
   29380/   16E58 : 21F8 FE38 FE22      		move.l	($FFFFFE38).w,($FFFFFE22).w
   29381/   16E5E : 11FC 003B FE25      		move.b	#59,($FFFFFE25).w
   29382/   16E64 : 5338 FE24           		subq.b	#1,($FFFFFE24).w
   29383/   16E68 : 11F8 FE3C F742      		move.b	($FFFFFE3C).w,($FFFFF742).w
   29384/   16E6E : 11F8 FE52 F64D      		move.b	($FFFFFE52).w,($FFFFF64D).w
   29385/   16E74 : 31F8 FE3E F72E      		move.w	($FFFFFE3E).w,($FFFFF72E).w
   29386/   16E7A : 31F8 FE3E F726      		move.w	($FFFFFE3E).w,($FFFFF726).w
   29387/   16E80 : 31F8 FE40 F700      		move.w	($FFFFFE40).w,($FFFFF700).w
   29388/   16E86 : 31F8 FE42 F704      		move.w	($FFFFFE42).w,($FFFFF704).w
   29389/   16E8C : 31F8 FE44 F708      		move.w	($FFFFFE44).w,($FFFFF708).w
   29390/   16E92 : 31F8 FE46 F70C      		move.w	($FFFFFE46).w,($FFFFF70C).w
   29391/   16E98 : 31F8 FE48 F710      		move.w	($FFFFFE48).w,($FFFFF710).w
   29392/   16E9E : 31F8 FE4A F714      		move.w	($FFFFFE4A).w,($FFFFF714).w
   29393/   16EA4 : 31F8 FE4C F718      		move.w	($FFFFFE4C).w,($FFFFF718).w
   29394/   16EAA : 31F8 FE4E F71C      		move.w	($FFFFFE4E).w,($FFFFF71C).w
   29395/   16EB0 : 0C38 0001 FE10      		cmpi.b	#1,($FFFFFE10).w
   29396/   16EB6 : 6612                		bne.s	loc_170E4
   29397/   16EB8 : 31F8 FE50 F648      		move.w	($FFFFFE50).w,($FFFFF648).w
   29398/   16EBE : 11F8 FE52 F64D      		move.b	($FFFFFE52).w,($FFFFF64D).w
   29399/   16EC4 : 11F8 FE53 F64E      		move.b	($FFFFFE53).w,($FFFFF64E).w
   29400/   16ECA :                     
   29401/   16ECA :                     loc_170E4:
   29402/   16ECA : 4A38 FE30           		tst.b	($FFFFFE30).w
   29403/   16ECE : 6A0C                		bpl.s	locret_170F6
   29404/   16ED0 : 3038 FE32           		move.w	($FFFFFE32).w,d0
   29405/   16ED4 : 0440 00A0           		subi.w	#$A0,d0
   29406/   16ED8 : 31C0 F728           		move.w	d0,($FFFFF728).w
   29407/   16EDC :                     
   29408/   16EDC :                     locret_170F6:
   29409/   16EDC : 4E75                		rts	
   29410/   16EDE :                     ; End of function Obj79_LoadInfo
   29411/   16EDE :                     
   29412/   16EDE :                     ; ===========================================================================
   29413/   16EDE :                     ; ---------------------------------------------------------------------------
   29414/   16EDE :                     ; Sprite mappings - lamppost
   29415/   16EDE :                     ; ---------------------------------------------------------------------------
   29416/   16EDE :                     Map_obj79:
   29417/   16EDE :                     	include "_mappings/obj79.asm"
(1)    1/   16EDE :                     ; ---------------------------------------------------------------------------
(1)    2/   16EDE :                     ; Sprite mappings - lamppost
(1)    3/   16EDE :                     ; ---------------------------------------------------------------------------
(1)    4/   16EDE : 0008 0027           		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
(1)    5/   16EE2 : 003C 0047           		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
(1)    6/   16EE6 : 06                  byte_17100:	dc.b 6
(1)    7/   16EE7 : E401 0000 F8        		dc.b $E4, 1, 0,	0, $F8
(1)    8/   16EEC : E401 0800 00        		dc.b $E4, 1, 8,	0, 0
(1)    9/   16EF1 : F403 2002 F8        		dc.b $F4, 3, $20, 2, $F8
(1)   10/   16EF6 : F403 2802 00        		dc.b $F4, 3, $28, 2, 0
(1)   11/   16EFB : D401 0006 F8        		dc.b $D4, 1, 0,	6, $F8
(1)   12/   16F00 : D401 0806 00        		dc.b $D4, 1, 8,	6, 0
(1)   13/   16F05 : 04                  byte_1711F:	dc.b 4
(1)   14/   16F06 : E401 0000 F8        		dc.b $E4, 1, 0,	0, $F8
(1)   15/   16F0B : E401 0800 00        		dc.b $E4, 1, 8,	0, 0
(1)   16/   16F10 : F403 2002 F8        		dc.b $F4, 3, $20, 2, $F8
(1)   17/   16F15 : F403 2802 00        		dc.b $F4, 3, $28, 2, 0
(1)   18/   16F1A : 02                  byte_17134:	dc.b 2
(1)   19/   16F1B : F801 0008 F8        		dc.b $F8, 1, 0,	8, $F8
(1)   20/   16F20 : F801 0808 00        		dc.b $F8, 1, 8,	8, 0
(1)   21/   16F25 : 06                  byte_1713F:	dc.b 6
(1)   22/   16F26 : E401 0000 F8        		dc.b $E4, 1, 0,	0, $F8
(1)   23/   16F2B : E401 0800 00        		dc.b $E4, 1, 8,	0, 0
(1)   24/   16F30 : F403 2002 F8        		dc.b $F4, 3, $20, 2, $F8
(1)   25/   16F35 : F403 2802 00        		dc.b $F4, 3, $28, 2, 0
(1)   26/   16F3A : D401 0008 F8        		dc.b $D4, 1, 0,	8, $F8
(1)   27/   16F3F : D401 0808 00        		dc.b $D4, 1, 8,	8, 0
(1)   28/   16F44 : (MACRO)              		even
   29418/   16F44 :                     
   29419/   16F44 :                     ; ===========================================================================
   29420/   16F44 :                     ; ---------------------------------------------------------------------------
   29421/   16F44 :                     ; Object 7D - hidden points at the end of a level
   29422/   16F44 :                     ; ---------------------------------------------------------------------------
   29423/   16F44 :                     
   29424/   16F44 :                     Obj7D:					; XREF: Obj_Index
   29425/   16F44 : 7000                		moveq	#0,d0
   29426/   16F46 : 1028 0024           		move.b	$24(a0),d0
   29427/   16F4A : 323B 0006           		move.w	Obj7D_Index(pc,d0.w),d1
   29428/   16F4E : 4EFB 1002           		jmp	Obj7D_Index(pc,d1.w)
   29429/   16F52 :                     ; ===========================================================================
   29430/   16F52 : 0004                Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
   29431/   16F54 : 00AE                		dc.w Obj7D_DelayDel-Obj7D_Index
   29432/   16F56 :                     ; ===========================================================================
   29433/   16F56 :                     
   29434/   16F56 :                     Obj7D_Main:				; XREF: Obj7D_Index
   29435/   16F56 : 7410                		moveq	#$10,d2
   29436/   16F58 : 3602                		move.w	d2,d3
   29437/   16F5A : D643                		add.w	d3,d3
   29438/   16F5C : 43F8 D000           		lea	($FFFFD000).w,a1
   29439/   16F60 : 3029 0008           		move.w	8(a1),d0
   29440/   16F64 : 9068 0008           		sub.w	8(a0),d0
   29441/   16F68 : D042                		add.w	d2,d0
   29442/   16F6A : B043                		cmp.w	d3,d0
   29443/   16F6C : 6466                		bcc.s	Obj7D_ChkDel
   29444/   16F6E : 3229 000C           		move.w	$C(a1),d1
   29445/   16F72 : 9268 000C           		sub.w	$C(a0),d1
   29446/   16F76 : D242                		add.w	d2,d1
   29447/   16F78 : B243                		cmp.w	d3,d1
   29448/   16F7A : 6458                		bcc.s	Obj7D_ChkDel
   29449/   16F7C : 4A78 FE08           		tst.w	($FFFFFE08).w
   29450/   16F80 : 6652                		bne.s	Obj7D_ChkDel
   29451/   16F82 : 4A38 F7CD           		tst.b	($FFFFF7CD).w
   29452/   16F86 : 664C                		bne.s	Obj7D_ChkDel
   29453/   16F88 : 5428 0024           		addq.b	#2,$24(a0)
   29454/   16F8C : 217C 0001 702E      		move.l	#Map_obj7D,4(a0)
            16F92 : 0004             
   29455/   16F94 : 317C 84B6 0002      		move.w	#$84B6,2(a0)
   29456/   16F9A : 0028 0004 0001      		ori.b	#4,1(a0)
   29457/   16FA0 : 117C 0000 0018      		move.b	#0,$18(a0)
   29458/   16FA6 : 117C 0010 0019      		move.b	#$10,$19(a0)
   29459/   16FAC : 1168 0028 001A      		move.b	$28(a0),$1A(a0)
   29460/   16FB2 : 317C 0077 0030      		move.w	#119,$30(a0)	; set display time to 2	seconds
   29461/   16FB8 : 303C 00C9           		move.w	#$C9,d0
   29462/   16FBC : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play bonus sound
   29463/   16FC2 : 7000                		moveq	#0,d0
   29464/   16FC4 : 1028 0028           		move.b	$28(a0),d0
   29465/   16FC8 : D040                		add.w	d0,d0
   29466/   16FCA : 303B 002C           		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
   29467/   16FCE : 4EB9 0001 C6E8      		jsr	AddPoints
   29468/   16FD4 :                     
   29469/   16FD4 :                     Obj7D_ChkDel:
   29470/   16FD4 : 3028 0008           		move.w	8(a0),d0
   29471/   16FD8 : 0240 FF80           		andi.w	#$FF80,d0
   29472/   16FDC : 3238 F700           		move.w	($FFFFF700).w,d1
   29473/   16FE0 : 0441 0080           		subi.w	#$80,d1
   29474/   16FE4 : 0241 FF80           		andi.w	#$FF80,d1
   29475/   16FE8 : 9041                		sub.w	d1,d0
   29476/   16FEA : 0C40 0280           		cmpi.w	#$280,d0
   29477/   16FEE : 6202                		bhi.s	Obj7D_Delete
   29478/   16FF0 : 4E75                		rts	
   29479/   16FF2 :                     ; ===========================================================================
   29480/   16FF2 :                     
   29481/   16FF2 :                     Obj7D_Delete:
   29482/   16FF2 : 4EF9 0000 D40E      		jmp	DeleteObject
   29483/   16FF8 :                     ; ===========================================================================
   29484/   16FF8 : 0000                Obj7D_Points:	dc.w 0			; Bonus	points array
   29485/   16FFA : 03E8                		dc.w 1000
   29486/   16FFC : 0064                		dc.w 100
   29487/   16FFE : 0001                		dc.w 1
   29488/   17000 :                     ; ===========================================================================
   29489/   17000 :                     
   29490/   17000 :                     Obj7D_DelayDel:				; XREF: Obj7D_Index
   29491/   17000 : 5368 0030           		subq.w	#1,$30(a0)	; subtract 1 from display time
   29492/   17004 : 6B22                		bmi.s	Obj7D_Delete2	; if time is zero, branch
   29493/   17006 : 3028 0008           		move.w	8(a0),d0
   29494/   1700A : 0240 FF80           		andi.w	#-$80,d0
   29495/   1700E : 3238 F700           		move.w	($FFFFF700).w,d1
   29496/   17012 : 0441 0080           		subi.w	#$80,d1
   29497/   17016 : 0241 FF80           		andi.w	#-$80,d1
   29498/   1701A : 9041                		sub.w	d1,d0
   29499/   1701C : 0C40 0280           		cmpi.w	#$280,d0
   29500/   17020 : 6206                		bhi.s	Obj7D_Delete2
   29501/   17022 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   29502/   17028 :                     ; ===========================================================================
   29503/   17028 :                     
   29504/   17028 :                     Obj7D_Delete2:
   29505/   17028 : 4EF9 0000 D40E      		jmp	DeleteObject
   29506/   1702E :                     ; ===========================================================================
   29507/   1702E :                     ; ---------------------------------------------------------------------------
   29508/   1702E :                     ; Sprite mappings - hidden points at the end of	a level
   29509/   1702E :                     ; ---------------------------------------------------------------------------
   29510/   1702E :                     Map_obj7D:
   29511/   1702E :                     	include "_mappings/obj7D.asm"
(1)    1/   1702E :                     ; ---------------------------------------------------------------------------
(1)    2/   1702E :                     ; Sprite mappings - hidden points at the end of	a level
(1)    3/   1702E :                     ; ---------------------------------------------------------------------------
(1)    4/   1702E : 0008 0009           		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
(1)    5/   17032 : 000F 0015           		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
(1)    6/   17036 : 00                  byte_17250:	dc.b 0
(1)    7/   17037 : 01                  byte_17251:	dc.b 1
(1)    8/   17038 : F40E 0000 F0        		dc.b $F4, $E, 0, 0, $F0
(1)    9/   1703D : 01                  byte_17257:	dc.b 1
(1)   10/   1703E : F40E 000C F0        		dc.b $F4, $E, 0, $C, $F0
(1)   11/   17043 : 01                  byte_1725D:	dc.b 1
(1)   12/   17044 : F40E 0018 F0        		dc.b $F4, $E, 0, $18, $F0
(1)   13/   17049 : (MACRO)              		even
(1)   13/   17049 : 00                                          dc.b 0 ;ds.b 1 
   29512/   1704A :                     
   29513/   1704A :                     ; ===========================================================================
   29514/   1704A :                     ; ---------------------------------------------------------------------------
   29515/   1704A :                     ; Object 8A - "SONIC TEAM PRESENTS" and	credits
   29516/   1704A :                     ; ---------------------------------------------------------------------------
   29517/   1704A :                     
   29518/   1704A :                     Obj8A:					; XREF: Obj_Index
   29519/   1704A : 7000                		moveq	#0,d0
   29520/   1704C : 1028 0024           		move.b	$24(a0),d0
   29521/   17050 : 323B 0006           		move.w	Obj8A_Index(pc,d0.w),d1
   29522/   17054 : 4EFB 1002           		jmp	Obj8A_Index(pc,d1.w)
   29523/   17058 :                     ; ===========================================================================
   29524/   17058 : 0004                Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
   29525/   1705A : 006A                		dc.w Obj8A_Display-Obj8A_Index
   29526/   1705C :                     ; ===========================================================================
   29527/   1705C :                     
   29528/   1705C :                     Obj8A_Main:				; XREF: Obj8A_Index
   29529/   1705C : 5428 0024           		addq.b	#2,$24(a0)
   29530/   17060 : 317C 0120 0008      		move.w	#$120,8(a0)
   29531/   17066 : 317C 00F0 000A      		move.w	#$F0,$A(a0)
   29532/   1706C : 217C 0001 70C8      		move.l	#Map_obj8A,4(a0)
            17072 : 0004             
   29533/   17074 : 317C 05A0 0002      		move.w	#$5A0,2(a0)
   29534/   1707A : 3038 FFF4           		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
   29535/   1707E : 1140 001A           		move.b	d0,$1A(a0)	; display appropriate sprite
   29536/   17082 : 117C 0000 0001      		move.b	#0,1(a0)
   29537/   17088 : 117C 0000 0018      		move.b	#0,$18(a0)
   29538/   1708E : 0C38 0004 F600      		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
   29539/   17094 : 662C                		bne.s	Obj8A_Display	; if not, branch
   29540/   17096 : 317C 00A6 0002      		move.w	#$A6,2(a0)
   29541/   1709C : 117C 000A 001A      		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
   29542/   170A2 : 4A38 FFE3           		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
   29543/   170A6 : 671A                		beq.s	Obj8A_Display	; if not, branch
   29544/   170A8 : 0C38 0072 F604      		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
   29545/   170AE : 6612                		bne.s	Obj8A_Display	; if not, branch
   29546/   170B0 : 31FC 0EEE FBC0      		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
   29547/   170B6 : 31FC 0880 FBC2      		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
   29548/   170BC : 4EF9 0000 D40E      		jmp	DeleteObject
   29549/   170C2 :                     ; ===========================================================================
   29550/   170C2 :                     
   29551/   170C2 :                     Obj8A_Display:				; XREF: Obj8A_Index
   29552/   170C2 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   29553/   170C8 :                     ; ===========================================================================
   29554/   170C8 :                     ; ---------------------------------------------------------------------------
   29555/   170C8 :                     ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
   29556/   170C8 :                     ; ---------------------------------------------------------------------------
   29557/   170C8 :                     Map_obj8A:
   29558/   170C8 :                     	include "_mappings/obj8A.asm"
(1)    1/   170C8 :                     ; ---------------------------------------------------------------------------
(1)    2/   170C8 :                     ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
(1)    3/   170C8 :                     ; ---------------------------------------------------------------------------
(1)    4/   170C8 : 0016 005D           		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
(1)    5/   170CC : 00AE 00E1           		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
(1)    6/   170D0 : 015A 01BF           		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
(1)    7/   170D4 : 0242 02B6           		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
(1)    8/   170D8 : 0352 039E           		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
(1)    9/   170DC : 03C7                		dc.w byte_176A9-Map_obj8A
(1)   10/   170DE : 0E                  byte_172F8:	dc.b $E			 ; SONIC TEAM STAFF
(1)   11/   170DF : F805 002E 88        		dc.b $F8, 5, 0,	$2E, $88
(1)   12/   170E4 : F805 0026 98        		dc.b $F8, 5, 0,	$26, $98
(1)   13/   170E9 : F805 001A A8        		dc.b $F8, 5, 0,	$1A, $A8
(1)   14/   170EE : F801 0046 B8        		dc.b $F8, 1, 0,	$46, $B8
(1)   15/   170F3 : F805 001E C0        		dc.b $F8, 5, 0,	$1E, $C0
(1)   16/   170F8 : F805 003E D8        		dc.b $F8, 5, 0,	$3E, $D8
(1)   17/   170FD : F805 000E E8        		dc.b $F8, 5, 0,	$E, $E8
(1)   18/   17102 : F805 0004 F8        		dc.b $F8, 5, 0,	4, $F8
(1)   19/   17107 : F809 0008 08        		dc.b $F8, 9, 0,	8, 8
(1)   20/   1710C : F805 002E 28        		dc.b $F8, 5, 0,	$2E, $28
(1)   21/   17111 : F805 003E 38        		dc.b $F8, 5, 0,	$3E, $38
(1)   22/   17116 : F805 0004 48        		dc.b $F8, 5, 0,	4, $48
(1)   23/   1711B : F805 005C 58        		dc.b $F8, 5, 0,	$5C, $58
(1)   24/   17120 : F805 005C 68        		dc.b $F8, 5, 0,	$5C, $68
(1)   25/   17125 : 10                  byte_1733F:	dc.b $10		; GAME PLAN CAROL YAS
(1)   26/   17126 : D805 0000 80        		dc.b $D8, 5, 0,	0, $80
(1)   27/   1712B : D805 0004 90        		dc.b $D8, 5, 0,	4, $90
(1)   28/   17130 : D809 0008 A0        		dc.b $D8, 9, 0,	8, $A0
(1)   29/   17135 : D805 000E B4        		dc.b $D8, 5, 0,	$E, $B4
(1)   30/   1713A : D805 0012 D0        		dc.b $D8, 5, 0,	$12, $D0
(1)   31/   1713F : D805 0016 E0        		dc.b $D8, 5, 0,	$16, $E0
(1)   32/   17144 : D805 0004 F0        		dc.b $D8, 5, 0,	4, $F0
(1)   33/   17149 : D805 001A 00        		dc.b $D8, 5, 0,	$1A, 0
(1)   34/   1714E : 0805 001E C8        		dc.b 8,	5, 0, $1E, $C8
(1)   35/   17153 : 0805 0004 D8        		dc.b 8,	5, 0, 4, $D8
(1)   36/   17158 : 0805 0022 E8        		dc.b 8,	5, 0, $22, $E8
(1)   37/   1715D : 0805 0026 F8        		dc.b 8,	5, 0, $26, $F8
(1)   38/   17162 : 0805 0016 08        		dc.b 8,	5, 0, $16, 8
(1)   39/   17167 : 0805 002A 20        		dc.b 8,	5, 0, $2A, $20
(1)   40/   1716C : 0805 0004 30        		dc.b 8,	5, 0, 4, $30
(1)   41/   17171 : 0805 002E 44        		dc.b 8,	5, 0, $2E, $44
(1)   42/   17176 : 0A                  byte_17390:	dc.b $A			 ; PROGRAM YU 2
(1)   43/   17177 : D805 0012 80        		dc.b $D8, 5, 0,	$12, $80
(1)   44/   1717C : D805 0022 90        		dc.b $D8, 5, 0,	$22, $90
(1)   45/   17181 : D805 0026 A0        		dc.b $D8, 5, 0,	$26, $A0
(1)   46/   17186 : D805 0000 B0        		dc.b $D8, 5, 0,	0, $B0
(1)   47/   1718B : D805 0022 C0        		dc.b $D8, 5, 0,	$22, $C0
(1)   48/   17190 : D805 0004 D0        		dc.b $D8, 5, 0,	4, $D0
(1)   49/   17195 : D809 0008 E0        		dc.b $D8, 9, 0,	8, $E0
(1)   50/   1719A : 0805 002A E8        		dc.b 8,	5, 0, $2A, $E8
(1)   51/   1719F : 0805 0032 F8        		dc.b 8,	5, 0, $32, $F8
(1)   52/   171A4 : 0805 0036 08        		dc.b 8,	5, 0, $36, 8
(1)   53/   171A9 : 18                  byte_173C3:	dc.b $18		 ; CHARACTER DESIGN BIGISLAND
(1)   54/   171AA : D805 001E 88        		dc.b $D8, 5, 0,	$1E, $88
(1)   55/   171AF : D805 003A 98        		dc.b $D8, 5, 0,	$3A, $98
(1)   56/   171B4 : D805 0004 A8        		dc.b $D8, 5, 0,	4, $A8
(1)   57/   171B9 : D805 0022 B8        		dc.b $D8, 5, 0,	$22, $B8
(1)   58/   171BE : D805 0004 C8        		dc.b $D8, 5, 0,	4, $C8
(1)   59/   171C3 : D805 001E D8        		dc.b $D8, 5, 0,	$1E, $D8
(1)   60/   171C8 : D805 003E E8        		dc.b $D8, 5, 0,	$3E, $E8
(1)   61/   171CD : D805 000E F8        		dc.b $D8, 5, 0,	$E, $F8
(1)   62/   171D2 : D805 0022 08        		dc.b $D8, 5, 0,	$22, 8
(1)   63/   171D7 : D805 0042 20        		dc.b $D8, 5, 0,	$42, $20
(1)   64/   171DC : D805 000E 30        		dc.b $D8, 5, 0,	$E, $30
(1)   65/   171E1 : D805 002E 40        		dc.b $D8, 5, 0,	$2E, $40
(1)   66/   171E6 : D801 0046 50        		dc.b $D8, 1, 0,	$46, $50
(1)   67/   171EB : D805 0000 58        		dc.b $D8, 5, 0,	0, $58
(1)   68/   171F0 : D805 001A 68        		dc.b $D8, 5, 0,	$1A, $68
(1)   69/   171F5 : 0805 0048 C0        		dc.b 8,	5, 0, $48, $C0
(1)   70/   171FA : 0801 0046 D0        		dc.b 8,	1, 0, $46, $D0
(1)   71/   171FF : 0805 0000 D8        		dc.b 8,	5, 0, 0, $D8
(1)   72/   17204 : 0801 0046 E8        		dc.b 8,	1, 0, $46, $E8
(1)   73/   17209 : 0805 002E F0        		dc.b 8,	5, 0, $2E, $F0
(1)   74/   1720E : 0805 0016 00        		dc.b 8,	5, 0, $16, 0
(1)   75/   17213 : 0805 0004 10        		dc.b 8,	5, 0, 4, $10
(1)   76/   17218 : 0805 001A 20        		dc.b 8,	5, 0, $1A, $20
(1)   77/   1721D : 0805 0042 30        		dc.b 8,	5, 0, $42, $30
(1)   78/   17222 : 14                  byte_1743C:	dc.b $14		 ; DESIGN JINYA	PHENIX RIE
(1)   79/   17223 : D005 0042 A0        		dc.b $D0, 5, 0,	$42, $A0
(1)   80/   17228 : D005 000E B0        		dc.b $D0, 5, 0,	$E, $B0
(1)   81/   1722D : D005 002E C0        		dc.b $D0, 5, 0,	$2E, $C0
(1)   82/   17232 : D001 0046 D0        		dc.b $D0, 1, 0,	$46, $D0
(1)   83/   17237 : D005 0000 D8        		dc.b $D0, 5, 0,	0, $D8
(1)   84/   1723C : D005 001A E8        		dc.b $D0, 5, 0,	$1A, $E8
(1)   85/   17241 : 0005 004C E8        		dc.b 0,	5, 0, $4C, $E8
(1)   86/   17246 : 0001 0046 F8        		dc.b 0,	1, 0, $46, $F8
(1)   87/   1724B : 0005 001A 04        		dc.b 0,	5, 0, $1A, 4
(1)   88/   17250 : 0005 002A 14        		dc.b 0,	5, 0, $2A, $14
(1)   89/   17255 : 0005 0004 24        		dc.b 0,	5, 0, 4, $24
(1)   90/   1725A : 2005 0012 D0        		dc.b $20, 5, 0,	$12, $D0
(1)   91/   1725F : 2005 003A E0        		dc.b $20, 5, 0,	$3A, $E0
(1)   92/   17264 : 2005 000E F0        		dc.b $20, 5, 0,	$E, $F0
(1)   93/   17269 : 2005 001A 00        		dc.b $20, 5, 0,	$1A, 0
(1)   94/   1726E : 2001 0046 10        		dc.b $20, 1, 0,	$46, $10
(1)   95/   17273 : 2005 0050 18        		dc.b $20, 5, 0,	$50, $18
(1)   96/   17278 : 2005 0022 30        		dc.b $20, 5, 0,	$22, $30
(1)   97/   1727D : 2001 0046 40        		dc.b $20, 1, 0,	$46, $40
(1)   98/   17282 : 2005 000E 48        		dc.b $20, 5, 0,	$E, $48
(1)   99/   17287 : 1A                  byte_174A1:	dc.b $1A		 ; SOUND PRODUCE MASATO	NAKAMURA
(1)  100/   17288 : D805 002E 98        		dc.b $D8, 5, 0,	$2E, $98
(1)  101/   1728D : D805 0026 A8        		dc.b $D8, 5, 0,	$26, $A8
(1)  102/   17292 : D805 0032 B8        		dc.b $D8, 5, 0,	$32, $B8
(1)  103/   17297 : D805 001A C8        		dc.b $D8, 5, 0,	$1A, $C8
(1)  104/   1729C : D805 0054 D8        		dc.b $D8, 5, 0,	$54, $D8
(1)  105/   172A1 : D805 0012 F8        		dc.b $D8, 5, 0,	$12, $F8
(1)  106/   172A6 : D805 0022 08        		dc.b $D8, 5, 0,	$22, 8
(1)  107/   172AB : D805 0026 18        		dc.b $D8, 5, 0,	$26, $18
(1)  108/   172B0 : D805 0042 28        		dc.b $D8, 5, 0,	$42, $28
(1)  109/   172B5 : D805 0032 38        		dc.b $D8, 5, 0,	$32, $38
(1)  110/   172BA : D805 001E 48        		dc.b $D8, 5, 0,	$1E, $48
(1)  111/   172BF : D805 000E 58        		dc.b $D8, 5, 0,	$E, $58
(1)  112/   172C4 : 0809 0008 88        		dc.b 8,	9, 0, 8, $88
(1)  113/   172C9 : 0805 0004 9C        		dc.b 8,	5, 0, 4, $9C
(1)  114/   172CE : 0805 002E AC        		dc.b 8,	5, 0, $2E, $AC
(1)  115/   172D3 : 0805 0004 BC        		dc.b 8,	5, 0, 4, $BC
(1)  116/   172D8 : 0805 003E CC        		dc.b 8,	5, 0, $3E, $CC
(1)  117/   172DD : 0805 0026 DC        		dc.b 8,	5, 0, $26, $DC
(1)  118/   172E2 : 0805 001A F8        		dc.b 8,	5, 0, $1A, $F8
(1)  119/   172E7 : 0805 0004 08        		dc.b 8,	5, 0, 4, 8
(1)  120/   172EC : 0805 0058 18        		dc.b 8,	5, 0, $58, $18
(1)  121/   172F1 : 0805 0004 28        		dc.b 8,	5, 0, 4, $28
(1)  122/   172F6 : 0809 0008 38        		dc.b 8,	9, 0, 8, $38
(1)  123/   172FB : 0805 0032 4C        		dc.b 8,	5, 0, $32, $4C
(1)  124/   17300 : 0805 0022 5C        		dc.b 8,	5, 0, $22, $5C
(1)  125/   17305 : 0805 0004 6C        		dc.b 8,	5, 0, 4, $6C
(1)  126/   1730A : 17                  byte_17524:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
(1)  127/   1730B : D005 002E 98        		dc.b $D0, 5, 0,	$2E, $98
(1)  128/   17310 : D005 0026 A8        		dc.b $D0, 5, 0,	$26, $A8
(1)  129/   17315 : D005 0032 B8        		dc.b $D0, 5, 0,	$32, $B8
(1)  130/   1731A : D005 001A C8        		dc.b $D0, 5, 0,	$1A, $C8
(1)  131/   1731F : D005 0054 D8        		dc.b $D0, 5, 0,	$54, $D8
(1)  132/   17324 : D005 0012 F8        		dc.b $D0, 5, 0,	$12, $F8
(1)  133/   17329 : D005 0022 08        		dc.b $D0, 5, 0,	$22, 8
(1)  134/   1732E : D005 0026 18        		dc.b $D0, 5, 0,	$26, $18
(1)  135/   17333 : D005 0000 28        		dc.b $D0, 5, 0,	0, $28
(1)  136/   17338 : D005 0022 38        		dc.b $D0, 5, 0,	$22, $38
(1)  137/   1733D : D005 0004 48        		dc.b $D0, 5, 0,	4, $48
(1)  138/   17342 : D009 0008 58        		dc.b $D0, 9, 0,	8, $58
(1)  139/   17347 : 0005 004C D0        		dc.b 0,	5, 0, $4C, $D0
(1)  140/   1734C : 0001 0046 E0        		dc.b 0,	1, 0, $46, $E0
(1)  141/   17351 : 0009 0008 E8        		dc.b 0,	9, 0, 8, $E8
(1)  142/   17356 : 0001 0046 FC        		dc.b 0,	1, 0, $46, $FC
(1)  143/   1735B : 0005 003E 04        		dc.b 0,	5, 0, $3E, 4
(1)  144/   17360 : 0005 0004 14        		dc.b 0,	5, 0, 4, $14
(1)  145/   17365 : 2009 0008 D0        		dc.b $20, 9, 0,	8, $D0
(1)  146/   1736A : 2005 0004 E4        		dc.b $20, 5, 0,	4, $E4
(1)  147/   1736F : 2005 001E F4        		dc.b $20, 5, 0,	$1E, $F4
(1)  148/   17374 : 2005 0058 04        		dc.b $20, 5, 0,	$58, 4
(1)  149/   17379 : 2005 002A 14        		dc.b $20, 5, 0,	$2A, $14
(1)  150/   1737E : 1F                  byte_17598:	dc.b $1F		 ; SPECIAL THANKS FUJIO	MINEGISHI PAPA
(1)  151/   1737F : D805 002E 80        		dc.b $D8, 5, 0,	$2E, $80
(1)  152/   17384 : D805 0012 90        		dc.b $D8, 5, 0,	$12, $90
(1)  153/   17389 : D805 000E A0        		dc.b $D8, 5, 0,	$E, $A0
(1)  154/   1738E : D805 001E B0        		dc.b $D8, 5, 0,	$1E, $B0
(1)  155/   17393 : D801 0046 C0        		dc.b $D8, 1, 0,	$46, $C0
(1)  156/   17398 : D805 0004 C8        		dc.b $D8, 5, 0,	4, $C8
(1)  157/   1739D : D805 0016 D8        		dc.b $D8, 5, 0,	$16, $D8
(1)  158/   173A2 : D805 003E F8        		dc.b $D8, 5, 0,	$3E, $F8
(1)  159/   173A7 : D805 003A 08        		dc.b $D8, 5, 0,	$3A, 8
(1)  160/   173AC : D805 0004 18        		dc.b $D8, 5, 0,	4, $18
(1)  161/   173B1 : D805 001A 28        		dc.b $D8, 5, 0,	$1A, $28
(1)  162/   173B6 : D805 0058 38        		dc.b $D8, 5, 0,	$58, $38
(1)  163/   173BB : D805 002E 48        		dc.b $D8, 5, 0,	$2E, $48
(1)  164/   173C0 : 0005 005C B0        		dc.b 0,	5, 0, $5C, $B0
(1)  165/   173C5 : 0005 0032 C0        		dc.b 0,	5, 0, $32, $C0
(1)  166/   173CA : 0005 004C D0        		dc.b 0,	5, 0, $4C, $D0
(1)  167/   173CF : 0001 0046 E0        		dc.b 0,	1, 0, $46, $E0
(1)  168/   173D4 : 0005 0026 E8        		dc.b 0,	5, 0, $26, $E8
(1)  169/   173D9 : 0009 0008 00        		dc.b 0,	9, 0, 8, 0
(1)  170/   173DE : 0001 0046 14        		dc.b 0,	1, 0, $46, $14
(1)  171/   173E3 : 0005 001A 1C        		dc.b 0,	5, 0, $1A, $1C
(1)  172/   173E8 : 0005 000E 2C        		dc.b 0,	5, 0, $E, $2C
(1)  173/   173ED : 0005 0000 3C        		dc.b 0,	5, 0, 0, $3C
(1)  174/   173F2 : 0001 0046 4C        		dc.b 0,	1, 0, $46, $4C
(1)  175/   173F7 : 0005 002E 54        		dc.b 0,	5, 0, $2E, $54
(1)  176/   173FC : 0005 003A 64        		dc.b 0,	5, 0, $3A, $64
(1)  177/   17401 : 0001 0046 74        		dc.b 0,	1, 0, $46, $74
(1)  178/   17406 : 2005 0012 F8        		dc.b $20, 5, 0,	$12, $F8
(1)  179/   1740B : 2005 0004 08        		dc.b $20, 5, 0,	4, 8
(1)  180/   17410 : 2005 0012 18        		dc.b $20, 5, 0,	$12, $18
(1)  181/   17415 : 2005 0004 28        		dc.b $20, 5, 0,	4, $28
(1)  182/   1741A : 0F                  byte_17634:	dc.b $F			 ; PRESENTED BY	SEGA
(1)  183/   1741B : F805 0012 80        		dc.b $F8, 5, 0,	$12, $80
(1)  184/   17420 : F805 0022 90        		dc.b $F8, 5, 0,	$22, $90
(1)  185/   17425 : F805 000E A0        		dc.b $F8, 5, 0,	$E, $A0
(1)  186/   1742A : F805 002E B0        		dc.b $F8, 5, 0,	$2E, $B0
(1)  187/   1742F : F805 000E C0        		dc.b $F8, 5, 0,	$E, $C0
(1)  188/   17434 : F805 001A D0        		dc.b $F8, 5, 0,	$1A, $D0
(1)  189/   17439 : F805 003E E0        		dc.b $F8, 5, 0,	$3E, $E0
(1)  190/   1743E : F805 000E F0        		dc.b $F8, 5, 0,	$E, $F0
(1)  191/   17443 : F805 0042 00        		dc.b $F8, 5, 0,	$42, 0
(1)  192/   17448 : F805 0048 18        		dc.b $F8, 5, 0,	$48, $18
(1)  193/   1744D : F805 002A 28        		dc.b $F8, 5, 0,	$2A, $28
(1)  194/   17452 : F805 002E 40        		dc.b $F8, 5, 0,	$2E, $40
(1)  195/   17457 : F805 000E 50        		dc.b $F8, 5, 0,	$E, $50
(1)  196/   1745C : F805 0000 60        		dc.b $F8, 5, 0,	0, $60
(1)  197/   17461 : F805 0004 70        		dc.b $F8, 5, 0,	4, $70
(1)  198/   17466 : 08                  byte_17680:	dc.b 8			 ; TRY AGAIN
(1)  199/   17467 : 3005 003E C0        		dc.b $30, 5, 0,	$3E, $C0
(1)  200/   1746C : 3005 0022 D0        		dc.b $30, 5, 0,	$22, $D0
(1)  201/   17471 : 3005 002A E0        		dc.b $30, 5, 0,	$2A, $E0
(1)  202/   17476 : 3005 0004 F8        		dc.b $30, 5, 0,	4, $F8
(1)  203/   1747B : 3005 0000 08        		dc.b $30, 5, 0,	0, 8
(1)  204/   17480 : 3005 0004 18        		dc.b $30, 5, 0,	4, $18
(1)  205/   17485 : 3001 0046 28        		dc.b $30, 1, 0,	$46, $28
(1)  206/   1748A : 3005 001A 30        		dc.b $30, 5, 0,	$1A, $30
(1)  207/   1748F : 11                  byte_176A9:	dc.b $11		 ; SONIC TEAM PRESENTS
(1)  208/   17490 : E805 002E B4        		dc.b $E8, 5, 0,	$2E, $B4
(1)  209/   17495 : E805 0026 C4        		dc.b $E8, 5, 0,	$26, $C4
(1)  210/   1749A : E805 001A D4        		dc.b $E8, 5, 0,	$1A, $D4
(1)  211/   1749F : E801 0046 E4        		dc.b $E8, 1, 0,	$46, $E4
(1)  212/   174A4 : E805 001E EC        		dc.b $E8, 5, 0,	$1E, $EC
(1)  213/   174A9 : E805 003E 04        		dc.b $E8, 5, 0,	$3E, 4
(1)  214/   174AE : E805 000E 14        		dc.b $E8, 5, 0,	$E, $14
(1)  215/   174B3 : E805 0004 24        		dc.b $E8, 5, 0,	4, $24
(1)  216/   174B8 : E809 0008 34        		dc.b $E8, 9, 0,	8, $34
(1)  217/   174BD : 0005 0012 C0        		dc.b 0,	5, 0, $12, $C0
(1)  218/   174C2 : 0005 0022 D0        		dc.b 0,	5, 0, $22, $D0
(1)  219/   174C7 : 0005 000E E0        		dc.b 0,	5, 0, $E, $E0
(1)  220/   174CC : 0005 002E F0        		dc.b 0,	5, 0, $2E, $F0
(1)  221/   174D1 : 0005 000E 00        		dc.b 0,	5, 0, $E, 0
(1)  222/   174D6 : 0005 001A 10        		dc.b 0,	5, 0, $1A, $10
(1)  223/   174DB : 0005 003E 20        		dc.b 0,	5, 0, $3E, $20
(1)  224/   174E0 : 0005 002E 30        		dc.b 0,	5, 0, $2E, $30
(1)  225/   174E5 : (MACRO)              		even
(1)  225/   174E5 : 00                                          dc.b 0 ;ds.b 1 
   29559/   174E6 :                     
   29560/   174E6 :                     ; ===========================================================================
   29561/   174E6 :                     ; ---------------------------------------------------------------------------
   29562/   174E6 :                     ; Object 3D - Eggman (GHZ)
   29563/   174E6 :                     ; ---------------------------------------------------------------------------
   29564/   174E6 :                     
   29565/   174E6 :                     Obj3D:					; XREF: Obj_Index
   29566/   174E6 : 7000                		moveq	#0,d0
   29567/   174E8 : 1028 0024           		move.b	$24(a0),d0
   29568/   174EC : 323B 0006           		move.w	Obj3D_Index(pc,d0.w),d1
   29569/   174F0 : 4EFB 1002           		jmp	Obj3D_Index(pc,d1.w)
   29570/   174F4 :                     ; ===========================================================================
   29571/   174F4 : 000E                Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
   29572/   174F6 : 007A                		dc.w Obj3D_ShipMain-Obj3D_Index
   29573/   174F8 : 0310                		dc.w Obj3D_FaceMain-Obj3D_Index
   29574/   174FA : 0362                		dc.w Obj3D_FlameMain-Obj3D_Index
   29575/   174FC :                     
   29576/   174FC : 0200                Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
   29577/   174FE : 0401                		dc.b 4,	1
   29578/   17500 : 0607                		dc.b 6,	7
   29579/   17502 :                     ; ===========================================================================
   29580/   17502 :                     
   29581/   17502 :                     Obj3D_Main:				; XREF: Obj3D_Index
   29582/   17502 : 45F9 0001 74FC      		lea	(Obj3D_ObjData).l,a2
   29583/   17508 : 2248                		movea.l	a0,a1
   29584/   1750A : 7202                		moveq	#2,d1
   29585/   1750C : 6008                		bra.s	Obj3D_LoadBoss
   29586/   1750E :                     ; ===========================================================================
   29587/   1750E :                     
   29588/   1750E :                     Obj3D_Loop:
   29589/   1750E : 4EB9 0000 D86E      		jsr	SingleObjLoad2
   29590/   17514 : 6640                		bne.s	loc_17772
   29591/   17516 :                     
   29592/   17516 :                     Obj3D_LoadBoss:				; XREF: Obj3D_Main
   29593/   17516 : 135A 0024           		move.b	(a2)+,$24(a1)
   29594/   1751A : 12BC 003D           		move.b	#$3D,0(a1)
   29595/   1751E : 3368 0008 0008      		move.w	8(a0),8(a1)
   29596/   17524 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   29597/   1752A : 237C 0001 7AE6      		move.l	#Map_Eggman,4(a1)
            17530 : 0004             
   29598/   17532 : 337C 0400 0002      		move.w	#$400,2(a1)
   29599/   17538 : 137C 0004 0001      		move.b	#4,1(a1)
   29600/   1753E : 137C 0020 0019      		move.b	#$20,$19(a1)
   29601/   17544 : 137C 0003 0018      		move.b	#3,$18(a1)
   29602/   1754A : 135A 001C           		move.b	(a2)+,$1C(a1)
   29603/   1754E : 2348 0034           		move.l	a0,$34(a1)
   29604/   17552 : 51C9 FFBA           		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
   29605/   17556 :                     
   29606/   17556 :                     loc_17772:
   29607/   17556 : 3168 0008 0030      		move.w	8(a0),$30(a0)
   29608/   1755C : 3168 000C 0038      		move.w	$C(a0),$38(a0)
   29609/   17562 : 117C 000F 0020      		move.b	#$F,$20(a0)
   29610/   17568 : 117C 0008 0021      		move.b	#8,$21(a0)	; set number of	hits to	8
   29611/   1756E :                     
   29612/   1756E :                     Obj3D_ShipMain:				; XREF: Obj3D_Index
   29613/   1756E : 7000                		moveq	#0,d0
   29614/   17570 : 1028 0025           		move.b	$25(a0),d0
   29615/   17574 : 323B 002A           		move.w	Obj3D_ShipIndex(pc,d0.w),d1
   29616/   17578 : 4EBB 1026           		jsr	Obj3D_ShipIndex(pc,d1.w)
   29617/   1757C : 43F9 0001 7A96      		lea	(Ani_Eggman).l,a1
   29618/   17582 : 4EB9 0000 A4FE      		jsr	AnimateSprite
   29619/   17588 : 1028 0022           		move.b	$22(a0),d0
   29620/   1758C : 0200 0003           		andi.b	#3,d0
   29621/   17590 : 0228 00FC 0001      		andi.b	#$FC,1(a0)
   29622/   17596 : 8128 0001           		or.b	d0,1(a0)
   29623/   1759A : 4EF9 0000 D3D2      		jmp	DisplaySprite
   29624/   175A0 :                     ; ===========================================================================
   29625/   175A0 : 000E                Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
   29626/   175A2 : 010C                		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
   29627/   175A4 : 015A                		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
   29628/   175A6 : 0194                		dc.w loc_17954-Obj3D_ShipIndex
   29629/   175A8 : 01BA                		dc.w loc_1797A-Obj3D_ShipIndex
   29630/   175AA : 01EC                		dc.w loc_179AC-Obj3D_ShipIndex
   29631/   175AC : 0236                		dc.w loc_179F6-Obj3D_ShipIndex
   29632/   175AE :                     ; ===========================================================================
   29633/   175AE :                     
   29634/   175AE :                     Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
   29635/   175AE : 317C 0100 0012      		move.w	#$100,$12(a0)	; move ship down
   29636/   175B4 : 6100 00D0           		bsr.w	BossMove
   29637/   175B8 : 0C68 0338 0038      		cmpi.w	#$338,$38(a0)
   29638/   175BE : 660A                		bne.s	loc_177E6
   29639/   175C0 : 317C 0000 0012      		move.w	#0,$12(a0)	; stop ship
   29640/   175C6 : 5428 0025           		addq.b	#2,$25(a0)	; goto next routine
   29641/   175CA :                     
   29642/   175CA :                     loc_177E6:
   29643/   175CA : 1028 003F           		move.b	$3F(a0),d0
   29644/   175CE : 4EB9 0000 27C0      		jsr	(CalcSine).l
   29645/   175D4 : EC40                		asr.w	#6,d0
   29646/   175D6 : D068 0038           		add.w	$38(a0),d0
   29647/   175DA : 3140 000C           		move.w	d0,$C(a0)
   29648/   175DE : 3168 0030 0008      		move.w	$30(a0),8(a0)
   29649/   175E4 : 5428 003F           		addq.b	#2,$3F(a0)
   29650/   175E8 : 0C28 0008 0025      		cmpi.b	#8,$25(a0)
   29651/   175EE : 643E                		bcc.s	locret_1784A
   29652/   175F0 : 4A28 0022           		tst.b	$22(a0)
   29653/   175F4 : 6B3A                		bmi.s	loc_1784C
   29654/   175F6 : 4A28 0020           		tst.b	$20(a0)
   29655/   175FA : 6632                		bne.s	locret_1784A
   29656/   175FC : 4A28 003E           		tst.b	$3E(a0)
   29657/   17600 : 6610                		bne.s	Obj3D_ShipFlash
   29658/   17602 : 117C 0020 003E      		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
   29659/   17608 : 303C 00AC           		move.w	#$AC,d0
   29660/   1760C : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play boss damage sound
   29661/   17612 :                     
   29662/   17612 :                     Obj3D_ShipFlash:
   29663/   17612 : 43F8 FB22           		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
   29664/   17616 : 7000                		moveq	#0,d0		; move 0 (black) to d0
   29665/   17618 : 4A51                		tst.w	(a1)
   29666/   1761A : 6604                		bne.s	loc_1783C
   29667/   1761C : 303C 0EEE           		move.w	#$EEE,d0	; move 0EEE (white) to d0
   29668/   17620 :                     
   29669/   17620 :                     loc_1783C:
   29670/   17620 : 3280                		move.w	d0,(a1)		; load colour stored in	d0
   29671/   17622 : 5328 003E           		subq.b	#1,$3E(a0)
   29672/   17626 : 6606                		bne.s	locret_1784A
   29673/   17628 : 117C 000F 0020      		move.b	#$F,$20(a0)
   29674/   1762E :                     
   29675/   1762E :                     locret_1784A:
   29676/   1762E : 4E75                		rts	
   29677/   17630 :                     ; ===========================================================================
   29678/   17630 :                     
   29679/   17630 :                     loc_1784C:				; XREF: loc_177E6
   29680/   17630 : 7064                		moveq	#100,d0
   29681/   17632 : 6100 50B4           		bsr.w	AddPoints
   29682/   17636 : 117C 0008 0025      		move.b	#8,$25(a0)
   29683/   1763C : 317C 00B3 003C      		move.w	#$B3,$3C(a0)
   29684/   17642 : 4E75                		rts	
   29685/   17644 :                     
   29686/   17644 :                     ; ---------------------------------------------------------------------------
   29687/   17644 :                     ; Defeated boss	subroutine
   29688/   17644 :                     ; ---------------------------------------------------------------------------
   29689/   17644 :                     
   29690/   17644 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   29691/   17644 :                     
   29692/   17644 :                     
   29693/   17644 :                     BossDefeated:
   29694/   17644 : 1038 FE0F           		move.b	($FFFFFE0F).w,d0
   29695/   17648 : 0200 0007           		andi.b	#7,d0
   29696/   1764C : 6636                		bne.s	locret_178A2
   29697/   1764E : 4EB9 0000 D858      		jsr	SingleObjLoad
   29698/   17654 : 662E                		bne.s	locret_178A2
   29699/   17656 : 12BC 003F           		move.b	#$3F,0(a1)	; load explosion object
   29700/   1765A : 3368 0008 0008      		move.w	8(a0),8(a1)
   29701/   17660 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   29702/   17666 : 4EB9 0000 279A      		jsr	(RandomNumber).l
   29703/   1766C : 3200                		move.w	d0,d1
   29704/   1766E : 7200                		moveq	#0,d1
   29705/   17670 : 1200                		move.b	d0,d1
   29706/   17672 : E409                		lsr.b	#2,d1
   29707/   17674 : 0441 0020           		subi.w	#$20,d1
   29708/   17678 : D369 0008           		add.w	d1,8(a1)
   29709/   1767C : E048                		lsr.w	#8,d0
   29710/   1767E : E608                		lsr.b	#3,d0
   29711/   17680 : D169 000C           		add.w	d0,$C(a1)
   29712/   17684 :                     
   29713/   17684 :                     locret_178A2:
   29714/   17684 : 4E75                		rts	
   29715/   17686 :                     ; End of function BossDefeated
   29716/   17686 :                     
   29717/   17686 :                     ; ---------------------------------------------------------------------------
   29718/   17686 :                     ; Subroutine to	move a boss
   29719/   17686 :                     ; ---------------------------------------------------------------------------
   29720/   17686 :                     
   29721/   17686 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   29722/   17686 :                     
   29723/   17686 :                     
   29724/   17686 :                     BossMove:
   29725/   17686 : 2428 0030           		move.l	$30(a0),d2
   29726/   1768A : 2628 0038           		move.l	$38(a0),d3
   29727/   1768E : 3028 0010           		move.w	$10(a0),d0
   29728/   17692 : 48C0                		ext.l	d0
   29729/   17694 : E180                		asl.l	#8,d0
   29730/   17696 : D480                		add.l	d0,d2
   29731/   17698 : 3028 0012           		move.w	$12(a0),d0
   29732/   1769C : 48C0                		ext.l	d0
   29733/   1769E : E180                		asl.l	#8,d0
   29734/   176A0 : D680                		add.l	d0,d3
   29735/   176A2 : 2142 0030           		move.l	d2,$30(a0)
   29736/   176A6 : 2143 0038           		move.l	d3,$38(a0)
   29737/   176AA : 4E75                		rts	
   29738/   176AC :                     ; End of function BossMove
   29739/   176AC :                     
   29740/   176AC :                     ; ===========================================================================
   29741/   176AC :                     
   29742/   176AC :                     Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
   29743/   176AC : 317C FF00 0010      		move.w	#-$100,$10(a0)
   29744/   176B2 : 317C FFC0 0012      		move.w	#-$40,$12(a0)
   29745/   176B8 : 6100 FFCC           		bsr.w	BossMove
   29746/   176BC : 0C68 2A00 0030      		cmpi.w	#$2A00,$30(a0)
   29747/   176C2 : 6632                		bne.s	loc_17916
   29748/   176C4 : 317C 0000 0010      		move.w	#0,$10(a0)
   29749/   176CA : 317C 0000 0012      		move.w	#0,$12(a0)
   29750/   176D0 : 5428 0025           		addq.b	#2,$25(a0)
   29751/   176D4 : 4EB9 0000 D86E      		jsr	SingleObjLoad2
   29752/   176DA : 6614                		bne.s	loc_17910
   29753/   176DC : 12BC 0048           		move.b	#$48,0(a1)	; load swinging	ball object
   29754/   176E0 : 3368 0030 0008      		move.w	$30(a0),8(a1)
   29755/   176E6 : 3368 0038 000C      		move.w	$38(a0),$C(a1)
   29756/   176EC : 2348 0034           		move.l	a0,$34(a1)
   29757/   176F0 :                     
   29758/   176F0 :                     loc_17910:
   29759/   176F0 : 317C 0077 003C      		move.w	#$77,$3C(a0)
   29760/   176F6 :                     
   29761/   176F6 :                     loc_17916:
   29762/   176F6 : 6000 FED2           		bra.w	loc_177E6
   29763/   176FA :                     ; ===========================================================================
   29764/   176FA :                     
   29765/   176FA :                     Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
   29766/   176FA : 5368 003C           		subq.w	#1,$3C(a0)
   29767/   176FE : 6A24                		bpl.s	Obj3D_Reverse
   29768/   17700 : 5428 0025           		addq.b	#2,$25(a0)
   29769/   17704 : 317C 003F 003C      		move.w	#$3F,$3C(a0)
   29770/   1770A : 317C 0100 0010      		move.w	#$100,$10(a0)	; move the ship	sideways
   29771/   17710 : 0C68 2A00 0030      		cmpi.w	#$2A00,$30(a0)
   29772/   17716 : 660C                		bne.s	Obj3D_Reverse
   29773/   17718 : 317C 007F 003C      		move.w	#$7F,$3C(a0)
   29774/   1771E : 317C 0040 0010      		move.w	#$40,$10(a0)
   29775/   17724 :                     
   29776/   17724 :                     Obj3D_Reverse:
   29777/   17724 : 0828 0000 0022      		btst	#0,$22(a0)
   29778/   1772A : 6604                		bne.s	loc_17950
   29779/   1772C : 4468 0010           		neg.w	$10(a0)		; reverse direction of the ship
   29780/   17730 :                     
   29781/   17730 :                     loc_17950:
   29782/   17730 : 6000 FE98           		bra.w	loc_177E6
   29783/   17734 :                     ; ===========================================================================
   29784/   17734 :                     
   29785/   17734 :                     loc_17954:				; XREF: Obj3D_ShipIndex
   29786/   17734 : 5368 003C           		subq.w	#1,$3C(a0)
   29787/   17738 : 6B06                		bmi.s	loc_17960
   29788/   1773A : 6100 FF4A           		bsr.w	BossMove
   29789/   1773E : 6016                		bra.s	loc_17976
   29790/   17740 :                     ; ===========================================================================
   29791/   17740 :                     
   29792/   17740 :                     loc_17960:
   29793/   17740 : 0868 0000 0022      		bchg	#0,$22(a0)
   29794/   17746 : 317C 003F 003C      		move.w	#$3F,$3C(a0)
   29795/   1774C : 5528 0025           		subq.b	#2,$25(a0)
   29796/   17750 : 317C 0000 0010      		move.w	#0,$10(a0)
   29797/   17756 :                     
   29798/   17756 :                     loc_17976:
   29799/   17756 : 6000 FE72           		bra.w	loc_177E6
   29800/   1775A :                     ; ===========================================================================
   29801/   1775A :                     
   29802/   1775A :                     loc_1797A:				; XREF: Obj3D_ShipIndex
   29803/   1775A : 5368 003C           		subq.w	#1,$3C(a0)
   29804/   1775E : 6B04                		bmi.s	loc_17984
   29805/   17760 : 6000 FEE2           		bra.w	BossDefeated
   29806/   17764 :                     ; ===========================================================================
   29807/   17764 :                     
   29808/   17764 :                     loc_17984:
   29809/   17764 : 08E8 0000 0022      		bset	#0,$22(a0)
   29810/   1776A : 08A8 0007 0022      		bclr	#7,$22(a0)
   29811/   17770 : 4268 0010           		clr.w	$10(a0)
   29812/   17774 : 5428 0025           		addq.b	#2,$25(a0)
   29813/   17778 : 317C FFDA 003C      		move.w	#-$26,$3C(a0)
   29814/   1777E : 4A38 F7A7           		tst.b	($FFFFF7A7).w
   29815/   17782 : 6606                		bne.s	locret_179AA
   29816/   17784 : 11FC 0001 F7A7      		move.b	#1,($FFFFF7A7).w
   29817/   1778A :                     
   29818/   1778A :                     locret_179AA:
   29819/   1778A : 4E75                		rts	
   29820/   1778C :                     ; ===========================================================================
   29821/   1778C :                     
   29822/   1778C :                     loc_179AC:				; XREF: Obj3D_ShipIndex
   29823/   1778C : 5268 003C           		addq.w	#1,$3C(a0)
   29824/   17790 : 670A                		beq.s	loc_179BC
   29825/   17792 : 6A0E                		bpl.s	loc_179C2
   29826/   17794 : 0668 0018 0012      		addi.w	#$18,$12(a0)
   29827/   1779A : 6032                		bra.s	loc_179EE
   29828/   1779C :                     ; ===========================================================================
   29829/   1779C :                     
   29830/   1779C :                     loc_179BC:
   29831/   1779C : 4268 0012           		clr.w	$12(a0)
   29832/   177A0 : 602C                		bra.s	loc_179EE
   29833/   177A2 :                     ; ===========================================================================
   29834/   177A2 :                     
   29835/   177A2 :                     loc_179C2:
   29836/   177A2 : 0C68 0030 003C      		cmpi.w	#$30,$3C(a0)
   29837/   177A8 : 6510                		bcs.s	loc_179DA
   29838/   177AA : 6714                		beq.s	loc_179E0
   29839/   177AC : 0C68 0038 003C      		cmpi.w	#$38,$3C(a0)
   29840/   177B2 : 651A                		bcs.s	loc_179EE
   29841/   177B4 : 5428 0025           		addq.b	#2,$25(a0)
   29842/   177B8 : 6014                		bra.s	loc_179EE
   29843/   177BA :                     ; ===========================================================================
   29844/   177BA :                     
   29845/   177BA :                     loc_179DA:
   29846/   177BA : 5168 0012           		subq.w	#8,$12(a0)
   29847/   177BE : 600E                		bra.s	loc_179EE
   29848/   177C0 :                     ; ===========================================================================
   29849/   177C0 :                     
   29850/   177C0 :                     loc_179E0:
   29851/   177C0 : 4268 0012           		clr.w	$12(a0)
   29852/   177C4 : 303C 0081           		move.w	#$81,d0
   29853/   177C8 : 4EB9 0000 117C      		jsr	(PlaySound).l	; play GHZ music
   29854/   177CE :                     
   29855/   177CE :                     loc_179EE:
   29856/   177CE : 6100 FEB6           		bsr.w	BossMove
   29857/   177D2 : 6000 FDF6           		bra.w	loc_177E6
   29858/   177D6 :                     ; ===========================================================================
   29859/   177D6 :                     
   29860/   177D6 :                     loc_179F6:				; XREF: Obj3D_ShipIndex
   29861/   177D6 : 317C 0400 0010      		move.w	#$400,$10(a0)
   29862/   177DC : 317C FFC0 0012      		move.w	#-$40,$12(a0)
   29863/   177E2 : 0C78 2AC0 F72A      		cmpi.w	#$2AC0,($FFFFF72A).w
   29864/   177E8 : 6706                		beq.s	loc_17A10
   29865/   177EA : 5478 F72A           		addq.w	#2,($FFFFF72A).w
   29866/   177EE : 6006                		bra.s	loc_17A16
   29867/   177F0 :                     ; ===========================================================================
   29868/   177F0 :                     
   29869/   177F0 :                     loc_17A10:
   29870/   177F0 : 4A28 0001           		tst.b	1(a0)
   29871/   177F4 : 6A08                		bpl.s	Obj3D_ShipDel
   29872/   177F6 :                     
   29873/   177F6 :                     loc_17A16:
   29874/   177F6 : 6100 FE8E           		bsr.w	BossMove
   29875/   177FA : 6000 FDCE           		bra.w	loc_177E6
   29876/   177FE :                     ; ===========================================================================
   29877/   177FE :                     
   29878/   177FE :                     Obj3D_ShipDel:
   29879/   177FE : 4EF9 0000 D40E      		jmp	DeleteObject
   29880/   17804 :                     ; ===========================================================================
   29881/   17804 :                     
   29882/   17804 :                     Obj3D_FaceMain:				; XREF: Obj3D_Index
   29883/   17804 : 7000                		moveq	#0,d0
   29884/   17806 : 7201                		moveq	#1,d1
   29885/   17808 : 2268 0034           		movea.l	$34(a0),a1
   29886/   1780C : 1029 0025           		move.b	$25(a1),d0
   29887/   17810 : 5900                		subq.b	#4,d0
   29888/   17812 : 660A                		bne.s	loc_17A3E
   29889/   17814 : 0C69 2A00 0030      		cmpi.w	#$2A00,$30(a1)
   29890/   1781A : 660A                		bne.s	loc_17A46
   29891/   1781C : 7204                		moveq	#4,d1
   29892/   1781E :                     
   29893/   1781E :                     loc_17A3E:
   29894/   1781E : 5D00                		subq.b	#6,d0
   29895/   17820 : 6B04                		bmi.s	loc_17A46
   29896/   17822 : 720A                		moveq	#$A,d1
   29897/   17824 : 6014                		bra.s	loc_17A5A
   29898/   17826 :                     ; ===========================================================================
   29899/   17826 :                     
   29900/   17826 :                     loc_17A46:
   29901/   17826 : 4A29 0020           		tst.b	$20(a1)
   29902/   1782A : 6604                		bne.s	loc_17A50
   29903/   1782C : 7205                		moveq	#5,d1
   29904/   1782E : 600A                		bra.s	loc_17A5A
   29905/   17830 :                     ; ===========================================================================
   29906/   17830 :                     
   29907/   17830 :                     loc_17A50:
   29908/   17830 : 0C38 0004 D024      		cmpi.b	#4,($FFFFD024).w
   29909/   17836 : 6502                		bcs.s	loc_17A5A
   29910/   17838 : 7204                		moveq	#4,d1
   29911/   1783A :                     
   29912/   1783A :                     loc_17A5A:
   29913/   1783A : 1141 001C           		move.b	d1,$1C(a0)
   29914/   1783E : 5500                		subq.b	#2,d0
   29915/   17840 : 660C                		bne.s	Obj3D_FaceDisp
   29916/   17842 : 117C 0006 001C      		move.b	#6,$1C(a0)
   29917/   17848 : 4A28 0001           		tst.b	1(a0)
   29918/   1784C : 6A02                		bpl.s	Obj3D_FaceDel
   29919/   1784E :                     
   29920/   1784E :                     Obj3D_FaceDisp:
   29921/   1784E : 603A                		bra.s	Obj3D_Display
   29922/   17850 :                     ; ===========================================================================
   29923/   17850 :                     
   29924/   17850 :                     Obj3D_FaceDel:
   29925/   17850 : 4EF9 0000 D40E      		jmp	DeleteObject
   29926/   17856 :                     ; ===========================================================================
   29927/   17856 :                     
   29928/   17856 :                     Obj3D_FlameMain:			; XREF: Obj3D_Index
   29929/   17856 : 117C 0007 001C      		move.b	#7,$1C(a0)
   29930/   1785C : 2268 0034           		movea.l	$34(a0),a1
   29931/   17860 : 0C29 000C 0025      		cmpi.b	#$C,$25(a1)
   29932/   17866 : 660E                		bne.s	loc_17A96
   29933/   17868 : 117C 000B 001C      		move.b	#$B,$1C(a0)
   29934/   1786E : 4A28 0001           		tst.b	1(a0)
   29935/   17872 : 6A10                		bpl.s	Obj3D_FlameDel
   29936/   17874 : 600C                		bra.s	Obj3D_FlameDisp
   29937/   17876 :                     ; ===========================================================================
   29938/   17876 :                     
   29939/   17876 :                     loc_17A96:
   29940/   17876 : 3029 0010           		move.w	$10(a1),d0
   29941/   1787A : 6706                		beq.s	Obj3D_FlameDisp
   29942/   1787C : 117C 0008 001C      		move.b	#8,$1C(a0)
   29943/   17882 :                     
   29944/   17882 :                     Obj3D_FlameDisp:
   29945/   17882 : 6006                		bra.s	Obj3D_Display
   29946/   17884 :                     ; ===========================================================================
   29947/   17884 :                     
   29948/   17884 :                     Obj3D_FlameDel:
   29949/   17884 : 4EF9 0000 D40E      		jmp	DeleteObject
   29950/   1788A :                     ; ===========================================================================
   29951/   1788A :                     
   29952/   1788A :                     Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
   29953/   1788A : 2268 0034           		movea.l	$34(a0),a1
   29954/   1788E : 3169 0008 0008      		move.w	8(a1),8(a0)
   29955/   17894 : 3169 000C 000C      		move.w	$C(a1),$C(a0)
   29956/   1789A : 1169 0022 0022      		move.b	$22(a1),$22(a0)
   29957/   178A0 : 43F9 0001 7A96      		lea	(Ani_Eggman).l,a1
   29958/   178A6 : 4EB9 0000 A4FE      		jsr	AnimateSprite
   29959/   178AC : 1028 0022           		move.b	$22(a0),d0
   29960/   178B0 : 0200 0003           		andi.b	#3,d0
   29961/   178B4 : 0228 00FC 0001      		andi.b	#$FC,1(a0)
   29962/   178BA : 8128 0001           		or.b	d0,1(a0)
   29963/   178BE : 4EF9 0000 D3D2      		jmp	DisplaySprite
   29964/   178C4 :                     ; ===========================================================================
   29965/   178C4 :                     ; ---------------------------------------------------------------------------
   29966/   178C4 :                     ; Object 48 - ball on a	chain that Eggman swings (GHZ)
   29967/   178C4 :                     ; ---------------------------------------------------------------------------
   29968/   178C4 :                     
   29969/   178C4 :                     Obj48:					; XREF: Obj_Index
   29970/   178C4 : 7000                		moveq	#0,d0
   29971/   178C6 : 1028 0024           		move.b	$24(a0),d0
   29972/   178CA : 323B 0006           		move.w	Obj48_Index(pc,d0.w),d1
   29973/   178CE : 4EFB 1002           		jmp	Obj48_Index(pc,d1.w)
   29974/   178D2 :                     ; ===========================================================================
   29975/   178D2 : 000A                Obj48_Index:	dc.w Obj48_Main-Obj48_Index
   29976/   178D4 : 00C4                		dc.w Obj48_Base-Obj48_Index
   29977/   178D6 : 0126                		dc.w Obj48_Display2-Obj48_Index
   29978/   178D8 : 0172                		dc.w loc_17C68-Obj48_Index
   29979/   178DA : 018C                		dc.w Obj48_ChkVanish-Obj48_Index
   29980/   178DC :                     ; ===========================================================================
   29981/   178DC :                     
   29982/   178DC :                     Obj48_Main:				; XREF: Obj48_Index
   29983/   178DC : 5428 0024           		addq.b	#2,$24(a0)
   29984/   178E0 : 317C 4080 0026      		move.w	#$4080,$26(a0)
   29985/   178E6 : 317C FE00 003E      		move.w	#-$200,$3E(a0)
   29986/   178EC : 217C 0001 7BAE      		move.l	#Map_BossItems,4(a0)
            178F2 : 0004             
   29987/   178F4 : 317C 046C 0002      		move.w	#$46C,2(a0)
   29988/   178FA : 45E8 0028           		lea	$28(a0),a2
   29989/   178FE : 14FC 0000           		move.b	#0,(a2)+
   29990/   17902 : 7205                		moveq	#5,d1
   29991/   17904 : 2248                		movea.l	a0,a1
   29992/   17906 : 6036                		bra.s	loc_17B60
   29993/   17908 :                     ; ===========================================================================
   29994/   17908 :                     
   29995/   17908 :                     Obj48_MakeLinks:
   29996/   17908 : 4EB9 0000 D86E      		jsr	SingleObjLoad2
   29997/   1790E : 6658                		bne.s	Obj48_MakeBall
   29998/   17910 : 3368 0008 0008      		move.w	8(a0),8(a1)
   29999/   17916 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   30000/   1791C : 12BC 0048           		move.b	#$48,0(a1)	; load chain link object
   30001/   17920 : 137C 0006 0024      		move.b	#6,$24(a1)
   30002/   17926 : 237C 0000 7A54      		move.l	#Map_obj15,4(a1)
            1792C : 0004             
   30003/   1792E : 337C 0380 0002      		move.w	#$380,2(a1)
   30004/   17934 : 137C 0001 001A      		move.b	#1,$1A(a1)
   30005/   1793A : 5228 0028           		addq.b	#1,$28(a0)
   30006/   1793E :                     
   30007/   1793E :                     loc_17B60:				; XREF: Obj48_Main
   30008/   1793E : 3A09                		move.w	a1,d5
   30009/   17940 : 0445 D000           		subi.w	#$D000,d5
   30010/   17944 : EC4D                		lsr.w	#6,d5
   30011/   17946 : 0245 007F           		andi.w	#$7F,d5
   30012/   1794A : 14C5                		move.b	d5,(a2)+
   30013/   1794C : 137C 0004 0001      		move.b	#4,1(a1)
   30014/   17952 : 137C 0008 0019      		move.b	#8,$19(a1)
   30015/   17958 : 137C 0006 0018      		move.b	#6,$18(a1)
   30016/   1795E : 2368 0034 0034      		move.l	$34(a0),$34(a1)
   30017/   17964 : 51C9 FFA2           		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
   30018/   17968 :                     
   30019/   17968 :                     Obj48_MakeBall:
   30020/   17968 : 137C 0008 0024      		move.b	#8,$24(a1)
   30021/   1796E : 237C 0000 7FB2      		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
            17974 : 0004             
   30022/   17976 : 337C 43AA 0002      		move.w	#$43AA,2(a1)	; use different	graphics
   30023/   1797C : 137C 0001 001A      		move.b	#1,$1A(a1)
   30024/   17982 : 137C 0005 0018      		move.b	#5,$18(a1)
   30025/   17988 : 137C 0081 0020      		move.b	#$81,$20(a1)	; make object hurt Sonic
   30026/   1798E : 4E75                		rts	
   30027/   17990 :                     ; ===========================================================================
   30028/   17990 :                     
   30029/   17990 : 0010 2030 4060      Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
   30030/   17996 :                     
   30031/   17996 :                     ; ===========================================================================
   30032/   17996 :                     
   30033/   17996 :                     Obj48_Base:				; XREF: Obj48_Index
   30034/   17996 : 47F9 0001 7990      		lea	(Obj48_PosData).l,a3
   30035/   1799C : 45E8 0028           		lea	$28(a0),a2
   30036/   179A0 : 7C00                		moveq	#0,d6
   30037/   179A2 : 1C1A                		move.b	(a2)+,d6
   30038/   179A4 :                     
   30039/   179A4 :                     loc_17BC6:
   30040/   179A4 : 7800                		moveq	#0,d4
   30041/   179A6 : 181A                		move.b	(a2)+,d4
   30042/   179A8 : ED4C                		lsl.w	#6,d4
   30043/   179AA : 0684 00FF D000      		addi.l	#$FFD000,d4
   30044/   179B0 : 2244                		movea.l	d4,a1
   30045/   179B2 : 101B                		move.b	(a3)+,d0
   30046/   179B4 : B029 003C           		cmp.b	$3C(a1),d0
   30047/   179B8 : 6704                		beq.s	loc_17BE0
   30048/   179BA : 5229 003C           		addq.b	#1,$3C(a1)
   30049/   179BE :                     
   30050/   179BE :                     loc_17BE0:
   30051/   179BE : 51CE FFE4           		dbf	d6,loc_17BC6
   30052/   179C2 :                     
   30053/   179C2 : B029 003C           		cmp.b	$3C(a1),d0
   30054/   179C6 : 6610                		bne.s	loc_17BFA
   30055/   179C8 : 2268 0034           		movea.l	$34(a0),a1
   30056/   179CC : 0C29 0006 0025      		cmpi.b	#6,$25(a1)
   30057/   179D2 : 6604                		bne.s	loc_17BFA
   30058/   179D4 : 5428 0024           		addq.b	#2,$24(a0)
   30059/   179D8 :                     
   30060/   179D8 :                     loc_17BFA:
   30061/   179D8 : 0C68 0020 0032      		cmpi.w	#$20,$32(a0)
   30062/   179DE : 6704                		beq.s	Obj48_Display
   30063/   179E0 : 5268 0032           		addq.w	#1,$32(a0)
   30064/   179E4 :                     
   30065/   179E4 :                     Obj48_Display:
   30066/   179E4 : 6100 0022           		bsr.w	sub_17C2A
   30067/   179E8 : 1028 0026           		move.b	$26(a0),d0
   30068/   179EC : 4EB9 0000 79C6      		jsr	(Obj15_Move2).l
   30069/   179F2 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   30070/   179F8 :                     ; ===========================================================================
   30071/   179F8 :                     
   30072/   179F8 :                     Obj48_Display2:				; XREF: Obj48_Index
   30073/   179F8 : 6100 000E           		bsr.w	sub_17C2A
   30074/   179FC : 4EB9 0000 7986      		jsr	(Obj48_Move).l
   30075/   17A02 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   30076/   17A08 :                     
   30077/   17A08 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   30078/   17A08 :                     
   30079/   17A08 :                     
   30080/   17A08 :                     sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
   30081/   17A08 : 2268 0034           		movea.l	$34(a0),a1
   30082/   17A0C : 0628 0020 001B      		addi.b	#$20,$1B(a0)
   30083/   17A12 : 6406                		bcc.s	loc_17C3C
   30084/   17A14 : 0868 0000 001A      		bchg	#0,$1A(a0)
   30085/   17A1A :                     
   30086/   17A1A :                     loc_17C3C:
   30087/   17A1A : 3169 0008 003A      		move.w	8(a1),$3A(a0)
   30088/   17A20 : 3029 000C           		move.w	$C(a1),d0
   30089/   17A24 : D068 0032           		add.w	$32(a0),d0
   30090/   17A28 : 3140 0038           		move.w	d0,$38(a0)
   30091/   17A2C : 1169 0022 0022      		move.b	$22(a1),$22(a0)
   30092/   17A32 : 4A29 0022           		tst.b	$22(a1)
   30093/   17A36 : 6A0A                		bpl.s	locret_17C66
   30094/   17A38 : 10BC 003F           		move.b	#$3F,0(a0)
   30095/   17A3C : 117C 0000 0024      		move.b	#0,$24(a0)
   30096/   17A42 :                     
   30097/   17A42 :                     locret_17C66:
   30098/   17A42 : 4E75                		rts	
   30099/   17A44 :                     ; End of function sub_17C2A
   30100/   17A44 :                     
   30101/   17A44 :                     ; ===========================================================================
   30102/   17A44 :                     
   30103/   17A44 :                     loc_17C68:				; XREF: Obj48_Index
   30104/   17A44 : 2268 0034           		movea.l	$34(a0),a1
   30105/   17A48 : 4A29 0022           		tst.b	$22(a1)
   30106/   17A4C : 6A0A                		bpl.s	Obj48_Display3
   30107/   17A4E : 10BC 003F           		move.b	#$3F,0(a0)
   30108/   17A52 : 117C 0000 0024      		move.b	#0,$24(a0)
   30109/   17A58 :                     
   30110/   17A58 :                     Obj48_Display3:
   30111/   17A58 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   30112/   17A5E :                     ; ===========================================================================
   30113/   17A5E :                     
   30114/   17A5E :                     Obj48_ChkVanish:			; XREF: Obj48_Index
   30115/   17A5E : 7000                		moveq	#0,d0
   30116/   17A60 : 4A28 001A           		tst.b	$1A(a0)
   30117/   17A64 : 6602                		bne.s	Obj48_Vanish
   30118/   17A66 : 5200                		addq.b	#1,d0
   30119/   17A68 :                     
   30120/   17A68 :                     Obj48_Vanish:
   30121/   17A68 : 1140 001A           		move.b	d0,$1A(a0)
   30122/   17A6C : 2268 0034           		movea.l	$34(a0),a1
   30123/   17A70 : 4A29 0022           		tst.b	$22(a1)
   30124/   17A74 : 6A1A                		bpl.s	Obj48_Display4
   30125/   17A76 : 117C 0000 0020      		move.b	#0,$20(a0)
   30126/   17A7C : 6100 FBC6           		bsr.w	BossDefeated
   30127/   17A80 : 5328 003C           		subq.b	#1,$3C(a0)
   30128/   17A84 : 6A0A                		bpl.s	Obj48_Display4
   30129/   17A86 : 10BC 003F           		move.b	#$3F,(a0)
   30130/   17A8A : 117C 0000 0024      		move.b	#0,$24(a0)
   30131/   17A90 :                     
   30132/   17A90 :                     Obj48_Display4:
   30133/   17A90 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   30134/   17A96 :                     ; ===========================================================================
   30135/   17A96 :                     Ani_Eggman:
   30136/   17A96 :                     	include "_animations/Eggman.asm"
(1)    1/   17A96 :                     ; ---------------------------------------------------------------------------
(1)    2/   17A96 :                     ; Animation script - Eggman (bosses)
(1)    3/   17A96 :                     ; ---------------------------------------------------------------------------
(1)    4/   17A96 : 0018                		dc.w byte_17CD4-Ani_Eggman
(1)    5/   17A98 : 001C                		dc.w byte_17CD8-Ani_Eggman
(1)    6/   17A9A : 0020                		dc.w byte_17CDC-Ani_Eggman
(1)    7/   17A9C : 0024                		dc.w byte_17CE0-Ani_Eggman
(1)    8/   17A9E : 0028                		dc.w byte_17CE4-Ani_Eggman
(1)    9/   17AA0 : 002C                		dc.w byte_17CE8-Ani_Eggman
(1)   10/   17AA2 : 0030                		dc.w byte_17CEC-Ani_Eggman
(1)   11/   17AA4 : 0034                		dc.w byte_17CF0-Ani_Eggman
(1)   12/   17AA6 : 0038                		dc.w byte_17CF4-Ani_Eggman
(1)   13/   17AA8 : 003C                		dc.w byte_17CF8-Ani_Eggman
(1)   14/   17AAA : 0040                		dc.w byte_17CFC-Ani_Eggman
(1)   15/   17AAC : 0044                		dc.w byte_17D00-Ani_Eggman
(1)   16/   17AAE : 0F00 FF00           byte_17CD4:	dc.b $F, 0, $FF, 0
(1)   17/   17AB2 : 0501 02FF           byte_17CD8:	dc.b 5,	1, 2, $FF
(1)   18/   17AB6 : 0301 02FF           byte_17CDC:	dc.b 3,	1, 2, $FF
(1)   19/   17ABA : 0101 02FF           byte_17CE0:	dc.b 1,	1, 2, $FF
(1)   20/   17ABE : 0403 04FF           byte_17CE4:	dc.b 4,	3, 4, $FF
(1)   21/   17AC2 : 1F05 01FF           byte_17CE8:	dc.b $1F, 5, 1,	$FF
(1)   22/   17AC6 : 0306 01FF           byte_17CEC:	dc.b 3,	6, 1, $FF
(1)   23/   17ACA : 0F0A FF00           byte_17CF0:	dc.b $F, $A, $FF, 0
(1)   24/   17ACE : 0308 09FF           byte_17CF4:	dc.b 3,	8, 9, $FF
(1)   25/   17AD2 : 0108 09FF           byte_17CF8:	dc.b 1,	8, 9, $FF
(1)   26/   17AD6 : 0F07 FF00           byte_17CFC:	dc.b $F, 7, $FF, 0
(1)   27/   17ADA : 0209 080B 0C0B      byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
            17AE0 : 0C09 08FE 0200    
(1)   28/   17AE6 : (MACRO)              		even
   30137/   17AE6 :                     
   30138/   17AE6 :                     ; ---------------------------------------------------------------------------
   30139/   17AE6 :                     ; Sprite mappings - Eggman (boss levels)
   30140/   17AE6 :                     ; ---------------------------------------------------------------------------
   30141/   17AE6 :                     Map_Eggman:
   30142/   17AE6 :                     	include "_mappings/Eggman.asm"
(1)    1/   17AE6 :                     ; ---------------------------------------------------------------------------
(1)    2/   17AE6 :                     ; Sprite mappings - Eggman (boss levels)
(1)    3/   17AE6 :                     ; ---------------------------------------------------------------------------
(1)    4/   17AE6 : 001A 0039           		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
(1)    5/   17AEA : 0044 004F           		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
(1)    6/   17AEE : 005F 006F           		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
(1)    7/   17AF2 : 007F 008F           		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
(1)    8/   17AF6 : 00A4 00AA           		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
(1)    9/   17AFA : 00B0 00B1           		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
(1)   10/   17AFE : 00BC                		dc.w byte_17DC8-Map_Eggman
(1)   11/   17B00 : 06                  byte_17D26:	dc.b 6
(1)   12/   17B01 : EC01 000A E4        		dc.b $EC, 1, 0,	$A, $E4
(1)   13/   17B06 : EC05 000C 0C        		dc.b $EC, 5, 0,	$C, $C
(1)   14/   17B0B : FC0E 2010 E4        		dc.b $FC, $E, $20, $10,	$E4
(1)   15/   17B10 : FC0E 201C 04        		dc.b $FC, $E, $20, $1C,	4
(1)   16/   17B15 : 140C 2028 EC        		dc.b $14, $C, $20, $28,	$EC
(1)   17/   17B1A : 1400 202C 0C        		dc.b $14, 0, $20, $2C, $C
(1)   18/   17B1F : 02                  byte_17D45:	dc.b 2
(1)   19/   17B20 : E404 0000 F4        		dc.b $E4, 4, 0,	0, $F4
(1)   20/   17B25 : EC0D 0002 EC        		dc.b $EC, $D, 0, 2, $EC
(1)   21/   17B2A : 02                  byte_17D50:	dc.b 2
(1)   22/   17B2B : E404 0000 F4        		dc.b $E4, 4, 0,	0, $F4
(1)   23/   17B30 : EC0D 0035 EC        		dc.b $EC, $D, 0, $35, $EC
(1)   24/   17B35 : 03                  byte_17D5B:	dc.b 3
(1)   25/   17B36 : E408 003D F4        		dc.b $E4, 8, 0,	$3D, $F4
(1)   26/   17B3B : EC09 0040 EC        		dc.b $EC, 9, 0,	$40, $EC
(1)   27/   17B40 : EC05 0046 04        		dc.b $EC, 5, 0,	$46, 4
(1)   28/   17B45 : 03                  byte_17D6B:	dc.b 3
(1)   29/   17B46 : E408 004A F4        		dc.b $E4, 8, 0,	$4A, $F4
(1)   30/   17B4B : EC09 004D EC        		dc.b $EC, 9, 0,	$4D, $EC
(1)   31/   17B50 : EC05 0053 04        		dc.b $EC, 5, 0,	$53, 4
(1)   32/   17B55 : 03                  byte_17D7B:	dc.b 3
(1)   33/   17B56 : E408 0057 F4        		dc.b $E4, 8, 0,	$57, $F4
(1)   34/   17B5B : EC09 005A EC        		dc.b $EC, 9, 0,	$5A, $EC
(1)   35/   17B60 : EC05 0060 04        		dc.b $EC, 5, 0,	$60, 4
(1)   36/   17B65 : 03                  byte_17D8B:	dc.b 3
(1)   37/   17B66 : E404 0064 04        		dc.b $E4, 4, 0,	$64, 4
(1)   38/   17B6B : E404 0000 F4        		dc.b $E4, 4, 0,	0, $F4
(1)   39/   17B70 : EC0D 0035 EC        		dc.b $EC, $D, 0, $35, $EC
(1)   40/   17B75 : 04                  byte_17D9B:	dc.b 4
(1)   41/   17B76 : E409 0066 F4        		dc.b $E4, 9, 0,	$66, $F4
(1)   42/   17B7B : E408 0057 F4        		dc.b $E4, 8, 0,	$57, $F4
(1)   43/   17B80 : EC09 005A EC        		dc.b $EC, 9, 0,	$5A, $EC
(1)   44/   17B85 : EC05 0060 04        		dc.b $EC, 5, 0,	$60, 4
(1)   45/   17B8A : 01                  byte_17DB0:	dc.b 1
(1)   46/   17B8B : 0405 002D 22        		dc.b 4,	5, 0, $2D, $22
(1)   47/   17B90 : 01                  byte_17DB6:	dc.b 1
(1)   48/   17B91 : 0405 0031 22        		dc.b 4,	5, 0, $31, $22
(1)   49/   17B96 : 00                  byte_17DBC:	dc.b 0
(1)   50/   17B97 : 02                  byte_17DBD:	dc.b 2
(1)   51/   17B98 : 0008 012A 22        		dc.b 0,	8, 1, $2A, $22
(1)   52/   17B9D : 0808 112A 22        		dc.b 8,	8, $11,	$2A, $22
(1)   53/   17BA2 : 02                  byte_17DC8:	dc.b 2
(1)   54/   17BA3 : F80B 012D 22        		dc.b $F8, $B, 1, $2D, $22
(1)   55/   17BA8 : 0001 0139 3A        		dc.b 0,	1, 1, $39, $3A
(1)   56/   17BAD : (MACRO)              		even
(1)   56/   17BAD : 00                                          dc.b 0 ;ds.b 1 
   30143/   17BAE :                     
   30144/   17BAE :                     ; ---------------------------------------------------------------------------
   30145/   17BAE :                     ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
   30146/   17BAE :                     ; ---------------------------------------------------------------------------
   30147/   17BAE :                     Map_BossItems:
   30148/   17BAE :                     	include "_mappings/Boss items.asm"
(1)    1/   17BAE :                     ; ---------------------------------------------------------------------------
(1)    2/   17BAE :                     ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
(1)    3/   17BAE :                     ; ---------------------------------------------------------------------------
(1)    4/   17BAE : 0010 0016           		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
(1)    5/   17BB2 : 0022 0028           		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
(1)    6/   17BB6 : 002E 0034           		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
(1)    7/   17BBA : 004A 0056           		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
(1)    8/   17BBE : 01                  byte_17DE4:	dc.b 1
(1)    9/   17BBF : F805 0000 F8        		dc.b $F8, 5, 0,	0, $F8
(1)   10/   17BC4 : 02                  byte_17DEA:	dc.b 2
(1)   11/   17BC5 : FC04 0004 F8        		dc.b $FC, 4, 0,	4, $F8
(1)   12/   17BCA : F805 0000 F8        		dc.b $F8, 5, 0,	0, $F8
(1)   13/   17BCF : 00                  		dc.b 0
(1)   14/   17BD0 : 01                  byte_17DF6:	dc.b 1
(1)   15/   17BD1 : FC00 0006 FC        		dc.b $FC, 0, 0,	6, $FC
(1)   16/   17BD6 : 01                  byte_17DFC:	dc.b 1
(1)   17/   17BD7 : 1409 0007 F4        		dc.b $14, 9, 0,	7, $F4
(1)   18/   17BDC : 01                  byte_17E02:	dc.b 1
(1)   19/   17BDD : 1405 000D F8        		dc.b $14, 5, 0,	$D, $F8
(1)   20/   17BE2 : 04                  byte_17E08:	dc.b 4
(1)   21/   17BE3 : F004 0011 F8        		dc.b $F0, 4, 0,	$11, $F8
(1)   22/   17BE8 : F801 0013 F8        		dc.b $F8, 1, 0,	$13, $F8
(1)   23/   17BED : F801 0813 00        		dc.b $F8, 1, 8,	$13, 0
(1)   24/   17BF2 : 0804 0015 F8        		dc.b 8,	4, 0, $15, $F8
(1)   25/   17BF7 : 00                  		dc.b 0
(1)   26/   17BF8 : 02                  byte_17E1E:	dc.b 2
(1)   27/   17BF9 : 0005 0017 00        		dc.b 0,	5, 0, $17, 0
(1)   28/   17BFE : 0000 001B 10        		dc.b 0,	0, 0, $1B, $10
(1)   29/   17C03 : 00                  		dc.b 0
(1)   30/   17C04 : 02                  byte_17E2A:	dc.b 2
(1)   31/   17C05 : 1804 001C 00        		dc.b $18, 4, 0,	$1C, 0
(1)   32/   17C0A : 000B 001E 10        		dc.b 0,	$B, 0, $1E, $10
(1)   33/   17C0F : (MACRO)              		even
(1)   33/   17C0F : 00                                          dc.b 0 ;ds.b 1 
   30149/   17C10 :                     
   30150/   17C10 :                     ; ===========================================================================
   30151/   17C10 :                     ; ---------------------------------------------------------------------------
   30152/   17C10 :                     ; Object 77 - Eggman (LZ)
   30153/   17C10 :                     ; ---------------------------------------------------------------------------
   30154/   17C10 :                     
   30155/   17C10 :                     Obj77:					; XREF: Obj_Index
   30156/   17C10 : 7000                		moveq	#0,d0
   30157/   17C12 : 1028 0024           		move.b	$24(a0),d0
   30158/   17C16 : 323B 0006           		move.w	Obj77_Index(pc,d0.w),d1
   30159/   17C1A : 4EFB 1002           		jmp	Obj77_Index(pc,d1.w)
   30160/   17C1E :                     ; ===========================================================================
   30161/   17C1E : 000E                Obj77_Index:	dc.w Obj77_Main-Obj77_Index
   30162/   17C20 : 0094                		dc.w Obj77_ShipMain-Obj77_Index
   30163/   17C22 : 032A                		dc.w Obj77_FaceMain-Obj77_Index
   30164/   17C24 : 0378                		dc.w Obj77_FlameMain-Obj77_Index
   30165/   17C26 :                     
   30166/   17C26 : 0200                Obj77_ObjData:	dc.b 2,	0		; routine number, animation
   30167/   17C28 : 0401                		dc.b 4,	1
   30168/   17C2A : 0607                		dc.b 6,	7
   30169/   17C2C :                     ; ===========================================================================
   30170/   17C2C :                     
   30171/   17C2C :                     Obj77_Main:				; XREF: Obj77_Index
   30172/   17C2C : 317C 1E10 0008      		move.w	#$1E10,8(a0)
   30173/   17C32 : 317C 05C0 000C      		move.w	#$5C0,$C(a0)
   30174/   17C38 : 3168 0008 0030      		move.w	8(a0),$30(a0)
   30175/   17C3E : 3168 000C 0038      		move.w	$C(a0),$38(a0)
   30176/   17C44 : 117C 000F 0020      		move.b	#$F,$20(a0)
   30177/   17C4A : 117C 0008 0021      		move.b	#8,$21(a0)	; set number of	hits to	8
   30178/   17C50 : 117C 0004 0018      		move.b	#4,$18(a0)
   30179/   17C56 : 45FA FFCE           		lea	Obj77_ObjData(pc),a2
   30180/   17C5A : 2248                		movea.l	a0,a1
   30181/   17C5C : 7202                		moveq	#2,d1
   30182/   17C5E : 6018                		bra.s	Obj77_LoadBoss
   30183/   17C60 :                     ; ===========================================================================
   30184/   17C60 :                     
   30185/   17C60 :                     Obj77_Loop:
   30186/   17C60 : 4EB9 0000 D86E      		jsr	SingleObjLoad2
   30187/   17C66 : 664A                		bne.s	Obj77_ShipMain
   30188/   17C68 : 12BC 0077           		move.b	#$77,0(a1)
   30189/   17C6C : 3368 0008 0008      		move.w	8(a0),8(a1)
   30190/   17C72 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   30191/   17C78 :                     
   30192/   17C78 :                     Obj77_LoadBoss:				; XREF: Obj77_Main
   30193/   17C78 : 08A8 0000 0022      		bclr	#0,$22(a0)
   30194/   17C7E : 4229 0025           		clr.b	$25(a1)
   30195/   17C82 : 135A 0024           		move.b	(a2)+,$24(a1)
   30196/   17C86 : 135A 001C           		move.b	(a2)+,$1C(a1)
   30197/   17C8A : 1368 0018 0018      		move.b	$18(a0),$18(a1)
   30198/   17C90 : 237C 0001 7AE6      		move.l	#Map_Eggman,4(a1)
            17C96 : 0004             
   30199/   17C98 : 337C 0400 0002      		move.w	#$400,2(a1)
   30200/   17C9E : 137C 0004 0001      		move.b	#4,1(a1)
   30201/   17CA4 : 137C 0020 0019      		move.b	#$20,$19(a1)
   30202/   17CAA : 2348 0034           		move.l	a0,$34(a1)
   30203/   17CAE : 51C9 FFB0           		dbf	d1,Obj77_Loop
   30204/   17CB2 :                     
   30205/   17CB2 :                     Obj77_ShipMain:
   30206/   17CB2 : 43F8 D000           		lea	($FFFFD000).w,a1
   30207/   17CB6 : 7000                		moveq	#0,d0
   30208/   17CB8 : 1028 0025           		move.b	$25(a0),d0
   30209/   17CBC : 323B 0028           		move.w	Obj77_ShipIndex(pc,d0.w),d1
   30210/   17CC0 : 4EBB 1024           		jsr	Obj77_ShipIndex(pc,d1.w)
   30211/   17CC4 : 43F9 0001 7A96      		lea	(Ani_Eggman).l,a1
   30212/   17CCA : 4EB9 0000 A4FE      		jsr	AnimateSprite
   30213/   17CD0 : 7003                		moveq	#3,d0
   30214/   17CD2 : C028 0022           		and.b	$22(a0),d0
   30215/   17CD6 : 0228 00FC 0001      		andi.b	#$FC,1(a0)
   30216/   17CDC : 8128 0001           		or.b	d0,1(a0)
   30217/   17CE0 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   30218/   17CE6 :                     ; ===========================================================================
   30219/   17CE6 : 0010 0092           Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
   30220/   17CEA : 00D2 0110           		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
   30221/   17CEE : 01AE 01E8           		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
   30222/   17CF2 : 021C 0244           		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
   30223/   17CF6 :                     ; ===========================================================================
   30224/   17CF6 :                     
   30225/   17CF6 :                     loc_17F1E:				; XREF: Obj77_ShipIndex
   30226/   17CF6 : 3029 0008           		move.w	8(a1),d0
   30227/   17CFA : 0C40 1DA0           		cmpi.w	#$1DA0,d0
   30228/   17CFE : 6510                		bcs.s	loc_17F38
   30229/   17D00 : 317C FE80 0012      		move.w	#-$180,$12(a0)
   30230/   17D06 : 317C 0060 0010      		move.w	#$60,$10(a0)
   30231/   17D0C : 5428 0025           		addq.b	#2,$25(a0)
   30232/   17D10 :                     
   30233/   17D10 :                     loc_17F38:
   30234/   17D10 : 6100 F974           		bsr.w	BossMove
   30235/   17D14 : 3168 0038 000C      		move.w	$38(a0),$C(a0)
   30236/   17D1A : 3168 0030 0008      		move.w	$30(a0),8(a0)
   30237/   17D20 :                     
   30238/   17D20 :                     loc_17F48:
   30239/   17D20 : 4A28 003D           		tst.b	$3D(a0)
   30240/   17D24 : 6640                		bne.s	loc_17F8E
   30241/   17D26 : 4A28 0022           		tst.b	$22(a0)
   30242/   17D2A : 6B3E                		bmi.s	loc_17F92
   30243/   17D2C : 4A28 0020           		tst.b	$20(a0)
   30244/   17D30 : 6632                		bne.s	locret_17F8C
   30245/   17D32 : 4A28 003E           		tst.b	$3E(a0)
   30246/   17D36 : 6610                		bne.s	loc_17F70
   30247/   17D38 : 117C 0020 003E      		move.b	#$20,$3E(a0)
   30248/   17D3E : 303C 00AC           		move.w	#$AC,d0
   30249/   17D42 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l
   30250/   17D48 :                     
   30251/   17D48 :                     loc_17F70:
   30252/   17D48 : 43F8 FB22           		lea	($FFFFFB22).w,a1
   30253/   17D4C : 7000                		moveq	#0,d0
   30254/   17D4E : 4A51                		tst.w	(a1)
   30255/   17D50 : 6604                		bne.s	loc_17F7E
   30256/   17D52 : 303C 0EEE           		move.w	#$EEE,d0
   30257/   17D56 :                     
   30258/   17D56 :                     loc_17F7E:
   30259/   17D56 : 3280                		move.w	d0,(a1)
   30260/   17D58 : 5328 003E           		subq.b	#1,$3E(a0)
   30261/   17D5C : 6606                		bne.s	locret_17F8C
   30262/   17D5E : 117C 000F 0020      		move.b	#$F,$20(a0)
   30263/   17D64 :                     
   30264/   17D64 :                     locret_17F8C:
   30265/   17D64 : 4E75                		rts	
   30266/   17D66 :                     ; ===========================================================================
   30267/   17D66 :                     
   30268/   17D66 :                     loc_17F8E:				; XREF: loc_17F48
   30269/   17D66 : 6000 F8DC           		bra.w	BossDefeated
   30270/   17D6A :                     ; ===========================================================================
   30271/   17D6A :                     
   30272/   17D6A :                     loc_17F92:				; XREF: loc_17F48
   30273/   17D6A : 7064                		moveq	#100,d0
   30274/   17D6C : 6100 497A           		bsr.w	AddPoints
   30275/   17D70 : 117C 00FF 003D      		move.b	#-1,$3D(a0)
   30276/   17D76 : 4E75                		rts	
   30277/   17D78 :                     ; ===========================================================================
   30278/   17D78 :                     
   30279/   17D78 :                     loc_17FA0:				; XREF: Obj77_ShipIndex
   30280/   17D78 : 70FE                		moveq	#-2,d0
   30281/   17D7A : 0C68 1E48 0030      		cmpi.w	#$1E48,$30(a0)
   30282/   17D80 : 650C                		bcs.s	loc_17FB6
   30283/   17D82 : 317C 1E48 0030      		move.w	#$1E48,$30(a0)
   30284/   17D88 : 4268 0010           		clr.w	$10(a0)
   30285/   17D8C : 5240                		addq.w	#1,d0
   30286/   17D8E :                     
   30287/   17D8E :                     loc_17FB6:
   30288/   17D8E : 0C68 0500 0038      		cmpi.w	#$500,$38(a0)
   30289/   17D94 : 6E0C                		bgt.s	loc_17FCA
   30290/   17D96 : 317C 0500 0038      		move.w	#$500,$38(a0)
   30291/   17D9C : 4268 0012           		clr.w	$12(a0)
   30292/   17DA0 : 5240                		addq.w	#1,d0
   30293/   17DA2 :                     
   30294/   17DA2 :                     loc_17FCA:
   30295/   17DA2 : 6610                		bne.s	loc_17FDC
   30296/   17DA4 : 317C 0140 0010      		move.w	#$140,$10(a0)
   30297/   17DAA : 317C FE00 0012      		move.w	#-$200,$12(a0)
   30298/   17DB0 : 5428 0025           		addq.b	#2,$25(a0)
   30299/   17DB4 :                     
   30300/   17DB4 :                     loc_17FDC:
   30301/   17DB4 : 6000 FF5A           		bra.w	loc_17F38
   30302/   17DB8 :                     ; ===========================================================================
   30303/   17DB8 :                     
   30304/   17DB8 :                     loc_17FE0:				; XREF: Obj77_ShipIndex
   30305/   17DB8 : 70FE                		moveq	#-2,d0
   30306/   17DBA : 0C68 1E70 0030      		cmpi.w	#$1E70,$30(a0)
   30307/   17DC0 : 650C                		bcs.s	loc_17FF6
   30308/   17DC2 : 317C 1E70 0030      		move.w	#$1E70,$30(a0)
   30309/   17DC8 : 4268 0010           		clr.w	$10(a0)
   30310/   17DCC : 5240                		addq.w	#1,d0
   30311/   17DCE :                     
   30312/   17DCE :                     loc_17FF6:
   30313/   17DCE : 0C68 04C0 0038      		cmpi.w	#$4C0,$38(a0)
   30314/   17DD4 : 6E0C                		bgt.s	loc_1800A
   30315/   17DD6 : 317C 04C0 0038      		move.w	#$4C0,$38(a0)
   30316/   17DDC : 4268 0012           		clr.w	$12(a0)
   30317/   17DE0 : 5240                		addq.w	#1,d0
   30318/   17DE2 :                     
   30319/   17DE2 :                     loc_1800A:
   30320/   17DE2 : 660E                		bne.s	loc_1801A
   30321/   17DE4 : 317C FE80 0012      		move.w	#-$180,$12(a0)
   30322/   17DEA : 5428 0025           		addq.b	#2,$25(a0)
   30323/   17DEE : 4228 003F           		clr.b	$3F(a0)
   30324/   17DF2 :                     
   30325/   17DF2 :                     loc_1801A:
   30326/   17DF2 : 6000 FF1C           		bra.w	loc_17F38
   30327/   17DF6 :                     ; ===========================================================================
   30328/   17DF6 :                     
   30329/   17DF6 :                     loc_1801E:				; XREF: Obj77_ShipIndex
   30330/   17DF6 : 0C68 0100 0038      		cmpi.w	#$100,$38(a0)
   30331/   17DFC : 6E28                		bgt.s	loc_1804E
   30332/   17DFE : 317C 0100 0038      		move.w	#$100,$38(a0)
   30333/   17E04 : 317C 0140 0010      		move.w	#$140,$10(a0)
   30334/   17E0A : 317C FF80 0012      		move.w	#-$80,$12(a0)
   30335/   17E10 : 4A28 003D           		tst.b	$3D(a0)
   30336/   17E14 : 6708                		beq.s	loc_18046
   30337/   17E16 : E1E8 0010           		asl	$10(a0)
   30338/   17E1A : E1E8 0012           		asl	$12(a0)
   30339/   17E1E :                     
   30340/   17E1E :                     loc_18046:
   30341/   17E1E : 5428 0025           		addq.b	#2,$25(a0)
   30342/   17E22 : 6000 FEEC           		bra.w	loc_17F38
   30343/   17E26 :                     ; ===========================================================================
   30344/   17E26 :                     
   30345/   17E26 :                     loc_1804E:
   30346/   17E26 : 08E8 0000 0022      		bset	#0,$22(a0)
   30347/   17E2C : 5428 003F           		addq.b	#2,$3F(a0)
   30348/   17E30 : 1028 003F           		move.b	$3F(a0),d0
   30349/   17E34 : 4EB9 0000 27C0      		jsr	(CalcSine).l
   30350/   17E3A : 4A41                		tst.w	d1
   30351/   17E3C : 6A06                		bpl.s	loc_1806C
   30352/   17E3E : 08A8 0000 0022      		bclr	#0,$22(a0)
   30353/   17E44 :                     
   30354/   17E44 :                     loc_1806C:
   30355/   17E44 : E840                		asr.w	#4,d0
   30356/   17E46 : 4840                		swap	d0
   30357/   17E48 : 4240                		clr.w	d0
   30358/   17E4A : D0A8 0030           		add.l	$30(a0),d0
   30359/   17E4E : 4840                		swap	d0
   30360/   17E50 : 3140 0008           		move.w	d0,8(a0)
   30361/   17E54 : 3028 0012           		move.w	$12(a0),d0
   30362/   17E58 : 3238 D00C           		move.w	($FFFFD00C).w,d1
   30363/   17E5C : 9268 000C           		sub.w	$C(a0),d1
   30364/   17E60 : 6518                		bcs.s	loc_180A2
   30365/   17E62 : 0441 0048           		subi.w	#$48,d1
   30366/   17E66 : 6512                		bcs.s	loc_180A2
   30367/   17E68 : E240                		asr.w	#1,d0
   30368/   17E6A : 0441 0028           		subi.w	#$28,d1
   30369/   17E6E : 650A                		bcs.s	loc_180A2
   30370/   17E70 : E240                		asr.w	#1,d0
   30371/   17E72 : 0441 0028           		subi.w	#$28,d1
   30372/   17E76 : 6502                		bcs.s	loc_180A2
   30373/   17E78 : 7000                		moveq	#0,d0
   30374/   17E7A :                     
   30375/   17E7A :                     loc_180A2:
   30376/   17E7A : 48C0                		ext.l	d0
   30377/   17E7C : E180                		asl.l	#8,d0
   30378/   17E7E : 4A28 003D           		tst.b	$3D(a0)
   30379/   17E82 : 6702                		beq.s	loc_180AE
   30380/   17E84 : D080                		add.l	d0,d0
   30381/   17E86 :                     
   30382/   17E86 :                     loc_180AE:
   30383/   17E86 : D1A8 0038           		add.l	d0,$38(a0)
   30384/   17E8A : 3168 0038 000C      		move.w	$38(a0),$C(a0)
   30385/   17E90 : 6000 FE8E           		bra.w	loc_17F48
   30386/   17E94 :                     ; ===========================================================================
   30387/   17E94 :                     
   30388/   17E94 :                     loc_180BC:				; XREF: Obj77_ShipIndex
   30389/   17E94 : 70FE                		moveq	#-2,d0
   30390/   17E96 : 0C68 1F4C 0030      		cmpi.w	#$1F4C,$30(a0)
   30391/   17E9C : 650C                		bcs.s	loc_180D2
   30392/   17E9E : 317C 1F4C 0030      		move.w	#$1F4C,$30(a0)
   30393/   17EA4 : 4268 0010           		clr.w	$10(a0)
   30394/   17EA8 : 5240                		addq.w	#1,d0
   30395/   17EAA :                     
   30396/   17EAA :                     loc_180D2:
   30397/   17EAA : 0C68 00C0 0038      		cmpi.w	#$C0,$38(a0)
   30398/   17EB0 : 6E0C                		bgt.s	loc_180E6
   30399/   17EB2 : 317C 00C0 0038      		move.w	#$C0,$38(a0)
   30400/   17EB8 : 4268 0012           		clr.w	$12(a0)
   30401/   17EBC : 5240                		addq.w	#1,d0
   30402/   17EBE :                     
   30403/   17EBE :                     loc_180E6:
   30404/   17EBE : 660A                		bne.s	loc_180F2
   30405/   17EC0 : 5428 0025           		addq.b	#2,$25(a0)
   30406/   17EC4 : 08A8 0000 0022      		bclr	#0,$22(a0)
   30407/   17ECA :                     
   30408/   17ECA :                     loc_180F2:
   30409/   17ECA : 6000 FE44           		bra.w	loc_17F38
   30410/   17ECE :                     ; ===========================================================================
   30411/   17ECE :                     
   30412/   17ECE :                     loc_180F6:				; XREF: Obj77_ShipIndex
   30413/   17ECE : 4A28 003D           		tst.b	$3D(a0)
   30414/   17ED2 : 6616                		bne.s	loc_18112
   30415/   17ED4 : 0C69 1EC8 0008      		cmpi.w	#$1EC8,8(a1)
   30416/   17EDA : 6D22                		blt.s	loc_18126
   30417/   17EDC : 0C69 00F0 000C      		cmpi.w	#$F0,$C(a1)
   30418/   17EE2 : 6E1A                		bgt.s	loc_18126
   30419/   17EE4 : 117C 0032 003C      		move.b	#$32,$3C(a0)
   30420/   17EEA :                     
   30421/   17EEA :                     loc_18112:
   30422/   17EEA : 303C 0082           		move.w	#$82,d0
   30423/   17EEE : 4EB9 0000 117C      		jsr	(PlaySound).l	; play LZ music
   30424/   17EF4 : 08E8 0000 0022      		bset	#0,$22(a0)
   30425/   17EFA : 5428 0025           		addq.b	#2,$25(a0)
   30426/   17EFE :                     
   30427/   17EFE :                     loc_18126:
   30428/   17EFE : 6000 FE10           		bra.w	loc_17F38
   30429/   17F02 :                     ; ===========================================================================
   30430/   17F02 :                     
   30431/   17F02 :                     loc_1812A:				; XREF: Obj77_ShipIndex
   30432/   17F02 : 4A28 003D           		tst.b	$3D(a0)
   30433/   17F06 : 6606                		bne.s	loc_18136
   30434/   17F08 : 5328 003C           		subq.b	#1,$3C(a0)
   30435/   17F0C : 6618                		bne.s	loc_1814E
   30436/   17F0E :                     
   30437/   17F0E :                     loc_18136:
   30438/   17F0E : 4228 003C           		clr.b	$3C(a0)
   30439/   17F12 : 317C 0400 0010      		move.w	#$400,$10(a0)
   30440/   17F18 : 317C FFC0 0012      		move.w	#-$40,$12(a0)
   30441/   17F1E : 4228 003D           		clr.b	$3D(a0)
   30442/   17F22 : 5428 0025           		addq.b	#2,$25(a0)
   30443/   17F26 :                     
   30444/   17F26 :                     loc_1814E:
   30445/   17F26 : 6000 FDE8           		bra.w	loc_17F38
   30446/   17F2A :                     ; ===========================================================================
   30447/   17F2A :                     
   30448/   17F2A :                     loc_18152:				; XREF: Obj77_ShipIndex
   30449/   17F2A : 0C78 2030 F72A      		cmpi.w	#$2030,($FFFFF72A).w
   30450/   17F30 : 6406                		bcc.s	loc_18160
   30451/   17F32 : 5478 F72A           		addq.w	#2,($FFFFF72A).w
   30452/   17F36 : 6006                		bra.s	loc_18166
   30453/   17F38 :                     ; ===========================================================================
   30454/   17F38 :                     
   30455/   17F38 :                     loc_18160:
   30456/   17F38 : 4A28 0001           		tst.b	1(a0)
   30457/   17F3C : 6A04                		bpl.s	Obj77_ShipDel
   30458/   17F3E :                     
   30459/   17F3E :                     loc_18166:
   30460/   17F3E : 6000 FDD0           		bra.w	loc_17F38
   30461/   17F42 :                     ; ===========================================================================
   30462/   17F42 :                     
   30463/   17F42 :                     Obj77_ShipDel:
   30464/   17F42 : 4EF9 0000 D40E      		jmp	DeleteObject
   30465/   17F48 :                     ; ===========================================================================
   30466/   17F48 :                     
   30467/   17F48 :                     Obj77_FaceMain:				; XREF: Obj77_Index
   30468/   17F48 : 2268 0034           		movea.l	$34(a0),a1
   30469/   17F4C : 1011                		move.b	(a1),d0
   30470/   17F4E : B010                		cmp.b	(a0),d0
   30471/   17F50 : 663E                		bne.s	Obj77_FaceDel
   30472/   17F52 : 7000                		moveq	#0,d0
   30473/   17F54 : 1029 0025           		move.b	$25(a1),d0
   30474/   17F58 : 7201                		moveq	#1,d1
   30475/   17F5A : 4A28 003D           		tst.b	$3D(a0)
   30476/   17F5E : 6704                		beq.s	loc_1818C
   30477/   17F60 : 720A                		moveq	#$A,d1
   30478/   17F62 : 6014                		bra.s	loc_181A0
   30479/   17F64 :                     ; ===========================================================================
   30480/   17F64 :                     
   30481/   17F64 :                     loc_1818C:
   30482/   17F64 : 4A29 0020           		tst.b	$20(a1)
   30483/   17F68 : 6604                		bne.s	loc_18196
   30484/   17F6A : 7205                		moveq	#5,d1
   30485/   17F6C : 600A                		bra.s	loc_181A0
   30486/   17F6E :                     ; ===========================================================================
   30487/   17F6E :                     
   30488/   17F6E :                     loc_18196:
   30489/   17F6E : 0C38 0004 D024      		cmpi.b	#4,($FFFFD024).w
   30490/   17F74 : 6502                		bcs.s	loc_181A0
   30491/   17F76 : 7204                		moveq	#4,d1
   30492/   17F78 :                     
   30493/   17F78 :                     loc_181A0:
   30494/   17F78 : 1141 001C           		move.b	d1,$1C(a0)
   30495/   17F7C : 0C00 000E           		cmpi.b	#$E,d0
   30496/   17F80 : 660C                		bne.s	loc_181B6
   30497/   17F82 : 117C 0006 001C      		move.b	#6,$1C(a0)
   30498/   17F88 : 4A28 0001           		tst.b	1(a0)
   30499/   17F8C : 6A02                		bpl.s	Obj77_FaceDel
   30500/   17F8E :                     
   30501/   17F8E :                     loc_181B6:
   30502/   17F8E : 6040                		bra.s	Obj77_Display
   30503/   17F90 :                     ; ===========================================================================
   30504/   17F90 :                     
   30505/   17F90 :                     Obj77_FaceDel:
   30506/   17F90 : 4EF9 0000 D40E      		jmp	DeleteObject
   30507/   17F96 :                     ; ===========================================================================
   30508/   17F96 :                     
   30509/   17F96 :                     Obj77_FlameMain:			; XREF: Obj77_Index
   30510/   17F96 : 117C 0007 001C      		move.b	#7,$1C(a0)
   30511/   17F9C : 2268 0034           		movea.l	$34(a0),a1
   30512/   17FA0 : 1011                		move.b	(a1),d0
   30513/   17FA2 : B010                		cmp.b	(a0),d0
   30514/   17FA4 : 6624                		bne.s	Obj77_FlameDel
   30515/   17FA6 : 0C29 000E 0025      		cmpi.b	#$E,$25(a1)
   30516/   17FAC : 661A                		bne.s	loc_181F0
   30517/   17FAE : 117C 000B 001C      		move.b	#$B,$1C(a0)
   30518/   17FB4 : 4A28 0001           		tst.b	1(a0)
   30519/   17FB8 : 6A10                		bpl.s	Obj77_FlameDel
   30520/   17FBA : 600C                		bra.s	loc_181F0
   30521/   17FBC :                     ; ===========================================================================
   30522/   17FBC : 4A69 0010           		tst.w	$10(a1)
   30523/   17FC0 : 6706                		beq.s	loc_181F0
   30524/   17FC2 : 117C 0008 001C      		move.b	#8,$1C(a0)
   30525/   17FC8 :                     
   30526/   17FC8 :                     loc_181F0:
   30527/   17FC8 : 6006                		bra.s	Obj77_Display
   30528/   17FCA :                     ; ===========================================================================
   30529/   17FCA :                     
   30530/   17FCA :                     Obj77_FlameDel:				; XREF: Obj77_FlameMain
   30531/   17FCA : 4EF9 0000 D40E      		jmp	DeleteObject
   30532/   17FD0 :                     ; ===========================================================================
   30533/   17FD0 :                     
   30534/   17FD0 :                     Obj77_Display:
   30535/   17FD0 : 43F9 0001 7A96      		lea	(Ani_Eggman).l,a1
   30536/   17FD6 : 4EB9 0000 A4FE      		jsr	AnimateSprite
   30537/   17FDC : 2268 0034           		movea.l	$34(a0),a1
   30538/   17FE0 : 3169 0008 0008      		move.w	8(a1),8(a0)
   30539/   17FE6 : 3169 000C 000C      		move.w	$C(a1),$C(a0)
   30540/   17FEC : 1169 0022 0022      		move.b	$22(a1),$22(a0)
   30541/   17FF2 : 7003                		moveq	#3,d0
   30542/   17FF4 : C028 0022           		and.b	$22(a0),d0
   30543/   17FF8 : 0228 00FC 0001      		andi.b	#-4,1(a0)
   30544/   17FFE : 8128 0001           		or.b	d0,1(a0)
   30545/   18002 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   30546/   18008 :                     ; ===========================================================================
   30547/   18008 :                     ; ---------------------------------------------------------------------------
   30548/   18008 :                     ; Object 73 - Eggman (MZ)
   30549/   18008 :                     ; ---------------------------------------------------------------------------
   30550/   18008 :                     
   30551/   18008 :                     Obj73:					; XREF: Obj_Index
   30552/   18008 : 7000                		moveq	#0,d0
   30553/   1800A : 1028 0024           		move.b	$24(a0),d0
   30554/   1800E : 323B 0006           		move.w	Obj73_Index(pc,d0.w),d1
   30555/   18012 : 4EFB 1002           		jmp	Obj73_Index(pc,d1.w)
   30556/   18016 :                     ; ===========================================================================
   30557/   18016 : 0016                Obj73_Index:	dc.w Obj73_Main-Obj73_Index
   30558/   18018 : 0088                		dc.w Obj73_ShipMain-Obj73_Index
   30559/   1801A : 036E                		dc.w Obj73_FaceMain-Obj73_Index
   30560/   1801C : 03C8                		dc.w Obj73_FlameMain-Obj73_Index
   30561/   1801E : 0434                		dc.w Obj73_TubeMain-Obj73_Index
   30562/   18020 :                     
   30563/   18020 : 0200 04             Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
   30564/   18023 : 0401 04             		dc.b 4,	1, 4
   30565/   18026 : 0607 04             		dc.b 6,	7, 4
   30566/   18029 : 0800 03             		dc.b 8,	0, 3
   30567/   1802C :                     ; ===========================================================================
   30568/   1802C :                     
   30569/   1802C :                     Obj73_Main:				; XREF: Obj73_Index
   30570/   1802C : 3168 0008 0030      		move.w	8(a0),$30(a0)
   30571/   18032 : 3168 000C 0038      		move.w	$C(a0),$38(a0)
   30572/   18038 : 117C 000F 0020      		move.b	#$F,$20(a0)
   30573/   1803E : 117C 0008 0021      		move.b	#8,$21(a0)	; set number of	hits to	8
   30574/   18044 : 45FA FFDA           		lea	Obj73_ObjData(pc),a2
   30575/   18048 : 2248                		movea.l	a0,a1
   30576/   1804A : 7203                		moveq	#3,d1
   30577/   1804C : 6018                		bra.s	Obj73_LoadBoss
   30578/   1804E :                     ; ===========================================================================
   30579/   1804E :                     
   30580/   1804E :                     Obj73_Loop:
   30581/   1804E : 4EB9 0000 D86E      		jsr	SingleObjLoad2
   30582/   18054 : 6648                		bne.s	Obj73_ShipMain
   30583/   18056 : 12BC 0073           		move.b	#$73,0(a1)
   30584/   1805A : 3368 0008 0008      		move.w	8(a0),8(a1)
   30585/   18060 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   30586/   18066 :                     
   30587/   18066 :                     Obj73_LoadBoss:				; XREF: Obj73_Main
   30588/   18066 : 08A8 0000 0022      		bclr	#0,$22(a0)
   30589/   1806C : 4229 0025           		clr.b	$25(a1)
   30590/   18070 : 135A 0024           		move.b	(a2)+,$24(a1)
   30591/   18074 : 135A 001C           		move.b	(a2)+,$1C(a1)
   30592/   18078 : 135A 0018           		move.b	(a2)+,$18(a1)
   30593/   1807C : 237C 0001 7AE6      		move.l	#Map_Eggman,4(a1)
            18082 : 0004             
   30594/   18084 : 337C 0400 0002      		move.w	#$400,2(a1)
   30595/   1808A : 137C 0004 0001      		move.b	#4,1(a1)
   30596/   18090 : 137C 0020 0019      		move.b	#$20,$19(a1)
   30597/   18096 : 2348 0034           		move.l	a0,$34(a1)
   30598/   1809A : 51C9 FFB2           		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
   30599/   1809E :                     
   30600/   1809E :                     Obj73_ShipMain:
   30601/   1809E : 7000                		moveq	#0,d0
   30602/   180A0 : 1028 0025           		move.b	$25(a0),d0
   30603/   180A4 : 323B 0028           		move.w	Obj73_ShipIndex(pc,d0.w),d1
   30604/   180A8 : 4EBB 1024           		jsr	Obj73_ShipIndex(pc,d1.w)
   30605/   180AC : 43F9 0001 7A96      		lea	(Ani_Eggman).l,a1
   30606/   180B2 : 4EB9 0000 A4FE      		jsr	AnimateSprite
   30607/   180B8 : 7003                		moveq	#3,d0
   30608/   180BA : C028 0022           		and.b	$22(a0),d0
   30609/   180BE : 0228 00FC 0001      		andi.b	#$FC,1(a0)
   30610/   180C4 : 8128 0001           		or.b	d0,1(a0)
   30611/   180C8 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   30612/   180CE :                     ; ===========================================================================
   30613/   180CE : 000A                Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
   30614/   180D0 : 00B2                		dc.w loc_183AA-Obj73_ShipIndex
   30615/   180D2 : 01FC                		dc.w loc_184F6-Obj73_ShipIndex
   30616/   180D4 : 0232                		dc.w loc_1852C-Obj73_ShipIndex
   30617/   180D6 : 0288                		dc.w loc_18582-Obj73_ShipIndex
   30618/   180D8 :                     ; ===========================================================================
   30619/   180D8 :                     
   30620/   180D8 :                     loc_18302:				; XREF: Obj73_ShipIndex
   30621/   180D8 : 1028 003F           		move.b	$3F(a0),d0
   30622/   180DC : 5428 003F           		addq.b	#2,$3F(a0)
   30623/   180E0 : 4EB9 0000 27C0      		jsr	(CalcSine).l
   30624/   180E6 : E440                		asr.w	#2,d0
   30625/   180E8 : 3140 0012           		move.w	d0,$12(a0)
   30626/   180EC : 317C FF00 0010      		move.w	#-$100,$10(a0)
   30627/   180F2 : 6100 F592           		bsr.w	BossMove
   30628/   180F6 : 0C68 1910 0030      		cmpi.w	#$1910,$30(a0)
   30629/   180FC : 660C                		bne.s	loc_18334
   30630/   180FE : 5428 0025           		addq.b	#2,$25(a0)
   30631/   18102 : 4228 0028           		clr.b	$28(a0)
   30632/   18106 : 42A8 0010           		clr.l	$10(a0)
   30633/   1810A :                     
   30634/   1810A :                     loc_18334:
   30635/   1810A : 4EB9 0000 279A      		jsr	(RandomNumber).l
   30636/   18110 : 1140 0034           		move.b	d0,$34(a0)
   30637/   18114 :                     
   30638/   18114 :                     loc_1833E:
   30639/   18114 : 3168 0038 000C      		move.w	$38(a0),$C(a0)
   30640/   1811A : 3168 0030 0008      		move.w	$30(a0),8(a0)
   30641/   18120 : 0C28 0004 0025      		cmpi.b	#4,$25(a0)
   30642/   18126 : 643E                		bcc.s	locret_18390
   30643/   18128 : 4A28 0022           		tst.b	$22(a0)
   30644/   1812C : 6B3A                		bmi.s	loc_18392
   30645/   1812E : 4A28 0020           		tst.b	$20(a0)
   30646/   18132 : 6632                		bne.s	locret_18390
   30647/   18134 : 4A28 003E           		tst.b	$3E(a0)
   30648/   18138 : 6610                		bne.s	loc_18374
   30649/   1813A : 117C 0028 003E      		move.b	#$28,$3E(a0)
   30650/   18140 : 303C 00AC           		move.w	#$AC,d0
   30651/   18144 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play boss damage sound
   30652/   1814A :                     
   30653/   1814A :                     loc_18374:
   30654/   1814A : 43F8 FB22           		lea	($FFFFFB22).w,a1
   30655/   1814E : 7000                		moveq	#0,d0
   30656/   18150 : 4A51                		tst.w	(a1)
   30657/   18152 : 6604                		bne.s	loc_18382
   30658/   18154 : 303C 0EEE           		move.w	#$EEE,d0
   30659/   18158 :                     
   30660/   18158 :                     loc_18382:
   30661/   18158 : 3280                		move.w	d0,(a1)
   30662/   1815A : 5328 003E           		subq.b	#1,$3E(a0)
   30663/   1815E : 6606                		bne.s	locret_18390
   30664/   18160 : 117C 000F 0020      		move.b	#$F,$20(a0)
   30665/   18166 :                     
   30666/   18166 :                     locret_18390:
   30667/   18166 : 4E75                		rts	
   30668/   18168 :                     ; ===========================================================================
   30669/   18168 :                     
   30670/   18168 :                     loc_18392:				; XREF: loc_1833E
   30671/   18168 : 7064                		moveq	#100,d0
   30672/   1816A : 6100 457C           		bsr.w	AddPoints
   30673/   1816E : 117C 0004 0025      		move.b	#4,$25(a0)
   30674/   18174 : 317C 00B4 003C      		move.w	#$B4,$3C(a0)
   30675/   1817A : 4268 0010           		clr.w	$10(a0)
   30676/   1817E : 4E75                		rts	
   30677/   18180 :                     ; ===========================================================================
   30678/   18180 :                     
   30679/   18180 :                     loc_183AA:				; XREF: Obj73_ShipIndex
   30680/   18180 : 7000                		moveq	#0,d0
   30681/   18182 : 1028 0028           		move.b	$28(a0),d0
   30682/   18186 : 303B 0010           		move.w	off_183C2(pc,d0.w),d0
   30683/   1818A : 4EBB 000C           		jsr	off_183C2(pc,d0.w)
   30684/   1818E : 0228 0006 0028      		andi.b	#6,$28(a0)
   30685/   18194 : 6000 FF7E           		bra.w	loc_1833E
   30686/   18198 :                     ; ===========================================================================
   30687/   18198 : 0008                off_183C2:	dc.w loc_183CA-off_183C2
   30688/   1819A : 00DA                		dc.w Obj73_MakeLava2-off_183C2
   30689/   1819C : 0008                		dc.w loc_183CA-off_183C2
   30690/   1819E : 00DA                		dc.w Obj73_MakeLava2-off_183C2
   30691/   181A0 :                     ; ===========================================================================
   30692/   181A0 :                     
   30693/   181A0 :                     loc_183CA:				; XREF: off_183C2
   30694/   181A0 : 4A68 0010           		tst.w	$10(a0)
   30695/   181A4 : 662E                		bne.s	loc_183FE
   30696/   181A6 : 7040                		moveq	#$40,d0
   30697/   181A8 : 0C68 022C 0038      		cmpi.w	#$22C,$38(a0)
   30698/   181AE : 670C                		beq.s	loc_183E6
   30699/   181B0 : 6502                		bcs.s	loc_183DE
   30700/   181B2 : 4440                		neg.w	d0
   30701/   181B4 :                     
   30702/   181B4 :                     loc_183DE:
   30703/   181B4 : 3140 0012           		move.w	d0,$12(a0)
   30704/   181B8 : 6000 F4CC           		bra.w	BossMove
   30705/   181BC :                     ; ===========================================================================
   30706/   181BC :                     
   30707/   181BC :                     loc_183E6:
   30708/   181BC : 317C 0200 0010      		move.w	#$200,$10(a0)
   30709/   181C2 : 317C 0100 0012      		move.w	#$100,$12(a0)
   30710/   181C8 : 0828 0000 0022      		btst	#0,$22(a0)
   30711/   181CE : 6604                		bne.s	loc_183FE
   30712/   181D0 : 4468 0010           		neg.w	$10(a0)
   30713/   181D4 :                     
   30714/   181D4 :                     loc_183FE:
   30715/   181D4 : 0C28 0018 003E      		cmpi.b	#$18,$3E(a0)
   30716/   181DA : 6408                		bcc.s	Obj73_MakeLava
   30717/   181DC : 6100 F4A8           		bsr.w	BossMove
   30718/   181E0 : 5968 0012           		subq.w	#4,$12(a0)
   30719/   181E4 :                     
   30720/   181E4 :                     Obj73_MakeLava:
   30721/   181E4 : 5328 0034           		subq.b	#1,$34(a0)
   30722/   181E8 : 6446                		bcc.s	loc_1845C
   30723/   181EA : 4EB9 0000 D858      		jsr	SingleObjLoad
   30724/   181F0 : 662C                		bne.s	loc_1844A
   30725/   181F2 : 12BC 0014           		move.b	#$14,0(a1)	; load lava ball object
   30726/   181F6 : 337C 02E8 000C      		move.w	#$2E8,$C(a1)	; set Y	position
   30727/   181FC : 4EB9 0000 279A      		jsr	(RandomNumber).l
   30728/   18202 : 0280 0000 FFFF      		andi.l	#$FFFF,d0
   30729/   18208 : 80FC 0050           		divu.w	#$50,d0
   30730/   1820C : 4840                		swap	d0
   30731/   1820E : 0640 1878           		addi.w	#$1878,d0
   30732/   18212 : 3340 0008           		move.w	d0,8(a1)
   30733/   18216 : EE09                		lsr.b	#7,d1
   30734/   18218 : 337C 00FF 0028      		move.w	#$FF,$28(a1)
   30735/   1821E :                     
   30736/   1821E :                     loc_1844A:
   30737/   1821E : 4EB9 0000 279A      		jsr	(RandomNumber).l
   30738/   18224 : 0200 001F           		andi.b	#$1F,d0
   30739/   18228 : 0600 0040           		addi.b	#$40,d0
   30740/   1822C : 1140 0034           		move.b	d0,$34(a0)
   30741/   18230 :                     
   30742/   18230 :                     loc_1845C:
   30743/   18230 : 0828 0000 0022      		btst	#0,$22(a0)
   30744/   18236 : 6710                		beq.s	loc_18474
   30745/   18238 : 0C68 1910 0030      		cmpi.w	#$1910,$30(a0)
   30746/   1823E : 6D30                		blt.s	locret_1849C
   30747/   18240 : 317C 1910 0030      		move.w	#$1910,$30(a0)
   30748/   18246 : 600E                		bra.s	loc_18482
   30749/   18248 :                     ; ===========================================================================
   30750/   18248 :                     
   30751/   18248 :                     loc_18474:
   30752/   18248 : 0C68 1830 0030      		cmpi.w	#$1830,$30(a0)
   30753/   1824E : 6E20                		bgt.s	locret_1849C
   30754/   18250 : 317C 1830 0030      		move.w	#$1830,$30(a0)
   30755/   18256 :                     
   30756/   18256 :                     loc_18482:
   30757/   18256 : 4268 0010           		clr.w	$10(a0)
   30758/   1825A : 317C FE80 0012      		move.w	#-$180,$12(a0)
   30759/   18260 : 0C68 022C 0038      		cmpi.w	#$22C,$38(a0)
   30760/   18266 : 6404                		bcc.s	loc_18498
   30761/   18268 : 4468 0012           		neg.w	$12(a0)
   30762/   1826C :                     
   30763/   1826C :                     loc_18498:
   30764/   1826C : 5428 0028           		addq.b	#2,$28(a0)
   30765/   18270 :                     
   30766/   18270 :                     locret_1849C:
   30767/   18270 : 4E75                		rts	
   30768/   18272 :                     ; ===========================================================================
   30769/   18272 :                     
   30770/   18272 :                     Obj73_MakeLava2:			; XREF: off_183C2
   30771/   18272 : 6100 F412           		bsr.w	BossMove
   30772/   18276 : 3028 0038           		move.w	$38(a0),d0
   30773/   1827A : 0440 022C           		subi.w	#$22C,d0
   30774/   1827E : 6E48                		bgt.s	locret_184F4
   30775/   18280 : 303C 022C           		move.w	#$22C,d0
   30776/   18284 : 4A68 0012           		tst.w	$12(a0)
   30777/   18288 : 6734                		beq.s	loc_184EA
   30778/   1828A : 4268 0012           		clr.w	$12(a0)
   30779/   1828E : 317C 0050 003C      		move.w	#$50,$3C(a0)
   30780/   18294 : 0868 0000 0022      		bchg	#0,$22(a0)
   30781/   1829A : 4EB9 0000 D858      		jsr	SingleObjLoad
   30782/   182A0 : 661C                		bne.s	loc_184EA
   30783/   182A2 : 3368 0030 0008      		move.w	$30(a0),8(a1)
   30784/   182A8 : 3368 0038 000C      		move.w	$38(a0),$C(a1)
   30785/   182AE : 0669 0018 000C      		addi.w	#$18,$C(a1)
   30786/   182B4 : 12BC 0074           		move.b	#$74,(a1)	; load lava ball object
   30787/   182B8 : 137C 0001 0028      		move.b	#1,$28(a1)
   30788/   182BE :                     
   30789/   182BE :                     loc_184EA:
   30790/   182BE : 5368 003C           		subq.w	#1,$3C(a0)
   30791/   182C2 : 6604                		bne.s	locret_184F4
   30792/   182C4 : 5428 0028           		addq.b	#2,$28(a0)
   30793/   182C8 :                     
   30794/   182C8 :                     locret_184F4:
   30795/   182C8 : 4E75                		rts	
   30796/   182CA :                     ; ===========================================================================
   30797/   182CA :                     
   30798/   182CA :                     loc_184F6:				; XREF: Obj73_ShipIndex
   30799/   182CA : 5368 003C           		subq.w	#1,$3C(a0)
   30800/   182CE : 6B04                		bmi.s	loc_18500
   30801/   182D0 : 6000 F372           		bra.w	BossDefeated
   30802/   182D4 :                     ; ===========================================================================
   30803/   182D4 :                     
   30804/   182D4 :                     loc_18500:
   30805/   182D4 : 08E8 0000 0022      		bset	#0,$22(a0)
   30806/   182DA : 08A8 0007 0022      		bclr	#7,$22(a0)
   30807/   182E0 : 4268 0010           		clr.w	$10(a0)
   30808/   182E4 : 5428 0025           		addq.b	#2,$25(a0)
   30809/   182E8 : 317C FFDA 003C      		move.w	#-$26,$3C(a0)
   30810/   182EE : 4A38 F7A7           		tst.b	($FFFFF7A7).w
   30811/   182F2 : 660A                		bne.s	locret_1852A
   30812/   182F4 : 11FC 0001 F7A7      		move.b	#1,($FFFFF7A7).w
   30813/   182FA : 4268 0012           		clr.w	$12(a0)
   30814/   182FE :                     
   30815/   182FE :                     locret_1852A:
   30816/   182FE : 4E75                		rts	
   30817/   18300 :                     ; ===========================================================================
   30818/   18300 :                     
   30819/   18300 :                     loc_1852C:				; XREF: Obj73_ShipIndex
   30820/   18300 : 5268 003C           		addq.w	#1,$3C(a0)
   30821/   18304 : 6712                		beq.s	loc_18544
   30822/   18306 : 6A1A                		bpl.s	loc_1854E
   30823/   18308 : 0C68 0270 0038      		cmpi.w	#$270,$38(a0)
   30824/   1830E : 6408                		bcc.s	loc_18544
   30825/   18310 : 0668 0018 0012      		addi.w	#$18,$12(a0)
   30826/   18316 : 6036                		bra.s	loc_1857A
   30827/   18318 :                     ; ===========================================================================
   30828/   18318 :                     
   30829/   18318 :                     loc_18544:
   30830/   18318 : 4268 0012           		clr.w	$12(a0)
   30831/   1831C : 4268 003C           		clr.w	$3C(a0)
   30832/   18320 : 602C                		bra.s	loc_1857A
   30833/   18322 :                     ; ===========================================================================
   30834/   18322 :                     
   30835/   18322 :                     loc_1854E:
   30836/   18322 : 0C68 0030 003C      		cmpi.w	#$30,$3C(a0)
   30837/   18328 : 6510                		bcs.s	loc_18566
   30838/   1832A : 6714                		beq.s	loc_1856C
   30839/   1832C : 0C68 0038 003C      		cmpi.w	#$38,$3C(a0)
   30840/   18332 : 651A                		bcs.s	loc_1857A
   30841/   18334 : 5428 0025           		addq.b	#2,$25(a0)
   30842/   18338 : 6014                		bra.s	loc_1857A
   30843/   1833A :                     ; ===========================================================================
   30844/   1833A :                     
   30845/   1833A :                     loc_18566:
   30846/   1833A : 5168 0012           		subq.w	#8,$12(a0)
   30847/   1833E : 600E                		bra.s	loc_1857A
   30848/   18340 :                     ; ===========================================================================
   30849/   18340 :                     
   30850/   18340 :                     loc_1856C:
   30851/   18340 : 4268 0012           		clr.w	$12(a0)
   30852/   18344 : 303C 0083           		move.w	#$83,d0
   30853/   18348 : 4EB9 0000 117C      		jsr	(PlaySound).l	; play MZ music
   30854/   1834E :                     
   30855/   1834E :                     loc_1857A:
   30856/   1834E : 6100 F336           		bsr.w	BossMove
   30857/   18352 : 6000 FDC0           		bra.w	loc_1833E
   30858/   18356 :                     ; ===========================================================================
   30859/   18356 :                     
   30860/   18356 :                     loc_18582:				; XREF: Obj73_ShipIndex
   30861/   18356 : 317C 0500 0010      		move.w	#$500,$10(a0)
   30862/   1835C : 317C FFC0 0012      		move.w	#-$40,$12(a0)
   30863/   18362 : 0C78 1960 F72A      		cmpi.w	#$1960,($FFFFF72A).w
   30864/   18368 : 6406                		bcc.s	loc_1859C
   30865/   1836A : 5478 F72A           		addq.w	#2,($FFFFF72A).w
   30866/   1836E : 6006                		bra.s	loc_185A2
   30867/   18370 :                     ; ===========================================================================
   30868/   18370 :                     
   30869/   18370 :                     loc_1859C:
   30870/   18370 : 4A28 0001           		tst.b	1(a0)
   30871/   18374 : 6A08                		bpl.s	Obj73_ShipDel
   30872/   18376 :                     
   30873/   18376 :                     loc_185A2:
   30874/   18376 : 6100 F30E           		bsr.w	BossMove
   30875/   1837A : 6000 FD98           		bra.w	loc_1833E
   30876/   1837E :                     ; ===========================================================================
   30877/   1837E :                     
   30878/   1837E :                     Obj73_ShipDel:
   30879/   1837E : 4EF9 0000 D40E      		jmp	DeleteObject
   30880/   18384 :                     ; ===========================================================================
   30881/   18384 :                     
   30882/   18384 :                     Obj73_FaceMain:				; XREF: Obj73_Index
   30883/   18384 : 7000                		moveq	#0,d0
   30884/   18386 : 7201                		moveq	#1,d1
   30885/   18388 : 2268 0034           		movea.l	$34(a0),a1
   30886/   1838C : 1029 0025           		move.b	$25(a1),d0
   30887/   18390 : 5540                		subq.w	#2,d0
   30888/   18392 : 6612                		bne.s	loc_185D2
   30889/   18394 : 0829 0001 0028      		btst	#1,$28(a1)
   30890/   1839A : 6712                		beq.s	loc_185DA
   30891/   1839C : 4A69 0012           		tst.w	$12(a1)
   30892/   183A0 : 660C                		bne.s	loc_185DA
   30893/   183A2 : 7204                		moveq	#4,d1
   30894/   183A4 : 601C                		bra.s	loc_185EE
   30895/   183A6 :                     ; ===========================================================================
   30896/   183A6 :                     
   30897/   183A6 :                     loc_185D2:
   30898/   183A6 : 5500                		subq.b	#2,d0
   30899/   183A8 : 6B04                		bmi.s	loc_185DA
   30900/   183AA : 720A                		moveq	#$A,d1
   30901/   183AC : 6014                		bra.s	loc_185EE
   30902/   183AE :                     ; ===========================================================================
   30903/   183AE :                     
   30904/   183AE :                     loc_185DA:
   30905/   183AE : 4A29 0020           		tst.b	$20(a1)
   30906/   183B2 : 6604                		bne.s	loc_185E4
   30907/   183B4 : 7205                		moveq	#5,d1
   30908/   183B6 : 600A                		bra.s	loc_185EE
   30909/   183B8 :                     ; ===========================================================================
   30910/   183B8 :                     
   30911/   183B8 :                     loc_185E4:
   30912/   183B8 : 0C38 0004 D024      		cmpi.b	#4,($FFFFD024).w
   30913/   183BE : 6502                		bcs.s	loc_185EE
   30914/   183C0 : 7204                		moveq	#4,d1
   30915/   183C2 :                     
   30916/   183C2 :                     loc_185EE:
   30917/   183C2 : 1141 001C           		move.b	d1,$1C(a0)
   30918/   183C6 : 5900                		subq.b	#4,d0
   30919/   183C8 : 660C                		bne.s	loc_18602
   30920/   183CA : 117C 0006 001C      		move.b	#6,$1C(a0)
   30921/   183D0 : 4A28 0001           		tst.b	1(a0)
   30922/   183D4 : 6A02                		bpl.s	Obj73_FaceDel
   30923/   183D6 :                     
   30924/   183D6 :                     loc_18602:
   30925/   183D6 : 603A                		bra.s	Obj73_Display
   30926/   183D8 :                     ; ===========================================================================
   30927/   183D8 :                     
   30928/   183D8 :                     Obj73_FaceDel:
   30929/   183D8 : 4EF9 0000 D40E      		jmp	DeleteObject
   30930/   183DE :                     ; ===========================================================================
   30931/   183DE :                     
   30932/   183DE :                     Obj73_FlameMain:			; XREF: Obj73_Index
   30933/   183DE : 117C 0007 001C      		move.b	#7,$1C(a0)
   30934/   183E4 : 2268 0034           		movea.l	$34(a0),a1
   30935/   183E8 : 0C29 0008 0025      		cmpi.b	#8,$25(a1)
   30936/   183EE : 6D0E                		blt.s	loc_1862A
   30937/   183F0 : 117C 000B 001C      		move.b	#$B,$1C(a0)
   30938/   183F6 : 4A28 0001           		tst.b	1(a0)
   30939/   183FA : 6A10                		bpl.s	Obj73_FlameDel
   30940/   183FC : 600C                		bra.s	loc_18636
   30941/   183FE :                     ; ===========================================================================
   30942/   183FE :                     
   30943/   183FE :                     loc_1862A:
   30944/   183FE : 4A69 0010           		tst.w	$10(a1)
   30945/   18402 : 6706                		beq.s	loc_18636
   30946/   18404 : 117C 0008 001C      		move.b	#8,$1C(a0)
   30947/   1840A :                     
   30948/   1840A :                     loc_18636:
   30949/   1840A : 6006                		bra.s	Obj73_Display
   30950/   1840C :                     ; ===========================================================================
   30951/   1840C :                     
   30952/   1840C :                     Obj73_FlameDel:				; XREF: Obj73_FlameMain
   30953/   1840C : 4EF9 0000 D40E      		jmp	DeleteObject
   30954/   18412 :                     ; ===========================================================================
   30955/   18412 :                     
   30956/   18412 :                     Obj73_Display:
   30957/   18412 : 43F9 0001 7A96      		lea	(Ani_Eggman).l,a1
   30958/   18418 : 4EB9 0000 A4FE      		jsr	AnimateSprite
   30959/   1841E :                     
   30960/   1841E :                     loc_1864A:
   30961/   1841E : 2268 0034           		movea.l	$34(a0),a1
   30962/   18422 : 3169 0008 0008      		move.w	8(a1),8(a0)
   30963/   18428 : 3169 000C 000C      		move.w	$C(a1),$C(a0)
   30964/   1842E : 1169 0022 0022      		move.b	$22(a1),$22(a0)
   30965/   18434 : 7003                		moveq	#3,d0
   30966/   18436 : C028 0022           		and.b	$22(a0),d0
   30967/   1843A : 0228 00FC 0001      		andi.b	#-4,1(a0)
   30968/   18440 : 8128 0001           		or.b	d0,1(a0)
   30969/   18444 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   30970/   1844A :                     ; ===========================================================================
   30971/   1844A :                     
   30972/   1844A :                     Obj73_TubeMain:				; XREF: Obj73_Index
   30973/   1844A : 2268 0034           		movea.l	$34(a0),a1
   30974/   1844E : 0C29 0008 0025      		cmpi.b	#8,$25(a1)
   30975/   18454 : 6606                		bne.s	loc_18688
   30976/   18456 : 4A28 0001           		tst.b	1(a0)
   30977/   1845A : 6A16                		bpl.s	Obj73_TubeDel
   30978/   1845C :                     
   30979/   1845C :                     loc_18688:
   30980/   1845C : 217C 0001 7BAE      		move.l	#Map_BossItems,4(a0)
            18462 : 0004             
   30981/   18464 : 317C 246C 0002      		move.w	#$246C,2(a0)
   30982/   1846A : 117C 0004 001A      		move.b	#4,$1A(a0)
   30983/   18470 : 60AC                		bra.s	loc_1864A
   30984/   18472 :                     ; ===========================================================================
   30985/   18472 :                     
   30986/   18472 :                     Obj73_TubeDel:
   30987/   18472 : 4EF9 0000 D40E      		jmp	DeleteObject
   30988/   18478 :                     ; ===========================================================================
   30989/   18478 :                     ; ---------------------------------------------------------------------------
   30990/   18478 :                     ; Object 74 - lava that	Eggman drops (MZ)
   30991/   18478 :                     ; ---------------------------------------------------------------------------
   30992/   18478 :                     
   30993/   18478 :                     Obj74:					; XREF: Obj_Index
   30994/   18478 : 7000                		moveq	#0,d0
   30995/   1847A : 1028 0024           		move.b	$24(a0),d0
   30996/   1847E : 303B 000C           		move.w	Obj74_Index(pc,d0.w),d0
   30997/   18482 : 4EBB 0008           		jsr	Obj74_Index(pc,d0.w)
   30998/   18486 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   30999/   1848C :                     ; ===========================================================================
   31000/   1848C : 0008                Obj74_Index:	dc.w Obj74_Main-Obj74_Index
   31001/   1848E : 0062                		dc.w Obj74_Action-Obj74_Index
   31002/   18490 : 01CE                		dc.w loc_18886-Obj74_Index
   31003/   18492 : 01F4                		dc.w Obj74_Delete3-Obj74_Index
   31004/   18494 :                     ; ===========================================================================
   31005/   18494 :                     
   31006/   18494 :                     Obj74_Main:				; XREF: Obj74_Index
   31007/   18494 : 117C 0008 0016      		move.b	#8,$16(a0)
   31008/   1849A : 117C 0008 0017      		move.b	#8,$17(a0)
   31009/   184A0 : 217C 0000 B150      		move.l	#Map_obj14,4(a0)
            184A6 : 0004             
   31010/   184A8 : 317C 0345 0002      		move.w	#$345,2(a0)
   31011/   184AE : 117C 0004 0001      		move.b	#4,1(a0)
   31012/   184B4 : 117C 0005 0018      		move.b	#5,$18(a0)
   31013/   184BA : 3168 000C 0038      		move.w	$C(a0),$38(a0)
   31014/   184C0 : 117C 0008 0019      		move.b	#8,$19(a0)
   31015/   184C6 : 5428 0024           		addq.b	#2,$24(a0)
   31016/   184CA : 4A28 0028           		tst.b	$28(a0)
   31017/   184CE : 660E                		bne.s	loc_1870A
   31018/   184D0 : 117C 008B 0020      		move.b	#$8B,$20(a0)
   31019/   184D6 : 5428 0024           		addq.b	#2,$24(a0)
   31020/   184DA : 6000 017E           		bra.w	loc_18886
   31021/   184DE :                     ; ===========================================================================
   31022/   184DE :                     
   31023/   184DE :                     loc_1870A:
   31024/   184DE : 117C 001E 0029      		move.b	#$1E,$29(a0)
   31025/   184E4 : 303C 00AE           		move.w	#$AE,d0
   31026/   184E8 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play lava sound
   31027/   184EE :                     
   31028/   184EE :                     Obj74_Action:				; XREF: Obj74_Index
   31029/   184EE : 7000                		moveq	#0,d0
   31030/   184F0 : 1028 0025           		move.b	$25(a0),d0
   31031/   184F4 : 303B 0028           		move.w	Obj74_Index2(pc,d0.w),d0
   31032/   184F8 : 4EBB 0024           		jsr	Obj74_Index2(pc,d0.w)
   31033/   184FC : 4EB9 0000 D3AC      		jsr	SpeedToPos
   31034/   18502 : 43F9 0000 E28C      		lea	(Ani_obj14).l,a1
   31035/   18508 : 4EB9 0000 A4FE      		jsr	AnimateSprite
   31036/   1850E : 0C68 02E8 000C      		cmpi.w	#$2E8,$C(a0)
   31037/   18514 : 6202                		bhi.s	Obj74_Delete
   31038/   18516 : 4E75                		rts	
   31039/   18518 :                     ; ===========================================================================
   31040/   18518 :                     
   31041/   18518 :                     Obj74_Delete:
   31042/   18518 : 4EF9 0000 D40E      		jmp	DeleteObject
   31043/   1851E :                     ; ===========================================================================
   31044/   1851E : 0008                Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
   31045/   18520 : 0038                		dc.w Obj74_MakeFlame-Obj74_Index2
   31046/   18522 : 00A6                		dc.w Obj74_Duplicate-Obj74_Index2
   31047/   18524 : 00E8                		dc.w Obj74_FallEdge-Obj74_Index2
   31048/   18526 :                     ; ===========================================================================
   31049/   18526 :                     
   31050/   18526 :                     Obj74_Drop:				; XREF: Obj74_Index2
   31051/   18526 : 08E8 0001 0022      		bset	#1,$22(a0)
   31052/   1852C : 5328 0029           		subq.b	#1,$29(a0)
   31053/   18530 : 6A22                		bpl.s	locret_18780
   31054/   18532 : 117C 008B 0020      		move.b	#$8B,$20(a0)
   31055/   18538 : 4228 0028           		clr.b	$28(a0)
   31056/   1853C : 0668 0018 0012      		addi.w	#$18,$12(a0)
   31057/   18542 : 08A8 0001 0022      		bclr	#1,$22(a0)
   31058/   18548 : 6100 C6BE           		bsr.w	ObjHitFloor
   31059/   1854C : 4A41                		tst.w	d1
   31060/   1854E : 6A04                		bpl.s	locret_18780
   31061/   18550 : 5428 0025           		addq.b	#2,$25(a0)
   31062/   18554 :                     
   31063/   18554 :                     locret_18780:
   31064/   18554 : 4E75                		rts	
   31065/   18556 :                     ; ===========================================================================
   31066/   18556 :                     
   31067/   18556 :                     Obj74_MakeFlame:			; XREF: Obj74_Index2
   31068/   18556 : 5568 000C           		subq.w	#2,$C(a0)
   31069/   1855A : 08E8 0007 0002      		bset	#7,2(a0)
   31070/   18560 : 317C 00A0 0010      		move.w	#$A0,$10(a0)
   31071/   18566 : 4268 0012           		clr.w	$12(a0)
   31072/   1856A : 3168 0008 0030      		move.w	8(a0),$30(a0)
   31073/   18570 : 3168 000C 0038      		move.w	$C(a0),$38(a0)
   31074/   18576 : 117C 0003 0029      		move.b	#3,$29(a0)
   31075/   1857C : 4EB9 0000 D86E      		jsr	SingleObjLoad2
   31076/   18582 : 661A                		bne.s	loc_187CA
   31077/   18584 : 47D1                		lea	(a1),a3
   31078/   18586 : 45D0                		lea	(a0),a2
   31079/   18588 : 7003                		moveq	#3,d0
   31080/   1858A :                     
   31081/   1858A :                     Obj74_Loop:
   31082/   1858A : 26DA                		move.l	(a2)+,(a3)+
   31083/   1858C : 26DA                		move.l	(a2)+,(a3)+
   31084/   1858E : 26DA                		move.l	(a2)+,(a3)+
   31085/   18590 : 26DA                		move.l	(a2)+,(a3)+
   31086/   18592 : 51C8 FFF6           		dbf	d0,Obj74_Loop
   31087/   18596 :                     
   31088/   18596 : 4469 0010           		neg.w	$10(a1)
   31089/   1859A : 5429 0025           		addq.b	#2,$25(a1)
   31090/   1859E :                     
   31091/   1859E :                     loc_187CA:
   31092/   1859E : 5428 0025           		addq.b	#2,$25(a0)
   31093/   185A2 : 4E75                		rts	
   31094/   185A4 :                     
   31095/   185A4 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   31096/   185A4 :                     
   31097/   185A4 :                     
   31098/   185A4 :                     Obj74_Duplicate2:			; XREF: Obj74_Duplicate
   31099/   185A4 : 4EB9 0000 D86E      		jsr	SingleObjLoad2
   31100/   185AA : 6616                		bne.s	locret_187EE
   31101/   185AC : 3368 0008 0008      		move.w	8(a0),8(a1)
   31102/   185B2 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   31103/   185B8 : 12BC 0074           		move.b	#$74,(a1)
   31104/   185BC : 337C 0067 0028      		move.w	#$67,$28(a1)
   31105/   185C2 :                     
   31106/   185C2 :                     locret_187EE:
   31107/   185C2 : 4E75                		rts	
   31108/   185C4 :                     ; End of function Obj74_Duplicate2
   31109/   185C4 :                     
   31110/   185C4 :                     ; ===========================================================================
   31111/   185C4 :                     
   31112/   185C4 :                     Obj74_Duplicate:			; XREF: Obj74_Index2
   31113/   185C4 : 6100 C642           		bsr.w	ObjHitFloor
   31114/   185C8 : 4A41                		tst.w	d1
   31115/   185CA : 6A2E                		bpl.s	loc_18826
   31116/   185CC : 3028 0008           		move.w	8(a0),d0
   31117/   185D0 : 0C40 1940           		cmpi.w	#$1940,d0
   31118/   185D4 : 6E2A                		bgt.s	loc_1882C
   31119/   185D6 : 3228 0030           		move.w	$30(a0),d1
   31120/   185DA : B240                		cmp.w	d0,d1
   31121/   185DC : 6714                		beq.s	loc_1881E
   31122/   185DE : 0240 0010           		andi.w	#$10,d0
   31123/   185E2 : 0241 0010           		andi.w	#$10,d1
   31124/   185E6 : B240                		cmp.w	d0,d1
   31125/   185E8 : 6708                		beq.s	loc_1881E
   31126/   185EA : 61B8                		bsr.s	Obj74_Duplicate2
   31127/   185EC : 3168 0008 0032      		move.w	8(a0),$32(a0)
   31128/   185F2 :                     
   31129/   185F2 :                     loc_1881E:
   31130/   185F2 : 3168 0008 0030      		move.w	8(a0),$30(a0)
   31131/   185F8 : 4E75                		rts	
   31132/   185FA :                     ; ===========================================================================
   31133/   185FA :                     
   31134/   185FA :                     loc_18826:
   31135/   185FA : 5428 0025           		addq.b	#2,$25(a0)
   31136/   185FE : 4E75                		rts	
   31137/   18600 :                     ; ===========================================================================
   31138/   18600 :                     
   31139/   18600 :                     loc_1882C:
   31140/   18600 : 5428 0024           		addq.b	#2,$24(a0)
   31141/   18604 : 4E75                		rts	
   31142/   18606 :                     ; ===========================================================================
   31143/   18606 :                     
   31144/   18606 :                     Obj74_FallEdge:				; XREF: Obj74_Index2
   31145/   18606 : 08A8 0001 0022      		bclr	#1,$22(a0)
   31146/   1860C : 0668 0024 0012      		addi.w	#$24,$12(a0)	; make flame fall
   31147/   18612 : 3028 0008           		move.w	8(a0),d0
   31148/   18616 : 9068 0032           		sub.w	$32(a0),d0
   31149/   1861A : 6A02                		bpl.s	loc_1884A
   31150/   1861C : 4440                		neg.w	d0
   31151/   1861E :                     
   31152/   1861E :                     loc_1884A:
   31153/   1861E : 0C40 0012           		cmpi.w	#$12,d0
   31154/   18622 : 6606                		bne.s	loc_18856
   31155/   18624 : 08A8 0007 0002      		bclr	#7,2(a0)
   31156/   1862A :                     
   31157/   1862A :                     loc_18856:
   31158/   1862A : 6100 C5DC           		bsr.w	ObjHitFloor
   31159/   1862E : 4A41                		tst.w	d1
   31160/   18630 : 6A20                		bpl.s	locret_1887E
   31161/   18632 : 5328 0029           		subq.b	#1,$29(a0)
   31162/   18636 : 671C                		beq.s	Obj74_Delete2
   31163/   18638 : 4268 0012           		clr.w	$12(a0)
   31164/   1863C : 3168 0032 0008      		move.w	$32(a0),8(a0)
   31165/   18642 : 3168 0038 000C      		move.w	$38(a0),$C(a0)
   31166/   18648 : 08E8 0007 0002      		bset	#7,2(a0)
   31167/   1864E : 5528 0025           		subq.b	#2,$25(a0)
   31168/   18652 :                     
   31169/   18652 :                     locret_1887E:
   31170/   18652 : 4E75                		rts	
   31171/   18654 :                     ; ===========================================================================
   31172/   18654 :                     
   31173/   18654 :                     Obj74_Delete2:
   31174/   18654 : 4EF9 0000 D40E      		jmp	DeleteObject
   31175/   1865A :                     ; ===========================================================================
   31176/   1865A :                     
   31177/   1865A :                     loc_18886:				; XREF: Obj74_Index
   31178/   1865A : 08E8 0007 0002      		bset	#7,2(a0)
   31179/   18660 : 5328 0029           		subq.b	#1,$29(a0)
   31180/   18664 : 660E                		bne.s	Obj74_Animate
   31181/   18666 : 117C 0001 001C      		move.b	#1,$1C(a0)
   31182/   1866C : 5968 000C           		subq.w	#4,$C(a0)
   31183/   18670 : 4228 0020           		clr.b	$20(a0)
   31184/   18674 :                     
   31185/   18674 :                     Obj74_Animate:
   31186/   18674 : 43F9 0000 E28C      		lea	(Ani_obj14).l,a1
   31187/   1867A : 4EF9 0000 A4FE      		jmp	AnimateSprite
   31188/   18680 :                     ; ===========================================================================
   31189/   18680 :                     
   31190/   18680 :                     Obj74_Delete3:				; XREF: Obj74_Index
   31191/   18680 : 4EF9 0000 D40E      		jmp	DeleteObject
   31192/   18686 :                     ; ===========================================================================
   31193/   18686 :                     
   31194/   18686 :                     Obj7A_Delete:
   31195/   18686 : 4EF9 0000 D40E      		jmp	DeleteObject
   31196/   1868C :                     ; ===========================================================================
   31197/   1868C :                     ; ---------------------------------------------------------------------------
   31198/   1868C :                     ; Object 7A - Eggman (SLZ)
   31199/   1868C :                     ; ---------------------------------------------------------------------------
   31200/   1868C :                     
   31201/   1868C :                     Obj7A:					; XREF: Obj_Index
   31202/   1868C : 7000                		moveq	#0,d0
   31203/   1868E : 1028 0024           		move.b	$24(a0),d0
   31204/   18692 : 323B 0006           		move.w	Obj7A_Index(pc,d0.w),d1
   31205/   18696 : 4EFB 1002           		jmp	Obj7A_Index(pc,d1.w)
   31206/   1869A :                     ; ===========================================================================
   31207/   1869A : 0016                Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
   31208/   1869C : 00B4                		dc.w Obj7A_ShipMain-Obj7A_Index
   31209/   1869E : 0328                		dc.w Obj7A_FaceMain-Obj7A_Index
   31210/   186A0 : 036C                		dc.w Obj7A_FlameMain-Obj7A_Index
   31211/   186A2 : 03DC                		dc.w Obj7A_TubeMain-Obj7A_Index
   31212/   186A4 :                     
   31213/   186A4 : 0200 04             Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
   31214/   186A7 : 0401 04             		dc.b 4,	1, 4
   31215/   186AA : 0607 04             		dc.b 6,	7, 4
   31216/   186AD : 0800 03             		dc.b 8,	0, 3
   31217/   186B0 :                     ; ===========================================================================
   31218/   186B0 :                     
   31219/   186B0 :                     Obj7A_Main:				; XREF: Obj7A_Index
   31220/   186B0 : 317C 2188 0008      		move.w	#$2188,8(a0)
   31221/   186B6 : 317C 0228 000C      		move.w	#$228,$C(a0)
   31222/   186BC : 3168 0008 0030      		move.w	8(a0),$30(a0)
   31223/   186C2 : 3168 000C 0038      		move.w	$C(a0),$38(a0)
   31224/   186C8 : 117C 000F 0020      		move.b	#$F,$20(a0)
   31225/   186CE : 117C 0008 0021      		move.b	#8,$21(a0)	; set number of	hits to	8
   31226/   186D4 : 45FA FFCE           		lea	Obj7A_ObjData(pc),a2
   31227/   186D8 : 2248                		movea.l	a0,a1
   31228/   186DA : 7203                		moveq	#3,d1
   31229/   186DC : 6018                		bra.s	Obj7A_LoadBoss
   31230/   186DE :                     ; ===========================================================================
   31231/   186DE :                     
   31232/   186DE :                     Obj7A_Loop:
   31233/   186DE : 4EB9 0000 D86E      		jsr	SingleObjLoad2
   31234/   186E4 : 6648                		bne.s	loc_1895C
   31235/   186E6 : 12BC 007A           		move.b	#$7A,0(a1)
   31236/   186EA : 3368 0008 0008      		move.w	8(a0),8(a1)
   31237/   186F0 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   31238/   186F6 :                     
   31239/   186F6 :                     Obj7A_LoadBoss:				; XREF: Obj7A_Main
   31240/   186F6 : 08A8 0000 0022      		bclr	#0,$22(a0)
   31241/   186FC : 4229 0025           		clr.b	$25(a1)
   31242/   18700 : 135A 0024           		move.b	(a2)+,$24(a1)
   31243/   18704 : 135A 001C           		move.b	(a2)+,$1C(a1)
   31244/   18708 : 135A 0018           		move.b	(a2)+,$18(a1)
   31245/   1870C : 237C 0001 7AE6      		move.l	#Map_Eggman,4(a1)
            18712 : 0004             
   31246/   18714 : 337C 0400 0002      		move.w	#$400,2(a1)
   31247/   1871A : 137C 0004 0001      		move.b	#4,1(a1)
   31248/   18720 : 137C 0020 0019      		move.b	#$20,$19(a1)
   31249/   18726 : 2348 0034           		move.l	a0,$34(a1)
   31250/   1872A : 51C9 FFB2           		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
   31251/   1872E :                     
   31252/   1872E :                     loc_1895C:
   31253/   1872E : 43F8 D040           		lea	($FFFFD040).w,a1
   31254/   18732 : 45E8 002A           		lea	$2A(a0),a2
   31255/   18736 : 705E                		moveq	#$5E,d0
   31256/   18738 : 723E                		moveq	#$3E,d1
   31257/   1873A :                     
   31258/   1873A :                     loc_18968:
   31259/   1873A : B011                		cmp.b	(a1),d0
   31260/   1873C : 6608                		bne.s	loc_18974
   31261/   1873E : 4A29 0028           		tst.b	$28(a1)
   31262/   18742 : 6702                		beq.s	loc_18974
   31263/   18744 : 34C9                		move.w	a1,(a2)+
   31264/   18746 :                     
   31265/   18746 :                     loc_18974:
   31266/   18746 : D2FC 0040           		adda.w	#$40,a1
   31267/   1874A : 51C9 FFEE           		dbf	d1,loc_18968
   31268/   1874E :                     
   31269/   1874E :                     Obj7A_ShipMain:				; XREF: Obj7A_Index
   31270/   1874E : 7000                		moveq	#0,d0
   31271/   18750 : 1028 0025           		move.b	$25(a0),d0
   31272/   18754 : 303B 0028           		move.w	Obj7A_ShipIndex(pc,d0.w),d0
   31273/   18758 : 4EBB 0024           		jsr	Obj7A_ShipIndex(pc,d0.w)
   31274/   1875C : 43F9 0001 7A96      		lea	(Ani_Eggman).l,a1
   31275/   18762 : 4EB9 0000 A4FE      		jsr	AnimateSprite
   31276/   18768 : 7003                		moveq	#3,d0
   31277/   1876A : C028 0022           		and.b	$22(a0),d0
   31278/   1876E : 0228 00FC 0001      		andi.b	#$FC,1(a0)
   31279/   18774 : 8128 0001           		or.b	d0,1(a0)
   31280/   18778 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   31281/   1877E :                     ; ===========================================================================
   31282/   1877E : 000C                Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
   31283/   18780 : 00B2                		dc.w loc_18A5E-Obj7A_ShipIndex
   31284/   18782 : 0126                		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
   31285/   18784 : 019C                		dc.w loc_18B48-Obj7A_ShipIndex
   31286/   18786 : 01D4                		dc.w loc_18B80-Obj7A_ShipIndex
   31287/   18788 : 021A                		dc.w loc_18BC6-Obj7A_ShipIndex
   31288/   1878A :                     ; ===========================================================================
   31289/   1878A :                     
   31290/   1878A :                     loc_189B8:				; XREF: Obj7A_ShipIndex
   31291/   1878A : 317C FF00 0010      		move.w	#-$100,$10(a0)
   31292/   18790 : 0C68 2120 0030      		cmpi.w	#$2120,$30(a0)
   31293/   18796 : 6404                		bcc.s	loc_189CA
   31294/   18798 : 5428 0025           		addq.b	#2,$25(a0)
   31295/   1879C :                     
   31296/   1879C :                     loc_189CA:
   31297/   1879C : 6100 EEE8           		bsr.w	BossMove
   31298/   187A0 : 1028 003F           		move.b	$3F(a0),d0
   31299/   187A4 : 5428 003F           		addq.b	#2,$3F(a0)
   31300/   187A8 : 4EB9 0000 27C0      		jsr	(CalcSine).l
   31301/   187AE : EC40                		asr.w	#6,d0
   31302/   187B0 : D068 0038           		add.w	$38(a0),d0
   31303/   187B4 : 3140 000C           		move.w	d0,$C(a0)
   31304/   187B8 : 3168 0030 0008      		move.w	$30(a0),8(a0)
   31305/   187BE : 6010                		bra.s	loc_189FE
   31306/   187C0 :                     ; ===========================================================================
   31307/   187C0 :                     
   31308/   187C0 :                     loc_189EE:
   31309/   187C0 : 6100 EEC4           		bsr.w	BossMove
   31310/   187C4 : 3168 0038 000C      		move.w	$38(a0),$C(a0)
   31311/   187CA : 3168 0030 0008      		move.w	$30(a0),8(a0)
   31312/   187D0 :                     
   31313/   187D0 :                     loc_189FE:
   31314/   187D0 : 0C28 0006 0025      		cmpi.b	#6,$25(a0)
   31315/   187D6 : 643E                		bcc.s	locret_18A44
   31316/   187D8 : 4A28 0022           		tst.b	$22(a0)
   31317/   187DC : 6B3A                		bmi.s	loc_18A46
   31318/   187DE : 4A28 0020           		tst.b	$20(a0)
   31319/   187E2 : 6632                		bne.s	locret_18A44
   31320/   187E4 : 4A28 003E           		tst.b	$3E(a0)
   31321/   187E8 : 6610                		bne.s	loc_18A28
   31322/   187EA : 117C 0020 003E      		move.b	#$20,$3E(a0)
   31323/   187F0 : 303C 00AC           		move.w	#$AC,d0
   31324/   187F4 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play boss damage sound
   31325/   187FA :                     
   31326/   187FA :                     loc_18A28:
   31327/   187FA : 43F8 FB22           		lea	($FFFFFB22).w,a1
   31328/   187FE : 7000                		moveq	#0,d0
   31329/   18800 : 4A51                		tst.w	(a1)
   31330/   18802 : 6604                		bne.s	loc_18A36
   31331/   18804 : 303C 0EEE           		move.w	#$EEE,d0
   31332/   18808 :                     
   31333/   18808 :                     loc_18A36:
   31334/   18808 : 3280                		move.w	d0,(a1)
   31335/   1880A : 5328 003E           		subq.b	#1,$3E(a0)
   31336/   1880E : 6606                		bne.s	locret_18A44
   31337/   18810 : 117C 000F 0020      		move.b	#$F,$20(a0)
   31338/   18816 :                     
   31339/   18816 :                     locret_18A44:
   31340/   18816 : 4E75                		rts	
   31341/   18818 :                     ; ===========================================================================
   31342/   18818 :                     
   31343/   18818 :                     loc_18A46:
   31344/   18818 : 7064                		moveq	#100,d0
   31345/   1881A : 6100 3ECC           		bsr.w	AddPoints
   31346/   1881E : 117C 0006 0025      		move.b	#6,$25(a0)
   31347/   18824 : 117C 0078 003C      		move.b	#$78,$3C(a0)
   31348/   1882A : 4268 0010           		clr.w	$10(a0)
   31349/   1882E : 4E75                		rts	
   31350/   18830 :                     ; ===========================================================================
   31351/   18830 :                     
   31352/   18830 :                     loc_18A5E:				; XREF: Obj7A_ShipIndex
   31353/   18830 : 3028 0030           		move.w	$30(a0),d0
   31354/   18834 : 317C 0200 0010      		move.w	#$200,$10(a0)
   31355/   1883A : 0828 0000 0022      		btst	#0,$22(a0)
   31356/   18840 : 660C                		bne.s	loc_18A7C
   31357/   18842 : 4468 0010           		neg.w	$10(a0)
   31358/   18846 : 0C40 2008           		cmpi.w	#$2008,d0
   31359/   1884A : 6E0E                		bgt.s	loc_18A88
   31360/   1884C : 6006                		bra.s	loc_18A82
   31361/   1884E :                     ; ===========================================================================
   31362/   1884E :                     
   31363/   1884E :                     loc_18A7C:
   31364/   1884E : 0C40 2138           		cmpi.w	#$2138,d0
   31365/   18852 : 6D06                		blt.s	loc_18A88
   31366/   18854 :                     
   31367/   18854 :                     loc_18A82:
   31368/   18854 : 0868 0000 0022      		bchg	#0,$22(a0)
   31369/   1885A :                     
   31370/   1885A :                     loc_18A88:
   31371/   1885A : 3028 0008           		move.w	8(a0),d0
   31372/   1885E : 72FF                		moveq	#-1,d1
   31373/   18860 : 7402                		moveq	#2,d2
   31374/   18862 : 45E8 002A           		lea	$2A(a0),a2
   31375/   18866 : 7828                		moveq	#$28,d4
   31376/   18868 : 4A68 0010           		tst.w	$10(a0)
   31377/   1886C : 6A02                		bpl.s	loc_18A9E
   31378/   1886E : 4444                		neg.w	d4
   31379/   18870 :                     
   31380/   18870 :                     loc_18A9E:
   31381/   18870 : 321A                		move.w	(a2)+,d1
   31382/   18872 : 2641                		movea.l	d1,a3
   31383/   18874 : 082B 0003 0022      		btst	#3,$22(a3)
   31384/   1887A : 660A                		bne.s	loc_18AB4
   31385/   1887C : 362B 0008           		move.w	8(a3),d3
   31386/   18880 : D644                		add.w	d4,d3
   31387/   18882 : 9640                		sub.w	d0,d3
   31388/   18884 : 670C                		beq.s	loc_18AC0
   31389/   18886 :                     
   31390/   18886 :                     loc_18AB4:
   31391/   18886 : 51CA FFE8           		dbf	d2,loc_18A9E
   31392/   1888A :                     
   31393/   1888A : 1142 0028           		move.b	d2,$28(a0)
   31394/   1888E : 6000 FF0C           		bra.w	loc_189CA
   31395/   18892 :                     ; ===========================================================================
   31396/   18892 :                     
   31397/   18892 :                     loc_18AC0:
   31398/   18892 : 1142 0028           		move.b	d2,$28(a0)
   31399/   18896 : 5428 0025           		addq.b	#2,$25(a0)
   31400/   1889A : 117C 0028 003C      		move.b	#$28,$3C(a0)
   31401/   188A0 : 6000 FEFA           		bra.w	loc_189CA
   31402/   188A4 :                     ; ===========================================================================
   31403/   188A4 :                     
   31404/   188A4 :                     Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
   31405/   188A4 : 0C28 0028 003C      		cmpi.b	#$28,$3C(a0)
   31406/   188AA : 665C                		bne.s	loc_18B36
   31407/   188AC : 70FF                		moveq	#-1,d0
   31408/   188AE : 1028 0028           		move.b	$28(a0),d0
   31409/   188B2 : 4880                		ext.w	d0
   31410/   188B4 : 6B5C                		bmi.s	loc_18B40
   31411/   188B6 : 5540                		subq.w	#2,d0
   31412/   188B8 : 4440                		neg.w	d0
   31413/   188BA : D040                		add.w	d0,d0
   31414/   188BC : 43E8 002A           		lea	$2A(a0),a1
   31415/   188C0 : 3031 0000           		move.w	(a1,d0.w),d0
   31416/   188C4 : 2440                		movea.l	d0,a2
   31417/   188C6 : 43F8 D040           		lea	($FFFFD040).w,a1
   31418/   188CA : 723E                		moveq	#$3E,d1
   31419/   188CC :                     
   31420/   188CC :                     loc_18AFA:
   31421/   188CC : B0A9 003C           		cmp.l	$3C(a1),d0
   31422/   188D0 : 6740                		beq.s	loc_18B40
   31423/   188D2 : D2FC 0040           		adda.w	#$40,a1
   31424/   188D6 : 51C9 FFF4           		dbf	d1,loc_18AFA
   31425/   188DA :                     
   31426/   188DA : 2F08                		move.l	a0,-(sp)
   31427/   188DC : 41D2                		lea	(a2),a0
   31428/   188DE : 4EB9 0000 D86E      		jsr	SingleObjLoad2
   31429/   188E4 : 205F                		movea.l	(sp)+,a0
   31430/   188E6 : 662A                		bne.s	loc_18B40
   31431/   188E8 : 12BC 007B           		move.b	#$7B,(a1)	; load spiked ball object
   31432/   188EC : 3368 0008 0008      		move.w	8(a0),8(a1)
   31433/   188F2 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   31434/   188F8 : 0669 0020 000C      		addi.w	#$20,$C(a1)
   31435/   188FE : 136A 0022 0022      		move.b	$22(a2),$22(a1)
   31436/   18904 : 234A 003C           		move.l	a2,$3C(a1)
   31437/   18908 :                     
   31438/   18908 :                     loc_18B36:
   31439/   18908 : 5328 003C           		subq.b	#1,$3C(a0)
   31440/   1890C : 6704                		beq.s	loc_18B40
   31441/   1890E : 6000 FEC0           		bra.w	loc_189FE
   31442/   18912 :                     ; ===========================================================================
   31443/   18912 :                     
   31444/   18912 :                     loc_18B40:
   31445/   18912 : 5528 0025           		subq.b	#2,$25(a0)
   31446/   18916 : 6000 FE84           		bra.w	loc_189CA
   31447/   1891A :                     ; ===========================================================================
   31448/   1891A :                     
   31449/   1891A :                     loc_18B48:				; XREF: Obj7A_ShipIndex
   31450/   1891A : 5328 003C           		subq.b	#1,$3C(a0)
   31451/   1891E : 6B04                		bmi.s	loc_18B52
   31452/   18920 : 6000 ED22           		bra.w	BossDefeated
   31453/   18924 :                     ; ===========================================================================
   31454/   18924 :                     
   31455/   18924 :                     loc_18B52:
   31456/   18924 : 5428 0025           		addq.b	#2,$25(a0)
   31457/   18928 : 4268 0012           		clr.w	$12(a0)
   31458/   1892C : 08E8 0000 0022      		bset	#0,$22(a0)
   31459/   18932 : 08A8 0007 0022      		bclr	#7,$22(a0)
   31460/   18938 : 4268 0010           		clr.w	$10(a0)
   31461/   1893C : 117C 00E8 003C      		move.b	#-$18,$3C(a0)
   31462/   18942 : 4A38 F7A7           		tst.b	($FFFFF7A7).w
   31463/   18946 : 6606                		bne.s	loc_18B7C
   31464/   18948 : 11FC 0001 F7A7      		move.b	#1,($FFFFF7A7).w
   31465/   1894E :                     
   31466/   1894E :                     loc_18B7C:
   31467/   1894E : 6000 FE80           		bra.w	loc_189FE
   31468/   18952 :                     ; ===========================================================================
   31469/   18952 :                     
   31470/   18952 :                     loc_18B80:				; XREF: Obj7A_ShipIndex
   31471/   18952 : 5228 003C           		addq.b	#1,$3C(a0)
   31472/   18956 : 670A                		beq.s	loc_18B90
   31473/   18958 : 6A0E                		bpl.s	loc_18B96
   31474/   1895A : 0668 0018 0012      		addi.w	#$18,$12(a0)
   31475/   18960 : 6032                		bra.s	loc_18BC2
   31476/   18962 :                     ; ===========================================================================
   31477/   18962 :                     
   31478/   18962 :                     loc_18B90:
   31479/   18962 : 4268 0012           		clr.w	$12(a0)
   31480/   18966 : 602C                		bra.s	loc_18BC2
   31481/   18968 :                     ; ===========================================================================
   31482/   18968 :                     
   31483/   18968 :                     loc_18B96:
   31484/   18968 : 0C28 0020 003C      		cmpi.b	#$20,$3C(a0)
   31485/   1896E : 6510                		bcs.s	loc_18BAE
   31486/   18970 : 6714                		beq.s	loc_18BB4
   31487/   18972 : 0C28 002A 003C      		cmpi.b	#$2A,$3C(a0)
   31488/   18978 : 651A                		bcs.s	loc_18BC2
   31489/   1897A : 5428 0025           		addq.b	#2,$25(a0)
   31490/   1897E : 6014                		bra.s	loc_18BC2
   31491/   18980 :                     ; ===========================================================================
   31492/   18980 :                     
   31493/   18980 :                     loc_18BAE:
   31494/   18980 : 5168 0012           		subq.w	#8,$12(a0)
   31495/   18984 : 600E                		bra.s	loc_18BC2
   31496/   18986 :                     ; ===========================================================================
   31497/   18986 :                     
   31498/   18986 :                     loc_18BB4:
   31499/   18986 : 4268 0012           		clr.w	$12(a0)
   31500/   1898A : 303C 0084           		move.w	#$84,d0
   31501/   1898E : 4EB9 0000 117C      		jsr	(PlaySound).l	; play SLZ music
   31502/   18994 :                     
   31503/   18994 :                     loc_18BC2:
   31504/   18994 : 6000 FE2A           		bra.w	loc_189EE
   31505/   18998 :                     ; ===========================================================================
   31506/   18998 :                     
   31507/   18998 :                     loc_18BC6:				; XREF: Obj7A_ShipIndex
   31508/   18998 : 317C 0400 0010      		move.w	#$400,$10(a0)
   31509/   1899E : 317C FFC0 0012      		move.w	#-$40,$12(a0)
   31510/   189A4 : 0C78 2160 F72A      		cmpi.w	#$2160,($FFFFF72A).w
   31511/   189AA : 6406                		bcc.s	loc_18BE0
   31512/   189AC : 5478 F72A           		addq.w	#2,($FFFFF72A).w
   31513/   189B0 : 6008                		bra.s	loc_18BE8
   31514/   189B2 :                     ; ===========================================================================
   31515/   189B2 :                     
   31516/   189B2 :                     loc_18BE0:
   31517/   189B2 : 4A28 0001           		tst.b	1(a0)
   31518/   189B6 : 6A00 FCCE           		bpl.w	Obj7A_Delete
   31519/   189BA :                     
   31520/   189BA :                     loc_18BE8:
   31521/   189BA : 6100 ECCA           		bsr.w	BossMove
   31522/   189BE : 6000 FDDC           		bra.w	loc_189CA
   31523/   189C2 :                     ; ===========================================================================
   31524/   189C2 :                     
   31525/   189C2 :                     Obj7A_FaceMain:				; XREF: Obj7A_Index
   31526/   189C2 : 7000                		moveq	#0,d0
   31527/   189C4 : 7201                		moveq	#1,d1
   31528/   189C6 : 2268 0034           		movea.l	$34(a0),a1
   31529/   189CA : 1029 0025           		move.b	$25(a1),d0
   31530/   189CE : 0C00 0006           		cmpi.b	#6,d0
   31531/   189D2 : 6B04                		bmi.s	loc_18C06
   31532/   189D4 : 720A                		moveq	#$A,d1
   31533/   189D6 : 6014                		bra.s	loc_18C1A
   31534/   189D8 :                     ; ===========================================================================
   31535/   189D8 :                     
   31536/   189D8 :                     loc_18C06:
   31537/   189D8 : 4A29 0020           		tst.b	$20(a1)
   31538/   189DC : 6604                		bne.s	loc_18C10
   31539/   189DE : 7205                		moveq	#5,d1
   31540/   189E0 : 600A                		bra.s	loc_18C1A
   31541/   189E2 :                     ; ===========================================================================
   31542/   189E2 :                     
   31543/   189E2 :                     loc_18C10:
   31544/   189E2 : 0C38 0004 D024      		cmpi.b	#4,($FFFFD024).w
   31545/   189E8 : 6502                		bcs.s	loc_18C1A
   31546/   189EA : 7204                		moveq	#4,d1
   31547/   189EC :                     
   31548/   189EC :                     loc_18C1A:
   31549/   189EC : 1141 001C           		move.b	d1,$1C(a0)
   31550/   189F0 : 0C00 000A           		cmpi.b	#$A,d0
   31551/   189F4 : 660E                		bne.s	loc_18C32
   31552/   189F6 : 117C 0006 001C      		move.b	#6,$1C(a0)
   31553/   189FC : 4A28 0001           		tst.b	1(a0)
   31554/   18A00 : 6A00 FC84           		bpl.w	Obj7A_Delete
   31555/   18A04 :                     
   31556/   18A04 :                     loc_18C32:
   31557/   18A04 : 6038                		bra.s	loc_18C6C
   31558/   18A06 :                     ; ===========================================================================
   31559/   18A06 :                     
   31560/   18A06 :                     Obj7A_FlameMain:			; XREF: Obj7A_Index
   31561/   18A06 : 117C 0008 001C      		move.b	#8,$1C(a0)
   31562/   18A0C : 2268 0034           		movea.l	$34(a0),a1
   31563/   18A10 : 0C29 000A 0025      		cmpi.b	#$A,$25(a1)
   31564/   18A16 : 6610                		bne.s	loc_18C56
   31565/   18A18 : 4A28 0001           		tst.b	1(a0)
   31566/   18A1C : 6A00 FC68           		bpl.w	Obj7A_Delete
   31567/   18A20 : 117C 000B 001C      		move.b	#$B,$1C(a0)
   31568/   18A26 : 6016                		bra.s	loc_18C6C
   31569/   18A28 :                     ; ===========================================================================
   31570/   18A28 :                     
   31571/   18A28 :                     loc_18C56:
   31572/   18A28 : 0C29 0008 0025      		cmpi.b	#8,$25(a1)
   31573/   18A2E : 6E0E                		bgt.s	loc_18C6C
   31574/   18A30 : 0C29 0004 0025      		cmpi.b	#4,$25(a1)
   31575/   18A36 : 6D06                		blt.s	loc_18C6C
   31576/   18A38 : 117C 0007 001C      		move.b	#7,$1C(a0)
   31577/   18A3E :                     
   31578/   18A3E :                     loc_18C6C:
   31579/   18A3E : 43F9 0001 7A96      		lea	(Ani_Eggman).l,a1
   31580/   18A44 : 4EB9 0000 A4FE      		jsr	AnimateSprite
   31581/   18A4A :                     
   31582/   18A4A :                     loc_18C78:
   31583/   18A4A : 2268 0034           		movea.l	$34(a0),a1
   31584/   18A4E : 3169 0008 0008      		move.w	8(a1),8(a0)
   31585/   18A54 : 3169 000C 000C      		move.w	$C(a1),$C(a0)
   31586/   18A5A : 1169 0022 0022      		move.b	$22(a1),$22(a0)
   31587/   18A60 : 7003                		moveq	#3,d0
   31588/   18A62 : C028 0022           		and.b	$22(a0),d0
   31589/   18A66 : 0228 00FC 0001      		andi.b	#-4,1(a0)
   31590/   18A6C : 8128 0001           		or.b	d0,1(a0)
   31591/   18A70 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   31592/   18A76 :                     ; ===========================================================================
   31593/   18A76 :                     
   31594/   18A76 :                     Obj7A_TubeMain:				; XREF: Obj7A_Index
   31595/   18A76 : 2268 0034           		movea.l	$34(a0),a1
   31596/   18A7A : 0C29 000A 0025      		cmpi.b	#$A,$25(a1)
   31597/   18A80 : 6608                		bne.s	loc_18CB8
   31598/   18A82 : 4A28 0001           		tst.b	1(a0)
   31599/   18A86 : 6A00 FBFE           		bpl.w	Obj7A_Delete
   31600/   18A8A :                     
   31601/   18A8A :                     loc_18CB8:
   31602/   18A8A : 217C 0001 7BAE      		move.l	#Map_BossItems,4(a0)
            18A90 : 0004             
   31603/   18A92 : 317C 246C 0002      		move.w	#$246C,2(a0)
   31604/   18A98 : 117C 0003 001A      		move.b	#3,$1A(a0)
   31605/   18A9E : 60AA                		bra.s	loc_18C78
   31606/   18AA0 :                     ; ===========================================================================
   31607/   18AA0 :                     ; ---------------------------------------------------------------------------
   31608/   18AA0 :                     ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
   31609/   18AA0 :                     ; ---------------------------------------------------------------------------
   31610/   18AA0 :                     
   31611/   18AA0 :                     Obj7B:					; XREF: Obj_Index
   31612/   18AA0 : 7000                		moveq	#0,d0
   31613/   18AA2 : 1028 0024           		move.b	$24(a0),d0
   31614/   18AA6 : 303B 002E           		move.w	Obj7B_Index(pc,d0.w),d0
   31615/   18AAA : 4EBB 002A           		jsr	Obj7B_Index(pc,d0.w)
   31616/   18AAE : 3028 0030           		move.w	$30(a0),d0
   31617/   18AB2 : 0240 FF80           		andi.w	#$FF80,d0
   31618/   18AB6 : 3238 F700           		move.w	($FFFFF700).w,d1
   31619/   18ABA : 0441 0080           		subi.w	#$80,d1
   31620/   18ABE : 0241 FF80           		andi.w	#$FF80,d1
   31621/   18AC2 : 9041                		sub.w	d1,d0
   31622/   18AC4 : 6B00 FBC0           		bmi.w	Obj7A_Delete
   31623/   18AC8 : 0C40 0280           		cmpi.w	#$280,d0
   31624/   18ACC : 6200 FBB8           		bhi.w	Obj7A_Delete
   31625/   18AD0 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   31626/   18AD6 :                     ; ===========================================================================
   31627/   18AD6 : 000C                Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
   31628/   18AD8 : 0068                		dc.w Obj7B_Fall-Obj7B_Index
   31629/   18ADA : 00C2                		dc.w loc_18DC6-Obj7B_Index
   31630/   18ADC : 01A6                		dc.w loc_18EAA-Obj7B_Index
   31631/   18ADE : 0326                		dc.w Obj7B_Explode-Obj7B_Index
   31632/   18AE0 : 03AC                		dc.w Obj7B_MoveFrag-Obj7B_Index
   31633/   18AE2 :                     ; ===========================================================================
   31634/   18AE2 :                     
   31635/   18AE2 :                     Obj7B_Main:				; XREF: Obj7B_Index
   31636/   18AE2 : 217C 0001 1794      		move.l	#Map_obj5Ea,4(a0)
            18AE8 : 0004             
   31637/   18AEA : 317C 0518 0002      		move.w	#$518,2(a0)
   31638/   18AF0 : 117C 0001 001A      		move.b	#1,$1A(a0)
   31639/   18AF6 : 0028 0004 0001      		ori.b	#4,1(a0)
   31640/   18AFC : 117C 0004 0018      		move.b	#4,$18(a0)
   31641/   18B02 : 117C 008B 0020      		move.b	#$8B,$20(a0)
   31642/   18B08 : 117C 000C 0019      		move.b	#$C,$19(a0)
   31643/   18B0E : 2268 003C           		movea.l	$3C(a0),a1
   31644/   18B12 : 3169 0008 0030      		move.w	8(a1),$30(a0)
   31645/   18B18 : 3169 000C 0034      		move.w	$C(a1),$34(a0)
   31646/   18B1E : 08E8 0000 0022      		bset	#0,$22(a0)
   31647/   18B24 : 3028 0008           		move.w	8(a0),d0
   31648/   18B28 : B069 0008           		cmp.w	8(a1),d0
   31649/   18B2C : 6E0C                		bgt.s	loc_18D68
   31650/   18B2E : 08A8 0000 0022      		bclr	#0,$22(a0)
   31651/   18B34 : 117C 0002 003A      		move.b	#2,$3A(a0)
   31652/   18B3A :                     
   31653/   18B3A :                     loc_18D68:
   31654/   18B3A : 5428 0024           		addq.b	#2,$24(a0)
   31655/   18B3E :                     
   31656/   18B3E :                     Obj7B_Fall:				; XREF: Obj7B_Index
   31657/   18B3E : 4EB9 0000 D380      		jsr	ObjectFall
   31658/   18B44 : 2268 003C           		movea.l	$3C(a0),a1
   31659/   18B48 : 45F9 0001 8DEA      		lea	(word_19018).l,a2
   31660/   18B4E : 7000                		moveq	#0,d0
   31661/   18B50 : 1029 001A           		move.b	$1A(a1),d0
   31662/   18B54 : 3228 0008           		move.w	8(a0),d1
   31663/   18B58 : 9268 0030           		sub.w	$30(a0),d1
   31664/   18B5C : 6402                		bcc.s	loc_18D8E
   31665/   18B5E : 5440                		addq.w	#2,d0
   31666/   18B60 :                     
   31667/   18B60 :                     loc_18D8E:
   31668/   18B60 : D040                		add.w	d0,d0
   31669/   18B62 : 3228 0034           		move.w	$34(a0),d1
   31670/   18B66 : D272 0000           		add.w	(a2,d0.w),d1
   31671/   18B6A : B268 000C           		cmp.w	$C(a0),d1
   31672/   18B6E : 6E26                		bgt.s	locret_18DC4
   31673/   18B70 : 2268 003C           		movea.l	$3C(a0),a1
   31674/   18B74 : 7202                		moveq	#2,d1
   31675/   18B76 : 0828 0000 0022      		btst	#0,$22(a0)
   31676/   18B7C : 6702                		beq.s	loc_18DAE
   31677/   18B7E : 7200                		moveq	#0,d1
   31678/   18B80 :                     
   31679/   18B80 :                     loc_18DAE:
   31680/   18B80 : 317C 00F0 0028      		move.w	#$F0,$28(a0)
   31681/   18B86 : 117C 000A 001F      		move.b	#10,$1F(a0)	; set frame duration to	10 frames
   31682/   18B8C : 1168 001F 001E      		move.b	$1F(a0),$1E(a0)
   31683/   18B92 : 6000 01E0           		bra.w	loc_18FA2
   31684/   18B96 :                     ; ===========================================================================
   31685/   18B96 :                     
   31686/   18B96 :                     locret_18DC4:
   31687/   18B96 : 4E75                		rts	
   31688/   18B98 :                     ; ===========================================================================
   31689/   18B98 :                     
   31690/   18B98 :                     loc_18DC6:				; XREF: Obj7B_Index
   31691/   18B98 : 2268 003C           		movea.l	$3C(a0),a1
   31692/   18B9C : 7000                		moveq	#0,d0
   31693/   18B9E : 1028 003A           		move.b	$3A(a0),d0
   31694/   18BA2 : 9029 003A           		sub.b	$3A(a1),d0
   31695/   18BA6 : 6754                		beq.s	loc_18E2A
   31696/   18BA8 : 6402                		bcc.s	loc_18DDA
   31697/   18BAA : 4400                		neg.b	d0
   31698/   18BAC :                     
   31699/   18BAC :                     loc_18DDA:
   31700/   18BAC : 323C F7E8           		move.w	#-$818,d1
   31701/   18BB0 : 343C FEEC           		move.w	#-$114,d2
   31702/   18BB4 : 0C00 0001           		cmpi.b	#1,d0
   31703/   18BB8 : 6718                		beq.s	loc_18E00
   31704/   18BBA : 323C F6A0           		move.w	#-$960,d1
   31705/   18BBE : 343C FF0C           		move.w	#-$F4,d2
   31706/   18BC2 : 0C69 09C0 0038      		cmpi.w	#$9C0,$38(a1)
   31707/   18BC8 : 6D08                		blt.s	loc_18E00
   31708/   18BCA : 323C F5E0           		move.w	#-$A20,d1
   31709/   18BCE : 343C FF80           		move.w	#-$80,d2
   31710/   18BD2 :                     
   31711/   18BD2 :                     loc_18E00:
   31712/   18BD2 : 3141 0012           		move.w	d1,$12(a0)
   31713/   18BD6 : 3142 0010           		move.w	d2,$10(a0)
   31714/   18BDA : 3028 0008           		move.w	8(a0),d0
   31715/   18BDE : 9068 0030           		sub.w	$30(a0),d0
   31716/   18BE2 : 6404                		bcc.s	loc_18E16
   31717/   18BE4 : 4468 0010           		neg.w	$10(a0)
   31718/   18BE8 :                     
   31719/   18BE8 :                     loc_18E16:
   31720/   18BE8 : 117C 0001 001A      		move.b	#1,$1A(a0)
   31721/   18BEE : 317C 0020 0028      		move.w	#$20,$28(a0)
   31722/   18BF4 : 5428 0024           		addq.b	#2,$24(a0)
   31723/   18BF8 : 6000 0082           		bra.w	loc_18EAA
   31724/   18BFC :                     ; ===========================================================================
   31725/   18BFC :                     
   31726/   18BFC :                     loc_18E2A:				; XREF: loc_18DC6
   31727/   18BFC : 45F9 0001 8DEA      		lea	(word_19018).l,a2
   31728/   18C02 : 7000                		moveq	#0,d0
   31729/   18C04 : 1029 001A           		move.b	$1A(a1),d0
   31730/   18C08 : 343C 0028           		move.w	#$28,d2
   31731/   18C0C : 3228 0008           		move.w	8(a0),d1
   31732/   18C10 : 9268 0030           		sub.w	$30(a0),d1
   31733/   18C14 : 6404                		bcc.s	loc_18E48
   31734/   18C16 : 4442                		neg.w	d2
   31735/   18C18 : 5440                		addq.w	#2,d0
   31736/   18C1A :                     
   31737/   18C1A :                     loc_18E48:
   31738/   18C1A : D040                		add.w	d0,d0
   31739/   18C1C : 3228 0034           		move.w	$34(a0),d1
   31740/   18C20 : D272 0000           		add.w	(a2,d0.w),d1
   31741/   18C24 : 3141 000C           		move.w	d1,$C(a0)
   31742/   18C28 : D468 0030           		add.w	$30(a0),d2
   31743/   18C2C : 3142 0008           		move.w	d2,8(a0)
   31744/   18C30 : 4268 000E           		clr.w	$E(a0)
   31745/   18C34 : 4268 000A           		clr.w	$A(a0)
   31746/   18C38 : 5368 0028           		subq.w	#1,$28(a0)
   31747/   18C3C : 660E                		bne.s	loc_18E7A
   31748/   18C3E : 317C 0020 0028      		move.w	#$20,$28(a0)
   31749/   18C44 : 117C 0008 0024      		move.b	#8,$24(a0)
   31750/   18C4A : 4E75                		rts	
   31751/   18C4C :                     ; ===========================================================================
   31752/   18C4C :                     
   31753/   18C4C :                     loc_18E7A:
   31754/   18C4C : 0C68 0078 0028      		cmpi.w	#$78,$28(a0)
   31755/   18C52 : 6606                		bne.s	loc_18E88
   31756/   18C54 : 117C 0005 001F      		move.b	#5,$1F(a0)
   31757/   18C5A :                     
   31758/   18C5A :                     loc_18E88:
   31759/   18C5A : 0C68 003C 0028      		cmpi.w	#$3C,$28(a0)
   31760/   18C60 : 6606                		bne.s	loc_18E96
   31761/   18C62 : 117C 0002 001F      		move.b	#2,$1F(a0)
   31762/   18C68 :                     
   31763/   18C68 :                     loc_18E96:
   31764/   18C68 : 5328 001E           		subq.b	#1,$1E(a0)
   31765/   18C6C : 6E0C                		bgt.s	locret_18EA8
   31766/   18C6E : 0868 0000 001A      		bchg	#0,$1A(a0)
   31767/   18C74 : 1168 001F 001E      		move.b	$1F(a0),$1E(a0)
   31768/   18C7A :                     
   31769/   18C7A :                     locret_18EA8:
   31770/   18C7A : 4E75                		rts	
   31771/   18C7C :                     ; ===========================================================================
   31772/   18C7C :                     
   31773/   18C7C :                     loc_18EAA:				; XREF: Obj7B_Index
   31774/   18C7C : 43F8 D040           		lea	($FFFFD040).w,a1
   31775/   18C80 : 707A                		moveq	#$7A,d0
   31776/   18C82 : 7240                		moveq	#$40,d1
   31777/   18C84 : 743E                		moveq	#$3E,d2
   31778/   18C86 :                     
   31779/   18C86 :                     loc_18EB4:
   31780/   18C86 : B011                		cmp.b	(a1),d0
   31781/   18C88 : 6708                		beq.s	loc_18EC0
   31782/   18C8A : D2C1                		adda.w	d1,a1
   31783/   18C8C : 51CA FFF8           		dbf	d2,loc_18EB4
   31784/   18C90 :                     
   31785/   18C90 : 6078                		bra.s	loc_18F38
   31786/   18C92 :                     ; ===========================================================================
   31787/   18C92 :                     
   31788/   18C92 :                     loc_18EC0:
   31789/   18C92 : 3029 0008           		move.w	8(a1),d0
   31790/   18C96 : 3229 000C           		move.w	$C(a1),d1
   31791/   18C9A : 3428 0008           		move.w	8(a0),d2
   31792/   18C9E : 3628 000C           		move.w	$C(a0),d3
   31793/   18CA2 : 45FA 0150           		lea	byte_19022(pc),a2
   31794/   18CA6 : 47FA 0150           		lea	byte_19026(pc),a3
   31795/   18CAA : 181A                		move.b	(a2)+,d4
   31796/   18CAC : 4884                		ext.w	d4
   31797/   18CAE : D044                		add.w	d4,d0
   31798/   18CB0 : 181B                		move.b	(a3)+,d4
   31799/   18CB2 : 4884                		ext.w	d4
   31800/   18CB4 : D444                		add.w	d4,d2
   31801/   18CB6 : B440                		cmp.w	d0,d2
   31802/   18CB8 : 6550                		bcs.s	loc_18F38
   31803/   18CBA : 181A                		move.b	(a2)+,d4
   31804/   18CBC : 4884                		ext.w	d4
   31805/   18CBE : D044                		add.w	d4,d0
   31806/   18CC0 : 181B                		move.b	(a3)+,d4
   31807/   18CC2 : 4884                		ext.w	d4
   31808/   18CC4 : D444                		add.w	d4,d2
   31809/   18CC6 : B042                		cmp.w	d2,d0
   31810/   18CC8 : 6540                		bcs.s	loc_18F38
   31811/   18CCA : 181A                		move.b	(a2)+,d4
   31812/   18CCC : 4884                		ext.w	d4
   31813/   18CCE : D244                		add.w	d4,d1
   31814/   18CD0 : 181B                		move.b	(a3)+,d4
   31815/   18CD2 : 4884                		ext.w	d4
   31816/   18CD4 : D644                		add.w	d4,d3
   31817/   18CD6 : B641                		cmp.w	d1,d3
   31818/   18CD8 : 6530                		bcs.s	loc_18F38
   31819/   18CDA : 181A                		move.b	(a2)+,d4
   31820/   18CDC : 4884                		ext.w	d4
   31821/   18CDE : D244                		add.w	d4,d1
   31822/   18CE0 : 181B                		move.b	(a3)+,d4
   31823/   18CE2 : 4884                		ext.w	d4
   31824/   18CE4 : D644                		add.w	d4,d3
   31825/   18CE6 : B243                		cmp.w	d3,d1
   31826/   18CE8 : 6520                		bcs.s	loc_18F38
   31827/   18CEA : 5428 0024           		addq.b	#2,$24(a0)
   31828/   18CEE : 4268 0028           		clr.w	$28(a0)
   31829/   18CF2 : 4229 0020           		clr.b	$20(a1)
   31830/   18CF6 : 5329 0021           		subq.b	#1,$21(a1)
   31831/   18CFA : 660E                		bne.s	loc_18F38
   31832/   18CFC : 08E9 0007 0022      		bset	#7,$22(a1)
   31833/   18D02 : 4268 0010           		clr.w	$10(a0)
   31834/   18D06 : 4268 0012           		clr.w	$12(a0)
   31835/   18D0A :                     
   31836/   18D0A :                     loc_18F38:
   31837/   18D0A : 4A68 0012           		tst.w	$12(a0)
   31838/   18D0E : 6A1E                		bpl.s	loc_18F5C
   31839/   18D10 : 4EB9 0000 D380      		jsr	ObjectFall
   31840/   18D16 : 3028 0034           		move.w	$34(a0),d0
   31841/   18D1A : 0440 002F           		subi.w	#$2F,d0
   31842/   18D1E : B068 000C           		cmp.w	$C(a0),d0
   31843/   18D22 : 6E06                		bgt.s	loc_18F58
   31844/   18D24 : 4EB9 0000 D380      		jsr	ObjectFall
   31845/   18D2A :                     
   31846/   18D2A :                     loc_18F58:
   31847/   18D2A : 6000 FF20           		bra.w	loc_18E7A
   31848/   18D2E :                     ; ===========================================================================
   31849/   18D2E :                     
   31850/   18D2E :                     loc_18F5C:
   31851/   18D2E : 4EB9 0000 D380      		jsr	ObjectFall
   31852/   18D34 : 2268 003C           		movea.l	$3C(a0),a1
   31853/   18D38 : 45F9 0001 8DEA      		lea	(word_19018).l,a2
   31854/   18D3E : 7000                		moveq	#0,d0
   31855/   18D40 : 1029 001A           		move.b	$1A(a1),d0
   31856/   18D44 : 3228 0008           		move.w	8(a0),d1
   31857/   18D48 : 9268 0030           		sub.w	$30(a0),d1
   31858/   18D4C : 6402                		bcc.s	loc_18F7E
   31859/   18D4E : 5440                		addq.w	#2,d0
   31860/   18D50 :                     
   31861/   18D50 :                     loc_18F7E:
   31862/   18D50 : D040                		add.w	d0,d0
   31863/   18D52 : 3228 0034           		move.w	$34(a0),d1
   31864/   18D56 : D272 0000           		add.w	(a2,d0.w),d1
   31865/   18D5A : B268 000C           		cmp.w	$C(a0),d1
   31866/   18D5E : 6ECA                		bgt.s	loc_18F58
   31867/   18D60 : 2268 003C           		movea.l	$3C(a0),a1
   31868/   18D64 : 7202                		moveq	#2,d1
   31869/   18D66 : 4A68 0010           		tst.w	$10(a0)
   31870/   18D6A : 6B02                		bmi.s	loc_18F9C
   31871/   18D6C : 7200                		moveq	#0,d1
   31872/   18D6E :                     
   31873/   18D6E :                     loc_18F9C:
   31874/   18D6E : 317C 0000 0028      		move.w	#0,$28(a0)
   31875/   18D74 :                     
   31876/   18D74 :                     loc_18FA2:
   31877/   18D74 : 1341 003A           		move.b	d1,$3A(a1)
   31878/   18D78 : 1141 003A           		move.b	d1,$3A(a0)
   31879/   18D7C : B229 001A           		cmp.b	$1A(a1),d1
   31880/   18D80 : 6758                		beq.s	loc_19008
   31881/   18D82 : 08A9 0003 0022      		bclr	#3,$22(a1)
   31882/   18D88 : 6750                		beq.s	loc_19008
   31883/   18D8A : 4229 0025           		clr.b	$25(a1)
   31884/   18D8E : 137C 0002 0024      		move.b	#2,$24(a1)
   31885/   18D94 : 45F8 D000           		lea	($FFFFD000).w,a2
   31886/   18D98 : 3568 0012 0012      		move.w	$12(a0),$12(a2)
   31887/   18D9E : 446A 0012           		neg.w	$12(a2)
   31888/   18DA2 : 0C29 0001 001A      		cmpi.b	#1,$1A(a1)
   31889/   18DA8 : 6604                		bne.s	loc_18FDC
   31890/   18DAA : E0EA 0012           		asr	$12(a2)
   31891/   18DAE :                     
   31892/   18DAE :                     loc_18FDC:
   31893/   18DAE : 08EA 0001 0022      		bset	#1,$22(a2)
   31894/   18DB4 : 08AA 0003 0022      		bclr	#3,$22(a2)
   31895/   18DBA : 422A 003C           		clr.b	$3C(a2)
   31896/   18DBE : 2F08                		move.l	a0,-(sp)
   31897/   18DC0 : 41D2                		lea	(a2),a0
   31898/   18DC2 : 4EB9 0001 314E      		jsr	Obj01_ChkRoll
   31899/   18DC8 : 205F                		movea.l	(sp)+,a0
   31900/   18DCA : 157C 0002 0024      		move.b	#2,$24(a2)
   31901/   18DD0 : 303C 00CC           		move.w	#$CC,d0
   31902/   18DD4 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play "spring" sound
   31903/   18DDA :                     
   31904/   18DDA :                     loc_19008:
   31905/   18DDA : 4268 0010           		clr.w	$10(a0)
   31906/   18DDE : 4268 0012           		clr.w	$12(a0)
   31907/   18DE2 : 5428 0024           		addq.b	#2,$24(a0)
   31908/   18DE6 : 6000 FE64           		bra.w	loc_18E7A
   31909/   18DEA :                     ; ===========================================================================
   31910/   18DEA : FFF8 FFE4 FFD1      word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
            18DF0 : FFE4 FFF8          
   31911/   18DF4 : (MACRO)              		even
   31912/   18DF4 : E830 E830           byte_19022:	dc.b $E8, $30, $E8, $30
   31913/   18DF8 : (MACRO)              		even
   31914/   18DF8 : 08F0 08F0           byte_19026:	dc.b 8,	$F0, 8,	$F0
   31915/   18DFC : (MACRO)              		even
   31916/   18DFC :                     ; ===========================================================================
   31917/   18DFC :                     
   31918/   18DFC :                     Obj7B_Explode:				; XREF: Obj7B_Index
   31919/   18DFC : 10BC 003F           		move.b	#$3F,(a0)
   31920/   18E00 : 4228 0024           		clr.b	$24(a0)
   31921/   18E04 : 0C68 0020 0028      		cmpi.w	#$20,$28(a0)
   31922/   18E0A : 6702                		beq.s	Obj7B_MakeFrag
   31923/   18E0C : 4E75                		rts	
   31924/   18E0E :                     ; ===========================================================================
   31925/   18E0E :                     
   31926/   18E0E :                     Obj7B_MakeFrag:
   31927/   18E0E : 3168 0034 000C      		move.w	$34(a0),$C(a0)
   31928/   18E14 : 7203                		moveq	#3,d1
   31929/   18E16 : 45FA 005A           		lea	Obj7B_FragSpeed(pc),a2
   31930/   18E1A :                     
   31931/   18E1A :                     Obj7B_Loop:
   31932/   18E1A : 4EB9 0000 D858      		jsr	SingleObjLoad
   31933/   18E20 : 664A                		bne.s	loc_1909A
   31934/   18E22 : 12BC 007B           		move.b	#$7B,(a1)	; load shrapnel	object
   31935/   18E26 : 137C 000A 0024      		move.b	#$A,$24(a1)
   31936/   18E2C : 237C 0001 8EB0      		move.l	#Map_obj7B,4(a1)
            18E32 : 0004             
   31937/   18E34 : 137C 0003 0018      		move.b	#3,$18(a1)
   31938/   18E3A : 337C 0518 0002      		move.w	#$518,2(a1)
   31939/   18E40 : 3368 0008 0008      		move.w	8(a0),8(a1)
   31940/   18E46 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   31941/   18E4C : 335A 0010           		move.w	(a2)+,$10(a1)
   31942/   18E50 : 335A 0012           		move.w	(a2)+,$12(a1)
   31943/   18E54 : 137C 0098 0020      		move.b	#$98,$20(a1)
   31944/   18E5A : 0029 0004 0001      		ori.b	#4,1(a1)
   31945/   18E60 : 08E9 0007 0001      		bset	#7,1(a1)
   31946/   18E66 : 137C 000C 0019      		move.b	#$C,$19(a1)
   31947/   18E6C :                     
   31948/   18E6C :                     loc_1909A:
   31949/   18E6C : 51C9 FFAC           		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
   31950/   18E70 :                     
   31951/   18E70 : 4E75                		rts	
   31952/   18E72 :                     ; ===========================================================================
   31953/   18E72 : FF00 FCC0           Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
   31954/   18E76 : FF60 FDC0           		dc.w $FF60, $FDC0
   31955/   18E7A : 0100 FCC0           		dc.w $100, $FCC0
   31956/   18E7E : 00A0 FDC0           		dc.w $A0, $FDC0
   31957/   18E82 :                     ; ===========================================================================
   31958/   18E82 :                     
   31959/   18E82 :                     Obj7B_MoveFrag:				; XREF: Obj7B_Index
   31960/   18E82 : 4EB9 0000 D3AC      		jsr	SpeedToPos
   31961/   18E88 : 3168 0008 0030      		move.w	8(a0),$30(a0)
   31962/   18E8E : 3168 000C 0034      		move.w	$C(a0),$34(a0)
   31963/   18E94 : 0668 0018 0012      		addi.w	#$18,$12(a0)
   31964/   18E9A : 7004                		moveq	#4,d0
   31965/   18E9C : C078 FE0E           		and.w	($FFFFFE0E).w,d0
   31966/   18EA0 : E448                		lsr.w	#2,d0
   31967/   18EA2 : 1140 001A           		move.b	d0,$1A(a0)
   31968/   18EA6 : 4A28 0001           		tst.b	1(a0)
   31969/   18EAA : 6A00 F7DA           		bpl.w	Obj7A_Delete
   31970/   18EAE : 4E75                		rts	
   31971/   18EB0 :                     ; ===========================================================================
   31972/   18EB0 :                     ; ---------------------------------------------------------------------------
   31973/   18EB0 :                     ; Sprite mappings - exploding spikeys that the SLZ boss	drops
   31974/   18EB0 :                     ; ---------------------------------------------------------------------------
   31975/   18EB0 :                     Map_obj7B:
   31976/   18EB0 :                     	include "_mappings/obj7B.asm"
(1)    1/   18EB0 :                     ; ---------------------------------------------------------------------------
(1)    2/   18EB0 :                     ; Sprite mappings - exploding spikeys that the SLZ boss	drops
(1)    3/   18EB0 :                     ; ---------------------------------------------------------------------------
(1)    4/   18EB0 : 0004                		dc.w byte_190E2-Map_obj7B
(1)    5/   18EB2 : 000A                		dc.w byte_190E8-Map_obj7B
(1)    6/   18EB4 : 01                  byte_190E2:	dc.b 1
(1)    7/   18EB5 : FC00 0027 FC        		dc.b $FC, 0, 0,	$27, $FC
(1)    8/   18EBA : 01                  byte_190E8:	dc.b 1
(1)    9/   18EBB : FC00 0028 FC        		dc.b $FC, 0, 0,	$28, $FC
(1)   10/   18EC0 : (MACRO)              		even
   31977/   18EC0 :                     
   31978/   18EC0 :                     ; ===========================================================================
   31979/   18EC0 :                     ; ---------------------------------------------------------------------------
   31980/   18EC0 :                     ; Object 75 - Eggman (SYZ)
   31981/   18EC0 :                     ; ---------------------------------------------------------------------------
   31982/   18EC0 :                     
   31983/   18EC0 :                     Obj75:					; XREF: Obj_Index
   31984/   18EC0 : 7000                		moveq	#0,d0
   31985/   18EC2 : 1028 0024           		move.b	$24(a0),d0
   31986/   18EC6 : 323B 0006           		move.w	Obj75_Index(pc,d0.w),d1
   31987/   18ECA : 4EFB 1002           		jmp	Obj75_Index(pc,d1.w)
   31988/   18ECE :                     ; ===========================================================================
   31989/   18ECE : 0016                Obj75_Index:	dc.w Obj75_Main-Obj75_Index
   31990/   18ED0 : 0094                		dc.w Obj75_ShipMain-Obj75_Index
   31991/   18ED2 : 0424                		dc.w Obj75_FaceMain-Obj75_Index
   31992/   18ED4 : 048E                		dc.w Obj75_FlameMain-Obj75_Index
   31993/   18ED6 : 04FA                		dc.w Obj75_SpikeMain-Obj75_Index
   31994/   18ED8 :                     
   31995/   18ED8 : 0200 05             Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
   31996/   18EDB : 0401 05             		dc.b 4,	1, 5
   31997/   18EDE : 0607 05             		dc.b 6,	7, 5
   31998/   18EE1 : 0800 05             		dc.b 8,	0, 5
   31999/   18EE4 :                     ; ===========================================================================
   32000/   18EE4 :                     
   32001/   18EE4 :                     Obj75_Main:				; XREF: Obj75_Index
   32002/   18EE4 : 317C 2DB0 0008      		move.w	#$2DB0,8(a0)
   32003/   18EEA : 317C 04DA 000C      		move.w	#$4DA,$C(a0)
   32004/   18EF0 : 3168 0008 0030      		move.w	8(a0),$30(a0)
   32005/   18EF6 : 3168 000C 0038      		move.w	$C(a0),$38(a0)
   32006/   18EFC : 117C 000F 0020      		move.b	#$F,$20(a0)
   32007/   18F02 : 117C 0008 0021      		move.b	#8,$21(a0)	; set number of	hits to	8
   32008/   18F08 : 45FA FFCE           		lea	Obj75_ObjData(pc),a2
   32009/   18F0C : 2248                		movea.l	a0,a1
   32010/   18F0E : 7203                		moveq	#3,d1
   32011/   18F10 : 6018                		bra.s	Obj75_LoadBoss
   32012/   18F12 :                     ; ===========================================================================
   32013/   18F12 :                     
   32014/   18F12 :                     Obj75_Loop:
   32015/   18F12 : 4EB9 0000 D86E      		jsr	SingleObjLoad2
   32016/   18F18 : 6648                		bne.s	Obj75_ShipMain
   32017/   18F1A : 12BC 0075           		move.b	#$75,(a1)
   32018/   18F1E : 3368 0008 0008      		move.w	8(a0),8(a1)
   32019/   18F24 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   32020/   18F2A :                     
   32021/   18F2A :                     Obj75_LoadBoss:				; XREF: Obj75_Main
   32022/   18F2A : 08A8 0000 0022      		bclr	#0,$22(a0)
   32023/   18F30 : 4229 0025           		clr.b	$25(a1)
   32024/   18F34 : 135A 0024           		move.b	(a2)+,$24(a1)
   32025/   18F38 : 135A 001C           		move.b	(a2)+,$1C(a1)
   32026/   18F3C : 135A 0018           		move.b	(a2)+,$18(a1)
   32027/   18F40 : 237C 0001 7AE6      		move.l	#Map_Eggman,4(a1)
            18F46 : 0004             
   32028/   18F48 : 337C 0400 0002      		move.w	#$400,2(a1)
   32029/   18F4E : 137C 0004 0001      		move.b	#4,1(a1)
   32030/   18F54 : 137C 0020 0019      		move.b	#$20,$19(a1)
   32031/   18F5A : 2348 0034           		move.l	a0,$34(a1)
   32032/   18F5E : 51C9 FFB2           		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
   32033/   18F62 :                     
   32034/   18F62 :                     Obj75_ShipMain:				; XREF: Obj75_Index
   32035/   18F62 : 7000                		moveq	#0,d0
   32036/   18F64 : 1028 0025           		move.b	$25(a0),d0
   32037/   18F68 : 323B 0028           		move.w	Obj75_ShipIndex(pc,d0.w),d1
   32038/   18F6C : 4EBB 1024           		jsr	Obj75_ShipIndex(pc,d1.w)
   32039/   18F70 : 43F9 0001 7A96      		lea	(Ani_Eggman).l,a1
   32040/   18F76 : 4EB9 0000 A4FE      		jsr	AnimateSprite
   32041/   18F7C : 7003                		moveq	#3,d0
   32042/   18F7E : C028 0022           		and.b	$22(a0),d0
   32043/   18F82 : 0228 00FC 0001      		andi.b	#$FC,1(a0)
   32044/   18F88 : 8128 0001           		or.b	d0,1(a0)
   32045/   18F8C : 4EF9 0000 D3D2      		jmp	DisplaySprite
   32046/   18F92 :                     ; ===========================================================================
   32047/   18F92 : 000C 00B0           Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
   32048/   18F96 : 012C 02B4           		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
   32049/   18F9A : 02EC 0332           		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
   32050/   18F9E :                     ; ===========================================================================
   32051/   18F9E :                     
   32052/   18F9E :                     loc_191CC:				; XREF: Obj75_ShipIndex
   32053/   18F9E : 317C FF00 0010      		move.w	#-$100,$10(a0)
   32054/   18FA4 : 0C68 2D38 0030      		cmpi.w	#$2D38,$30(a0)
   32055/   18FAA : 6404                		bcc.s	loc_191DE
   32056/   18FAC : 5428 0025           		addq.b	#2,$25(a0)
   32057/   18FB0 :                     
   32058/   18FB0 :                     loc_191DE:
   32059/   18FB0 : 1028 003F           		move.b	$3F(a0),d0
   32060/   18FB4 : 5428 003F           		addq.b	#2,$3F(a0)
   32061/   18FB8 : 4EB9 0000 27C0      		jsr	(CalcSine).l
   32062/   18FBE : E440                		asr.w	#2,d0
   32063/   18FC0 : 3140 0012           		move.w	d0,$12(a0)
   32064/   18FC4 :                     
   32065/   18FC4 :                     loc_191F2:
   32066/   18FC4 : 6100 E6C0           		bsr.w	BossMove
   32067/   18FC8 : 3168 0038 000C      		move.w	$38(a0),$C(a0)
   32068/   18FCE : 3168 0030 0008      		move.w	$30(a0),8(a0)
   32069/   18FD4 :                     
   32070/   18FD4 :                     loc_19202:
   32071/   18FD4 : 3028 0008           		move.w	8(a0),d0
   32072/   18FD8 : 0440 2C00           		subi.w	#$2C00,d0
   32073/   18FDC : EA48                		lsr.w	#5,d0
   32074/   18FDE : 1140 0034           		move.b	d0,$34(a0)
   32075/   18FE2 : 0C28 0006 0025      		cmpi.b	#6,$25(a0)
   32076/   18FE8 : 643E                		bcc.s	locret_19256
   32077/   18FEA : 4A28 0022           		tst.b	$22(a0)
   32078/   18FEE : 6B3A                		bmi.s	loc_19258
   32079/   18FF0 : 4A28 0020           		tst.b	$20(a0)
   32080/   18FF4 : 6632                		bne.s	locret_19256
   32081/   18FF6 : 4A28 003E           		tst.b	$3E(a0)
   32082/   18FFA : 6610                		bne.s	loc_1923A
   32083/   18FFC : 117C 0020 003E      		move.b	#$20,$3E(a0)
   32084/   19002 : 303C 00AC           		move.w	#$AC,d0
   32085/   19006 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play boss damage sound
   32086/   1900C :                     
   32087/   1900C :                     loc_1923A:
   32088/   1900C : 43F8 FB22           		lea	($FFFFFB22).w,a1
   32089/   19010 : 7000                		moveq	#0,d0
   32090/   19012 : 4A51                		tst.w	(a1)
   32091/   19014 : 6604                		bne.s	loc_19248
   32092/   19016 : 303C 0EEE           		move.w	#$EEE,d0
   32093/   1901A :                     
   32094/   1901A :                     loc_19248:
   32095/   1901A : 3280                		move.w	d0,(a1)
   32096/   1901C : 5328 003E           		subq.b	#1,$3E(a0)
   32097/   19020 : 6606                		bne.s	locret_19256
   32098/   19022 : 117C 000F 0020      		move.b	#$F,$20(a0)
   32099/   19028 :                     
   32100/   19028 :                     locret_19256:
   32101/   19028 : 4E75                		rts	
   32102/   1902A :                     ; ===========================================================================
   32103/   1902A :                     
   32104/   1902A :                     loc_19258:				; XREF: loc_19202
   32105/   1902A : 7064                		moveq	#100,d0
   32106/   1902C : 6100 36BA           		bsr.w	AddPoints
   32107/   19030 : 117C 0006 0025      		move.b	#6,$25(a0)
   32108/   19036 : 317C 00B4 003C      		move.w	#$B4,$3C(a0)
   32109/   1903C : 4268 0010           		clr.w	$10(a0)
   32110/   19040 : 4E75                		rts	
   32111/   19042 :                     ; ===========================================================================
   32112/   19042 :                     
   32113/   19042 :                     loc_19270:				; XREF: Obj75_ShipIndex
   32114/   19042 : 3028 0030           		move.w	$30(a0),d0
   32115/   19046 : 317C 0140 0010      		move.w	#$140,$10(a0)
   32116/   1904C : 0828 0000 0022      		btst	#0,$22(a0)
   32117/   19052 : 660C                		bne.s	loc_1928E
   32118/   19054 : 4468 0010           		neg.w	$10(a0)
   32119/   19058 : 0C40 2C08           		cmpi.w	#$2C08,d0
   32120/   1905C : 6E12                		bgt.s	loc_1929E
   32121/   1905E : 6006                		bra.s	loc_19294
   32122/   19060 :                     ; ===========================================================================
   32123/   19060 :                     
   32124/   19060 :                     loc_1928E:
   32125/   19060 : 0C40 2D38           		cmpi.w	#$2D38,d0
   32126/   19064 : 6D0A                		blt.s	loc_1929E
   32127/   19066 :                     
   32128/   19066 :                     loc_19294:
   32129/   19066 : 0868 0000 0022      		bchg	#0,$22(a0)
   32130/   1906C : 4228 003D           		clr.b	$3D(a0)
   32131/   19070 :                     
   32132/   19070 :                     loc_1929E:
   32133/   19070 : 0440 2C10           		subi.w	#$2C10,d0
   32134/   19074 : 0240 001F           		andi.w	#$1F,d0
   32135/   19078 : 0440 001F           		subi.w	#$1F,d0
   32136/   1907C : 6A02                		bpl.s	loc_192AE
   32137/   1907E : 4440                		neg.w	d0
   32138/   19080 :                     
   32139/   19080 :                     loc_192AE:
   32140/   19080 : 5340                		subq.w	#1,d0
   32141/   19082 : 6E36                		bgt.s	loc_192E8
   32142/   19084 : 4A28 003D           		tst.b	$3D(a0)
   32143/   19088 : 6630                		bne.s	loc_192E8
   32144/   1908A : 3238 D008           		move.w	($FFFFD008).w,d1
   32145/   1908E : 0441 2C00           		subi.w	#$2C00,d1
   32146/   19092 : EA41                		asr.w	#5,d1
   32147/   19094 : B228 0034           		cmp.b	$34(a0),d1
   32148/   19098 : 6620                		bne.s	loc_192E8
   32149/   1909A : 7000                		moveq	#0,d0
   32150/   1909C : 1028 0034           		move.b	$34(a0),d0
   32151/   190A0 : EB40                		asl.w	#5,d0
   32152/   190A2 : 0640 2C10           		addi.w	#$2C10,d0
   32153/   190A6 : 3140 0030           		move.w	d0,$30(a0)
   32154/   190AA : 6100 0170           		bsr.w	Obj75_FindBlocks
   32155/   190AE : 5428 0025           		addq.b	#2,$25(a0)
   32156/   190B2 : 4268 0028           		clr.w	$28(a0)
   32157/   190B6 : 4268 0010           		clr.w	$10(a0)
   32158/   190BA :                     
   32159/   190BA :                     loc_192E8:
   32160/   190BA : 6000 FEF4           		bra.w	loc_191DE
   32161/   190BE :                     ; ===========================================================================
   32162/   190BE :                     
   32163/   190BE :                     loc_192EC:				; XREF: Obj75_ShipIndex
   32164/   190BE : 7000                		moveq	#0,d0
   32165/   190C0 : 1028 0028           		move.b	$28(a0),d0
   32166/   190C4 : 303B 0006           		move.w	off_192FA(pc,d0.w),d0
   32167/   190C8 : 4EFB 0002           		jmp	off_192FA(pc,d0.w)
   32168/   190CC :                     ; ===========================================================================
   32169/   190CC : 0008                off_192FA:	dc.w loc_19302-off_192FA
   32170/   190CE : 004E                		dc.w loc_19348-off_192FA
   32171/   190D0 : 0094                		dc.w loc_1938E-off_192FA
   32172/   190D2 : 00D6                		dc.w loc_193D0-off_192FA
   32173/   190D4 :                     ; ===========================================================================
   32174/   190D4 :                     
   32175/   190D4 :                     loc_19302:				; XREF: off_192FA
   32176/   190D4 : 317C 0180 0012      		move.w	#$180,$12(a0)
   32177/   190DA : 3028 0038           		move.w	$38(a0),d0
   32178/   190DE : 0C40 0556           		cmpi.w	#$556,d0
   32179/   190E2 : 6532                		bcs.s	loc_19344
   32180/   190E4 : 317C 0556 0038      		move.w	#$556,$38(a0)
   32181/   190EA : 4268 003C           		clr.w	$3C(a0)
   32182/   190EE : 70FF                		moveq	#-1,d0
   32183/   190F0 : 3028 0036           		move.w	$36(a0),d0
   32184/   190F4 : 6718                		beq.s	loc_1933C
   32185/   190F6 : 2240                		movea.l	d0,a1
   32186/   190F8 : 137C 00FF 0029      		move.b	#-1,$29(a1)
   32187/   190FE : 117C 00FF 0029      		move.b	#-1,$29(a0)
   32188/   19104 : 2348 0034           		move.l	a0,$34(a1)
   32189/   19108 : 317C 0032 003C      		move.w	#$32,$3C(a0)
   32190/   1910E :                     
   32191/   1910E :                     loc_1933C:
   32192/   1910E : 4268 0012           		clr.w	$12(a0)
   32193/   19112 : 5428 0028           		addq.b	#2,$28(a0)
   32194/   19116 :                     
   32195/   19116 :                     loc_19344:
   32196/   19116 : 6000 FEAC           		bra.w	loc_191F2
   32197/   1911A :                     ; ===========================================================================
   32198/   1911A :                     
   32199/   1911A :                     loc_19348:				; XREF: off_192FA
   32200/   1911A : 5368 003C           		subq.w	#1,$3C(a0)
   32201/   1911E : 6A18                		bpl.s	loc_19366
   32202/   19120 : 5428 0028           		addq.b	#2,$28(a0)
   32203/   19124 : 317C F800 0012      		move.w	#-$800,$12(a0)
   32204/   1912A : 4A68 0036           		tst.w	$36(a0)
   32205/   1912E : 6604                		bne.s	loc_19362
   32206/   19130 : E0E8 0012           		asr	$12(a0)
   32207/   19134 :                     
   32208/   19134 :                     loc_19362:
   32209/   19134 : 7000                		moveq	#0,d0
   32210/   19136 : 6016                		bra.s	loc_1937C
   32211/   19138 :                     ; ===========================================================================
   32212/   19138 :                     
   32213/   19138 :                     loc_19366:
   32214/   19138 : 7000                		moveq	#0,d0
   32215/   1913A : 0C68 001E 003C      		cmpi.w	#$1E,$3C(a0)
   32216/   19140 : 6E0C                		bgt.s	loc_1937C
   32217/   19142 : 7002                		moveq	#2,d0
   32218/   19144 : 0828 0001 003D      		btst	#1,$3D(a0)
   32219/   1914A : 6702                		beq.s	loc_1937C
   32220/   1914C : 4440                		neg.w	d0
   32221/   1914E :                     
   32222/   1914E :                     loc_1937C:
   32223/   1914E : D068 0038           		add.w	$38(a0),d0
   32224/   19152 : 3140 000C           		move.w	d0,$C(a0)
   32225/   19156 : 3168 0030 0008      		move.w	$30(a0),8(a0)
   32226/   1915C : 6000 FE76           		bra.w	loc_19202
   32227/   19160 :                     ; ===========================================================================
   32228/   19160 :                     
   32229/   19160 :                     loc_1938E:				; XREF: off_192FA
   32230/   19160 : 303C 04DA           		move.w	#$4DA,d0
   32231/   19164 : 4A68 0036           		tst.w	$36(a0)
   32232/   19168 : 6704                		beq.s	loc_1939C
   32233/   1916A : 0440 0018           		subi.w	#$18,d0
   32234/   1916E :                     
   32235/   1916E :                     loc_1939C:
   32236/   1916E : B068 0038           		cmp.w	$38(a0),d0
   32237/   19172 : 6D1C                		blt.s	loc_193BE
   32238/   19174 : 317C 0008 003C      		move.w	#8,$3C(a0)
   32239/   1917A : 4A68 0036           		tst.w	$36(a0)
   32240/   1917E : 6706                		beq.s	loc_193B4
   32241/   19180 : 317C 002D 003C      		move.w	#$2D,$3C(a0)
   32242/   19186 :                     
   32243/   19186 :                     loc_193B4:
   32244/   19186 : 5428 0028           		addq.b	#2,$28(a0)
   32245/   1918A : 4268 0012           		clr.w	$12(a0)
   32246/   1918E : 600E                		bra.s	loc_193CC
   32247/   19190 :                     ; ===========================================================================
   32248/   19190 :                     
   32249/   19190 :                     loc_193BE:
   32250/   19190 : 0C68 FFC0 0012      		cmpi.w	#-$40,$12(a0)
   32251/   19196 : 6C06                		bge.s	loc_193CC
   32252/   19198 : 0668 000C 0012      		addi.w	#$C,$12(a0)
   32253/   1919E :                     
   32254/   1919E :                     loc_193CC:
   32255/   1919E : 6000 FE24           		bra.w	loc_191F2
   32256/   191A2 :                     ; ===========================================================================
   32257/   191A2 :                     
   32258/   191A2 :                     loc_193D0:				; XREF: off_192FA
   32259/   191A2 : 5368 003C           		subq.w	#1,$3C(a0)
   32260/   191A6 : 6E30                		bgt.s	loc_19406
   32261/   191A8 : 6B16                		bmi.s	loc_193EE
   32262/   191AA : 70FF                		moveq	#-1,d0
   32263/   191AC : 3028 0036           		move.w	$36(a0),d0
   32264/   191B0 : 6708                		beq.s	loc_193E8
   32265/   191B2 : 2240                		movea.l	d0,a1
   32266/   191B4 : 137C 000A 0029      		move.b	#$A,$29(a1)
   32267/   191BA :                     
   32268/   191BA :                     loc_193E8:
   32269/   191BA : 4268 0036           		clr.w	$36(a0)
   32270/   191BE : 6018                		bra.s	loc_19406
   32271/   191C0 :                     ; ===========================================================================
   32272/   191C0 :                     
   32273/   191C0 :                     loc_193EE:
   32274/   191C0 : 0C68 FFE2 003C      		cmpi.w	#-$1E,$3C(a0)
   32275/   191C6 : 6610                		bne.s	loc_19406
   32276/   191C8 : 4228 0029           		clr.b	$29(a0)
   32277/   191CC : 5528 0025           		subq.b	#2,$25(a0)
   32278/   191D0 : 117C 00FF 003D      		move.b	#-1,$3D(a0)
   32279/   191D6 : 6040                		bra.s	loc_19446
   32280/   191D8 :                     ; ===========================================================================
   32281/   191D8 :                     
   32282/   191D8 :                     loc_19406:
   32283/   191D8 : 7001                		moveq	#1,d0
   32284/   191DA : 4A68 0036           		tst.w	$36(a0)
   32285/   191DE : 6702                		beq.s	loc_19410
   32286/   191E0 : 7002                		moveq	#2,d0
   32287/   191E2 :                     
   32288/   191E2 :                     loc_19410:
   32289/   191E2 : 0C68 04DA 0038      		cmpi.w	#$4DA,$38(a0)
   32290/   191E8 : 670C                		beq.s	loc_19424
   32291/   191EA : 6D02                		blt.s	loc_1941C
   32292/   191EC : 4440                		neg.w	d0
   32293/   191EE :                     
   32294/   191EE :                     loc_1941C:
   32295/   191EE : 4A68 0036           		tst.w	$36(a0)
   32296/   191F2 : D168 0038           		add.w	d0,$38(a0)
   32297/   191F6 :                     
   32298/   191F6 :                     loc_19424:
   32299/   191F6 : 7000                		moveq	#0,d0
   32300/   191F8 : 4A68 0036           		tst.w	$36(a0)
   32301/   191FC : 670C                		beq.s	loc_19438
   32302/   191FE : 7002                		moveq	#2,d0
   32303/   19200 : 0828 0000 003D      		btst	#0,$3D(a0)
   32304/   19206 : 6702                		beq.s	loc_19438
   32305/   19208 : 4440                		neg.w	d0
   32306/   1920A :                     
   32307/   1920A :                     loc_19438:
   32308/   1920A : D068 0038           		add.w	$38(a0),d0
   32309/   1920E : 3140 000C           		move.w	d0,$C(a0)
   32310/   19212 : 3168 0030 0008      		move.w	$30(a0),8(a0)
   32311/   19218 :                     
   32312/   19218 :                     loc_19446:
   32313/   19218 : 6000 FDBA           		bra.w	loc_19202
   32314/   1921C :                     
   32315/   1921C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   32316/   1921C :                     
   32317/   1921C :                     
   32318/   1921C :                     Obj75_FindBlocks:			; XREF: loc_192AE
   32319/   1921C : 4268 0036           		clr.w	$36(a0)
   32320/   19220 : 43F8 D040           		lea	($FFFFD040).w,a1
   32321/   19224 : 703E                		moveq	#$3E,d0
   32322/   19226 : 7276                		moveq	#$76,d1
   32323/   19228 : 1428 0034           		move.b	$34(a0),d2
   32324/   1922C :                     
   32325/   1922C :                     Obj75_FindLoop:
   32326/   1922C : B211                		cmp.b	(a1),d1		; is object a SYZ boss block?
   32327/   1922E : 660C                		bne.s	loc_1946A	; if not, branch
   32328/   19230 : B429 0028           		cmp.b	$28(a1),d2
   32329/   19234 : 6606                		bne.s	loc_1946A
   32330/   19236 : 3149 0036           		move.w	a1,$36(a0)
   32331/   1923A : 6008                		bra.s	locret_19472
   32332/   1923C :                     ; ===========================================================================
   32333/   1923C :                     
   32334/   1923C :                     loc_1946A:
   32335/   1923C : 43E9 0040           		lea	$40(a1),a1	; next object RAM entry
   32336/   19240 : 51C8 FFEA           		dbf	d0,Obj75_FindLoop
   32337/   19244 :                     
   32338/   19244 :                     locret_19472:
   32339/   19244 : 4E75                		rts	
   32340/   19246 :                     ; End of function Obj75_FindBlocks
   32341/   19246 :                     
   32342/   19246 :                     ; ===========================================================================
   32343/   19246 :                     
   32344/   19246 :                     loc_19474:				; XREF: Obj75_ShipIndex
   32345/   19246 : 5368 003C           		subq.w	#1,$3C(a0)
   32346/   1924A : 6B04                		bmi.s	loc_1947E
   32347/   1924C : 6000 E3F6           		bra.w	BossDefeated
   32348/   19250 :                     ; ===========================================================================
   32349/   19250 :                     
   32350/   19250 :                     loc_1947E:
   32351/   19250 : 5428 0025           		addq.b	#2,$25(a0)
   32352/   19254 : 4268 0012           		clr.w	$12(a0)
   32353/   19258 : 08E8 0000 0022      		bset	#0,$22(a0)
   32354/   1925E : 08A8 0007 0022      		bclr	#7,$22(a0)
   32355/   19264 : 4268 0010           		clr.w	$10(a0)
   32356/   19268 : 317C FFFF 003C      		move.w	#-1,$3C(a0)
   32357/   1926E : 4A38 F7A7           		tst.b	($FFFFF7A7).w
   32358/   19272 : 6606                		bne.s	loc_194A8
   32359/   19274 : 11FC 0001 F7A7      		move.b	#1,($FFFFF7A7).w
   32360/   1927A :                     
   32361/   1927A :                     loc_194A8:
   32362/   1927A : 6000 FD58           		bra.w	loc_19202
   32363/   1927E :                     ; ===========================================================================
   32364/   1927E :                     
   32365/   1927E :                     loc_194AC:				; XREF: Obj75_ShipIndex
   32366/   1927E : 5268 003C           		addq.w	#1,$3C(a0)
   32367/   19282 : 670A                		beq.s	loc_194BC
   32368/   19284 : 6A0E                		bpl.s	loc_194C2
   32369/   19286 : 0668 0018 0012      		addi.w	#$18,$12(a0)
   32370/   1928C : 6032                		bra.s	loc_194EE
   32371/   1928E :                     ; ===========================================================================
   32372/   1928E :                     
   32373/   1928E :                     loc_194BC:
   32374/   1928E : 4268 0012           		clr.w	$12(a0)
   32375/   19292 : 602C                		bra.s	loc_194EE
   32376/   19294 :                     ; ===========================================================================
   32377/   19294 :                     
   32378/   19294 :                     loc_194C2:
   32379/   19294 : 0C68 0020 003C      		cmpi.w	#$20,$3C(a0)
   32380/   1929A : 6510                		bcs.s	loc_194DA
   32381/   1929C : 6714                		beq.s	loc_194E0
   32382/   1929E : 0C68 002A 003C      		cmpi.w	#$2A,$3C(a0)
   32383/   192A4 : 651A                		bcs.s	loc_194EE
   32384/   192A6 : 5428 0025           		addq.b	#2,$25(a0)
   32385/   192AA : 6014                		bra.s	loc_194EE
   32386/   192AC :                     ; ===========================================================================
   32387/   192AC :                     
   32388/   192AC :                     loc_194DA:
   32389/   192AC : 5168 0012           		subq.w	#8,$12(a0)
   32390/   192B0 : 600E                		bra.s	loc_194EE
   32391/   192B2 :                     ; ===========================================================================
   32392/   192B2 :                     
   32393/   192B2 :                     loc_194E0:
   32394/   192B2 : 4268 0012           		clr.w	$12(a0)
   32395/   192B6 : 303C 0085           		move.w	#$85,d0
   32396/   192BA : 4EB9 0000 117C      		jsr	(PlaySound).l	; play SYZ music
   32397/   192C0 :                     
   32398/   192C0 :                     loc_194EE:
   32399/   192C0 : 6000 FD02           		bra.w	loc_191F2
   32400/   192C4 :                     ; ===========================================================================
   32401/   192C4 :                     
   32402/   192C4 :                     loc_194F2:				; XREF: Obj75_ShipIndex
   32403/   192C4 : 317C 0400 0010      		move.w	#$400,$10(a0)
   32404/   192CA : 317C FFC0 0012      		move.w	#-$40,$12(a0)
   32405/   192D0 : 0C78 2D40 F72A      		cmpi.w	#$2D40,($FFFFF72A).w
   32406/   192D6 : 6406                		bcc.s	loc_1950C
   32407/   192D8 : 5478 F72A           		addq.w	#2,($FFFFF72A).w
   32408/   192DC : 6006                		bra.s	loc_19512
   32409/   192DE :                     ; ===========================================================================
   32410/   192DE :                     
   32411/   192DE :                     loc_1950C:
   32412/   192DE : 4A28 0001           		tst.b	1(a0)
   32413/   192E2 : 6A08                		bpl.s	Obj75_ShipDelete
   32414/   192E4 :                     
   32415/   192E4 :                     loc_19512:
   32416/   192E4 : 6100 E3A0           		bsr.w	BossMove
   32417/   192E8 : 6000 FCC6           		bra.w	loc_191DE
   32418/   192EC :                     ; ===========================================================================
   32419/   192EC :                     
   32420/   192EC :                     Obj75_ShipDelete:
   32421/   192EC : 4EF9 0000 D40E      		jmp	DeleteObject
   32422/   192F2 :                     ; ===========================================================================
   32423/   192F2 :                     
   32424/   192F2 :                     Obj75_FaceMain:				; XREF: Obj75_Index
   32425/   192F2 : 7201                		moveq	#1,d1
   32426/   192F4 : 2268 0034           		movea.l	$34(a0),a1
   32427/   192F8 : 7000                		moveq	#0,d0
   32428/   192FA : 1029 0025           		move.b	$25(a1),d0
   32429/   192FE : 303B 0018           		move.w	off_19546(pc,d0.w),d0
   32430/   19302 : 4EBB 0014           		jsr	off_19546(pc,d0.w)
   32431/   19306 : 1141 001C           		move.b	d1,$1C(a0)
   32432/   1930A : 1010                		move.b	(a0),d0
   32433/   1930C : B011                		cmp.b	(a1),d0
   32434/   1930E : 6602                		bne.s	Obj75_FaceDelete
   32435/   19310 : 607E                		bra.s	loc_195BE
   32436/   19312 :                     ; ===========================================================================
   32437/   19312 :                     
   32438/   19312 :                     Obj75_FaceDelete:
   32439/   19312 : 4EF9 0000 D40E      		jmp	DeleteObject
   32440/   19318 :                     ; ===========================================================================
   32441/   19318 : 002E 002E           off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
   32442/   1931C : 0014 000C           		dc.w loc_1955A-off_19546, loc_19552-off_19546
   32443/   19320 : 000C 0010           		dc.w loc_19552-off_19546, loc_19556-off_19546
   32444/   19324 :                     ; ===========================================================================
   32445/   19324 :                     
   32446/   19324 :                     loc_19552:				; XREF: off_19546
   32447/   19324 : 720A                		moveq	#$A,d1
   32448/   19326 : 4E75                		rts	
   32449/   19328 :                     ; ===========================================================================
   32450/   19328 :                     
   32451/   19328 :                     loc_19556:				; XREF: off_19546
   32452/   19328 : 7206                		moveq	#6,d1
   32453/   1932A : 4E75                		rts	
   32454/   1932C :                     ; ===========================================================================
   32455/   1932C :                     
   32456/   1932C :                     loc_1955A:				; XREF: off_19546
   32457/   1932C : 7000                		moveq	#0,d0
   32458/   1932E : 1029 0028           		move.b	$28(a1),d0
   32459/   19332 : 303B 0006           		move.w	off_19568(pc,d0.w),d0
   32460/   19336 : 4EFB 0002           		jmp	off_19568(pc,d0.w)
   32461/   1933A :                     ; ===========================================================================
   32462/   1933A : 0008 000A           off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
   32463/   1933E : 0008 0008           		dc.w loc_19570-off_19568, loc_19570-off_19568
   32464/   19342 :                     ; ===========================================================================
   32465/   19342 :                     
   32466/   19342 :                     loc_19570:				; XREF: off_19568
   32467/   19342 : 6002                		bra.s	loc_19574
   32468/   19344 :                     ; ===========================================================================
   32469/   19344 :                     
   32470/   19344 :                     loc_19572:				; XREF: off_19568
   32471/   19344 : 7206                		moveq	#6,d1
   32472/   19346 :                     
   32473/   19346 :                     loc_19574:				; XREF: off_19546
   32474/   19346 : 4A29 0020           		tst.b	$20(a1)
   32475/   1934A : 6604                		bne.s	loc_1957E
   32476/   1934C : 7205                		moveq	#5,d1
   32477/   1934E : 4E75                		rts	
   32478/   19350 :                     ; ===========================================================================
   32479/   19350 :                     
   32480/   19350 :                     loc_1957E:
   32481/   19350 : 0C38 0004 D024      		cmpi.b	#4,($FFFFD024).w
   32482/   19356 : 6502                		bcs.s	locret_19588
   32483/   19358 : 7204                		moveq	#4,d1
   32484/   1935A :                     
   32485/   1935A :                     locret_19588:
   32486/   1935A : 4E75                		rts	
   32487/   1935C :                     ; ===========================================================================
   32488/   1935C :                     
   32489/   1935C :                     Obj75_FlameMain:			; XREF: Obj75_Index
   32490/   1935C : 117C 0007 001C      		move.b	#7,$1C(a0)
   32491/   19362 : 2268 0034           		movea.l	$34(a0),a1
   32492/   19366 : 0C29 000A 0025      		cmpi.b	#$A,$25(a1)
   32493/   1936C : 660E                		bne.s	loc_195AA
   32494/   1936E : 117C 000B 001C      		move.b	#$B,$1C(a0)
   32495/   19374 : 4A28 0001           		tst.b	1(a0)
   32496/   19378 : 6A10                		bpl.s	Obj75_FlameDelete
   32497/   1937A : 600C                		bra.s	loc_195B6
   32498/   1937C :                     ; ===========================================================================
   32499/   1937C :                     
   32500/   1937C :                     loc_195AA:
   32501/   1937C : 4A69 0010           		tst.w	$10(a1)
   32502/   19380 : 6706                		beq.s	loc_195B6
   32503/   19382 : 117C 0008 001C      		move.b	#8,$1C(a0)
   32504/   19388 :                     
   32505/   19388 :                     loc_195B6:
   32506/   19388 : 6006                		bra.s	loc_195BE
   32507/   1938A :                     ; ===========================================================================
   32508/   1938A :                     
   32509/   1938A :                     Obj75_FlameDelete:
   32510/   1938A : 4EF9 0000 D40E      		jmp	DeleteObject
   32511/   19390 :                     ; ===========================================================================
   32512/   19390 :                     
   32513/   19390 :                     loc_195BE:
   32514/   19390 : 43F9 0001 7A96      		lea	(Ani_Eggman).l,a1
   32515/   19396 : 4EB9 0000 A4FE      		jsr	AnimateSprite
   32516/   1939C : 2268 0034           		movea.l	$34(a0),a1
   32517/   193A0 : 3169 0008 0008      		move.w	8(a1),8(a0)
   32518/   193A6 : 3169 000C 000C      		move.w	$C(a1),$C(a0)
   32519/   193AC :                     
   32520/   193AC :                     loc_195DA:
   32521/   193AC : 1169 0022 0022      		move.b	$22(a1),$22(a0)
   32522/   193B2 : 7003                		moveq	#3,d0
   32523/   193B4 : C028 0022           		and.b	$22(a0),d0
   32524/   193B8 : 0228 00FC 0001      		andi.b	#$FC,1(a0)
   32525/   193BE : 8128 0001           		or.b	d0,1(a0)
   32526/   193C2 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   32527/   193C8 :                     ; ===========================================================================
   32528/   193C8 :                     
   32529/   193C8 :                     Obj75_SpikeMain:			; XREF: Obj75_Index
   32530/   193C8 : 217C 0001 7BAE      		move.l	#Map_BossItems,4(a0)
            193CE : 0004             
   32531/   193D0 : 317C 246C 0002      		move.w	#$246C,2(a0)
   32532/   193D6 : 117C 0005 001A      		move.b	#5,$1A(a0)
   32533/   193DC : 2268 0034           		movea.l	$34(a0),a1
   32534/   193E0 : 0C29 000A 0025      		cmpi.b	#$A,$25(a1)
   32535/   193E6 : 6606                		bne.s	loc_1961C
   32536/   193E8 : 4A28 0001           		tst.b	1(a0)
   32537/   193EC : 6A70                		bpl.s	Obj75_SpikeDelete
   32538/   193EE :                     
   32539/   193EE :                     loc_1961C:
   32540/   193EE : 3169 0008 0008      		move.w	8(a1),8(a0)
   32541/   193F4 : 3169 000C 000C      		move.w	$C(a1),$C(a0)
   32542/   193FA : 3028 003C           		move.w	$3C(a0),d0
   32543/   193FE : 0C29 0004 0025      		cmpi.b	#4,$25(a1)
   32544/   19404 : 661E                		bne.s	loc_19652
   32545/   19406 : 0C29 0006 0028      		cmpi.b	#6,$28(a1)
   32546/   1940C : 6710                		beq.s	loc_1964C
   32547/   1940E : 4A29 0028           		tst.b	$28(a1)
   32548/   19412 : 6616                		bne.s	loc_19658
   32549/   19414 : 0C40 0094           		cmpi.w	#$94,d0
   32550/   19418 : 6C10                		bge.s	loc_19658
   32551/   1941A : 5E40                		addq.w	#7,d0
   32552/   1941C : 600C                		bra.s	loc_19658
   32553/   1941E :                     ; ===========================================================================
   32554/   1941E :                     
   32555/   1941E :                     loc_1964C:
   32556/   1941E : 4A69 003C           		tst.w	$3C(a1)
   32557/   19422 : 6A06                		bpl.s	loc_19658
   32558/   19424 :                     
   32559/   19424 :                     loc_19652:
   32560/   19424 : 4A40                		tst.w	d0
   32561/   19426 : 6F02                		ble.s	loc_19658
   32562/   19428 : 5B40                		subq.w	#5,d0
   32563/   1942A :                     
   32564/   1942A :                     loc_19658:
   32565/   1942A : 3140 003C           		move.w	d0,$3C(a0)
   32566/   1942E : E440                		asr.w	#2,d0
   32567/   19430 : D168 000C           		add.w	d0,$C(a0)
   32568/   19434 : 117C 0008 0019      		move.b	#8,$19(a0)
   32569/   1943A : 117C 000C 0016      		move.b	#$C,$16(a0)
   32570/   19440 : 4228 0020           		clr.b	$20(a0)
   32571/   19444 : 2268 0034           		movea.l	$34(a0),a1
   32572/   19448 : 4A29 0020           		tst.b	$20(a1)
   32573/   1944C : 670C                		beq.s	loc_19688
   32574/   1944E : 4A29 0029           		tst.b	$29(a1)
   32575/   19452 : 6606                		bne.s	loc_19688
   32576/   19454 : 117C 0084 0020      		move.b	#$84,$20(a0)
   32577/   1945A :                     
   32578/   1945A :                     loc_19688:
   32579/   1945A : 6000 FF50           		bra.w	loc_195DA
   32580/   1945E :                     ; ===========================================================================
   32581/   1945E :                     
   32582/   1945E :                     Obj75_SpikeDelete:
   32583/   1945E : 4EF9 0000 D40E      		jmp	DeleteObject
   32584/   19464 :                     ; ===========================================================================
   32585/   19464 :                     ; ---------------------------------------------------------------------------
   32586/   19464 :                     ; Object 76 - blocks that Eggman picks up (SYZ)
   32587/   19464 :                     ; ---------------------------------------------------------------------------
   32588/   19464 :                     
   32589/   19464 :                     Obj76:					; XREF: Obj_Index
   32590/   19464 : 7000                		moveq	#0,d0
   32591/   19466 : 1028 0024           		move.b	$24(a0),d0
   32592/   1946A : 323B 0006           		move.w	Obj76_Index(pc,d0.w),d1
   32593/   1946E : 4EFB 1002           		jmp	Obj76_Index(pc,d1.w)
   32594/   19472 :                     ; ===========================================================================
   32595/   19472 : 0006                Obj76_Index:	dc.w Obj76_Main-Obj76_Index
   32596/   19474 : 0064                		dc.w Obj76_Action-Obj76_Index
   32597/   19476 : 00C2                		dc.w loc_19762-Obj76_Index
   32598/   19478 :                     ; ===========================================================================
   32599/   19478 :                     
   32600/   19478 :                     Obj76_Main:				; XREF: Obj76_Index
   32601/   19478 : 7800                		moveq	#0,d4
   32602/   1947A : 3A3C 2C10           		move.w	#$2C10,d5
   32603/   1947E : 7C09                		moveq	#9,d6
   32604/   19480 : 43D0                		lea	(a0),a1
   32605/   19482 : 6008                		bra.s	Obj76_MakeBlock
   32606/   19484 :                     ; ===========================================================================
   32607/   19484 :                     
   32608/   19484 :                     Obj76_Loop:
   32609/   19484 : 4EB9 0000 D858      		jsr	SingleObjLoad
   32610/   1948A : 6648                		bne.s	Obj76_ExitLoop
   32611/   1948C :                     
   32612/   1948C :                     Obj76_MakeBlock:			; XREF: Obj76_Main
   32613/   1948C : 12BC 0076           		move.b	#$76,(a1)
   32614/   19490 : 237C 0001 95D0      		move.l	#Map_obj76,4(a1)
            19496 : 0004             
   32615/   19498 : 337C 4000 0002      		move.w	#$4000,2(a1)
   32616/   1949E : 137C 0004 0001      		move.b	#4,1(a1)
   32617/   194A4 : 137C 0010 0019      		move.b	#$10,$19(a1)
   32618/   194AA : 137C 0010 0016      		move.b	#$10,$16(a1)
   32619/   194B0 : 137C 0003 0018      		move.b	#3,$18(a1)
   32620/   194B6 : 3345 0008           		move.w	d5,8(a1)	; set x-position
   32621/   194BA : 337C 0582 000C      		move.w	#$582,$C(a1)
   32622/   194C0 : 3344 0028           		move.w	d4,$28(a1)
   32623/   194C4 : 0644 0101           		addi.w	#$101,d4
   32624/   194C8 : 0645 0020           		addi.w	#$20,d5		; add $20 to next x-position
   32625/   194CC : 5429 0024           		addq.b	#2,$24(a1)
   32626/   194D0 : 51CE FFB2           		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
   32627/   194D4 :                     
   32628/   194D4 :                     Obj76_ExitLoop:
   32629/   194D4 : 4E75                		rts	
   32630/   194D6 :                     ; ===========================================================================
   32631/   194D6 :                     
   32632/   194D6 :                     Obj76_Action:				; XREF: Obj76_Index
   32633/   194D6 : 1028 0029           		move.b	$29(a0),d0
   32634/   194DA : B028 0028           		cmp.b	$28(a0),d0
   32635/   194DE : 6738                		beq.s	Obj76_Solid
   32636/   194E0 : 4A00                		tst.b	d0
   32637/   194E2 : 6B06                		bmi.s	loc_19718
   32638/   194E4 :                     
   32639/   194E4 :                     loc_19712:
   32640/   194E4 : 6100 0066           		bsr.w	Obj76_Break
   32641/   194E8 : 6044                		bra.s	Obj76_Display
   32642/   194EA :                     ; ===========================================================================
   32643/   194EA :                     
   32644/   194EA :                     loc_19718:
   32645/   194EA : 2268 0034           		movea.l	$34(a0),a1
   32646/   194EE : 4A29 0021           		tst.b	$21(a1)
   32647/   194F2 : 67F0                		beq.s	loc_19712
   32648/   194F4 : 3169 0008 0008      		move.w	8(a1),8(a0)
   32649/   194FA : 3169 000C 000C      		move.w	$C(a1),$C(a0)
   32650/   19500 : 0668 002C 000C      		addi.w	#$2C,$C(a0)
   32651/   19506 : B2C8                		cmpa.w	a0,a1
   32652/   19508 : 6524                		bcs.s	Obj76_Display
   32653/   1950A : 3029 0012           		move.w	$12(a1),d0
   32654/   1950E : 48C0                		ext.l	d0
   32655/   19510 : E080                		asr.l	#8,d0
   32656/   19512 : D168 000C           		add.w	d0,$C(a0)
   32657/   19516 : 6016                		bra.s	Obj76_Display
   32658/   19518 :                     ; ===========================================================================
   32659/   19518 :                     
   32660/   19518 :                     Obj76_Solid:				; XREF: Obj76_Action
   32661/   19518 : 323C 001B           		move.w	#$1B,d1
   32662/   1951C : 343C 0010           		move.w	#$10,d2
   32663/   19520 : 363C 0011           		move.w	#$11,d3
   32664/   19524 : 3828 0008           		move.w	8(a0),d4
   32665/   19528 : 4EB9 0000 F792      		jsr	SolidObject
   32666/   1952E :                     
   32667/   1952E :                     Obj76_Display:				; XREF: Obj76_Action
   32668/   1952E : 4EF9 0000 D3D2      		jmp	DisplaySprite
   32669/   19534 :                     ; ===========================================================================
   32670/   19534 :                     
   32671/   19534 :                     loc_19762:				; XREF: Obj76_Index
   32672/   19534 : 4A28 0001           		tst.b	1(a0)
   32673/   19538 : 6A0C                		bpl.s	Obj76_Delete
   32674/   1953A : 4EB9 0000 D380      		jsr	ObjectFall
   32675/   19540 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   32676/   19546 :                     ; ===========================================================================
   32677/   19546 :                     
   32678/   19546 :                     Obj76_Delete:
   32679/   19546 : 4EF9 0000 D40E      		jmp	DeleteObject
   32680/   1954C :                     
   32681/   1954C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   32682/   1954C :                     
   32683/   1954C :                     
   32684/   1954C :                     Obj76_Break:				; XREF: Obj76_Action
   32685/   1954C : 49FA 0062           		lea	Obj76_FragSpeed(pc),a4
   32686/   19550 : 4BFA 006E           		lea	Obj76_FragPos(pc),a5
   32687/   19554 : 7801                		moveq	#1,d4
   32688/   19556 : 7203                		moveq	#3,d1
   32689/   19558 : 7438                		moveq	#$38,d2
   32690/   1955A : 5428 0024           		addq.b	#2,$24(a0)
   32691/   1955E : 117C 0008 0019      		move.b	#8,$19(a0)
   32692/   19564 : 117C 0008 0016      		move.b	#8,$16(a0)
   32693/   1956A : 43D0                		lea	(a0),a1
   32694/   1956C : 6008                		bra.s	Obj76_MakeFrag
   32695/   1956E :                     ; ===========================================================================
   32696/   1956E :                     
   32697/   1956E :                     Obj76_LoopFrag:
   32698/   1956E : 4EB9 0000 D86E      		jsr	SingleObjLoad2
   32699/   19574 : 6630                		bne.s	loc_197D4
   32700/   19576 :                     
   32701/   19576 :                     Obj76_MakeFrag:
   32702/   19576 : 45D0                		lea	(a0),a2
   32703/   19578 : 47D1                		lea	(a1),a3
   32704/   1957A : 7603                		moveq	#3,d3
   32705/   1957C :                     
   32706/   1957C :                     loc_197AA:
   32707/   1957C : 26DA                		move.l	(a2)+,(a3)+
   32708/   1957E : 26DA                		move.l	(a2)+,(a3)+
   32709/   19580 : 26DA                		move.l	(a2)+,(a3)+
   32710/   19582 : 26DA                		move.l	(a2)+,(a3)+
   32711/   19584 : 51CB FFF6           		dbf	d3,loc_197AA
   32712/   19588 :                     
   32713/   19588 : 335C 0010           		move.w	(a4)+,$10(a1)
   32714/   1958C : 335C 0012           		move.w	(a4)+,$12(a1)
   32715/   19590 : 361D                		move.w	(a5)+,d3
   32716/   19592 : D769 0008           		add.w	d3,8(a1)
   32717/   19596 : 361D                		move.w	(a5)+,d3
   32718/   19598 : D769 000C           		add.w	d3,$C(a1)
   32719/   1959C : 1344 001A           		move.b	d4,$1A(a1)
   32720/   195A0 : 5244                		addq.w	#1,d4
   32721/   195A2 : 51C9 FFCA           		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
   32722/   195A6 :                     
   32723/   195A6 :                     loc_197D4:
   32724/   195A6 : 303C 00CB           		move.w	#$CB,d0
   32725/   195AA : 4EF9 0000 1182      		jmp	(PlaySound_Special).l ;	play smashing sound
   32726/   195B0 :                     ; End of function Obj76_Break
   32727/   195B0 :                     
   32728/   195B0 :                     ; ===========================================================================
   32729/   195B0 : FE80 FE00           Obj76_FragSpeed:dc.w $FE80, $FE00
   32730/   195B4 : 0180 FE00           		dc.w $180, $FE00
   32731/   195B8 : FF00 FF00           		dc.w $FF00, $FF00
   32732/   195BC : 0100 FF00           		dc.w $100, $FF00
   32733/   195C0 : FFF8 FFF8           Obj76_FragPos:	dc.w $FFF8, $FFF8
   32734/   195C4 : 0010 0000           		dc.w $10, 0
   32735/   195C8 : 0000 0010           		dc.w 0,	$10
   32736/   195CC : 0010 0010           		dc.w $10, $10
   32737/   195D0 :                     ; ---------------------------------------------------------------------------
   32738/   195D0 :                     ; Sprite mappings - blocks that	Eggman picks up (SYZ)
   32739/   195D0 :                     ; ---------------------------------------------------------------------------
   32740/   195D0 :                     Map_obj76:
   32741/   195D0 :                     	include "_mappings/obj76.asm"
(1)    1/   195D0 :                     ; ---------------------------------------------------------------------------
(1)    2/   195D0 :                     ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
(1)    3/   195D0 :                     ; ---------------------------------------------------------------------------
(1)    4/   195D0 : 000A 0016           		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
(1)    5/   195D4 : 001C 0022           		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
(1)    6/   195D8 : 0028                		dc.w byte_19826-Map_obj76
(1)    7/   195DA : 02                  byte_19808:	dc.b 2
(1)    8/   195DB : F00D 0071 F0        		dc.b $F0, $D, 0, $71, $F0
(1)    9/   195E0 : 000D 0079 F0        		dc.b 0,	$D, 0, $79, $F0
(1)   10/   195E5 : 00                  		dc.b 0
(1)   11/   195E6 : 01                  byte_19814:	dc.b 1
(1)   12/   195E7 : F805 0071 F8        		dc.b $F8, 5, 0,	$71, $F8
(1)   13/   195EC : 01                  byte_1981A:	dc.b 1
(1)   14/   195ED : F805 0075 F8        		dc.b $F8, 5, 0,	$75, $F8
(1)   15/   195F2 : 01                  byte_19820:	dc.b 1
(1)   16/   195F3 : F805 0079 F8        		dc.b $F8, 5, 0,	$79, $F8
(1)   17/   195F8 : 01                  byte_19826:	dc.b 1
(1)   18/   195F9 : F805 007D F8        		dc.b $F8, 5, 0,	$7D, $F8
(1)   19/   195FE : (MACRO)              		even
   32742/   195FE :                     
   32743/   195FE :                     ; ===========================================================================
   32744/   195FE :                     
   32745/   195FE :                     loc_1982C:				; XREF: loc_19C62; loc_19C80
   32746/   195FE : 4EF9 0000 D40E      		jmp	DeleteObject
   32747/   19604 :                     ; ===========================================================================
   32748/   19604 :                     ; ---------------------------------------------------------------------------
   32749/   19604 :                     ; Object 82 - Eggman (SBZ2)
   32750/   19604 :                     ; ---------------------------------------------------------------------------
   32751/   19604 :                     
   32752/   19604 :                     Obj82:					; XREF: Obj_Index
   32753/   19604 : 7000                		moveq	#0,d0
   32754/   19606 : 1028 0024           		move.b	$24(a0),d0
   32755/   1960A : 323B 0006           		move.w	Obj82_Index(pc,d0.w),d1
   32756/   1960E : 4EFB 1002           		jmp	Obj82_Index(pc,d1.w)
   32757/   19612 :                     ; ===========================================================================
   32758/   19612 : 000C                Obj82_Index:	dc.w Obj82_Main-Obj82_Index
   32759/   19614 : 00B0                		dc.w Obj82_Eggman-Obj82_Index
   32760/   19616 : 0194                		dc.w Obj82_Switch-Obj82_Index
   32761/   19618 :                     
   32762/   19618 : 0200 03             Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
   32763/   1961B : 0400 03             		dc.b 4,	0, 3
   32764/   1961E :                     ; ===========================================================================
   32765/   1961E :                     
   32766/   1961E :                     Obj82_Main:				; XREF: Obj82_Index
   32767/   1961E : 45FA FFF8           		lea	Obj82_ObjData(pc),a2
   32768/   19622 : 317C 2160 0008      		move.w	#$2160,8(a0)
   32769/   19628 : 317C 05A4 000C      		move.w	#$5A4,$C(a0)
   32770/   1962E : 117C 000F 0020      		move.b	#$F,$20(a0)
   32771/   19634 : 117C 0010 0021      		move.b	#$10,$21(a0)
   32772/   1963A : 08A8 0000 0022      		bclr	#0,$22(a0)
   32773/   19640 : 4228 0025           		clr.b	$25(a0)
   32774/   19644 : 115A 0024           		move.b	(a2)+,$24(a0)
   32775/   19648 : 115A 001C           		move.b	(a2)+,$1C(a0)
   32776/   1964C : 115A 0018           		move.b	(a2)+,$18(a0)
   32777/   19650 : 217C 0001 9806      		move.l	#Map_obj82,4(a0)
            19656 : 0004             
   32778/   19658 : 317C 0400 0002      		move.w	#$400,2(a0)
   32779/   1965E : 117C 0004 0001      		move.b	#4,1(a0)
   32780/   19664 : 08E8 0007 0001      		bset	#7,1(a0)
   32781/   1966A : 117C 0020 0019      		move.b	#$20,$19(a0)
   32782/   19670 : 4EB9 0000 D86E      		jsr	SingleObjLoad2
   32783/   19676 : 664A                		bne.s	Obj82_Eggman
   32784/   19678 : 2348 0034           		move.l	a0,$34(a1)
   32785/   1967C : 12BC 0082           		move.b	#$82,(a1)	; load switch object
   32786/   19680 : 337C 2130 0008      		move.w	#$2130,8(a1)
   32787/   19686 : 337C 05BC 000C      		move.w	#$5BC,$C(a1)
   32788/   1968C : 4228 0025           		clr.b	$25(a0)
   32789/   19690 : 135A 0024           		move.b	(a2)+,$24(a1)
   32790/   19694 : 135A 001C           		move.b	(a2)+,$1C(a1)
   32791/   19698 : 135A 0018           		move.b	(a2)+,$18(a1)
   32792/   1969C : 237C 0000 BC80      		move.l	#Map_obj32,4(a1)
            196A2 : 0004             
   32793/   196A4 : 337C 04A4 0002      		move.w	#$4A4,2(a1)
   32794/   196AA : 137C 0004 0001      		move.b	#4,1(a1)
   32795/   196B0 : 08E9 0007 0001      		bset	#7,1(a1)
   32796/   196B6 : 137C 0010 0019      		move.b	#$10,$19(a1)
   32797/   196BC : 137C 0000 001A      		move.b	#0,$1A(a1)
   32798/   196C2 :                     
   32799/   196C2 :                     Obj82_Eggman:				; XREF: Obj82_Index
   32800/   196C2 : 7000                		moveq	#0,d0
   32801/   196C4 : 1028 0025           		move.b	$25(a0),d0
   32802/   196C8 : 323B 0016           		move.w	Obj82_EggIndex(pc,d0.w),d1
   32803/   196CC : 4EBB 1012           		jsr	Obj82_EggIndex(pc,d1.w)
   32804/   196D0 : 43FA 0102           		lea	Ani_obj82(pc),a1
   32805/   196D4 : 4EB9 0000 A4FE      		jsr	AnimateSprite
   32806/   196DA : 4EF9 0000 D3D2      		jmp	DisplaySprite
   32807/   196E0 :                     ; ===========================================================================
   32808/   196E0 : 0008                Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
   32809/   196E2 : 002C                		dc.w Obj82_PreLeap-Obj82_EggIndex
   32810/   196E4 : 0048                		dc.w Obj82_Leap-Obj82_EggIndex
   32811/   196E6 : 0026                		dc.w loc_19934-Obj82_EggIndex
   32812/   196E8 :                     ; ===========================================================================
   32813/   196E8 :                     
   32814/   196E8 :                     Obj82_ChkSonic:				; XREF: Obj82_EggIndex
   32815/   196E8 : 3028 0008           		move.w	8(a0),d0
   32816/   196EC : 9078 D008           		sub.w	($FFFFD008).w,d0
   32817/   196F0 : 0C40 0080           		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
   32818/   196F4 : 6410                		bcc.s	loc_19934	; if not, branch
   32819/   196F6 : 5428 0025           		addq.b	#2,$25(a0)
   32820/   196FA : 317C 00B4 003C      		move.w	#180,$3C(a0)	; set delay to 3 seconds
   32821/   19700 : 117C 0001 001C      		move.b	#1,$1C(a0)
   32822/   19706 :                     
   32823/   19706 :                     loc_19934:				; XREF: Obj82_EggIndex
   32824/   19706 : 4EF9 0000 D3AC      		jmp	SpeedToPos
   32825/   1970C :                     ; ===========================================================================
   32826/   1970C :                     
   32827/   1970C :                     Obj82_PreLeap:				; XREF: Obj82_EggIndex
   32828/   1970C : 5368 003C           		subq.w	#1,$3C(a0)	; subtract 1 from time delay
   32829/   19710 : 6614                		bne.s	loc_19954	; if time remains, branch
   32830/   19712 : 5428 0025           		addq.b	#2,$25(a0)
   32831/   19716 : 117C 0002 001C      		move.b	#2,$1C(a0)
   32832/   1971C : 5868 000C           		addq.w	#4,$C(a0)
   32833/   19720 : 317C 000F 003C      		move.w	#15,$3C(a0)
   32834/   19726 :                     
   32835/   19726 :                     loc_19954:
   32836/   19726 : 60DE                		bra.s	loc_19934
   32837/   19728 :                     ; ===========================================================================
   32838/   19728 :                     
   32839/   19728 :                     Obj82_Leap:				; XREF: Obj82_EggIndex
   32840/   19728 : 5368 003C           		subq.w	#1,$3C(a0)
   32841/   1972C : 6E74                		bgt.s	loc_199D0
   32842/   1972E : 660C                		bne.s	loc_1996A
   32843/   19730 : 317C FF04 0010      		move.w	#-$FC,$10(a0)	; make Eggman leap
   32844/   19736 : 317C FC40 0012      		move.w	#-$3C0,$12(a0)
   32845/   1973C :                     
   32846/   1973C :                     loc_1996A:
   32847/   1973C : 0C68 2132 0008      		cmpi.w	#$2132,8(a0)
   32848/   19742 : 6E04                		bgt.s	loc_19976
   32849/   19744 : 4268 0010           		clr.w	$10(a0)
   32850/   19748 :                     
   32851/   19748 :                     loc_19976:
   32852/   19748 : 0668 0024 0012      		addi.w	#$24,$12(a0)
   32853/   1974E : 4A68 0012           		tst.w	$12(a0)
   32854/   19752 : 6B20                		bmi.s	Obj82_FindBlocks
   32855/   19754 : 0C68 0595 000C      		cmpi.w	#$595,$C(a0)
   32856/   1975A : 6518                		bcs.s	Obj82_FindBlocks
   32857/   1975C : 317C 5357 0028      		move.w	#$5357,$28(a0)
   32858/   19762 : 0C68 059B 000C      		cmpi.w	#$59B,$C(a0)
   32859/   19768 : 650A                		bcs.s	Obj82_FindBlocks
   32860/   1976A : 317C 059B 000C      		move.w	#$59B,$C(a0)
   32861/   19770 : 4268 0012           		clr.w	$12(a0)
   32862/   19774 :                     
   32863/   19774 :                     Obj82_FindBlocks:
   32864/   19774 : 3028 0010           		move.w	$10(a0),d0
   32865/   19778 : 8068 0012           		or.w	$12(a0),d0
   32866/   1977C : 6624                		bne.s	loc_199D0
   32867/   1977E : 43F8 D000           		lea	($FFFFD000).w,a1 ; start at the	first object RAM
   32868/   19782 : 703E                		moveq	#$3E,d0
   32869/   19784 : 7240                		moveq	#$40,d1
   32870/   19786 :                     
   32871/   19786 :                     Obj82_FindLoop:	
   32872/   19786 : D2C1                		adda.w	d1,a1		; jump to next object RAM
   32873/   19788 : 0C11 0083           		cmpi.b	#$83,(a1)	; is object a block? (object $83)
   32874/   1978C : 57C8 FFF8           		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
   32875/   19790 :                     
   32876/   19790 : 6610                		bne.s	loc_199D0
   32877/   19792 : 337C 474F 0028      		move.w	#$474F,$28(a1)	; set block to disintegrate
   32878/   19798 : 5428 0025           		addq.b	#2,$25(a0)
   32879/   1979C : 117C 0001 001C      		move.b	#1,$1C(a0)
   32880/   197A2 :                     
   32881/   197A2 :                     loc_199D0:
   32882/   197A2 : 6000 FF62           		bra.w	loc_19934
   32883/   197A6 :                     ; ===========================================================================
   32884/   197A6 :                     
   32885/   197A6 :                     Obj82_Switch:				; XREF: Obj82_Index
   32886/   197A6 : 7000                		moveq	#0,d0
   32887/   197A8 : 1028 0025           		move.b	$25(a0),d0
   32888/   197AC : 303B 0006           		move.w	Obj82_SwIndex(pc,d0.w),d0
   32889/   197B0 : 4EFB 0002           		jmp	Obj82_SwIndex(pc,d0.w)
   32890/   197B4 :                     ; ===========================================================================
   32891/   197B4 : 0004                Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
   32892/   197B6 : 001A                		dc.w Obj82_SwDisplay-Obj82_SwIndex
   32893/   197B8 :                     ; ===========================================================================
   32894/   197B8 :                     
   32895/   197B8 :                     loc_199E6:				; XREF: Obj82_SwIndex
   32896/   197B8 : 2268 0034           		movea.l	$34(a0),a1
   32897/   197BC : 0C69 5357 0028      		cmpi.w	#$5357,$28(a1)
   32898/   197C2 : 660A                		bne.s	Obj82_SwDisplay
   32899/   197C4 : 117C 0001 001A      		move.b	#1,$1A(a0)
   32900/   197CA : 5428 0025           		addq.b	#2,$25(a0)
   32901/   197CE :                     
   32902/   197CE :                     Obj82_SwDisplay:			; XREF: Obj82_SwIndex
   32903/   197CE : 4EF9 0000 D3D2      		jmp	DisplaySprite
   32904/   197D4 :                     ; ===========================================================================
   32905/   197D4 :                     Ani_obj82:
   32906/   197D4 :                     	include "_animations/obj82.asm"
(1)    1/   197D4 :                     ; ---------------------------------------------------------------------------
(1)    2/   197D4 :                     ; Animation script - Eggman (SBZ2)
(1)    3/   197D4 :                     ; ---------------------------------------------------------------------------
(1)    4/   197D4 : 000E                		dc.w byte_19A10-Ani_obj82
(1)    5/   197D6 : 0012                		dc.w byte_19A14-Ani_obj82
(1)    6/   197D8 : 0016                		dc.w byte_19A18-Ani_obj82
(1)    7/   197DA : 001E                		dc.w byte_19A20-Ani_obj82
(1)    8/   197DC : 0022                		dc.w byte_19A24-Ani_obj82
(1)    9/   197DE : 0028                		dc.w byte_19A2A-Ani_obj82
(1)   10/   197E0 : 002E                		dc.w byte_19A30-Ani_obj82
(1)   11/   197E2 : 7E00 FF00           byte_19A10:	dc.b $7E, 0, $FF, 0
(1)   12/   197E6 : 0601 02FF           byte_19A14:	dc.b 6,	1, 2, $FF
(1)   13/   197EA : 0E03 0404 0000      byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
            197F0 : 00FF             
(1)   14/   197F2 : 0005 09FF           byte_19A20:	dc.b 0,	5, 9, $FF
(1)   15/   197F6 : 0607 0408 04FF      byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
(1)   16/   197FC : 0F04 0303 FF00      byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
(1)   17/   19802 : 7E06 FF00           byte_19A30:	dc.b $7E, 6, $FF, 0
(1)   18/   19806 : (MACRO)              		even
   32907/   19806 :                     
   32908/   19806 :                     ; ---------------------------------------------------------------------------
   32909/   19806 :                     ; Sprite mappings - Eggman (SBZ2)
   32910/   19806 :                     ; ---------------------------------------------------------------------------
   32911/   19806 :                     Map_obj82:
   32912/   19806 :                     	include "_mappings/obj82.asm"
(1)    1/   19806 :                     ; ---------------------------------------------------------------------------
(1)    2/   19806 :                     ; Sprite mappings - Eggman (SBZ2)
(1)    3/   19806 :                     ; ---------------------------------------------------------------------------
(1)    4/   19806 : 0016 0026           		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
(1)    5/   1980A : 003C 0052           		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
(1)    6/   1980E : 0068 007E           		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
(1)    7/   19812 : 0094 00B8           		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
(1)    8/   19816 : 00D2 00F2           		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
(1)    9/   1981A : 011B                		dc.w byte_19B4F-Map_obj82
(1)   10/   1981C : 03                  byte_19A4A:	dc.b 3
(1)   11/   1981D : FC00 008F E8        		dc.b $FC, 0, 0,	$8F, $E8
(1)   12/   19822 : E80E 0000 F0        		dc.b $E8, $E, 0, 0, $F0
(1)   13/   19827 : 000F 006F F0        		dc.b 0,	$F, 0, $6F, $F0
(1)   14/   1982C : 04                  byte_19A5A:	dc.b 4
(1)   15/   1982D : E80D 000E F0        		dc.b $E8, $D, 0, $E, $F0
(1)   16/   19832 : E80E 0000 F0        		dc.b $E8, $E, 0, 0, $F0
(1)   17/   19837 : 000F 006F F0        		dc.b 0,	$F, 0, $6F, $F0
(1)   18/   1983C : FC00 008F E8        		dc.b $FC, 0, 0,	$8F, $E8
(1)   19/   19841 : 00                  		dc.b 0
(1)   20/   19842 : 04                  byte_19A70:	dc.b 4
(1)   21/   19843 : E90D 000E F0        		dc.b $E9, $D, 0, $E, $F0
(1)   22/   19848 : E90E 0000 F0        		dc.b $E9, $E, 0, 0, $F0
(1)   23/   1984D : 010F 007F F0        		dc.b 1,	$F, 0, $7F, $F0
(1)   24/   19852 : FD00 008F E8        		dc.b $FD, 0, 0,	$8F, $E8
(1)   25/   19857 : 00                  		dc.b 0
(1)   26/   19858 : 04                  byte_19A86:	dc.b 4
(1)   27/   19859 : F40F 0820 F0        		dc.b $F4, $F, 8, $20, $F0
(1)   28/   1985E : F504 0830 10        		dc.b $F5, 4, 8,	$30, $10
(1)   29/   19863 : 0809 084E F0        		dc.b 8,	9, 8, $4E, $F0
(1)   30/   19868 : EC0E 0000 F0        		dc.b $EC, $E, 0, 0, $F0
(1)   31/   1986D : 00                  		dc.b 0
(1)   32/   1986E : 04                  byte_19A9C:	dc.b 4
(1)   33/   1986F : F00F 0820 F0        		dc.b $F0, $F, 8, $20, $F0
(1)   34/   19874 : F104 0830 10        		dc.b $F1, 4, 8,	$30, $10
(1)   35/   19879 : 0806 083E F8        		dc.b 8,	6, 8, $3E, $F8
(1)   36/   1987E : E80E 0000 F0        		dc.b $E8, $E, 0, 0, $F0
(1)   37/   19883 : 00                  		dc.b 0
(1)   38/   19884 : 04                  byte_19AB2:	dc.b 4
(1)   39/   19885 : E80D 0016 EC        		dc.b $E8, $D, 0, $16, $EC
(1)   40/   1988A : E801 001E 0C        		dc.b $E8, 1, 0,	$1E, $C
(1)   41/   1988F : E80E 0000 F0        		dc.b $E8, $E, 0, 0, $F0
(1)   42/   19894 : 000F 006F F0        		dc.b 0,	$F, 0, $6F, $F0
(1)   43/   19899 : 00                  		dc.b 0
(1)   44/   1989A : 07                  byte_19AC8:	dc.b 7
(1)   45/   1989B : E80D 0016 EC        		dc.b $E8, $D, 0, $16, $EC
(1)   46/   198A0 : E801 001E 0C        		dc.b $E8, 1, 0,	$1E, $C
(1)   47/   198A5 : 0409 0834 00        		dc.b 4,	9, 8, $34, 0
(1)   48/   198AA : 0405 083A E8        		dc.b 4,	5, 8, $3A, $E8
(1)   49/   198AF : F00F 0820 F0        		dc.b $F0, $F, 8, $20, $F0
(1)   50/   198B4 : F104 0854 10        		dc.b $F1, 4, 8,	$54, $10
(1)   51/   198B9 : F104 0054 E0        		dc.b $F1, 4, 0,	$54, $E0
(1)   52/   198BE : 05                  byte_19AEC:	dc.b 5
(1)   53/   198BF : F00F 0820 F0        		dc.b $F0, $F, 8, $20, $F0
(1)   54/   198C4 : F104 0830 10        		dc.b $F1, 4, 8,	$30, $10
(1)   55/   198C9 : 0409 0834 00        		dc.b 4,	9, 8, $34, 0
(1)   56/   198CE : 0405 083A E8        		dc.b 4,	5, 8, $3A, $E8
(1)   57/   198D3 : E80E 0000 F0        		dc.b $E8, $E, 0, 0, $F0
(1)   58/   198D8 : 06                  byte_19B06:	dc.b 6
(1)   59/   198D9 : EE0F 0820 F0        		dc.b $EE, $F, 8, $20, $F0
(1)   60/   198DE : EF04 0830 10        		dc.b $EF, 4, 8,	$30, $10
(1)   61/   198E3 : 0905 0844 00        		dc.b 9,	5, 8, $44, 0
(1)   62/   198E8 : 0301 0848 F8        		dc.b 3,	1, 8, $48, $F8
(1)   63/   198ED : 0B05 084A E8        		dc.b $B, 5, 8, $4A, $E8
(1)   64/   198F2 : E60E 0000 F0        		dc.b $E6, $E, 0, 0, $F0
(1)   65/   198F7 : 00                  		dc.b 0
(1)   66/   198F8 : 08                  byte_19B26:	dc.b 8
(1)   67/   198F9 : E80D 0016 EC        		dc.b $E8, $D, 0, $16, $EC
(1)   68/   198FE : E801 001E 0C        		dc.b $E8, 1, 0,	$1E, $C
(1)   69/   19903 : E80E 0000 F0        		dc.b $E8, $E, 0, 0, $F0
(1)   70/   19908 : 000F 006F F0        		dc.b 0,	$F, 0, $6F, $F0
(1)   71/   1990D : E00D 3EF0 F0        		dc.b $E0, $D, $3E, $F0,	$F0
(1)   72/   19912 : F00D 3EF0 F0        		dc.b $F0, $D, $3E, $F0,	$F0
(1)   73/   19917 : 000D 3EF0 F0        		dc.b 0,	$D, $3E, $F0, $F0
(1)   74/   1991C : 100D 3EF0 F0        		dc.b $10, $D, $3E, $F0,	$F0
(1)   75/   19921 : 03                  byte_19B4F:	dc.b 3
(1)   76/   19922 : EC0D 0056 E4        		dc.b $EC, $D, 0, $56, $E4
(1)   77/   19927 : F408 005E 04        		dc.b $F4, 8, 0,	$5E, 4
(1)   78/   1992C : EC0D 0061 FC        		dc.b $EC, $D, 0, $61, $FC
(1)   79/   19931 : (MACRO)              		even
(1)   79/   19931 : 00                                          dc.b 0 ;ds.b 1 
   32913/   19932 :                     
   32914/   19932 :                     ; ===========================================================================
   32915/   19932 :                     ; ---------------------------------------------------------------------------
   32916/   19932 :                     ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
   32917/   19932 :                     ; ---------------------------------------------------------------------------
   32918/   19932 :                     
   32919/   19932 :                     Obj83:					; XREF: Obj_Index
   32920/   19932 : 7000                		moveq	#0,d0
   32921/   19934 : 1028 0024           		move.b	$24(a0),d0
   32922/   19938 : 323B 0006           		move.w	Obj83_Index(pc,d0.w),d1
   32923/   1993C : 4EFB 1002           		jmp	Obj83_Index(pc,d1.w)
   32924/   19940 :                     ; ===========================================================================
   32925/   19940 : 000C                Obj83_Index:	dc.w Obj83_Main-Obj83_Index
   32926/   19942 : 008E                		dc.w Obj83_ChkBreak-Obj83_Index
   32927/   19944 : 00C8                		dc.w loc_19C36-Obj83_Index
   32928/   19946 : 00F4                		dc.w loc_19C62-Obj83_Index
   32929/   19948 : 0104                		dc.w loc_19C72-Obj83_Index
   32930/   1994A : 0112                		dc.w loc_19C80-Obj83_Index
   32931/   1994C :                     ; ===========================================================================
   32932/   1994C :                     
   32933/   1994C :                     Obj83_Main:				; XREF: Obj83_Index
   32934/   1994C : 317C 2080 0008      		move.w	#$2080,8(a0)
   32935/   19952 : 317C 05D0 000C      		move.w	#$5D0,$C(a0)
   32936/   19958 : 117C 0080 0019      		move.b	#$80,$19(a0)
   32937/   1995E : 117C 0010 0016      		move.b	#$10,$16(a0)
   32938/   19964 : 117C 0004 0001      		move.b	#4,1(a0)
   32939/   1996A : 08E8 0007 0001      		bset	#7,1(a0)
   32940/   19970 : 7800                		moveq	#0,d4
   32941/   19972 : 3A3C 2010           		move.w	#$2010,d5
   32942/   19976 : 7C07                		moveq	#7,d6
   32943/   19978 : 45E8 0030           		lea	$30(a0),a2
   32944/   1997C :                     
   32945/   1997C :                     Obj83_MakeBlock:
   32946/   1997C : 4EB9 0000 D858      		jsr	SingleObjLoad
   32947/   19982 : 6644                		bne.s	Obj83_ExitMake
   32948/   19984 : 34C9                		move.w	a1,(a2)+
   32949/   19986 : 12BC 0083           		move.b	#$83,(a1)	; load block object
   32950/   1998A : 237C 0001 9AE4      		move.l	#Map_obj83,4(a1)
            19990 : 0004             
   32951/   19992 : 337C 4518 0002      		move.w	#$4518,2(a1)
   32952/   19998 : 137C 0004 0001      		move.b	#4,1(a1)
   32953/   1999E : 137C 0010 0019      		move.b	#$10,$19(a1)
   32954/   199A4 : 137C 0010 0016      		move.b	#$10,$16(a1)
   32955/   199AA : 137C 0003 0018      		move.b	#3,$18(a1)
   32956/   199B0 : 3345 0008           		move.w	d5,8(a1)	; set X	position
   32957/   199B4 : 337C 05D0 000C      		move.w	#$5D0,$C(a1)
   32958/   199BA : 0645 0020           		addi.w	#$20,d5		; add $20 for next X position
   32959/   199BE : 137C 0008 0024      		move.b	#8,$24(a1)
   32960/   199C4 : 51CE FFB6           		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
   32961/   199C8 :                     
   32962/   199C8 :                     Obj83_ExitMake:
   32963/   199C8 : 5428 0024           		addq.b	#2,$24(a0)
   32964/   199CC : 4E75                		rts	
   32965/   199CE :                     ; ===========================================================================
   32966/   199CE :                     
   32967/   199CE :                     Obj83_ChkBreak:				; XREF: Obj83_Index
   32968/   199CE : 0C68 474F 0028      		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
   32969/   199D4 : 6608                		bne.s	Obj83_Solid	; if not, branch
   32970/   199D6 : 4228 001A           		clr.b	$1A(a0)
   32971/   199DA : 5428 0024           		addq.b	#2,$24(a0)	; next subroutine
   32972/   199DE :                     
   32973/   199DE :                     Obj83_Solid:
   32974/   199DE : 7000                		moveq	#0,d0
   32975/   199E0 : 1028 001A           		move.b	$1A(a0),d0
   32976/   199E4 : 4400                		neg.b	d0
   32977/   199E6 : 4880                		ext.w	d0
   32978/   199E8 : 5040                		addq.w	#8,d0
   32979/   199EA : E940                		asl.w	#4,d0
   32980/   199EC : 383C 2100           		move.w	#$2100,d4
   32981/   199F0 : 9840                		sub.w	d0,d4
   32982/   199F2 : 1140 0019           		move.b	d0,$19(a0)
   32983/   199F6 : 3144 0008           		move.w	d4,8(a0)
   32984/   199FA : 720B                		moveq	#$B,d1
   32985/   199FC : D240                		add.w	d0,d1
   32986/   199FE : 7410                		moveq	#$10,d2
   32987/   19A00 : 7611                		moveq	#$11,d3
   32988/   19A02 : 4EF9 0000 F792      		jmp	SolidObject
   32989/   19A08 :                     ; ===========================================================================
   32990/   19A08 :                     
   32991/   19A08 :                     loc_19C36:				; XREF: Obj83_Index
   32992/   19A08 : 0428 000E 001E      		subi.b	#$E,$1E(a0)
   32993/   19A0E : 6422                		bcc.s	Obj83_Solid2
   32994/   19A10 : 70FF                		moveq	#-1,d0
   32995/   19A12 : 1028 001A           		move.b	$1A(a0),d0
   32996/   19A16 : 4880                		ext.w	d0
   32997/   19A18 : D040                		add.w	d0,d0
   32998/   19A1A : 3030 0030           		move.w	$30(a0,d0.w),d0
   32999/   19A1E : 2240                		movea.l	d0,a1
   33000/   19A20 : 337C 474F 0028      		move.w	#$474F,$28(a1)
   33001/   19A26 : 5228 001A           		addq.b	#1,$1A(a0)
   33002/   19A2A : 0C28 0008 001A      		cmpi.b	#8,$1A(a0)
   33003/   19A30 : 6702                		beq.s	loc_19C62
   33004/   19A32 :                     
   33005/   19A32 :                     Obj83_Solid2:
   33006/   19A32 : 60AA                		bra.s	Obj83_Solid
   33007/   19A34 :                     ; ===========================================================================
   33008/   19A34 :                     
   33009/   19A34 :                     loc_19C62:				; XREF: Obj83_Index
   33010/   19A34 : 08A8 0003 0022      		bclr	#3,$22(a0)
   33011/   19A3A : 08B8 0003 D022      		bclr	#3,($FFFFD022).w
   33012/   19A40 : 6000 FBBC           		bra.w	loc_1982C
   33013/   19A44 :                     ; ===========================================================================
   33014/   19A44 :                     
   33015/   19A44 :                     loc_19C72:				; XREF: Obj83_Index
   33016/   19A44 : 0C68 474F 0028      		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
   33017/   19A4A : 671A                		beq.s	Obj83_Break	; if yes, branch
   33018/   19A4C : 4EF9 0000 D3D2      		jmp	DisplaySprite
   33019/   19A52 :                     ; ===========================================================================
   33020/   19A52 :                     
   33021/   19A52 :                     loc_19C80:				; XREF: Obj83_Index
   33022/   19A52 : 4A28 0001           		tst.b	1(a0)
   33023/   19A56 : 6A00 FBA6           		bpl.w	loc_1982C
   33024/   19A5A : 4EB9 0000 D380      		jsr	ObjectFall
   33025/   19A60 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   33026/   19A66 :                     ; ===========================================================================
   33027/   19A66 :                     
   33028/   19A66 :                     Obj83_Break:				; XREF: loc_19C72
   33029/   19A66 : 49FA 0064           		lea	Obj83_FragSpeed(pc),a4
   33030/   19A6A : 4BFA 0068           		lea	Obj83_FragPos(pc),a5
   33031/   19A6E : 7801                		moveq	#1,d4
   33032/   19A70 : 7203                		moveq	#3,d1
   33033/   19A72 : 7438                		moveq	#$38,d2
   33034/   19A74 : 5428 0024           		addq.b	#2,$24(a0)
   33035/   19A78 : 117C 0008 0019      		move.b	#8,$19(a0)
   33036/   19A7E : 117C 0008 0016      		move.b	#8,$16(a0)
   33037/   19A84 : 43D0                		lea	(a0),a1
   33038/   19A86 : 6008                		bra.s	Obj83_MakeFrag
   33039/   19A88 :                     ; ===========================================================================
   33040/   19A88 :                     
   33041/   19A88 :                     Obj83_LoopFrag:
   33042/   19A88 : 4EB9 0000 D86E      		jsr	SingleObjLoad2
   33043/   19A8E : 662C                		bne.s	Obj83_BreakSnd
   33044/   19A90 :                     
   33045/   19A90 :                     Obj83_MakeFrag:				; XREF: Obj83_Break
   33046/   19A90 : 45D0                		lea	(a0),a2
   33047/   19A92 : 47D1                		lea	(a1),a3
   33048/   19A94 : 7603                		moveq	#3,d3
   33049/   19A96 :                     
   33050/   19A96 :                     loc_19CC4:
   33051/   19A96 : 26DA                		move.l	(a2)+,(a3)+
   33052/   19A98 : 26DA                		move.l	(a2)+,(a3)+
   33053/   19A9A : 26DA                		move.l	(a2)+,(a3)+
   33054/   19A9C : 26DA                		move.l	(a2)+,(a3)+
   33055/   19A9E : 51CB FFF6           		dbf	d3,loc_19CC4
   33056/   19AA2 :                     
   33057/   19AA2 : 335C 0012           		move.w	(a4)+,$12(a1)
   33058/   19AA6 : 361D                		move.w	(a5)+,d3
   33059/   19AA8 : D769 0008           		add.w	d3,8(a1)
   33060/   19AAC : 361D                		move.w	(a5)+,d3
   33061/   19AAE : D769 000C           		add.w	d3,$C(a1)
   33062/   19AB2 : 1344 001A           		move.b	d4,$1A(a1)
   33063/   19AB6 : 5244                		addq.w	#1,d4
   33064/   19AB8 : 51C9 FFCE           		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
   33065/   19ABC :                     
   33066/   19ABC :                     Obj83_BreakSnd:
   33067/   19ABC : 303C 00CB           		move.w	#$CB,d0
   33068/   19AC0 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play smashing sound
   33069/   19AC6 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   33070/   19ACC :                     ; ===========================================================================
   33071/   19ACC : 0080 0000           Obj83_FragSpeed:dc.w $80, 0
   33072/   19AD0 : 0120 00C0           		dc.w $120, $C0
   33073/   19AD4 : FFF8 FFF8           Obj83_FragPos:	dc.w $FFF8, $FFF8
   33074/   19AD8 : 0010 0000           		dc.w $10, 0
   33075/   19ADC : 0000 0010           		dc.w 0,	$10
   33076/   19AE0 : 0010 0010           		dc.w $10, $10
   33077/   19AE4 :                     ; ---------------------------------------------------------------------------
   33078/   19AE4 :                     ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
   33079/   19AE4 :                     ; ---------------------------------------------------------------------------
   33080/   19AE4 :                     Map_obj83:
   33081/   19AE4 :                     	include "_mappings/obj83.asm"
(1)    1/   19AE4 :                     ; ---------------------------------------------------------------------------
(1)    2/   19AE4 :                     ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
(1)    3/   19AE4 :                     ; ---------------------------------------------------------------------------
(1)    4/   19AE4 : 000A 0010           		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
(1)    5/   19AE8 : 001C 0028           		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
(1)    6/   19AEC : 0034                		dc.w byte_19D46-Map_obj83
(1)    7/   19AEE : 01                  byte_19D1C:	dc.b 1
(1)    8/   19AEF : F00F 0000 F0        		dc.b $F0, $F, 0, 0, $F0
(1)    9/   19AF4 : 02                  byte_19D22:	dc.b 2
(1)   10/   19AF5 : F801 0000 F8        		dc.b $F8, 1, 0,	0, $F8
(1)   11/   19AFA : F801 0004 00        		dc.b $F8, 1, 0,	4, 0
(1)   12/   19AFF : 00                  		dc.b 0
(1)   13/   19B00 : 02                  byte_19D2E:	dc.b 2
(1)   14/   19B01 : F801 0008 F8        		dc.b $F8, 1, 0,	8, $F8
(1)   15/   19B06 : F801 000C 00        		dc.b $F8, 1, 0,	$C, 0
(1)   16/   19B0B : 00                  		dc.b 0
(1)   17/   19B0C : 02                  byte_19D3A:	dc.b 2
(1)   18/   19B0D : F801 0002 F8        		dc.b $F8, 1, 0,	2, $F8
(1)   19/   19B12 : F801 0006 00        		dc.b $F8, 1, 0,	6, 0
(1)   20/   19B17 : 00                  		dc.b 0
(1)   21/   19B18 : 02                  byte_19D46:	dc.b 2
(1)   22/   19B19 : F801 000A F8        		dc.b $F8, 1, 0,	$A, $F8
(1)   23/   19B1E : F801 000E 00        		dc.b $F8, 1, 0,	$E, 0
(1)   24/   19B23 : (MACRO)              		even
(1)   24/   19B23 : 00                                          dc.b 0 ;ds.b 1 
   33082/   19B24 :                     
   33083/   19B24 :                     ; ===========================================================================
   33084/   19B24 :                     ; ---------------------------------------------------------------------------
   33085/   19B24 :                     ; Object 85 - Eggman (FZ)
   33086/   19B24 :                     ; ---------------------------------------------------------------------------
   33087/   19B24 :                     
   33088/   19B24 :                     Obj85_Delete:
   33089/   19B24 : 4EF9 0000 D40E      		jmp	DeleteObject
   33090/   19B2A :                     ; ===========================================================================
   33091/   19B2A :                     
   33092/   19B2A :                     Obj85:					; XREF: Obj_Index
   33093/   19B2A : 7000                		moveq	#0,d0
   33094/   19B2C : 1028 0024           		move.b	$24(a0),d0
   33095/   19B30 : 303B 0006           		move.w	Obj85_Index(pc,d0.w),d0
   33096/   19B34 : 4EFB 0002           		jmp	Obj85_Index(pc,d0.w)
   33097/   19B38 :                     ; ===========================================================================
   33098/   19B38 : 0068                Obj85_Index:	dc.w Obj85_Main-Obj85_Index
   33099/   19B3A : 0106                		dc.w Obj85_Eggman-Obj85_Index
   33100/   19B3C : 0628                		dc.w loc_1A38E-Obj85_Index
   33101/   19B3E : 05E0                		dc.w loc_1A346-Obj85_Index
   33102/   19B40 : 0560                		dc.w loc_1A2C6-Obj85_Index
   33103/   19B42 : 0646                		dc.w loc_1A3AC-Obj85_Index
   33104/   19B44 : 04FE                		dc.w loc_1A264-Obj85_Index
   33105/   19B46 :                     
   33106/   19B46 : 0100 0100 0470      Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
   33107/   19B4C : 0001 9806           		dc.l Map_obj82		; mappings pointer
   33108/   19B50 : 25B0 0590 0300      		dc.w $25B0, $590, $300
   33109/   19B56 : 0001 A448           		dc.l Map_obj84
   33110/   19B5A : 26E0 0596 03A0      		dc.w $26E0, $596, $3A0
   33111/   19B60 : 0001 A1EE           		dc.l Map_FZBoss
   33112/   19B64 : 26E0 0596 0470      		dc.w $26E0, $596, $470
   33113/   19B6A : 0001 9806           		dc.l Map_obj82
   33114/   19B6E : 26E0 0596 0400      		dc.w $26E0, $596, $400
   33115/   19B74 : 0001 7AE6           		dc.l Map_Eggman
   33116/   19B78 : 26E0 0596 0400      		dc.w $26E0, $596, $400
   33117/   19B7E : 0001 7AE6           		dc.l Map_Eggman
   33118/   19B82 :                     
   33119/   19B82 : 0200 0420 19        Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
   33120/   19B87 : 0400 0112 08        		dc.b 4,	0, 1, $12, 8
   33121/   19B8C : 0600 0300 00        		dc.b 6,	0, 3, 0, 0
   33122/   19B91 : 0800 0300 00        		dc.b 8,	0, 3, 0, 0
   33123/   19B96 : 0A00 0320 20        		dc.b $A, 0, 3, $20, $20
   33124/   19B9B : 0C00 0300 00        		dc.b $C, 0, 3, 0, 0
   33125/   19BA0 :                     ; ===========================================================================
   33126/   19BA0 :                     
   33127/   19BA0 :                     Obj85_Main:				; XREF: Obj85_Index
   33128/   19BA0 : 45FA FFA4           		lea	Obj85_ObjData(pc),a2
   33129/   19BA4 : 47FA FFDC           		lea	Obj85_ObjData2(pc),a3
   33130/   19BA8 : 2248                		movea.l	a0,a1
   33131/   19BAA : 7205                		moveq	#5,d1
   33132/   19BAC : 6008                		bra.s	Obj85_LoadBoss
   33133/   19BAE :                     ; ===========================================================================
   33134/   19BAE :                     
   33135/   19BAE :                     Obj85_Loop:
   33136/   19BAE : 4EB9 0000 D86E      		jsr	SingleObjLoad2
   33137/   19BB4 : 663C                		bne.s	loc_19E20
   33138/   19BB6 :                     
   33139/   19BB6 :                     Obj85_LoadBoss:				; XREF: Obj85_Main
   33140/   19BB6 : 12BC 0085           		move.b	#$85,(a1)
   33141/   19BBA : 335A 0008           		move.w	(a2)+,8(a1)
   33142/   19BBE : 335A 000C           		move.w	(a2)+,$C(a1)
   33143/   19BC2 : 335A 0002           		move.w	(a2)+,2(a1)
   33144/   19BC6 : 235A 0004           		move.l	(a2)+,4(a1)
   33145/   19BCA : 135B 0024           		move.b	(a3)+,$24(a1)
   33146/   19BCE : 135B 001C           		move.b	(a3)+,$1C(a1)
   33147/   19BD2 : 135B 0018           		move.b	(a3)+,$18(a1)
   33148/   19BD6 : 135B 0017           		move.b	(a3)+,$17(a1)
   33149/   19BDA : 135B 0016           		move.b	(a3)+,$16(a1)
   33150/   19BDE : 137C 0004 0001      		move.b	#4,1(a1)
   33151/   19BE4 : 08E8 0007 0001      		bset	#7,1(a0)
   33152/   19BEA : 2348 0034           		move.l	a0,$34(a1)
   33153/   19BEE : 51C9 FFBE           		dbf	d1,Obj85_Loop
   33154/   19BF2 :                     
   33155/   19BF2 :                     loc_19E20:
   33156/   19BF2 : 45E8 0036           		lea	$36(a0),a2
   33157/   19BF6 : 4EB9 0000 D858      		jsr	SingleObjLoad
   33158/   19BFC : 662E                		bne.s	loc_19E5A
   33159/   19BFE : 12BC 0086           		move.b	#$86,(a1)	; load energy ball object
   33160/   19C02 : 3489                		move.w	a1,(a2)
   33161/   19C04 : 2348 0034           		move.l	a0,$34(a1)
   33162/   19C08 : 45E8 0038           		lea	$38(a0),a2
   33163/   19C0C : 7400                		moveq	#0,d2
   33164/   19C0E : 7203                		moveq	#3,d1
   33165/   19C10 :                     
   33166/   19C10 :                     loc_19E3E:
   33167/   19C10 : 4EB9 0000 D86E      		jsr	SingleObjLoad2
   33168/   19C16 : 6614                		bne.s	loc_19E5A
   33169/   19C18 : 34C9                		move.w	a1,(a2)+
   33170/   19C1A : 12BC 0084           		move.b	#$84,(a1)	; load crushing	cylinder object
   33171/   19C1E : 2348 0034           		move.l	a0,$34(a1)
   33172/   19C22 : 1342 0028           		move.b	d2,$28(a1)
   33173/   19C26 : 5442                		addq.w	#2,d2
   33174/   19C28 : 51C9 FFE6           		dbf	d1,loc_19E3E
   33175/   19C2C :                     
   33176/   19C2C :                     loc_19E5A:
   33177/   19C2C : 317C 0000 0034      		move.w	#0,$34(a0)
   33178/   19C32 : 117C 0008 0021      		move.b	#8,$21(a0)	; set number of	hits to	8
   33179/   19C38 : 317C FFFF 0030      		move.w	#-1,$30(a0)
   33180/   19C3E :                     
   33181/   19C3E :                     Obj85_Eggman:				; XREF: Obj85_Index
   33182/   19C3E : 7000                		moveq	#0,d0
   33183/   19C40 : 1028 0034           		move.b	$34(a0),d0
   33184/   19C44 : 303B 000C           		move.w	off_19E80(pc,d0.w),d0
   33185/   19C48 : 4EBB 0008           		jsr	off_19E80(pc,d0.w)
   33186/   19C4C : 4EF9 0000 D3D2      		jmp	DisplaySprite
   33187/   19C52 :                     ; ===========================================================================
   33188/   19C52 : 0010 0028           off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
   33189/   19C56 : 0166 01AA           		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
   33190/   19C5A : 01F4 0292           		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
   33191/   19C5E : 0312 0354           		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
   33192/   19C62 :                     ; ===========================================================================
   33193/   19C62 :                     
   33194/   19C62 :                     loc_19E90:				; XREF: off_19E80
   33195/   19C62 : 4AB8 F680           		tst.l	($FFFFF680).w
   33196/   19C66 : 660C                		bne.s	loc_19EA2
   33197/   19C68 : 0C78 2450 F700      		cmpi.w	#$2450,($FFFFF700).w
   33198/   19C6E : 6504                		bcs.s	loc_19EA2
   33199/   19C70 : 5428 0034           		addq.b	#2,$34(a0)
   33200/   19C74 :                     
   33201/   19C74 :                     loc_19EA2:
   33202/   19C74 : 52B8 F636           		addq.l	#1,($FFFFF636).w
   33203/   19C78 : 4E75                		rts	
   33204/   19C7A :                     ; ===========================================================================
   33205/   19C7A :                     
   33206/   19C7A :                     loc_19EA8:				; XREF: off_19E80
   33207/   19C7A : 4A68 0030           		tst.w	$30(a0)
   33208/   19C7E : 6A62                		bpl.s	loc_19F10
   33209/   19C80 : 4268 0030           		clr.w	$30(a0)
   33210/   19C84 : 4EB9 0000 279A      		jsr	(RandomNumber).l
   33211/   19C8A : 0240 000C           		andi.w	#$C,d0
   33212/   19C8E : 3200                		move.w	d0,d1
   33213/   19C90 : 5441                		addq.w	#2,d1
   33214/   19C92 : 4A80                		tst.l	d0
   33215/   19C94 : 6A02                		bpl.s	loc_19EC6
   33216/   19C96 : C340                		exg	d1,d0
   33217/   19C98 :                     
   33218/   19C98 :                     loc_19EC6:
   33219/   19C98 : 43FA 010E           		lea	word_19FD6(pc),a1
   33220/   19C9C : 3031 0000           		move.w	(a1,d0.w),d0
   33221/   19CA0 : 3231 1000           		move.w	(a1,d1.w),d1
   33222/   19CA4 : 3140 0030           		move.w	d0,$30(a0)
   33223/   19CA8 : 74FF                		moveq	#-1,d2
   33224/   19CAA : 3430 0038           		move.w	$38(a0,d0.w),d2
   33225/   19CAE : 2242                		movea.l	d2,a1
   33226/   19CB0 : 137C 00FF 0029      		move.b	#-1,$29(a1)
   33227/   19CB6 : 337C FFFF 0030      		move.w	#-1,$30(a1)
   33228/   19CBC : 3430 1038           		move.w	$38(a0,d1.w),d2
   33229/   19CC0 : 2242                		movea.l	d2,a1
   33230/   19CC2 : 137C 0001 0029      		move.b	#1,$29(a1)
   33231/   19CC8 : 337C 0000 0030      		move.w	#0,$30(a1)
   33232/   19CCE : 317C 0001 0032      		move.w	#1,$32(a0)
   33233/   19CD4 : 4228 0035           		clr.b	$35(a0)
   33234/   19CD8 : 303C 00B7           		move.w	#$B7,d0
   33235/   19CDC : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play rumbling sound
   33236/   19CE2 :                     
   33237/   19CE2 :                     loc_19F10:
   33238/   19CE2 : 4A68 0032           		tst.w	$32(a0)
   33239/   19CE6 : 6B00 0090           		bmi.w	loc_19FA6
   33240/   19CEA : 08A8 0000 0022      		bclr	#0,$22(a0)
   33241/   19CF0 : 3038 D008           		move.w	($FFFFD008).w,d0
   33242/   19CF4 : 9068 0008           		sub.w	8(a0),d0
   33243/   19CF8 : 6506                		bcs.s	loc_19F2E
   33244/   19CFA : 08E8 0000 0022      		bset	#0,$22(a0)
   33245/   19D00 :                     
   33246/   19D00 :                     loc_19F2E:
   33247/   19D00 : 323C 002B           		move.w	#$2B,d1
   33248/   19D04 : 343C 0014           		move.w	#$14,d2
   33249/   19D08 : 363C 0014           		move.w	#$14,d3
   33250/   19D0C : 3828 0008           		move.w	8(a0),d4
   33251/   19D10 : 4EB9 0000 F792      		jsr	SolidObject
   33252/   19D16 : 4A44                		tst.w	d4
   33253/   19D18 : 6E08                		bgt.s	loc_19F50
   33254/   19D1A :                     
   33255/   19D1A :                     loc_19F48:
   33256/   19D1A : 4A28 0035           		tst.b	$35(a0)
   33257/   19D1E : 663A                		bne.s	loc_19F88
   33258/   19D20 : 6046                		bra.s	loc_19F96
   33259/   19D22 :                     ; ===========================================================================
   33260/   19D22 :                     
   33261/   19D22 :                     loc_19F50:
   33262/   19D22 : 5E78 F636           		addq.w	#7,($FFFFF636).w
   33263/   19D26 : 0C38 0002 D01C      		cmpi.b	#2,($FFFFD01C).w
   33264/   19D2C : 66EC                		bne.s	loc_19F48
   33265/   19D2E : 303C 0300           		move.w	#$300,d0
   33266/   19D32 : 0828 0000 0022      		btst	#0,$22(a0)
   33267/   19D38 : 6602                		bne.s	loc_19F6A
   33268/   19D3A : 4440                		neg.w	d0
   33269/   19D3C :                     
   33270/   19D3C :                     loc_19F6A:
   33271/   19D3C : 31C0 D010           		move.w	d0,($FFFFD010).w
   33272/   19D40 : 4A28 0035           		tst.b	$35(a0)
   33273/   19D44 : 6614                		bne.s	loc_19F88
   33274/   19D46 : 5328 0021           		subq.b	#1,$21(a0)
   33275/   19D4A : 117C 0064 0035      		move.b	#$64,$35(a0)
   33276/   19D50 : 303C 00AC           		move.w	#$AC,d0
   33277/   19D54 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play boss damage sound
   33278/   19D5A :                     
   33279/   19D5A :                     loc_19F88:
   33280/   19D5A : 5328 0035           		subq.b	#1,$35(a0)
   33281/   19D5E : 6708                		beq.s	loc_19F96
   33282/   19D60 : 117C 0003 001C      		move.b	#3,$1C(a0)
   33283/   19D66 : 6006                		bra.s	loc_19F9C
   33284/   19D68 :                     ; ===========================================================================
   33285/   19D68 :                     
   33286/   19D68 :                     loc_19F96:
   33287/   19D68 : 117C 0001 001C      		move.b	#1,$1C(a0)
   33288/   19D6E :                     
   33289/   19D6E :                     loc_19F9C:
   33290/   19D6E : 43FA FA64           		lea	Ani_obj82(pc),a1
   33291/   19D72 : 4EF9 0000 A4FE      		jmp	AnimateSprite
   33292/   19D78 :                     ; ===========================================================================
   33293/   19D78 :                     
   33294/   19D78 :                     loc_19FA6:
   33295/   19D78 : 4A28 0021           		tst.b	$21(a0)
   33296/   19D7C : 6710                		beq.s	loc_19FBC
   33297/   19D7E : 5428 0034           		addq.b	#2,$34(a0)
   33298/   19D82 : 317C FFFF 0030      		move.w	#-1,$30(a0)
   33299/   19D88 : 4268 0032           		clr.w	$32(a0)
   33300/   19D8C : 4E75                		rts	
   33301/   19D8E :                     ; ===========================================================================
   33302/   19D8E :                     
   33303/   19D8E :                     loc_19FBC:
   33304/   19D8E : 117C 0006 0034      		move.b	#6,$34(a0)
   33305/   19D94 : 317C 25C0 0008      		move.w	#$25C0,8(a0)
   33306/   19D9A : 317C 053C 000C      		move.w	#$53C,$C(a0)
   33307/   19DA0 : 117C 0014 0016      		move.b	#$14,$16(a0)
   33308/   19DA6 : 4E75                		rts	
   33309/   19DA8 :                     ; ===========================================================================
   33310/   19DA8 : 0000 0002 0002      word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
            19DAE : 0004 0004 0006 
            19DB4 : 0006 0000          
   33311/   19DB8 :                     ; ===========================================================================
   33312/   19DB8 :                     
   33313/   19DB8 :                     loc_19FE6:				; XREF: off_19E80
   33314/   19DB8 : 70FF                		moveq	#-1,d0
   33315/   19DBA : 3028 0036           		move.w	$36(a0),d0
   33316/   19DBE : 2240                		movea.l	d0,a1
   33317/   19DC0 : 4A68 0030           		tst.w	$30(a0)
   33318/   19DC4 : 6A0C                		bpl.s	loc_1A000
   33319/   19DC6 : 4268 0030           		clr.w	$30(a0)
   33320/   19DCA : 137C 00FF 0029      		move.b	#-1,$29(a1)
   33321/   19DD0 : 6120                		bsr.s	loc_1A020
   33322/   19DD2 :                     
   33323/   19DD2 :                     loc_1A000:
   33324/   19DD2 : 700F                		moveq	#$F,d0
   33325/   19DD4 : C078 FE0E           		and.w	($FFFFFE0E).w,d0
   33326/   19DD8 : 6602                		bne.s	loc_1A00A
   33327/   19DDA : 6116                		bsr.s	loc_1A020
   33328/   19DDC :                     
   33329/   19DDC :                     loc_1A00A:
   33330/   19DDC : 4A68 0032           		tst.w	$32(a0)
   33331/   19DE0 : 670E                		beq.s	locret_1A01E
   33332/   19DE2 : 5528 0034           		subq.b	#2,$34(a0)
   33333/   19DE6 : 317C FFFF 0030      		move.w	#-1,$30(a0)
   33334/   19DEC : 4268 0032           		clr.w	$32(a0)
   33335/   19DF0 :                     
   33336/   19DF0 :                     locret_1A01E:
   33337/   19DF0 : 4E75                		rts	
   33338/   19DF2 :                     ; ===========================================================================
   33339/   19DF2 :                     
   33340/   19DF2 :                     loc_1A020:
   33341/   19DF2 : 303C 00B1           		move.w	#$B1,d0
   33342/   19DF6 : 4EF9 0000 1182      		jmp	(PlaySound_Special).l ;	play electricity sound
   33343/   19DFC :                     ; ===========================================================================
   33344/   19DFC :                     
   33345/   19DFC :                     loc_1A02A:				; XREF: off_19E80
   33346/   19DFC : 117C 0030 0017      		move.b	#$30,$17(a0)
   33347/   19E02 : 08E8 0000 0022      		bset	#0,$22(a0)
   33348/   19E08 : 4EB9 0000 D3AC      		jsr	SpeedToPos
   33349/   19E0E : 117C 0006 001A      		move.b	#6,$1A(a0)
   33350/   19E14 : 0668 0010 0012      		addi.w	#$10,$12(a0)
   33351/   19E1A : 0C68 059C 000C      		cmpi.w	#$59C,$C(a0)
   33352/   19E20 : 6520                		bcs.s	loc_1A070
   33353/   19E22 : 317C 059C 000C      		move.w	#$59C,$C(a0)
   33354/   19E28 : 5428 0034           		addq.b	#2,$34(a0)
   33355/   19E2C : 117C 0020 0017      		move.b	#$20,$17(a0)
   33356/   19E32 : 317C 0100 0010      		move.w	#$100,$10(a0)
   33357/   19E38 : 317C FF00 0012      		move.w	#-$100,$12(a0)
   33358/   19E3E : 5438 F742           		addq.b	#2,($FFFFF742).w
   33359/   19E42 :                     
   33360/   19E42 :                     loc_1A070:
   33361/   19E42 : 6000 00F4           		bra.w	loc_1A166
   33362/   19E46 :                     ; ===========================================================================
   33363/   19E46 :                     
   33364/   19E46 :                     loc_1A074:				; XREF: off_19E80
   33365/   19E46 : 08E8 0000 0022      		bset	#0,$22(a0)
   33366/   19E4C : 117C 0004 001C      		move.b	#4,$1C(a0)
   33367/   19E52 : 4EB9 0000 D3AC      		jsr	SpeedToPos
   33368/   19E58 : 0668 0010 0012      		addi.w	#$10,$12(a0)
   33369/   19E5E : 0C68 05A3 000C      		cmpi.w	#$5A3,$C(a0)
   33370/   19E64 : 6506                		bcs.s	loc_1A09A
   33371/   19E66 : 317C FFC0 0012      		move.w	#-$40,$12(a0)
   33372/   19E6C :                     
   33373/   19E6C :                     loc_1A09A:
   33374/   19E6C : 317C 0400 0010      		move.w	#$400,$10(a0)
   33375/   19E72 : 3028 0008           		move.w	8(a0),d0
   33376/   19E76 : 9078 D008           		sub.w	($FFFFD008).w,d0
   33377/   19E7A : 6A0A                		bpl.s	loc_1A0B4
   33378/   19E7C : 317C 0500 0010      		move.w	#$500,$10(a0)
   33379/   19E82 : 6000 0040           		bra.w	loc_1A0F2
   33380/   19E86 :                     ; ===========================================================================
   33381/   19E86 :                     
   33382/   19E86 :                     loc_1A0B4:
   33383/   19E86 : 0440 0070           		subi.w	#$70,d0
   33384/   19E8A : 6538                		bcs.s	loc_1A0F2
   33385/   19E8C : 0468 0100 0010      		subi.w	#$100,$10(a0)
   33386/   19E92 : 5140                		subq.w	#8,d0
   33387/   19E94 : 652E                		bcs.s	loc_1A0F2
   33388/   19E96 : 0468 0100 0010      		subi.w	#$100,$10(a0)
   33389/   19E9C : 5140                		subq.w	#8,d0
   33390/   19E9E : 6524                		bcs.s	loc_1A0F2
   33391/   19EA0 : 0468 0080 0010      		subi.w	#$80,$10(a0)
   33392/   19EA6 : 5140                		subq.w	#8,d0
   33393/   19EA8 : 651A                		bcs.s	loc_1A0F2
   33394/   19EAA : 0468 0080 0010      		subi.w	#$80,$10(a0)
   33395/   19EB0 : 5140                		subq.w	#8,d0
   33396/   19EB2 : 6510                		bcs.s	loc_1A0F2
   33397/   19EB4 : 0468 0080 0010      		subi.w	#$80,$10(a0)
   33398/   19EBA : 0440 0038           		subi.w	#$38,d0
   33399/   19EBE : 6504                		bcs.s	loc_1A0F2
   33400/   19EC0 : 4268 0010           		clr.w	$10(a0)
   33401/   19EC4 :                     
   33402/   19EC4 :                     loc_1A0F2:
   33403/   19EC4 : 0C68 26A0 0008      		cmpi.w	#$26A0,8(a0)
   33404/   19ECA : 6516                		bcs.s	loc_1A110
   33405/   19ECC : 317C 26A0 0008      		move.w	#$26A0,8(a0)
   33406/   19ED2 : 317C 0240 0010      		move.w	#$240,$10(a0)
   33407/   19ED8 : 317C FB40 0012      		move.w	#-$4C0,$12(a0)
   33408/   19EDE : 5428 0034           		addq.b	#2,$34(a0)
   33409/   19EE2 :                     
   33410/   19EE2 :                     loc_1A110:
   33411/   19EE2 : 604A                		bra.s	loc_1A15C
   33412/   19EE4 :                     ; ===========================================================================
   33413/   19EE4 :                     
   33414/   19EE4 :                     loc_1A112:				; XREF: off_19E80
   33415/   19EE4 : 4EB9 0000 D3AC      		jsr	SpeedToPos
   33416/   19EEA : 0C68 26E0 0008      		cmpi.w	#$26E0,8(a0)
   33417/   19EF0 : 6504                		bcs.s	loc_1A124
   33418/   19EF2 : 4268 0010           		clr.w	$10(a0)
   33419/   19EF6 :                     
   33420/   19EF6 :                     loc_1A124:
   33421/   19EF6 : 0668 0034 0012      		addi.w	#$34,$12(a0)
   33422/   19EFC : 4A68 0012           		tst.w	$12(a0)
   33423/   19F00 : 6B12                		bmi.s	loc_1A142
   33424/   19F02 : 0C68 0592 000C      		cmpi.w	#$592,$C(a0)
   33425/   19F08 : 650A                		bcs.s	loc_1A142
   33426/   19F0A : 317C 0592 000C      		move.w	#$592,$C(a0)
   33427/   19F10 : 4268 0012           		clr.w	$12(a0)
   33428/   19F14 :                     
   33429/   19F14 :                     loc_1A142:
   33430/   19F14 : 3028 0010           		move.w	$10(a0),d0
   33431/   19F18 : 8068 0012           		or.w	$12(a0),d0
   33432/   19F1C : 6610                		bne.s	loc_1A15C
   33433/   19F1E : 5428 0034           		addq.b	#2,$34(a0)
   33434/   19F22 : 317C FE80 0012      		move.w	#-$180,$12(a0)
   33435/   19F28 : 117C 0001 0021      		move.b	#1,$21(a0)
   33436/   19F2E :                     
   33437/   19F2E :                     loc_1A15C:
   33438/   19F2E : 43FA F8A4           		lea	Ani_obj82(pc),a1
   33439/   19F32 : 4EB9 0000 A4FE      		jsr	AnimateSprite
   33440/   19F38 :                     
   33441/   19F38 :                     loc_1A166:
   33442/   19F38 : 0C78 2700 F72A      		cmpi.w	#$2700,($FFFFF72A).w
   33443/   19F3E : 6C04                		bge.s	loc_1A172
   33444/   19F40 : 5478 F72A           		addq.w	#2,($FFFFF72A).w
   33445/   19F44 :                     
   33446/   19F44 :                     loc_1A172:
   33447/   19F44 : 0C28 000C 0034      		cmpi.b	#$C,$34(a0)
   33448/   19F4A : 6C16                		bge.s	locret_1A190
   33449/   19F4C : 323C 001B           		move.w	#$1B,d1
   33450/   19F50 : 343C 0070           		move.w	#$70,d2
   33451/   19F54 : 363C 0071           		move.w	#$71,d3
   33452/   19F58 : 3828 0008           		move.w	8(a0),d4
   33453/   19F5C : 4EF9 0000 F792      		jmp	SolidObject
   33454/   19F62 :                     ; ===========================================================================
   33455/   19F62 :                     
   33456/   19F62 :                     locret_1A190:
   33457/   19F62 : 4E75                		rts	
   33458/   19F64 :                     ; ===========================================================================
   33459/   19F64 :                     
   33460/   19F64 :                     loc_1A192:				; XREF: off_19E80
   33461/   19F64 : 217C 0001 7AE6      		move.l	#Map_Eggman,4(a0)
            19F6A : 0004             
   33462/   19F6C : 317C 0400 0002      		move.w	#$400,2(a0)
   33463/   19F72 : 117C 0000 001C      		move.b	#0,$1C(a0)
   33464/   19F78 : 08E8 0000 0022      		bset	#0,$22(a0)
   33465/   19F7E : 4EB9 0000 D3AC      		jsr	SpeedToPos
   33466/   19F84 : 0C68 0544 000C      		cmpi.w	#$544,$C(a0)
   33467/   19F8A : 6416                		bcc.s	loc_1A1D0
   33468/   19F8C : 317C 0180 0010      		move.w	#$180,$10(a0)
   33469/   19F92 : 317C FFE8 0012      		move.w	#-$18,$12(a0)
   33470/   19F98 : 117C 000F 0020      		move.b	#$F,$20(a0)
   33471/   19F9E : 5428 0034           		addq.b	#2,$34(a0)
   33472/   19FA2 :                     
   33473/   19FA2 :                     loc_1A1D0:
   33474/   19FA2 : 6000 FF8A           		bra.w	loc_1A15C
   33475/   19FA6 :                     ; ===========================================================================
   33476/   19FA6 :                     
   33477/   19FA6 :                     loc_1A1D4:				; XREF: off_19E80
   33478/   19FA6 : 08E8 0000 0022      		bset	#0,$22(a0)
   33479/   19FAC : 4EB9 0000 D3AC      		jsr	SpeedToPos
   33480/   19FB2 : 4A68 0030           		tst.w	$30(a0)
   33481/   19FB6 : 6616                		bne.s	loc_1A1FC
   33482/   19FB8 : 4A28 0020           		tst.b	$20(a0)
   33483/   19FBC : 662A                		bne.s	loc_1A216
   33484/   19FBE : 317C 001E 0030      		move.w	#$1E,$30(a0)
   33485/   19FC4 : 303C 00AC           		move.w	#$AC,d0
   33486/   19FC8 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play boss damage sound
   33487/   19FCE :                     
   33488/   19FCE :                     loc_1A1FC:
   33489/   19FCE : 5368 0030           		subq.w	#1,$30(a0)
   33490/   19FD2 : 6614                		bne.s	loc_1A216
   33491/   19FD4 : 4A28 0022           		tst.b	$22(a0)
   33492/   19FD8 : 6A08                		bpl.s	loc_1A210
   33493/   19FDA : 317C 0060 0012      		move.w	#$60,$12(a0)
   33494/   19FE0 : 6006                		bra.s	loc_1A216
   33495/   19FE2 :                     ; ===========================================================================
   33496/   19FE2 :                     
   33497/   19FE2 :                     loc_1A210:
   33498/   19FE2 : 117C 000F 0020      		move.b	#$F,$20(a0)
   33499/   19FE8 :                     
   33500/   19FE8 :                     loc_1A216:
   33501/   19FE8 : 0C78 2790 D008      		cmpi.w	#$2790,($FFFFD008).w
   33502/   19FEE : 6D1C                		blt.s	loc_1A23A
   33503/   19FF0 : 11FC 0001 F7CC      		move.b	#1,($FFFFF7CC).w
   33504/   19FF6 : 31FC 0000 F602      		move.w	#0,($FFFFF602).w
   33505/   19FFC : 4278 D014           		clr.w	($FFFFD014).w
   33506/   1A000 : 4A68 0012           		tst.w	$12(a0)
   33507/   1A004 : 6A14                		bpl.s	loc_1A248
   33508/   1A006 : 31FC 0100 F602      		move.w	#$100,($FFFFF602).w
   33509/   1A00C :                     
   33510/   1A00C :                     loc_1A23A:
   33511/   1A00C : 0C78 27E0 D008      		cmpi.w	#$27E0,($FFFFD008).w
   33512/   1A012 : 6D06                		blt.s	loc_1A248
   33513/   1A014 : 31FC 27E0 D008      		move.w	#$27E0,($FFFFD008).w
   33514/   1A01A :                     
   33515/   1A01A :                     loc_1A248:
   33516/   1A01A : 0C68 2900 0008      		cmpi.w	#$2900,8(a0)
   33517/   1A020 : 6510                		bcs.s	loc_1A260
   33518/   1A022 : 4A28 0001           		tst.b	1(a0)
   33519/   1A026 : 6B0A                		bmi.s	loc_1A260
   33520/   1A028 : 11FC 0018 F600      		move.b	#$18,($FFFFF600).w
   33521/   1A02E : 6000 FAF4           		bra.w	Obj85_Delete
   33522/   1A032 :                     ; ===========================================================================
   33523/   1A032 :                     
   33524/   1A032 :                     loc_1A260:
   33525/   1A032 : 6000 FEFA           		bra.w	loc_1A15C
   33526/   1A036 :                     ; ===========================================================================
   33527/   1A036 :                     
   33528/   1A036 :                     loc_1A264:				; XREF: Obj85_Index
   33529/   1A036 : 2268 0034           		movea.l	$34(a0),a1
   33530/   1A03A : 1011                		move.b	(a1),d0
   33531/   1A03C : B010                		cmp.b	(a0),d0
   33532/   1A03E : 6600 FAE4           		bne.w	Obj85_Delete
   33533/   1A042 : 117C 0007 001C      		move.b	#7,$1C(a0)
   33534/   1A048 : 0C29 000C 0034      		cmpi.b	#$C,$34(a1)
   33535/   1A04E : 6C02                		bge.s	loc_1A280
   33536/   1A050 : 6026                		bra.s	loc_1A2A6
   33537/   1A052 :                     ; ===========================================================================
   33538/   1A052 :                     
   33539/   1A052 :                     loc_1A280:
   33540/   1A052 : 4A69 0010           		tst.w	$10(a1)
   33541/   1A056 : 6706                		beq.s	loc_1A28C
   33542/   1A058 : 117C 000B 001C      		move.b	#$B,$1C(a0)
   33543/   1A05E :                     
   33544/   1A05E :                     loc_1A28C:
   33545/   1A05E : 43FA DA36           		lea	Ani_Eggman(pc),a1
   33546/   1A062 : 4EB9 0000 A4FE      		jsr	AnimateSprite
   33547/   1A068 :                     
   33548/   1A068 :                     loc_1A296:
   33549/   1A068 : 2268 0034           		movea.l	$34(a0),a1
   33550/   1A06C : 3169 0008 0008      		move.w	8(a1),8(a0)
   33551/   1A072 : 3169 000C 000C      		move.w	$C(a1),$C(a0)
   33552/   1A078 :                     
   33553/   1A078 :                     loc_1A2A6:
   33554/   1A078 : 2268 0034           		movea.l	$34(a0),a1
   33555/   1A07C : 1169 0022 0022      		move.b	$22(a1),$22(a0)
   33556/   1A082 : 7003                		moveq	#3,d0
   33557/   1A084 : C028 0022           		and.b	$22(a0),d0
   33558/   1A088 : 0228 00FC 0001      		andi.b	#-4,1(a0)
   33559/   1A08E : 8128 0001           		or.b	d0,1(a0)
   33560/   1A092 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   33561/   1A098 :                     ; ===========================================================================
   33562/   1A098 :                     
   33563/   1A098 :                     loc_1A2C6:				; XREF: Obj85_Index
   33564/   1A098 : 2268 0034           		movea.l	$34(a0),a1
   33565/   1A09C : 1011                		move.b	(a1),d0
   33566/   1A09E : B010                		cmp.b	(a0),d0
   33567/   1A0A0 : 6600 FA82           		bne.w	Obj85_Delete
   33568/   1A0A4 : 0CA9 0001 7AE6      		cmpi.l	#Map_Eggman,4(a1)
            1A0AA : 0004             
   33569/   1A0AC : 6708                		beq.s	loc_1A2E4
   33570/   1A0AE : 117C 000A 001A      		move.b	#$A,$1A(a0)
   33571/   1A0B4 : 60C2                		bra.s	loc_1A2A6
   33572/   1A0B6 :                     ; ===========================================================================
   33573/   1A0B6 :                     
   33574/   1A0B6 :                     loc_1A2E4:
   33575/   1A0B6 : 117C 0001 001C      		move.b	#1,$1C(a0)
   33576/   1A0BC : 4A29 0021           		tst.b	$21(a1)
   33577/   1A0C0 : 6F22                		ble.s	loc_1A312
   33578/   1A0C2 : 117C 0006 001C      		move.b	#6,$1C(a0)
   33579/   1A0C8 : 217C 0001 7AE6      		move.l	#Map_Eggman,4(a0)
            1A0CE : 0004             
   33580/   1A0D0 : 317C 0400 0002      		move.w	#$400,2(a0)
   33581/   1A0D6 : 43FA D9BE           		lea	Ani_Eggman(pc),a1
   33582/   1A0DA : 4EB9 0000 A4FE      		jsr	AnimateSprite
   33583/   1A0E0 : 6000 FF86           		bra.w	loc_1A296
   33584/   1A0E4 :                     ; ===========================================================================
   33585/   1A0E4 :                     
   33586/   1A0E4 :                     loc_1A312:
   33587/   1A0E4 : 4A28 0001           		tst.b	1(a0)
   33588/   1A0E8 : 6A00 FA3A           		bpl.w	Obj85_Delete
   33589/   1A0EC : 6100 D556           		bsr.w	BossDefeated
   33590/   1A0F0 : 117C 0002 0018      		move.b	#2,$18(a0)
   33591/   1A0F6 : 117C 0000 001C      		move.b	#0,$1C(a0)
   33592/   1A0FC : 217C 0001 A1AC      		move.l	#Map_Eggman2,4(a0)
            1A102 : 0004             
   33593/   1A104 : 317C 03A0 0002      		move.w	#$3A0,2(a0)
   33594/   1A10A : 43FA 009A           		lea	Ani_obj85(pc),a1
   33595/   1A10E : 4EB9 0000 A4FE      		jsr	AnimateSprite
   33596/   1A114 : 6000 FF52           		bra.w	loc_1A296
   33597/   1A118 :                     ; ===========================================================================
   33598/   1A118 :                     
   33599/   1A118 :                     loc_1A346:				; XREF: Obj85_Index
   33600/   1A118 : 08E8 0000 0022      		bset	#0,$22(a0)
   33601/   1A11E : 2268 0034           		movea.l	$34(a0),a1
   33602/   1A122 : 0CA9 0001 7AE6      		cmpi.l	#Map_Eggman,4(a1)
            1A128 : 0004             
   33603/   1A12A : 6704                		beq.s	loc_1A35E
   33604/   1A12C : 6000 FF4A           		bra.w	loc_1A2A6
   33605/   1A130 :                     ; ===========================================================================
   33606/   1A130 :                     
   33607/   1A130 :                     loc_1A35E:
   33608/   1A130 : 3169 0008 0008      		move.w	8(a1),8(a0)
   33609/   1A136 : 3169 000C 000C      		move.w	$C(a1),$C(a0)
   33610/   1A13C : 4A28 001E           		tst.b	$1E(a0)
   33611/   1A140 : 6606                		bne.s	loc_1A376
   33612/   1A142 : 117C 0014 001E      		move.b	#$14,$1E(a0)
   33613/   1A148 :                     
   33614/   1A148 :                     loc_1A376:
   33615/   1A148 : 5328 001E           		subq.b	#1,$1E(a0)
   33616/   1A14C : 6E0E                		bgt.s	loc_1A38A
   33617/   1A14E : 5228 001A           		addq.b	#1,$1A(a0)
   33618/   1A152 : 0C28 0002 001A      		cmpi.b	#2,$1A(a0)
   33619/   1A158 : 6E00 F9CA           		bgt.w	Obj85_Delete
   33620/   1A15C :                     
   33621/   1A15C :                     loc_1A38A:
   33622/   1A15C : 6000 FF0A           		bra.w	loc_1A296
   33623/   1A160 :                     ; ===========================================================================
   33624/   1A160 :                     
   33625/   1A160 :                     loc_1A38E:				; XREF: Obj85_Index
   33626/   1A160 : 117C 000B 001A      		move.b	#$B,$1A(a0)
   33627/   1A166 : 3038 D008           		move.w	($FFFFD008).w,d0
   33628/   1A16A : 9068 0008           		sub.w	8(a0),d0
   33629/   1A16E : 6508                		bcs.s	loc_1A3A6
   33630/   1A170 : 4A28 0001           		tst.b	1(a0)
   33631/   1A174 : 6A00 F9AE           		bpl.w	Obj85_Delete
   33632/   1A178 :                     
   33633/   1A178 :                     loc_1A3A6:
   33634/   1A178 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   33635/   1A17E :                     ; ===========================================================================
   33636/   1A17E :                     
   33637/   1A17E :                     loc_1A3AC:				; XREF: Obj85_Index
   33638/   1A17E : 117C 0000 001A      		move.b	#0,$1A(a0)
   33639/   1A184 : 08E8 0000 0022      		bset	#0,$22(a0)
   33640/   1A18A : 2268 0034           		movea.l	$34(a0),a1
   33641/   1A18E : 0C29 000C 0034      		cmpi.b	#$C,$34(a1)
   33642/   1A194 : 660C                		bne.s	loc_1A3D0
   33643/   1A196 : 0CA9 0001 7AE6      		cmpi.l	#Map_Eggman,4(a1)
            1A19C : 0004             
   33644/   1A19E : 6700 F984           		beq.w	Obj85_Delete
   33645/   1A1A2 :                     
   33646/   1A1A2 :                     loc_1A3D0:
   33647/   1A1A2 : 6000 FED4           		bra.w	loc_1A2A6
   33648/   1A1A6 :                     ; ===========================================================================
   33649/   1A1A6 :                     Ani_obj85:
   33650/   1A1A6 :                     	include "_animations/obj85.asm"
(1)    1/   1A1A6 :                     ; ---------------------------------------------------------------------------
(1)    2/   1A1A6 :                     ; Animation script - Eggman (FZ)
(1)    3/   1A1A6 :                     ; ---------------------------------------------------------------------------
(1)    4/   1A1A6 : 0002                		dc.w byte_1A3D6-Ani_obj85
(1)    5/   1A1A8 : 0300 01FF           byte_1A3D6:	dc.b 3,	0, 1, $FF
(1)    6/   1A1AC : (MACRO)              		even
   33651/   1A1AC :                     
   33652/   1A1AC :                     Map_Eggman2:
   33653/   1A1AC :                     	include "_mappings/Eggman2.asm"
(1)    1/   1A1AC :                     ; ---------------------------------------------------------------------------
(1)    2/   1A1AC :                     ; Sprite mappings - Eggman (FZ)
(1)    3/   1A1AC :                     ; ---------------------------------------------------------------------------
(1)    4/   1A1AC : 0004                		dc.w byte_1A3DE-Map_Eggman2
(1)    5/   1A1AE : 0023                		dc.w byte_1A3FD-Map_Eggman2
(1)    6/   1A1B0 : 06                  byte_1A3DE:	dc.b 6
(1)    7/   1A1B1 : E408 0020 F4        		dc.b $E4, 8, 0,	$20, $F4
(1)    8/   1A1B6 : EC0D 0023 E4        		dc.b $EC, $D, 0, $23, $E4
(1)    9/   1A1BB : EC09 002B 04        		dc.b $EC, 9, 0,	$2B, 4
(1)   10/   1A1C0 : FC05 203A E4        		dc.b $FC, 5, $20, $3A, $E4
(1)   11/   1A1C5 : FC0E 203E 04        		dc.b $FC, $E, $20, $3E,	4
(1)   12/   1A1CA : 1404 204A 04        		dc.b $14, 4, $20, $4A, 4
(1)   13/   1A1CF : 06                  byte_1A3FD:	dc.b 6
(1)   14/   1A1D0 : E40A 0031 F4        		dc.b $E4, $A, 0, $31, $F4
(1)   15/   1A1D5 : EC05 0023 E4        		dc.b $EC, 5, 0,	$23, $E4
(1)   16/   1A1DA : EC09 002B 04        		dc.b $EC, 9, 0,	$2B, 4
(1)   17/   1A1DF : FC05 203A E4        		dc.b $FC, 5, $20, $3A, $E4
(1)   18/   1A1E4 : FC0E 203E 04        		dc.b $FC, $E, $20, $3E,	4
(1)   19/   1A1E9 : 1404 204A 04        		dc.b $14, 4, $20, $4A, 4
(1)   20/   1A1EE : (MACRO)              		even
   33654/   1A1EE :                     
   33655/   1A1EE :                     Map_FZBoss:
   33656/   1A1EE :                     	include "_mappings/FZ boss.asm"
(1)    1/   1A1EE :                     ; ---------------------------------------------------------------------------
(1)    2/   1A1EE :                     ; Sprite mappings - boss (FZ)
(1)    3/   1A1EE :                     ; ---------------------------------------------------------------------------
(1)    4/   1A1EE : 0006                		dc.w byte_1A422-Map_FZBoss
(1)    5/   1A1F0 : 0011                		dc.w byte_1A42D-Map_FZBoss
(1)    6/   1A1F2 : 0021                		dc.w byte_1A43D-Map_FZBoss
(1)    7/   1A1F4 : 02                  byte_1A422:	dc.b 2
(1)    8/   1A1F5 : 140E 2800 F4        		dc.b $14, $E, $28, 0, $F4
(1)    9/   1A1FA : 2400 280C EC        		dc.b $24, 0, $28, $C, $EC
(1)   10/   1A1FF : 03                  byte_1A42D:	dc.b 3
(1)   11/   1A200 : 0C05 280D 0C        		dc.b $C, 5, $28, $D, $C
(1)   12/   1A205 : 1C00 2811 0C        		dc.b $1C, 0, $28, $11, $C
(1)   13/   1A20A : 140D 2812 EC        		dc.b $14, $D, $28, $12,	$EC
(1)   14/   1A20F : 02                  byte_1A43D:	dc.b 2
(1)   15/   1A210 : 0C01 281A 0C        		dc.b $C, 1, $28, $1A, $C
(1)   16/   1A215 : 140C 281C EC        		dc.b $14, $C, $28, $1C,	$EC
(1)   17/   1A21A : (MACRO)              		even
   33657/   1A21A :                     
   33658/   1A21A :                     ; ===========================================================================
   33659/   1A21A :                     
   33660/   1A21A :                     Obj84_Delete:
   33661/   1A21A : 4EF9 0000 D40E      		jmp	DeleteObject
   33662/   1A220 :                     ; ===========================================================================
   33663/   1A220 :                     ; ---------------------------------------------------------------------------
   33664/   1A220 :                     ; Object 84 - cylinder Eggman	hides in (FZ)
   33665/   1A220 :                     ; ---------------------------------------------------------------------------
   33666/   1A220 :                     
   33667/   1A220 :                     Obj84:					; XREF: Obj_Index
   33668/   1A220 : 7000                		moveq	#0,d0
   33669/   1A222 : 1028 0024           		move.b	$24(a0),d0
   33670/   1A226 : 303B 0006           		move.w	Obj84_Index(pc,d0.w),d0
   33671/   1A22A : 4EFB 0002           		jmp	Obj84_Index(pc,d0.w)
   33672/   1A22E :                     ; ===========================================================================
   33673/   1A22E : 0016                Obj84_Index:	dc.w Obj84_Main-Obj84_Index
   33674/   1A230 : 0072                		dc.w loc_1A4CE-Obj84_Index
   33675/   1A232 : 0122                		dc.w loc_1A57E-Obj84_Index
   33676/   1A234 :                     
   33677/   1A234 : 24D0 0620           Obj84_PosData:	dc.w $24D0, $620
   33678/   1A238 : 2550 0620           		dc.w $2550, $620
   33679/   1A23C : 2490 04C0           		dc.w $2490, $4C0
   33680/   1A240 : 2510 04C0           		dc.w $2510, $4C0
   33681/   1A244 :                     ; ===========================================================================
   33682/   1A244 :                     
   33683/   1A244 :                     Obj84_Main:				; XREF: Obj84_Index
   33684/   1A244 : 43FA FFEE           		lea	Obj84_PosData(pc),a1
   33685/   1A248 : 7000                		moveq	#0,d0
   33686/   1A24A : 1028 0028           		move.b	$28(a0),d0
   33687/   1A24E : D040                		add.w	d0,d0
   33688/   1A250 : D2C0                		adda.w	d0,a1
   33689/   1A252 : 117C 0004 0001      		move.b	#4,1(a0)
   33690/   1A258 : 08E8 0007 0001      		bset	#7,1(a0)
   33691/   1A25E : 08E8 0004 0001      		bset	#4,1(a0)
   33692/   1A264 : 317C 0300 0002      		move.w	#$300,2(a0)
   33693/   1A26A : 217C 0001 A448      		move.l	#Map_obj84,4(a0)
            1A270 : 0004             
   33694/   1A272 : 3159 0008           		move.w	(a1)+,8(a0)
   33695/   1A276 : 3151 000C           		move.w	(a1),$C(a0)
   33696/   1A27A : 3159 0038           		move.w	(a1)+,$38(a0)
   33697/   1A27E : 117C 0020 0016      		move.b	#$20,$16(a0)
   33698/   1A284 : 117C 0060 0017      		move.b	#$60,$17(a0)
   33699/   1A28A : 117C 0020 0019      		move.b	#$20,$19(a0)
   33700/   1A290 : 117C 0060 0016      		move.b	#$60,$16(a0)
   33701/   1A296 : 117C 0003 0018      		move.b	#3,$18(a0)
   33702/   1A29C : 5428 0024           		addq.b	#2,$24(a0)
   33703/   1A2A0 :                     
   33704/   1A2A0 :                     loc_1A4CE:				; XREF: Obj84_Index
   33705/   1A2A0 : 0C28 0002 0028      		cmpi.b	#2,$28(a0)
   33706/   1A2A6 : 6F06                		ble.s	loc_1A4DC
   33707/   1A2A8 : 08E8 0001 0001      		bset	#1,1(a0)
   33708/   1A2AE :                     
   33709/   1A2AE :                     loc_1A4DC:
   33710/   1A2AE : 42A8 003C           		clr.l	$3C(a0)
   33711/   1A2B2 : 4A28 0029           		tst.b	$29(a0)
   33712/   1A2B6 : 6704                		beq.s	loc_1A4EA
   33713/   1A2B8 : 5428 0024           		addq.b	#2,$24(a0)
   33714/   1A2BC :                     
   33715/   1A2BC :                     loc_1A4EA:
   33716/   1A2BC : 2028 003C           		move.l	$3C(a0),d0
   33717/   1A2C0 : 2228 0038           		move.l	$38(a0),d1
   33718/   1A2C4 : D280                		add.l	d0,d1
   33719/   1A2C6 : 4841                		swap	d1
   33720/   1A2C8 : 3141 000C           		move.w	d1,$C(a0)
   33721/   1A2CC : 0C28 0004 0024      		cmpi.b	#4,$24(a0)
   33722/   1A2D2 : 6622                		bne.s	loc_1A524
   33723/   1A2D4 : 4A68 0030           		tst.w	$30(a0)
   33724/   1A2D8 : 6A1C                		bpl.s	loc_1A524
   33725/   1A2DA : 70F6                		moveq	#-$A,d0
   33726/   1A2DC : 0C28 0002 0028      		cmpi.b	#2,$28(a0)
   33727/   1A2E2 : 6F02                		ble.s	loc_1A514
   33728/   1A2E4 : 700E                		moveq	#$E,d0
   33729/   1A2E6 :                     
   33730/   1A2E6 :                     loc_1A514:
   33731/   1A2E6 : D240                		add.w	d0,d1
   33732/   1A2E8 : 2268 0034           		movea.l	$34(a0),a1
   33733/   1A2EC : 3341 000C           		move.w	d1,$C(a1)
   33734/   1A2F0 : 3368 0008 0008      		move.w	8(a0),8(a1)
   33735/   1A2F6 :                     
   33736/   1A2F6 :                     loc_1A524:
   33737/   1A2F6 : 323C 002B           		move.w	#$2B,d1
   33738/   1A2FA : 343C 0060           		move.w	#$60,d2
   33739/   1A2FE : 363C 0061           		move.w	#$61,d3
   33740/   1A302 : 3828 0008           		move.w	8(a0),d4
   33741/   1A306 : 4EB9 0000 F792      		jsr	SolidObject
   33742/   1A30C : 7000                		moveq	#0,d0
   33743/   1A30E : 3228 003C           		move.w	$3C(a0),d1
   33744/   1A312 : 6A0E                		bpl.s	loc_1A550
   33745/   1A314 : 4441                		neg.w	d1
   33746/   1A316 : 5141                		subq.w	#8,d1
   33747/   1A318 : 6514                		bcs.s	loc_1A55C
   33748/   1A31A : 5200                		addq.b	#1,d0
   33749/   1A31C : E841                		asr.w	#4,d1
   33750/   1A31E : D041                		add.w	d1,d0
   33751/   1A320 : 600C                		bra.s	loc_1A55C
   33752/   1A322 :                     ; ===========================================================================
   33753/   1A322 :                     
   33754/   1A322 :                     loc_1A550:
   33755/   1A322 : 0441 0027           		subi.w	#$27,d1
   33756/   1A326 : 6506                		bcs.s	loc_1A55C
   33757/   1A328 : 5200                		addq.b	#1,d0
   33758/   1A32A : E841                		asr.w	#4,d1
   33759/   1A32C : D041                		add.w	d1,d0
   33760/   1A32E :                     
   33761/   1A32E :                     loc_1A55C:
   33762/   1A32E : 1140 001A           		move.b	d0,$1A(a0)
   33763/   1A332 : 3038 D008           		move.w	($FFFFD008).w,d0
   33764/   1A336 : 9068 0008           		sub.w	8(a0),d0
   33765/   1A33A : 6B0E                		bmi.s	loc_1A578
   33766/   1A33C : 0440 0140           		subi.w	#$140,d0
   33767/   1A340 : 6B08                		bmi.s	loc_1A578
   33768/   1A342 : 4A28 0001           		tst.b	1(a0)
   33769/   1A346 : 6A00 FED2           		bpl.w	Obj84_Delete
   33770/   1A34A :                     
   33771/   1A34A :                     loc_1A578:
   33772/   1A34A : 4EF9 0000 D3D2      		jmp	DisplaySprite
   33773/   1A350 :                     ; ===========================================================================
   33774/   1A350 :                     
   33775/   1A350 :                     loc_1A57E:				; XREF: Obj84_Index
   33776/   1A350 : 7000                		moveq	#0,d0
   33777/   1A352 : 1028 0028           		move.b	$28(a0),d0
   33778/   1A356 : 303B 000A           		move.w	off_1A590(pc,d0.w),d0
   33779/   1A35A : 4EBB 0006           		jsr	off_1A590(pc,d0.w)
   33780/   1A35E : 6000 FF5C           		bra.w	loc_1A4EA
   33781/   1A362 :                     ; ===========================================================================
   33782/   1A362 : 0008                off_1A590:	dc.w loc_1A598-off_1A590
   33783/   1A364 : 0008                		dc.w loc_1A598-off_1A590
   33784/   1A366 : 0074                		dc.w loc_1A604-off_1A590
   33785/   1A368 : 0074                		dc.w loc_1A604-off_1A590
   33786/   1A36A :                     ; ===========================================================================
   33787/   1A36A :                     
   33788/   1A36A :                     loc_1A598:				; XREF: off_1A590
   33789/   1A36A : 4A28 0029           		tst.b	$29(a0)
   33790/   1A36E : 6636                		bne.s	loc_1A5D4
   33791/   1A370 : 2268 0034           		movea.l	$34(a0),a1
   33792/   1A374 : 4A29 0021           		tst.b	$21(a1)
   33793/   1A378 : 660C                		bne.s	loc_1A5B4
   33794/   1A37A : 6100 D2C8           		bsr.w	BossDefeated
   33795/   1A37E : 04A8 0001 0000      		subi.l	#$10000,$3C(a0)
            1A384 : 003C             
   33796/   1A386 :                     
   33797/   1A386 :                     loc_1A5B4:
   33798/   1A386 : 06A8 0002 0000      		addi.l	#$20000,$3C(a0)
            1A38C : 003C             
   33799/   1A38E : 6444                		bcc.s	locret_1A602
   33800/   1A390 : 42A8 003C           		clr.l	$3C(a0)
   33801/   1A394 : 2268 0034           		movea.l	$34(a0),a1
   33802/   1A398 : 5369 0032           		subq.w	#1,$32(a1)
   33803/   1A39C : 4269 0030           		clr.w	$30(a1)
   33804/   1A3A0 : 5528 0024           		subq.b	#2,$24(a0)
   33805/   1A3A4 : 4E75                		rts	
   33806/   1A3A6 :                     ; ===========================================================================
   33807/   1A3A6 :                     
   33808/   1A3A6 :                     loc_1A5D4:
   33809/   1A3A6 : 0C68 FFF0 003C      		cmpi.w	#-$10,$3C(a0)
   33810/   1A3AC : 6C08                		bge.s	loc_1A5E4
   33811/   1A3AE : 04A8 0002 8000      		subi.l	#$28000,$3C(a0)
            1A3B4 : 003C             
   33812/   1A3B6 :                     
   33813/   1A3B6 :                     loc_1A5E4:
   33814/   1A3B6 : 04A8 0000 8000      		subi.l	#$8000,$3C(a0)
            1A3BC : 003C             
   33815/   1A3BE : 0C68 FF60 003C      		cmpi.w	#-$A0,$3C(a0)
   33816/   1A3C4 : 6E0E                		bgt.s	locret_1A602
   33817/   1A3C6 : 4268 003E           		clr.w	$3E(a0)
   33818/   1A3CA : 317C FF60 003C      		move.w	#-$A0,$3C(a0)
   33819/   1A3D0 : 4228 0029           		clr.b	$29(a0)
   33820/   1A3D4 :                     
   33821/   1A3D4 :                     locret_1A602:
   33822/   1A3D4 : 4E75                		rts	
   33823/   1A3D6 :                     ; ===========================================================================
   33824/   1A3D6 :                     
   33825/   1A3D6 :                     loc_1A604:				; XREF: off_1A590
   33826/   1A3D6 : 08E8 0001 0001      		bset	#1,1(a0)
   33827/   1A3DC : 4A28 0029           		tst.b	$29(a0)
   33828/   1A3E0 : 6636                		bne.s	loc_1A646
   33829/   1A3E2 : 2268 0034           		movea.l	$34(a0),a1
   33830/   1A3E6 : 4A29 0021           		tst.b	$21(a1)
   33831/   1A3EA : 660C                		bne.s	loc_1A626
   33832/   1A3EC : 6100 D256           		bsr.w	BossDefeated
   33833/   1A3F0 : 06A8 0001 0000      		addi.l	#$10000,$3C(a0)
            1A3F6 : 003C             
   33834/   1A3F8 :                     
   33835/   1A3F8 :                     loc_1A626:
   33836/   1A3F8 : 04A8 0002 0000      		subi.l	#$20000,$3C(a0)
            1A3FE : 003C             
   33837/   1A400 : 6444                		bcc.s	locret_1A674
   33838/   1A402 : 42A8 003C           		clr.l	$3C(a0)
   33839/   1A406 : 2268 0034           		movea.l	$34(a0),a1
   33840/   1A40A : 5369 0032           		subq.w	#1,$32(a1)
   33841/   1A40E : 4269 0030           		clr.w	$30(a1)
   33842/   1A412 : 5528 0024           		subq.b	#2,$24(a0)
   33843/   1A416 : 4E75                		rts	
   33844/   1A418 :                     ; ===========================================================================
   33845/   1A418 :                     
   33846/   1A418 :                     loc_1A646:
   33847/   1A418 : 0C68 0010 003C      		cmpi.w	#$10,$3C(a0)
   33848/   1A41E : 6D08                		blt.s	loc_1A656
   33849/   1A420 : 06A8 0002 8000      		addi.l	#$28000,$3C(a0)
            1A426 : 003C             
   33850/   1A428 :                     
   33851/   1A428 :                     loc_1A656:
   33852/   1A428 : 06A8 0000 8000      		addi.l	#$8000,$3C(a0)
            1A42E : 003C             
   33853/   1A430 : 0C68 00A0 003C      		cmpi.w	#$A0,$3C(a0)
   33854/   1A436 : 6D0E                		blt.s	locret_1A674
   33855/   1A438 : 4268 003E           		clr.w	$3E(a0)
   33856/   1A43C : 317C 00A0 003C      		move.w	#$A0,$3C(a0)
   33857/   1A442 : 4228 0029           		clr.b	$29(a0)
   33858/   1A446 :                     
   33859/   1A446 :                     locret_1A674:
   33860/   1A446 : 4E75                		rts	
   33861/   1A448 :                     ; ===========================================================================
   33862/   1A448 :                     ; ---------------------------------------------------------------------------
   33863/   1A448 :                     ; Sprite mappings - cylinders Eggman hides in (FZ)
   33864/   1A448 :                     ; ---------------------------------------------------------------------------
   33865/   1A448 :                     Map_obj84:
   33866/   1A448 :                     	include "_mappings/obj84.asm"
(1)    1/   1A448 :                     ; ---------------------------------------------------------------------------
(1)    2/   1A448 :                     ; Sprite mappings - cylinders Eggman hides in (FZ)
(1)    3/   1A448 :                     ; ---------------------------------------------------------------------------
(1)    4/   1A448 : 0018 0037           		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
(1)    5/   1A44C : 0060 0093           		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
(1)    6/   1A450 : 00D0 0112           		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
(1)    7/   1A454 : 0112 0112           		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
(1)    8/   1A458 : 0112 0112           		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
(1)    9/   1A45C : 0112 0159           		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
(1)   10/   1A460 : 06                  byte_1A68E:	dc.b 6
(1)   11/   1A461 : A00D 4000 E0        		dc.b $A0, $D, $40, 0, $E0
(1)   12/   1A466 : A00D 4800 00        		dc.b $A0, $D, $48, 0, 0
(1)   13/   1A46B : B00C 2008 E0        		dc.b $B0, $C, $20, 8, $E0
(1)   14/   1A470 : B00C 200C 00        		dc.b $B0, $C, $20, $C, 0
(1)   15/   1A475 : B80F 4010 E0        		dc.b $B8, $F, $40, $10,	$E0
(1)   16/   1A47A : B80F 4810 00        		dc.b $B8, $F, $48, $10,	0
(1)   17/   1A47F : 08                  byte_1A6AD:	dc.b 8
(1)   18/   1A480 : A00D 4000 E0        		dc.b $A0, $D, $40, 0, $E0
(1)   19/   1A485 : A00D 4800 00        		dc.b $A0, $D, $48, 0, 0
(1)   20/   1A48A : B00C 2008 E0        		dc.b $B0, $C, $20, 8, $E0
(1)   21/   1A48F : B00C 200C 00        		dc.b $B0, $C, $20, $C, 0
(1)   22/   1A494 : B80F 4010 E0        		dc.b $B8, $F, $40, $10,	$E0
(1)   23/   1A499 : B80F 4810 00        		dc.b $B8, $F, $48, $10,	0
(1)   24/   1A49E : D80F 4020 E0        		dc.b $D8, $F, $40, $20,	$E0
(1)   25/   1A4A3 : D80F 4820 00        		dc.b $D8, $F, $48, $20,	0
(1)   26/   1A4A8 : 0A                  byte_1A6D6:	dc.b $A
(1)   27/   1A4A9 : A00D 4000 E0        		dc.b $A0, $D, $40, 0, $E0
(1)   28/   1A4AE : A00D 4800 00        		dc.b $A0, $D, $48, 0, 0
(1)   29/   1A4B3 : B00C 2008 E0        		dc.b $B0, $C, $20, 8, $E0
(1)   30/   1A4B8 : B00C 200C 00        		dc.b $B0, $C, $20, $C, 0
(1)   31/   1A4BD : B80F 4010 E0        		dc.b $B8, $F, $40, $10,	$E0
(1)   32/   1A4C2 : B80F 4810 00        		dc.b $B8, $F, $48, $10,	0
(1)   33/   1A4C7 : D80F 4020 E0        		dc.b $D8, $F, $40, $20,	$E0
(1)   34/   1A4CC : D80F 4820 00        		dc.b $D8, $F, $48, $20,	0
(1)   35/   1A4D1 : F80F 4030 E0        		dc.b $F8, $F, $40, $30,	$E0
(1)   36/   1A4D6 : F80F 4830 00        		dc.b $F8, $F, $48, $30,	0
(1)   37/   1A4DB : 0C                  byte_1A709:	dc.b $C
(1)   38/   1A4DC : A00D 4000 E0        		dc.b $A0, $D, $40, 0, $E0
(1)   39/   1A4E1 : A00D 4800 00        		dc.b $A0, $D, $48, 0, 0
(1)   40/   1A4E6 : B00C 2008 E0        		dc.b $B0, $C, $20, 8, $E0
(1)   41/   1A4EB : B00C 200C 00        		dc.b $B0, $C, $20, $C, 0
(1)   42/   1A4F0 : B80F 4010 E0        		dc.b $B8, $F, $40, $10,	$E0
(1)   43/   1A4F5 : B80F 4810 00        		dc.b $B8, $F, $48, $10,	0
(1)   44/   1A4FA : D80F 4020 E0        		dc.b $D8, $F, $40, $20,	$E0
(1)   45/   1A4FF : D80F 4820 00        		dc.b $D8, $F, $48, $20,	0
(1)   46/   1A504 : F80F 4030 E0        		dc.b $F8, $F, $40, $30,	$E0
(1)   47/   1A509 : F80F 4830 00        		dc.b $F8, $F, $48, $30,	0
(1)   48/   1A50E : 180F 4040 E0        		dc.b $18, $F, $40, $40,	$E0
(1)   49/   1A513 : 180F 4840 00        		dc.b $18, $F, $48, $40,	0
(1)   50/   1A518 : 0D                  byte_1A746:	dc.b $D
(1)   51/   1A519 : A00D 4000 E0        		dc.b $A0, $D, $40, 0, $E0
(1)   52/   1A51E : A00D 4800 00        		dc.b $A0, $D, $48, 0, 0
(1)   53/   1A523 : B00C 2008 E0        		dc.b $B0, $C, $20, 8, $E0
(1)   54/   1A528 : B00C 200C 00        		dc.b $B0, $C, $20, $C, 0
(1)   55/   1A52D : B80F 4010 E0        		dc.b $B8, $F, $40, $10,	$E0
(1)   56/   1A532 : B80F 4810 00        		dc.b $B8, $F, $48, $10,	0
(1)   57/   1A537 : D80F 4020 E0        		dc.b $D8, $F, $40, $20,	$E0
(1)   58/   1A53C : D80F 4820 00        		dc.b $D8, $F, $48, $20,	0
(1)   59/   1A541 : F80F 4030 E0        		dc.b $F8, $F, $40, $30,	$E0
(1)   60/   1A546 : F80F 4830 00        		dc.b $F8, $F, $48, $30,	0
(1)   61/   1A54B : 180F 4040 E0        		dc.b $18, $F, $40, $40,	$E0
(1)   62/   1A550 : 180F 4840 00        		dc.b $18, $F, $48, $40,	0
(1)   63/   1A555 : 380F 4050 F0        		dc.b $38, $F, $40, $50,	$F0
(1)   64/   1A55A : 0E                  byte_1A788:	dc.b $E
(1)   65/   1A55B : A00D 4000 E0        		dc.b $A0, $D, $40, 0, $E0
(1)   66/   1A560 : A00D 4800 00        		dc.b $A0, $D, $48, 0, 0
(1)   67/   1A565 : B00C 2008 E0        		dc.b $B0, $C, $20, 8, $E0
(1)   68/   1A56A : B00C 200C 00        		dc.b $B0, $C, $20, $C, 0
(1)   69/   1A56F : B80F 4010 E0        		dc.b $B8, $F, $40, $10,	$E0
(1)   70/   1A574 : B80F 4810 00        		dc.b $B8, $F, $48, $10,	0
(1)   71/   1A579 : D80F 4020 E0        		dc.b $D8, $F, $40, $20,	$E0
(1)   72/   1A57E : D80F 4820 00        		dc.b $D8, $F, $48, $20,	0
(1)   73/   1A583 : F80F 4030 E0        		dc.b $F8, $F, $40, $30,	$E0
(1)   74/   1A588 : F80F 4830 00        		dc.b $F8, $F, $48, $30,	0
(1)   75/   1A58D : 180F 4040 E0        		dc.b $18, $F, $40, $40,	$E0
(1)   76/   1A592 : 180F 4840 00        		dc.b $18, $F, $48, $40,	0
(1)   77/   1A597 : 380F 4050 F0        		dc.b $38, $F, $40, $50,	$F0
(1)   78/   1A59C : 580F 4050 F0        		dc.b $58, $F, $40, $50,	$F0
(1)   79/   1A5A1 : 02                  byte_1A7CF:	dc.b 2
(1)   80/   1A5A2 : F804 0068 F0        		dc.b $F8, 4, 0,	$68, $F0
(1)   81/   1A5A7 : 000C 006A F0        		dc.b 0,	$C, 0, $6A, $F0
(1)   82/   1A5AC : (MACRO)              		even
   33867/   1A5AC :                     
   33868/   1A5AC :                     ; ===========================================================================
   33869/   1A5AC :                     ; ---------------------------------------------------------------------------
   33870/   1A5AC :                     ; Object 86 - energy balls (FZ)
   33871/   1A5AC :                     ; ---------------------------------------------------------------------------
   33872/   1A5AC :                     
   33873/   1A5AC :                     Obj86:					; XREF: Obj_Index
   33874/   1A5AC : 7000                		moveq	#0,d0
   33875/   1A5AE : 1028 0024           		move.b	$24(a0),d0
   33876/   1A5B2 : 303B 0006           		move.w	Obj86_Index(pc,d0.w),d0
   33877/   1A5B6 : 4EFB 0002           		jmp	Obj86_Index(pc,d0.w)
   33878/   1A5BA :                     ; ===========================================================================
   33879/   1A5BA : 000A                Obj86_Index:	dc.w Obj86_Main-Obj86_Index
   33880/   1A5BC : 004C                		dc.w Obj86_Generator-Obj86_Index
   33881/   1A5BE : 00C2                		dc.w Obj86_MakeBalls-Obj86_Index
   33882/   1A5C0 : 017A                		dc.w loc_1A962-Obj86_Index
   33883/   1A5C2 : 019A                		dc.w loc_1A982-Obj86_Index
   33884/   1A5C4 :                     ; ===========================================================================
   33885/   1A5C4 :                     
   33886/   1A5C4 :                     Obj86_Main:				; XREF: Obj86_Index
   33887/   1A5C4 : 317C 2588 0008      		move.w	#$2588,8(a0)
   33888/   1A5CA : 317C 053C 000C      		move.w	#$53C,$C(a0)
   33889/   1A5D0 : 317C 0300 0002      		move.w	#$300,2(a0)
   33890/   1A5D6 : 217C 0001 A828      		move.l	#Map_obj86,4(a0)
            1A5DC : 0004             
   33891/   1A5DE : 117C 0000 001C      		move.b	#0,$1C(a0)
   33892/   1A5E4 : 117C 0003 0018      		move.b	#3,$18(a0)
   33893/   1A5EA : 117C 0008 0017      		move.b	#8,$17(a0)
   33894/   1A5F0 : 117C 0008 0016      		move.b	#8,$16(a0)
   33895/   1A5F6 : 117C 0004 0001      		move.b	#4,1(a0)
   33896/   1A5FC : 08E8 0007 0001      		bset	#7,1(a0)
   33897/   1A602 : 5428 0024           		addq.b	#2,$24(a0)
   33898/   1A606 :                     
   33899/   1A606 :                     Obj86_Generator:			; XREF: Obj86_Index
   33900/   1A606 : 2268 0034           		movea.l	$34(a0),a1
   33901/   1A60A : 0C29 0006 0034      		cmpi.b	#6,$34(a1)
   33902/   1A610 : 6610                		bne.s	loc_1A850
   33903/   1A612 : 10BC 003F           		move.b	#$3F,(a0)
   33904/   1A616 : 117C 0000 0024      		move.b	#0,$24(a0)
   33905/   1A61C : 4EF9 0000 D3D2      		jmp	DisplaySprite
   33906/   1A622 :                     ; ===========================================================================
   33907/   1A622 :                     
   33908/   1A622 :                     loc_1A850:
   33909/   1A622 : 117C 0000 001C      		move.b	#0,$1C(a0)
   33910/   1A628 : 4A28 0029           		tst.b	$29(a0)
   33911/   1A62C : 6710                		beq.s	loc_1A86C
   33912/   1A62E : 5428 0024           		addq.b	#2,$24(a0)
   33913/   1A632 : 117C 0001 001C      		move.b	#1,$1C(a0)
   33914/   1A638 : 117C 003E 0028      		move.b	#$3E,$28(a0)
   33915/   1A63E :                     
   33916/   1A63E :                     loc_1A86C:
   33917/   1A63E : 323C 0013           		move.w	#$13,d1
   33918/   1A642 : 343C 0008           		move.w	#8,d2
   33919/   1A646 : 363C 0011           		move.w	#$11,d3
   33920/   1A64A : 3828 0008           		move.w	8(a0),d4
   33921/   1A64E : 4EB9 0000 F792      		jsr	SolidObject
   33922/   1A654 : 3038 D008           		move.w	($FFFFD008).w,d0
   33923/   1A658 : 9068 0008           		sub.w	8(a0),d0
   33924/   1A65C : 6B0E                		bmi.s	loc_1A89A
   33925/   1A65E : 0440 0140           		subi.w	#$140,d0
   33926/   1A662 : 6B08                		bmi.s	loc_1A89A
   33927/   1A664 : 4A28 0001           		tst.b	1(a0)
   33928/   1A668 : 6A00 FBB0           		bpl.w	Obj84_Delete
   33929/   1A66C :                     
   33930/   1A66C :                     loc_1A89A:
   33931/   1A66C : 43FA 01A4           		lea	Ani_obj86(pc),a1
   33932/   1A670 : 4EB9 0000 A4FE      		jsr	AnimateSprite
   33933/   1A676 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   33934/   1A67C :                     ; ===========================================================================
   33935/   1A67C :                     
   33936/   1A67C :                     Obj86_MakeBalls:			; XREF: Obj86_Index
   33937/   1A67C : 4A28 0029           		tst.b	$29(a0)
   33938/   1A680 : 6700 00A4           		beq.w	loc_1A954
   33939/   1A684 : 4228 0029           		clr.b	$29(a0)
   33940/   1A688 : D068 0030           		add.w	$30(a0),d0
   33941/   1A68C : 0240 001E           		andi.w	#$1E,d0
   33942/   1A690 : D4C0                		adda.w	d0,a2
   33943/   1A692 : 5868 0030           		addq.w	#4,$30(a0)
   33944/   1A696 : 4268 0032           		clr.w	$32(a0)
   33945/   1A69A : 7403                		moveq	#3,d2
   33946/   1A69C :                     
   33947/   1A69C :                     Obj86_Loop:
   33948/   1A69C : 4EB9 0000 D86E      		jsr	SingleObjLoad2
   33949/   1A6A2 : 6600 0082           		bne.w	loc_1A954
   33950/   1A6A6 : 12BC 0086           		move.b	#$86,(a1)
   33951/   1A6AA : 3368 0008 0008      		move.w	8(a0),8(a1)
   33952/   1A6B0 : 337C 053C 000C      		move.w	#$53C,$C(a1)
   33953/   1A6B6 : 137C 0008 0024      		move.b	#8,$24(a1)
   33954/   1A6BC : 337C 2300 0002      		move.w	#$2300,2(a1)
   33955/   1A6C2 : 237C 0001 A878      		move.l	#Map_obj86a,4(a1)
            1A6C8 : 0004             
   33956/   1A6CA : 137C 000C 0016      		move.b	#$C,$16(a1)
   33957/   1A6D0 : 137C 000C 0017      		move.b	#$C,$17(a1)
   33958/   1A6D6 : 137C 0000 0020      		move.b	#0,$20(a1)
   33959/   1A6DC : 137C 0003 0018      		move.b	#3,$18(a1)
   33960/   1A6E2 : 337C 003E 0028      		move.w	#$3E,$28(a1)
   33961/   1A6E8 : 137C 0004 0001      		move.b	#4,1(a1)
   33962/   1A6EE : 08E9 0007 0001      		bset	#7,1(a1)
   33963/   1A6F4 : 2348 0034           		move.l	a0,$34(a1)
   33964/   1A6F8 : 4EB9 0000 279A      		jsr	(RandomNumber).l
   33965/   1A6FE : 3228 0032           		move.w	$32(a0),d1
   33966/   1A702 : C3FC FFB1           		muls.w	#-$4F,d1
   33967/   1A706 : 0641 2578           		addi.w	#$2578,d1
   33968/   1A70A : 0240 001F           		andi.w	#$1F,d0
   33969/   1A70E : 0440 0010           		subi.w	#$10,d0
   33970/   1A712 : D041                		add.w	d1,d0
   33971/   1A714 : 3340 0030           		move.w	d0,$30(a1)
   33972/   1A718 : 5268 0032           		addq.w	#1,$32(a0)
   33973/   1A71C : 3168 0032 0038      		move.w	$32(a0),$38(a0)
   33974/   1A722 : 51CA FF78           		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
   33975/   1A726 :                     
   33976/   1A726 :                     loc_1A954:
   33977/   1A726 : 4A68 0032           		tst.w	$32(a0)
   33978/   1A72A : 6604                		bne.s	loc_1A95E
   33979/   1A72C : 5428 0024           		addq.b	#2,$24(a0)
   33980/   1A730 :                     
   33981/   1A730 :                     loc_1A95E:
   33982/   1A730 : 6000 FF0C           		bra.w	loc_1A86C
   33983/   1A734 :                     ; ===========================================================================
   33984/   1A734 :                     
   33985/   1A734 :                     loc_1A962:				; XREF: Obj86_Index
   33986/   1A734 : 117C 0002 001C      		move.b	#2,$1C(a0)
   33987/   1A73A : 4A68 0038           		tst.w	$38(a0)
   33988/   1A73E : 6610                		bne.s	loc_1A97E
   33989/   1A740 : 117C 0002 0024      		move.b	#2,$24(a0)
   33990/   1A746 : 2268 0034           		movea.l	$34(a0),a1
   33991/   1A74A : 337C FFFF 0032      		move.w	#-1,$32(a1)
   33992/   1A750 :                     
   33993/   1A750 :                     loc_1A97E:
   33994/   1A750 : 6000 FEEC           		bra.w	loc_1A86C
   33995/   1A754 :                     ; ===========================================================================
   33996/   1A754 :                     
   33997/   1A754 :                     loc_1A982:				; XREF: Obj86_Index
   33998/   1A754 : 7000                		moveq	#0,d0
   33999/   1A756 : 1028 0025           		move.b	$25(a0),d0
   34000/   1A75A : 303B 0016           		move.w	Obj86_Index2(pc,d0.w),d0
   34001/   1A75E : 4EBB 0012           		jsr	Obj86_Index2(pc,d0.w)
   34002/   1A762 : 43FA 00E4           		lea	Ani_obj86a(pc),a1
   34003/   1A766 : 4EB9 0000 A4FE      		jsr	AnimateSprite
   34004/   1A76C : 4EF9 0000 D3D2      		jmp	DisplaySprite
   34005/   1A772 :                     ; ===========================================================================
   34006/   1A772 : 0006                Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
   34007/   1A774 : 0020                		dc.w loc_1A9C0-Obj86_Index2
   34008/   1A776 : 007E                		dc.w loc_1AA1E-Obj86_Index2
   34009/   1A778 :                     ; ===========================================================================
   34010/   1A778 :                     
   34011/   1A778 :                     loc_1A9A6:				; XREF: Obj86_Index2
   34012/   1A778 : 3028 0030           		move.w	$30(a0),d0
   34013/   1A77C : 9068 0008           		sub.w	8(a0),d0
   34014/   1A780 : E940                		asl.w	#4,d0
   34015/   1A782 : 3140 0010           		move.w	d0,$10(a0)
   34016/   1A786 : 317C 00B4 0028      		move.w	#$B4,$28(a0)
   34017/   1A78C : 5428 0025           		addq.b	#2,$25(a0)
   34018/   1A790 : 4E75                		rts	
   34019/   1A792 :                     ; ===========================================================================
   34020/   1A792 :                     
   34021/   1A792 :                     loc_1A9C0:				; XREF: Obj86_Index2
   34022/   1A792 : 4A68 0010           		tst.w	$10(a0)
   34023/   1A796 : 6720                		beq.s	loc_1A9E6
   34024/   1A798 : 4EB9 0000 D3AC      		jsr	SpeedToPos
   34025/   1A79E : 3028 0008           		move.w	8(a0),d0
   34026/   1A7A2 : 9068 0030           		sub.w	$30(a0),d0
   34027/   1A7A6 : 6410                		bcc.s	loc_1A9E6
   34028/   1A7A8 : 4268 0010           		clr.w	$10(a0)
   34029/   1A7AC : D168 0008           		add.w	d0,8(a0)
   34030/   1A7B0 : 2268 0034           		movea.l	$34(a0),a1
   34031/   1A7B4 : 5369 0032           		subq.w	#1,$32(a1)
   34032/   1A7B8 :                     
   34033/   1A7B8 :                     loc_1A9E6:
   34034/   1A7B8 : 117C 0000 001C      		move.b	#0,$1C(a0)
   34035/   1A7BE : 5368 0028           		subq.w	#1,$28(a0)
   34036/   1A7C2 : 662A                		bne.s	locret_1AA1C
   34037/   1A7C4 : 5428 0025           		addq.b	#2,$25(a0)
   34038/   1A7C8 : 117C 0001 001C      		move.b	#1,$1C(a0)
   34039/   1A7CE : 117C 009A 0020      		move.b	#$9A,$20(a0)
   34040/   1A7D4 : 317C 00B4 0028      		move.w	#$B4,$28(a0)
   34041/   1A7DA : 7000                		moveq	#0,d0
   34042/   1A7DC : 3038 D008           		move.w	($FFFFD008).w,d0
   34043/   1A7E0 : 9068 0008           		sub.w	8(a0),d0
   34044/   1A7E4 : 3140 0010           		move.w	d0,$10(a0)
   34045/   1A7E8 : 317C 0140 0012      		move.w	#$140,$12(a0)
   34046/   1A7EE :                     
   34047/   1A7EE :                     locret_1AA1C:
   34048/   1A7EE : 4E75                		rts	
   34049/   1A7F0 :                     ; ===========================================================================
   34050/   1A7F0 :                     
   34051/   1A7F0 :                     loc_1AA1E:				; XREF: Obj86_Index2
   34052/   1A7F0 : 4EB9 0000 D3AC      		jsr	SpeedToPos
   34053/   1A7F6 : 0C68 05E0 000C      		cmpi.w	#$5E0,$C(a0)
   34054/   1A7FC : 6408                		bcc.s	loc_1AA34
   34055/   1A7FE : 5368 0028           		subq.w	#1,$28(a0)
   34056/   1A802 : 6702                		beq.s	loc_1AA34
   34057/   1A804 : 4E75                		rts	
   34058/   1A806 :                     ; ===========================================================================
   34059/   1A806 :                     
   34060/   1A806 :                     loc_1AA34:
   34061/   1A806 : 2268 0034           		movea.l	$34(a0),a1
   34062/   1A80A : 5369 0038           		subq.w	#1,$38(a1)
   34063/   1A80E : 6000 FA0A           		bra.w	Obj84_Delete
   34064/   1A812 :                     ; ===========================================================================
   34065/   1A812 :                     Ani_obj86:
   34066/   1A812 :                     	include "_animations/obj86.asm"
(1)    1/   1A812 :                     ; ---------------------------------------------------------------------------
(1)    2/   1A812 :                     ; Animation script - energy ball launcher (FZ)
(1)    3/   1A812 :                     ; ---------------------------------------------------------------------------
(1)    4/   1A812 : 0006                		dc.w byte_1AA46-Ani_obj86
(1)    5/   1A814 : 000A                		dc.w byte_1AA4A-Ani_obj86
(1)    6/   1A816 : 0010                		dc.w byte_1AA50-Ani_obj86
(1)    7/   1A818 : 7E00 FF00           byte_1AA46:	dc.b $7E, 0, $FF, 0
(1)    8/   1A81C : 0100 0200 03FF      byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
(1)    9/   1A822 : 0101 0201 03FF      byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
(1)   10/   1A828 : (MACRO)              		even
   34067/   1A828 :                     
   34068/   1A828 :                     ; ---------------------------------------------------------------------------
   34069/   1A828 :                     ; Sprite mappings - energy ball	launcher (FZ)
   34070/   1A828 :                     ; ---------------------------------------------------------------------------
   34071/   1A828 :                     Map_obj86:
   34072/   1A828 :                     	include "_mappings/obj86.asm"
(1)    1/   1A828 :                     ; ---------------------------------------------------------------------------
(1)    2/   1A828 :                     ; Sprite mappings - energy ball	launcher (FZ)
(1)    3/   1A828 :                     ; ---------------------------------------------------------------------------
(1)    4/   1A828 : 0008 000E           		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
(1)    5/   1A82C : 0014 001A           		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
(1)    6/   1A830 : 01                  byte_1AA5E:	dc.b 1
(1)    7/   1A831 : F805 006E F8        		dc.b $F8, 5, 0,	$6E, $F8
(1)    8/   1A836 : 01                  byte_1AA64:	dc.b 1
(1)    9/   1A837 : F805 0076 F8        		dc.b $F8, 5, 0,	$76, $F8
(1)   10/   1A83C : 01                  byte_1AA6A:	dc.b 1
(1)   11/   1A83D : F805 0072 F8        		dc.b $F8, 5, 0,	$72, $F8
(1)   12/   1A842 : 01                  byte_1AA70:	dc.b 1
(1)   13/   1A843 : F805 1072 F8        		dc.b $F8, 5, $10, $72, $F8
(1)   14/   1A848 : (MACRO)              		even
   34073/   1A848 :                     
   34074/   1A848 :                     Ani_obj86a:
   34075/   1A848 :                     	include "_animations/obj86a.asm"
(1)    1/   1A848 :                     ; ---------------------------------------------------------------------------
(1)    2/   1A848 :                     ; Animation script - energy balls (FZ)
(1)    3/   1A848 :                     ; ---------------------------------------------------------------------------
(1)    4/   1A848 : 0004                		dc.w byte_1AA7A-Ani_obj86a
(1)    5/   1A84A : 0026                		dc.w byte_1AA9C-Ani_obj86a
(1)    6/   1A84C : 0100 0A08 0A01      byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
            1A852 : 0A09 0A06 0A07 
            1A858 : 0A00 0A          
(1)    7/   1A85B : 080A 010A 090A      		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
            1A861 : 060A 070A 020A 
            1A867 : 030A 04          
(1)    8/   1A86A : 0A05 FF00           		dc.b $A, 5, $FF, 0
(1)    9/   1A86E : 0006 0501 0507      byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
            1A874 : 0501 05FF          
(1)   10/   1A878 : (MACRO)              		even
   34076/   1A878 :                     
   34077/   1A878 :                     ; ---------------------------------------------------------------------------
   34078/   1A878 :                     ; Sprite mappings - energy balls (FZ)
   34079/   1A878 :                     ; ---------------------------------------------------------------------------
   34080/   1A878 :                     Map_obj86a:
   34081/   1A878 :                     	include "_mappings/obj86a.asm"
(1)    1/   1A878 :                     ; ---------------------------------------------------------------------------
(1)    2/   1A878 :                     ; Sprite mappings - energy balls (FZ)
(1)    3/   1A878 :                     ; ---------------------------------------------------------------------------
(1)    4/   1A878 : 0016 0021           		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
(1)    5/   1A87C : 002C 0037           		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
(1)    6/   1A880 : 0042 004D           		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
(1)    7/   1A884 : 0058 005E           		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
(1)    8/   1A888 : 0064 006F           		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
(1)    9/   1A88C : 007A                		dc.w byte_1AB20-Map_obj86a
(1)   10/   1A88E : 02                  byte_1AABC:	dc.b 2
(1)   11/   1A88F : F00D 007A F0        		dc.b $F0, $D, 0, $7A, $F0
(1)   12/   1A894 : 000D 187A F0        		dc.b 0,	$D, $18, $7A, $F0
(1)   13/   1A899 : 02                  byte_1AAC7:	dc.b 2
(1)   14/   1A89A : F406 0082 F4        		dc.b $F4, 6, 0,	$82, $F4
(1)   15/   1A89F : F402 1882 04        		dc.b $F4, 2, $18, $82, 4
(1)   16/   1A8A4 : 02                  byte_1AAD2:	dc.b 2
(1)   17/   1A8A5 : F804 0088 F8        		dc.b $F8, 4, 0,	$88, $F8
(1)   18/   1A8AA : 0004 1088 F8        		dc.b 0,	4, $10,	$88, $F8
(1)   19/   1A8AF : 02                  byte_1AADD:	dc.b 2
(1)   20/   1A8B0 : F804 008A F8        		dc.b $F8, 4, 0,	$8A, $F8
(1)   21/   1A8B5 : 0004 108A F8        		dc.b 0,	4, $10,	$8A, $F8
(1)   22/   1A8BA : 02                  byte_1AAE8:	dc.b 2
(1)   23/   1A8BB : F804 008C F8        		dc.b $F8, 4, 0,	$8C, $F8
(1)   24/   1A8C0 : 0004 108C F8        		dc.b 0,	4, $10,	$8C, $F8
(1)   25/   1A8C5 : 02                  byte_1AAF3:	dc.b 2
(1)   26/   1A8C6 : F406 008E F4        		dc.b $F4, 6, 0,	$8E, $F4
(1)   27/   1A8CB : F402 188E 04        		dc.b $F4, 2, $18, $8E, 4
(1)   28/   1A8D0 : 01                  byte_1AAFE:	dc.b 1
(1)   29/   1A8D1 : F805 0094 F8        		dc.b $F8, 5, 0,	$94, $F8
(1)   30/   1A8D6 : 01                  byte_1AB04:	dc.b 1
(1)   31/   1A8D7 : F805 0098 F8        		dc.b $F8, 5, 0,	$98, $F8
(1)   32/   1A8DC : 02                  byte_1AB0A:	dc.b 2
(1)   33/   1A8DD : F00D 087A F0        		dc.b $F0, $D, 8, $7A, $F0
(1)   34/   1A8E2 : 000D 107A F0        		dc.b 0,	$D, $10, $7A, $F0
(1)   35/   1A8E7 : 02                  byte_1AB15:	dc.b 2
(1)   36/   1A8E8 : F406 1082 F4        		dc.b $F4, 6, $10, $82, $F4
(1)   37/   1A8ED : F402 0882 04        		dc.b $F4, 2, 8,	$82, 4
(1)   38/   1A8F2 : 00                  byte_1AB20:	dc.b 0
(1)   39/   1A8F3 : (MACRO)              		even
(1)   39/   1A8F3 : 00                                          dc.b 0 ;ds.b 1 
   34082/   1A8F4 :                     
   34083/   1A8F4 :                     ; ===========================================================================
   34084/   1A8F4 :                     ; ---------------------------------------------------------------------------
   34085/   1A8F4 :                     ; Object 3E - prison capsule
   34086/   1A8F4 :                     ; ---------------------------------------------------------------------------
   34087/   1A8F4 :                     
   34088/   1A8F4 :                     Obj3E:					; XREF: Obj_Index
   34089/   1A8F4 : 7000                		moveq	#0,d0
   34090/   1A8F6 : 1028 0024           		move.b	$24(a0),d0
   34091/   1A8FA : 323B 002E           		move.w	Obj3E_Index(pc,d0.w),d1
   34092/   1A8FE : 4EBB 102A           		jsr	Obj3E_Index(pc,d1.w)
   34093/   1A902 : 3028 0008           		move.w	8(a0),d0
   34094/   1A906 : 0240 FF80           		andi.w	#$FF80,d0
   34095/   1A90A : 3238 F700           		move.w	($FFFFF700).w,d1
   34096/   1A90E : 0441 0080           		subi.w	#$80,d1
   34097/   1A912 : 0241 FF80           		andi.w	#$FF80,d1
   34098/   1A916 : 9041                		sub.w	d1,d0
   34099/   1A918 : 0C40 0280           		cmpi.w	#$280,d0
   34100/   1A91C : 6206                		bhi.s	Obj3E_Delete
   34101/   1A91E : 4EF9 0000 D3D2      		jmp	DisplaySprite
   34102/   1A924 :                     ; ===========================================================================
   34103/   1A924 :                     
   34104/   1A924 :                     Obj3E_Delete:
   34105/   1A924 : 4EF9 0000 D40E      		jmp	DeleteObject
   34106/   1A92A :                     ; ===========================================================================
   34107/   1A92A : 0020                Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
   34108/   1A92C : 006A                		dc.w Obj3E_BodyMain-Obj3E_Index
   34109/   1A92E : 00A6                		dc.w Obj3E_Switched-Obj3E_Index
   34110/   1A930 : 010A                		dc.w Obj3E_Explosion-Obj3E_Index
   34111/   1A932 : 010A                		dc.w Obj3E_Explosion-Obj3E_Index
   34112/   1A934 : 010A                		dc.w Obj3E_Explosion-Obj3E_Index
   34113/   1A936 : 019E                		dc.w Obj3E_Animals-Obj3E_Index
   34114/   1A938 : 01EC                		dc.w Obj3E_EndAct-Obj3E_Index
   34115/   1A93A :                     
   34116/   1A93A : 0220 0400           Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
   34117/   1A93E : 040C 0501           		dc.b 4,	$C, 5, 1
   34118/   1A942 : 0610 0403           		dc.b 6,	$10, 4,	3
   34119/   1A946 : 0810 0305           		dc.b 8,	$10, 3,	5
   34120/   1A94A :                     ; ===========================================================================
   34121/   1A94A :                     
   34122/   1A94A :                     Obj3E_Main:				; XREF: Obj3E_Index
   34123/   1A94A : 217C 0001 AB40      		move.l	#Map_obj3E,4(a0)
            1A950 : 0004             
   34124/   1A952 : 317C 049D 0002      		move.w	#$49D,2(a0)
   34125/   1A958 : 117C 0004 0001      		move.b	#4,1(a0)
   34126/   1A95E : 3168 000C 0030      		move.w	$C(a0),$30(a0)
   34127/   1A964 : 7000                		moveq	#0,d0
   34128/   1A966 : 1028 0028           		move.b	$28(a0),d0
   34129/   1A96A : E548                		lsl.w	#2,d0
   34130/   1A96C : 43FB 00CC           		lea	Obj3E_Var(pc,d0.w),a1
   34131/   1A970 : 1159 0024           		move.b	(a1)+,$24(a0)
   34132/   1A974 : 1159 0019           		move.b	(a1)+,$19(a0)
   34133/   1A978 : 1159 0018           		move.b	(a1)+,$18(a0)
   34134/   1A97C : 1159 001A           		move.b	(a1)+,$1A(a0)
   34135/   1A980 : 0C40 0008           		cmpi.w	#8,d0		; is object type number	02?
   34136/   1A984 : 660C                		bne.s	Obj3E_Not02	; if not, branch
   34137/   1A986 : 117C 0006 0020      		move.b	#6,$20(a0)
   34138/   1A98C : 117C 0008 0021      		move.b	#8,$21(a0)
   34139/   1A992 :                     
   34140/   1A992 :                     Obj3E_Not02:
   34141/   1A992 : 4E75                		rts	
   34142/   1A994 :                     ; ===========================================================================
   34143/   1A994 :                     
   34144/   1A994 :                     Obj3E_BodyMain:				; XREF: Obj3E_Index
   34145/   1A994 : 0C38 0002 F7A7      		cmpi.b	#2,($FFFFF7A7).w
   34146/   1A99A : 6716                		beq.s	Obj3E_ChkOpened
   34147/   1A99C : 323C 002B           		move.w	#$2B,d1
   34148/   1A9A0 : 343C 0018           		move.w	#$18,d2
   34149/   1A9A4 : 363C 0018           		move.w	#$18,d3
   34150/   1A9A8 : 3828 0008           		move.w	8(a0),d4
   34151/   1A9AC : 4EF9 0000 F792      		jmp	SolidObject
   34152/   1A9B2 :                     ; ===========================================================================
   34153/   1A9B2 :                     
   34154/   1A9B2 :                     Obj3E_ChkOpened:
   34155/   1A9B2 : 4A28 0025           		tst.b	$25(a0)		; has the prison been opened?
   34156/   1A9B6 : 6710                		beq.s	Obj3E_DoOpen	; if yes, branch
   34157/   1A9B8 : 4228 0025           		clr.b	$25(a0)
   34158/   1A9BC : 08B8 0003 D022      		bclr	#3,($FFFFD022).w
   34159/   1A9C2 : 08F8 0001 D022      		bset	#1,($FFFFD022).w
   34160/   1A9C8 :                     
   34161/   1A9C8 :                     Obj3E_DoOpen:
   34162/   1A9C8 : 117C 0002 001A      		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
   34163/   1A9CE : 4E75                		rts	
   34164/   1A9D0 :                     ; ===========================================================================
   34165/   1A9D0 :                     
   34166/   1A9D0 :                     Obj3E_Switched:				; XREF: Obj3E_Index
   34167/   1A9D0 : 323C 0017           		move.w	#$17,d1
   34168/   1A9D4 : 343C 0008           		move.w	#8,d2
   34169/   1A9D8 : 363C 0008           		move.w	#8,d3
   34170/   1A9DC : 3828 0008           		move.w	8(a0),d4
   34171/   1A9E0 : 4EB9 0000 F792      		jsr	SolidObject
   34172/   1A9E6 : 43F9 0001 AB38      		lea	(Ani_obj3E).l,a1
   34173/   1A9EC : 4EB9 0000 A4FE      		jsr	AnimateSprite
   34174/   1A9F2 : 3168 0030 000C      		move.w	$30(a0),$C(a0)
   34175/   1A9F8 : 4A28 0025           		tst.b	$25(a0)
   34176/   1A9FC : 6734                		beq.s	locret_1AC60
   34177/   1A9FE : 5068 000C           		addq.w	#8,$C(a0)
   34178/   1AA02 : 117C 000A 0024      		move.b	#$A,$24(a0)
   34179/   1AA08 : 317C 003C 001E      		move.w	#$3C,$1E(a0)
   34180/   1AA0E : 4238 FE1E           		clr.b	($FFFFFE1E).w	; stop time counter
   34181/   1AA12 : 4238 F7AA           		clr.b	($FFFFF7AA).w	; lock screen position
   34182/   1AA16 : 11FC 0001 F7CC      		move.b	#1,($FFFFF7CC).w ; lock	controls
   34183/   1AA1C : 31FC 0800 F602      		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
   34184/   1AA22 : 4228 0025           		clr.b	$25(a0)
   34185/   1AA26 : 08B8 0003 D022      		bclr	#3,($FFFFD022).w
   34186/   1AA2C : 08F8 0001 D022      		bset	#1,($FFFFD022).w
   34187/   1AA32 :                     
   34188/   1AA32 :                     locret_1AC60:
   34189/   1AA32 : 4E75                		rts	
   34190/   1AA34 :                     ; ===========================================================================
   34191/   1AA34 :                     
   34192/   1AA34 :                     Obj3E_Explosion:			; XREF: Obj3E_Index
   34193/   1AA34 : 7007                		moveq	#7,d0
   34194/   1AA36 : C038 FE0F           		and.b	($FFFFFE0F).w,d0
   34195/   1AA3A : 6634                		bne.s	loc_1ACA0
   34196/   1AA3C : 4EB9 0000 D858      		jsr	SingleObjLoad
   34197/   1AA42 : 662C                		bne.s	loc_1ACA0
   34198/   1AA44 : 12BC 003F           		move.b	#$3F,0(a1)	; load explosion object
   34199/   1AA48 : 3368 0008 0008      		move.w	8(a0),8(a1)
   34200/   1AA4E : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   34201/   1AA54 : 4EB9 0000 279A      		jsr	(RandomNumber).l
   34202/   1AA5A : 7200                		moveq	#0,d1
   34203/   1AA5C : 1200                		move.b	d0,d1
   34204/   1AA5E : E409                		lsr.b	#2,d1
   34205/   1AA60 : 0441 0020           		subi.w	#$20,d1
   34206/   1AA64 : D369 0008           		add.w	d1,8(a1)
   34207/   1AA68 : E048                		lsr.w	#8,d0
   34208/   1AA6A : E608                		lsr.b	#3,d0
   34209/   1AA6C : D169 000C           		add.w	d0,$C(a1)
   34210/   1AA70 :                     
   34211/   1AA70 :                     loc_1ACA0:
   34212/   1AA70 : 5368 001E           		subq.w	#1,$1E(a0)
   34213/   1AA74 : 6702                		beq.s	Obj3E_MakeAnimal
   34214/   1AA76 : 4E75                		rts	
   34215/   1AA78 :                     ; ===========================================================================
   34216/   1AA78 :                     
   34217/   1AA78 :                     Obj3E_MakeAnimal:
   34218/   1AA78 : 11FC 0002 F7A7      		move.b	#2,($FFFFF7A7).w
   34219/   1AA7E : 117C 000C 0024      		move.b	#$C,$24(a0)	; replace explosions with animals
   34220/   1AA84 : 117C 0006 001A      		move.b	#6,$1A(a0)
   34221/   1AA8A : 317C 0096 001E      		move.w	#$96,$1E(a0)
   34222/   1AA90 : 0668 0020 000C      		addi.w	#$20,$C(a0)
   34223/   1AA96 : 7C07                		moveq	#7,d6
   34224/   1AA98 : 3A3C 009A           		move.w	#$9A,d5
   34225/   1AA9C : 78E4                		moveq	#-$1C,d4
   34226/   1AA9E :                     
   34227/   1AA9E :                     Obj3E_Loop:
   34228/   1AA9E : 4EB9 0000 D858      		jsr	SingleObjLoad
   34229/   1AAA4 : 6620                		bne.s	locret_1ACF8
   34230/   1AAA6 : 12BC 0028           		move.b	#$28,0(a1)	; load animal object
   34231/   1AAAA : 3368 0008 0008      		move.w	8(a0),8(a1)
   34232/   1AAB0 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   34233/   1AAB6 : D969 0008           		add.w	d4,8(a1)
   34234/   1AABA : 5E44                		addq.w	#7,d4
   34235/   1AABC : 3345 0036           		move.w	d5,$36(a1)
   34236/   1AAC0 : 5145                		subq.w	#8,d5
   34237/   1AAC2 : 51CE FFDA           		dbf	d6,Obj3E_Loop	; repeat 7 more	times
   34238/   1AAC6 :                     
   34239/   1AAC6 :                     locret_1ACF8:
   34240/   1AAC6 : 4E75                		rts	
   34241/   1AAC8 :                     ; ===========================================================================
   34242/   1AAC8 :                     
   34243/   1AAC8 :                     Obj3E_Animals:				; XREF: Obj3E_Index
   34244/   1AAC8 : 7007                		moveq	#7,d0
   34245/   1AACA : C038 FE0F           		and.b	($FFFFFE0F).w,d0
   34246/   1AACE : 6634                		bne.s	loc_1AD38
   34247/   1AAD0 : 4EB9 0000 D858      		jsr	SingleObjLoad
   34248/   1AAD6 : 662C                		bne.s	loc_1AD38
   34249/   1AAD8 : 12BC 0028           		move.b	#$28,0(a1)	; load animal object
   34250/   1AADC : 3368 0008 0008      		move.w	8(a0),8(a1)
   34251/   1AAE2 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   34252/   1AAE8 : 4EB9 0000 279A      		jsr	(RandomNumber).l
   34253/   1AAEE : 0240 001F           		andi.w	#$1F,d0
   34254/   1AAF2 : 5D40                		subq.w	#6,d0
   34255/   1AAF4 : 4A41                		tst.w	d1
   34256/   1AAF6 : 6A02                		bpl.s	loc_1AD2E
   34257/   1AAF8 : 4440                		neg.w	d0
   34258/   1AAFA :                     
   34259/   1AAFA :                     loc_1AD2E:
   34260/   1AAFA : D169 0008           		add.w	d0,8(a1)
   34261/   1AAFE : 337C 000C 0036      		move.w	#$C,$36(a1)
   34262/   1AB04 :                     
   34263/   1AB04 :                     loc_1AD38:
   34264/   1AB04 : 5368 001E           		subq.w	#1,$1E(a0)
   34265/   1AB08 : 660A                		bne.s	locret_1AD48
   34266/   1AB0A : 5428 0024           		addq.b	#2,$24(a0)
   34267/   1AB0E : 317C 00B4 001E      		move.w	#180,$1E(a0)
   34268/   1AB14 :                     
   34269/   1AB14 :                     locret_1AD48:
   34270/   1AB14 : 4E75                		rts	
   34271/   1AB16 :                     ; ===========================================================================
   34272/   1AB16 :                     
   34273/   1AB16 :                     Obj3E_EndAct:				; XREF: Obj3E_Index
   34274/   1AB16 : 703E                		moveq	#$3E,d0
   34275/   1AB18 : 7228                		moveq	#$28,d1
   34276/   1AB1A : 7440                		moveq	#$40,d2
   34277/   1AB1C : 43F8 D040           		lea	($FFFFD040).w,a1 ; load	object RAM
   34278/   1AB20 :                     
   34279/   1AB20 :                     Obj3E_FindObj28:
   34280/   1AB20 : B211                		cmp.b	(a1),d1		; is object $28	(animal) loaded?
   34281/   1AB22 : 6712                		beq.s	Obj3E_Obj28Found ; if yes, branch
   34282/   1AB24 : D2C2                		adda.w	d2,a1		; next object RAM
   34283/   1AB26 : 51C8 FFF8           		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
   34284/   1AB2A :                     
   34285/   1AB2A : 4EB9 0000 EA4E      		jsr	GotThroughAct
   34286/   1AB30 : 4EF9 0000 D40E      		jmp	DeleteObject
   34287/   1AB36 :                     ; ===========================================================================
   34288/   1AB36 :                     
   34289/   1AB36 :                     Obj3E_Obj28Found:
   34290/   1AB36 : 4E75                		rts	
   34291/   1AB38 :                     ; ===========================================================================
   34292/   1AB38 :                     Ani_obj3E:
   34293/   1AB38 :                     	include "_animations/obj3E.asm"
(1)    1/   1AB38 :                     ; ---------------------------------------------------------------------------
(1)    2/   1AB38 :                     ; Animation script - prison capsule
(1)    3/   1AB38 :                     ; ---------------------------------------------------------------------------
(1)    4/   1AB38 : 0004                		dc.w byte_1AD70-Ani_obj3E
(1)    5/   1AB3A : 0004                		dc.w byte_1AD70-Ani_obj3E
(1)    6/   1AB3C : 0201 03FF           byte_1AD70:	dc.b 2,	1, 3, $FF
(1)    7/   1AB40 : (MACRO)              		even
   34294/   1AB40 :                     
   34295/   1AB40 :                     ; ---------------------------------------------------------------------------
   34296/   1AB40 :                     ; Sprite mappings - prison capsule
   34297/   1AB40 :                     ; ---------------------------------------------------------------------------
   34298/   1AB40 :                     Map_obj3E:
   34299/   1AB40 :                     	include "_mappings/obj3E.asm"
(1)    1/   1AB40 :                     ; ---------------------------------------------------------------------------
(1)    2/   1AB40 :                     ; Sprite mappings - prison capsule
(1)    3/   1AB40 :                     ; ---------------------------------------------------------------------------
(1)    4/   1AB40 : 000E 0032           		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
(1)    5/   1AB44 : 0038 0057           		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
(1)    6/   1AB48 : 005D 0068           		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
(1)    7/   1AB4C : 006E                		dc.w byte_1ADE2-Map_obj3E
(1)    8/   1AB4E : 07                  byte_1AD82:	dc.b 7
(1)    9/   1AB4F : E00C 2000 F0        		dc.b $E0, $C, $20, 0, $F0
(1)   10/   1AB54 : E80D 2004 E0        		dc.b $E8, $D, $20, 4, $E0
(1)   11/   1AB59 : E80D 200C 00        		dc.b $E8, $D, $20, $C, 0
(1)   12/   1AB5E : F80E 2014 E0        		dc.b $F8, $E, $20, $14,	$E0
(1)   13/   1AB63 : F80E 2020 00        		dc.b $F8, $E, $20, $20,	0
(1)   14/   1AB68 : 100D 202C E0        		dc.b $10, $D, $20, $2C,	$E0
(1)   15/   1AB6D : 100D 2034 00        		dc.b $10, $D, $20, $34,	0
(1)   16/   1AB72 : 01                  byte_1ADA6:	dc.b 1
(1)   17/   1AB73 : F809 003C F4        		dc.b $F8, 9, 0,	$3C, $F4
(1)   18/   1AB78 : 06                  byte_1ADAC:	dc.b 6
(1)   19/   1AB79 : 0008 2042 E0        		dc.b 0,	8, $20,	$42, $E0
(1)   20/   1AB7E : 080C 2045 E0        		dc.b 8,	$C, $20, $45, $E0
(1)   21/   1AB83 : 0004 2049 10        		dc.b 0,	4, $20,	$49, $10
(1)   22/   1AB88 : 080C 204B 00        		dc.b 8,	$C, $20, $4B, 0
(1)   23/   1AB8D : 100D 202C E0        		dc.b $10, $D, $20, $2C,	$E0
(1)   24/   1AB92 : 100D 2034 00        		dc.b $10, $D, $20, $34,	0
(1)   25/   1AB97 : 01                  byte_1ADCB:	dc.b 1
(1)   26/   1AB98 : F809 004F F4        		dc.b $F8, 9, 0,	$4F, $F4
(1)   27/   1AB9D : 02                  byte_1ADD1:	dc.b 2
(1)   28/   1AB9E : E80E 2055 F0        		dc.b $E8, $E, $20, $55,	$F0
(1)   29/   1ABA3 : 000E 2061 F0        		dc.b 0,	$E, $20, $61, $F0
(1)   30/   1ABA8 : 01                  byte_1ADDC:	dc.b 1
(1)   31/   1ABA9 : F007 206D F8        		dc.b $F0, 7, $20, $6D, $F8
(1)   32/   1ABAE : 00                  byte_1ADE2:	dc.b 0
(1)   33/   1ABAF : (MACRO)              		even
(1)   33/   1ABAF : 00                                          dc.b 0 ;ds.b 1 
   34300/   1ABB0 :                     
   34301/   1ABB0 :                     ; ---------------------------------------------------------------------------
   34302/   1ABB0 :                     ; Object touch response	subroutine - $20(a0) in	the object RAM
   34303/   1ABB0 :                     ; ---------------------------------------------------------------------------
   34304/   1ABB0 :                     
   34305/   1ABB0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   34306/   1ABB0 :                     
   34307/   1ABB0 :                     
   34308/   1ABB0 :                     TouchResponse:				; XREF: Obj01
   34309/   1ABB0 : 4E71                		nop	
   34310/   1ABB2 : 3428 0008           		move.w	8(a0),d2	; load Sonic's x-axis value
   34311/   1ABB6 : 3628 000C           		move.w	$C(a0),d3	; load Sonic's y-axis value
   34312/   1ABBA : 5142                		subq.w	#8,d2
   34313/   1ABBC : 7A00                		moveq	#0,d5
   34314/   1ABBE : 1A28 0016           		move.b	$16(a0),d5	; load Sonic's height
   34315/   1ABC2 : 5705                		subq.b	#3,d5
   34316/   1ABC4 : 9645                		sub.w	d5,d3
   34317/   1ABC6 : 0C28 0039 001A      		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
   34318/   1ABCC : 6606                		bne.s	Touch_NoDuck	; if not, branch
   34319/   1ABCE : 0643 000C           		addi.w	#$C,d3
   34320/   1ABD2 : 7A0A                		moveq	#$A,d5
   34321/   1ABD4 :                     
   34322/   1ABD4 :                     Touch_NoDuck:
   34323/   1ABD4 : 383C 0010           		move.w	#$10,d4
   34324/   1ABD8 : DA45                		add.w	d5,d5
   34325/   1ABDA : 43F8 D800           		lea	($FFFFD800).w,a1 ; begin checking the object RAM
   34326/   1ABDE : 3C3C 005F           		move.w	#$5F,d6
   34327/   1ABE2 :                     
   34328/   1ABE2 :                     Touch_Loop:
   34329/   1ABE2 : 4A29 0001           		tst.b	1(a1)
   34330/   1ABE6 : 6A06                		bpl.s	Touch_NextObj
   34331/   1ABE8 : 1029 0020           		move.b	$20(a1),d0	; load touch response number
   34332/   1ABEC : 6654                		bne.s	Touch_Height	; if touch response is not 0, branch
   34333/   1ABEE :                     
   34334/   1ABEE :                     Touch_NextObj:
   34335/   1ABEE : 43E9 0040           		lea	$40(a1),a1	; next object RAM
   34336/   1ABF2 : 51CE FFEE           		dbf	d6,Touch_Loop	; repeat $5F more times
   34337/   1ABF6 :                     
   34338/   1ABF6 : 7000                		moveq	#0,d0
   34339/   1ABF8 : 4E75                		rts	
   34340/   1ABFA :                     ; ===========================================================================
   34341/   1ABFA : 1414                Touch_Sizes:	dc.b  $14, $14		; width, height
   34342/   1ABFC : 0C14                		dc.b   $C, $14
   34343/   1ABFE : 140C                		dc.b  $14,  $C
   34344/   1AC00 : 0410                		dc.b	4, $10
   34345/   1AC02 : 0C12                		dc.b   $C, $12
   34346/   1AC04 : 1010                		dc.b  $10, $10
   34347/   1AC06 : 0606                		dc.b	6,   6
   34348/   1AC08 : 180C                		dc.b  $18,  $C
   34349/   1AC0A : 0C10                		dc.b   $C, $10
   34350/   1AC0C : 100C                		dc.b  $10,  $C
   34351/   1AC0E : 0808                		dc.b	8,   8
   34352/   1AC10 : 1410                		dc.b  $14, $10
   34353/   1AC12 : 1408                		dc.b  $14,   8
   34354/   1AC14 : 0E0E                		dc.b   $E,  $E
   34355/   1AC16 : 1818                		dc.b  $18, $18
   34356/   1AC18 : 2810                		dc.b  $28, $10
   34357/   1AC1A : 1018                		dc.b  $10, $18
   34358/   1AC1C : 0810                		dc.b	8, $10
   34359/   1AC1E : 2070                		dc.b  $20, $70
   34360/   1AC20 : 4020                		dc.b  $40, $20
   34361/   1AC22 : 8020                		dc.b  $80, $20
   34362/   1AC24 : 2020                		dc.b  $20, $20
   34363/   1AC26 : 0808                		dc.b	8,   8
   34364/   1AC28 : 0404                		dc.b	4,   4
   34365/   1AC2A : 2008                		dc.b  $20,   8
   34366/   1AC2C : 0C0C                		dc.b   $C,  $C
   34367/   1AC2E : 0804                		dc.b	8,   4
   34368/   1AC30 : 1804                		dc.b  $18,   4
   34369/   1AC32 : 2804                		dc.b  $28,   4
   34370/   1AC34 : 0408                		dc.b	4,   8
   34371/   1AC36 : 0418                		dc.b	4, $18
   34372/   1AC38 : 0428                		dc.b	4, $28
   34373/   1AC3A : 0420                		dc.b	4, $20
   34374/   1AC3C : 1818                		dc.b  $18, $18
   34375/   1AC3E : 0C18                		dc.b   $C, $18
   34376/   1AC40 : 4808                		dc.b  $48,   8
   34377/   1AC42 :                     ; ===========================================================================
   34378/   1AC42 :                     
   34379/   1AC42 :                     Touch_Height:				; XREF: TouchResponse
   34380/   1AC42 : 0240 003F           		andi.w	#$3F,d0
   34381/   1AC46 : D040                		add.w	d0,d0
   34382/   1AC48 : 45FB 00AE           		lea	Touch_Sizes-2(pc,d0.w),a2
   34383/   1AC4C : 7200                		moveq	#0,d1
   34384/   1AC4E : 121A                		move.b	(a2)+,d1
   34385/   1AC50 : 3029 0008           		move.w	8(a1),d0
   34386/   1AC54 : 9041                		sub.w	d1,d0
   34387/   1AC56 : 9042                		sub.w	d2,d0
   34388/   1AC58 : 640A                		bcc.s	loc_1AE98
   34389/   1AC5A : D241                		add.w	d1,d1
   34390/   1AC5C : D041                		add.w	d1,d0
   34391/   1AC5E : 650A                		bcs.s	Touch_Width
   34392/   1AC60 : 6000 FF8C           		bra.w	Touch_NextObj
   34393/   1AC64 :                     ; ===========================================================================
   34394/   1AC64 :                     
   34395/   1AC64 :                     loc_1AE98:
   34396/   1AC64 : B044                		cmp.w	d4,d0
   34397/   1AC66 : 6200 FF86           		bhi.w	Touch_NextObj
   34398/   1AC6A :                     
   34399/   1AC6A :                     Touch_Width:
   34400/   1AC6A : 7200                		moveq	#0,d1
   34401/   1AC6C : 121A                		move.b	(a2)+,d1
   34402/   1AC6E : 3029 000C           		move.w	$C(a1),d0
   34403/   1AC72 : 9041                		sub.w	d1,d0
   34404/   1AC74 : 9043                		sub.w	d3,d0
   34405/   1AC76 : 640A                		bcc.s	loc_1AEB6
   34406/   1AC78 : D241                		add.w	d1,d1
   34407/   1AC7A : D240                		add.w	d0,d1
   34408/   1AC7C : 650A                		bcs.s	Touch_ChkValue
   34409/   1AC7E : 6000 FF6E           		bra.w	Touch_NextObj
   34410/   1AC82 :                     ; ===========================================================================
   34411/   1AC82 :                     
   34412/   1AC82 :                     loc_1AEB6:
   34413/   1AC82 : B045                		cmp.w	d5,d0
   34414/   1AC84 : 6200 FF68           		bhi.w	Touch_NextObj
   34415/   1AC88 :                     
   34416/   1AC88 :                     Touch_ChkValue:
   34417/   1AC88 : 1229 0020           		move.b	$20(a1),d1	; load touch response number
   34418/   1AC8C : 0201 00C0           		andi.b	#$C0,d1		; is touch response $40	or higher?
   34419/   1AC90 : 6700 006A           		beq.w	Touch_Enemy	; if not, branch
   34420/   1AC94 : 0C01 00C0           		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
   34421/   1AC98 : 6700 021E           		beq.w	Touch_Special	; if yes, branch
   34422/   1AC9C : 4A01                		tst.b	d1		; is touch response $80-$BF ?
   34423/   1AC9E : 6B00 010A           		bmi.w	Touch_ChkHurt	; if yes, branch
   34424/   1ACA2 :                     
   34425/   1ACA2 :                     ; touch	response is $40-$7F
   34426/   1ACA2 :                     
   34427/   1ACA2 : 1029 0020           		move.b	$20(a1),d0
   34428/   1ACA6 : 0200 003F           		andi.b	#$3F,d0
   34429/   1ACAA : 0C00 0006           		cmpi.b	#6,d0		; is touch response $46	?
   34430/   1ACAE : 6710                		beq.s	Touch_Monitor	; if yes, branch
   34431/   1ACB0 : 0C68 005A 0030      		cmpi.w	#$5A,$30(a0)
   34432/   1ACB6 : 6400 0006           		bcc.w	locret_1AEF2
   34433/   1ACBA : 5429 0024           		addq.b	#2,$24(a1)	; advance the object's routine counter
   34434/   1ACBE :                     
   34435/   1ACBE :                     locret_1AEF2:
   34436/   1ACBE : 4E75                		rts	
   34437/   1ACC0 :                     ; ===========================================================================
   34438/   1ACC0 :                     
   34439/   1ACC0 :                     Touch_Monitor:
   34440/   1ACC0 : 4A68 0012           		tst.w	$12(a0)		; is Sonic moving upwards?
   34441/   1ACC4 : 6A24                		bpl.s	loc_1AF1E	; if not, branch
   34442/   1ACC6 : 3028 000C           		move.w	$C(a0),d0
   34443/   1ACCA : 0440 0010           		subi.w	#$10,d0
   34444/   1ACCE : B069 000C           		cmp.w	$C(a1),d0
   34445/   1ACD2 : 6526                		bcs.s	locret_1AF2E
   34446/   1ACD4 : 4468 0012           		neg.w	$12(a0)		; reverse Sonic's y-motion
   34447/   1ACD8 : 337C FE80 0012      		move.w	#-$180,$12(a1)
   34448/   1ACDE : 4A29 0025           		tst.b	$25(a1)
   34449/   1ACE2 : 6616                		bne.s	locret_1AF2E
   34450/   1ACE4 : 5829 0025           		addq.b	#4,$25(a1)	; advance the monitor's routine counter
   34451/   1ACE8 : 4E75                		rts	
   34452/   1ACEA :                     ; ===========================================================================
   34453/   1ACEA :                     
   34454/   1ACEA :                     loc_1AF1E:
   34455/   1ACEA : 0C28 0002 001C      		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
   34456/   1ACF0 : 6608                		bne.s	locret_1AF2E
   34457/   1ACF2 : 4468 0012           		neg.w	$12(a0)		; reverse Sonic's y-motion
   34458/   1ACF6 : 5429 0024           		addq.b	#2,$24(a1)	; advance the monitor's routine counter
   34459/   1ACFA :                     
   34460/   1ACFA :                     locret_1AF2E:
   34461/   1ACFA : 4E75                		rts	
   34462/   1ACFC :                     ; ===========================================================================
   34463/   1ACFC :                     
   34464/   1ACFC :                     Touch_Enemy:				; XREF: Touch_ChkValue
   34465/   1ACFC : 4A38 FE2D           		tst.b	($FFFFFE2D).w	; is Sonic invincible?
   34466/   1AD00 : 660A                		bne.s	loc_1AF40	; if yes, branch
   34467/   1AD02 : 0C28 0002 001C      		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
   34468/   1AD08 : 6600 00A0           		bne.w	Touch_ChkHurt	; if not, branch
   34469/   1AD0C :                     
   34470/   1AD0C :                     loc_1AF40:
   34471/   1AD0C : 4A29 0021           		tst.b	$21(a1)
   34472/   1AD10 : 6724                		beq.s	Touch_KillEnemy
   34473/   1AD12 : 4468 0010           		neg.w	$10(a0)
   34474/   1AD16 : 4468 0012           		neg.w	$12(a0)
   34475/   1AD1A : E0E8 0010           		asr	$10(a0)
   34476/   1AD1E : E0E8 0012           		asr	$12(a0)
   34477/   1AD22 : 137C 0000 0020      		move.b	#0,$20(a1)
   34478/   1AD28 : 5329 0021           		subq.b	#1,$21(a1)
   34479/   1AD2C : 6606                		bne.s	locret_1AF68
   34480/   1AD2E : 08E9 0007 0022      		bset	#7,$22(a1)
   34481/   1AD34 :                     
   34482/   1AD34 :                     locret_1AF68:
   34483/   1AD34 : 4E75                		rts	
   34484/   1AD36 :                     ; ===========================================================================
   34485/   1AD36 :                     
   34486/   1AD36 :                     Touch_KillEnemy:
   34487/   1AD36 : 08E9 0007 0022      		bset	#7,$22(a1)
   34488/   1AD3C : 7000                		moveq	#0,d0
   34489/   1AD3E : 3038 F7D0           		move.w	($FFFFF7D0).w,d0
   34490/   1AD42 : 5478 F7D0           		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
   34491/   1AD46 : 0C40 0006           		cmpi.w	#6,d0
   34492/   1AD4A : 6502                		bcs.s	loc_1AF82
   34493/   1AD4C : 7006                		moveq	#6,d0
   34494/   1AD4E :                     
   34495/   1AD4E :                     loc_1AF82:
   34496/   1AD4E : 3340 003E           		move.w	d0,$3E(a1)
   34497/   1AD52 : 303B 0048           		move.w	Enemy_Points(pc,d0.w),d0
   34498/   1AD56 : 0C78 0020 F7D0      		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
   34499/   1AD5C : 650A                		bcs.s	loc_1AF9C	; if not, branch
   34500/   1AD5E : 303C 03E8           		move.w	#1000,d0	; fix bonus to 10000
   34501/   1AD62 : 337C 000A 003E      		move.w	#$A,$3E(a1)
   34502/   1AD68 :                     
   34503/   1AD68 :                     loc_1AF9C:
   34504/   1AD68 : 6100 197E           		bsr.w	AddPoints
   34505/   1AD6C : 12BC 0027           		move.b	#$27,0(a1)	; change object	to points
   34506/   1AD70 : 137C 0000 0024      		move.b	#0,$24(a1)
   34507/   1AD76 : 4A68 0012           		tst.w	$12(a0)
   34508/   1AD7A : 6B10                		bmi.s	loc_1AFC2
   34509/   1AD7C : 3028 000C           		move.w	$C(a0),d0
   34510/   1AD80 : B069 000C           		cmp.w	$C(a1),d0
   34511/   1AD84 : 640E                		bcc.s	loc_1AFCA
   34512/   1AD86 : 4468 0012           		neg.w	$12(a0)
   34513/   1AD8A : 4E75                		rts	
   34514/   1AD8C :                     ; ===========================================================================
   34515/   1AD8C :                     
   34516/   1AD8C :                     loc_1AFC2:
   34517/   1AD8C : 0668 0100 0012      		addi.w	#$100,$12(a0)
   34518/   1AD92 : 4E75                		rts	
   34519/   1AD94 :                     ; ===========================================================================
   34520/   1AD94 :                     
   34521/   1AD94 :                     loc_1AFCA:
   34522/   1AD94 : 0468 0100 0012      		subi.w	#$100,$12(a0)
   34523/   1AD9A : 4E75                		rts	
   34524/   1AD9C :                     ; ===========================================================================
   34525/   1AD9C : 000A 0014 0032      Enemy_Points:	dc.w 10, 20, 50, 100
            1ADA2 : 0064             
   34526/   1ADA4 :                     ; ===========================================================================
   34527/   1ADA4 :                     
   34528/   1ADA4 :                     loc_1AFDA:				; XREF: Touch_CatKiller
   34529/   1ADA4 : 08E9 0007 0022      		bset	#7,$22(a1)
   34530/   1ADAA :                     
   34531/   1ADAA :                     Touch_ChkHurt:				; XREF: Touch_ChkValue
   34532/   1ADAA : 4A38 FE2D           		tst.b	($FFFFFE2D).w	; is Sonic invincible?
   34533/   1ADAE : 6704                		beq.s	Touch_Hurt	; if not, branch
   34534/   1ADB0 :                     
   34535/   1ADB0 :                     loc_1AFE6:				; XREF: Touch_Hurt
   34536/   1ADB0 : 70FF                		moveq	#-1,d0
   34537/   1ADB2 : 4E75                		rts	
   34538/   1ADB4 :                     ; ===========================================================================
   34539/   1ADB4 :                     
   34540/   1ADB4 :                     Touch_Hurt:				; XREF: Touch_ChkHurt
   34541/   1ADB4 : 4E71                		nop	
   34542/   1ADB6 : 4A68 0030           		tst.w	$30(a0)
   34543/   1ADBA : 66F4                		bne.s	loc_1AFE6
   34544/   1ADBC : 2449                		movea.l	a1,a2
   34545/   1ADBE :                     
   34546/   1ADBE :                     ; End of function TouchResponse
   34547/   1ADBE :                     ; continue straight to HurtSonic
   34548/   1ADBE :                     
   34549/   1ADBE :                     ; ---------------------------------------------------------------------------
   34550/   1ADBE :                     ; Hurting Sonic	subroutine
   34551/   1ADBE :                     ; ---------------------------------------------------------------------------
   34552/   1ADBE :                     
   34553/   1ADBE :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   34554/   1ADBE :                     
   34555/   1ADBE :                     
   34556/   1ADBE :                     HurtSonic:
   34557/   1ADBE : 4A38 FE2C           		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
   34558/   1ADC2 : 6620                		bne.s	Hurt_Shield	; if yes, branch
   34559/   1ADC4 : 4A78 FE20           		tst.w	($FFFFFE20).w	; does Sonic have any rings?
   34560/   1ADC8 : 6700 008E           		beq.w	Hurt_NoRings	; if not, branch
   34561/   1ADCC : 4EB9 0000 D858      		jsr	SingleObjLoad
   34562/   1ADD2 : 6610                		bne.s	Hurt_Shield
   34563/   1ADD4 : 12BC 0037           		move.b	#$37,0(a1)	; load bouncing	multi rings object
   34564/   1ADD8 : 3368 0008 0008      		move.w	8(a0),8(a1)
   34565/   1ADDE : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   34566/   1ADE4 :                     
   34567/   1ADE4 :                     Hurt_Shield:
   34568/   1ADE4 : 11FC 0000 FE2C      		move.b	#0,($FFFFFE2C).w ; remove shield
   34569/   1ADEA : 117C 0004 0024      		move.b	#4,$24(a0)
   34570/   1ADF0 : 6100 8750           		bsr.w	Sonic_ResetOnFloor
   34571/   1ADF4 : 08E8 0001 0022      		bset	#1,$22(a0)
   34572/   1ADFA : 317C FC00 0012      		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
   34573/   1AE00 : 317C FE00 0010      		move.w	#-$200,$10(a0)
   34574/   1AE06 : 0828 0006 0022      		btst	#6,$22(a0)
   34575/   1AE0C : 670C                		beq.s	Hurt_Reverse
   34576/   1AE0E : 317C FE00 0012      		move.w	#-$200,$12(a0)
   34577/   1AE14 : 317C FF00 0010      		move.w	#-$100,$10(a0)
   34578/   1AE1A :                     
   34579/   1AE1A :                     Hurt_Reverse:
   34580/   1AE1A : 3028 0008           		move.w	8(a0),d0
   34581/   1AE1E : B06A 0008           		cmp.w	8(a2),d0
   34582/   1AE22 : 6504                		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
   34583/   1AE24 : 4468 0010           		neg.w	$10(a0)		; if Sonic is right of the object, reverse
   34584/   1AE28 :                     
   34585/   1AE28 :                     Hurt_ChkSpikes:
   34586/   1AE28 : 317C 0000 0014      		move.w	#0,$14(a0)
   34587/   1AE2E : 117C 001A 001C      		move.b	#$1A,$1C(a0)
   34588/   1AE34 : 317C 0078 0030      		move.w	#$78,$30(a0)
   34589/   1AE3A : 303C 00A3           		move.w	#$A3,d0		; load normal damage sound
   34590/   1AE3E : 0C12 0036           		cmpi.b	#$36,(a2)	; was damage caused by spikes?
   34591/   1AE42 : 660A                		bne.s	Hurt_Sound	; if not, branch
   34592/   1AE44 : 0C12 0016           		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
   34593/   1AE48 : 6604                		bne.s	Hurt_Sound	; if not, branch
   34594/   1AE4A : 303C 00A6           		move.w	#$A6,d0		; load spikes damage sound
   34595/   1AE4E :                     
   34596/   1AE4E :                     Hurt_Sound:
   34597/   1AE4E : 4EB9 0000 1182      		jsr	(PlaySound_Special).l
   34598/   1AE54 : 70FF                		moveq	#-1,d0
   34599/   1AE56 : 4E75                		rts	
   34600/   1AE58 :                     ; ===========================================================================
   34601/   1AE58 :                     
   34602/   1AE58 :                     Hurt_NoRings:
   34603/   1AE58 : 4A78 FFFA           		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
   34604/   1AE5C : 6600 FF86           		bne.w	Hurt_Shield	; if yes, branch
   34605/   1AE60 :                     ; End of function HurtSonic
   34606/   1AE60 :                     
   34607/   1AE60 :                     ; ---------------------------------------------------------------------------
   34608/   1AE60 :                     ; Subroutine to	kill Sonic
   34609/   1AE60 :                     ; ---------------------------------------------------------------------------
   34610/   1AE60 :                     
   34611/   1AE60 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   34612/   1AE60 :                     
   34613/   1AE60 :                     
   34614/   1AE60 :                     KillSonic:
   34615/   1AE60 : 4A78 FE08           		tst.w	($FFFFFE08).w	; is debug mode	active?
   34616/   1AE64 : 664E                		bne.s	Kill_NoDeath	; if yes, branch
   34617/   1AE66 : 11FC 0000 FE2D      		move.b	#0,($FFFFFE2D).w ; remove invincibility
   34618/   1AE6C : 117C 0006 0024      		move.b	#6,$24(a0)
   34619/   1AE72 : 6100 86CE           		bsr.w	Sonic_ResetOnFloor
   34620/   1AE76 : 08E8 0001 0022      		bset	#1,$22(a0)
   34621/   1AE7C : 317C F900 0012      		move.w	#-$700,$12(a0)
   34622/   1AE82 : 317C 0000 0010      		move.w	#0,$10(a0)
   34623/   1AE88 : 317C 0000 0014      		move.w	#0,$14(a0)
   34624/   1AE8E : 3168 000C 0038      		move.w	$C(a0),$38(a0)
   34625/   1AE94 : 117C 0018 001C      		move.b	#$18,$1C(a0)
   34626/   1AE9A : 08E8 0007 0002      		bset	#7,2(a0)
   34627/   1AEA0 : 303C 00A3           		move.w	#$A3,d0		; play normal death sound
   34628/   1AEA4 : 0C12 0036           		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
   34629/   1AEA8 : 6604                		bne.s	Kill_Sound
   34630/   1AEAA : 303C 00A6           		move.w	#$A6,d0		; play spikes death sound
   34631/   1AEAE :                     
   34632/   1AEAE :                     Kill_Sound:
   34633/   1AEAE : 4EB9 0000 1182      		jsr	(PlaySound_Special).l
   34634/   1AEB4 :                     
   34635/   1AEB4 :                     Kill_NoDeath:
   34636/   1AEB4 : 70FF                		moveq	#-1,d0
   34637/   1AEB6 : 4E75                		rts	
   34638/   1AEB8 :                     ; End of function KillSonic
   34639/   1AEB8 :                     
   34640/   1AEB8 :                     
   34641/   1AEB8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   34642/   1AEB8 :                     
   34643/   1AEB8 :                     
   34644/   1AEB8 :                     Touch_Special:				; XREF: Touch_ChkValue
   34645/   1AEB8 : 1229 0020           		move.b	$20(a1),d1
   34646/   1AEBC : 0201 003F           		andi.b	#$3F,d1
   34647/   1AEC0 : 0C01 000B           		cmpi.b	#$B,d1		; is touch response $CB	?
   34648/   1AEC4 : 6714                		beq.s	Touch_CatKiller	; if yes, branch
   34649/   1AEC6 : 0C01 000C           		cmpi.b	#$C,d1		; is touch response $CC	?
   34650/   1AECA : 6712                		beq.s	Touch_Yadrin	; if yes, branch
   34651/   1AECC : 0C01 0017           		cmpi.b	#$17,d1		; is touch response $D7	?
   34652/   1AED0 : 673E                		beq.s	Touch_D7orE1	; if yes, branch
   34653/   1AED2 : 0C01 0021           		cmpi.b	#$21,d1		; is touch response $E1	?
   34654/   1AED6 : 6738                		beq.s	Touch_D7orE1	; if yes, branch
   34655/   1AED8 : 4E75                		rts	
   34656/   1AEDA :                     ; ===========================================================================
   34657/   1AEDA :                     
   34658/   1AEDA :                     Touch_CatKiller:			; XREF: Touch_Special
   34659/   1AEDA : 6000 FEC8           		bra.w	loc_1AFDA
   34660/   1AEDE :                     ; ===========================================================================
   34661/   1AEDE :                     
   34662/   1AEDE :                     Touch_Yadrin:				; XREF: Touch_Special
   34663/   1AEDE : 9A40                		sub.w	d0,d5
   34664/   1AEE0 : 0C45 0008           		cmpi.w	#8,d5
   34665/   1AEE4 : 6426                		bcc.s	loc_1B144
   34666/   1AEE6 : 3029 0008           		move.w	8(a1),d0
   34667/   1AEEA : 5940                		subq.w	#4,d0
   34668/   1AEEC : 0829 0000 0022      		btst	#0,$22(a1)
   34669/   1AEF2 : 6704                		beq.s	loc_1B130
   34670/   1AEF4 : 0440 0010           		subi.w	#$10,d0
   34671/   1AEF8 :                     
   34672/   1AEF8 :                     loc_1B130:
   34673/   1AEF8 : 9042                		sub.w	d2,d0
   34674/   1AEFA : 6408                		bcc.s	loc_1B13C
   34675/   1AEFC : 0640 0018           		addi.w	#$18,d0
   34676/   1AF00 : 6506                		bcs.s	loc_1B140
   34677/   1AF02 : 6008                		bra.s	loc_1B144
   34678/   1AF04 :                     ; ===========================================================================
   34679/   1AF04 :                     
   34680/   1AF04 :                     loc_1B13C:
   34681/   1AF04 : B044                		cmp.w	d4,d0
   34682/   1AF06 : 6204                		bhi.s	loc_1B144
   34683/   1AF08 :                     
   34684/   1AF08 :                     loc_1B140:
   34685/   1AF08 : 6000 FEA0           		bra.w	Touch_ChkHurt
   34686/   1AF0C :                     ; ===========================================================================
   34687/   1AF0C :                     
   34688/   1AF0C :                     loc_1B144:
   34689/   1AF0C : 6000 FDEE           		bra.w	Touch_Enemy
   34690/   1AF10 :                     ; ===========================================================================
   34691/   1AF10 :                     
   34692/   1AF10 :                     Touch_D7orE1:				; XREF: Touch_Special
   34693/   1AF10 : 5229 0021           		addq.b	#1,$21(a1)
   34694/   1AF14 : 4E75                		rts	
   34695/   1AF16 :                     ; End of function Touch_Special
   34696/   1AF16 :                     
   34697/   1AF16 :                     ; ---------------------------------------------------------------------------
   34698/   1AF16 :                     ; Subroutine to	show the special stage layout
   34699/   1AF16 :                     ; ---------------------------------------------------------------------------
   34700/   1AF16 :                     
   34701/   1AF16 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   34702/   1AF16 :                     
   34703/   1AF16 :                     
   34704/   1AF16 :                     SS_ShowLayout:				; XREF: SpecialStage
   34705/   1AF16 : 6100 0140           		bsr.w	SS_AniWallsRings
   34706/   1AF1A : 6100 037C           		bsr.w	SS_AniItems
   34707/   1AF1E : 3F05                		move.w	d5,-(sp)
   34708/   1AF20 : 43F8 8000           		lea	($FFFF8000).w,a1
   34709/   1AF24 : 1038 F780           		move.b	($FFFFF780).w,d0
   34710/   1AF28 : 0200 00FC           		andi.b	#$FC,d0
   34711/   1AF2C : 4EB9 0000 27C0      		jsr	(CalcSine).l
   34712/   1AF32 : 3800                		move.w	d0,d4
   34713/   1AF34 : 3A01                		move.w	d1,d5
   34714/   1AF36 : C9FC 0018           		muls.w	#$18,d4
   34715/   1AF3A : CBFC 0018           		muls.w	#$18,d5
   34716/   1AF3E : 7400                		moveq	#0,d2
   34717/   1AF40 : 3438 F700           		move.w	($FFFFF700).w,d2
   34718/   1AF44 : 84FC 0018           		divu.w	#$18,d2
   34719/   1AF48 : 4842                		swap	d2
   34720/   1AF4A : 4442                		neg.w	d2
   34721/   1AF4C : 0642 FF4C           		addi.w	#-$B4,d2
   34722/   1AF50 : 7600                		moveq	#0,d3
   34723/   1AF52 : 3638 F704           		move.w	($FFFFF704).w,d3
   34724/   1AF56 : 86FC 0018           		divu.w	#$18,d3
   34725/   1AF5A : 4843                		swap	d3
   34726/   1AF5C : 4443                		neg.w	d3
   34727/   1AF5E : 0643 FF4C           		addi.w	#-$B4,d3
   34728/   1AF62 : 3E3C 000F           		move.w	#$F,d7
   34729/   1AF66 :                     
   34730/   1AF66 :                     loc_1B19E:
   34731/   1AF66 : 48A7 E000           		movem.w	d0-d2,-(sp)
   34732/   1AF6A : 48A7 C000           		movem.w	d0-d1,-(sp)
   34733/   1AF6E : 4440                		neg.w	d0
   34734/   1AF70 : C3C2                		muls.w	d2,d1
   34735/   1AF72 : C1C3                		muls.w	d3,d0
   34736/   1AF74 : 2C00                		move.l	d0,d6
   34737/   1AF76 : DC81                		add.l	d1,d6
   34738/   1AF78 : 4C9F 0003           		movem.w	(sp)+,d0-d1
   34739/   1AF7C : C1C2                		muls.w	d2,d0
   34740/   1AF7E : C3C3                		muls.w	d3,d1
   34741/   1AF80 : D280                		add.l	d0,d1
   34742/   1AF82 : 2406                		move.l	d6,d2
   34743/   1AF84 : 3C3C 000F           		move.w	#$F,d6
   34744/   1AF88 :                     
   34745/   1AF88 :                     loc_1B1C0:
   34746/   1AF88 : 2002                		move.l	d2,d0
   34747/   1AF8A : E080                		asr.l	#8,d0
   34748/   1AF8C : 32C0                		move.w	d0,(a1)+
   34749/   1AF8E : 2001                		move.l	d1,d0
   34750/   1AF90 : E080                		asr.l	#8,d0
   34751/   1AF92 : 32C0                		move.w	d0,(a1)+
   34752/   1AF94 : D485                		add.l	d5,d2
   34753/   1AF96 : D284                		add.l	d4,d1
   34754/   1AF98 : 51CE FFEE           		dbf	d6,loc_1B1C0
   34755/   1AF9C :                     
   34756/   1AF9C : 4C9F 0007           		movem.w	(sp)+,d0-d2
   34757/   1AFA0 : 0643 0018           		addi.w	#$18,d3
   34758/   1AFA4 : 51CF FFC0           		dbf	d7,loc_1B19E
   34759/   1AFA8 :                     
   34760/   1AFA8 : 3A1F                		move.w	(sp)+,d5
   34761/   1AFAA : 41F9 00FF 0000      		lea	($FF0000).l,a0
   34762/   1AFB0 : 7000                		moveq	#0,d0
   34763/   1AFB2 : 3038 F704           		move.w	($FFFFF704).w,d0
   34764/   1AFB6 : 80FC 0018           		divu.w	#$18,d0
   34765/   1AFBA : C0FC 0080           		mulu.w	#$80,d0
   34766/   1AFBE : D1C0                		adda.l	d0,a0
   34767/   1AFC0 : 7000                		moveq	#0,d0
   34768/   1AFC2 : 3038 F700           		move.w	($FFFFF700).w,d0
   34769/   1AFC6 : 80FC 0018           		divu.w	#$18,d0
   34770/   1AFCA : D0C0                		adda.w	d0,a0
   34771/   1AFCC : 49F8 8000           		lea	($FFFF8000).w,a4
   34772/   1AFD0 : 3E3C 000F           		move.w	#$F,d7
   34773/   1AFD4 :                     
   34774/   1AFD4 :                     loc_1B20C:
   34775/   1AFD4 : 3C3C 000F           		move.w	#$F,d6
   34776/   1AFD8 :                     
   34777/   1AFD8 :                     loc_1B210:
   34778/   1AFD8 : 7000                		moveq	#0,d0
   34779/   1AFDA : 1018                		move.b	(a0)+,d0
   34780/   1AFDC : 6752                		beq.s	loc_1B268
   34781/   1AFDE : 0C00 004E           		cmpi.b	#$4E,d0
   34782/   1AFE2 : 624C                		bhi.s	loc_1B268
   34783/   1AFE4 : 3614                		move.w	(a4),d3
   34784/   1AFE6 : 0643 0120           		addi.w	#$120,d3
   34785/   1AFEA : 0C43 0070           		cmpi.w	#$70,d3
   34786/   1AFEE : 6540                		bcs.s	loc_1B268
   34787/   1AFF0 : 0C43 01D0           		cmpi.w	#$1D0,d3
   34788/   1AFF4 : 643A                		bcc.s	loc_1B268
   34789/   1AFF6 : 342C 0002           		move.w	2(a4),d2
   34790/   1AFFA : 0642 00F0           		addi.w	#$F0,d2
   34791/   1AFFE : 0C42 0070           		cmpi.w	#$70,d2
   34792/   1B002 : 652C                		bcs.s	loc_1B268
   34793/   1B004 : 0C42 0170           		cmpi.w	#$170,d2
   34794/   1B008 : 6426                		bcc.s	loc_1B268
   34795/   1B00A : 4BF9 00FF 4000      		lea	($FF4000).l,a5
   34796/   1B010 : E748                		lsl.w	#3,d0
   34797/   1B012 : 4BF5 0000           		lea	(a5,d0.w),a5
   34798/   1B016 : 225D                		movea.l	(a5)+,a1
   34799/   1B018 : 321D                		move.w	(a5)+,d1
   34800/   1B01A : D241                		add.w	d1,d1
   34801/   1B01C : D2F1 1000           		adda.w	(a1,d1.w),a1
   34802/   1B020 : 365D                		movea.w	(a5)+,a3
   34803/   1B022 : 7200                		moveq	#0,d1
   34804/   1B024 : 1219                		move.b	(a1)+,d1
   34805/   1B026 : 5301                		subq.b	#1,d1
   34806/   1B028 : 6B06                		bmi.s	loc_1B268
   34807/   1B02A : 4EB9 0000 D530      		jsr	sub_D762
   34808/   1B030 :                     
   34809/   1B030 :                     loc_1B268:
   34810/   1B030 : 584C                		addq.w	#4,a4
   34811/   1B032 : 51CE FFA4           		dbf	d6,loc_1B210
   34812/   1B036 :                     
   34813/   1B036 : 41E8 0070           		lea	$70(a0),a0
   34814/   1B03A : 51CF FF98           		dbf	d7,loc_1B20C
   34815/   1B03E :                     
   34816/   1B03E : 11C5 F62C           		move.b	d5,($FFFFF62C).w
   34817/   1B042 : 0C05 0050           		cmpi.b	#$50,d5
   34818/   1B046 : 6708                		beq.s	loc_1B288
   34819/   1B048 : 24BC 0000 0000      		move.l	#0,(a2)
   34820/   1B04E : 4E75                		rts	
   34821/   1B050 :                     ; ===========================================================================
   34822/   1B050 :                     
   34823/   1B050 :                     loc_1B288:
   34824/   1B050 : 157C 0000 FFFB      		move.b	#0,-5(a2)
   34825/   1B056 : 4E75                		rts	
   34826/   1B058 :                     ; End of function SS_ShowLayout
   34827/   1B058 :                     
   34828/   1B058 :                     ; ---------------------------------------------------------------------------
   34829/   1B058 :                     ; Subroutine to	animate	walls and rings	in the special stage
   34830/   1B058 :                     ; ---------------------------------------------------------------------------
   34831/   1B058 :                     
   34832/   1B058 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   34833/   1B058 :                     
   34834/   1B058 :                     
   34835/   1B058 :                     SS_AniWallsRings:			; XREF: SS_ShowLayout
   34836/   1B058 : 43F9 00FF 400C      		lea	($FF400C).l,a1
   34837/   1B05E : 7000                		moveq	#0,d0
   34838/   1B060 : 1038 F780           		move.b	($FFFFF780).w,d0
   34839/   1B064 : E408                		lsr.b	#2,d0
   34840/   1B066 : 0240 000F           		andi.w	#$F,d0
   34841/   1B06A : 7223                		moveq	#$23,d1
   34842/   1B06C :                     
   34843/   1B06C :                     loc_1B2A4:
   34844/   1B06C : 3280                		move.w	d0,(a1)
   34845/   1B06E : 5049                		addq.w	#8,a1
   34846/   1B070 : 51C9 FFFA           		dbf	d1,loc_1B2A4
   34847/   1B074 :                     
   34848/   1B074 : 43F9 00FF 4005      		lea	($FF4005).l,a1
   34849/   1B07A : 5338 FEC2           		subq.b	#1,($FFFFFEC2).w
   34850/   1B07E : 6A10                		bpl.s	loc_1B2C8
   34851/   1B080 : 11FC 0007 FEC2      		move.b	#7,($FFFFFEC2).w
   34852/   1B086 : 5238 FEC3           		addq.b	#1,($FFFFFEC3).w
   34853/   1B08A : 0238 0003 FEC3      		andi.b	#3,($FFFFFEC3).w
   34854/   1B090 :                     
   34855/   1B090 :                     loc_1B2C8:
   34856/   1B090 : 1378 FEC3 01D0      		move.b	($FFFFFEC3).w,$1D0(a1)
   34857/   1B096 : 5338 FEC4           		subq.b	#1,($FFFFFEC4).w
   34858/   1B09A : 6A10                		bpl.s	loc_1B2E4
   34859/   1B09C : 11FC 0007 FEC4      		move.b	#7,($FFFFFEC4).w
   34860/   1B0A2 : 5238 FEC5           		addq.b	#1,($FFFFFEC5).w
   34861/   1B0A6 : 0238 0001 FEC5      		andi.b	#1,($FFFFFEC5).w
   34862/   1B0AC :                     
   34863/   1B0AC :                     loc_1B2E4:
   34864/   1B0AC : 1038 FEC5           		move.b	($FFFFFEC5).w,d0
   34865/   1B0B0 : 1340 0138           		move.b	d0,$138(a1)
   34866/   1B0B4 : 1340 0160           		move.b	d0,$160(a1)
   34867/   1B0B8 : 1340 0148           		move.b	d0,$148(a1)
   34868/   1B0BC : 1340 0150           		move.b	d0,$150(a1)
   34869/   1B0C0 : 1340 01D8           		move.b	d0,$1D8(a1)
   34870/   1B0C4 : 1340 01E0           		move.b	d0,$1E0(a1)
   34871/   1B0C8 : 1340 01E8           		move.b	d0,$1E8(a1)
   34872/   1B0CC : 1340 01F0           		move.b	d0,$1F0(a1)
   34873/   1B0D0 : 1340 01F8           		move.b	d0,$1F8(a1)
   34874/   1B0D4 : 1340 0200           		move.b	d0,$200(a1)
   34875/   1B0D8 : 5338 FEC6           		subq.b	#1,($FFFFFEC6).w
   34876/   1B0DC : 6A10                		bpl.s	loc_1B326
   34877/   1B0DE : 11FC 0004 FEC6      		move.b	#4,($FFFFFEC6).w
   34878/   1B0E4 : 5238 FEC7           		addq.b	#1,($FFFFFEC7).w
   34879/   1B0E8 : 0238 0003 FEC7      		andi.b	#3,($FFFFFEC7).w
   34880/   1B0EE :                     
   34881/   1B0EE :                     loc_1B326:
   34882/   1B0EE : 1038 FEC7           		move.b	($FFFFFEC7).w,d0
   34883/   1B0F2 : 1340 0168           		move.b	d0,$168(a1)
   34884/   1B0F6 : 1340 0170           		move.b	d0,$170(a1)
   34885/   1B0FA : 1340 0178           		move.b	d0,$178(a1)
   34886/   1B0FE : 1340 0180           		move.b	d0,$180(a1)
   34887/   1B102 : 5338 FEC0           		subq.b	#1,($FFFFFEC0).w
   34888/   1B106 : 6A10                		bpl.s	loc_1B350
   34889/   1B108 : 11FC 0007 FEC0      		move.b	#7,($FFFFFEC0).w
   34890/   1B10E : 5338 FEC1           		subq.b	#1,($FFFFFEC1).w
   34891/   1B112 : 0238 0007 FEC1      		andi.b	#7,($FFFFFEC1).w
   34892/   1B118 :                     
   34893/   1B118 :                     loc_1B350:
   34894/   1B118 : 43F9 00FF 4016      		lea	($FF4016).l,a1
   34895/   1B11E : 41F9 0001 B202      		lea	(SS_WaRiVramSet).l,a0
   34896/   1B124 : 7000                		moveq	#0,d0
   34897/   1B126 : 1038 FEC1           		move.b	($FFFFFEC1).w,d0
   34898/   1B12A : D040                		add.w	d0,d0
   34899/   1B12C : 41F0 0000           		lea	(a0,d0.w),a0
   34900/   1B130 : 3290                		move.w	(a0),(a1)
   34901/   1B132 : 3368 0002 0008      		move.w	2(a0),8(a1)
   34902/   1B138 : 3368 0004 0010      		move.w	4(a0),$10(a1)
   34903/   1B13E : 3368 0006 0018      		move.w	6(a0),$18(a1)
   34904/   1B144 : 3368 0008 0020      		move.w	8(a0),$20(a1)
   34905/   1B14A : 3368 000A 0028      		move.w	$A(a0),$28(a1)
   34906/   1B150 : 3368 000C 0030      		move.w	$C(a0),$30(a1)
   34907/   1B156 : 3368 000E 0038      		move.w	$E(a0),$38(a1)
   34908/   1B15C : D0FC 0020           		adda.w	#$20,a0
   34909/   1B160 : D2FC 0048           		adda.w	#$48,a1
   34910/   1B164 : 3290                		move.w	(a0),(a1)
   34911/   1B166 : 3368 0002 0008      		move.w	2(a0),8(a1)
   34912/   1B16C : 3368 0004 0010      		move.w	4(a0),$10(a1)
   34913/   1B172 : 3368 0006 0018      		move.w	6(a0),$18(a1)
   34914/   1B178 : 3368 0008 0020      		move.w	8(a0),$20(a1)
   34915/   1B17E : 3368 000A 0028      		move.w	$A(a0),$28(a1)
   34916/   1B184 : 3368 000C 0030      		move.w	$C(a0),$30(a1)
   34917/   1B18A : 3368 000E 0038      		move.w	$E(a0),$38(a1)
   34918/   1B190 : D0FC 0020           		adda.w	#$20,a0
   34919/   1B194 : D2FC 0048           		adda.w	#$48,a1
   34920/   1B198 : 3290                		move.w	(a0),(a1)
   34921/   1B19A : 3368 0002 0008      		move.w	2(a0),8(a1)
   34922/   1B1A0 : 3368 0004 0010      		move.w	4(a0),$10(a1)
   34923/   1B1A6 : 3368 0006 0018      		move.w	6(a0),$18(a1)
   34924/   1B1AC : 3368 0008 0020      		move.w	8(a0),$20(a1)
   34925/   1B1B2 : 3368 000A 0028      		move.w	$A(a0),$28(a1)
   34926/   1B1B8 : 3368 000C 0030      		move.w	$C(a0),$30(a1)
   34927/   1B1BE : 3368 000E 0038      		move.w	$E(a0),$38(a1)
   34928/   1B1C4 : D0FC 0020           		adda.w	#$20,a0
   34929/   1B1C8 : D2FC 0048           		adda.w	#$48,a1
   34930/   1B1CC : 3290                		move.w	(a0),(a1)
   34931/   1B1CE : 3368 0002 0008      		move.w	2(a0),8(a1)
   34932/   1B1D4 : 3368 0004 0010      		move.w	4(a0),$10(a1)
   34933/   1B1DA : 3368 0006 0018      		move.w	6(a0),$18(a1)
   34934/   1B1E0 : 3368 0008 0020      		move.w	8(a0),$20(a1)
   34935/   1B1E6 : 3368 000A 0028      		move.w	$A(a0),$28(a1)
   34936/   1B1EC : 3368 000C 0030      		move.w	$C(a0),$30(a1)
   34937/   1B1F2 : 3368 000E 0038      		move.w	$E(a0),$38(a1)
   34938/   1B1F8 : D0FC 0020           		adda.w	#$20,a0
   34939/   1B1FC : D2FC 0048           		adda.w	#$48,a1
   34940/   1B200 : 4E75                		rts	
   34941/   1B202 :                     ; End of function SS_AniWallsRings
   34942/   1B202 :                     
   34943/   1B202 :                     ; ===========================================================================
   34944/   1B202 : 0142 6142 0142      SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
            1B208 : 0142 0142 0142 
            1B20E : 0142 6142          
   34945/   1B212 : 0142 6142 0142      		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
            1B218 : 0142 0142 0142 
            1B21E : 0142 6142          
   34946/   1B222 : 2142 0142 2142      		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
            1B228 : 2142 2142 2142 
            1B22E : 2142 0142          
   34947/   1B232 : 2142 0142 2142      		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
            1B238 : 2142 2142 2142 
            1B23E : 2142 0142          
   34948/   1B242 : 4142 2142 4142      		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
            1B248 : 4142 4142 4142 
            1B24E : 4142 2142          
   34949/   1B252 : 4142 2142 4142      		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
            1B258 : 4142 4142 4142 
            1B25E : 4142 2142          
   34950/   1B262 : 6142 4142 6142      		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
            1B268 : 6142 6142 6142 
            1B26E : 6142 4142          
   34951/   1B272 : 6142 4142 6142      		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
            1B278 : 6142 6142 6142 
            1B27E : 6142 4142          
   34952/   1B282 :                     ; ---------------------------------------------------------------------------
   34953/   1B282 :                     ; Subroutine to	remove items when you collect them in the special stage
   34954/   1B282 :                     ; ---------------------------------------------------------------------------
   34955/   1B282 :                     
   34956/   1B282 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   34957/   1B282 :                     
   34958/   1B282 :                     
   34959/   1B282 :                     SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
   34960/   1B282 : 45F9 00FF 4400      		lea	($FF4400).l,a2
   34961/   1B288 : 303C 001F           		move.w	#$1F,d0
   34962/   1B28C :                     
   34963/   1B28C :                     loc_1B4C4:
   34964/   1B28C : 4A12                		tst.b	(a2)
   34965/   1B28E : 6706                		beq.s	locret_1B4CE
   34966/   1B290 : 504A                		addq.w	#8,a2
   34967/   1B292 : 51C8 FFF8           		dbf	d0,loc_1B4C4
   34968/   1B296 :                     
   34969/   1B296 :                     locret_1B4CE:
   34970/   1B296 : 4E75                		rts	
   34971/   1B298 :                     ; End of function SS_RemoveCollectedItem
   34972/   1B298 :                     
   34973/   1B298 :                     ; ---------------------------------------------------------------------------
   34974/   1B298 :                     ; Subroutine to	animate	special	stage items when you touch them
   34975/   1B298 :                     ; ---------------------------------------------------------------------------
   34976/   1B298 :                     
   34977/   1B298 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   34978/   1B298 :                     
   34979/   1B298 :                     
   34980/   1B298 :                     SS_AniItems:				; XREF: SS_ShowLayout
   34981/   1B298 : 41F9 00FF 4400      		lea	($FF4400).l,a0
   34982/   1B29E : 3E3C 001F           		move.w	#$1F,d7
   34983/   1B2A2 :                     
   34984/   1B2A2 :                     loc_1B4DA:
   34985/   1B2A2 : 7000                		moveq	#0,d0
   34986/   1B2A4 : 1010                		move.b	(a0),d0
   34987/   1B2A6 : 6708                		beq.s	loc_1B4E8
   34988/   1B2A8 : E548                		lsl.w	#2,d0
   34989/   1B2AA : 227B 0008           		movea.l	SS_AniIndex-4(pc,d0.w),a1
   34990/   1B2AE : 4E91                		jsr	(a1)
   34991/   1B2B0 :                     
   34992/   1B2B0 :                     loc_1B4E8:
   34993/   1B2B0 : 5048                		addq.w	#8,a0
   34994/   1B2B2 :                     
   34995/   1B2B2 :                     loc_1B4EA:
   34996/   1B2B2 : 51CF FFEE           		dbf	d7,loc_1B4DA
   34997/   1B2B6 :                     
   34998/   1B2B6 : 4E75                		rts	
   34999/   1B2B8 :                     ; End of function SS_AniItems
   35000/   1B2B8 :                     
   35001/   1B2B8 :                     ; ===========================================================================
   35002/   1B2B8 : 0001 B2D0           SS_AniIndex:	dc.l SS_AniRingSparks
   35003/   1B2BC : 0001 B300           		dc.l SS_AniBumper
   35004/   1B2C0 : 0001 B336           		dc.l SS_Ani1Up
   35005/   1B2C4 : 0001 B366           		dc.l SS_AniReverse
   35006/   1B2C8 : 0001 B39C           		dc.l SS_AniEmeraldSparks
   35007/   1B2CC : 0001 B3DC           		dc.l SS_AniGlassBlock
   35008/   1B2D0 :                     ; ===========================================================================
   35009/   1B2D0 :                     
   35010/   1B2D0 :                     SS_AniRingSparks:			; XREF: SS_AniIndex
   35011/   1B2D0 : 5328 0002           		subq.b	#1,2(a0)
   35012/   1B2D4 : 6A22                		bpl.s	locret_1B530
   35013/   1B2D6 : 117C 0005 0002      		move.b	#5,2(a0)
   35014/   1B2DC : 7000                		moveq	#0,d0
   35015/   1B2DE : 1028 0003           		move.b	3(a0),d0
   35016/   1B2E2 : 5228 0003           		addq.b	#1,3(a0)
   35017/   1B2E6 : 2268 0004           		movea.l	4(a0),a1
   35018/   1B2EA : 103B 000E           		move.b	SS_AniRingData(pc,d0.w),d0
   35019/   1B2EE : 1280                		move.b	d0,(a1)
   35020/   1B2F0 : 6606                		bne.s	locret_1B530
   35021/   1B2F2 : 4290                		clr.l	(a0)
   35022/   1B2F4 : 42A8 0004           		clr.l	4(a0)
   35023/   1B2F8 :                     
   35024/   1B2F8 :                     locret_1B530:
   35025/   1B2F8 : 4E75                		rts	
   35026/   1B2FA :                     ; ===========================================================================
   35027/   1B2FA : 4243 4445 0000      SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
   35028/   1B300 :                     ; ===========================================================================
   35029/   1B300 :                     
   35030/   1B300 :                     SS_AniBumper:				; XREF: SS_AniIndex
   35031/   1B300 : 5328 0002           		subq.b	#1,2(a0)
   35032/   1B304 : 6A28                		bpl.s	locret_1B566
   35033/   1B306 : 117C 0007 0002      		move.b	#7,2(a0)
   35034/   1B30C : 7000                		moveq	#0,d0
   35035/   1B30E : 1028 0003           		move.b	3(a0),d0
   35036/   1B312 : 5228 0003           		addq.b	#1,3(a0)
   35037/   1B316 : 2268 0004           		movea.l	4(a0),a1
   35038/   1B31A : 103B 0014           		move.b	SS_AniBumpData(pc,d0.w),d0
   35039/   1B31E : 660C                		bne.s	loc_1B564
   35040/   1B320 : 4290                		clr.l	(a0)
   35041/   1B322 : 42A8 0004           		clr.l	4(a0)
   35042/   1B326 : 12BC 0025           		move.b	#$25,(a1)
   35043/   1B32A : 4E75                		rts	
   35044/   1B32C :                     ; ===========================================================================
   35045/   1B32C :                     
   35046/   1B32C :                     loc_1B564:
   35047/   1B32C : 1280                		move.b	d0,(a1)
   35048/   1B32E :                     
   35049/   1B32E :                     locret_1B566:
   35050/   1B32E : 4E75                		rts	
   35051/   1B330 :                     ; ===========================================================================
   35052/   1B330 : 3233 3233 0000      SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
   35053/   1B336 :                     ; ===========================================================================
   35054/   1B336 :                     
   35055/   1B336 :                     SS_Ani1Up:				; XREF: SS_AniIndex
   35056/   1B336 : 5328 0002           		subq.b	#1,2(a0)
   35057/   1B33A : 6A22                		bpl.s	locret_1B596
   35058/   1B33C : 117C 0005 0002      		move.b	#5,2(a0)
   35059/   1B342 : 7000                		moveq	#0,d0
   35060/   1B344 : 1028 0003           		move.b	3(a0),d0
   35061/   1B348 : 5228 0003           		addq.b	#1,3(a0)
   35062/   1B34C : 2268 0004           		movea.l	4(a0),a1
   35063/   1B350 : 103B 000E           		move.b	SS_Ani1UpData(pc,d0.w),d0
   35064/   1B354 : 1280                		move.b	d0,(a1)
   35065/   1B356 : 6606                		bne.s	locret_1B596
   35066/   1B358 : 4290                		clr.l	(a0)
   35067/   1B35A : 42A8 0004           		clr.l	4(a0)
   35068/   1B35E :                     
   35069/   1B35E :                     locret_1B596:
   35070/   1B35E : 4E75                		rts	
   35071/   1B360 :                     ; ===========================================================================
   35072/   1B360 : 4647 4849 0000      SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
   35073/   1B366 :                     ; ===========================================================================
   35074/   1B366 :                     
   35075/   1B366 :                     SS_AniReverse:				; XREF: SS_AniIndex
   35076/   1B366 : 5328 0002           		subq.b	#1,2(a0)
   35077/   1B36A : 6A28                		bpl.s	locret_1B5CC
   35078/   1B36C : 117C 0007 0002      		move.b	#7,2(a0)
   35079/   1B372 : 7000                		moveq	#0,d0
   35080/   1B374 : 1028 0003           		move.b	3(a0),d0
   35081/   1B378 : 5228 0003           		addq.b	#1,3(a0)
   35082/   1B37C : 2268 0004           		movea.l	4(a0),a1
   35083/   1B380 : 103B 0014           		move.b	SS_AniRevData(pc,d0.w),d0
   35084/   1B384 : 660C                		bne.s	loc_1B5CA
   35085/   1B386 : 4290                		clr.l	(a0)
   35086/   1B388 : 42A8 0004           		clr.l	4(a0)
   35087/   1B38C : 12BC 002B           		move.b	#$2B,(a1)
   35088/   1B390 : 4E75                		rts	
   35089/   1B392 :                     ; ===========================================================================
   35090/   1B392 :                     
   35091/   1B392 :                     loc_1B5CA:
   35092/   1B392 : 1280                		move.b	d0,(a1)
   35093/   1B394 :                     
   35094/   1B394 :                     locret_1B5CC:
   35095/   1B394 : 4E75                		rts	
   35096/   1B396 :                     ; ===========================================================================
   35097/   1B396 : 2B31 2B31 0000      SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
   35098/   1B39C :                     ; ===========================================================================
   35099/   1B39C :                     
   35100/   1B39C :                     SS_AniEmeraldSparks:			; XREF: SS_AniIndex
   35101/   1B39C : 5328 0002           		subq.b	#1,2(a0)
   35102/   1B3A0 : 6A32                		bpl.s	locret_1B60C
   35103/   1B3A2 : 117C 0005 0002      		move.b	#5,2(a0)
   35104/   1B3A8 : 7000                		moveq	#0,d0
   35105/   1B3AA : 1028 0003           		move.b	3(a0),d0
   35106/   1B3AE : 5228 0003           		addq.b	#1,3(a0)
   35107/   1B3B2 : 2268 0004           		movea.l	4(a0),a1
   35108/   1B3B6 : 103B 001E           		move.b	SS_AniEmerData(pc,d0.w),d0
   35109/   1B3BA : 1280                		move.b	d0,(a1)
   35110/   1B3BC : 6616                		bne.s	locret_1B60C
   35111/   1B3BE : 4290                		clr.l	(a0)
   35112/   1B3C0 : 42A8 0004           		clr.l	4(a0)
   35113/   1B3C4 : 11FC 0004 D024      		move.b	#4,($FFFFD024).w
   35114/   1B3CA : 303C 00A8           		move.w	#$A8,d0
   35115/   1B3CE : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
   35116/   1B3D4 :                     
   35117/   1B3D4 :                     locret_1B60C:
   35118/   1B3D4 : 4E75                		rts	
   35119/   1B3D6 :                     ; ===========================================================================
   35120/   1B3D6 : 4647 4849 0000      SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
   35121/   1B3DC :                     ; ===========================================================================
   35122/   1B3DC :                     
   35123/   1B3DC :                     SS_AniGlassBlock:			; XREF: SS_AniIndex
   35124/   1B3DC : 5328 0002           		subq.b	#1,2(a0)
   35125/   1B3E0 : 6A26                		bpl.s	locret_1B640
   35126/   1B3E2 : 117C 0001 0002      		move.b	#1,2(a0)
   35127/   1B3E8 : 7000                		moveq	#0,d0
   35128/   1B3EA : 1028 0003           		move.b	3(a0),d0
   35129/   1B3EE : 5228 0003           		addq.b	#1,3(a0)
   35130/   1B3F2 : 2268 0004           		movea.l	4(a0),a1
   35131/   1B3F6 : 103B 0012           		move.b	SS_AniGlassData(pc,d0.w),d0
   35132/   1B3FA : 1280                		move.b	d0,(a1)
   35133/   1B3FC : 660A                		bne.s	locret_1B640
   35134/   1B3FE : 12A8 0004           		move.b	4(a0),(a1)
   35135/   1B402 : 4290                		clr.l	(a0)
   35136/   1B404 : 42A8 0004           		clr.l	4(a0)
   35137/   1B408 :                     
   35138/   1B408 :                     locret_1B640:
   35139/   1B408 : 4E75                		rts	
   35140/   1B40A :                     ; ===========================================================================
   35141/   1B40A : 4B4C 4D4E 4B4C      SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
            1B410 : 4D4E 0000          
   35142/   1B414 :                     ; ---------------------------------------------------------------------------
   35143/   1B414 :                     ; Special stage	layout pointers
   35144/   1B414 :                     ; ---------------------------------------------------------------------------
   35145/   1B414 :                     SS_LayoutIndex:
   35146/   1B414 :                     	include "_includes-ASM/Special stage layout pointers.asm"
(1)    1/   1B414 :                     ; ---------------------------------------------------------------------------
(1)    2/   1B414 :                     ; Special stage	layout pointers
(1)    3/   1B414 :                     ; ---------------------------------------------------------------------------
(1)    4/   1B414 : 0006 7592           	dc.l SS_1
(1)    5/   1B418 : 0006 780C           	dc.l SS_2
(1)    6/   1B41C : 0006 7C1E           	dc.l SS_3
(1)    7/   1B420 : 0006 7F7A           	dc.l SS_4
(1)    8/   1B424 : 0006 8454           	dc.l SS_5
(1)    9/   1B428 : 0006 8926           	dc.l SS_6
(1)   10/   1B42C : (MACRO)              	even
   35147/   1B42C :                     
   35148/   1B42C :                     ; ---------------------------------------------------------------------------
   35149/   1B42C :                     ; Special stage	start locations
   35150/   1B42C :                     ; ---------------------------------------------------------------------------
   35151/   1B42C :                     SS_StartLoc:	binclude	"_misc/sloc_ss.bin"
   35152/   1B444 : (MACRO)              		even
   35153/   1B444 :                     
   35154/   1B444 :                     ; ---------------------------------------------------------------------------
   35155/   1B444 :                     ; Subroutine to	load special stage layout
   35156/   1B444 :                     ; ---------------------------------------------------------------------------
   35157/   1B444 :                     
   35158/   1B444 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   35159/   1B444 :                     
   35160/   1B444 :                     
   35161/   1B444 :                     SS_Load:				; XREF: SpecialStage
   35162/   1B444 : 7000                		moveq	#0,d0
   35163/   1B446 : 1038 FE16           		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
   35164/   1B44A : 5238 FE16           		addq.b	#1,($FFFFFE16).w
   35165/   1B44E : 0C38 0006 FE16      		cmpi.b	#6,($FFFFFE16).w
   35166/   1B454 : 6506                		bcs.s	SS_ChkEmldNum
   35167/   1B456 : 11FC 0000 FE16      		move.b	#0,($FFFFFE16).w ; reset if higher than	6
   35168/   1B45C :                     
   35169/   1B45C :                     SS_ChkEmldNum:
   35170/   1B45C : 0C38 0006 FE57      		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
   35171/   1B462 : 671A                		beq.s	SS_LoadData	; if yes, branch
   35172/   1B464 : 7200                		moveq	#0,d1
   35173/   1B466 : 1238 FE57           		move.b	($FFFFFE57).w,d1
   35174/   1B46A : 5301                		subq.b	#1,d1
   35175/   1B46C : 6510                		bcs.s	SS_LoadData
   35176/   1B46E : 47F8 FE58           		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
   35177/   1B472 :                     
   35178/   1B472 :                     SS_ChkEmldLoop:	
   35179/   1B472 : B033 1000           		cmp.b	(a3,d1.w),d0
   35180/   1B476 : 6602                		bne.s	SS_ChkEmldRepeat
   35181/   1B478 : 60CA                		bra.s	SS_Load
   35182/   1B47A :                     ; ===========================================================================
   35183/   1B47A :                     
   35184/   1B47A :                     SS_ChkEmldRepeat:
   35185/   1B47A : 51C9 FFF6           		dbf	d1,SS_ChkEmldLoop
   35186/   1B47E :                     
   35187/   1B47E :                     SS_LoadData:
   35188/   1B47E : E548                		lsl.w	#2,d0
   35189/   1B480 : 43FB 00AA           		lea	SS_StartLoc(pc,d0.w),a1
   35190/   1B484 : 31D9 D008           		move.w	(a1)+,($FFFFD008).w
   35191/   1B488 : 31D9 D00C           		move.w	(a1)+,($FFFFD00C).w
   35192/   1B48C : 207B 0086           		movea.l	SS_LayoutIndex(pc,d0.w),a0
   35193/   1B490 : 43F9 00FF 4000      		lea	($FF4000).l,a1
   35194/   1B496 : 303C 0000           		move.w	#0,d0
   35195/   1B49A : 4EB9 0000 1504      		jsr	(EniDec).l
   35196/   1B4A0 : 43F9 00FF 0000      		lea	($FF0000).l,a1
   35197/   1B4A6 : 303C 0FFF           		move.w	#$FFF,d0
   35198/   1B4AA :                     
   35199/   1B4AA :                     SS_ClrRAM3:
   35200/   1B4AA : 4299                		clr.l	(a1)+
   35201/   1B4AC : 51C8 FFFC           		dbf	d0,SS_ClrRAM3
   35202/   1B4B0 :                     
   35203/   1B4B0 : 43F9 00FF 1020      		lea	($FF1020).l,a1
   35204/   1B4B6 : 41F9 00FF 4000      		lea	($FF4000).l,a0
   35205/   1B4BC : 723F                		moveq	#$3F,d1
   35206/   1B4BE :                     
   35207/   1B4BE :                     loc_1B6F6:
   35208/   1B4BE : 743F                		moveq	#$3F,d2
   35209/   1B4C0 :                     
   35210/   1B4C0 :                     loc_1B6F8:
   35211/   1B4C0 : 12D8                		move.b	(a0)+,(a1)+
   35212/   1B4C2 : 51CA FFFC           		dbf	d2,loc_1B6F8
   35213/   1B4C6 :                     
   35214/   1B4C6 : 43E9 0040           		lea	$40(a1),a1
   35215/   1B4CA : 51C9 FFF2           		dbf	d1,loc_1B6F6
   35216/   1B4CE :                     
   35217/   1B4CE : 43F9 00FF 4008      		lea	($FF4008).l,a1
   35218/   1B4D4 : 41F9 0001 B500      		lea	(SS_MapIndex).l,a0
   35219/   1B4DA : 724D                		moveq	#$4D,d1
   35220/   1B4DC :                     
   35221/   1B4DC :                     loc_1B714:
   35222/   1B4DC : 22D8                		move.l	(a0)+,(a1)+
   35223/   1B4DE : 32FC 0000           		move.w	#0,(a1)+
   35224/   1B4E2 : 1368 FFFC FFFF      		move.b	-4(a0),-1(a1)
   35225/   1B4E8 : 32D8                		move.w	(a0)+,(a1)+
   35226/   1B4EA : 51C9 FFF0           		dbf	d1,loc_1B714
   35227/   1B4EE :                     
   35228/   1B4EE : 43F9 00FF 4400      		lea	($FF4400).l,a1
   35229/   1B4F4 : 323C 003F           		move.w	#$3F,d1
   35230/   1B4F8 :                     
   35231/   1B4F8 :                     loc_1B730:
   35232/   1B4F8 :                     
   35233/   1B4F8 : 4299                		clr.l	(a1)+
   35234/   1B4FA : 51C9 FFFC           		dbf	d1,loc_1B730
   35235/   1B4FE :                     
   35236/   1B4FE : 4E75                		rts	
   35237/   1B500 :                     ; End of function SS_Load
   35238/   1B500 :                     
   35239/   1B500 :                     ; ===========================================================================
   35240/   1B500 :                     ; ---------------------------------------------------------------------------
   35241/   1B500 :                     ; Special stage	mappings and VRAM pointers
   35242/   1B500 :                     ; ---------------------------------------------------------------------------
   35243/   1B500 :                     SS_MapIndex:
   35244/   1B500 :                     	include "_includes-ASM/Special stage mappings and VRAM pointers.asm"
(1)    1/   1B500 :                     ; ---------------------------------------------------------------------------
(1)    2/   1B500 :                     ; Special stage	mappings and VRAM pointers
(1)    3/   1B500 :                     ; ---------------------------------------------------------------------------
(1)    4/   1B500 : 0002 C4CA           	dc.l Map_SSWalls	; address of mappings
(1)    5/   1B504 : 0142                	dc.w $142		; VRAM setting
(1)    6/   1B506 : 0002 C4CA           	dc.l Map_SSWalls
(1)    7/   1B50A : 0142                	dc.w $142
(1)    8/   1B50C : 0002 C4CA           	dc.l Map_SSWalls
(1)    9/   1B510 : 0142                	dc.w $142
(1)   10/   1B512 : 0002 C4CA           	dc.l Map_SSWalls
(1)   11/   1B516 : 0142                	dc.w $142
(1)   12/   1B518 : 0002 C4CA           	dc.l Map_SSWalls
(1)   13/   1B51C : 0142                	dc.w $142
(1)   14/   1B51E : 0002 C4CA           	dc.l Map_SSWalls
(1)   15/   1B522 : 0142                	dc.w $142
(1)   16/   1B524 : 0002 C4CA           	dc.l Map_SSWalls
(1)   17/   1B528 : 0142                	dc.w $142
(1)   18/   1B52A : 0002 C4CA           	dc.l Map_SSWalls
(1)   19/   1B52E : 0142                	dc.w $142
(1)   20/   1B530 : 0002 C4CA           	dc.l Map_SSWalls
(1)   21/   1B534 : 0142                	dc.w $142
(1)   22/   1B536 : 0002 C4CA           	dc.l Map_SSWalls
(1)   23/   1B53A : 2142                	dc.w $2142
(1)   24/   1B53C : 0002 C4CA           	dc.l Map_SSWalls
(1)   25/   1B540 : 2142                	dc.w $2142
(1)   26/   1B542 : 0002 C4CA           	dc.l Map_SSWalls
(1)   27/   1B546 : 2142                	dc.w $2142
(1)   28/   1B548 : 0002 C4CA           	dc.l Map_SSWalls
(1)   29/   1B54C : 2142                	dc.w $2142
(1)   30/   1B54E : 0002 C4CA           	dc.l Map_SSWalls
(1)   31/   1B552 : 2142                	dc.w $2142
(1)   32/   1B554 : 0002 C4CA           	dc.l Map_SSWalls
(1)   33/   1B558 : 2142                	dc.w $2142
(1)   34/   1B55A : 0002 C4CA           	dc.l Map_SSWalls
(1)   35/   1B55E : 2142                	dc.w $2142
(1)   36/   1B560 : 0002 C4CA           	dc.l Map_SSWalls
(1)   37/   1B564 : 2142                	dc.w $2142
(1)   38/   1B566 : 0002 C4CA           	dc.l Map_SSWalls
(1)   39/   1B56A : 2142                	dc.w $2142
(1)   40/   1B56C : 0002 C4CA           	dc.l Map_SSWalls
(1)   41/   1B570 : 4142                	dc.w $4142
(1)   42/   1B572 : 0002 C4CA           	dc.l Map_SSWalls
(1)   43/   1B576 : 4142                	dc.w $4142
(1)   44/   1B578 : 0002 C4CA           	dc.l Map_SSWalls
(1)   45/   1B57C : 4142                	dc.w $4142
(1)   46/   1B57E : 0002 C4CA           	dc.l Map_SSWalls
(1)   47/   1B582 : 4142                	dc.w $4142
(1)   48/   1B584 : 0002 C4CA           	dc.l Map_SSWalls
(1)   49/   1B588 : 4142                	dc.w $4142
(1)   50/   1B58A : 0002 C4CA           	dc.l Map_SSWalls
(1)   51/   1B58E : 4142                	dc.w $4142
(1)   52/   1B590 : 0002 C4CA           	dc.l Map_SSWalls
(1)   53/   1B594 : 4142                	dc.w $4142
(1)   54/   1B596 : 0002 C4CA           	dc.l Map_SSWalls
(1)   55/   1B59A : 4142                	dc.w $4142
(1)   56/   1B59C : 0002 C4CA           	dc.l Map_SSWalls
(1)   57/   1B5A0 : 4142                	dc.w $4142
(1)   58/   1B5A2 : 0002 C4CA           	dc.l Map_SSWalls
(1)   59/   1B5A6 : 6142                	dc.w $6142
(1)   60/   1B5A8 : 0002 C4CA           	dc.l Map_SSWalls
(1)   61/   1B5AC : 6142                	dc.w $6142
(1)   62/   1B5AE : 0002 C4CA           	dc.l Map_SSWalls
(1)   63/   1B5B2 : 6142                	dc.w $6142
(1)   64/   1B5B4 : 0002 C4CA           	dc.l Map_SSWalls
(1)   65/   1B5B8 : 6142                	dc.w $6142
(1)   66/   1B5BA : 0002 C4CA           	dc.l Map_SSWalls
(1)   67/   1B5BE : 6142                	dc.w $6142
(1)   68/   1B5C0 : 0002 C4CA           	dc.l Map_SSWalls
(1)   69/   1B5C4 : 6142                	dc.w $6142
(1)   70/   1B5C6 : 0002 C4CA           	dc.l Map_SSWalls
(1)   71/   1B5CA : 6142                	dc.w $6142
(1)   72/   1B5CC : 0002 C4CA           	dc.l Map_SSWalls
(1)   73/   1B5D0 : 6142                	dc.w $6142
(1)   74/   1B5D2 : 0002 C4CA           	dc.l Map_SSWalls
(1)   75/   1B5D6 : 6142                	dc.w $6142
(1)   76/   1B5D8 : 0000 E8C6           	dc.l Map_obj47
(1)   77/   1B5DC : 023B                	dc.w $23B
(1)   78/   1B5DE : 0001 B6D4           	dc.l Map_SS_R
(1)   79/   1B5E2 : 0570                	dc.w $570
(1)   80/   1B5E4 : 0001 B6D4           	dc.l Map_SS_R
(1)   81/   1B5E8 : 0251                	dc.w $251
(1)   82/   1B5EA : 0001 B6D4           	dc.l Map_SS_R
(1)   83/   1B5EE : 0370                	dc.w $370
(1)   84/   1B5F0 : 0001 B708           	dc.l Map_SS_Up
(1)   85/   1B5F4 : 0263                	dc.w $263
(1)   86/   1B5F6 : 0001 B718           	dc.l Map_SS_Down
(1)   87/   1B5FA : 0263                	dc.w $263
(1)   88/   1B5FC : 0001 B6D4           	dc.l Map_SS_R
(1)   89/   1B600 : 22F0                	dc.w $22F0
(1)   90/   1B602 : 0001 B6E8           	dc.l Map_SS_Glass
(1)   91/   1B606 : 0470                	dc.w $470
(1)   92/   1B608 : 0001 B6E8           	dc.l Map_SS_Glass
(1)   93/   1B60C : 05F0                	dc.w $5F0
(1)   94/   1B60E : 0001 B6E8           	dc.l Map_SS_Glass
(1)   95/   1B612 : 65F0                	dc.w $65F0
(1)   96/   1B614 : 0001 B6E8           	dc.l Map_SS_Glass
(1)   97/   1B618 : 25F0                	dc.w $25F0
(1)   98/   1B61A : 0001 B6E8           	dc.l Map_SS_Glass
(1)   99/   1B61E : 45F0                	dc.w $45F0
(1)  100/   1B620 : 0001 B6D4           	dc.l Map_SS_R
(1)  101/   1B624 : 02F0                	dc.w $2F0
(1)  102/   1B626 : 0100 E8C6           	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
(1)  103/   1B62A : 023B                	dc.w $23B
(1)  104/   1B62C : 0200 E8C6           	dc.l Map_obj47+$2000000
(1)  105/   1B630 : 023B                	dc.w $23B
(1)  106/   1B632 : 0001 B6D4           	dc.l Map_SS_R
(1)  107/   1B636 : 0797                	dc.w $797
(1)  108/   1B638 : 0001 B6D4           	dc.l Map_SS_R
(1)  109/   1B63C : 07A0                	dc.w $7A0
(1)  110/   1B63E : 0001 B6D4           	dc.l Map_SS_R
(1)  111/   1B642 : 07A9                	dc.w $7A9
(1)  112/   1B644 : 0001 B6D4           	dc.l Map_SS_R
(1)  113/   1B648 : 0797                	dc.w $797
(1)  114/   1B64A : 0001 B6D4           	dc.l Map_SS_R
(1)  115/   1B64E : 07A0                	dc.w $7A0
(1)  116/   1B650 : 0001 B6D4           	dc.l Map_SS_R
(1)  117/   1B654 : 07A9                	dc.w $7A9
(1)  118/   1B656 : 0000 9D7C           	dc.l Map_obj25
(1)  119/   1B65A : 27B2                	dc.w $27B2
(1)  120/   1B65C : 0001 B730           	dc.l Map_SS_Chaos3
(1)  121/   1B660 : 0770                	dc.w $770
(1)  122/   1B662 : 0001 B730           	dc.l Map_SS_Chaos3
(1)  123/   1B666 : 2770                	dc.w $2770
(1)  124/   1B668 : 0001 B730           	dc.l Map_SS_Chaos3
(1)  125/   1B66C : 4770                	dc.w $4770
(1)  126/   1B66E : 0001 B730           	dc.l Map_SS_Chaos3
(1)  127/   1B672 : 6770                	dc.w $6770
(1)  128/   1B674 : 0001 B728           	dc.l Map_SS_Chaos1
(1)  129/   1B678 : 0770                	dc.w $770
(1)  130/   1B67A : 0001 B72C           	dc.l Map_SS_Chaos2
(1)  131/   1B67E : 0770                	dc.w $770
(1)  132/   1B680 : 0001 B6D4           	dc.l Map_SS_R
(1)  133/   1B684 : 04F0                	dc.w $4F0
(1)  134/   1B686 : 0400 9D7C           	dc.l Map_obj25+$4000000
(1)  135/   1B68A : 27B2                	dc.w $27B2
(1)  136/   1B68C : 0500 9D7C           	dc.l Map_obj25+$5000000
(1)  137/   1B690 : 27B2                	dc.w $27B2
(1)  138/   1B692 : 0600 9D7C           	dc.l Map_obj25+$6000000
(1)  139/   1B696 : 27B2                	dc.w $27B2
(1)  140/   1B698 : 0700 9D7C           	dc.l Map_obj25+$7000000
(1)  141/   1B69C : 27B2                	dc.w $27B2
(1)  142/   1B69E : 0001 B6E8           	dc.l Map_SS_Glass
(1)  143/   1B6A2 : 23F0                	dc.w $23F0
(1)  144/   1B6A4 : 0101 B6E8           	dc.l Map_SS_Glass+$1000000
(1)  145/   1B6A8 : 23F0                	dc.w $23F0
(1)  146/   1B6AA : 0201 B6E8           	dc.l Map_SS_Glass+$2000000
(1)  147/   1B6AE : 23F0                	dc.w $23F0
(1)  148/   1B6B0 : 0301 B6E8           	dc.l Map_SS_Glass+$3000000
(1)  149/   1B6B4 : 23F0                	dc.w $23F0
(1)  150/   1B6B6 : 0201 B6D4           	dc.l Map_SS_R+$2000000
(1)  151/   1B6BA : 04F0                	dc.w $4F0
(1)  152/   1B6BC : 0001 B6E8           	dc.l Map_SS_Glass
(1)  153/   1B6C0 : 05F0                	dc.w $5F0
(1)  154/   1B6C2 : 0001 B6E8           	dc.l Map_SS_Glass
(1)  155/   1B6C6 : 65F0                	dc.w $65F0
(1)  156/   1B6C8 : 0001 B6E8           	dc.l Map_SS_Glass
(1)  157/   1B6CC : 25F0                	dc.w $25F0
(1)  158/   1B6CE : 0001 B6E8           	dc.l Map_SS_Glass
(1)  159/   1B6D2 : 45F0                	dc.w $45F0
   35245/   1B6D4 :                     
   35246/   1B6D4 :                     ; ---------------------------------------------------------------------------
   35247/   1B6D4 :                     ; Sprite mappings - special stage "R" block
   35248/   1B6D4 :                     ; ---------------------------------------------------------------------------
   35249/   1B6D4 :                     Map_SS_R:
   35250/   1B6D4 :                     	include "_mappings/SSRblock.asm"
(1)    1/   1B6D4 :                     ; ---------------------------------------------------------------------------
(1)    2/   1B6D4 :                     ; Sprite mappings - special stage "R" block
(1)    3/   1B6D4 :                     ; ---------------------------------------------------------------------------
(1)    4/   1B6D4 : 0006 000C           		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
(1)    5/   1B6D8 : 0012                		dc.w byte_1B91E-Map_SS_R
(1)    6/   1B6DA : 01                  byte_1B912:	dc.b 1
(1)    7/   1B6DB : F40A 0000 F4        		dc.b $F4, $A, 0, 0, $F4
(1)    8/   1B6E0 : 01                  byte_1B918:	dc.b 1
(1)    9/   1B6E1 : F40A 0009 F4        		dc.b $F4, $A, 0, 9, $F4
(1)   10/   1B6E6 : 00                  byte_1B91E:	dc.b 0
(1)   11/   1B6E7 : (MACRO)              		even
(1)   11/   1B6E7 : 00                                          dc.b 0 ;ds.b 1 
   35251/   1B6E8 :                     
   35252/   1B6E8 :                     ; ---------------------------------------------------------------------------
   35253/   1B6E8 :                     ; Sprite mappings - special stage breakable glass blocks and red-white blocks
   35254/   1B6E8 :                     ; ---------------------------------------------------------------------------
   35255/   1B6E8 :                     Map_SS_Glass:
   35256/   1B6E8 :                     	include "_mappings/SSglassblock.asm"
(1)    1/   1B6E8 :                     ; ---------------------------------------------------------------------------
(1)    2/   1B6E8 :                     ; Sprite mappings - special stage breakable glass blocks and red-white blocks
(1)    3/   1B6E8 :                     ; ---------------------------------------------------------------------------
(1)    4/   1B6E8 : 0008 000E           		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
(1)    5/   1B6EC : 0014 001A           		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
(1)    6/   1B6F0 : 01                  byte_1B928:	dc.b 1
(1)    7/   1B6F1 : F40A 0000 F4        		dc.b $F4, $A, 0, 0, $F4
(1)    8/   1B6F6 : 01                  byte_1B92E:	dc.b 1
(1)    9/   1B6F7 : F40A 0800 F4        		dc.b $F4, $A, 8, 0, $F4
(1)   10/   1B6FC : 01                  byte_1B934:	dc.b 1
(1)   11/   1B6FD : F40A 1800 F4        		dc.b $F4, $A, $18, 0, $F4
(1)   12/   1B702 : 01                  byte_1B93A:	dc.b 1
(1)   13/   1B703 : F40A 1000 F4        		dc.b $F4, $A, $10, 0, $F4
(1)   14/   1B708 : (MACRO)              		even
   35257/   1B708 :                     
   35258/   1B708 :                     ; ---------------------------------------------------------------------------
   35259/   1B708 :                     ; Sprite mappings - special stage "UP" block
   35260/   1B708 :                     ; ---------------------------------------------------------------------------
   35261/   1B708 :                     Map_SS_Up:
   35262/   1B708 :                     	include "_mappings/SSUPblock.asm"
(1)    1/   1B708 :                     ; ---------------------------------------------------------------------------
(1)    2/   1B708 :                     ; Sprite mappings - special stage "UP" block
(1)    3/   1B708 :                     ; ---------------------------------------------------------------------------
(1)    4/   1B708 : 0004                		dc.w byte_1B944-Map_SS_Up
(1)    5/   1B70A : 000A                		dc.w byte_1B94A-Map_SS_Up
(1)    6/   1B70C : 01                  byte_1B944:	dc.b 1
(1)    7/   1B70D : F40A 0000 F4        		dc.b $F4, $A, 0, 0, $F4
(1)    8/   1B712 : 01                  byte_1B94A:	dc.b 1
(1)    9/   1B713 : F40A 0012 F4        		dc.b $F4, $A, 0, $12, $F4
(1)   10/   1B718 : (MACRO)              		even
   35263/   1B718 :                     
   35264/   1B718 :                     ; ---------------------------------------------------------------------------
   35265/   1B718 :                     ; Sprite mappings - special stage "DOWN" block
   35266/   1B718 :                     ; ---------------------------------------------------------------------------
   35267/   1B718 :                     Map_SS_Down:
   35268/   1B718 :                     	include "_mappings/SSDOWNblock.asm"
(1)    1/   1B718 :                     ; ---------------------------------------------------------------------------
(1)    2/   1B718 :                     ; Sprite mappings - special stage "DOWN" block
(1)    3/   1B718 :                     ; ---------------------------------------------------------------------------
(1)    4/   1B718 : 0004                		dc.w byte_1B954-Map_SS_Down
(1)    5/   1B71A : 000A                		dc.w byte_1B95A-Map_SS_Down
(1)    6/   1B71C : 01                  byte_1B954:	dc.b 1
(1)    7/   1B71D : F40A 0009 F4        		dc.b $F4, $A, 0, 9, $F4
(1)    8/   1B722 : 01                  byte_1B95A:	dc.b 1
(1)    9/   1B723 : F40A 0012 F4        		dc.b $F4, $A, 0, $12, $F4
(1)   10/   1B728 : (MACRO)              		even
   35269/   1B728 :                     
   35270/   1B728 :                     ; ---------------------------------------------------------------------------
   35271/   1B728 :                     ; Sprite mappings - special stage chaos	emeralds
   35272/   1B728 :                     ; ---------------------------------------------------------------------------
   35273/   1B728 : 000C                Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
   35274/   1B72A : 001E                		dc.w byte_1B97E-Map_SS_Chaos1
   35275/   1B72C : 000E                Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
   35276/   1B72E : 001A                		dc.w byte_1B97E-Map_SS_Chaos2
   35277/   1B730 : 0010                Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
   35278/   1B732 : 0016                		dc.w byte_1B97E-Map_SS_Chaos3
   35279/   1B734 : 01                  byte_1B96C:	dc.b 1
   35280/   1B735 : F805 0000 F8        		dc.b $F8, 5, 0,	0, $F8
   35281/   1B73A : 01                  byte_1B972:	dc.b 1
   35282/   1B73B : F805 0004 F8        		dc.b $F8, 5, 0,	4, $F8
   35283/   1B740 : 01                  byte_1B978:	dc.b 1
   35284/   1B741 : F805 0008 F8        		dc.b $F8, 5, 0,	8, $F8
   35285/   1B746 : 01                  byte_1B97E:	dc.b 1
   35286/   1B747 : F805 000C F8        		dc.b $F8, 5, 0,	$C, $F8
   35287/   1B74C : (MACRO)              		even
   35288/   1B74C :                     ; ===========================================================================
   35289/   1B74C :                     ; ---------------------------------------------------------------------------
   35290/   1B74C :                     ; Object 09 - Sonic (special stage)
   35291/   1B74C :                     ; ---------------------------------------------------------------------------
   35292/   1B74C :                     
   35293/   1B74C :                     Obj09:					; XREF: Obj_Index
   35294/   1B74C : 4A78 FE08           		tst.w	($FFFFFE08).w	; is debug mode	being used?
   35295/   1B750 : 6708                		beq.s	Obj09_Normal	; if not, branch
   35296/   1B752 : 6100 022A           		bsr.w	SS_FixCamera
   35297/   1B756 : 6000 181E           		bra.w	DebugMode
   35298/   1B75A :                     ; ===========================================================================
   35299/   1B75A :                     
   35300/   1B75A :                     Obj09_Normal:
   35301/   1B75A : 7000                		moveq	#0,d0
   35302/   1B75C : 1028 0024           		move.b	$24(a0),d0
   35303/   1B760 : 323B 0006           		move.w	Obj09_Index(pc,d0.w),d1
   35304/   1B764 : 4EFB 1002           		jmp	Obj09_Index(pc,d1.w)
   35305/   1B768 :                     ; ===========================================================================
   35306/   1B768 : 0008                Obj09_Index:	dc.w Obj09_Main-Obj09_Index
   35307/   1B76A : 0044                		dc.w Obj09_ChkDebug-Obj09_Index
   35308/   1B76C : 0240                		dc.w Obj09_ExitStage-Obj09_Index
   35309/   1B76E : 0294                		dc.w Obj09_Exit2-Obj09_Index
   35310/   1B770 :                     ; ===========================================================================
   35311/   1B770 :                     
   35312/   1B770 :                     Obj09_Main:				; XREF: Obj09_Index
   35313/   1B770 : 5428 0024           		addq.b	#2,$24(a0)
   35314/   1B774 : 117C 000E 0016      		move.b	#$E,$16(a0)
   35315/   1B77A : 117C 0007 0017      		move.b	#7,$17(a0)
   35316/   1B780 : 217C 0002 1148      		move.l	#Map_Sonic,4(a0)
            1B786 : 0004             
   35317/   1B788 : 317C 0780 0002      		move.w	#$780,2(a0)
   35318/   1B78E : 117C 0004 0001      		move.b	#4,1(a0)
   35319/   1B794 : 117C 0000 0018      		move.b	#0,$18(a0)
   35320/   1B79A : 117C 0002 001C      		move.b	#2,$1C(a0)
   35321/   1B7A0 : 08E8 0002 0022      		bset	#2,$22(a0)
   35322/   1B7A6 : 08E8 0001 0022      		bset	#1,$22(a0)
   35323/   1B7AC :                     
   35324/   1B7AC :                     Obj09_ChkDebug:				; XREF: Obj09_Index
   35325/   1B7AC : 4A78 FFFA           		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
   35326/   1B7B0 : 670E                		beq.s	Obj09_NoDebug	; if not, branch
   35327/   1B7B2 : 0838 0004 F605      		btst	#4,($FFFFF605).w ; is button B pressed?
   35328/   1B7B8 : 6706                		beq.s	Obj09_NoDebug	; if not, branch
   35329/   1B7BA : 31FC 0001 FE08      		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
   35330/   1B7C0 :                     
   35331/   1B7C0 :                     Obj09_NoDebug:
   35332/   1B7C0 : 117C 0000 0030      		move.b	#0,$30(a0)
   35333/   1B7C6 : 7000                		moveq	#0,d0
   35334/   1B7C8 : 1028 0022           		move.b	$22(a0),d0
   35335/   1B7CC : 0240 0002           		andi.w	#2,d0
   35336/   1B7D0 : 323B 0012           		move.w	Obj09_Modes(pc,d0.w),d1
   35337/   1B7D4 : 4EBB 100E           		jsr	Obj09_Modes(pc,d1.w)
   35338/   1B7D8 : 4EB9 0001 39FE      		jsr	LoadSonicDynPLC
   35339/   1B7DE : 4EF9 0000 D3D2      		jmp	DisplaySprite
   35340/   1B7E4 :                     ; ===========================================================================
   35341/   1B7E4 : 0004                Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
   35342/   1B7E6 : 0012                		dc.w Obj09_InAir-Obj09_Modes
   35343/   1B7E8 :                     ; ===========================================================================
   35344/   1B7E8 :                     
   35345/   1B7E8 :                     Obj09_OnWall:				; XREF: Obj09_Modes
   35346/   1B7E8 : 6100 0134           		bsr.w	Obj09_Jump
   35347/   1B7EC : 6100 003A           		bsr.w	Obj09_Move
   35348/   1B7F0 : 6100 022C           		bsr.w	Obj09_Fall
   35349/   1B7F4 : 600C                		bra.s	Obj09_Display
   35350/   1B7F6 :                     ; ===========================================================================
   35351/   1B7F6 :                     
   35352/   1B7F6 :                     Obj09_InAir:				; XREF: Obj09_Modes
   35353/   1B7F6 : 6100 016A           		bsr.w	nullsub_2
   35354/   1B7FA : 6100 002C           		bsr.w	Obj09_Move
   35355/   1B7FE : 6100 021E           		bsr.w	Obj09_Fall
   35356/   1B802 :                     
   35357/   1B802 :                     Obj09_Display:				; XREF: Obj09_OnWall
   35358/   1B802 : 6100 0316           		bsr.w	Obj09_ChkItems
   35359/   1B806 : 6100 044E           		bsr.w	Obj09_ChkItems2
   35360/   1B80A : 4EB9 0000 D3AC      		jsr	SpeedToPos
   35361/   1B810 : 6100 016C           		bsr.w	SS_FixCamera
   35362/   1B814 : 3038 F780           		move.w	($FFFFF780).w,d0
   35363/   1B818 : D078 F782           		add.w	($FFFFF782).w,d0
   35364/   1B81C : 31C0 F780           		move.w	d0,($FFFFF780).w
   35365/   1B820 : 4EB9 0001 3784      		jsr	Sonic_Animate
   35366/   1B826 : 4E75                		rts	
   35367/   1B828 :                     
   35368/   1B828 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   35369/   1B828 :                     
   35370/   1B828 :                     
   35371/   1B828 :                     Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
   35372/   1B828 : 0838 0002 F602      		btst	#2,($FFFFF602).w ; is left being pressed?
   35373/   1B82E : 6704                		beq.s	Obj09_ChkRight	; if not, branch
   35374/   1B830 : 6100 008E           		bsr.w	Obj09_MoveLeft
   35375/   1B834 :                     
   35376/   1B834 :                     Obj09_ChkRight:
   35377/   1B834 : 0838 0003 F602      		btst	#3,($FFFFF602).w ; is right being pressed?
   35378/   1B83A : 6704                		beq.s	loc_1BA78	; if not, branch
   35379/   1B83C : 6100 00B2           		bsr.w	Obj09_MoveRight
   35380/   1B840 :                     
   35381/   1B840 :                     loc_1BA78:
   35382/   1B840 : 1038 F602           		move.b	($FFFFF602).w,d0
   35383/   1B844 : 0200 000C           		andi.b	#$C,d0
   35384/   1B848 : 6626                		bne.s	loc_1BAA8
   35385/   1B84A : 3028 0014           		move.w	$14(a0),d0
   35386/   1B84E : 6720                		beq.s	loc_1BAA8
   35387/   1B850 : 6B10                		bmi.s	loc_1BA9A
   35388/   1B852 : 0440 000C           		subi.w	#$C,d0
   35389/   1B856 : 6404                		bcc.s	loc_1BA94
   35390/   1B858 : 303C 0000           		move.w	#0,d0
   35391/   1B85C :                     
   35392/   1B85C :                     loc_1BA94:
   35393/   1B85C : 3140 0014           		move.w	d0,$14(a0)
   35394/   1B860 : 600E                		bra.s	loc_1BAA8
   35395/   1B862 :                     ; ===========================================================================
   35396/   1B862 :                     
   35397/   1B862 :                     loc_1BA9A:
   35398/   1B862 : 0640 000C           		addi.w	#$C,d0
   35399/   1B866 : 6404                		bcc.s	loc_1BAA4
   35400/   1B868 : 303C 0000           		move.w	#0,d0
   35401/   1B86C :                     
   35402/   1B86C :                     loc_1BAA4:
   35403/   1B86C : 3140 0014           		move.w	d0,$14(a0)
   35404/   1B870 :                     
   35405/   1B870 :                     loc_1BAA8:
   35406/   1B870 : 1038 F780           		move.b	($FFFFF780).w,d0
   35407/   1B874 : 0600 0020           		addi.b	#$20,d0
   35408/   1B878 : 0200 00C0           		andi.b	#$C0,d0
   35409/   1B87C : 4400                		neg.b	d0
   35410/   1B87E : 4EB9 0000 27C0      		jsr	(CalcSine).l
   35411/   1B884 : C3E8 0014           		muls.w	$14(a0),d1
   35412/   1B888 : D3A8 0008           		add.l	d1,8(a0)
   35413/   1B88C : C1E8 0014           		muls.w	$14(a0),d0
   35414/   1B890 : D1A8 000C           		add.l	d0,$C(a0)
   35415/   1B894 : 48E7 C000           		movem.l	d0-d1,-(sp)
   35416/   1B898 : 2428 000C           		move.l	$C(a0),d2
   35417/   1B89C : 2628 0008           		move.l	8(a0),d3
   35418/   1B8A0 : 6100 020E           		bsr.w	sub_1BCE8
   35419/   1B8A4 : 6714                		beq.s	loc_1BAF2
   35420/   1B8A6 : 4CDF 0003           		movem.l	(sp)+,d0-d1
   35421/   1B8AA : 93A8 0008           		sub.l	d1,8(a0)
   35422/   1B8AE : 91A8 000C           		sub.l	d0,$C(a0)
   35423/   1B8B2 : 317C 0000 0014      		move.w	#0,$14(a0)
   35424/   1B8B8 : 4E75                		rts	
   35425/   1B8BA :                     ; ===========================================================================
   35426/   1B8BA :                     
   35427/   1B8BA :                     loc_1BAF2:
   35428/   1B8BA : 4CDF 0003           		movem.l	(sp)+,d0-d1
   35429/   1B8BE : 4E75                		rts	
   35430/   1B8C0 :                     ; End of function Obj09_Move
   35431/   1B8C0 :                     
   35432/   1B8C0 :                     
   35433/   1B8C0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   35434/   1B8C0 :                     
   35435/   1B8C0 :                     
   35436/   1B8C0 :                     Obj09_MoveLeft:				; XREF: Obj09_Move
   35437/   1B8C0 : 08E8 0000 0022      		bset	#0,$22(a0)
   35438/   1B8C6 : 3028 0014           		move.w	$14(a0),d0
   35439/   1B8CA : 6702                		beq.s	loc_1BB06
   35440/   1B8CC : 6A14                		bpl.s	loc_1BB1A
   35441/   1B8CE :                     
   35442/   1B8CE :                     loc_1BB06:
   35443/   1B8CE : 0440 000C           		subi.w	#$C,d0
   35444/   1B8D2 : 0C40 F800           		cmpi.w	#-$800,d0
   35445/   1B8D6 : 6E04                		bgt.s	loc_1BB14
   35446/   1B8D8 : 303C F800           		move.w	#-$800,d0
   35447/   1B8DC :                     
   35448/   1B8DC :                     loc_1BB14:
   35449/   1B8DC : 3140 0014           		move.w	d0,$14(a0)
   35450/   1B8E0 : 4E75                		rts	
   35451/   1B8E2 :                     ; ===========================================================================
   35452/   1B8E2 :                     
   35453/   1B8E2 :                     loc_1BB1A:
   35454/   1B8E2 : 0440 0040           		subi.w	#$40,d0
   35455/   1B8E6 : 6402                		bcc.s	loc_1BB22
   35456/   1B8E8 : 4E71                		nop	
   35457/   1B8EA :                     
   35458/   1B8EA :                     loc_1BB22:
   35459/   1B8EA : 3140 0014           		move.w	d0,$14(a0)
   35460/   1B8EE : 4E75                		rts	
   35461/   1B8F0 :                     ; End of function Obj09_MoveLeft
   35462/   1B8F0 :                     
   35463/   1B8F0 :                     
   35464/   1B8F0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   35465/   1B8F0 :                     
   35466/   1B8F0 :                     
   35467/   1B8F0 :                     Obj09_MoveRight:			; XREF: Obj09_Move
   35468/   1B8F0 : 08A8 0000 0022      		bclr	#0,$22(a0)
   35469/   1B8F6 : 3028 0014           		move.w	$14(a0),d0
   35470/   1B8FA : 6B14                		bmi.s	loc_1BB48
   35471/   1B8FC : 0640 000C           		addi.w	#$C,d0
   35472/   1B900 : 0C40 0800           		cmpi.w	#$800,d0
   35473/   1B904 : 6D04                		blt.s	loc_1BB42
   35474/   1B906 : 303C 0800           		move.w	#$800,d0
   35475/   1B90A :                     
   35476/   1B90A :                     loc_1BB42:
   35477/   1B90A : 3140 0014           		move.w	d0,$14(a0)
   35478/   1B90E : 600C                		bra.s	locret_1BB54
   35479/   1B910 :                     ; ===========================================================================
   35480/   1B910 :                     
   35481/   1B910 :                     loc_1BB48:
   35482/   1B910 : 0640 0040           		addi.w	#$40,d0
   35483/   1B914 : 6402                		bcc.s	loc_1BB50
   35484/   1B916 : 4E71                		nop	
   35485/   1B918 :                     
   35486/   1B918 :                     loc_1BB50:
   35487/   1B918 : 3140 0014           		move.w	d0,$14(a0)
   35488/   1B91C :                     
   35489/   1B91C :                     locret_1BB54:
   35490/   1B91C : 4E75                		rts	
   35491/   1B91E :                     ; End of function Obj09_MoveRight
   35492/   1B91E :                     
   35493/   1B91E :                     
   35494/   1B91E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   35495/   1B91E :                     
   35496/   1B91E :                     
   35497/   1B91E :                     Obj09_Jump:				; XREF: Obj09_OnWall
   35498/   1B91E : 1038 F603           		move.b	($FFFFF603).w,d0
   35499/   1B922 : 0200 0070           		andi.b	#$70,d0		; is A,	B or C pressed?
   35500/   1B926 : 6738                		beq.s	Obj09_NoJump	; if not, branch
   35501/   1B928 : 1038 F780           		move.b	($FFFFF780).w,d0
   35502/   1B92C : 0200 00FC           		andi.b	#$FC,d0
   35503/   1B930 : 4400                		neg.b	d0
   35504/   1B932 : 0400 0040           		subi.b	#$40,d0
   35505/   1B936 : 4EB9 0000 27C0      		jsr	(CalcSine).l
   35506/   1B93C : C3FC 0680           		muls.w	#$680,d1
   35507/   1B940 : E081                		asr.l	#8,d1
   35508/   1B942 : 3141 0010           		move.w	d1,$10(a0)
   35509/   1B946 : C1FC 0680           		muls.w	#$680,d0
   35510/   1B94A : E080                		asr.l	#8,d0
   35511/   1B94C : 3140 0012           		move.w	d0,$12(a0)
   35512/   1B950 : 08E8 0001 0022      		bset	#1,$22(a0)
   35513/   1B956 : 303C 00A0           		move.w	#$A0,d0
   35514/   1B95A : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play jumping sound
   35515/   1B960 :                     
   35516/   1B960 :                     Obj09_NoJump:
   35517/   1B960 : 4E75                		rts	
   35518/   1B962 :                     ; End of function Obj09_Jump
   35519/   1B962 :                     
   35520/   1B962 :                     
   35521/   1B962 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   35522/   1B962 :                     
   35523/   1B962 :                     
   35524/   1B962 :                     nullsub_2:				; XREF: Obj09_InAir
   35525/   1B962 : 4E75                		rts	
   35526/   1B964 :                     ; End of function nullsub_2
   35527/   1B964 :                     
   35528/   1B964 :                     ; ===========================================================================
   35529/   1B964 :                     ; ---------------------------------------------------------------------------
   35530/   1B964 :                     ; unused subroutine to limit Sonic's upward vertical speed
   35531/   1B964 :                     ; ---------------------------------------------------------------------------
   35532/   1B964 : 323C FC00           		move.w	#-$400,d1
   35533/   1B968 : B268 0012           		cmp.w	$12(a0),d1
   35534/   1B96C : 6F0E                		ble.s	locret_1BBB4
   35535/   1B96E : 1038 F602           		move.b	($FFFFF602).w,d0
   35536/   1B972 : 0200 0070           		andi.b	#$70,d0
   35537/   1B976 : 6604                		bne.s	locret_1BBB4
   35538/   1B978 : 3141 0012           		move.w	d1,$12(a0)
   35539/   1B97C :                     
   35540/   1B97C :                     locret_1BBB4:
   35541/   1B97C : 4E75                		rts	
   35542/   1B97E :                     ; ---------------------------------------------------------------------------
   35543/   1B97E :                     ; Subroutine to	fix the	camera on Sonic's position (special stage)
   35544/   1B97E :                     ; ---------------------------------------------------------------------------
   35545/   1B97E :                     
   35546/   1B97E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   35547/   1B97E :                     
   35548/   1B97E :                     
   35549/   1B97E :                     SS_FixCamera:				; XREF: Obj09
   35550/   1B97E : 3428 000C           		move.w	$C(a0),d2
   35551/   1B982 : 3628 0008           		move.w	8(a0),d3
   35552/   1B986 : 3038 F700           		move.w	($FFFFF700).w,d0
   35553/   1B98A : 0443 00A0           		subi.w	#$A0,d3
   35554/   1B98E : 6506                		bcs.s	loc_1BBCE
   35555/   1B990 : 9043                		sub.w	d3,d0
   35556/   1B992 : 9178 F700           		sub.w	d0,($FFFFF700).w
   35557/   1B996 :                     
   35558/   1B996 :                     loc_1BBCE:
   35559/   1B996 : 3038 F704           		move.w	($FFFFF704).w,d0
   35560/   1B99A : 0442 0070           		subi.w	#$70,d2
   35561/   1B99E : 6506                		bcs.s	locret_1BBDE
   35562/   1B9A0 : 9042                		sub.w	d2,d0
   35563/   1B9A2 : 9178 F704           		sub.w	d0,($FFFFF704).w
   35564/   1B9A6 :                     
   35565/   1B9A6 :                     locret_1BBDE:
   35566/   1B9A6 : 4E75                		rts	
   35567/   1B9A8 :                     ; End of function SS_FixCamera
   35568/   1B9A8 :                     
   35569/   1B9A8 :                     ; ===========================================================================
   35570/   1B9A8 :                     
   35571/   1B9A8 :                     Obj09_ExitStage:			; XREF: Obj09_Index
   35572/   1B9A8 : 0678 0040 F782      		addi.w	#$40,($FFFFF782).w
   35573/   1B9AE : 0C78 1800 F782      		cmpi.w	#$1800,($FFFFF782).w
   35574/   1B9B4 : 6606                		bne.s	loc_1BBF4
   35575/   1B9B6 : 11FC 000C F600      		move.b	#$C,($FFFFF600).w
   35576/   1B9BC :                     
   35577/   1B9BC :                     loc_1BBF4:
   35578/   1B9BC : 0C78 3000 F782      		cmpi.w	#$3000,($FFFFF782).w
   35579/   1B9C2 : 6D16                		blt.s	loc_1BC12
   35580/   1B9C4 : 31FC 0000 F782      		move.w	#0,($FFFFF782).w
   35581/   1B9CA : 31FC 4000 F780      		move.w	#$4000,($FFFFF780).w
   35582/   1B9D0 : 5428 0024           		addq.b	#2,$24(a0)
   35583/   1B9D4 : 317C 003C 0038      		move.w	#$3C,$38(a0)
   35584/   1B9DA :                     
   35585/   1B9DA :                     loc_1BC12:
   35586/   1B9DA : 3038 F780           		move.w	($FFFFF780).w,d0
   35587/   1B9DE : D078 F782           		add.w	($FFFFF782).w,d0
   35588/   1B9E2 : 31C0 F780           		move.w	d0,($FFFFF780).w
   35589/   1B9E6 : 4EB9 0001 3784      		jsr	Sonic_Animate
   35590/   1B9EC : 4EB9 0001 39FE      		jsr	LoadSonicDynPLC
   35591/   1B9F2 : 6100 FF8A           		bsr.w	SS_FixCamera
   35592/   1B9F6 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   35593/   1B9FC :                     ; ===========================================================================
   35594/   1B9FC :                     
   35595/   1B9FC :                     Obj09_Exit2:				; XREF: Obj09_Index
   35596/   1B9FC : 5368 0038           		subq.w	#1,$38(a0)
   35597/   1BA00 : 6606                		bne.s	loc_1BC40
   35598/   1BA02 : 11FC 000C F600      		move.b	#$C,($FFFFF600).w
   35599/   1BA08 :                     
   35600/   1BA08 :                     loc_1BC40:
   35601/   1BA08 : 4EB9 0001 3784      		jsr	Sonic_Animate
   35602/   1BA0E : 4EB9 0001 39FE      		jsr	LoadSonicDynPLC
   35603/   1BA14 : 6100 FF68           		bsr.w	SS_FixCamera
   35604/   1BA18 : 4EF9 0000 D3D2      		jmp	DisplaySprite
   35605/   1BA1E :                     
   35606/   1BA1E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   35607/   1BA1E :                     
   35608/   1BA1E :                     
   35609/   1BA1E :                     Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
   35610/   1BA1E : 2428 000C           		move.l	$C(a0),d2
   35611/   1BA22 : 2628 0008           		move.l	8(a0),d3
   35612/   1BA26 : 1038 F780           		move.b	($FFFFF780).w,d0
   35613/   1BA2A : 0200 00FC           		andi.b	#$FC,d0
   35614/   1BA2E : 4EB9 0000 27C0      		jsr	(CalcSine).l
   35615/   1BA34 : 3828 0010           		move.w	$10(a0),d4
   35616/   1BA38 : 48C4                		ext.l	d4
   35617/   1BA3A : E184                		asl.l	#8,d4
   35618/   1BA3C : C1FC 002A           		muls.w	#$2A,d0
   35619/   1BA40 : D084                		add.l	d4,d0
   35620/   1BA42 : 3828 0012           		move.w	$12(a0),d4
   35621/   1BA46 : 48C4                		ext.l	d4
   35622/   1BA48 : E184                		asl.l	#8,d4
   35623/   1BA4A : C3FC 002A           		muls.w	#$2A,d1
   35624/   1BA4E : D284                		add.l	d4,d1
   35625/   1BA50 : D680                		add.l	d0,d3
   35626/   1BA52 : 6100 005C           		bsr.w	sub_1BCE8
   35627/   1BA56 : 6720                		beq.s	loc_1BCB0
   35628/   1BA58 : 9680                		sub.l	d0,d3
   35629/   1BA5A : 7000                		moveq	#0,d0
   35630/   1BA5C : 3140 0010           		move.w	d0,$10(a0)
   35631/   1BA60 : 08A8 0001 0022      		bclr	#1,$22(a0)
   35632/   1BA66 : D481                		add.l	d1,d2
   35633/   1BA68 : 6100 0046           		bsr.w	sub_1BCE8
   35634/   1BA6C : 6720                		beq.s	loc_1BCC6
   35635/   1BA6E : 9481                		sub.l	d1,d2
   35636/   1BA70 : 7200                		moveq	#0,d1
   35637/   1BA72 : 3141 0012           		move.w	d1,$12(a0)
   35638/   1BA76 : 4E75                		rts	
   35639/   1BA78 :                     ; ===========================================================================
   35640/   1BA78 :                     
   35641/   1BA78 :                     loc_1BCB0:
   35642/   1BA78 : D481                		add.l	d1,d2
   35643/   1BA7A : 6100 0034           		bsr.w	sub_1BCE8
   35644/   1BA7E : 671C                		beq.s	loc_1BCD4
   35645/   1BA80 : 9481                		sub.l	d1,d2
   35646/   1BA82 : 7200                		moveq	#0,d1
   35647/   1BA84 : 3141 0012           		move.w	d1,$12(a0)
   35648/   1BA88 : 08A8 0001 0022      		bclr	#1,$22(a0)
   35649/   1BA8E :                     
   35650/   1BA8E :                     loc_1BCC6:
   35651/   1BA8E : E080                		asr.l	#8,d0
   35652/   1BA90 : E081                		asr.l	#8,d1
   35653/   1BA92 : 3140 0010           		move.w	d0,$10(a0)
   35654/   1BA96 : 3141 0012           		move.w	d1,$12(a0)
   35655/   1BA9A : 4E75                		rts	
   35656/   1BA9C :                     ; ===========================================================================
   35657/   1BA9C :                     
   35658/   1BA9C :                     loc_1BCD4:
   35659/   1BA9C : E080                		asr.l	#8,d0
   35660/   1BA9E : E081                		asr.l	#8,d1
   35661/   1BAA0 : 3140 0010           		move.w	d0,$10(a0)
   35662/   1BAA4 : 3141 0012           		move.w	d1,$12(a0)
   35663/   1BAA8 : 08E8 0001 0022      		bset	#1,$22(a0)
   35664/   1BAAE : 4E75                		rts	
   35665/   1BAB0 :                     ; End of function Obj09_Fall
   35666/   1BAB0 :                     
   35667/   1BAB0 :                     
   35668/   1BAB0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   35669/   1BAB0 :                     
   35670/   1BAB0 :                     
   35671/   1BAB0 :                     sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
   35672/   1BAB0 : 43F9 00FF 0000      		lea	($FF0000).l,a1
   35673/   1BAB6 : 7800                		moveq	#0,d4
   35674/   1BAB8 : 4842                		swap	d2
   35675/   1BABA : 3802                		move.w	d2,d4
   35676/   1BABC : 4842                		swap	d2
   35677/   1BABE : 0644 0044           		addi.w	#$44,d4
   35678/   1BAC2 : 88FC 0018           		divu.w	#$18,d4
   35679/   1BAC6 : C8FC 0080           		mulu.w	#$80,d4
   35680/   1BACA : D3C4                		adda.l	d4,a1
   35681/   1BACC : 7800                		moveq	#0,d4
   35682/   1BACE : 4843                		swap	d3
   35683/   1BAD0 : 3803                		move.w	d3,d4
   35684/   1BAD2 : 4843                		swap	d3
   35685/   1BAD4 : 0644 0014           		addi.w	#$14,d4
   35686/   1BAD8 : 88FC 0018           		divu.w	#$18,d4
   35687/   1BADC : D2C4                		adda.w	d4,a1
   35688/   1BADE : 7A00                		moveq	#0,d5
   35689/   1BAE0 : 1819                		move.b	(a1)+,d4
   35690/   1BAE2 : 6114                		bsr.s	sub_1BD30
   35691/   1BAE4 : 1819                		move.b	(a1)+,d4
   35692/   1BAE6 : 6110                		bsr.s	sub_1BD30
   35693/   1BAE8 : D2FC 007E           		adda.w	#$7E,a1
   35694/   1BAEC : 1819                		move.b	(a1)+,d4
   35695/   1BAEE : 6108                		bsr.s	sub_1BD30
   35696/   1BAF0 : 1819                		move.b	(a1)+,d4
   35697/   1BAF2 : 6104                		bsr.s	sub_1BD30
   35698/   1BAF4 : 4A05                		tst.b	d5
   35699/   1BAF6 : 4E75                		rts	
   35700/   1BAF8 :                     ; End of function sub_1BCE8
   35701/   1BAF8 :                     
   35702/   1BAF8 :                     
   35703/   1BAF8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   35704/   1BAF8 :                     
   35705/   1BAF8 :                     
   35706/   1BAF8 :                     sub_1BD30:				; XREF: sub_1BCE8
   35707/   1BAF8 : 6712                		beq.s	locret_1BD44
   35708/   1BAFA : 0C04 0028           		cmpi.b	#$28,d4
   35709/   1BAFE : 670C                		beq.s	locret_1BD44
   35710/   1BB00 : 0C04 003A           		cmpi.b	#$3A,d4
   35711/   1BB04 : 6508                		bcs.s	loc_1BD46
   35712/   1BB06 : 0C04 004B           		cmpi.b	#$4B,d4
   35713/   1BB0A : 6402                		bcc.s	loc_1BD46
   35714/   1BB0C :                     
   35715/   1BB0C :                     locret_1BD44:
   35716/   1BB0C : 4E75                		rts	
   35717/   1BB0E :                     ; ===========================================================================
   35718/   1BB0E :                     
   35719/   1BB0E :                     loc_1BD46:
   35720/   1BB0E : 1144 0030           		move.b	d4,$30(a0)
   35721/   1BB12 : 2149 0032           		move.l	a1,$32(a0)
   35722/   1BB16 : 7AFF                		moveq	#-1,d5
   35723/   1BB18 : 4E75                		rts	
   35724/   1BB1A :                     ; End of function sub_1BD30
   35725/   1BB1A :                     
   35726/   1BB1A :                     
   35727/   1BB1A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   35728/   1BB1A :                     
   35729/   1BB1A :                     
   35730/   1BB1A :                     Obj09_ChkItems:				; XREF: Obj09_Display
   35731/   1BB1A : 43F9 00FF 0000      		lea	($FF0000).l,a1
   35732/   1BB20 : 7800                		moveq	#0,d4
   35733/   1BB22 : 3828 000C           		move.w	$C(a0),d4
   35734/   1BB26 : 0644 0050           		addi.w	#$50,d4
   35735/   1BB2A : 88FC 0018           		divu.w	#$18,d4
   35736/   1BB2E : C8FC 0080           		mulu.w	#$80,d4
   35737/   1BB32 : D3C4                		adda.l	d4,a1
   35738/   1BB34 : 7800                		moveq	#0,d4
   35739/   1BB36 : 3828 0008           		move.w	8(a0),d4
   35740/   1BB3A : 0644 0020           		addi.w	#$20,d4
   35741/   1BB3E : 88FC 0018           		divu.w	#$18,d4
   35742/   1BB42 : D2C4                		adda.w	d4,a1
   35743/   1BB44 : 1811                		move.b	(a1),d4
   35744/   1BB46 : 660C                		bne.s	Obj09_ChkCont
   35745/   1BB48 : 4A28 003A           		tst.b	$3A(a0)
   35746/   1BB4C : 6600 00D6           		bne.w	Obj09_MakeGhostSolid
   35747/   1BB50 : 7800                		moveq	#0,d4
   35748/   1BB52 : 4E75                		rts	
   35749/   1BB54 :                     ; ===========================================================================
   35750/   1BB54 :                     
   35751/   1BB54 :                     Obj09_ChkCont:
   35752/   1BB54 : 0C04 003A           		cmpi.b	#$3A,d4		; is the item a	ring?
   35753/   1BB58 : 6636                		bne.s	Obj09_Chk1Up
   35754/   1BB5A : 6100 F726           		bsr.w	SS_RemoveCollectedItem
   35755/   1BB5E : 6608                		bne.s	Obj09_GetCont
   35756/   1BB60 : 14BC 0001           		move.b	#1,(a2)
   35757/   1BB64 : 2549 0004           		move.l	a1,4(a2)
   35758/   1BB68 :                     
   35759/   1BB68 :                     Obj09_GetCont:
   35760/   1BB68 : 4EB9 0000 9A64      		jsr	CollectRing
   35761/   1BB6E : 0C78 0032 FE20      		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
   35762/   1BB74 : 6516                		bcs.s	Obj09_NoCont
   35763/   1BB76 : 08F8 0000 FE1B      		bset	#0,($FFFFFE1B).w
   35764/   1BB7C : 660E                		bne.s	Obj09_NoCont
   35765/   1BB7E : 5238 FE18           		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
   35766/   1BB82 : 303C 00BF           		move.w	#$BF,d0
   35767/   1BB86 : 4EB9 0000 117C      		jsr	(PlaySound).l	; play extra continue sound
   35768/   1BB8C :                     
   35769/   1BB8C :                     Obj09_NoCont:
   35770/   1BB8C : 7800                		moveq	#0,d4
   35771/   1BB8E : 4E75                		rts	
   35772/   1BB90 :                     ; ===========================================================================
   35773/   1BB90 :                     
   35774/   1BB90 :                     Obj09_Chk1Up:
   35775/   1BB90 : 0C04 0028           		cmpi.b	#$28,d4		; is the item an extra life?
   35776/   1BB94 : 6624                		bne.s	Obj09_ChkEmer
   35777/   1BB96 : 6100 F6EA           		bsr.w	SS_RemoveCollectedItem
   35778/   1BB9A : 6608                		bne.s	Obj09_Get1Up
   35779/   1BB9C : 14BC 0003           		move.b	#3,(a2)
   35780/   1BBA0 : 2549 0004           		move.l	a1,4(a2)
   35781/   1BBA4 :                     
   35782/   1BBA4 :                     Obj09_Get1Up:
   35783/   1BBA4 : 5238 FE12           		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
   35784/   1BBA8 : 5238 FE1C           		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
   35785/   1BBAC : 303C 0088           		move.w	#$88,d0
   35786/   1BBB0 : 4EB9 0000 117C      		jsr	(PlaySound).l	; play extra life music
   35787/   1BBB6 : 7800                		moveq	#0,d4
   35788/   1BBB8 : 4E75                		rts	
   35789/   1BBBA :                     ; ===========================================================================
   35790/   1BBBA :                     
   35791/   1BBBA :                     Obj09_ChkEmer:
   35792/   1BBBA : 0C04 003B           		cmpi.b	#$3B,d4		; is the item an emerald?
   35793/   1BBBE : 6540                		bcs.s	Obj09_ChkGhost
   35794/   1BBC0 : 0C04 0040           		cmpi.b	#$40,d4
   35795/   1BBC4 : 623A                		bhi.s	Obj09_ChkGhost
   35796/   1BBC6 : 6100 F6BA           		bsr.w	SS_RemoveCollectedItem
   35797/   1BBCA : 6608                		bne.s	Obj09_GetEmer
   35798/   1BBCC : 14BC 0005           		move.b	#5,(a2)
   35799/   1BBD0 : 2549 0004           		move.l	a1,4(a2)
   35800/   1BBD4 :                     
   35801/   1BBD4 :                     Obj09_GetEmer:
   35802/   1BBD4 : 0C38 0006 FE57      		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
   35803/   1BBDA : 6716                		beq.s	Obj09_NoEmer	; if yes, branch
   35804/   1BBDC : 0404 003B           		subi.b	#$3B,d4
   35805/   1BBE0 : 7000                		moveq	#0,d0
   35806/   1BBE2 : 1038 FE57           		move.b	($FFFFFE57).w,d0
   35807/   1BBE6 : 45F8 FE58           		lea	($FFFFFE58).w,a2
   35808/   1BBEA : 1584 0000           		move.b	d4,(a2,d0.w)
   35809/   1BBEE : 5238 FE57           		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
   35810/   1BBF2 :                     
   35811/   1BBF2 :                     Obj09_NoEmer:
   35812/   1BBF2 : 303C 0093           		move.w	#$93,d0
   35813/   1BBF6 : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play emerald music
   35814/   1BBFC : 7800                		moveq	#0,d4
   35815/   1BBFE : 4E75                		rts	
   35816/   1BC00 :                     ; ===========================================================================
   35817/   1BC00 :                     
   35818/   1BC00 :                     Obj09_ChkGhost:
   35819/   1BC00 : 0C04 0041           		cmpi.b	#$41,d4		; is the item a	ghost block?
   35820/   1BC04 : 6606                		bne.s	Obj09_ChkGhostTag
   35821/   1BC06 : 117C 0001 003A      		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
   35822/   1BC0C :                     
   35823/   1BC0C :                     Obj09_ChkGhostTag:
   35824/   1BC0C : 0C04 004A           		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
   35825/   1BC10 : 660E                		bne.s	Obj09_NoGhost
   35826/   1BC12 : 0C28 0001 003A      		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
   35827/   1BC18 : 6606                		bne.s	Obj09_NoGhost	; if not, branch
   35828/   1BC1A : 117C 0002 003A      		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
   35829/   1BC20 :                     
   35830/   1BC20 :                     Obj09_NoGhost:
   35831/   1BC20 : 78FF                		moveq	#-1,d4
   35832/   1BC22 : 4E75                		rts	
   35833/   1BC24 :                     ; ===========================================================================
   35834/   1BC24 :                     
   35835/   1BC24 :                     Obj09_MakeGhostSolid:
   35836/   1BC24 : 0C28 0002 003A      		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
   35837/   1BC2A : 6622                		bne.s	Obj09_GhostNotSolid ; if not, branch
   35838/   1BC2C : 43F9 00FF 1020      		lea	($FF1020).l,a1
   35839/   1BC32 : 723F                		moveq	#$3F,d1
   35840/   1BC34 :                     
   35841/   1BC34 :                     Obj09_GhostLoop2:
   35842/   1BC34 : 743F                		moveq	#$3F,d2
   35843/   1BC36 :                     
   35844/   1BC36 :                     Obj09_GhostLoop:
   35845/   1BC36 : 0C11 0041           		cmpi.b	#$41,(a1)	; is the item a	ghost block?
   35846/   1BC3A : 6604                		bne.s	Obj09_NoReplace	; if not, branch
   35847/   1BC3C : 12BC 002C           		move.b	#$2C,(a1)	; replace ghost	block with a solid block
   35848/   1BC40 :                     
   35849/   1BC40 :                     Obj09_NoReplace:
   35850/   1BC40 : 5249                		addq.w	#1,a1
   35851/   1BC42 : 51CA FFF2           		dbf	d2,Obj09_GhostLoop
   35852/   1BC46 : 43E9 0040           		lea	$40(a1),a1
   35853/   1BC4A : 51C9 FFE8           		dbf	d1,Obj09_GhostLoop2
   35854/   1BC4E :                     
   35855/   1BC4E :                     Obj09_GhostNotSolid:
   35856/   1BC4E : 4228 003A           		clr.b	$3A(a0)
   35857/   1BC52 : 7800                		moveq	#0,d4
   35858/   1BC54 : 4E75                		rts	
   35859/   1BC56 :                     ; End of function Obj09_ChkItems
   35860/   1BC56 :                     
   35861/   1BC56 :                     
   35862/   1BC56 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   35863/   1BC56 :                     
   35864/   1BC56 :                     
   35865/   1BC56 :                     Obj09_ChkItems2:			; XREF: Obj09_Display
   35866/   1BC56 : 1028 0030           		move.b	$30(a0),d0
   35867/   1BC5A : 661A                		bne.s	Obj09_ChkBumper
   35868/   1BC5C : 5328 0036           		subq.b	#1,$36(a0)
   35869/   1BC60 : 6A06                		bpl.s	loc_1BEA0
   35870/   1BC62 : 117C 0000 0036      		move.b	#0,$36(a0)
   35871/   1BC68 :                     
   35872/   1BC68 :                     loc_1BEA0:
   35873/   1BC68 : 5328 0037           		subq.b	#1,$37(a0)
   35874/   1BC6C : 6A06                		bpl.s	locret_1BEAC
   35875/   1BC6E : 117C 0000 0037      		move.b	#0,$37(a0)
   35876/   1BC74 :                     
   35877/   1BC74 :                     locret_1BEAC:
   35878/   1BC74 : 4E75                		rts	
   35879/   1BC76 :                     ; ===========================================================================
   35880/   1BC76 :                     
   35881/   1BC76 :                     Obj09_ChkBumper:
   35882/   1BC76 : 0C00 0025           		cmpi.b	#$25,d0		; is the item a	bumper?
   35883/   1BC7A : 6672                		bne.s	Obj09_GOAL
   35884/   1BC7C : 2228 0032           		move.l	$32(a0),d1
   35885/   1BC80 : 0481 00FF 0001      		subi.l	#$FF0001,d1
   35886/   1BC86 : 3401                		move.w	d1,d2
   35887/   1BC88 : 0241 007F           		andi.w	#$7F,d1
   35888/   1BC8C : C2FC 0018           		mulu.w	#$18,d1
   35889/   1BC90 : 0441 0014           		subi.w	#$14,d1
   35890/   1BC94 : EE4A                		lsr.w	#7,d2
   35891/   1BC96 : 0242 007F           		andi.w	#$7F,d2
   35892/   1BC9A : C4FC 0018           		mulu.w	#$18,d2
   35893/   1BC9E : 0442 0044           		subi.w	#$44,d2
   35894/   1BCA2 : 9268 0008           		sub.w	8(a0),d1
   35895/   1BCA6 : 9468 000C           		sub.w	$C(a0),d2
   35896/   1BCAA : 4EB9 0000 2A8E      		jsr	(CalcAngle).l
   35897/   1BCB0 : 4EB9 0000 27C0      		jsr	(CalcSine).l
   35898/   1BCB6 : C3FC F900           		muls.w	#-$700,d1
   35899/   1BCBA : E081                		asr.l	#8,d1
   35900/   1BCBC : 3141 0010           		move.w	d1,$10(a0)
   35901/   1BCC0 : C1FC F900           		muls.w	#-$700,d0
   35902/   1BCC4 : E080                		asr.l	#8,d0
   35903/   1BCC6 : 3140 0012           		move.w	d0,$12(a0)
   35904/   1BCCA : 08E8 0001 0022      		bset	#1,$22(a0)
   35905/   1BCD0 : 6100 F5B0           		bsr.w	SS_RemoveCollectedItem
   35906/   1BCD4 : 660E                		bne.s	Obj09_BumpSnd
   35907/   1BCD6 : 14BC 0002           		move.b	#2,(a2)
   35908/   1BCDA : 2028 0032           		move.l	$32(a0),d0
   35909/   1BCDE : 5380                		subq.l	#1,d0
   35910/   1BCE0 : 2540 0004           		move.l	d0,4(a2)
   35911/   1BCE4 :                     
   35912/   1BCE4 :                     Obj09_BumpSnd:
   35913/   1BCE4 : 303C 00B4           		move.w	#$B4,d0
   35914/   1BCE8 : 4EF9 0000 1182      		jmp	(PlaySound_Special).l ;	play bumper sound
   35915/   1BCEE :                     ; ===========================================================================
   35916/   1BCEE :                     
   35917/   1BCEE :                     Obj09_GOAL:
   35918/   1BCEE : 0C00 0027           		cmpi.b	#$27,d0		; is the item a	"GOAL"?
   35919/   1BCF2 : 6610                		bne.s	Obj09_UPblock
   35920/   1BCF4 : 5428 0024           		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
   35921/   1BCF8 : 303C 00A8           		move.w	#$A8,d0		; change item
   35922/   1BCFC : 4EB9 0000 1182      		jsr	(PlaySound_Special).l ;	play "GOAL" sound
   35923/   1BD02 : 4E75                		rts	
   35924/   1BD04 :                     ; ===========================================================================
   35925/   1BD04 :                     
   35926/   1BD04 :                     Obj09_UPblock:
   35927/   1BD04 : 0C00 0029           		cmpi.b	#$29,d0		; is the item an "UP" block?
   35928/   1BD08 : 662E                		bne.s	Obj09_DOWNblock
   35929/   1BD0A : 4A28 0036           		tst.b	$36(a0)
   35930/   1BD0E : 6600 00D8           		bne.w	Obj09_NoGlass
   35931/   1BD12 : 117C 001E 0036      		move.b	#$1E,$36(a0)
   35932/   1BD18 : 0838 0006 F783      		btst	#6,($FFFFF783).w
   35933/   1BD1E : 670E                		beq.s	Obj09_UPsnd
   35934/   1BD20 : E1F8 F782           		asl	($FFFFF782).w	; increase stage rotation speed
   35935/   1BD24 : 2268 0032           		movea.l	$32(a0),a1
   35936/   1BD28 : 5389                		subq.l	#1,a1
   35937/   1BD2A : 12BC 002A           		move.b	#$2A,(a1)	; change item to a "DOWN" block
   35938/   1BD2E :                     
   35939/   1BD2E :                     Obj09_UPsnd:
   35940/   1BD2E : 303C 00A9           		move.w	#$A9,d0
   35941/   1BD32 : 4EF9 0000 1182      		jmp	(PlaySound_Special).l ;	play up/down sound
   35942/   1BD38 :                     ; ===========================================================================
   35943/   1BD38 :                     
   35944/   1BD38 :                     Obj09_DOWNblock:
   35945/   1BD38 : 0C00 002A           		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
   35946/   1BD3C : 662E                		bne.s	Obj09_Rblock
   35947/   1BD3E : 4A28 0036           		tst.b	$36(a0)
   35948/   1BD42 : 6600 00A4           		bne.w	Obj09_NoGlass
   35949/   1BD46 : 117C 001E 0036      		move.b	#$1E,$36(a0)
   35950/   1BD4C : 0838 0006 F783      		btst	#6,($FFFFF783).w
   35951/   1BD52 : 660E                		bne.s	Obj09_DOWNsnd
   35952/   1BD54 : E0F8 F782           		asr	($FFFFF782).w	; reduce stage rotation	speed
   35953/   1BD58 : 2268 0032           		movea.l	$32(a0),a1
   35954/   1BD5C : 5389                		subq.l	#1,a1
   35955/   1BD5E : 12BC 0029           		move.b	#$29,(a1)	; change item to an "UP" block
   35956/   1BD62 :                     
   35957/   1BD62 :                     Obj09_DOWNsnd:
   35958/   1BD62 : 303C 00A9           		move.w	#$A9,d0
   35959/   1BD66 : 4EF9 0000 1182      		jmp	(PlaySound_Special).l ;	play up/down sound
   35960/   1BD6C :                     ; ===========================================================================
   35961/   1BD6C :                     
   35962/   1BD6C :                     Obj09_Rblock:
   35963/   1BD6C : 0C00 002B           		cmpi.b	#$2B,d0		; is the item an "R" block?
   35964/   1BD70 : 6630                		bne.s	Obj09_ChkGlass
   35965/   1BD72 : 4A28 0037           		tst.b	$37(a0)
   35966/   1BD76 : 6600 0070           		bne.w	Obj09_NoGlass
   35967/   1BD7A : 117C 001E 0037      		move.b	#$1E,$37(a0)
   35968/   1BD80 : 6100 F500           		bsr.w	SS_RemoveCollectedItem
   35969/   1BD84 : 660E                		bne.s	Obj09_RevStage
   35970/   1BD86 : 14BC 0004           		move.b	#4,(a2)
   35971/   1BD8A : 2028 0032           		move.l	$32(a0),d0
   35972/   1BD8E : 5380                		subq.l	#1,d0
   35973/   1BD90 : 2540 0004           		move.l	d0,4(a2)
   35974/   1BD94 :                     
   35975/   1BD94 :                     Obj09_RevStage:
   35976/   1BD94 : 4478 F782           		neg.w	($FFFFF782).w	; reverse stage	rotation
   35977/   1BD98 : 303C 00A9           		move.w	#$A9,d0
   35978/   1BD9C : 4EF9 0000 1182      		jmp	(PlaySound_Special).l ;	play sound
   35979/   1BDA2 :                     ; ===========================================================================
   35980/   1BDA2 :                     
   35981/   1BDA2 :                     Obj09_ChkGlass:
   35982/   1BDA2 : 0C00 002D           		cmpi.b	#$2D,d0		; is the item a	glass block?
   35983/   1BDA6 : 6712                		beq.s	Obj09_Glass	; if yes, branch
   35984/   1BDA8 : 0C00 002E           		cmpi.b	#$2E,d0
   35985/   1BDAC : 670C                		beq.s	Obj09_Glass
   35986/   1BDAE : 0C00 002F           		cmpi.b	#$2F,d0
   35987/   1BDB2 : 6706                		beq.s	Obj09_Glass
   35988/   1BDB4 : 0C00 0030           		cmpi.b	#$30,d0
   35989/   1BDB8 : 662E                		bne.s	Obj09_NoGlass	; if not, branch
   35990/   1BDBA :                     
   35991/   1BDBA :                     Obj09_Glass:
   35992/   1BDBA : 6100 F4C6           		bsr.w	SS_RemoveCollectedItem
   35993/   1BDBE : 661E                		bne.s	Obj09_GlassSnd
   35994/   1BDC0 : 14BC 0006           		move.b	#6,(a2)
   35995/   1BDC4 : 2268 0032           		movea.l	$32(a0),a1
   35996/   1BDC8 : 5389                		subq.l	#1,a1
   35997/   1BDCA : 2549 0004           		move.l	a1,4(a2)
   35998/   1BDCE : 1011                		move.b	(a1),d0
   35999/   1BDD0 : 5200                		addq.b	#1,d0		; change glass type when touched
   36000/   1BDD2 : 0C00 0030           		cmpi.b	#$30,d0
   36001/   1BDD6 : 6302                		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
   36002/   1BDD8 : 4200                		clr.b	d0		; remove the glass block when it's destroyed
   36003/   1BDDA :                     
   36004/   1BDDA :                     Obj09_GlassUpdate:
   36005/   1BDDA : 1540 0004           		move.b	d0,4(a2)	; update the stage layout
   36006/   1BDDE :                     
   36007/   1BDDE :                     Obj09_GlassSnd:
   36008/   1BDDE : 303C 00BA           		move.w	#$BA,d0
   36009/   1BDE2 : 4EF9 0000 1182      		jmp	(PlaySound_Special).l ;	play glass block sound
   36010/   1BDE8 :                     ; ===========================================================================
   36011/   1BDE8 :                     
   36012/   1BDE8 :                     Obj09_NoGlass:
   36013/   1BDE8 : 4E75                		rts	
   36014/   1BDEA :                     ; End of function Obj09_ChkItems2
   36015/   1BDEA :                     
   36016/   1BDEA :                     ; ===========================================================================
   36017/   1BDEA :                     ; ---------------------------------------------------------------------------
   36018/   1BDEA :                     ; Object 10 - blank
   36019/   1BDEA :                     ; ---------------------------------------------------------------------------
   36020/   1BDEA :                     
   36021/   1BDEA :                     Obj10:					; XREF: Obj_Index
   36022/   1BDEA : 4E75                		rts	
   36023/   1BDEC :                     
   36024/   1BDEC :                     ; ===========================================================================
   36025/   1BDEC :                     ; ---------------------------------------------------------------------------
   36026/   1BDEC :                     ; Object 03 - Collision plane/layer switcher (From Sonic 2 [Modified])
   36027/   1BDEC :                     ; ---------------------------------------------------------------------------
   36028/   1BDEC :                     
   36029/   1BDEC :                     Obj03:
   36030/   1BDEC : 7000                		moveq	#0,d0
   36031/   1BDEE : 1028 0024           		move.b	$24(a0),d0
   36032/   1BDF2 : 323B 002A           		move.w	Obj03_Index(pc,d0.w),d1
   36033/   1BDF6 : 4EBB 1026           		jsr	Obj03_Index(pc,d1.w)
   36034/   1BDFA : 3028 0008           		move.w	8(a0),d0
   36035/   1BDFE : 0240 FF80           		andi.w	#$FF80,d0
   36036/   1BE02 : 3238 F700           		move.w	($FFFFF700).w,d1
   36037/   1BE06 : 0441 0080           		subi.w	#$80,d1
   36038/   1BE0A : 0241 FF80           		andi.w	#$FF80,d1
   36039/   1BE0E : 9041                		sub.w	d1,d0
   36040/   1BE10 : 0C40 0280           		cmpi.w	#$280,d0
   36041/   1BE14 : 6202                		bhi.s	Obj03_MarkChkGone
   36042/   1BE16 : 4E75                		rts
   36043/   1BE18 :                     
   36044/   1BE18 :                     Obj03_MarkChkGone:
   36045/   1BE18 : 4EF9 0000 F48C      		jmp	Mark_ChkGone
   36046/   1BE1E :                     ; ===========================================================================
   36047/   1BE1E :                     ; ---------------------------------------------------------------------------
   36048/   1BE1E : 0006                Obj03_Index:	dc.w Obj03_Init-Obj03_Index
   36049/   1BE20 : 0090                		dc.w Obj03_MainX-Obj03_Index
   36050/   1BE22 : 017C                		dc.w Obj03_MainY-Obj03_Index
   36051/   1BE24 :                     ; ---------------------------------------------------------------------------
   36052/   1BE24 :                     ; ===========================================================================
   36053/   1BE24 :                     ; ---------------------------------------------------------------------------
   36054/   1BE24 :                     ; Initiation
   36055/   1BE24 :                     ; ---------------------------------------------------------------------------
   36056/   1BE24 :                     
   36057/   1BE24 :                     Obj03_Init:
   36058/   1BE24 : 5428 0024           		addq.b	#2,$24(a0)
   36059/   1BE28 : 217C 0000 0000      		move.l	#$00000000,$04(a0)
            1BE2E : 0004             
   36060/   1BE30 : 317C 26BC 0002      		move.w	#$26BC,$02(a0)
   36061/   1BE36 : 0028 0004 0001      		ori.b	#4,$01(a0)
   36062/   1BE3C : 117C 0010 0019      		move.b	#$10,$19(a0)
   36063/   1BE42 : 117C 0005 0018      		move.b	#5,$18(a0)
   36064/   1BE48 : 1028 0028           		move.b	$28(a0),d0
   36065/   1BE4C : 0800 0002           		btst	#2,d0
   36066/   1BE50 : 6738                		beq.s	Obj03_Init_CheckX
   36067/   1BE52 :                     
   36068/   1BE52 :                     ;Obj03_Init_CheckY:
   36069/   1BE52 : 5428 0024           		addq.b	#2,$24(a0) ; => Obj03_MainY
   36070/   1BE56 : 0240 0007           		andi.w	#7,d0
   36071/   1BE5A : 1140 001A           		move.b	d0,$1A(a0)
   36072/   1BE5E : 0240 0003           		andi.w	#3,d0
   36073/   1BE62 : D040                		add.w	d0,d0
   36074/   1BE64 : 317B 001C 0032      		move.w	word_1FD68(pc,d0.w),$32(a0)
   36075/   1BE6A : 3228 000C           		move.w	$0C(a0),d1
   36076/   1BE6E : 43F8 D000           		lea	($FFFFD000).w,a1 ; a1=character
   36077/   1BE72 : B269 000C           		cmp.w	$0C(a1),d1
   36078/   1BE76 : 6406                		bcc.s	Obj03_Init_Next
   36079/   1BE78 : 117C 0001 0034      		move.b	#1,$34(a0)
   36080/   1BE7E :                     Obj03_Init_Next:
   36081/   1BE7E :                     	;	lea	(Sidekick).w,a1 ; a1=character
   36082/   1BE7E :                     	;	cmp.w	$0C(a1),d1
   36083/   1BE7E :                     	;	bcc.s	+
   36084/   1BE7E :                     	;	move.b	#1,$35(a0)
   36085/   1BE7E :                     ;+
   36086/   1BE7E : 6000 011A           		bra.w	Obj03_MainY
   36087/   1BE82 :                     ; ===========================================================================
   36088/   1BE82 :                     word_1FD68:
   36089/   1BE82 : 0020                	dc.w  $020
   36090/   1BE84 : 0040                	dc.w  $040	; 1
   36091/   1BE86 : 0080                	dc.w  $080	; 2
   36092/   1BE88 : 0100                	dc.w  $100	; 3
   36093/   1BE8A :                     ; ===========================================================================
   36094/   1BE8A :                     ; loc_1FD70:
   36095/   1BE8A :                     Obj03_Init_CheckX:
   36096/   1BE8A : 0240 0003           		andi.w	#3,d0
   36097/   1BE8E : 1140 001A           		move.b	d0,$1A(a0)
   36098/   1BE92 : D040                		add.w	d0,d0
   36099/   1BE94 : 317B 00EC 0032      		move.w	word_1FD68(pc,d0.w),$32(a0)
   36100/   1BE9A : 3228 0008           		move.w	$08(a0),d1
   36101/   1BE9E : 43F8 D000           		lea	($FFFFD000).w,a1 ; a1=character
   36102/   1BEA2 : B269 0008           		cmp.w	$08(a1),d1
   36103/   1BEA6 : 6406                		bcc.s	Obj03_Init_CheckX_Next
   36104/   1BEA8 : 117C 0001 0034      		move.b	#1,$34(a0)
   36105/   1BEAE :                     Obj03_Init_CheckX_Next:
   36106/   1BEAE :                     	;	lea	(Sidekick).w,a1 ; a1=character
   36107/   1BEAE :                     	;	cmp.w	$08(a1),d1
   36108/   1BEAE :                     	;	bcc.s	+
   36109/   1BEAE :                     	;	move.b	#1,$35(a0)
   36110/   1BEAE :                     ;+
   36111/   1BEAE :                     
   36112/   1BEAE :                     Obj03_MainX:
   36113/   1BEAE : 4A78 FE08           		tst.w	($FFFFFE08).w
   36114/   1BEB2 : 6600 00E4           		bne.w	return_1FEAC
   36115/   1BEB6 : 3228 0008           		move.w	$08(a0),d1
   36116/   1BEBA : 45E8 0034           		lea	$34(a0),a2
   36117/   1BEBE : 43F8 D000           		lea	($FFFFD000).w,a1 ; a1=character
   36118/   1BEC2 :                     ;		bsr.s	+
   36119/   1BEC2 :                     ;		lea	(Sidekick).w,a1 ; a1=character
   36120/   1BEC2 :                     
   36121/   1BEC2 :                     ;+
   36122/   1BEC2 : 4A1A                		tst.b	(a2)+
   36123/   1BEC4 : 666A                		bne.s	Obj03_MainX_Alt
   36124/   1BEC6 : B269 0008           		cmp.w	$08(a1),d1
   36125/   1BECA : 6200 00CC           		bhi.w	return_1FEAC
   36126/   1BECE : 157C 0001 FFFF      		move.b	#1,-1(a2)
   36127/   1BED4 : 3428 000C           		move.w	$0C(a0),d2
   36128/   1BED8 : 3602                		move.w	d2,d3
   36129/   1BEDA : 3828 0032           		move.w	$32(a0),d4
   36130/   1BEDE : 9444                		sub.w	d4,d2
   36131/   1BEE0 : D644                		add.w	d4,d3
   36132/   1BEE2 : 3829 000C           		move.w	$0C(a1),d4
   36133/   1BEE6 : B842                		cmp.w	d2,d4
   36134/   1BEE8 : 6D00 00AE           		blt.w	return_1FEAC
   36135/   1BEEC : B843                		cmp.w	d3,d4
   36136/   1BEEE : 6C00 00A8           		bge.w	return_1FEAC
   36137/   1BEF2 : 1028 0028           		move.b	$28(a0),d0
   36138/   1BEF6 : 6A0A                		bpl.s	Obj03_ICX_B1
   36139/   1BEF8 : 0829 0001 002B      		btst	#1,$2B(a1)
   36140/   1BEFE : 6600 0098           		bne.w	return_1FEAC
   36141/   1BF02 :                     
   36142/   1BF02 :                     Obj03_ICX_B1:
   36143/   1BF02 : 0828 0000 0001      		btst	#0,$01(a0)
   36144/   1BF08 : 6612                		bne.s	Obj03_ICX_B2
   36145/   1BF0A : 11FC 0000 FFF7      			move.b	#$00,($FFFFFFF7).w
   36146/   1BF10 :                     	;	move.b	#$C,$3E(a1)
   36147/   1BF10 :                     	;	move.b	#$D,$3F(a1)
   36148/   1BF10 : 0800 0003           		btst	#3,d0
   36149/   1BF14 : 6706                		beq.s	Obj03_ICX_B2
   36150/   1BF16 : 11FC 0001 FFF7      			move.b	#$01,($FFFFFFF7).w
   36151/   1BF1C :                     	;	move.b	#$E,$3E(a1)
   36152/   1BF1C :                     	;	move.b	#$F,$3F(a1)
   36153/   1BF1C :                     
   36154/   1BF1C :                     Obj03_ICX_B2:
   36155/   1BF1C : 0269 7FFF 0002      		andi.w	#$7FFF,$02(a1)
   36156/   1BF22 : 0800 0005           		btst	#5,d0
   36157/   1BF26 : 6770                		beq.s	return_1FEAC
   36158/   1BF28 : 0069 8000 0002      		ori.w	#$8000,$02(a1)
   36159/   1BF2E : 6068                		bra.s	return_1FEAC
   36160/   1BF30 :                     ; ===========================================================================
   36161/   1BF30 :                     
   36162/   1BF30 :                     Obj03_MainX_Alt:
   36163/   1BF30 : B269 0008           		cmp.w	$08(a1),d1
   36164/   1BF34 : 6300 0062           		bls.w	return_1FEAC
   36165/   1BF38 : 157C 0000 FFFF      		move.b	#0,-1(a2)
   36166/   1BF3E : 3428 000C           		move.w	$0C(a0),d2
   36167/   1BF42 : 3602                		move.w	d2,d3
   36168/   1BF44 : 3828 0032           		move.w	$32(a0),d4
   36169/   1BF48 : 9444                		sub.w	d4,d2
   36170/   1BF4A : D644                		add.w	d4,d3
   36171/   1BF4C : 3829 000C           		move.w	$0C(a1),d4
   36172/   1BF50 : B842                		cmp.w	d2,d4
   36173/   1BF52 : 6D00 0044           		blt.w	return_1FEAC
   36174/   1BF56 : B843                		cmp.w	d3,d4
   36175/   1BF58 : 6C00 003E           		bge.w	return_1FEAC
   36176/   1BF5C : 1028 0028           		move.b	$28(a0),d0
   36177/   1BF60 : 6A0A                		bpl.s	Obj03_MXA_B1
   36178/   1BF62 : 0829 0001 002B      		btst	#1,$2B(a1)
   36179/   1BF68 : 6600 002E           		bne.w	return_1FEAC
   36180/   1BF6C :                     
   36181/   1BF6C :                     Obj03_MXA_B1:
   36182/   1BF6C : 0828 0000 0001      		btst	#0,$01(a0)
   36183/   1BF72 : 6612                		bne.s	Obj03_MXA_B2
   36184/   1BF74 : 11FC 0000 FFF7      			move.b	#$00,($FFFFFFF7).w
   36185/   1BF7A :                     	;	move.b	#$C,$3E(a1)
   36186/   1BF7A :                     	;	move.b	#$D,$3F(a1)
   36187/   1BF7A : 0800 0004           		btst	#4,d0
   36188/   1BF7E : 6706                		beq.s	Obj03_MXA_B2
   36189/   1BF80 : 11FC 0001 FFF7      			move.b	#$01,($FFFFFFF7).w
   36190/   1BF86 :                     	;	move.b	#$E,$3E(a1)
   36191/   1BF86 :                     	;	move.b	#$F,$3F(a1)
   36192/   1BF86 :                     
   36193/   1BF86 :                     Obj03_MXA_B2:
   36194/   1BF86 : 0269 7FFF 0002      		andi.w	#$7FFF,$02(a1)
   36195/   1BF8C : 0800 0006           		btst	#6,d0
   36196/   1BF90 : 6706                		beq.s	return_1FEAC
   36197/   1BF92 : 0069 8000 0002      		ori.w	#$8000,$02(a1)
   36198/   1BF98 :                     
   36199/   1BF98 :                     return_1FEAC:
   36200/   1BF98 : 4E75                		rts
   36201/   1BF9A :                     
   36202/   1BF9A :                     ; ===========================================================================
   36203/   1BF9A :                     
   36204/   1BF9A :                     Obj03_MainY:
   36205/   1BF9A : 4A78 FE08           		tst.w	($FFFFFE08).w
   36206/   1BF9E : 6600 00E4           		bne.w	return_1FFB6
   36207/   1BFA2 : 3228 000C           		move.w	$0C(a0),d1
   36208/   1BFA6 : 45E8 0034           		lea	$34(a0),a2
   36209/   1BFAA : 43F8 D000           		lea	($FFFFD000).w,a1 ; a1=character
   36210/   1BFAE :                     ;		bsr.s	+
   36211/   1BFAE :                     ;		lea	(Sidekick).w,a1 ; a1=character
   36212/   1BFAE :                     
   36213/   1BFAE :                     ;+
   36214/   1BFAE : 4A1A                		tst.b	(a2)+
   36215/   1BFB0 : 666A                		bne.s	Obj03_MainY_Alt
   36216/   1BFB2 : B269 000C           		cmp.w	$0C(a1),d1
   36217/   1BFB6 : 6200 00CC           		bhi.w	return_1FFB6
   36218/   1BFBA : 157C 0001 FFFF      		move.b	#1,-1(a2)
   36219/   1BFC0 : 3428 0008           		move.w	$08(a0),d2
   36220/   1BFC4 : 3602                		move.w	d2,d3
   36221/   1BFC6 : 3828 0032           		move.w	$32(a0),d4
   36222/   1BFCA : 9444                		sub.w	d4,d2
   36223/   1BFCC : D644                		add.w	d4,d3
   36224/   1BFCE : 3829 0008           		move.w	$08(a1),d4
   36225/   1BFD2 : B842                		cmp.w	d2,d4
   36226/   1BFD4 : 6D00 00AE           		blt.w	return_1FFB6
   36227/   1BFD8 : B843                		cmp.w	d3,d4
   36228/   1BFDA : 6C00 00A8           		bge.w	return_1FFB6
   36229/   1BFDE : 1028 0028           		move.b	$28(a0),d0
   36230/   1BFE2 : 6A0A                		bpl.s	Obj03_MY_B1
   36231/   1BFE4 : 0829 0001 002B      		btst	#1,$2B(a1)
   36232/   1BFEA : 6600 0098           		bne.w	return_1FFB6
   36233/   1BFEE :                     
   36234/   1BFEE :                     Obj03_MY_B1:
   36235/   1BFEE : 0828 0000 0001      		btst	#0,$01(a0)
   36236/   1BFF4 : 6612                		bne.s	Obj03_MY_B2
   36237/   1BFF6 : 11FC 0000 FFF7      			move.b	#$00,($FFFFFFF7).w
   36238/   1BFFC :                     	;	move.b	#$C,$3E(a1)
   36239/   1BFFC :                     	;	move.b	#$D,$3F(a1)
   36240/   1BFFC : 0800 0003           		btst	#3,d0
   36241/   1C000 : 6706                		beq.s	Obj03_MY_B2
   36242/   1C002 : 11FC 0001 FFF7      			move.b	#$01,($FFFFFFF7).w
   36243/   1C008 :                     	;	move.b	#$E,$3E(a1)
   36244/   1C008 :                     	;	move.b	#$F,$3F(a1)
   36245/   1C008 :                     
   36246/   1C008 :                     Obj03_MY_B2:
   36247/   1C008 : 0269 7FFF 0002      		andi.w	#$7FFF,$02(a1)
   36248/   1C00E : 0800 0005           		btst	#5,d0
   36249/   1C012 : 6770                		beq.s	return_1FFB6
   36250/   1C014 : 0069 8000 0002      		ori.w	#$8000,$02(a1)
   36251/   1C01A : 6068                		bra.s	return_1FFB6
   36252/   1C01C :                     
   36253/   1C01C :                     ; ===========================================================================
   36254/   1C01C :                     
   36255/   1C01C :                     Obj03_MainY_Alt:
   36256/   1C01C : B269 000C           		cmp.w	$0C(a1),d1
   36257/   1C020 : 6300 0062           		bls.w	return_1FFB6
   36258/   1C024 : 157C 0000 FFFF      		move.b	#0,-1(a2)
   36259/   1C02A : 3428 0008           		move.w	$08(a0),d2
   36260/   1C02E : 3602                		move.w	d2,d3
   36261/   1C030 : 3828 0032           		move.w	$32(a0),d4
   36262/   1C034 : 9444                		sub.w	d4,d2
   36263/   1C036 : D644                		add.w	d4,d3
   36264/   1C038 : 3829 0008           		move.w	$08(a1),d4
   36265/   1C03C : B842                		cmp.w	d2,d4
   36266/   1C03E : 6D00 0044           		blt.w	return_1FFB6
   36267/   1C042 : B843                		cmp.w	d3,d4
   36268/   1C044 : 6C00 003E           		bge.w	return_1FFB6
   36269/   1C048 : 1028 0028           		move.b	$28(a0),d0
   36270/   1C04C : 6A0A                		bpl.s	Obj03_MYA_B1
   36271/   1C04E : 0829 0001 002B      		btst	#1,$2B(a1)
   36272/   1C054 : 6600 002E           		bne.w	return_1FFB6
   36273/   1C058 :                     
   36274/   1C058 :                     Obj03_MYA_B1
   36275/   1C058 : 0828 0000 0001      		btst	#0,$01(a0)
   36276/   1C05E : 6612                		bne.s	Obj03_MYA_B2
   36277/   1C060 : 11FC 0000 FFF7      			move.b	#$00,($FFFFFFF7).w
   36278/   1C066 :                     	;	move.b	#$C,$3E(a1)
   36279/   1C066 :                     	;	move.b	#$D,$3F(a1)
   36280/   1C066 : 0800 0004           		btst	#4,d0
   36281/   1C06A : 6706                		beq.s	Obj03_MYA_B2
   36282/   1C06C : 11FC 0001 FFF7      			move.b	#$01,($FFFFFFF7).w
   36283/   1C072 :                     	;	move.b	#$E,$3E(a1)
   36284/   1C072 :                     	;	move.b	#$F,$3F(a1)
   36285/   1C072 :                     
   36286/   1C072 :                     Obj03_MYA_B2:
   36287/   1C072 : 0269 7FFF 0002      		andi.w	#$7FFF,$02(a1)
   36288/   1C078 : 0800 0006           		btst	#6,d0
   36289/   1C07C : 6706                		beq.s	return_1FFB6
   36290/   1C07E : 0069 8000 0002      		ori.w	#$8000,$02(a1)
   36291/   1C084 :                     
   36292/   1C084 :                     return_1FFB6:
   36293/   1C084 : 4E75                		rts
   36294/   1C086 :                     
   36295/   1C086 :                     ; ===========================================================================
   36296/   1C086 :                     ; ---------------------------------------------------------------------------
   36297/   1C086 :                     ; Subroutine to	animate	level graphics
   36298/   1C086 :                     ; ---------------------------------------------------------------------------
   36299/   1C086 :                     
   36300/   1C086 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   36301/   1C086 :                     
   36302/   1C086 :                     
   36303/   1C086 :                     AniArt_Load:				; XREF: Demo_Time; loc_F54
   36304/   1C086 : 4A78 F63A           		tst.w	($FFFFF63A).w	; is the game paused?
   36305/   1C08A : 661A                		bne.s	AniArt_Pause	; if yes, branch
   36306/   1C08C : 4DF9 00C0 0000      		lea	($C00000).l,a6
   36307/   1C092 : 6100 04D8           		bsr.w	AniArt_GiantRing
   36308/   1C096 : 7000                		moveq	#0,d0
   36309/   1C098 : 1038 FE10           		move.b	($FFFFFE10).w,d0
   36310/   1C09C : D040                		add.w	d0,d0
   36311/   1C09E : 303B 0008           		move.w	AniArt_Index(pc,d0.w),d0
   36312/   1C0A2 : 4EFB 0004           		jmp	AniArt_Index(pc,d0.w)
   36313/   1C0A6 :                     ; ===========================================================================
   36314/   1C0A6 :                     
   36315/   1C0A6 :                     AniArt_Pause:
   36316/   1C0A6 : 4E75                		rts	
   36317/   1C0A8 :                     ; End of function AniArt_Load
   36318/   1C0A8 :                     
   36319/   1C0A8 :                     ; ===========================================================================
   36320/   1C0A8 : 000E 0370           AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
   36321/   1C0AC : 00CC 0370           		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
   36322/   1C0B0 : 0370 01A6           		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
   36323/   1C0B4 : 025C                		dc.w AniArt_Ending-AniArt_Index
   36324/   1C0B6 :                     ; ===========================================================================
   36325/   1C0B6 :                     ; ---------------------------------------------------------------------------
   36326/   1C0B6 :                     ; Animated pattern routine - Green Hill
   36327/   1C0B6 :                     ; ---------------------------------------------------------------------------
   36328/   1C0B6 :                     
   36329/   1C0B6 :                     AniArt_GHZ:				; XREF: AniArt_Index
   36330/   1C0B6 : 5338 F7B1           		subq.b	#1,($FFFFF7B1).w
   36331/   1C0BA : 6A30                		bpl.s	loc_1C08A
   36332/   1C0BC : 11FC 0005 F7B1      		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
   36333/   1C0C2 : 43F9 0006 8C36      		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
   36334/   1C0C8 : 1038 F7B0           		move.b	($FFFFF7B0).w,d0
   36335/   1C0CC : 5238 F7B0           		addq.b	#1,($FFFFF7B0).w
   36336/   1C0D0 : 0240 0001           		andi.w	#1,d0
   36337/   1C0D4 : 6704                		beq.s	loc_1C078
   36338/   1C0D6 : 43E9 0100           		lea	$100(a1),a1	; load next frame
   36339/   1C0DA :                     
   36340/   1C0DA :                     loc_1C078:
   36341/   1C0DA : 23FC 6F00 0001      		move.l	#$6F000001,($C00004).l ; VRAM address
            1C0E0 : 00C0 0004          
   36342/   1C0E4 : 323C 0007           		move.w	#7,d1		; number of 8x8	tiles
   36343/   1C0E8 : 6000 0330           		bra.w	LoadTiles
   36344/   1C0EC :                     ; ===========================================================================
   36345/   1C0EC :                     
   36346/   1C0EC :                     loc_1C08A:
   36347/   1C0EC : 5338 F7B3           		subq.b	#1,($FFFFF7B3).w
   36348/   1C0F0 : 6A30                		bpl.s	loc_1C0C0
   36349/   1C0F2 : 11FC 000F F7B3      		move.b	#$F,($FFFFF7B3).w
   36350/   1C0F8 : 43F9 0006 8E36      		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
   36351/   1C0FE : 1038 F7B2           		move.b	($FFFFF7B2).w,d0
   36352/   1C102 : 5238 F7B2           		addq.b	#1,($FFFFF7B2).w
   36353/   1C106 : 0240 0001           		andi.w	#1,d0
   36354/   1C10A : 6704                		beq.s	loc_1C0AE
   36355/   1C10C : 43E9 0200           		lea	$200(a1),a1
   36356/   1C110 :                     
   36357/   1C110 :                     loc_1C0AE:
   36358/   1C110 : 23FC 6B80 0001      		move.l	#$6B800001,($C00004).l
            1C116 : 00C0 0004          
   36359/   1C11A : 323C 000F           		move.w	#$F,d1
   36360/   1C11E : 6000 02FA           		bra.w	LoadTiles
   36361/   1C122 :                     ; ===========================================================================
   36362/   1C122 :                     
   36363/   1C122 :                     loc_1C0C0:
   36364/   1C122 : 5338 F7B5           		subq.b	#1,($FFFFF7B5).w
   36365/   1C126 : 6A46                		bpl.s	locret_1C10C
   36366/   1C128 : 11FC 0007 F7B5      		move.b	#7,($FFFFF7B5).w
   36367/   1C12E : 1038 F7B4           		move.b	($FFFFF7B4).w,d0
   36368/   1C132 : 5238 F7B4           		addq.b	#1,($FFFFF7B4).w
   36369/   1C136 : 0240 0003           		andi.w	#3,d0
   36370/   1C13A : 103B 0034           		move.b	byte_1C10E(pc,d0.w),d0
   36371/   1C13E : 0800 0000           		btst	#0,d0
   36372/   1C142 : 6606                		bne.s	loc_1C0E8
   36373/   1C144 : 11FC 007F F7B5      		move.b	#$7F,($FFFFF7B5).w
   36374/   1C14A :                     
   36375/   1C14A :                     loc_1C0E8:
   36376/   1C14A : EF48                		lsl.w	#7,d0
   36377/   1C14C : 3200                		move.w	d0,d1
   36378/   1C14E : D040                		add.w	d0,d0
   36379/   1C150 : D041                		add.w	d1,d0
   36380/   1C152 : 23FC 6D80 0001      		move.l	#$6D800001,($C00004).l
            1C158 : 00C0 0004          
   36381/   1C15C : 43F9 0006 9236      		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
   36382/   1C162 : 43F1 0000           		lea	(a1,d0.w),a1
   36383/   1C166 : 323C 000B           		move.w	#$B,d1
   36384/   1C16A : 6100 02AE           		bsr.w	LoadTiles
   36385/   1C16E :                     
   36386/   1C16E :                     locret_1C10C:
   36387/   1C16E : 4E75                		rts	
   36388/   1C170 :                     ; ===========================================================================
   36389/   1C170 : 0001 0201           byte_1C10E:	dc.b 0,	1, 2, 1
   36390/   1C174 :                     ; ===========================================================================
   36391/   1C174 :                     ; ---------------------------------------------------------------------------
   36392/   1C174 :                     ; Animated pattern routine - Marble
   36393/   1C174 :                     ; ---------------------------------------------------------------------------
   36394/   1C174 :                     
   36395/   1C174 :                     AniArt_MZ:				; XREF: AniArt_Index
   36396/   1C174 : 5338 F7B1           		subq.b	#1,($FFFFF7B1).w
   36397/   1C178 : 6A38                		bpl.s	loc_1C150
   36398/   1C17A : 11FC 0013 F7B1      		move.b	#$13,($FFFFF7B1).w
   36399/   1C180 : 43F9 0006 96B6      		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
   36400/   1C186 : 7000                		moveq	#0,d0
   36401/   1C188 : 1038 F7B0           		move.b	($FFFFF7B0).w,d0
   36402/   1C18C : 5200                		addq.b	#1,d0
   36403/   1C18E : 0C00 0003           		cmpi.b	#3,d0
   36404/   1C192 : 6602                		bne.s	loc_1C134
   36405/   1C194 : 7000                		moveq	#0,d0
   36406/   1C196 :                     
   36407/   1C196 :                     loc_1C134:
   36408/   1C196 : 11C0 F7B0           		move.b	d0,($FFFFF7B0).w
   36409/   1C19A : C0FC 0100           		mulu.w	#$100,d0
   36410/   1C19E : D2C0                		adda.w	d0,a1
   36411/   1C1A0 : 23FC 5C40 0001      		move.l	#$5C400001,($C00004).l
            1C1A6 : 00C0 0004          
   36412/   1C1AA : 323C 0007           		move.w	#7,d1
   36413/   1C1AE : 6100 026A           		bsr.w	LoadTiles
   36414/   1C1B2 :                     
   36415/   1C1B2 :                     loc_1C150:
   36416/   1C1B2 : 5338 F7B3           		subq.b	#1,($FFFFF7B3).w
   36417/   1C1B6 : 6A58                		bpl.s	loc_1C1AE
   36418/   1C1B8 : 11FC 0001 F7B3      		move.b	#1,($FFFFF7B3).w
   36419/   1C1BE : 7000                		moveq	#0,d0
   36420/   1C1C0 : 1038 F7B0           		move.b	($FFFFF7B0).w,d0
   36421/   1C1C4 : 49F9 0006 99B6      		lea	(Art_MzLava2).l,a4 ; load lava patterns
   36422/   1C1CA : EE58                		ror.w	#7,d0
   36423/   1C1CC : D8C0                		adda.w	d0,a4
   36424/   1C1CE : 23FC 5A40 0001      		move.l	#$5A400001,($C00004).l
            1C1D4 : 00C0 0004          
   36425/   1C1D8 : 7600                		moveq	#0,d3
   36426/   1C1DA : 1638 F7B2           		move.b	($FFFFF7B2).w,d3
   36427/   1C1DE : 5238 F7B2           		addq.b	#1,($FFFFF7B2).w
   36428/   1C1E2 : 1638 FE68           		move.b	($FFFFFE68).w,d3
   36429/   1C1E6 : 343C 0003           		move.w	#3,d2
   36430/   1C1EA :                     
   36431/   1C1EA :                     loc_1C188:
   36432/   1C1EA : 3003                		move.w	d3,d0
   36433/   1C1EC : D040                		add.w	d0,d0
   36434/   1C1EE : 0240 001E           		andi.w	#$1E,d0
   36435/   1C1F2 : 47F9 0001 C430      		lea	(AniArt_MZextra).l,a3
   36436/   1C1F8 : 3033 0000           		move.w	(a3,d0.w),d0
   36437/   1C1FC : 47F3 0000           		lea	(a3,d0.w),a3
   36438/   1C200 : 224C                		movea.l	a4,a1
   36439/   1C202 : 323C 001F           		move.w	#$1F,d1
   36440/   1C206 : 4E93                		jsr	(a3)
   36441/   1C208 : 5843                		addq.w	#4,d3
   36442/   1C20A : 51CA FFDE           		dbf	d2,loc_1C188
   36443/   1C20E : 4E75                		rts	
   36444/   1C210 :                     ; ===========================================================================
   36445/   1C210 :                     
   36446/   1C210 :                     loc_1C1AE:
   36447/   1C210 : 5338 F7B5           		subq.b	#1,($FFFFF7B5).w
   36448/   1C214 : 6A00 0036           		bpl.w	locret_1C1EA
   36449/   1C218 : 11FC 0007 F7B5      		move.b	#7,($FFFFF7B5).w
   36450/   1C21E : 43F9 0006 9FB6      		lea	(Art_MzTorch).l,a1 ; load torch	patterns
   36451/   1C224 : 7000                		moveq	#0,d0
   36452/   1C226 : 1038 F7B6           		move.b	($FFFFF7B6).w,d0
   36453/   1C22A : 5238 F7B6           		addq.b	#1,($FFFFF7B6).w
   36454/   1C22E : 0238 0003 F7B6      		andi.b	#3,($FFFFF7B6).w
   36455/   1C234 : C0FC 00C0           		mulu.w	#$C0,d0
   36456/   1C238 : D2C0                		adda.w	d0,a1
   36457/   1C23A : 23FC 5E40 0001      		move.l	#$5E400001,($C00004).l
            1C240 : 00C0 0004          
   36458/   1C244 : 323C 0005           		move.w	#5,d1
   36459/   1C248 : 6000 01D0           		bra.w	LoadTiles
   36460/   1C24C :                     ; ===========================================================================
   36461/   1C24C :                     
   36462/   1C24C :                     locret_1C1EA:
   36463/   1C24C : 4E75                		rts	
   36464/   1C24E :                     ; ===========================================================================
   36465/   1C24E :                     ; ---------------------------------------------------------------------------
   36466/   1C24E :                     ; Animated pattern routine - Scrap Brain
   36467/   1C24E :                     ; ---------------------------------------------------------------------------
   36468/   1C24E :                     
   36469/   1C24E :                     AniArt_SBZ:				; XREF: AniArt_Index
   36470/   1C24E : 4A38 F7B4           		tst.b	($FFFFF7B4).w
   36471/   1C252 : 6706                		beq.s	loc_1C1F8
   36472/   1C254 : 5338 F7B4           		subq.b	#1,($FFFFF7B4).w
   36473/   1C258 : 6058                		bra.s	loc_1C250
   36474/   1C25A :                     ; ===========================================================================
   36475/   1C25A :                     
   36476/   1C25A :                     loc_1C1F8:
   36477/   1C25A : 5338 F7B1           		subq.b	#1,($FFFFF7B1).w
   36478/   1C25E : 6A52                		bpl.s	loc_1C250
   36479/   1C260 : 11FC 0007 F7B1      		move.b	#7,($FFFFF7B1).w
   36480/   1C266 : 43F9 0006 A2B6      		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
   36481/   1C26C : 23FC 4900 0002      		move.l	#$49000002,($C00004).l
            1C272 : 00C0 0004          
   36482/   1C276 : 1038 F7B0           		move.b	($FFFFF7B0).w,d0
   36483/   1C27A : 5238 F7B0           		addq.b	#1,($FFFFF7B0).w
   36484/   1C27E : 0240 0007           		andi.w	#7,d0
   36485/   1C282 : 6712                		beq.s	loc_1C234
   36486/   1C284 : 5340                		subq.w	#1,d0
   36487/   1C286 : C0FC 0180           		mulu.w	#$180,d0
   36488/   1C28A : 43F1 0000           		lea	(a1,d0.w),a1
   36489/   1C28E : 323C 000B           		move.w	#$B,d1
   36490/   1C292 : 6000 0186           		bra.w	LoadTiles
   36491/   1C296 :                     ; ===========================================================================
   36492/   1C296 :                     
   36493/   1C296 :                     loc_1C234:
   36494/   1C296 : 11FC 00B4 F7B4      		move.b	#$B4,($FFFFF7B4).w
   36495/   1C29C :                     
   36496/   1C29C :                     loc_1C23A:
   36497/   1C29C : 323C 0005           		move.w	#5,d1
   36498/   1C2A0 : 6100 0178           		bsr.w	LoadTiles
   36499/   1C2A4 : 43F9 0006 A2B6      		lea	(Art_SbzSmoke).l,a1
   36500/   1C2AA : 323C 0005           		move.w	#5,d1
   36501/   1C2AE : 6000 016A           		bra.w	LoadTiles
   36502/   1C2B2 :                     ; ===========================================================================
   36503/   1C2B2 :                     
   36504/   1C2B2 :                     loc_1C250:
   36505/   1C2B2 : 4A38 F7B5           		tst.b	($FFFFF7B5).w
   36506/   1C2B6 : 6706                		beq.s	loc_1C25C
   36507/   1C2B8 : 5338 F7B5           		subq.b	#1,($FFFFF7B5).w
   36508/   1C2BC : 6044                		bra.s	locret_1C2A0
   36509/   1C2BE :                     ; ===========================================================================
   36510/   1C2BE :                     
   36511/   1C2BE :                     loc_1C25C:
   36512/   1C2BE : 5338 F7B3           		subq.b	#1,($FFFFF7B3).w
   36513/   1C2C2 : 6A3E                		bpl.s	locret_1C2A0
   36514/   1C2C4 : 11FC 0007 F7B3      		move.b	#7,($FFFFF7B3).w
   36515/   1C2CA : 43F9 0006 A2B6      		lea	(Art_SbzSmoke).l,a1
   36516/   1C2D0 : 23FC 4A80 0002      		move.l	#$4A800002,($C00004).l
            1C2D6 : 00C0 0004          
   36517/   1C2DA : 1038 F7B2           		move.b	($FFFFF7B2).w,d0
   36518/   1C2DE : 5238 F7B2           		addq.b	#1,($FFFFF7B2).w
   36519/   1C2E2 : 0240 0007           		andi.w	#7,d0
   36520/   1C2E6 : 6712                		beq.s	loc_1C298
   36521/   1C2E8 : 5340                		subq.w	#1,d0
   36522/   1C2EA : C0FC 0180           		mulu.w	#$180,d0
   36523/   1C2EE : 43F1 0000           		lea	(a1,d0.w),a1
   36524/   1C2F2 : 323C 000B           		move.w	#$B,d1
   36525/   1C2F6 : 6000 0122           		bra.w	LoadTiles
   36526/   1C2FA :                     ; ===========================================================================
   36527/   1C2FA :                     
   36528/   1C2FA :                     loc_1C298:
   36529/   1C2FA : 11FC 0078 F7B5      		move.b	#$78,($FFFFF7B5).w
   36530/   1C300 : 609A                		bra.s	loc_1C23A
   36531/   1C302 :                     ; ===========================================================================
   36532/   1C302 :                     
   36533/   1C302 :                     locret_1C2A0:
   36534/   1C302 : 4E75                		rts	
   36535/   1C304 :                     ; ===========================================================================
   36536/   1C304 :                     ; ---------------------------------------------------------------------------
   36537/   1C304 :                     ; Animated pattern routine - ending sequence
   36538/   1C304 :                     ; ---------------------------------------------------------------------------
   36539/   1C304 :                     
   36540/   1C304 :                     AniArt_Ending:				; XREF: AniArt_Index
   36541/   1C304 : 5338 F7B3           		subq.b	#1,($FFFFF7B3).w
   36542/   1C308 : 6A4C                		bpl.s	loc_1C2F4
   36543/   1C30A : 11FC 0007 F7B3      		move.b	#7,($FFFFF7B3).w
   36544/   1C310 : 43F9 0006 8E36      		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
   36545/   1C316 : 45F8 9400           		lea	($FFFF9400).w,a2
   36546/   1C31A : 1038 F7B2           		move.b	($FFFFF7B2).w,d0
   36547/   1C31E : 5238 F7B2           		addq.b	#1,($FFFFF7B2).w
   36548/   1C322 : 0240 0001           		andi.w	#1,d0
   36549/   1C326 : 6708                		beq.s	loc_1C2CE
   36550/   1C328 : 43E9 0200           		lea	$200(a1),a1
   36551/   1C32C : 45EA 0200           		lea	$200(a2),a2
   36552/   1C330 :                     
   36553/   1C330 :                     loc_1C2CE:
   36554/   1C330 : 23FC 6B80 0001      		move.l	#$6B800001,($C00004).l
            1C336 : 00C0 0004          
   36555/   1C33A : 323C 000F           		move.w	#$F,d1
   36556/   1C33E : 6100 00DA           		bsr.w	LoadTiles
   36557/   1C342 : 224A                		movea.l	a2,a1
   36558/   1C344 : 23FC 7200 0001      		move.l	#$72000001,($C00004).l
            1C34A : 00C0 0004          
   36559/   1C34E : 323C 000F           		move.w	#$F,d1
   36560/   1C352 : 6000 00C6           		bra.w	LoadTiles
   36561/   1C356 :                     ; ===========================================================================
   36562/   1C356 :                     
   36563/   1C356 :                     loc_1C2F4:
   36564/   1C356 : 5338 F7B5           		subq.b	#1,($FFFFF7B5).w
   36565/   1C35A : 6A42                		bpl.s	loc_1C33C
   36566/   1C35C : 11FC 0007 F7B5      		move.b	#7,($FFFFF7B5).w
   36567/   1C362 : 1038 F7B4           		move.b	($FFFFF7B4).w,d0
   36568/   1C366 : 5238 F7B4           		addq.b	#1,($FFFFF7B4).w
   36569/   1C36A : 0240 0007           		andi.w	#7,d0
   36570/   1C36E : 103B 0026           		move.b	byte_1C334(pc,d0.w),d0
   36571/   1C372 : EF48                		lsl.w	#7,d0
   36572/   1C374 : 3200                		move.w	d0,d1
   36573/   1C376 : D040                		add.w	d0,d0
   36574/   1C378 : D041                		add.w	d1,d0
   36575/   1C37A : 23FC 6D80 0001      		move.l	#$6D800001,($C00004).l
            1C380 : 00C0 0004          
   36576/   1C384 : 43F9 0006 9236      		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
   36577/   1C38A : 43F1 0000           		lea	(a1,d0.w),a1
   36578/   1C38E : 323C 000B           		move.w	#$B,d1
   36579/   1C392 : 6000 0086           		bra.w	LoadTiles
   36580/   1C396 :                     ; ===========================================================================
   36581/   1C396 : 0000 0001 0202      byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
            1C39C : 0201             
   36582/   1C39E :                     ; ===========================================================================
   36583/   1C39E :                     
   36584/   1C39E :                     loc_1C33C:
   36585/   1C39E : 5338 F7B9           		subq.b	#1,($FFFFF7B9).w
   36586/   1C3A2 : 6A38                		bpl.s	loc_1C37A
   36587/   1C3A4 : 11FC 000E F7B9      		move.b	#$E,($FFFFF7B9).w
   36588/   1C3AA : 1038 F7B8           		move.b	($FFFFF7B8).w,d0
   36589/   1C3AE : 5238 F7B8           		addq.b	#1,($FFFFF7B8).w
   36590/   1C3B2 : 0240 0003           		andi.w	#3,d0
   36591/   1C3B6 : 103B 0020           		move.b	byte_1C376(pc,d0.w),d0
   36592/   1C3BA : E148                		lsl.w	#8,d0
   36593/   1C3BC : D040                		add.w	d0,d0
   36594/   1C3BE : 23FC 7000 0001      		move.l	#$70000001,($C00004).l
            1C3C4 : 00C0 0004          
   36595/   1C3C8 : 43F8 9800           		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
   36596/   1C3CC : 43F1 0000           		lea	(a1,d0.w),a1
   36597/   1C3D0 : 323C 000F           		move.w	#$F,d1
   36598/   1C3D4 : 6000 0044           		bra.w	LoadTiles
   36599/   1C3D8 :                     ; ===========================================================================
   36600/   1C3D8 : 0001 0201           byte_1C376:	dc.b 0,	1, 2, 1
   36601/   1C3DC :                     ; ===========================================================================
   36602/   1C3DC :                     
   36603/   1C3DC :                     loc_1C37A:
   36604/   1C3DC : 5338 F7BB           		subq.b	#1,($FFFFF7BB).w
   36605/   1C3E0 : 6A34                		bpl.s	locret_1C3B4
   36606/   1C3E2 : 11FC 000B F7BB      		move.b	#$B,($FFFFF7BB).w
   36607/   1C3E8 : 1038 F7BA           		move.b	($FFFFF7BA).w,d0
   36608/   1C3EC : 5238 F7BA           		addq.b	#1,($FFFFF7BA).w
   36609/   1C3F0 : 0240 0003           		andi.w	#3,d0
   36610/   1C3F4 : 103B 00E2           		move.b	byte_1C376(pc,d0.w),d0
   36611/   1C3F8 : E148                		lsl.w	#8,d0
   36612/   1C3FA : D040                		add.w	d0,d0
   36613/   1C3FC : 23FC 6800 0001      		move.l	#$68000001,($C00004).l
            1C402 : 00C0 0004          
   36614/   1C406 : 43F8 9E00           		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
   36615/   1C40A : 43F1 0000           		lea	(a1,d0.w),a1
   36616/   1C40E : 323C 000F           		move.w	#$F,d1
   36617/   1C412 : 6000 0006           		bra.w	LoadTiles
   36618/   1C416 :                     ; ===========================================================================
   36619/   1C416 :                     
   36620/   1C416 :                     locret_1C3B4:
   36621/   1C416 : 4E75                		rts	
   36622/   1C418 :                     ; ===========================================================================
   36623/   1C418 :                     
   36624/   1C418 :                     AniArt_none:				; XREF: AniArt_Index
   36625/   1C418 : 4E75                		rts	
   36626/   1C41A :                     
   36627/   1C41A :                     ; ---------------------------------------------------------------------------
   36628/   1C41A :                     ; Subroutine to	load (d1 - 1) 8x8 tiles
   36629/   1C41A :                     ; ---------------------------------------------------------------------------
   36630/   1C41A :                     
   36631/   1C41A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   36632/   1C41A :                     
   36633/   1C41A :                     
   36634/   1C41A :                     LoadTiles:
   36635/   1C41A : 2C99                		move.l	(a1)+,(a6)
   36636/   1C41C : 2C99                		move.l	(a1)+,(a6)
   36637/   1C41E : 2C99                		move.l	(a1)+,(a6)
   36638/   1C420 : 2C99                		move.l	(a1)+,(a6)
   36639/   1C422 : 2C99                		move.l	(a1)+,(a6)
   36640/   1C424 : 2C99                		move.l	(a1)+,(a6)
   36641/   1C426 : 2C99                		move.l	(a1)+,(a6)
   36642/   1C428 : 2C99                		move.l	(a1)+,(a6)
   36643/   1C42A : 51C9 FFEE           		dbf	d1,LoadTiles
   36644/   1C42E : 4E75                		rts	
   36645/   1C430 :                     ; End of function LoadTiles
   36646/   1C430 :                     
   36647/   1C430 :                     ; ===========================================================================
   36648/   1C430 :                     ; ---------------------------------------------------------------------------
   36649/   1C430 :                     ; Animated pattern routine - more Marble Zone
   36650/   1C430 :                     ; ---------------------------------------------------------------------------
   36651/   1C430 : 0020 002C           AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
   36652/   1C434 : 0042 0050           		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
   36653/   1C438 : 0066 0074           		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
   36654/   1C43C : 008A 0098           		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
   36655/   1C440 : 00AE 00BC           		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
   36656/   1C444 : 00D2 00E0           		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
   36657/   1C448 : 00F6 0104           		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
   36658/   1C44C : 0118 0128           		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
   36659/   1C450 :                     ; ===========================================================================
   36660/   1C450 :                     
   36661/   1C450 :                     loc_1C3EE:				; XREF: AniArt_MZextra
   36662/   1C450 : 2C91                		move.l	(a1),(a6)
   36663/   1C452 : 43E9 0010           		lea	$10(a1),a1
   36664/   1C456 : 51C9 FFF8           		dbf	d1,loc_1C3EE
   36665/   1C45A : 4E75                		rts	
   36666/   1C45C :                     ; ===========================================================================
   36667/   1C45C :                     
   36668/   1C45C :                     loc_1C3FA:				; XREF: AniArt_MZextra
   36669/   1C45C : 2029 0002           		move.l	2(a1),d0
   36670/   1C460 : 1029 0001           		move.b	1(a1),d0
   36671/   1C464 : E098                		ror.l	#8,d0
   36672/   1C466 : 2C80                		move.l	d0,(a6)
   36673/   1C468 : 43E9 0010           		lea	$10(a1),a1
   36674/   1C46C : 51C9 FFEE           		dbf	d1,loc_1C3FA
   36675/   1C470 : 4E75                		rts	
   36676/   1C472 :                     ; ===========================================================================
   36677/   1C472 :                     
   36678/   1C472 :                     loc_1C410:				; XREF: AniArt_MZextra
   36679/   1C472 : 2CA9 0002           		move.l	2(a1),(a6)
   36680/   1C476 : 43E9 0010           		lea	$10(a1),a1
   36681/   1C47A : 51C9 FFF6           		dbf	d1,loc_1C410
   36682/   1C47E : 4E75                		rts	
   36683/   1C480 :                     ; ===========================================================================
   36684/   1C480 :                     
   36685/   1C480 :                     loc_1C41E:				; XREF: AniArt_MZextra
   36686/   1C480 : 2029 0004           		move.l	4(a1),d0
   36687/   1C484 : 1029 0003           		move.b	3(a1),d0
   36688/   1C488 : E098                		ror.l	#8,d0
   36689/   1C48A : 2C80                		move.l	d0,(a6)
   36690/   1C48C : 43E9 0010           		lea	$10(a1),a1
   36691/   1C490 : 51C9 FFEE           		dbf	d1,loc_1C41E
   36692/   1C494 : 4E75                		rts	
   36693/   1C496 :                     ; ===========================================================================
   36694/   1C496 :                     
   36695/   1C496 :                     loc_1C434:				; XREF: AniArt_MZextra
   36696/   1C496 : 2CA9 0004           		move.l	4(a1),(a6)
   36697/   1C49A : 43E9 0010           		lea	$10(a1),a1
   36698/   1C49E : 51C9 FFF6           		dbf	d1,loc_1C434
   36699/   1C4A2 : 4E75                		rts	
   36700/   1C4A4 :                     ; ===========================================================================
   36701/   1C4A4 :                     
   36702/   1C4A4 :                     loc_1C442:				; XREF: AniArt_MZextra
   36703/   1C4A4 : 2029 0006           		move.l	6(a1),d0
   36704/   1C4A8 : 1029 0005           		move.b	5(a1),d0
   36705/   1C4AC : E098                		ror.l	#8,d0
   36706/   1C4AE : 2C80                		move.l	d0,(a6)
   36707/   1C4B0 : 43E9 0010           		lea	$10(a1),a1
   36708/   1C4B4 : 51C9 FFEE           		dbf	d1,loc_1C442
   36709/   1C4B8 : 4E75                		rts	
   36710/   1C4BA :                     ; ===========================================================================
   36711/   1C4BA :                     
   36712/   1C4BA :                     loc_1C458:				; XREF: AniArt_MZextra
   36713/   1C4BA : 2CA9 0006           		move.l	6(a1),(a6)
   36714/   1C4BE : 43E9 0010           		lea	$10(a1),a1
   36715/   1C4C2 : 51C9 FFF6           		dbf	d1,loc_1C458
   36716/   1C4C6 : 4E75                		rts	
   36717/   1C4C8 :                     ; ===========================================================================
   36718/   1C4C8 :                     
   36719/   1C4C8 :                     loc_1C466:				; XREF: AniArt_MZextra
   36720/   1C4C8 : 2029 0008           		move.l	8(a1),d0
   36721/   1C4CC : 1029 0007           		move.b	7(a1),d0
   36722/   1C4D0 : E098                		ror.l	#8,d0
   36723/   1C4D2 : 2C80                		move.l	d0,(a6)
   36724/   1C4D4 : 43E9 0010           		lea	$10(a1),a1
   36725/   1C4D8 : 51C9 FFEE           		dbf	d1,loc_1C466
   36726/   1C4DC : 4E75                		rts	
   36727/   1C4DE :                     ; ===========================================================================
   36728/   1C4DE :                     
   36729/   1C4DE :                     loc_1C47C:				; XREF: AniArt_MZextra
   36730/   1C4DE : 2CA9 0008           		move.l	8(a1),(a6)
   36731/   1C4E2 : 43E9 0010           		lea	$10(a1),a1
   36732/   1C4E6 : 51C9 FFF6           		dbf	d1,loc_1C47C
   36733/   1C4EA : 4E75                		rts	
   36734/   1C4EC :                     ; ===========================================================================
   36735/   1C4EC :                     
   36736/   1C4EC :                     loc_1C48A:				; XREF: AniArt_MZextra
   36737/   1C4EC : 2029 000A           		move.l	$A(a1),d0
   36738/   1C4F0 : 1029 0009           		move.b	9(a1),d0
   36739/   1C4F4 : E098                		ror.l	#8,d0
   36740/   1C4F6 : 2C80                		move.l	d0,(a6)
   36741/   1C4F8 : 43E9 0010           		lea	$10(a1),a1
   36742/   1C4FC : 51C9 FFEE           		dbf	d1,loc_1C48A
   36743/   1C500 : 4E75                		rts	
   36744/   1C502 :                     ; ===========================================================================
   36745/   1C502 :                     
   36746/   1C502 :                     loc_1C4A0:				; XREF: AniArt_MZextra
   36747/   1C502 : 2CA9 000A           		move.l	$A(a1),(a6)
   36748/   1C506 : 43E9 0010           		lea	$10(a1),a1
   36749/   1C50A : 51C9 FFF6           		dbf	d1,loc_1C4A0
   36750/   1C50E : 4E75                		rts	
   36751/   1C510 :                     ; ===========================================================================
   36752/   1C510 :                     
   36753/   1C510 :                     loc_1C4AE:				; XREF: AniArt_MZextra
   36754/   1C510 : 2029 000C           		move.l	$C(a1),d0
   36755/   1C514 : 1029 000B           		move.b	$B(a1),d0
   36756/   1C518 : E098                		ror.l	#8,d0
   36757/   1C51A : 2C80                		move.l	d0,(a6)
   36758/   1C51C : 43E9 0010           		lea	$10(a1),a1
   36759/   1C520 : 51C9 FFEE           		dbf	d1,loc_1C4AE
   36760/   1C524 : 4E75                		rts	
   36761/   1C526 :                     ; ===========================================================================
   36762/   1C526 :                     
   36763/   1C526 :                     loc_1C4C4:				; XREF: AniArt_MZextra
   36764/   1C526 : 2CA9 000C           		move.l	$C(a1),(a6)
   36765/   1C52A : 43E9 0010           		lea	$10(a1),a1
   36766/   1C52E : 51C9 FFF6           		dbf	d1,loc_1C4C4
   36767/   1C532 : 4E75                		rts	
   36768/   1C534 :                     ; ===========================================================================
   36769/   1C534 :                     
   36770/   1C534 :                     loc_1C4D2:				; XREF: AniArt_MZextra
   36771/   1C534 : 2029 000C           		move.l	$C(a1),d0
   36772/   1C538 : E198                		rol.l	#8,d0
   36773/   1C53A : 1011                		move.b	0(a1),d0
   36774/   1C53C : 2C80                		move.l	d0,(a6)
   36775/   1C53E : 43E9 0010           		lea	$10(a1),a1
   36776/   1C542 : 51C9 FFF0           		dbf	d1,loc_1C4D2
   36777/   1C546 : 4E75                		rts	
   36778/   1C548 :                     ; ===========================================================================
   36779/   1C548 :                     
   36780/   1C548 :                     loc_1C4E8:				; XREF: AniArt_MZextra
   36781/   1C548 : 3CA9 000E           		move.w	$E(a1),(a6)
   36782/   1C54C : 3C91                		move.w	0(a1),(a6)
   36783/   1C54E : 43E9 0010           		lea	$10(a1),a1
   36784/   1C552 : 51C9 FFF4           		dbf	d1,loc_1C4E8
   36785/   1C556 : 4E75                		rts	
   36786/   1C558 :                     ; ===========================================================================
   36787/   1C558 :                     
   36788/   1C558 :                     loc_1C4FA:				; XREF: AniArt_MZextra
   36789/   1C558 : 2011                		move.l	0(a1),d0
   36790/   1C55A : 1029 000F           		move.b	$F(a1),d0
   36791/   1C55E : E098                		ror.l	#8,d0
   36792/   1C560 : 2C80                		move.l	d0,(a6)
   36793/   1C562 : 43E9 0010           		lea	$10(a1),a1
   36794/   1C566 : 51C9 FFF0           		dbf	d1,loc_1C4FA
   36795/   1C56A : 4E75                		rts	
   36796/   1C56C :                     
   36797/   1C56C :                     ; ---------------------------------------------------------------------------
   36798/   1C56C :                     ; Animated pattern routine - giant ring
   36799/   1C56C :                     ; ---------------------------------------------------------------------------
   36800/   1C56C :                     
   36801/   1C56C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   36802/   1C56C :                     
   36803/   1C56C :                     
   36804/   1C56C :                     AniArt_GiantRing:			; XREF: AniArt_Load
   36805/   1C56C : 4A78 F7BE           		tst.w	($FFFFF7BE).w
   36806/   1C570 : 6602                		bne.s	loc_1C518
   36807/   1C572 : 4E75                		rts	
   36808/   1C574 :                     ; ===========================================================================
   36809/   1C574 :                     
   36810/   1C574 :                     loc_1C518:
   36811/   1C574 : 0478 01C0 F7BE      		subi.w	#$1C0,($FFFFF7BE).w
   36812/   1C57A : 43F9 0007 F402      		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
   36813/   1C580 : 7000                		moveq	#0,d0
   36814/   1C582 : 3038 F7BE           		move.w	($FFFFF7BE).w,d0
   36815/   1C586 : 43F1 0000           		lea	(a1,d0.w),a1
   36816/   1C58A : 0640 8000           		addi.w	#$8000,d0
   36817/   1C58E : E588                		lsl.l	#2,d0
   36818/   1C590 : E448                		lsr.w	#2,d0
   36819/   1C592 : 0040 4000           		ori.w	#$4000,d0
   36820/   1C596 : 4840                		swap	d0
   36821/   1C598 : 2D40 0004           		move.l	d0,4(a6)
   36822/   1C59C : 323C 000D           		move.w	#$D,d1
   36823/   1C5A0 : 6000 FE78           		bra.w	LoadTiles
   36824/   1C5A4 :                     ; End of function AniArt_GiantRing
   36825/   1C5A4 :                     
   36826/   1C5A4 :                     ; ===========================================================================
   36827/   1C5A4 :                     ; ---------------------------------------------------------------------------
   36828/   1C5A4 :                     ; Object 21 - SCORE, TIME, RINGS
   36829/   1C5A4 :                     ; ---------------------------------------------------------------------------
   36830/   1C5A4 :                     
   36831/   1C5A4 :                     Obj21:					; XREF: Obj_Index
   36832/   1C5A4 : 7000                		moveq	#0,d0
   36833/   1C5A6 : 1028 0024           		move.b	$24(a0),d0
   36834/   1C5AA : 323B 0006           		move.w	Obj21_Index(pc,d0.w),d1
   36835/   1C5AE : 4EFB 1002           		jmp	Obj21_Index(pc,d1.w)
   36836/   1C5B2 :                     ; ===========================================================================
   36837/   1C5B2 : 0004                Obj21_Index:	dc.w Obj21_Main-Obj21_Index
   36838/   1C5B4 : 002E                		dc.w Obj21_Flash-Obj21_Index
   36839/   1C5B6 :                     ; ===========================================================================
   36840/   1C5B6 :                     
   36841/   1C5B6 :                     Obj21_Main:				; XREF: Obj21_Main
   36842/   1C5B6 : 5428 0024           		addq.b	#2,$24(a0)
   36843/   1C5BA : 317C 0090 0008      		move.w	#$90,8(a0)
   36844/   1C5C0 : 317C 0108 000A      		move.w	#$108,$A(a0)
   36845/   1C5C6 : 217C 0001 C610      		move.l	#Map_obj21,4(a0)
            1C5CC : 0004             
   36846/   1C5CE : 317C 06CA 0002      		move.w	#$6CA,2(a0)
   36847/   1C5D4 : 117C 0000 0001      		move.b	#0,1(a0)
   36848/   1C5DA : 117C 0000 0018      		move.b	#0,$18(a0)
   36849/   1C5E0 :                     
   36850/   1C5E0 :                     Obj21_Flash:				; XREF: Obj21_Main
   36851/   1C5E0 : 4A78 FE20           		tst.w	($FFFFFE20).w	; do you have any rings?
   36852/   1C5E4 : 670A                		beq.s	Obj21_Flash2	; if not, branch
   36853/   1C5E6 : 4228 001A           		clr.b	$1A(a0)		; make all counters yellow
   36854/   1C5EA : 4EF9 0000 D3D2      		jmp	DisplaySprite
   36855/   1C5F0 :                     ; ===========================================================================
   36856/   1C5F0 :                     
   36857/   1C5F0 :                     Obj21_Flash2:
   36858/   1C5F0 : 7000                		moveq	#0,d0
   36859/   1C5F2 : 0838 0003 FE05      		btst	#3,($FFFFFE05).w
   36860/   1C5F8 : 660C                		bne.s	Obj21_Display
   36861/   1C5FA : 5240                		addq.w	#1,d0		; make ring counter flash red
   36862/   1C5FC : 0C38 0009 FE23      		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
   36863/   1C602 : 6602                		bne.s	Obj21_Display	; if not, branch
   36864/   1C604 : 5440                		addq.w	#2,d0		; make time counter flash red
   36865/   1C606 :                     
   36866/   1C606 :                     Obj21_Display:
   36867/   1C606 : 1140 001A           		move.b	d0,$1A(a0)
   36868/   1C60A : 4EF9 0000 D3D2      		jmp	DisplaySprite
   36869/   1C610 :                     ; ===========================================================================
   36870/   1C610 :                     ; ---------------------------------------------------------------------------
   36871/   1C610 :                     ; Sprite mappings - SCORE, TIME, RINGS
   36872/   1C610 :                     ; ---------------------------------------------------------------------------
   36873/   1C610 :                     Map_obj21:
   36874/   1C610 :                     	include "_mappings/obj21.asm"
(1)    1/   1C610 :                     ; ---------------------------------------------------------------------------
(1)    2/   1C610 :                     ; Sprite mappings - SCORE, TIME, RINGS
(1)    3/   1C610 :                     ; ---------------------------------------------------------------------------
(1)    4/   1C610 : 0008 003C           		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
(1)    5/   1C614 : 0070 00A4           		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
(1)    6/   1C618 : 0A                  byte_1C5BC:	dc.b $A
(1)    7/   1C619 : 800D 8000 00        		dc.b $80, $D, $80, 0, 0
(1)    8/   1C61E : 800D 8018 20        		dc.b $80, $D, $80, $18,	$20
(1)    9/   1C623 : 800D 8020 40        		dc.b $80, $D, $80, $20,	$40
(1)   10/   1C628 : 900D 8010 00        		dc.b $90, $D, $80, $10,	0
(1)   11/   1C62D : 900D 8028 28        		dc.b $90, $D, $80, $28,	$28
(1)   12/   1C632 : A00D 8008 00        		dc.b $A0, $D, $80, 8, 0
(1)   13/   1C637 : A001 8000 20        		dc.b $A0, 1, $80, 0, $20
(1)   14/   1C63C : A009 8030 30        		dc.b $A0, 9, $80, $30, $30
(1)   15/   1C641 : 4005 810A 00        		dc.b $40, 5, $81, $A, 0
(1)   16/   1C646 : 400D 810E 10        		dc.b $40, $D, $81, $E, $10
(1)   17/   1C64B : 00                  		dc.b 0
(1)   18/   1C64C : 0A                  byte_1C5F0:	dc.b $A
(1)   19/   1C64D : 800D 8000 00        		dc.b $80, $D, $80, 0, 0
(1)   20/   1C652 : 800D 8018 20        		dc.b $80, $D, $80, $18,	$20
(1)   21/   1C657 : 800D 8020 40        		dc.b $80, $D, $80, $20,	$40
(1)   22/   1C65C : 900D 8010 00        		dc.b $90, $D, $80, $10,	0
(1)   23/   1C661 : 900D 8028 28        		dc.b $90, $D, $80, $28,	$28
(1)   24/   1C666 : A00D A008 00        		dc.b $A0, $D, $A0, 8, 0
(1)   25/   1C66B : A001 A000 20        		dc.b $A0, 1, $A0, 0, $20
(1)   26/   1C670 : A009 8030 30        		dc.b $A0, 9, $80, $30, $30
(1)   27/   1C675 : 4005 810A 00        		dc.b $40, 5, $81, $A, 0
(1)   28/   1C67A : 400D 810E 10        		dc.b $40, $D, $81, $E, $10
(1)   29/   1C67F : 00                  		dc.b 0
(1)   30/   1C680 : 0A                  byte_1C624:	dc.b $A
(1)   31/   1C681 : 800D 8000 00        		dc.b $80, $D, $80, 0, 0
(1)   32/   1C686 : 800D 8018 20        		dc.b $80, $D, $80, $18,	$20
(1)   33/   1C68B : 800D 8020 40        		dc.b $80, $D, $80, $20,	$40
(1)   34/   1C690 : 900D A010 00        		dc.b $90, $D, $A0, $10,	0
(1)   35/   1C695 : 900D 8028 28        		dc.b $90, $D, $80, $28,	$28
(1)   36/   1C69A : A00D 8008 00        		dc.b $A0, $D, $80, 8, 0
(1)   37/   1C69F : A001 8000 20        		dc.b $A0, 1, $80, 0, $20
(1)   38/   1C6A4 : A009 8030 30        		dc.b $A0, 9, $80, $30, $30
(1)   39/   1C6A9 : 4005 810A 00        		dc.b $40, 5, $81, $A, 0
(1)   40/   1C6AE : 400D 810E 10        		dc.b $40, $D, $81, $E, $10
(1)   41/   1C6B3 : 00                  		dc.b 0
(1)   42/   1C6B4 : 0A                  byte_1C658:	dc.b $A
(1)   43/   1C6B5 : 800D 8000 00        		dc.b $80, $D, $80, 0, 0
(1)   44/   1C6BA : 800D 8018 20        		dc.b $80, $D, $80, $18,	$20
(1)   45/   1C6BF : 800D 8020 40        		dc.b $80, $D, $80, $20,	$40
(1)   46/   1C6C4 : 900D A010 00        		dc.b $90, $D, $A0, $10,	0
(1)   47/   1C6C9 : 900D 8028 28        		dc.b $90, $D, $80, $28,	$28
(1)   48/   1C6CE : A00D A008 00        		dc.b $A0, $D, $A0, 8, 0
(1)   49/   1C6D3 : A001 A000 20        		dc.b $A0, 1, $A0, 0, $20
(1)   50/   1C6D8 : A009 8030 30        		dc.b $A0, 9, $80, $30, $30
(1)   51/   1C6DD : 4005 810A 00        		dc.b $40, 5, $81, $A, 0
(1)   52/   1C6E2 : 400D 810E 10        		dc.b $40, $D, $81, $E, $10
(1)   53/   1C6E7 : (MACRO)              		even
(1)   53/   1C6E7 : 00                                          dc.b 0 ;ds.b 1 
   36875/   1C6E8 :                     
   36876/   1C6E8 :                     ; ---------------------------------------------------------------------------
   36877/   1C6E8 :                     ; Add points subroutine
   36878/   1C6E8 :                     ; ---------------------------------------------------------------------------
   36879/   1C6E8 :                     
   36880/   1C6E8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   36881/   1C6E8 :                     
   36882/   1C6E8 :                     
   36883/   1C6E8 :                     AddPoints:
   36884/   1C6E8 : 11FC 0001 FE1F      		move.b	#1,($FFFFFE1F).w ; set score counter to	update
   36885/   1C6EE : 45F8 FFC0           		lea	($FFFFFFC0).w,a2
   36886/   1C6F2 : 47F8 FE26           		lea	($FFFFFE26).w,a3
   36887/   1C6F6 : D193                		add.l	d0,(a3)		; add d0*10 to the score
   36888/   1C6F8 : 223C 000F 423F      		move.l	#999999,d1
   36889/   1C6FE : B293                		cmp.l	(a3),d1		; is #999999 higher than the score?
   36890/   1C700 : 6200 0006           		bhi.w	loc_1C6AC	; if yes, branch
   36891/   1C704 : 2681                		move.l	d1,(a3)		; reset	score to #999999
   36892/   1C706 : 2481                		move.l	d1,(a2)
   36893/   1C708 :                     
   36894/   1C708 :                     loc_1C6AC:
   36895/   1C708 : 2013                		move.l	(a3),d0
   36896/   1C70A : B092                		cmp.l	(a2),d0
   36897/   1C70C : 6500 0004           		bcs.w	locret_1C6B6
   36898/   1C710 : 2480                		move.l	d0,(a2)
   36899/   1C712 :                     
   36900/   1C712 :                     locret_1C6B6:
   36901/   1C712 : 4E75                		rts	
   36902/   1C714 :                     ; End of function AddPoints
   36903/   1C714 :                     
   36904/   1C714 :                     ; ---------------------------------------------------------------------------
   36905/   1C714 :                     ; Subroutine to	update the HUD
   36906/   1C714 :                     ; ---------------------------------------------------------------------------
   36907/   1C714 :                     
   36908/   1C714 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   36909/   1C714 :                     
   36910/   1C714 :                     
   36911/   1C714 :                     HudUpdate:
   36912/   1C714 : 4A78 FFFA           		tst.w	($FFFFFFFA).w	; is debug mode	on?
   36913/   1C718 : 6600 00E4           		bne.w	HudDebug	; if yes, branch
   36914/   1C71C : 4A38 FE1F           		tst.b	($FFFFFE1F).w	; does the score need updating?
   36915/   1C720 : 6712                		beq.s	Hud_ChkRings	; if not, branch
   36916/   1C722 : 4238 FE1F           		clr.b	($FFFFFE1F).w
   36917/   1C726 : 203C 5C80 0003      		move.l	#$5C800003,d0	; set VRAM address
   36918/   1C72C : 2238 FE26           		move.l	($FFFFFE26).w,d1 ; load	score
   36919/   1C730 : 6100 0204           		bsr.w	Hud_Score
   36920/   1C734 :                     
   36921/   1C734 :                     Hud_ChkRings:
   36922/   1C734 : 4A38 FE1D           		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
   36923/   1C738 : 671A                		beq.s	Hud_ChkTime	; if not, branch
   36924/   1C73A : 6A04                		bpl.s	loc_1C6E4
   36925/   1C73C : 6100 012C           		bsr.w	Hud_LoadZero
   36926/   1C740 :                     
   36927/   1C740 :                     loc_1C6E4:
   36928/   1C740 : 4238 FE1D           		clr.b	($FFFFFE1D).w
   36929/   1C744 : 203C 5F40 0003      		move.l	#$5F400003,d0	; set VRAM address
   36930/   1C74A : 7200                		moveq	#0,d1
   36931/   1C74C : 3238 FE20           		move.w	($FFFFFE20).w,d1 ; load	number of rings
   36932/   1C750 : 6100 01DA           		bsr.w	Hud_Rings
   36933/   1C754 :                     
   36934/   1C754 :                     Hud_ChkTime:
   36935/   1C754 : 4A38 FE1E           		tst.b	($FFFFFE1E).w	; does the time	need updating?
   36936/   1C758 : 6756                		beq.s	Hud_ChkLives	; if not, branch
   36937/   1C75A : 4A78 F63A           		tst.w	($FFFFF63A).w	; is the game paused?
   36938/   1C75E : 6650                		bne.s	Hud_ChkLives	; if yes, branch
   36939/   1C760 : 43F8 FE22           		lea	($FFFFFE22).w,a1
   36940/   1C764 : 0C99 0009 3B3B      		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
   36941/   1C76A : 677C                		beq.s	TimeOver	; if yes, branch
   36942/   1C76C : 5221                		addq.b	#1,-(a1)
   36943/   1C76E : 0C11 003C           		cmpi.b	#60,(a1)
   36944/   1C772 : 653C                		bcs.s	Hud_ChkLives
   36945/   1C774 : 12BC 0000           		move.b	#0,(a1)
   36946/   1C778 : 5221                		addq.b	#1,-(a1)
   36947/   1C77A : 0C11 003C           		cmpi.b	#60,(a1)
   36948/   1C77E : 6510                		bcs.s	loc_1C734
   36949/   1C780 : 12BC 0000           		move.b	#0,(a1)
   36950/   1C784 : 5221                		addq.b	#1,-(a1)
   36951/   1C786 : 0C11 0009           		cmpi.b	#9,(a1)
   36952/   1C78A : 6504                		bcs.s	loc_1C734
   36953/   1C78C : 12BC 0009           		move.b	#9,(a1)
   36954/   1C790 :                     
   36955/   1C790 :                     loc_1C734:
   36956/   1C790 : 203C 5E40 0003      		move.l	#$5E400003,d0
   36957/   1C796 : 7200                		moveq	#0,d1
   36958/   1C798 : 1238 FE23           		move.b	($FFFFFE23).w,d1 ; load	minutes
   36959/   1C79C : 6100 0266           		bsr.w	Hud_Mins
   36960/   1C7A0 : 203C 5EC0 0003      		move.l	#$5EC00003,d0
   36961/   1C7A6 : 7200                		moveq	#0,d1
   36962/   1C7A8 : 1238 FE24           		move.b	($FFFFFE24).w,d1 ; load	seconds
   36963/   1C7AC : 6100 0260           		bsr.w	Hud_Secs
   36964/   1C7B0 :                     
   36965/   1C7B0 :                     Hud_ChkLives:
   36966/   1C7B0 : 4A38 FE1C           		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
   36967/   1C7B4 : 6708                		beq.s	Hud_ChkBonus	; if not, branch
   36968/   1C7B6 : 4238 FE1C           		clr.b	($FFFFFE1C).w
   36969/   1C7BA : 6100 030E           		bsr.w	Hud_Lives
   36970/   1C7BE :                     
   36971/   1C7BE :                     Hud_ChkBonus:
   36972/   1C7BE : 4A38 F7D6           		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
   36973/   1C7C2 : 6722                		beq.s	Hud_End		; if not, branch
   36974/   1C7C4 : 4238 F7D6           		clr.b	($FFFFF7D6).w
   36975/   1C7C8 : 23FC 6E00 0002      		move.l	#$6E000002,($C00004).l
            1C7CE : 00C0 0004          
   36976/   1C7D2 : 7200                		moveq	#0,d1
   36977/   1C7D4 : 3238 F7D2           		move.w	($FFFFF7D2).w,d1 ; load	time bonus
   36978/   1C7D8 : 6100 028E           		bsr.w	Hud_TimeRingBonus
   36979/   1C7DC : 7200                		moveq	#0,d1
   36980/   1C7DE : 3238 F7D4           		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
   36981/   1C7E2 : 6100 0284           		bsr.w	Hud_TimeRingBonus
   36982/   1C7E6 :                     
   36983/   1C7E6 :                     Hud_End:
   36984/   1C7E6 : 4E75                		rts	
   36985/   1C7E8 :                     ; ===========================================================================
   36986/   1C7E8 :                     
   36987/   1C7E8 :                     TimeOver:				; XREF: Hud_ChkTime
   36988/   1C7E8 : 4238 FE1E           		clr.b	($FFFFFE1E).w
   36989/   1C7EC : 41F8 D000           		lea	($FFFFD000).w,a0
   36990/   1C7F0 : 2448                		movea.l	a0,a2
   36991/   1C7F2 : 6100 E66C           		bsr.w	KillSonic
   36992/   1C7F6 : 11FC 0001 FE1A      		move.b	#1,($FFFFFE1A).w
   36993/   1C7FC : 4E75                		rts	
   36994/   1C7FE :                     ; ===========================================================================
   36995/   1C7FE :                     
   36996/   1C7FE :                     HudDebug:				; XREF: HudUpdate
   36997/   1C7FE : 6100 00D6           		bsr.w	HudDb_XY
   36998/   1C802 : 4A38 FE1D           		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
   36999/   1C806 : 671A                		beq.s	HudDb_ObjCount	; if not, branch
   37000/   1C808 : 6A04                		bpl.s	HudDb_Rings
   37001/   1C80A : 6100 005E           		bsr.w	Hud_LoadZero
   37002/   1C80E :                     
   37003/   1C80E :                     HudDb_Rings:
   37004/   1C80E : 4238 FE1D           		clr.b	($FFFFFE1D).w
   37005/   1C812 : 203C 5F40 0003      		move.l	#$5F400003,d0	; set VRAM address
   37006/   1C818 : 7200                		moveq	#0,d1
   37007/   1C81A : 3238 FE20           		move.w	($FFFFFE20).w,d1 ; load	number of rings
   37008/   1C81E : 6100 010C           		bsr.w	Hud_Rings
   37009/   1C822 :                     
   37010/   1C822 :                     HudDb_ObjCount:
   37011/   1C822 : 203C 5EC0 0003      		move.l	#$5EC00003,d0	; set VRAM address
   37012/   1C828 : 7200                		moveq	#0,d1
   37013/   1C82A : 1238 F62C           		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
   37014/   1C82E : 6100 01DE           		bsr.w	Hud_Secs
   37015/   1C832 : 4A38 FE1C           		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
   37016/   1C836 : 6708                		beq.s	HudDb_ChkBonus	; if not, branch
   37017/   1C838 : 4238 FE1C           		clr.b	($FFFFFE1C).w
   37018/   1C83C : 6100 028C           		bsr.w	Hud_Lives
   37019/   1C840 :                     
   37020/   1C840 :                     HudDb_ChkBonus:
   37021/   1C840 : 4A38 F7D6           		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
   37022/   1C844 : 6722                		beq.s	HudDb_End	; if not, branch
   37023/   1C846 : 4238 F7D6           		clr.b	($FFFFF7D6).w
   37024/   1C84A : 23FC 6E00 0002      		move.l	#$6E000002,($C00004).l ; set VRAM address
            1C850 : 00C0 0004          
   37025/   1C854 : 7200                		moveq	#0,d1
   37026/   1C856 : 3238 F7D2           		move.w	($FFFFF7D2).w,d1 ; load	time bonus
   37027/   1C85A : 6100 020C           		bsr.w	Hud_TimeRingBonus
   37028/   1C85E : 7200                		moveq	#0,d1
   37029/   1C860 : 3238 F7D4           		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
   37030/   1C864 : 6100 0202           		bsr.w	Hud_TimeRingBonus
   37031/   1C868 :                     
   37032/   1C868 :                     HudDb_End:
   37033/   1C868 : 4E75                		rts	
   37034/   1C86A :                     ; End of function HudUpdate
   37035/   1C86A :                     
   37036/   1C86A :                     ; ---------------------------------------------------------------------------
   37037/   1C86A :                     ; Subroutine to	load "0" on the	HUD
   37038/   1C86A :                     ; ---------------------------------------------------------------------------
   37039/   1C86A :                     
   37040/   1C86A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   37041/   1C86A :                     
   37042/   1C86A :                     
   37043/   1C86A :                     Hud_LoadZero:				; XREF: HudUpdate
   37044/   1C86A : 23FC 5F40 0003      		move.l	#$5F400003,($C00004).l
            1C870 : 00C0 0004          
   37045/   1C874 : 45FA 005C           		lea	Hud_TilesZero(pc),a2
   37046/   1C878 : 343C 0002           		move.w	#2,d2
   37047/   1C87C : 601C                		bra.s	loc_1C83E
   37048/   1C87E :                     ; End of function Hud_LoadZero
   37049/   1C87E :                     
   37050/   1C87E :                     ; ---------------------------------------------------------------------------
   37051/   1C87E :                     ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
   37052/   1C87E :                     ; ---------------------------------------------------------------------------
   37053/   1C87E :                     
   37054/   1C87E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   37055/   1C87E :                     
   37056/   1C87E :                     
   37057/   1C87E :                     Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
   37058/   1C87E : 4DF9 00C0 0000      		lea	($C00000).l,a6
   37059/   1C884 : 6100 0244           		bsr.w	Hud_Lives
   37060/   1C888 : 23FC 5C40 0003      		move.l	#$5C400003,($C00004).l
            1C88E : 00C0 0004          
   37061/   1C892 : 45FA 0032           		lea	Hud_TilesBase(pc),a2
   37062/   1C896 : 343C 000E           		move.w	#$E,d2
   37063/   1C89A :                     
   37064/   1C89A :                     loc_1C83E:				; XREF: Hud_LoadZero
   37065/   1C89A : 43FA 029A           		lea	Art_Hud(pc),a1
   37066/   1C89E :                     
   37067/   1C89E :                     loc_1C842:
   37068/   1C89E : 323C 000F           		move.w	#$F,d1
   37069/   1C8A2 : 101A                		move.b	(a2)+,d0
   37070/   1C8A4 : 6B14                		bmi.s	loc_1C85E
   37071/   1C8A6 : 4880                		ext.w	d0
   37072/   1C8A8 : EB48                		lsl.w	#5,d0
   37073/   1C8AA : 47F1 0000           		lea	(a1,d0.w),a3
   37074/   1C8AE :                     
   37075/   1C8AE :                     loc_1C852:
   37076/   1C8AE : 2C9B                		move.l	(a3)+,(a6)
   37077/   1C8B0 : 51C9 FFFC           		dbf	d1,loc_1C852
   37078/   1C8B4 :                     
   37079/   1C8B4 :                     loc_1C858:
   37080/   1C8B4 : 51CA FFE8           		dbf	d2,loc_1C842
   37081/   1C8B8 :                     
   37082/   1C8B8 : 4E75                		rts	
   37083/   1C8BA :                     ; ===========================================================================
   37084/   1C8BA :                     
   37085/   1C8BA :                     loc_1C85E:
   37086/   1C8BA : 2CBC 0000 0000      		move.l	#0,(a6)
   37087/   1C8C0 : 51C9 FFF8           		dbf	d1,loc_1C85E
   37088/   1C8C4 :                     
   37089/   1C8C4 : 60EE                		bra.s	loc_1C858
   37090/   1C8C6 :                     ; End of function Hud_Base
   37091/   1C8C6 :                     
   37092/   1C8C6 :                     ; ===========================================================================
   37093/   1C8C6 : 16FF FFFF FFFF      Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
            1C8CC : FF00 0014 0000    
   37094/   1C8D2 : FFFF 0000           Hud_TilesZero:	dc.b $FF, $FF, 0, 0
   37095/   1C8D6 :                     ; ---------------------------------------------------------------------------
   37096/   1C8D6 :                     ; Subroutine to	load debug mode	numbers	patterns
   37097/   1C8D6 :                     ; ---------------------------------------------------------------------------
   37098/   1C8D6 :                     
   37099/   1C8D6 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   37100/   1C8D6 :                     
   37101/   1C8D6 :                     
   37102/   1C8D6 :                     HudDb_XY:				; XREF: HudDebug
   37103/   1C8D6 : 23FC 5C40 0003      		move.l	#$5C400003,($C00004).l ; set VRAM address
            1C8DC : 00C0 0004          
   37104/   1C8E0 : 3238 F700           		move.w	($FFFFF700).w,d1 ; load	camera x-position
   37105/   1C8E4 : 4841                		swap	d1
   37106/   1C8E6 : 3238 D008           		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
   37107/   1C8EA : 610A                		bsr.s	HudDb_XY2
   37108/   1C8EC : 3238 F704           		move.w	($FFFFF704).w,d1 ; load	camera y-position
   37109/   1C8F0 : 4841                		swap	d1
   37110/   1C8F2 : 3238 D00C           		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
   37111/   1C8F6 :                     ; End of function HudDb_XY
   37112/   1C8F6 :                     
   37113/   1C8F6 :                     
   37114/   1C8F6 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   37115/   1C8F6 :                     
   37116/   1C8F6 :                     
   37117/   1C8F6 :                     HudDb_XY2:
   37118/   1C8F6 : 7C07                		moveq	#7,d6
   37119/   1C8F8 : 43F9 0000 03D6      		lea	(Art_Text).l,a1
   37120/   1C8FE :                     
   37121/   1C8FE :                     HudDb_XYLoop:
   37122/   1C8FE : E959                		rol.w	#4,d1
   37123/   1C900 : 3401                		move.w	d1,d2
   37124/   1C902 : 0242 000F           		andi.w	#$F,d2
   37125/   1C906 : 0C42 000A           		cmpi.w	#$A,d2
   37126/   1C90A : 6502                		bcs.s	loc_1C8B2
   37127/   1C90C : 5E42                		addq.w	#7,d2
   37128/   1C90E :                     
   37129/   1C90E :                     loc_1C8B2:
   37130/   1C90E : EB4A                		lsl.w	#5,d2
   37131/   1C910 : 47F1 2000           		lea	(a1,d2.w),a3
   37132/   1C914 : 2C9B                		move.l	(a3)+,(a6)
   37133/   1C916 : 2C9B                		move.l	(a3)+,(a6)
   37134/   1C918 : 2C9B                		move.l	(a3)+,(a6)
   37135/   1C91A : 2C9B                		move.l	(a3)+,(a6)
   37136/   1C91C : 2C9B                		move.l	(a3)+,(a6)
   37137/   1C91E : 2C9B                		move.l	(a3)+,(a6)
   37138/   1C920 : 2C9B                		move.l	(a3)+,(a6)
   37139/   1C922 : 2C9B                		move.l	(a3)+,(a6)
   37140/   1C924 : 4841                		swap	d1
   37141/   1C926 : 51CE FFD6           		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
   37142/   1C92A :                     
   37143/   1C92A : 4E75                		rts	
   37144/   1C92C :                     ; End of function HudDb_XY2
   37145/   1C92C :                     
   37146/   1C92C :                     ; ---------------------------------------------------------------------------
   37147/   1C92C :                     ; Subroutine to	load rings numbers patterns
   37148/   1C92C :                     ; ---------------------------------------------------------------------------
   37149/   1C92C :                     
   37150/   1C92C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   37151/   1C92C :                     
   37152/   1C92C :                     
   37153/   1C92C :                     Hud_Rings:				; XREF: HudUpdate
   37154/   1C92C : 45F9 0001 C9F8      		lea	(Hud_100).l,a2
   37155/   1C932 : 7C02                		moveq	#2,d6
   37156/   1C934 : 6008                		bra.s	Hud_LoadArt
   37157/   1C936 :                     ; End of function Hud_Rings
   37158/   1C936 :                     
   37159/   1C936 :                     ; ---------------------------------------------------------------------------
   37160/   1C936 :                     ; Subroutine to	load score numbers patterns
   37161/   1C936 :                     ; ---------------------------------------------------------------------------
   37162/   1C936 :                     
   37163/   1C936 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   37164/   1C936 :                     
   37165/   1C936 :                     
   37166/   1C936 :                     Hud_Score:				; XREF: HudUpdate
   37167/   1C936 : 45F9 0001 C9EC      		lea	(Hud_100000).l,a2
   37168/   1C93C : 7C05                		moveq	#5,d6
   37169/   1C93E :                     
   37170/   1C93E :                     Hud_LoadArt:
   37171/   1C93E : 7800                		moveq	#0,d4
   37172/   1C940 : 43FA 01F4           		lea	Art_Hud(pc),a1
   37173/   1C944 :                     
   37174/   1C944 :                     Hud_ScoreLoop:
   37175/   1C944 : 7400                		moveq	#0,d2
   37176/   1C946 : 261A                		move.l	(a2)+,d3
   37177/   1C948 :                     
   37178/   1C948 :                     loc_1C8EC:
   37179/   1C948 : 9283                		sub.l	d3,d1
   37180/   1C94A : 6504                		bcs.s	loc_1C8F4
   37181/   1C94C : 5242                		addq.w	#1,d2
   37182/   1C94E : 60F8                		bra.s	loc_1C8EC
   37183/   1C950 :                     ; ===========================================================================
   37184/   1C950 :                     
   37185/   1C950 :                     loc_1C8F4:
   37186/   1C950 : D283                		add.l	d3,d1
   37187/   1C952 : 4A42                		tst.w	d2
   37188/   1C954 : 6704                		beq.s	loc_1C8FE
   37189/   1C956 : 383C 0001           		move.w	#1,d4
   37190/   1C95A :                     
   37191/   1C95A :                     loc_1C8FE:
   37192/   1C95A : 4A44                		tst.w	d4
   37193/   1C95C : 672A                		beq.s	loc_1C92C
   37194/   1C95E : ED4A                		lsl.w	#6,d2
   37195/   1C960 : 2D40 0004           		move.l	d0,4(a6)
   37196/   1C964 : 47F1 2000           		lea	(a1,d2.w),a3
   37197/   1C968 : 2C9B                		move.l	(a3)+,(a6)
   37198/   1C96A : 2C9B                		move.l	(a3)+,(a6)
   37199/   1C96C : 2C9B                		move.l	(a3)+,(a6)
   37200/   1C96E : 2C9B                		move.l	(a3)+,(a6)
   37201/   1C970 : 2C9B                		move.l	(a3)+,(a6)
   37202/   1C972 : 2C9B                		move.l	(a3)+,(a6)
   37203/   1C974 : 2C9B                		move.l	(a3)+,(a6)
   37204/   1C976 : 2C9B                		move.l	(a3)+,(a6)
   37205/   1C978 : 2C9B                		move.l	(a3)+,(a6)
   37206/   1C97A : 2C9B                		move.l	(a3)+,(a6)
   37207/   1C97C : 2C9B                		move.l	(a3)+,(a6)
   37208/   1C97E : 2C9B                		move.l	(a3)+,(a6)
   37209/   1C980 : 2C9B                		move.l	(a3)+,(a6)
   37210/   1C982 : 2C9B                		move.l	(a3)+,(a6)
   37211/   1C984 : 2C9B                		move.l	(a3)+,(a6)
   37212/   1C986 : 2C9B                		move.l	(a3)+,(a6)
   37213/   1C988 :                     
   37214/   1C988 :                     loc_1C92C:
   37215/   1C988 : 0680 0040 0000      		addi.l	#$400000,d0
   37216/   1C98E : 51CE FFB4           		dbf	d6,Hud_ScoreLoop
   37217/   1C992 :                     
   37218/   1C992 : 4E75                		rts	
   37219/   1C994 :                     ; End of function Hud_Score
   37220/   1C994 :                     
   37221/   1C994 :                     ; ---------------------------------------------------------------------------
   37222/   1C994 :                     ; Subroutine to	load countdown numbers on the continue screen
   37223/   1C994 :                     ; ---------------------------------------------------------------------------
   37224/   1C994 :                     
   37225/   1C994 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   37226/   1C994 :                     
   37227/   1C994 :                     
   37228/   1C994 :                     ContScrCounter:				; XREF: ContinueScreen
   37229/   1C994 : 23FC 5F80 0003      		move.l	#$5F800003,($C00004).l ; set VRAM address
            1C99A : 00C0 0004          
   37230/   1C99E : 4DF9 00C0 0000      		lea	($C00000).l,a6
   37231/   1C9A4 : 45F9 0001 C9FC      		lea	(Hud_10).l,a2
   37232/   1C9AA : 7C01                		moveq	#1,d6
   37233/   1C9AC : 7800                		moveq	#0,d4
   37234/   1C9AE : 43FA 0186           		lea	Art_Hud(pc),a1 ; load numbers patterns
   37235/   1C9B2 :                     
   37236/   1C9B2 :                     ContScr_Loop:
   37237/   1C9B2 : 7400                		moveq	#0,d2
   37238/   1C9B4 : 261A                		move.l	(a2)+,d3
   37239/   1C9B6 :                     
   37240/   1C9B6 :                     loc_1C95A:
   37241/   1C9B6 : 9283                		sub.l	d3,d1
   37242/   1C9B8 : 6504                		bcs.s	loc_1C962
   37243/   1C9BA : 5242                		addq.w	#1,d2
   37244/   1C9BC : 60F8                		bra.s	loc_1C95A
   37245/   1C9BE :                     ; ===========================================================================
   37246/   1C9BE :                     
   37247/   1C9BE :                     loc_1C962:
   37248/   1C9BE : D283                		add.l	d3,d1
   37249/   1C9C0 : ED4A                		lsl.w	#6,d2
   37250/   1C9C2 : 47F1 2000           		lea	(a1,d2.w),a3
   37251/   1C9C6 : 2C9B                		move.l	(a3)+,(a6)
   37252/   1C9C8 : 2C9B                		move.l	(a3)+,(a6)
   37253/   1C9CA : 2C9B                		move.l	(a3)+,(a6)
   37254/   1C9CC : 2C9B                		move.l	(a3)+,(a6)
   37255/   1C9CE : 2C9B                		move.l	(a3)+,(a6)
   37256/   1C9D0 : 2C9B                		move.l	(a3)+,(a6)
   37257/   1C9D2 : 2C9B                		move.l	(a3)+,(a6)
   37258/   1C9D4 : 2C9B                		move.l	(a3)+,(a6)
   37259/   1C9D6 : 2C9B                		move.l	(a3)+,(a6)
   37260/   1C9D8 : 2C9B                		move.l	(a3)+,(a6)
   37261/   1C9DA : 2C9B                		move.l	(a3)+,(a6)
   37262/   1C9DC : 2C9B                		move.l	(a3)+,(a6)
   37263/   1C9DE : 2C9B                		move.l	(a3)+,(a6)
   37264/   1C9E0 : 2C9B                		move.l	(a3)+,(a6)
   37265/   1C9E2 : 2C9B                		move.l	(a3)+,(a6)
   37266/   1C9E4 : 2C9B                		move.l	(a3)+,(a6)
   37267/   1C9E6 : 51CE FFCA           		dbf	d6,ContScr_Loop	; repeat 1 more	time
   37268/   1C9EA :                     
   37269/   1C9EA : 4E75                		rts	
   37270/   1C9EC :                     ; End of function ContScrCounter
   37271/   1C9EC :                     
   37272/   1C9EC :                     ; ===========================================================================
   37273/   1C9EC :                     ; ---------------------------------------------------------------------------
   37274/   1C9EC :                     ; HUD counter sizes
   37275/   1C9EC :                     ; ---------------------------------------------------------------------------
   37276/   1C9EC : 0001 86A0           Hud_100000:	dc.l 100000		; XREF: Hud_Score
   37277/   1C9F0 : 0000 2710           Hud_10000:	dc.l 10000
   37278/   1C9F4 : 0000 03E8           Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
   37279/   1C9F8 : 0000 0064           Hud_100:	dc.l 100		; XREF: Hud_Rings
   37280/   1C9FC : 0000 000A           Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
   37281/   1CA00 : 0000 0001           Hud_1:		dc.l 1			; XREF: Hud_Mins
   37282/   1CA04 :                     
   37283/   1CA04 :                     ; ---------------------------------------------------------------------------
   37284/   1CA04 :                     ; Subroutine to	load time numbers patterns
   37285/   1CA04 :                     ; ---------------------------------------------------------------------------
   37286/   1CA04 :                     
   37287/   1CA04 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   37288/   1CA04 :                     
   37289/   1CA04 :                     
   37290/   1CA04 :                     Hud_Mins:				; XREF: Hud_ChkTime
   37291/   1CA04 : 45F9 0001 CA00      		lea	(Hud_1).l,a2
   37292/   1CA0A : 7C00                		moveq	#0,d6
   37293/   1CA0C : 6008                		bra.s	loc_1C9BA
   37294/   1CA0E :                     ; End of function Hud_Mins
   37295/   1CA0E :                     
   37296/   1CA0E :                     
   37297/   1CA0E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   37298/   1CA0E :                     
   37299/   1CA0E :                     
   37300/   1CA0E :                     Hud_Secs:				; XREF: Hud_ChkTime
   37301/   1CA0E : 45F9 0001 C9FC      		lea	(Hud_10).l,a2
   37302/   1CA14 : 7C01                		moveq	#1,d6
   37303/   1CA16 :                     
   37304/   1CA16 :                     loc_1C9BA:
   37305/   1CA16 : 7800                		moveq	#0,d4
   37306/   1CA18 : 43FA 011C           		lea	Art_Hud(pc),a1
   37307/   1CA1C :                     
   37308/   1CA1C :                     Hud_TimeLoop:
   37309/   1CA1C : 7400                		moveq	#0,d2
   37310/   1CA1E : 261A                		move.l	(a2)+,d3
   37311/   1CA20 :                     
   37312/   1CA20 :                     loc_1C9C4:
   37313/   1CA20 : 9283                		sub.l	d3,d1
   37314/   1CA22 : 6504                		bcs.s	loc_1C9CC
   37315/   1CA24 : 5242                		addq.w	#1,d2
   37316/   1CA26 : 60F8                		bra.s	loc_1C9C4
   37317/   1CA28 :                     ; ===========================================================================
   37318/   1CA28 :                     
   37319/   1CA28 :                     loc_1C9CC:
   37320/   1CA28 : D283                		add.l	d3,d1
   37321/   1CA2A : 4A42                		tst.w	d2
   37322/   1CA2C : 6704                		beq.s	loc_1C9D6
   37323/   1CA2E : 383C 0001           		move.w	#1,d4
   37324/   1CA32 :                     
   37325/   1CA32 :                     loc_1C9D6:
   37326/   1CA32 : ED4A                		lsl.w	#6,d2
   37327/   1CA34 : 2D40 0004           		move.l	d0,4(a6)
   37328/   1CA38 : 47F1 2000           		lea	(a1,d2.w),a3
   37329/   1CA3C : 2C9B                		move.l	(a3)+,(a6)
   37330/   1CA3E : 2C9B                		move.l	(a3)+,(a6)
   37331/   1CA40 : 2C9B                		move.l	(a3)+,(a6)
   37332/   1CA42 : 2C9B                		move.l	(a3)+,(a6)
   37333/   1CA44 : 2C9B                		move.l	(a3)+,(a6)
   37334/   1CA46 : 2C9B                		move.l	(a3)+,(a6)
   37335/   1CA48 : 2C9B                		move.l	(a3)+,(a6)
   37336/   1CA4A : 2C9B                		move.l	(a3)+,(a6)
   37337/   1CA4C : 2C9B                		move.l	(a3)+,(a6)
   37338/   1CA4E : 2C9B                		move.l	(a3)+,(a6)
   37339/   1CA50 : 2C9B                		move.l	(a3)+,(a6)
   37340/   1CA52 : 2C9B                		move.l	(a3)+,(a6)
   37341/   1CA54 : 2C9B                		move.l	(a3)+,(a6)
   37342/   1CA56 : 2C9B                		move.l	(a3)+,(a6)
   37343/   1CA58 : 2C9B                		move.l	(a3)+,(a6)
   37344/   1CA5A : 2C9B                		move.l	(a3)+,(a6)
   37345/   1CA5C : 0680 0040 0000      		addi.l	#$400000,d0
   37346/   1CA62 : 51CE FFB8           		dbf	d6,Hud_TimeLoop
   37347/   1CA66 :                     
   37348/   1CA66 : 4E75                		rts	
   37349/   1CA68 :                     ; End of function Hud_Secs
   37350/   1CA68 :                     
   37351/   1CA68 :                     ; ---------------------------------------------------------------------------
   37352/   1CA68 :                     ; Subroutine to	load time/ring bonus numbers patterns
   37353/   1CA68 :                     ; ---------------------------------------------------------------------------
   37354/   1CA68 :                     
   37355/   1CA68 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   37356/   1CA68 :                     
   37357/   1CA68 :                     
   37358/   1CA68 :                     Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
   37359/   1CA68 : 45F9 0001 C9F4      		lea	(Hud_1000).l,a2
   37360/   1CA6E : 7C03                		moveq	#3,d6
   37361/   1CA70 : 7800                		moveq	#0,d4
   37362/   1CA72 : 43FA 00C2           		lea	Art_Hud(pc),a1
   37363/   1CA76 :                     
   37364/   1CA76 :                     Hud_BonusLoop:
   37365/   1CA76 : 7400                		moveq	#0,d2
   37366/   1CA78 : 261A                		move.l	(a2)+,d3
   37367/   1CA7A :                     
   37368/   1CA7A :                     loc_1CA1E:
   37369/   1CA7A : 9283                		sub.l	d3,d1
   37370/   1CA7C : 6504                		bcs.s	loc_1CA26
   37371/   1CA7E : 5242                		addq.w	#1,d2
   37372/   1CA80 : 60F8                		bra.s	loc_1CA1E
   37373/   1CA82 :                     ; ===========================================================================
   37374/   1CA82 :                     
   37375/   1CA82 :                     loc_1CA26:
   37376/   1CA82 : D283                		add.l	d3,d1
   37377/   1CA84 : 4A42                		tst.w	d2
   37378/   1CA86 : 6704                		beq.s	loc_1CA30
   37379/   1CA88 : 383C 0001           		move.w	#1,d4
   37380/   1CA8C :                     
   37381/   1CA8C :                     loc_1CA30:
   37382/   1CA8C : 4A44                		tst.w	d4
   37383/   1CA8E : 672C                		beq.s	Hud_ClrBonus
   37384/   1CA90 : ED4A                		lsl.w	#6,d2
   37385/   1CA92 : 47F1 2000           		lea	(a1,d2.w),a3
   37386/   1CA96 : 2C9B                		move.l	(a3)+,(a6)
   37387/   1CA98 : 2C9B                		move.l	(a3)+,(a6)
   37388/   1CA9A : 2C9B                		move.l	(a3)+,(a6)
   37389/   1CA9C : 2C9B                		move.l	(a3)+,(a6)
   37390/   1CA9E : 2C9B                		move.l	(a3)+,(a6)
   37391/   1CAA0 : 2C9B                		move.l	(a3)+,(a6)
   37392/   1CAA2 : 2C9B                		move.l	(a3)+,(a6)
   37393/   1CAA4 : 2C9B                		move.l	(a3)+,(a6)
   37394/   1CAA6 : 2C9B                		move.l	(a3)+,(a6)
   37395/   1CAA8 : 2C9B                		move.l	(a3)+,(a6)
   37396/   1CAAA : 2C9B                		move.l	(a3)+,(a6)
   37397/   1CAAC : 2C9B                		move.l	(a3)+,(a6)
   37398/   1CAAE : 2C9B                		move.l	(a3)+,(a6)
   37399/   1CAB0 : 2C9B                		move.l	(a3)+,(a6)
   37400/   1CAB2 : 2C9B                		move.l	(a3)+,(a6)
   37401/   1CAB4 : 2C9B                		move.l	(a3)+,(a6)
   37402/   1CAB6 :                     
   37403/   1CAB6 :                     loc_1CA5A:
   37404/   1CAB6 : 51CE FFBE           		dbf	d6,Hud_BonusLoop ; repeat 3 more times
   37405/   1CABA :                     
   37406/   1CABA : 4E75                		rts	
   37407/   1CABC :                     ; ===========================================================================
   37408/   1CABC :                     
   37409/   1CABC :                     Hud_ClrBonus:
   37410/   1CABC : 7A0F                		moveq	#$F,d5
   37411/   1CABE :                     
   37412/   1CABE :                     Hud_ClrBonusLoop:
   37413/   1CABE : 2CBC 0000 0000      		move.l	#0,(a6)
   37414/   1CAC4 : 51CD FFF8           		dbf	d5,Hud_ClrBonusLoop
   37415/   1CAC8 :                     
   37416/   1CAC8 : 60EC                		bra.s	loc_1CA5A
   37417/   1CACA :                     ; End of function Hud_TimeRingBonus
   37418/   1CACA :                     
   37419/   1CACA :                     ; ---------------------------------------------------------------------------
   37420/   1CACA :                     ; Subroutine to	load uncompressed lives	counter	patterns
   37421/   1CACA :                     ; ---------------------------------------------------------------------------
   37422/   1CACA :                     
   37423/   1CACA :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   37424/   1CACA :                     
   37425/   1CACA :                     
   37426/   1CACA :                     Hud_Lives:				; XREF: Hud_ChkLives
   37427/   1CACA : 203C 7BA0 0003      		move.l	#$7BA00003,d0	; set VRAM address
   37428/   1CAD0 : 7200                		moveq	#0,d1
   37429/   1CAD2 : 1238 FE12           		move.b	($FFFFFE12).w,d1 ; load	number of lives
   37430/   1CAD6 : 45F9 0001 C9FC      		lea	(Hud_10).l,a2
   37431/   1CADC : 7C01                		moveq	#1,d6
   37432/   1CADE : 7800                		moveq	#0,d4
   37433/   1CAE0 : 43FA 0354           		lea	Art_LivesNums(pc),a1
   37434/   1CAE4 :                     
   37435/   1CAE4 :                     Hud_LivesLoop:
   37436/   1CAE4 : 2D40 0004           		move.l	d0,4(a6)
   37437/   1CAE8 : 7400                		moveq	#0,d2
   37438/   1CAEA : 261A                		move.l	(a2)+,d3
   37439/   1CAEC :                     
   37440/   1CAEC :                     loc_1CA90:
   37441/   1CAEC : 9283                		sub.l	d3,d1
   37442/   1CAEE : 6504                		bcs.s	loc_1CA98
   37443/   1CAF0 : 5242                		addq.w	#1,d2
   37444/   1CAF2 : 60F8                		bra.s	loc_1CA90
   37445/   1CAF4 :                     ; ===========================================================================
   37446/   1CAF4 :                     
   37447/   1CAF4 :                     loc_1CA98:
   37448/   1CAF4 : D283                		add.l	d3,d1
   37449/   1CAF6 : 4A42                		tst.w	d2
   37450/   1CAF8 : 6704                		beq.s	loc_1CAA2
   37451/   1CAFA : 383C 0001           		move.w	#1,d4
   37452/   1CAFE :                     
   37453/   1CAFE :                     loc_1CAA2:
   37454/   1CAFE : 4A44                		tst.w	d4
   37455/   1CB00 : 6722                		beq.s	Hud_ClrLives
   37456/   1CB02 :                     
   37457/   1CB02 :                     loc_1CAA6:
   37458/   1CB02 : EB4A                		lsl.w	#5,d2
   37459/   1CB04 : 47F1 2000           		lea	(a1,d2.w),a3
   37460/   1CB08 : 2C9B                		move.l	(a3)+,(a6)
   37461/   1CB0A : 2C9B                		move.l	(a3)+,(a6)
   37462/   1CB0C : 2C9B                		move.l	(a3)+,(a6)
   37463/   1CB0E : 2C9B                		move.l	(a3)+,(a6)
   37464/   1CB10 : 2C9B                		move.l	(a3)+,(a6)
   37465/   1CB12 : 2C9B                		move.l	(a3)+,(a6)
   37466/   1CB14 : 2C9B                		move.l	(a3)+,(a6)
   37467/   1CB16 : 2C9B                		move.l	(a3)+,(a6)
   37468/   1CB18 :                     
   37469/   1CB18 :                     loc_1CABC:
   37470/   1CB18 : 0680 0040 0000      		addi.l	#$400000,d0
   37471/   1CB1E : 51CE FFC4           		dbf	d6,Hud_LivesLoop ; repeat 1 more time
   37472/   1CB22 :                     
   37473/   1CB22 : 4E75                		rts	
   37474/   1CB24 :                     ; ===========================================================================
   37475/   1CB24 :                     
   37476/   1CB24 :                     Hud_ClrLives:
   37477/   1CB24 : 4A46                		tst.w	d6
   37478/   1CB26 : 67DA                		beq.s	loc_1CAA6
   37479/   1CB28 : 7A07                		moveq	#7,d5
   37480/   1CB2A :                     
   37481/   1CB2A :                     Hud_ClrLivesLoop:
   37482/   1CB2A : 2CBC 0000 0000      		move.l	#0,(a6)
   37483/   1CB30 : 51CD FFF8           		dbf	d5,Hud_ClrLivesLoop
   37484/   1CB34 : 60E2                		bra.s	loc_1CABC
   37485/   1CB36 :                     ; End of function Hud_Lives
   37486/   1CB36 :                     
   37487/   1CB36 :                     ; ===========================================================================
   37488/   1CB36 :                     Art_Hud:	binclude	"_binary-files/artunc/HUD.bin"		; 8x16 pixel numbers on HUD
   37489/   1CE36 : (MACRO)              		even
   37490/   1CE36 :                     Art_LivesNums:	binclude	"_binary-files/artunc/livescnt.bin"	; 8x8 pixel numbers on lives counter
   37491/   1CF76 : (MACRO)              		even
   37492/   1CF76 :                     ; ===========================================================================
   37493/   1CF76 :                     ; ---------------------------------------------------------------------------
   37494/   1CF76 :                     ; When debug mode is currently in use
   37495/   1CF76 :                     ; ---------------------------------------------------------------------------
   37496/   1CF76 :                     
   37497/   1CF76 :                     DebugMode:				; XREF: Obj01; Obj09
   37498/   1CF76 : 7000                		moveq	#0,d0
   37499/   1CF78 : 1038 FE08           		move.b	($FFFFFE08).w,d0
   37500/   1CF7C : 323B 0006           		move.w	Debug_Index(pc,d0.w),d1
   37501/   1CF80 : 4EFB 1002           		jmp	Debug_Index(pc,d1.w)
   37502/   1CF84 :                     ; ===========================================================================
   37503/   1CF84 : 0004                Debug_Index:	dc.w Debug_Main-Debug_Index
   37504/   1CF86 : 0086                		dc.w Debug_Skip-Debug_Index
   37505/   1CF88 :                     ; ===========================================================================
   37506/   1CF88 :                     
   37507/   1CF88 :                     Debug_Main:				; XREF: Debug_Index
   37508/   1CF88 : 5438 FE08           		addq.b	#2,($FFFFFE08).w
   37509/   1CF8C : 31F8 F72C FEF0      		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
   37510/   1CF92 : 31F8 F726 FEF2      		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
   37511/   1CF98 : 31FC 0000 F72C      		move.w	#0,($FFFFF72C).w
   37512/   1CF9E : 31FC 0720 F726      		move.w	#$720,($FFFFF726).w
   37513/   1CFA4 : 0278 07FF D00C      		andi.w	#$7FF,($FFFFD00C).w
   37514/   1CFAA : 0278 07FF F704      		andi.w	#$7FF,($FFFFF704).w
   37515/   1CFB0 : 0278 03FF F70C      		andi.w	#$3FF,($FFFFF70C).w
   37516/   1CFB6 : 117C 0000 001A      		move.b	#0,$1A(a0)
   37517/   1CFBC : 117C 0000 001C      		move.b	#0,$1C(a0)
   37518/   1CFC2 : 0C38 0010 F600      		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
   37519/   1CFC8 : 6610                		bne.s	Debug_Zone	; if not, branch
   37520/   1CFCA : 31FC 0000 F782      		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
   37521/   1CFD0 : 31FC 0000 F780      		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
   37522/   1CFD6 : 7006                		moveq	#6,d0		; use 6th debug	item list
   37523/   1CFD8 : 6006                		bra.s	Debug_UseList
   37524/   1CFDA :                     ; ===========================================================================
   37525/   1CFDA :                     
   37526/   1CFDA :                     Debug_Zone:
   37527/   1CFDA : 7000                		moveq	#0,d0
   37528/   1CFDC : 1038 FE10           		move.b	($FFFFFE10).w,d0
   37529/   1CFE0 :                     
   37530/   1CFE0 :                     Debug_UseList:
   37531/   1CFE0 : 45F9 0001 D1C8      		lea	(DebugList).l,a2
   37532/   1CFE6 : D040                		add.w	d0,d0
   37533/   1CFE8 : D4F2 0000           		adda.w	(a2,d0.w),a2
   37534/   1CFEC : 3C1A                		move.w	(a2)+,d6
   37535/   1CFEE : BC38 FE06           		cmp.b	($FFFFFE06).w,d6
   37536/   1CFF2 : 6206                		bhi.s	loc_1CF9E
   37537/   1CFF4 : 11FC 0000 FE06      		move.b	#0,($FFFFFE06).w
   37538/   1CFFA :                     
   37539/   1CFFA :                     loc_1CF9E:
   37540/   1CFFA : 6100 01B0           		bsr.w	Debug_ShowItem
   37541/   1CFFE : 11FC 000C FE0A      		move.b	#$C,($FFFFFE0A).w
   37542/   1D004 : 11FC 0001 FE0B      		move.b	#1,($FFFFFE0B).w
   37543/   1D00A :                     
   37544/   1D00A :                     Debug_Skip:				; XREF: Debug_Index
   37545/   1D00A : 7006                		moveq	#6,d0
   37546/   1D00C : 0C38 0010 F600      		cmpi.b	#$10,($FFFFF600).w
   37547/   1D012 : 6706                		beq.s	loc_1CFBE
   37548/   1D014 : 7000                		moveq	#0,d0
   37549/   1D016 : 1038 FE10           		move.b	($FFFFFE10).w,d0
   37550/   1D01A :                     
   37551/   1D01A :                     loc_1CFBE:
   37552/   1D01A : 45F9 0001 D1C8      		lea	(DebugList).l,a2
   37553/   1D020 : D040                		add.w	d0,d0
   37554/   1D022 : D4F2 0000           		adda.w	(a2,d0.w),a2
   37555/   1D026 : 3C1A                		move.w	(a2)+,d6
   37556/   1D028 : 6100 0008           		bsr.w	Debug_Control
   37557/   1D02C : 4EF9 0000 D3D2      		jmp	DisplaySprite
   37558/   1D032 :                     
   37559/   1D032 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   37560/   1D032 :                     
   37561/   1D032 :                     
   37562/   1D032 :                     Debug_Control:
   37563/   1D032 : 7800                		moveq	#0,d4
   37564/   1D034 : 323C 0001           		move.w	#1,d1
   37565/   1D038 : 1838 F605           		move.b	($FFFFF605).w,d4
   37566/   1D03C : 0244 000F           		andi.w	#$F,d4		; is up/down/left/right	pressed?
   37567/   1D040 : 6632                		bne.s	loc_1D018	; if yes, branch
   37568/   1D042 : 1038 F604           		move.b	($FFFFF604).w,d0
   37569/   1D046 : 0240 000F           		andi.w	#$F,d0
   37570/   1D04A : 6610                		bne.s	loc_1D000
   37571/   1D04C : 11FC 000C FE0A      		move.b	#$C,($FFFFFE0A).w
   37572/   1D052 : 11FC 000F FE0B      		move.b	#$F,($FFFFFE0B).w
   37573/   1D058 : 6000 0070           		bra.w	Debug_BackItem
   37574/   1D05C :                     ; ===========================================================================
   37575/   1D05C :                     
   37576/   1D05C :                     loc_1D000:
   37577/   1D05C : 5338 FE0A           		subq.b	#1,($FFFFFE0A).w
   37578/   1D060 : 6616                		bne.s	loc_1D01C
   37579/   1D062 : 11FC 0001 FE0A      		move.b	#1,($FFFFFE0A).w
   37580/   1D068 : 5238 FE0B           		addq.b	#1,($FFFFFE0B).w
   37581/   1D06C : 6606                		bne.s	loc_1D018
   37582/   1D06E : 11FC 00FF FE0B      		move.b	#-1,($FFFFFE0B).w
   37583/   1D074 :                     
   37584/   1D074 :                     loc_1D018:
   37585/   1D074 : 1838 F604           		move.b	($FFFFF604).w,d4
   37586/   1D078 :                     
   37587/   1D078 :                     loc_1D01C:
   37588/   1D078 : 7200                		moveq	#0,d1
   37589/   1D07A : 1238 FE0B           		move.b	($FFFFFE0B).w,d1
   37590/   1D07E : 5241                		addq.w	#1,d1
   37591/   1D080 : 4841                		swap	d1
   37592/   1D082 : E881                		asr.l	#4,d1
   37593/   1D084 : 2428 000C           		move.l	$C(a0),d2
   37594/   1D088 : 2628 0008           		move.l	8(a0),d3
   37595/   1D08C : 0804 0000           		btst	#0,d4		; is up	being pressed?
   37596/   1D090 : 6706                		beq.s	loc_1D03C	; if not, branch
   37597/   1D092 : 9481                		sub.l	d1,d2
   37598/   1D094 : 6402                		bcc.s	loc_1D03C
   37599/   1D096 : 7400                		moveq	#0,d2
   37600/   1D098 :                     
   37601/   1D098 :                     loc_1D03C:
   37602/   1D098 : 0804 0001           		btst	#1,d4		; is down being	pressed?
   37603/   1D09C : 6710                		beq.s	loc_1D052	; if not, branch
   37604/   1D09E : D481                		add.l	d1,d2
   37605/   1D0A0 : 0C82 07FF 0000      		cmpi.l	#$7FF0000,d2
   37606/   1D0A6 : 6506                		bcs.s	loc_1D052
   37607/   1D0A8 : 243C 07FF 0000      		move.l	#$7FF0000,d2
   37608/   1D0AE :                     
   37609/   1D0AE :                     loc_1D052:
   37610/   1D0AE : 0804 0002           		btst	#2,d4
   37611/   1D0B2 : 6706                		beq.s	loc_1D05E
   37612/   1D0B4 : 9681                		sub.l	d1,d3
   37613/   1D0B6 : 6402                		bcc.s	loc_1D05E
   37614/   1D0B8 : 7600                		moveq	#0,d3
   37615/   1D0BA :                     
   37616/   1D0BA :                     loc_1D05E:
   37617/   1D0BA : 0804 0003           		btst	#3,d4
   37618/   1D0BE : 6702                		beq.s	loc_1D066
   37619/   1D0C0 : D681                		add.l	d1,d3
   37620/   1D0C2 :                     
   37621/   1D0C2 :                     loc_1D066:
   37622/   1D0C2 : 2142 000C           		move.l	d2,$C(a0)
   37623/   1D0C6 : 2143 0008           		move.l	d3,8(a0)
   37624/   1D0CA :                     
   37625/   1D0CA :                     Debug_BackItem:
   37626/   1D0CA : 0838 0006 F604      		btst	#6,($FFFFF604).w ; is button A pressed?
   37627/   1D0D0 : 6730                		beq.s	Debug_MakeItem	; if not, branch
   37628/   1D0D2 : 0838 0005 F605      		btst	#5,($FFFFF605).w ; is button C pressed?
   37629/   1D0D8 : 670C                		beq.s	Debug_NextItem	; if not, branch
   37630/   1D0DA : 5338 FE06           		subq.b	#1,($FFFFFE06).w ; go back 1 item
   37631/   1D0DE : 641E                		bcc.s	Debug_NoLoop
   37632/   1D0E0 : DD38 FE06           		add.b	d6,($FFFFFE06).w
   37633/   1D0E4 : 6018                		bra.s	Debug_NoLoop
   37634/   1D0E6 :                     ; ===========================================================================
   37635/   1D0E6 :                     
   37636/   1D0E6 :                     Debug_NextItem:
   37637/   1D0E6 : 0838 0006 F605      		btst	#6,($FFFFF605).w ; is button A pressed?
   37638/   1D0EC : 6714                		beq.s	Debug_MakeItem	; if not, branch
   37639/   1D0EE : 5238 FE06           		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
   37640/   1D0F2 : BC38 FE06           		cmp.b	($FFFFFE06).w,d6
   37641/   1D0F6 : 6206                		bhi.s	Debug_NoLoop
   37642/   1D0F8 : 11FC 0000 FE06      		move.b	#0,($FFFFFE06).w ; loop	back to	first item
   37643/   1D0FE :                     
   37644/   1D0FE :                     Debug_NoLoop:
   37645/   1D0FE : 6000 00AC           		bra.w	Debug_ShowItem
   37646/   1D102 :                     ; ===========================================================================
   37647/   1D102 :                     
   37648/   1D102 :                     Debug_MakeItem:
   37649/   1D102 : 0838 0005 F605      		btst	#5,($FFFFF605).w ; is button C pressed?
   37650/   1D108 : 673A                		beq.s	Debug_Exit	; if not, branch
   37651/   1D10A : 4EB9 0000 D858      		jsr	SingleObjLoad
   37652/   1D110 : 6632                		bne.s	Debug_Exit
   37653/   1D112 : 3368 0008 0008      		move.w	8(a0),8(a1)
   37654/   1D118 : 3368 000C 000C      		move.w	$C(a0),$C(a1)
   37655/   1D11E : 12A8 0004           		move.b	4(a0),0(a1)	; create object
   37656/   1D122 : 1368 0001 0001      		move.b	1(a0),1(a1)
   37657/   1D128 : 1368 0001 0022      		move.b	1(a0),$22(a1)
   37658/   1D12E : 0229 007F 0022      		andi.b	#$7F,$22(a1)
   37659/   1D134 : 7000                		moveq	#0,d0
   37660/   1D136 : 1038 FE06           		move.b	($FFFFFE06).w,d0
   37661/   1D13A : E748                		lsl.w	#3,d0
   37662/   1D13C : 1372 0004 0028      		move.b	4(a2,d0.w),$28(a1)
   37663/   1D142 : 4E75                		rts	
   37664/   1D144 :                     ; ===========================================================================
   37665/   1D144 :                     
   37666/   1D144 :                     Debug_Exit:
   37667/   1D144 : 0838 0004 F605      		btst	#4,($FFFFF605).w ; is button B pressed?
   37668/   1D14A : 675E                		beq.s	Debug_DoNothing	; if not, branch
   37669/   1D14C : 7000                		moveq	#0,d0
   37670/   1D14E : 31C0 FE08           		move.w	d0,($FFFFFE08).w ; deactivate debug mode
   37671/   1D152 : 21FC 0002 1148      		move.l	#Map_Sonic,($FFFFD004).w
            1D158 : D004             
   37672/   1D15A : 31FC 0780 D002      		move.w	#$780,($FFFFD002).w
   37673/   1D160 : 11C0 D01C           		move.b	d0,($FFFFD01C).w
   37674/   1D164 : 3140 000A           		move.w	d0,$A(a0)
   37675/   1D168 : 3140 000E           		move.w	d0,$E(a0)
   37676/   1D16C : 31F8 FEF0 F72C      		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
   37677/   1D172 : 31F8 FEF2 F726      		move.w	($FFFFFEF2).w,($FFFFF726).w
   37678/   1D178 : 0C38 0010 F600      		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
   37679/   1D17E : 662A                		bne.s	Debug_DoNothing	; if not, branch
   37680/   1D180 : 4278 F780           		clr.w	($FFFFF780).w
   37681/   1D184 : 31FC 0040 F782      		move.w	#$40,($FFFFF782).w ; set new level rotation speed
   37682/   1D18A : 21FC 0002 1148      		move.l	#Map_Sonic,($FFFFD004).w
            1D190 : D004             
   37683/   1D192 : 31FC 0780 D002      		move.w	#$780,($FFFFD002).w
   37684/   1D198 : 11FC 0002 D01C      		move.b	#2,($FFFFD01C).w
   37685/   1D19E : 08F8 0002 D022      		bset	#2,($FFFFD022).w
   37686/   1D1A4 : 08F8 0001 D022      		bset	#1,($FFFFD022).w
   37687/   1D1AA :                     
   37688/   1D1AA :                     Debug_DoNothing:
   37689/   1D1AA : 4E75                		rts	
   37690/   1D1AC :                     ; End of function Debug_Control
   37691/   1D1AC :                     
   37692/   1D1AC :                     
   37693/   1D1AC :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
   37694/   1D1AC :                     
   37695/   1D1AC :                     
   37696/   1D1AC :                     Debug_ShowItem:				; XREF: Debug_Main
   37697/   1D1AC : 7000                		moveq	#0,d0
   37698/   1D1AE : 1038 FE06           		move.b	($FFFFFE06).w,d0
   37699/   1D1B2 : E748                		lsl.w	#3,d0
   37700/   1D1B4 : 2172 0000 0004      		move.l	(a2,d0.w),4(a0)	; load mappings	for item
   37701/   1D1BA : 3172 0006 0002      		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
   37702/   1D1C0 : 1172 0005 001A      		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
   37703/   1D1C6 : 4E75                		rts	
   37704/   1D1C8 :                     ; End of function Debug_ShowItem
   37705/   1D1C8 :                     
   37706/   1D1C8 :                     ; ===========================================================================
   37707/   1D1C8 :                     ; ---------------------------------------------------------------------------
   37708/   1D1C8 :                     ; Debug	list pointers
   37709/   1D1C8 :                     ; ---------------------------------------------------------------------------
   37710/   1D1C8 :                     DebugList:
   37711/   1D1C8 :                     	include "_includes-ASM/Debug list pointers.asm"
(1)    1/   1D1C8 :                     ; ---------------------------------------------------------------------------
(1)    2/   1D1C8 :                     ; Debug	list pointers
(1)    3/   1D1C8 :                     ; ---------------------------------------------------------------------------
(1)    4/   1D1C8 : 000E                	dc.w Debug_GHZ-DebugList
(1)    5/   1D1CA : 0090                	dc.w Debug_LZ-DebugList
(1)    6/   1D1CC : 015A                	dc.w Debug_MZ-DebugList
(1)    7/   1D1CE : 01EC                	dc.w Debug_SLZ-DebugList
(1)    8/   1D1D0 : 0266                	dc.w Debug_SYZ-DebugList
(1)    9/   1D1D2 : 02E0                	dc.w Debug_SBZ-DebugList
(1)   10/   1D1D4 : 03CA                	dc.w Debug_Ending-DebugList
   37712/   1D1D6 :                     
   37713/   1D1D6 :                     ; ---------------------------------------------------------------------------
   37714/   1D1D6 :                     ; Debug	list - Green Hill
   37715/   1D1D6 :                     ; ---------------------------------------------------------------------------
   37716/   1D1D6 :                     Debug_GHZ:
   37717/   1D1D6 :                     	include "_includes-ASM/Debug list - GHZ.asm"
(1)    1/   1D1D6 :                     ; ---------------------------------------------------------------------------
(1)    2/   1D1D6 :                     ; Debug	list - Green Hill
(1)    3/   1D1D6 :                     ; ---------------------------------------------------------------------------
(1)    4/   1D1D6 : 0010                	dc.w $10			; number of items in list
(1)    5/   1D1D8 : 2500 9D7C           	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
(1)    6/   1D1DC : 0000 27B2           	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
(1)    7/   1D1E0 : 2600 A370           	dc.l Map_obj26+$26000000
(1)    8/   1D1E4 : 0000 0680           	dc.b 0,	0, 6, $80
(1)    9/   1D1E8 : 1F00 9546           	dc.l Map_obj1F+$1F000000
(1)   10/   1D1EC : 0000 0400           	dc.b 0,	0, 4, 0
(1)   11/   1D1F0 : 2200 9826           	dc.l Map_obj22+$22000000
(1)   12/   1D1F4 : 0000 0444           	dc.b 0,	0, 4, $44
(1)   13/   1D1F8 : 2B00 A9B0           	dc.l Map_obj2B+$2B000000
(1)   14/   1D1FC : 0000 047B           	dc.b 0,	0, 4, $7B
(1)   15/   1D200 : 3600 CDBA           	dc.l Map_obj36+$36000000
(1)   16/   1D204 : 0000 051B           	dc.b 0,	0, 5, $1B
(1)   17/   1D208 : 1800 7F44           	dc.l Map_obj18+$18000000
(1)   18/   1D20C : 0000 4000           	dc.b 0,	0, $40,	0
(1)   19/   1D210 : 3B00 CEE0           	dc.l Map_obj3B+$3B000000
(1)   20/   1D214 : 0000 63D0           	dc.b 0,	0, $63,	$D0
(1)   21/   1D218 : 4000 F55C           	dc.l Map_obj40+$40000000
(1)   22/   1D21C : 0000 04F0           	dc.b 0,	0, 4, $F0
(1)   23/   1D220 : 4100 DAE6           	dc.l Map_obj41+$41000000
(1)   24/   1D224 : 0000 0523           	dc.b 0,	0, 5, $23
(1)   25/   1D228 : 4200 DD0C           	dc.l Map_obj42+$42000000
(1)   26/   1D22C : 0000 249B           	dc.b 0,	0, $24,	$9B
(1)   27/   1D230 : 4400 E01A           	dc.l Map_obj44+$44000000
(1)   28/   1D234 : 0000 434C           	dc.b 0,	0, $43,	$4C
(1)   29/   1D238 : 1900 7FB2           	dc.l Map_obj48+$19000000
(1)   30/   1D23C : 0000 43AA           	dc.b 0,	0, $43,	$AA
(1)   31/   1D240 : 7901 6EDE           	dc.l Map_obj79+$79000000
(1)   32/   1D244 : 0100 07A0           	dc.b 1,	0, 7, $A0
(1)   33/   1D248 : 4B00 9DBC           	dc.l Map_obj4B+$4B000000
(1)   34/   1D24C : 0000 2400           	dc.b 0,	0, $24,	0
(1)   35/   1D250 : 7D01 702E           	dc.l Map_obj7D+$7D000000
(1)   36/   1D254 : 0101 84B6           	dc.b 1,	1, $84,	$B6
(1)   37/   1D258 : (MACRO)              	even
   37718/   1D258 :                     
   37719/   1D258 :                     ; ---------------------------------------------------------------------------
   37720/   1D258 :                     ; Debug	list - Labyrinth
   37721/   1D258 :                     ; ---------------------------------------------------------------------------
   37722/   1D258 :                     Debug_LZ:
   37723/   1D258 :                     	include "_includes-ASM/Debug list - LZ.asm"
(1)    1/   1D258 :                     ; ---------------------------------------------------------------------------
(1)    2/   1D258 :                     ; Debug	list - Labyrinth
(1)    3/   1D258 :                     ; ---------------------------------------------------------------------------
(1)    4/   1D258 : 0019                	dc.w $19
(1)    5/   1D25A : 2500 9D7C           	dc.l Map_obj25+$25000000
(1)    6/   1D25E : 0000 27B2           	dc.b 0,	0, $27,	$B2
(1)    7/   1D262 : 2600 A370           	dc.l Map_obj26+$26000000
(1)    8/   1D266 : 0000 0680           	dc.b 0,	0, 6, $80
(1)    9/   1D26A : 4100 DAE6           	dc.l Map_obj41+$41000000
(1)   10/   1D26E : 0000 0523           	dc.b 0,	0, 5, $23
(1)   11/   1D272 : 2C00 AA56           	dc.l Map_obj2C+$2C000000
(1)   12/   1D276 : 0800 2486           	dc.b 8,	0, $24,	$86
(1)   13/   1D27A : 2D00 AC42           	dc.l Map_obj2D+$2D000000
(1)   14/   1D27E : 0002 84A6           	dc.b 0,	2, $84,	$A6
(1)   15/   1D282 : 1601 1D3C           	dc.l Map_obj16+$16000000
(1)   16/   1D286 : 0000 03CC           	dc.b 0,	0, 3, $CC
(1)   17/   1D28A : 1601 1D3C           	dc.l Map_obj16+$16000000
(1)   18/   1D28E : 0203 03CC           	dc.b 2,	3, 3, $CC
(1)   19/   1D292 : 3300 C0C0           	dc.l Map_obj33+$33000000
(1)   20/   1D296 : 0000 43DE           	dc.b 0,	0, $43,	$DE
(1)   21/   1D29A : 3200 BC80           	dc.l Map_obj32+$32000000
(1)   22/   1D29E : 0000 0513           	dc.b 0,	0, 5, $13
(1)   23/   1D2A2 : 3600 CDBA           	dc.l Map_obj36+$36000000
(1)   24/   1D2A6 : 0000 051B           	dc.b 0,	0, 5, $1B
(1)   25/   1D2AA : 5200 FE5A           	dc.l Map_obj52a+$52000000
(1)   26/   1D2AE : 0400 43BC           	dc.b 4,	0, $43,	$BC
(1)   27/   1D2B2 : 6101 1F64           	dc.l Map_obj61+$61000000
(1)   28/   1D2B6 : 0100 43E6           	dc.b 1,	0, $43,	$E6
(1)   29/   1D2BA : 6101 1F64           	dc.l Map_obj61+$61000000
(1)   30/   1D2BE : 1301 43E6           	dc.b $13, 1, $43, $E6
(1)   31/   1D2C2 : 6101 1F64           	dc.l Map_obj61+$61000000
(1)   32/   1D2C6 : 0500 43E6           	dc.b 5,	0, $43,	$E6
(1)   33/   1D2CA : 6201 20B8           	dc.l Map_obj62+$62000000
(1)   34/   1D2CE : 0000 443E           	dc.b 0,	0, $44,	$3E
(1)   35/   1D2D2 : 6101 1F64           	dc.l Map_obj61+$61000000
(1)   36/   1D2D6 : 2702 43E6           	dc.b $27, 2, $43, $E6
(1)   37/   1D2DA : 6101 1F64           	dc.l Map_obj61+$61000000
(1)   38/   1D2DE : 3003 43E6           	dc.b $30, 3, $43, $E6
(1)   39/   1D2E2 : 6301 241A           	dc.l Map_obj63+$63000000
(1)   40/   1D2E6 : 7F00 03F6           	dc.b $7F, 0, 3,	$F6
(1)   41/   1D2EA : 6001 1C86           	dc.l Map_obj60+$60000000
(1)   42/   1D2EE : 0000 0467           	dc.b 0,	0, 4, $67
(1)   43/   1D2F2 : 6401 2768           	dc.l Map_obj64+$64000000
(1)   44/   1D2F6 : 8413 8348           	dc.b $84, $13, $83, $48
(1)   45/   1D2FA : 6501 28F0           	dc.l Map_obj65+$65000000
(1)   46/   1D2FE : 0202 C259           	dc.b 2,	2, $C2,	$59
(1)   47/   1D302 : 6501 28F0           	dc.l Map_obj65+$65000000
(1)   48/   1D306 : 0909 C259           	dc.b 9,	9, $C2,	$59
(1)   49/   1D30A : 0B01 10D2           	dc.l Map_obj0B+$B000000
(1)   50/   1D30E : 0000 43DE           	dc.b 0,	0, $43,	$DE
(1)   51/   1D312 : 0C01 11A2           	dc.l Map_obj0C+$C000000
(1)   52/   1D316 : 0200 4328           	dc.b 2,	0, $43,	$28
(1)   53/   1D31A : 7901 6EDE           	dc.l Map_obj79+$79000000
(1)   54/   1D31E : 0100 07A0           	dc.b 1,	0, 7, $A0
(1)   55/   1D322 : (MACRO)              	even
   37724/   1D322 :                     
   37725/   1D322 :                     ; ---------------------------------------------------------------------------
   37726/   1D322 :                     ; Debug	list - Marble
   37727/   1D322 :                     ; ---------------------------------------------------------------------------
   37728/   1D322 :                     Debug_MZ:
   37729/   1D322 :                     	include "_includes-ASM/Debug list - MZ.asm"
(1)    1/   1D322 :                     ; ---------------------------------------------------------------------------
(1)    2/   1D322 :                     ; Debug	list - Marble
(1)    3/   1D322 :                     ; ---------------------------------------------------------------------------
(1)    4/   1D322 : 0012                	dc.w $12
(1)    5/   1D324 : 2500 9D7C           	dc.l Map_obj25+$25000000
(1)    6/   1D328 : 0000 27B2           	dc.b 0,	0, $27,	$B2
(1)    7/   1D32C : 2600 A370           	dc.l Map_obj26+$26000000
(1)    8/   1D330 : 0000 0680           	dc.b 0,	0, 6, $80
(1)    9/   1D334 : 2200 9826           	dc.l Map_obj22+$22000000
(1)   10/   1D338 : 0000 0444           	dc.b 0,	0, 4, $44
(1)   11/   1D33C : 3600 CDBA           	dc.l Map_obj36+$36000000
(1)   12/   1D340 : 0000 051B           	dc.b 0,	0, 5, $1B
(1)   13/   1D344 : 4100 DAE6           	dc.l Map_obj41+$41000000
(1)   14/   1D348 : 0000 0523           	dc.b 0,	0, 5, $23
(1)   15/   1D34C : 1300 B150           	dc.l Map_obj14+$13000000
(1)   16/   1D350 : 0000 0345           	dc.b 0,	0, 3, $45
(1)   17/   1D354 : 4600 E6CC           	dc.l Map_obj46+$46000000
(1)   18/   1D358 : 0000 4000           	dc.b 0,	0, $40,	0
(1)   19/   1D35C : 4C00 F008           	dc.l Map_obj4C+$4C000000
(1)   20/   1D360 : 0000 63A8           	dc.b 0,	0, $63,	$A8
(1)   21/   1D364 : 4E00 F2EC           	dc.l Map_obj4E+$4E000000
(1)   22/   1D368 : 0000 63A8           	dc.b 0,	0, $63,	$A8
(1)   23/   1D36C : 3300 C0C0           	dc.l Map_obj33+$33000000
(1)   24/   1D370 : 0000 42B8           	dc.b 0,	0, $42,	$B8
(1)   25/   1D374 : 5000 F6EA           	dc.l Map_obj50+$50000000
(1)   26/   1D378 : 0000 247B           	dc.b 0,	0, $24,	$7B
(1)   27/   1D37C : 5100 FB8E           	dc.l Map_obj51+$51000000
(1)   28/   1D380 : 0000 42B8           	dc.b 0,	0, $42,	$B8
(1)   29/   1D384 : 5200 FE04           	dc.l Map_obj52+$52000000
(1)   30/   1D388 : 0000 02B8           	dc.b 0,	0, 2, $B8
(1)   31/   1D38C : 5300 854A           	dc.l Map_obj53+$53000000
(1)   32/   1D390 : 0000 62B8           	dc.b 0,	0, $62,	$B8
(1)   33/   1D394 : 5400 EFCE           	dc.l Map_obj54+$54000000
(1)   34/   1D398 : 0000 8680           	dc.b 0,	0, $86,	$80
(1)   35/   1D39C : 5500 FFF8           	dc.l Map_obj55+$55000000
(1)   36/   1D3A0 : 0000 04B8           	dc.b 0,	0, 4, $B8
(1)   37/   1D3A4 : 7801 6B56           	dc.l Map_obj78+$78000000
(1)   38/   1D3A8 : 0000 24FF           	dc.b 0,	0, $24,	$FF
(1)   39/   1D3AC : 7901 6EDE           	dc.l Map_obj79+$79000000
(1)   40/   1D3B0 : 0100 07A0           	dc.b 1,	0, 7, $A0
(1)   41/   1D3B4 : (MACRO)              	even
   37730/   1D3B4 :                     
   37731/   1D3B4 :                     ; ---------------------------------------------------------------------------
   37732/   1D3B4 :                     ; Debug	list - Star Light
   37733/   1D3B4 :                     ; ---------------------------------------------------------------------------
   37734/   1D3B4 :                     Debug_SLZ:
   37735/   1D3B4 :                     	include "_includes-ASM/Debug list - SLZ.asm"
(1)    1/   1D3B4 :                     ; ---------------------------------------------------------------------------
(1)    2/   1D3B4 :                     ; Debug	list - Star Light
(1)    3/   1D3B4 :                     ; ---------------------------------------------------------------------------
(1)    4/   1D3B4 : 000F                	dc.w $F
(1)    5/   1D3B6 : 2500 9D7C           	dc.l Map_obj25+$25000000
(1)    6/   1D3BA : 0000 27B2           	dc.b 0,	0, $27,	$B2
(1)    7/   1D3BE : 2600 A370           	dc.l Map_obj26+$26000000
(1)    8/   1D3C2 : 0000 0680           	dc.b 0,	0, 6, $80
(1)    9/   1D3C6 : 5901 0AFA           	dc.l Map_obj59+$59000000
(1)   10/   1D3CA : 0000 4000           	dc.b 0,	0, $40,	0
(1)   11/   1D3CE : 5300 854A           	dc.l Map_obj53+$53000000
(1)   12/   1D3D2 : 0002 44E0           	dc.b 0,	2, $44,	$E0
(1)   13/   1D3D6 : 1800 7FA2           	dc.l Map_obj18b+$18000000
(1)   14/   1D3DA : 0000 4000           	dc.b 0,	0, $40,	0
(1)   15/   1D3DE : 5A01 0C34           	dc.l Map_obj5A+$5A000000
(1)   16/   1D3E2 : 0000 4000           	dc.b 0,	0, $40,	0
(1)   17/   1D3E6 : 5B01 0DEC           	dc.l Map_obj5B+$5B000000
(1)   18/   1D3EA : 0000 4000           	dc.b 0,	0, $40,	0
(1)   19/   1D3EE : 5D01 13C0           	dc.l Map_obj5D+$5D000000
(1)   20/   1D3F2 : 0000 43A0           	dc.b 0,	0, $43,	$A0
(1)   21/   1D3F6 : 5E01 1752           	dc.l Map_obj5E+$5E000000
(1)   22/   1D3FA : 0000 0374           	dc.b 0,	0, 3, $74
(1)   23/   1D3FE : 4100 DAE6           	dc.l Map_obj41+$41000000
(1)   24/   1D402 : 0000 0523           	dc.b 0,	0, 5, $23
(1)   25/   1D406 : 1300 B150           	dc.l Map_obj14+$13000000
(1)   26/   1D40A : 0000 0480           	dc.b 0,	0, 4, $80
(1)   27/   1D40E : 1C00 865A           	dc.l Map_obj1C+$1C000000
(1)   28/   1D412 : 0000 44D8           	dc.b 0,	0, $44,	$D8
(1)   29/   1D416 : 5F01 19D0           	dc.l Map_obj5F+$5F000000
(1)   30/   1D41A : 0000 0400           	dc.b 0,	0, 4, 0
(1)   31/   1D41E : 6001 1C86           	dc.l Map_obj60+$60000000
(1)   32/   1D422 : 0000 2429           	dc.b 0,	0, $24,	$29
(1)   33/   1D426 : 7901 6EDE           	dc.l Map_obj79+$79000000
(1)   34/   1D42A : 0100 07A0           	dc.b 1,	0, 7, $A0
(1)   35/   1D42E : (MACRO)              	even
   37736/   1D42E :                     
   37737/   1D42E :                     ; ---------------------------------------------------------------------------
   37738/   1D42E :                     ; Debug	list - Spring Yard
   37739/   1D42E :                     ; ---------------------------------------------------------------------------
   37740/   1D42E :                     Debug_SYZ:
   37741/   1D42E :                     	include "_includes-ASM/Debug list - SYZ.asm"
(1)    1/   1D42E :                     ; ---------------------------------------------------------------------------
(1)    2/   1D42E :                     ; Debug	list - Spring Yard
(1)    3/   1D42E :                     ; ---------------------------------------------------------------------------
(1)    4/   1D42E : 000F                	dc.w $F
(1)    5/   1D430 : 2500 9D7C           	dc.l Map_obj25+$25000000
(1)    6/   1D434 : 0000 27B2           	dc.b 0,	0, $27,	$B2
(1)    7/   1D438 : 2600 A370           	dc.l Map_obj26+$26000000
(1)    8/   1D43C : 0000 0680           	dc.b 0,	0, 6, $80
(1)    9/   1D440 : 3600 CDBA           	dc.l Map_obj36+$36000000
(1)   10/   1D444 : 0000 051B           	dc.b 0,	0, 5, $1B
(1)   11/   1D448 : 4100 DAE6           	dc.l Map_obj41+$41000000
(1)   12/   1D44C : 0000 0523           	dc.b 0,	0, 5, $23
(1)   13/   1D450 : 4300 DF6C           	dc.l Map_obj43+$43000000
(1)   14/   1D454 : 0000 04B8           	dc.b 0,	0, 4, $B8
(1)   15/   1D458 : 1200 E74A           	dc.l Map_obj12+$12000000
(1)   16/   1D45C : 0000 0000           	dc.b 0,	0, 0, 0
(1)   17/   1D460 : 4700 E8C6           	dc.l Map_obj47+$47000000
(1)   18/   1D464 : 0000 0380           	dc.b 0,	0, 3, $80
(1)   19/   1D468 : 1F00 9546           	dc.l Map_obj1F+$1F000000
(1)   20/   1D46C : 0000 0400           	dc.b 0,	0, 4, 0
(1)   21/   1D470 : 2200 9826           	dc.l Map_obj22+$22000000
(1)   22/   1D474 : 0000 0444           	dc.b 0,	0, 4, $44
(1)   23/   1D478 : 5000 F6EA           	dc.l Map_obj50+$50000000
(1)   24/   1D47C : 0000 247B           	dc.b 0,	0, $24,	$7B
(1)   25/   1D480 : 1800 7F90           	dc.l Map_obj18a+$18000000
(1)   26/   1D484 : 0000 4000           	dc.b 0,	0, $40,	0
(1)   27/   1D488 : 5601 04BA           	dc.l Map_obj56+$56000000
(1)   28/   1D48C : 0000 4000           	dc.b 0,	0, $40,	0
(1)   29/   1D490 : 3200 BC80           	dc.l Map_obj32+$32000000
(1)   30/   1D494 : 0000 0513           	dc.b 0,	0, 5, $13
(1)   31/   1D498 : 7801 6B56           	dc.l Map_obj78+$78000000
(1)   32/   1D49C : 0000 24FF           	dc.b 0,	0, $24,	$FF
(1)   33/   1D4A0 : 7901 6EDE           	dc.l Map_obj79+$79000000
(1)   34/   1D4A4 : 0100 07A0           	dc.b 1,	0, 7, $A0
(1)   35/   1D4A8 : (MACRO)              	even
   37742/   1D4A8 :                     
   37743/   1D4A8 :                     ; ---------------------------------------------------------------------------
   37744/   1D4A8 :                     ; Debug	list - Scrap Brain
   37745/   1D4A8 :                     ; ---------------------------------------------------------------------------
   37746/   1D4A8 :                     Debug_SBZ:
   37747/   1D4A8 :                     	include "_includes-ASM/Debug list - SBZ.asm"
(1)    1/   1D4A8 :                     ; ---------------------------------------------------------------------------
(1)    2/   1D4A8 :                     ; Debug	list - Scrap Brain
(1)    3/   1D4A8 :                     ; ---------------------------------------------------------------------------
(1)    4/   1D4A8 : 001D                	dc.w $1D
(1)    5/   1D4AA : 2500 9D7C           	dc.l Map_obj25+$25000000
(1)    6/   1D4AE : 0000 27B2           	dc.b 0,	0, $27,	$B2
(1)    7/   1D4B2 : 2600 A370           	dc.l Map_obj26+$26000000
(1)    8/   1D4B6 : 0000 0680           	dc.b 0,	0, 6, $80
(1)    9/   1D4BA : 5F01 19D0           	dc.l Map_obj5F+$5F000000
(1)   10/   1D4BE : 0000 0400           	dc.b 0,	0, 4, 0
(1)   11/   1D4C2 : 6001 1C86           	dc.l Map_obj60+$60000000
(1)   12/   1D4C6 : 0000 0429           	dc.b 0,	0, 4, $29
(1)   13/   1D4CA : 7801 6B56           	dc.l Map_obj78+$78000000
(1)   14/   1D4CE : 0000 22B0           	dc.b 0,	0, $22,	$B0
(1)   15/   1D4D2 : 1501 0856           	dc.l Map_obj15b+$15000000
(1)   16/   1D4D6 : 0702 4391           	dc.b 7,	2, $43,	$91
(1)   17/   1D4DA : 6701 5474           	dc.l Map_obj67+$67000000
(1)   18/   1D4DE : E000 C344           	dc.b $E0, 0, $C3, $44
(1)   19/   1D4E2 : 5200 FE04           	dc.l Map_obj52+$52000000
(1)   20/   1D4E6 : 2802 22C0           	dc.b $28, 2, $22, $C0
(1)   21/   1D4EA : 3200 BC80           	dc.l Map_obj32+$32000000
(1)   22/   1D4EE : 0000 0513           	dc.b 0,	0, 5, $13
(1)   23/   1D4F2 : 6901 56CE           	dc.l Map_obj69+$69000000
(1)   24/   1D4F6 : 0300 4492           	dc.b 3,	0, $44,	$92
(1)   25/   1D4FA : 6901 5728           	dc.l Map_obj69a+$69000000
(1)   26/   1D4FE : 8300 04DF           	dc.b $83, 0, 4,	$DF
(1)   27/   1D502 : 6A01 5986           	dc.l Map_obj6A+$6A000000
(1)   28/   1D506 : 0200 43B5           	dc.b 2,	0, $43,	$B5
(1)   29/   1D50A : 5300 854A           	dc.l Map_obj53+$53000000
(1)   30/   1D50E : 0000 43F5           	dc.b 0,	0, $43,	$F5
(1)   31/   1D512 : 5200 FE04           	dc.l Map_obj52+$52000000
(1)   32/   1D516 : 3903 4460           	dc.b $39, 3, $44, $60
(1)   33/   1D51A : 6B01 5D56           	dc.l Map_obj6B+$6B000000
(1)   34/   1D51E : 0000 22C0           	dc.b 0,	0, $22,	$C0
(1)   35/   1D522 : 2A00 87F0           	dc.l Map_obj2A+$2A000000
(1)   36/   1D526 : 0000 42E8           	dc.b 0,	0, $42,	$E8
(1)   37/   1D52A : 6B01 5D56           	dc.l Map_obj6B+$6B000000
(1)   38/   1D52E : 1301 22C0           	dc.b $13, 1, $22, $C0
(1)   39/   1D532 : 6A01 5986           	dc.l Map_obj6A+$6A000000
(1)   40/   1D536 : 0100 43B5           	dc.b 1,	0, $43,	$B5
(1)   41/   1D53A : 6B01 5D56           	dc.l Map_obj6B+$6B000000
(1)   42/   1D53E : 2401 22C0           	dc.b $24, 1, $22, $C0
(1)   43/   1D542 : 6A01 5986           	dc.l Map_obj6A+$6A000000
(1)   44/   1D546 : 0402 43B5           	dc.b 4,	2, $43,	$B5
(1)   45/   1D54A : 6B01 5D56           	dc.l Map_obj6B+$6B000000
(1)   46/   1D54E : 3401 22C0           	dc.b $34, 1, $22, $C0
(1)   47/   1D552 : 6C01 5F18           	dc.l Map_obj6C+$6C000000
(1)   48/   1D556 : 0000 44C3           	dc.b 0,	0, $44,	$C3
(1)   49/   1D55A : 6D00 E3BC           	dc.l Map_obj6D+$6D000000
(1)   50/   1D55E : 6400 83D9           	dc.b $64, 0, $83, $D9
(1)   51/   1D562 : 6D00 E3BC           	dc.l Map_obj6D+$6D000000
(1)   52/   1D566 : 640B 83D9           	dc.b $64, $B, $83, $D9
(1)   53/   1D56A : 6E01 5FCE           	dc.l Map_obj6E+$6E000000
(1)   54/   1D56E : 0400 047E           	dc.b 4,	0, 4, $7E
(1)   55/   1D572 : 7001 6414           	dc.l Map_obj70+$70000000
(1)   56/   1D576 : 0000 42F0           	dc.b 0,	0, $42,	$F0
(1)   57/   1D57A : 7101 1266           	dc.l Map_obj71+$71000000
(1)   58/   1D57E : 1100 8680           	dc.b $11, 0, $86, $80
(1)   59/   1D582 : 1E00 8C5E           	dc.l Map_obj1E+$1E000000
(1)   60/   1D586 : 0400 2302           	dc.b 4,	0, $23,	2
(1)   61/   1D58A : 7901 6EDE           	dc.l Map_obj79+$79000000
(1)   62/   1D58E : 0100 07A0           	dc.b 1,	0, 7, $A0
(1)   63/   1D592 : (MACRO)              	even
   37748/   1D592 :                     
   37749/   1D592 :                     ; ---------------------------------------------------------------------------
   37750/   1D592 :                     ; Debug	list - ending sequence / special stage
   37751/   1D592 :                     ; ---------------------------------------------------------------------------
   37752/   1D592 :                     Debug_Ending:
   37753/   1D592 :                     	include "_includes-ASM/Debug list - Ending and SS.asm"
(1)    1/   1D592 :                     ; ---------------------------------------------------------------------------
(1)    2/   1D592 :                     ; Debug	list - ending sequence / special stage
(1)    3/   1D592 :                     ; ---------------------------------------------------------------------------
(1)    4/   1D592 : 000D                	dc.w $D
(1)    5/   1D594 : 2500 9D7C           	dc.l Map_obj25+$25000000
(1)    6/   1D598 : 0000 27B2           	dc.b 0,	0, $27,	$B2
(1)    7/   1D59C : 4700 E8C6           	dc.l Map_obj47+$47000000
(1)    8/   1D5A0 : 0000 0380           	dc.b 0,	0, 3, $80
(1)    9/   1D5A4 : 2800 9278           	dc.l Map_obj28a+$28000000
(1)   10/   1D5A8 : 0A00 05A0           	dc.b $A, 0, 5, $A0
(1)   11/   1D5AC : 2800 9278           	dc.l Map_obj28a+$28000000
(1)   12/   1D5B0 : 0B00 05A0           	dc.b $B, 0, 5, $A0
(1)   13/   1D5B4 : 2800 9278           	dc.l Map_obj28a+$28000000
(1)   14/   1D5B8 : 0C00 05A0           	dc.b $C, 0, 5, $A0
(1)   15/   1D5BC : 2800 9260           	dc.l Map_obj28+$28000000
(1)   16/   1D5C0 : 0D00 0553           	dc.b $D, 0, 5, $53
(1)   17/   1D5C4 : 2800 9260           	dc.l Map_obj28+$28000000
(1)   18/   1D5C8 : 0E00 0553           	dc.b $E, 0, 5, $53
(1)   19/   1D5CC : 2800 9260           	dc.l Map_obj28+$28000000
(1)   20/   1D5D0 : 0F00 0573           	dc.b $F, 0, 5, $73
(1)   21/   1D5D4 : 2800 9260           	dc.l Map_obj28+$28000000
(1)   22/   1D5D8 : 1000 0573           	dc.b $10, 0, 5,	$73
(1)   23/   1D5DC : 2800 9278           	dc.l Map_obj28a+$28000000
(1)   24/   1D5E0 : 1100 0585           	dc.b $11, 0, 5,	$85
(1)   25/   1D5E4 : 2800 9290           	dc.l Map_obj28b+$28000000
(1)   26/   1D5E8 : 1200 0593           	dc.b $12, 0, 5,	$93
(1)   27/   1D5EC : 2800 9278           	dc.l Map_obj28a+$28000000
(1)   28/   1D5F0 : 1300 0565           	dc.b $13, 0, 5,	$65
(1)   29/   1D5F4 : 2800 9290           	dc.l Map_obj28b+$28000000
(1)   30/   1D5F8 : 1400 05B3           	dc.b $14, 0, 5,	$B3
(1)   31/   1D5FC : (MACRO)              	even
   37754/   1D5FC :                     
   37755/   1D5FC :                     ; ---------------------------------------------------------------------------
   37756/   1D5FC :                     ; Main level load blocks
   37757/   1D5FC :                     ; ---------------------------------------------------------------------------
   37758/   1D5FC :                     MainLoadBlocks:
   37759/   1D5FC :                     	include "_includes-ASM/Main level load blocks.asm"
(1)    1/   1D5FC :                     ; ---------------------------------------------------------------------------
(1)    2/   1D5FC :                     ; Main level load blocks
(1)    3/   1D5FC :                     ;
(1)    4/   1D5FC :                     ; ===FORMAT===
(1)    5/   1D5FC :                     ; level	patterns + (1st	PLC num	* 10^6)
(1)    6/   1D5FC :                     ; 16x16	mappings + (2nd	PLC num	* 10^6)
(1)    7/   1D5FC :                     ; 256x256 mappings
(1)    8/   1D5FC :                     ; blank, music (unused), pal index (unused), pal index
(1)    9/   1D5FC :                     ; ---------------------------------------------------------------------------
(1)   10/   1D5FC : 0403 EF74           	dc.l Nem_GHZ+$4000000
(1)   11/   1D600 : 0503 E660           	dc.l Blk16_GHZ+$5000000
(1)   12/   1D604 : 0004 1924           	dc.l Blk256_GHZ
(1)   13/   1D608 : 0081 0404           	dc.b 0,	$81, 4,	4
(1)   14/   1D60C : 0604 3D80           	dc.l Nem_LZ+$6000000
(1)   15/   1D610 : 0704 3A80           	dc.l Blk16_LZ+$7000000
(1)   16/   1D614 : 0004 5806           	dc.l Blk256_LZ
(1)   17/   1D618 : 0082 0505           	dc.b 0,	$82, 5,	5
(1)   18/   1D61C : 0804 8404           	dc.l Nem_MZ+$8000000
(1)   19/   1D620 : 0904 7C8E           	dc.l Blk16_MZ+$9000000
(1)   20/   1D624 : 0004 AB58           	dc.l Blk256_MZ
(1)   21/   1D628 : 0083 0606           	dc.b 0,	$83, 6,	6
(1)   22/   1D62C : 0A04 CA22           	dc.l Nem_SLZ+$A000000
(1)   23/   1D630 : 0B04 C290           	dc.l Blk16_SLZ+$B000000
(1)   24/   1D634 : 0005 0412           	dc.l Blk256_SLZ
(1)   25/   1D638 : 0084 0707           	dc.b 0,	$84, 7,	7
(1)   26/   1D63C : 0C05 2C3C           	dc.l Nem_SYZ+$C000000
(1)   27/   1D640 : 0D05 238E           	dc.l Blk16_SYZ+$D000000
(1)   28/   1D644 : 0005 6222           	dc.l Blk256_SYZ
(1)   29/   1D648 : 0085 0808           	dc.b 0,	$85, 8,	8
(1)   30/   1D64C : 0E05 92BA           	dc.l Nem_SBZ+$E000000
(1)   31/   1D650 : 0F05 850C           	dc.l Blk16_SBZ+$F000000
(1)   32/   1D654 : 0005 B988           	dc.l Blk256_SBZ
(1)   33/   1D658 : 0086 0909           	dc.b 0,	$86, 9,	9
(1)   34/   1D65C : 0003 EF74           	dc.l Nem_GHZ	; main load block for ending
(1)   35/   1D660 : 0003 E660           	dc.l Blk16_GHZ
(1)   36/   1D664 : 0004 1924           	dc.l Blk256_GHZ
(1)   37/   1D668 : 0086 1313           	dc.b 0,	$86, $13, $13
(1)   38/   1D66C : (MACRO)              	even
   37760/   1D66C :                     
   37761/   1D66C :                     ; ---------------------------------------------------------------------------
   37762/   1D66C :                     ; Pattern load cues
   37763/   1D66C :                     ; ---------------------------------------------------------------------------
   37764/   1D66C :                     ArtLoadCues:
   37765/   1D66C :                     	include "_includes-ASM/Pattern load cues.asm"
(1)    1/   1D66C :                     ; ---------------------------------------------------------------------------
(1)    2/   1D66C :                     ; Pattern load cues - index
(1)    3/   1D66C :                     ; ---------------------------------------------------------------------------
(1)    4/   1D66C : 0040 0060           	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
(1)    5/   1D670 : 0074 007C           	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
(1)    6/   1D674 : 0084 00C8           	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
(1)    7/   1D678 : 00EE 0138           	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
(1)    8/   1D67C : 0188 01C6           	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
(1)    9/   1D680 : 01E6 021E           	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
(1)   10/   1D684 : 0244 0264           	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
(1)   11/   1D688 : 0296 02E0           	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
(1)   12/   1D68C : 0330 0338           	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
(1)   13/   1D690 : 035E 0372           	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
(1)   14/   1D694 : 037A 03F4           	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
(1)   15/   1D698 : 0402 0410           	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
(1)   16/   1D69C : 041E 042C           	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
(1)   17/   1D6A0 : 043A 0448           	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
(1)   18/   1D6A4 : 0456 04B2           	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
(1)   19/   1D6A8 : 04C6 04DA           	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
(1)   20/   1D6AC :                     ; ---------------------------------------------------------------------------
(1)   21/   1D6AC :                     ; Pattern load cues - standard block 1
(1)   22/   1D6AC :                     ; ---------------------------------------------------------------------------
(1)   23/   1D6AC : 0004                PLC_Main:	dc.w 4
(1)   24/   1D6AE : 0003 A920           		dc.l Nem_Lamp		; lamppost
(1)   25/   1D6B2 : F400                		dc.w $F400
(1)   26/   1D6B4 : 0003 92CE           		dc.l Nem_Hud		; HUD
(1)   27/   1D6B8 : D940                		dc.w $D940
(1)   28/   1D6BA : 0003 93C4           		dc.l Nem_Lives		; lives	counter
(1)   29/   1D6BE : FA80                		dc.w $FA80
(1)   30/   1D6C0 : 0003 94CA           		dc.l Nem_Ring		; rings
(1)   31/   1D6C4 : F640                		dc.w $F640
(1)   32/   1D6C6 : 0003 A084           		dc.l Nem_Points		; points from enemy
(1)   33/   1D6CA : F2E0                		dc.w $F2E0
(1)   34/   1D6CC :                     ; ---------------------------------------------------------------------------
(1)   35/   1D6CC :                     ; Pattern load cues - standard block 2
(1)   36/   1D6CC :                     ; ---------------------------------------------------------------------------
(1)   37/   1D6CC : 0002                PLC_Main2:	dc.w 2
(1)   38/   1D6CE : 0003 95BE           		dc.l Nem_Monitors	; monitors
(1)   39/   1D6D2 : D000                		dc.w $D000
(1)   40/   1D6D4 : 0002 BCC2           		dc.l Nem_Shield		; shield
(1)   41/   1D6D8 : A820                		dc.w $A820
(1)   42/   1D6DA : 0002 BE58           		dc.l Nem_Stars		; invincibility	stars
(1)   43/   1D6DE : AB80                		dc.w $AB80
(1)   44/   1D6E0 :                     ; ---------------------------------------------------------------------------
(1)   45/   1D6E0 :                     ; Pattern load cues - explosion
(1)   46/   1D6E0 :                     ; ---------------------------------------------------------------------------
(1)   47/   1D6E0 : 0000                PLC_Explode:	dc.w 0
(1)   48/   1D6E2 : 0003 9A1E           		dc.l Nem_Explode	; explosion
(1)   49/   1D6E6 : B400                		dc.w $B400
(1)   50/   1D6E8 :                     ; ---------------------------------------------------------------------------
(1)   51/   1D6E8 :                     ; Pattern load cues - game/time	over
(1)   52/   1D6E8 :                     ; ---------------------------------------------------------------------------
(1)   53/   1D6E8 : 0000                PLC_GameOver:	dc.w 0
(1)   54/   1D6EA : 0003 A134           		dc.l Nem_GameOver	; game/time over
(1)   55/   1D6EE : ABC0                		dc.w $ABC0
(1)   56/   1D6F0 :                     ; ---------------------------------------------------------------------------
(1)   57/   1D6F0 :                     ; Pattern load cues - Green Hill
(1)   58/   1D6F0 :                     ; ---------------------------------------------------------------------------
(1)   59/   1D6F0 : 000A                PLC_GHZ:	dc.w $A
(1)   60/   1D6F2 : 0003 EF74           		dc.l Nem_GHZ		; GHZ main patterns
(1)   61/   1D6F6 : 0000                		dc.w 0
(1)   62/   1D6F8 : 0002 F384           		dc.l Nem_Stalk		; flower stalk
(1)   63/   1D6FC : 6B00                		dc.w $6B00
(1)   64/   1D6FE : 0002 FB76           		dc.l Nem_PplRock	; purple rock
(1)   65/   1D702 : 7A00                		dc.w $7A00
(1)   66/   1D704 : 0003 596C           		dc.l Nem_Crabmeat	; crabmeat enemy
(1)   67/   1D708 : 8000                		dc.w $8000
(1)   68/   1D70A : 0003 5E5A           		dc.l Nem_Buzz		; buzz bomber enemy
(1)   69/   1D70E : 8880                		dc.w $8880
(1)   70/   1D710 : 0003 6AD2           		dc.l Nem_Chopper	; chopper enemy
(1)   71/   1D714 : 8F60                		dc.w $8F60
(1)   72/   1D716 : 0003 7772           		dc.l Nem_Newtron	; newtron enemy
(1)   73/   1D71A : 9360                		dc.w $9360
(1)   74/   1D71C : 0003 74E8           		dc.l Nem_Motobug	; motobug enemy
(1)   75/   1D720 : 9E00                		dc.w $9E00
(1)   76/   1D722 : 0002 F7BA           		dc.l Nem_Spikes		; spikes
(1)   77/   1D726 : A360                		dc.w $A360
(1)   78/   1D728 : 0003 A2C6           		dc.l Nem_HSpring	; horizontal spring
(1)   79/   1D72C : A460                		dc.w $A460
(1)   80/   1D72E : 0003 A3C8           		dc.l Nem_VSpring	; vertical spring
(1)   81/   1D732 : A660                		dc.w $A660
(1)   82/   1D734 : 0005                PLC_GHZ2:	dc.w 5
(1)   83/   1D736 : 0002 F3CE           		dc.l Nem_Swing		; swinging platform
(1)   84/   1D73A : 7000                		dc.w $7000
(1)   85/   1D73C : 0002 F4E8           		dc.l Nem_Bridge		; bridge
(1)   86/   1D740 : 71C0                		dc.w $71C0
(1)   87/   1D742 : 0002 FA4A           		dc.l Nem_SpikePole	; spiked pole
(1)   88/   1D746 : 7300                		dc.w $7300
(1)   89/   1D748 : 0002 F61C           		dc.l Nem_Ball		; giant	ball
(1)   90/   1D74C : 7540                		dc.w $7540
(1)   91/   1D74E : 0002 FCA4           		dc.l Nem_GhzWall1	; breakable wall
(1)   92/   1D752 : A1E0                		dc.w $A1E0
(1)   93/   1D754 : 0002 FD42           		dc.l Nem_GhzWall2	; normal wall
(1)   94/   1D758 : 6980                		dc.w $6980
(1)   95/   1D75A :                     ; ---------------------------------------------------------------------------
(1)   96/   1D75A :                     ; Pattern load cues - Labyrinth
(1)   97/   1D75A :                     ; ---------------------------------------------------------------------------
(1)   98/   1D75A : 000B                PLC_LZ:		dc.w $B
(1)   99/   1D75C : 0004 3D80           		dc.l Nem_LZ		; LZ main patterns
(1)  100/   1D760 : 0000                		dc.w 0
(1)  101/   1D762 : 0003 1FD0           		dc.l Nem_LzBlock1	; block
(1)  102/   1D766 : 3C00                		dc.w $3C00
(1)  103/   1D768 : 0003 1AB6           		dc.l Nem_LzBlock2	; blocks
(1)  104/   1D76C : 3E00                		dc.w $3E00
(1)  105/   1D76E : 0002 FEC6           		dc.l Nem_Splash		; waterfalls and splash
(1)  106/   1D772 : 4B20                		dc.w $4B20
(1)  107/   1D774 : 0002 FDA2           		dc.l Nem_Water		; water	surface
(1)  108/   1D778 : 6000                		dc.w $6000
(1)  109/   1D77A : 0003 06BA           		dc.l Nem_LzSpikeBall	; spiked ball
(1)  110/   1D77E : 6200                		dc.w $6200
(1)  111/   1D780 : 0003 083A           		dc.l Nem_FlapDoor	; flapping door
(1)  112/   1D784 : 6500                		dc.w $6500
(1)  113/   1D786 : 0003 09A4           		dc.l Nem_Bubbles	; bubbles and numbers
(1)  114/   1D78A : 6900                		dc.w $6900
(1)  115/   1D78C : 0003 0FFA           		dc.l Nem_LzBlock3	; block
(1)  116/   1D790 : 7780                		dc.w $7780
(1)  117/   1D792 : 0003 10B0           		dc.l Nem_LzDoor1	; vertical door
(1)  118/   1D796 : 7880                		dc.w $7880
(1)  119/   1D798 : 0003 1152           		dc.l Nem_Harpoon	; harpoon
(1)  120/   1D79C : 7980                		dc.w $7980
(1)  121/   1D79E : 0003 63E8           		dc.l Nem_Burrobot	; burrobot enemy
(1)  122/   1D7A2 : 94C0                		dc.w $94C0
(1)  123/   1D7A4 : 000C                PLC_LZ2:	dc.w $C
(1)  124/   1D7A6 : 0003 12AE           		dc.l Nem_LzPole		; pole that breaks
(1)  125/   1D7AA : 7BC0                		dc.w $7BC0
(1)  126/   1D7AC : 0003 1312           		dc.l Nem_LzDoor2	; large	horizontal door
(1)  127/   1D7B0 : 7CC0                		dc.w $7CC0
(1)  128/   1D7B2 : 0003 1464           		dc.l Nem_LzWheel	; wheel
(1)  129/   1D7B6 : 7EC0                		dc.w $7EC0
(1)  130/   1D7B8 : 0003 1946           		dc.l Nem_Gargoyle	; gargoyle head
(1)  131/   1D7BC : 5D20                		dc.w $5D20
(1)  132/   1D7BE : 0002 BFA0           		dc.l Nem_LzSonic	; Sonic	holding	his breath
(1)  133/   1D7C2 : 8800                		dc.w $8800
(1)  134/   1D7C4 : 0003 1D6E           		dc.l Nem_LzPlatfm	; rising platform
(1)  135/   1D7C8 : 89E0                		dc.w $89E0
(1)  136/   1D7CA : 0003 8954           		dc.l Nem_Orbinaut	; orbinaut enemy
(1)  137/   1D7CE : 8CE0                		dc.w $8CE0
(1)  138/   1D7D0 : 0003 6D3A           		dc.l Nem_Jaws		; jaws enemy
(1)  139/   1D7D4 : 90C0                		dc.w $90C0
(1)  140/   1D7D6 : 0003 3F80           		dc.l Nem_LzSwitch	; switch
(1)  141/   1D7DA : A1E0                		dc.w $A1E0
(1)  142/   1D7DC : 0003 1EA6           		dc.l Nem_Cork		; cork block
(1)  143/   1D7E0 : A000                		dc.w $A000
(1)  144/   1D7E2 : 0002 F7BA           		dc.l Nem_Spikes		; spikes
(1)  145/   1D7E6 : A360                		dc.w $A360
(1)  146/   1D7E8 : 0003 A2C6           		dc.l Nem_HSpring	; horizontal spring
(1)  147/   1D7EC : A460                		dc.w $A460
(1)  148/   1D7EE : 0003 A3C8           		dc.l Nem_VSpring	; vertical spring
(1)  149/   1D7F2 : A660                		dc.w $A660
(1)  150/   1D7F4 :                     ; ---------------------------------------------------------------------------
(1)  151/   1D7F4 :                     ; Pattern load cues - Marble
(1)  152/   1D7F4 :                     ; ---------------------------------------------------------------------------
(1)  153/   1D7F4 : 0009                PLC_MZ:		dc.w 9
(1)  154/   1D7F6 : 0004 8404           		dc.l Nem_MZ		; MZ main patterns
(1)  155/   1D7FA : 0000                		dc.w 0
(1)  156/   1D7FC : 0003 20E0           		dc.l Nem_MzMetal	; metal	blocks
(1)  157/   1D800 : 6000                		dc.w $6000
(1)  158/   1D802 : 0003 2538           		dc.l Nem_MzFire		; fireballs
(1)  159/   1D806 : 68A0                		dc.w $68A0
(1)  160/   1D808 : 0002 F3CE           		dc.l Nem_Swing		; swinging platform
(1)  161/   1D80C : 7000                		dc.w $7000
(1)  162/   1D80E : 0003 242C           		dc.l Nem_MzGlass	; green	glassy block
(1)  163/   1D812 : 71C0                		dc.w $71C0
(1)  164/   1D814 : 0003 2816           		dc.l Nem_Lava		; lava
(1)  165/   1D818 : 7500                		dc.w $7500
(1)  166/   1D81A : 0003 5E5A           		dc.l Nem_Buzz		; buzz bomber enemy
(1)  167/   1D81E : 8880                		dc.w $8880
(1)  168/   1D820 : 0003 7D90           		dc.l Nem_Yadrin		; yadrin enemy
(1)  169/   1D824 : 8F60                		dc.w $8F60
(1)  170/   1D826 : 0003 8178           		dc.l Nem_Basaran	; basaran enemy
(1)  171/   1D82A : 9700                		dc.w $9700
(1)  172/   1D82C : 0003 8B32           		dc.l Nem_Cater		; caterkiller enemy
(1)  173/   1D830 : 9FE0                		dc.w $9FE0
(1)  174/   1D832 : 0004                PLC_MZ2:	dc.w 4
(1)  175/   1D834 : 0003 236E           		dc.l Nem_MzSwitch	; switch
(1)  176/   1D838 : A260                		dc.w $A260
(1)  177/   1D83A : 0002 F7BA           		dc.l Nem_Spikes		; spikes
(1)  178/   1D83E : A360                		dc.w $A360
(1)  179/   1D840 : 0003 A2C6           		dc.l Nem_HSpring	; horizontal spring
(1)  180/   1D844 : A460                		dc.w $A460
(1)  181/   1D846 : 0003 A3C8           		dc.l Nem_VSpring	; vertical spring
(1)  182/   1D84A : A660                		dc.w $A660
(1)  183/   1D84C : 0003 312C           		dc.l Nem_MzBlock	; green	stone block
(1)  184/   1D850 : 5700                		dc.w $5700
(1)  185/   1D852 :                     ; ---------------------------------------------------------------------------
(1)  186/   1D852 :                     ; Pattern load cues - Star Light
(1)  187/   1D852 :                     ; ---------------------------------------------------------------------------
(1)  188/   1D852 : 0008                PLC_SLZ:	dc.w 8
(1)  189/   1D854 : 0004 CA22           		dc.l Nem_SLZ		; SLZ main patterns
(1)  190/   1D858 : 0000                		dc.w 0
(1)  191/   1D85A : 0003 86BC           		dc.l Nem_Bomb		; bomb enemy
(1)  192/   1D85E : 8000                		dc.w $8000
(1)  193/   1D860 : 0003 8954           		dc.l Nem_Orbinaut	; orbinaut enemy
(1)  194/   1D864 : 8520                		dc.w $8520
(1)  195/   1D866 : 0003 2538           		dc.l Nem_MzFire		; fireballs
(1)  196/   1D86A : 9000                		dc.w $9000
(1)  197/   1D86C : 0003 3C04           		dc.l Nem_SlzBlock	; block
(1)  198/   1D870 : 9C00                		dc.w $9C00
(1)  199/   1D872 : 0003 38DE           		dc.l Nem_SlzWall	; breakable wall
(1)  200/   1D876 : A260                		dc.w $A260
(1)  201/   1D878 : 0002 F7BA           		dc.l Nem_Spikes		; spikes
(1)  202/   1D87C : A360                		dc.w $A360
(1)  203/   1D87E : 0003 A2C6           		dc.l Nem_HSpring	; horizontal spring
(1)  204/   1D882 : A460                		dc.w $A460
(1)  205/   1D884 : 0003 A3C8           		dc.l Nem_VSpring	; vertical spring
(1)  206/   1D888 : A660                		dc.w $A660
(1)  207/   1D88A : 0005                PLC_SLZ2:	dc.w 5
(1)  208/   1D88C : 0003 3318           		dc.l Nem_Seesaw		; seesaw
(1)  209/   1D890 : 6E80                		dc.w $6E80
(1)  210/   1D892 : 0003 369A           		dc.l Nem_Fan		; fan
(1)  211/   1D896 : 7400                		dc.w $7400
(1)  212/   1D898 : 0003 3940           		dc.l Nem_Pylon		; foreground pylon
(1)  213/   1D89C : 7980                		dc.w $7980
(1)  214/   1D89E : 0003 3A22           		dc.l Nem_SlzSwing	; swinging platform
(1)  215/   1D8A2 : 7B80                		dc.w $7B80
(1)  216/   1D8A4 : 0003 3D10           		dc.l Nem_SlzCannon	; fireball launcher
(1)  217/   1D8A8 : 9B00                		dc.w $9B00
(1)  218/   1D8AA : 0003 3554           		dc.l Nem_SlzSpike	; spikeball
(1)  219/   1D8AE : 9E00                		dc.w $9E00
(1)  220/   1D8B0 :                     ; ---------------------------------------------------------------------------
(1)  221/   1D8B0 :                     ; Pattern load cues - Spring Yard
(1)  222/   1D8B0 :                     ; ---------------------------------------------------------------------------
(1)  223/   1D8B0 : 0004                PLC_SYZ:	dc.w 4
(1)  224/   1D8B2 : 0005 2C3C           		dc.l Nem_SYZ		; SYZ main patterns
(1)  225/   1D8B6 : 0000                		dc.w 0
(1)  226/   1D8B8 : 0003 596C           		dc.l Nem_Crabmeat	; crabmeat enemy
(1)  227/   1D8BC : 8000                		dc.w $8000
(1)  228/   1D8BE : 0003 5E5A           		dc.l Nem_Buzz		; buzz bomber enemy
(1)  229/   1D8C2 : 8880                		dc.w $8880
(1)  230/   1D8C4 : 0003 7D90           		dc.l Nem_Yadrin		; yadrin enemy
(1)  231/   1D8C8 : 8F60                		dc.w $8F60
(1)  232/   1D8CA : 0003 6FC4           		dc.l Nem_Roller		; roller enemy
(1)  233/   1D8CE : 9700                		dc.w $9700
(1)  234/   1D8D0 : 0007                PLC_SYZ2:	dc.w 7
(1)  235/   1D8D2 : 0003 3DB4           		dc.l Nem_Bumper		; bumper
(1)  236/   1D8D6 : 7000                		dc.w $7000
(1)  237/   1D8D8 : 0003 4062           		dc.l Nem_SyzSpike1	; large	spikeball
(1)  238/   1D8DC : 72C0                		dc.w $72C0
(1)  239/   1D8DE : 0003 3F1E           		dc.l Nem_SyzSpike2	; small	spikeball
(1)  240/   1D8E2 : 7740                		dc.w $7740
(1)  241/   1D8E4 : 0003 8B32           		dc.l Nem_Cater		; caterkiller enemy
(1)  242/   1D8E8 : 9FE0                		dc.w $9FE0
(1)  243/   1D8EA : 0003 3F80           		dc.l Nem_LzSwitch	; switch
(1)  244/   1D8EE : A1E0                		dc.w $A1E0
(1)  245/   1D8F0 : 0002 F7BA           		dc.l Nem_Spikes		; spikes
(1)  246/   1D8F4 : A360                		dc.w $A360
(1)  247/   1D8F6 : 0003 A2C6           		dc.l Nem_HSpring	; horizontal spring
(1)  248/   1D8FA : A460                		dc.w $A460
(1)  249/   1D8FC : 0003 A3C8           		dc.l Nem_VSpring	; vertical spring
(1)  250/   1D900 : A660                		dc.w $A660
(1)  251/   1D902 :                     ; ---------------------------------------------------------------------------
(1)  252/   1D902 :                     ; Pattern load cues - Scrap Brain
(1)  253/   1D902 :                     ; ---------------------------------------------------------------------------
(1)  254/   1D902 : 000B                PLC_SBZ:	dc.w $B
(1)  255/   1D904 : 0005 92BA           		dc.l Nem_SBZ		; SBZ main patterns
(1)  256/   1D908 : 0000                		dc.w 0
(1)  257/   1D90A : 0003 47E4           		dc.l Nem_Stomper	; moving platform and stomper
(1)  258/   1D90E : 5800                		dc.w $5800
(1)  259/   1D910 : 0003 52F2           		dc.l Nem_SbzDoor1	; door
(1)  260/   1D914 : 5D00                		dc.w $5D00
(1)  261/   1D916 : 0003 5496           		dc.l Nem_Girder		; girder
(1)  262/   1D91A : 5E00                		dc.w $5E00
(1)  263/   1D91C : 0003 55AC           		dc.l Nem_BallHog	; ball hog enemy
(1)  264/   1D920 : 6040                		dc.w $6040
(1)  265/   1D922 : 0003 42F0           		dc.l Nem_SbzWheel1	; spot on large	wheel
(1)  266/   1D926 : 6880                		dc.w $6880
(1)  267/   1D928 : 0003 4344           		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
(1)  268/   1D92C : 6900                		dc.w $6900
(1)  269/   1D92E : 0003 4062           		dc.l Nem_SyzSpike1	; large	spikeball
(1)  270/   1D932 : 7220                		dc.w $7220
(1)  271/   1D934 : 0003 45E0           		dc.l Nem_Cutter		; pizza	cutter
(1)  272/   1D938 : 76A0                		dc.w $76A0
(1)  273/   1D93A : 0003 5166           		dc.l Nem_FlamePipe	; flaming pipe
(1)  274/   1D93E : 7B20                		dc.w $7B20
(1)  275/   1D940 : 0003 4E90           		dc.l Nem_SbzFloor	; collapsing floor
(1)  276/   1D944 : 7EA0                		dc.w $7EA0
(1)  277/   1D946 : 0003 5068           		dc.l Nem_SbzBlock	; vanishing block
(1)  278/   1D94A : 9860                		dc.w $9860
(1)  279/   1D94C : 000C                PLC_SBZ2:	dc.w $C
(1)  280/   1D94E : 0003 8B32           		dc.l Nem_Cater		; caterkiller enemy
(1)  281/   1D952 : 5600                		dc.w $5600
(1)  282/   1D954 : 0003 86BC           		dc.l Nem_Bomb		; bomb enemy
(1)  283/   1D958 : 8000                		dc.w $8000
(1)  284/   1D95A : 0003 8954           		dc.l Nem_Orbinaut	; orbinaut enemy
(1)  285/   1D95E : 8520                		dc.w $8520
(1)  286/   1D960 : 0003 5342           		dc.l Nem_SlideFloor	; floor	that slides away
(1)  287/   1D964 : 8C00                		dc.w $8C00
(1)  288/   1D966 : 0003 539A           		dc.l Nem_SbzDoor2	; horizontal door
(1)  289/   1D96A : 8DE0                		dc.w $8DE0
(1)  290/   1D96C : 0003 4EE8           		dc.l Nem_Electric	; electric orb
(1)  291/   1D970 : 8FC0                		dc.w $8FC0
(1)  292/   1D972 : 0003 4CB2           		dc.l Nem_TrapDoor	; trapdoor
(1)  293/   1D976 : 9240                		dc.w $9240
(1)  294/   1D978 : 0003 4E90           		dc.l Nem_SbzFloor	; collapsing floor
(1)  295/   1D97C : 7F20                		dc.w $7F20
(1)  296/   1D97E : 0003 4982           		dc.l Nem_SpinPform	; small	spinning platform
(1)  297/   1D982 : 9BE0                		dc.w $9BE0
(1)  298/   1D984 : 0003 3F80           		dc.l Nem_LzSwitch	; switch
(1)  299/   1D988 : A1E0                		dc.w $A1E0
(1)  300/   1D98A : 0002 F7BA           		dc.l Nem_Spikes		; spikes
(1)  301/   1D98E : A360                		dc.w $A360
(1)  302/   1D990 : 0003 A2C6           		dc.l Nem_HSpring	; horizontal spring
(1)  303/   1D994 : A460                		dc.w $A460
(1)  304/   1D996 : 0003 A3C8           		dc.l Nem_VSpring	; vertical spring
(1)  305/   1D99A : A660                		dc.w $A660
(1)  306/   1D99C :                     ; ---------------------------------------------------------------------------
(1)  307/   1D99C :                     ; Pattern load cues - title card
(1)  308/   1D99C :                     ; ---------------------------------------------------------------------------
(1)  309/   1D99C : 0000                PLC_TitleCard:	dc.w 0
(1)  310/   1D99E : 0003 8CC0           		dc.l Nem_TitleCard
(1)  311/   1D9A2 : B000                		dc.w $B000
(1)  312/   1D9A4 :                     ; ---------------------------------------------------------------------------
(1)  313/   1D9A4 :                     ; Pattern load cues - act 3 boss
(1)  314/   1D9A4 :                     ; ---------------------------------------------------------------------------
(1)  315/   1D9A4 : 0005                PLC_Boss:	dc.w 5
(1)  316/   1D9A6 : 0005 E50C           		dc.l Nem_Eggman		; Eggman main patterns
(1)  317/   1D9AA : 8000                		dc.w $8000
(1)  318/   1D9AC : 0005 ED70           		dc.l Nem_Weapons	; Eggman's weapons
(1)  319/   1D9B0 : 8D80                		dc.w $8D80
(1)  320/   1D9B2 : 0005 F05A           		dc.l Nem_Prison		; prison capsule
(1)  321/   1D9B6 : 93A0                		dc.w $93A0
(1)  322/   1D9B8 : 0003 86BC           		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
(1)  323/   1D9BC : A300                		dc.w $A300
(1)  324/   1D9BE : 0003 3554           		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
(1)  325/   1D9C2 : A300                		dc.w $A300
(1)  326/   1D9C4 : 0006 0DF2           		dc.l Nem_Exhaust	; exhaust flame
(1)  327/   1D9C8 : A540                		dc.w $A540
(1)  328/   1D9CA :                     ; ---------------------------------------------------------------------------
(1)  329/   1D9CA :                     ; Pattern load cues - act 1/2 signpost
(1)  330/   1D9CA :                     ; ---------------------------------------------------------------------------
(1)  331/   1D9CA : 0002                PLC_Signpost:	dc.w 2
(1)  332/   1D9CC : 0003 A4A4           		dc.l Nem_SignPost	; signpost
(1)  333/   1D9D0 : D000                		dc.w $D000
(1)  334/   1D9D2 : 0003 AB54           		dc.l Nem_Bonus		; hidden bonus points
(1)  335/   1D9D6 : 96C0                		dc.w $96C0
(1)  336/   1D9D8 : 0003 A9E0           		dc.l Nem_BigFlash	; giant	ring flash effect
(1)  337/   1D9DC : 8C40                		dc.w $8C40
(1)  338/   1D9DE :                     ; ---------------------------------------------------------------------------
(1)  339/   1D9DE :                     ; Pattern load cues - beta special stage warp effect
(1)  340/   1D9DE :                     ; ---------------------------------------------------------------------------
(1)  341/   1D9DE : 0000                PLC_Warp:	dc.w 0
(1)  342/   1D9E0 : 0002 C0FC           		dc.l Nem_Warp
(1)  343/   1D9E4 : A820                		dc.w $A820
(1)  344/   1D9E6 :                     ; ---------------------------------------------------------------------------
(1)  345/   1D9E6 :                     ; Pattern load cues - special stage
(1)  346/   1D9E6 :                     ; ---------------------------------------------------------------------------
(1)  347/   1D9E6 : 0010                PLC_SpeStage:	dc.w $10
(1)  348/   1D9E8 : 0002 DF46           		dc.l Nem_SSBgCloud	; bubble and cloud background
(1)  349/   1D9EC : 0000                		dc.w 0
(1)  350/   1D9EE : 0002 CFB6           		dc.l Nem_SSBgFish	; bird and fish	background
(1)  351/   1D9F2 : 0A20                		dc.w $A20
(1)  352/   1D9F4 : 0002 C54A           		dc.l Nem_SSWalls	; walls
(1)  353/   1D9F8 : 2840                		dc.w $2840
(1)  354/   1D9FA : 0003 3DB4           		dc.l Nem_Bumper		; bumper
(1)  355/   1D9FE : 4760                		dc.w $4760
(1)  356/   1DA00 : 0002 E43A           		dc.l Nem_SSGOAL		; GOAL block
(1)  357/   1DA04 : 4A20                		dc.w $4A20
(1)  358/   1DA06 : 0002 EC9C           		dc.l Nem_SSUpDown	; UP and DOWN blocks
(1)  359/   1DA0A : 4C60                		dc.w $4C60
(1)  360/   1DA0C : 0002 E528           		dc.l Nem_SSRBlock	; R block
(1)  361/   1DA10 : 5E00                		dc.w $5E00
(1)  362/   1DA12 : 0002 E5F8           		dc.l Nem_SS1UpBlock	; 1UP block
(1)  363/   1DA16 : 6E00                		dc.w $6E00
(1)  364/   1DA18 : 0002 E6EE           		dc.l Nem_SSEmStars	; emerald collection stars
(1)  365/   1DA1C : 7E00                		dc.w $7E00
(1)  366/   1DA1E : 0002 E74C           		dc.l Nem_SSRedWhite	; red and white	block
(1)  367/   1DA22 : 8E00                		dc.w $8E00
(1)  368/   1DA24 : 0002 EFF8           		dc.l Nem_SSGhost	; ghost	block
(1)  369/   1DA28 : 9E00                		dc.w $9E00
(1)  370/   1DA2A : 0002 F0A8           		dc.l Nem_SSWBlock	; W block
(1)  371/   1DA2E : AE00                		dc.w $AE00
(1)  372/   1DA30 : 0002 F182           		dc.l Nem_SSGlass	; glass	block
(1)  373/   1DA34 : BE00                		dc.w $BE00
(1)  374/   1DA36 : 0002 EE90           		dc.l Nem_SSEmerald	; emeralds
(1)  375/   1DA3A : EE00                		dc.w $EE00
(1)  376/   1DA3C : 0002 E7DE           		dc.l Nem_SSZone1	; ZONE 1 block
(1)  377/   1DA40 : F2E0                		dc.w $F2E0
(1)  378/   1DA42 : 0002 E8A0           		dc.l Nem_SSZone2	; ZONE 2 block
(1)  379/   1DA46 : F400                		dc.w $F400
(1)  380/   1DA48 : 0002 E96E           		dc.l Nem_SSZone3	; ZONE 3 block
(1)  381/   1DA4C : F520                		dc.w $F520
(1)  382/   1DA4E : 0002 EA3A           		dc.l Nem_SSZone4	; ZONE 4 block
(1)  383/   1DA52 : F2E0                		dc.w $F2E0
(1)  384/   1DA54 : 0002 EB02           		dc.l Nem_SSZone5	; ZONE 5 block
(1)  385/   1DA58 : F400                		dc.w $F400
(1)  386/   1DA5A : 0002 EBCC           		dc.l Nem_SSZone6	; ZONE 6 block
(1)  387/   1DA5E : F520                		dc.w $F520
(1)  388/   1DA60 :                     ; ---------------------------------------------------------------------------
(1)  389/   1DA60 :                     ; Pattern load cues - GHZ animals
(1)  390/   1DA60 :                     ; ---------------------------------------------------------------------------
(1)  391/   1DA60 : 0001                PLC_GHZAnimals:	dc.w 1
(1)  392/   1DA62 : 0003 B340           		dc.l Nem_Rabbit		; rabbit
(1)  393/   1DA66 : B000                		dc.w $B000
(1)  394/   1DA68 : 0003 B9C2           		dc.l Nem_Flicky		; flicky
(1)  395/   1DA6C : B240                		dc.w $B240
(1)  396/   1DA6E :                     ; ---------------------------------------------------------------------------
(1)  397/   1DA6E :                     ; Pattern load cues - LZ animals
(1)  398/   1DA6E :                     ; ---------------------------------------------------------------------------
(1)  399/   1DA6E : 0001                PLC_LZAnimals:	dc.w 1
(1)  400/   1DA70 : 0003 B5F4           		dc.l Nem_BlackBird	; blackbird
(1)  401/   1DA74 : B000                		dc.w $B000
(1)  402/   1DA76 : 0003 B770           		dc.l Nem_Seal		; seal
(1)  403/   1DA7A : B240                		dc.w $B240
(1)  404/   1DA7C :                     ; ---------------------------------------------------------------------------
(1)  405/   1DA7C :                     ; Pattern load cues - MZ animals
(1)  406/   1DA7C :                     ; ---------------------------------------------------------------------------
(1)  407/   1DA7C : 0001                PLC_MZAnimals:	dc.w 1
(1)  408/   1DA7E : 0003 BAFC           		dc.l Nem_Squirrel	; squirrel
(1)  409/   1DA82 : B000                		dc.w $B000
(1)  410/   1DA84 : 0003 B770           		dc.l Nem_Seal		; seal
(1)  411/   1DA88 : B240                		dc.w $B240
(1)  412/   1DA8A :                     ; ---------------------------------------------------------------------------
(1)  413/   1DA8A :                     ; Pattern load cues - SLZ animals
(1)  414/   1DA8A :                     ; ---------------------------------------------------------------------------
(1)  415/   1DA8A : 0001                PLC_SLZAnimals:	dc.w 1
(1)  416/   1DA8C : 0003 B88C           		dc.l Nem_Pig		; pig
(1)  417/   1DA90 : B000                		dc.w $B000
(1)  418/   1DA92 : 0003 B9C2           		dc.l Nem_Flicky		; flicky
(1)  419/   1DA96 : B240                		dc.w $B240
(1)  420/   1DA98 :                     ; ---------------------------------------------------------------------------
(1)  421/   1DA98 :                     ; Pattern load cues - SYZ animals
(1)  422/   1DA98 :                     ; ---------------------------------------------------------------------------
(1)  423/   1DA98 : 0001                PLC_SYZAnimals:	dc.w 1
(1)  424/   1DA9A : 0003 B88C           		dc.l Nem_Pig		; pig
(1)  425/   1DA9E : B000                		dc.w $B000
(1)  426/   1DAA0 : 0003 B498           		dc.l Nem_Chicken	; chicken
(1)  427/   1DAA4 : B240                		dc.w $B240
(1)  428/   1DAA6 :                     ; ---------------------------------------------------------------------------
(1)  429/   1DAA6 :                     ; Pattern load cues - SBZ animals
(1)  430/   1DAA6 :                     ; ---------------------------------------------------------------------------
(1)  431/   1DAA6 : 0001                PLC_SBZAnimals:	dc.w 1
(1)  432/   1DAA8 : 0003 B340           		dc.l Nem_Rabbit		; rabbit
(1)  433/   1DAAC : B000                		dc.w $B000
(1)  434/   1DAAE : 0003 B498           		dc.l Nem_Chicken	; chicken
(1)  435/   1DAB2 : B240                		dc.w $B240
(1)  436/   1DAB4 :                     ; ---------------------------------------------------------------------------
(1)  437/   1DAB4 :                     ; Pattern load cues - special stage results screen
(1)  438/   1DAB4 :                     ; ---------------------------------------------------------------------------
(1)  439/   1DAB4 : 0001                PLC_SpeStResult:dc.w 1
(1)  440/   1DAB6 : 0002 F206           		dc.l Nem_ResultEm	; emeralds
(1)  441/   1DABA : A820                		dc.w $A820
(1)  442/   1DABC : 0003 B106           		dc.l Nem_MiniSonic	; mini Sonic
(1)  443/   1DAC0 : AA20                		dc.w $AA20
(1)  444/   1DAC2 :                     ; ---------------------------------------------------------------------------
(1)  445/   1DAC2 :                     ; Pattern load cues - ending sequence
(1)  446/   1DAC2 :                     ; ---------------------------------------------------------------------------
(1)  447/   1DAC2 : 000E                PLC_Ending:	dc.w $E
(1)  448/   1DAC4 : 0003 BC58           		dc.l Nem_TIT_1st	; Title main patterns
(1)  449/   1DAC8 : 0000                		dc.w 0
(1)  450/   1DACA : 0003 D2B8           		dc.l Nem_TIT_2nd	; Title secondary patterns
(1)  451/   1DACE : 39A0                		dc.w $39A0
(1)  452/   1DAD0 : 0002 F384           		dc.l Nem_Stalk		; flower stalk
(1)  453/   1DAD4 : 6B00                		dc.w $6B00
(1)  454/   1DAD6 : 0006 3598           		dc.l Nem_EndFlower	; flowers
(1)  455/   1DADA : 7400                		dc.w $7400
(1)  456/   1DADC : 0006 0F12           		dc.l Nem_EndEm		; emeralds
(1)  457/   1DAE0 : 78A0                		dc.w $78A0
(1)  458/   1DAE2 : 0006 1110           		dc.l Nem_EndSonic	; Sonic
(1)  459/   1DAE6 : 7C20                		dc.w $7C20
(1)  460/   1DAE8 : 0006 2C32           		dc.l Nem_EndEggman	; Eggman's death (unused)
(1)  461/   1DAEC : A480                		dc.w $A480
(1)  462/   1DAEE : 0003 B340           		dc.l Nem_Rabbit		; rabbit
(1)  463/   1DAF2 : AA60                		dc.w $AA60
(1)  464/   1DAF4 : 0003 B498           		dc.l Nem_Chicken	; chicken
(1)  465/   1DAF8 : ACA0                		dc.w $ACA0
(1)  466/   1DAFA : 0003 B5F4           		dc.l Nem_BlackBird	; blackbird
(1)  467/   1DAFE : AE60                		dc.w $AE60
(1)  468/   1DB00 : 0003 B770           		dc.l Nem_Seal		; seal
(1)  469/   1DB04 : B0A0                		dc.w $B0A0
(1)  470/   1DB06 : 0003 B88C           		dc.l Nem_Pig		; pig
(1)  471/   1DB0A : B260                		dc.w $B260
(1)  472/   1DB0C : 0003 B9C2           		dc.l Nem_Flicky		; flicky
(1)  473/   1DB10 : B4A0                		dc.w $B4A0
(1)  474/   1DB12 : 0003 BAFC           		dc.l Nem_Squirrel	; squirrel
(1)  475/   1DB16 : B660                		dc.w $B660
(1)  476/   1DB18 : 0006 3E1E           		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
(1)  477/   1DB1C : B8A0                		dc.w $B8A0
(1)  478/   1DB1E :                     ; ---------------------------------------------------------------------------
(1)  479/   1DB1E :                     ; Pattern load cues - "TRY AGAIN" and "END" screens
(1)  480/   1DB1E :                     ; ---------------------------------------------------------------------------
(1)  481/   1DB1E : 0002                PLC_TryAgain:	dc.w 2
(1)  482/   1DB20 : 0006 0F12           		dc.l Nem_EndEm		; emeralds
(1)  483/   1DB24 : 78A0                		dc.w $78A0
(1)  484/   1DB26 : 0006 22EE           		dc.l Nem_TryAgain	; Eggman
(1)  485/   1DB2A : 7C20                		dc.w $7C20
(1)  486/   1DB2C : 0006 3820           		dc.l Nem_CreditText	; credits alphabet
(1)  487/   1DB30 : B400                		dc.w $B400
(1)  488/   1DB32 :                     ; ---------------------------------------------------------------------------
(1)  489/   1DB32 :                     ; Pattern load cues - Eggman on SBZ 2
(1)  490/   1DB32 :                     ; ---------------------------------------------------------------------------
(1)  491/   1DB32 : 0002                PLC_EggmanSBZ2:	dc.w 2
(1)  492/   1DB34 : 0003 5068           		dc.l Nem_SbzBlock	; block
(1)  493/   1DB38 : A300                		dc.w $A300
(1)  494/   1DB3A : 0005 F8DE           		dc.l Nem_Sbz2Eggman	; Eggman
(1)  495/   1DB3E : 8000                		dc.w $8000
(1)  496/   1DB40 : 0003 3F80           		dc.l Nem_LzSwitch	; switch
(1)  497/   1DB44 : 9400                		dc.w $9400
(1)  498/   1DB46 :                     ; ---------------------------------------------------------------------------
(1)  499/   1DB46 :                     ; Pattern load cues - final boss
(1)  500/   1DB46 :                     ; ---------------------------------------------------------------------------
(1)  501/   1DB46 : 0004                PLC_FZBoss:	dc.w 4
(1)  502/   1DB48 : 0006 0872           		dc.l Nem_FzEggman	; Eggman after boss
(1)  503/   1DB4C : 7400                		dc.w $7400
(1)  504/   1DB4E : 0006 010A           		dc.l Nem_FzBoss		; FZ boss
(1)  505/   1DB52 : 6000                		dc.w $6000
(1)  506/   1DB54 : 0005 E50C           		dc.l Nem_Eggman		; Eggman main patterns
(1)  507/   1DB58 : 8000                		dc.w $8000
(1)  508/   1DB5A : 0005 F8DE           		dc.l Nem_Sbz2Eggman	; Eggman without ship
(1)  509/   1DB5E : 8E00                		dc.w $8E00
(1)  510/   1DB60 : 0006 0DF2           		dc.l Nem_Exhaust	; exhaust flame
(1)  511/   1DB64 : A540                		dc.w $A540
(1)  512/   1DB66 : (MACRO)              		even
   37766/   1DB66 :                     
   37767/   1DB66 :                     Nem_SegaLogo:	binclude	"_binary-files/artnem/segalogo.bin"	; large Sega logo
   37768/   1DFC8 : (MACRO)              		even
   37769/   1DFC8 :                     Eni_SegaLogo:	binclude	"_tilemaps/segalogo.bin"	; large Sega logo (mappings)
   37770/   1E0C0 : (MACRO)              		even
   37771/   1E0C0 :                     Eni_Title:	binclude	"_tilemaps/titlescr.bin"	; title screen foreground (mappings)
   37772/   1E1D4 : (MACRO)              		even
   37773/   1E1D4 :                     Nem_TitleFg:	binclude	"_binary-files/artnem/titlefor.bin"	; title screen foreground
   37774/   1F1E0 : (MACRO)              		even
   37775/   1F1E0 :                     Nem_TitleSonic:	binclude	"_binary-files/artnem/titleson.bin"	; Sonic on title screen
   37776/   20BAE : (MACRO)              		even
   37777/   20BAE :                     Nem_TitleTM:	binclude	"_binary-files/artnem/titletm.bin"	; TM on title screen
   37778/   20BE2 : (MACRO)              		even
   37779/   20BE2 :                     Eni_JapNames:	binclude	"_tilemaps/japcreds.bin"	; Japanese credits (mappings)
   37780/   20CA0 : (MACRO)              		even
   37781/   20CA0 :                     Nem_JapNames:	binclude	"_binary-files/artnem/japcreds.bin"	; Japanese credits
   37782/   21148 : (MACRO)              		even
   37783/   21148 :                     ; ---------------------------------------------------------------------------
   37784/   21148 :                     ; Sprite mappings - Sonic
   37785/   21148 :                     ; ---------------------------------------------------------------------------
   37786/   21148 :                     Map_Sonic:
   37787/   21148 :                     	include "_mappings/Sonic.asm"
(1)    1/   21148 :                     ; ---------------------------------------------------------------------------
(1)    2/   21148 :                     ; Sprite mappings - Sonic
(1)    3/   21148 :                     ; ---------------------------------------------------------------------------
(1)    4/   21148 : 00B0 00B1           		dc.w byte_21292-Map_Sonic, byte_21293-Map_Sonic
(1)    5/   2114C : 00C6 00D6           		dc.w byte_212A8-Map_Sonic, byte_212B8-Map_Sonic
(1)    6/   21150 : 00E6 00F6           		dc.w byte_212C8-Map_Sonic, byte_212D8-Map_Sonic
(1)    7/   21154 : 0106 011B           		dc.w byte_212E8-Map_Sonic, byte_212FD-Map_Sonic
(1)    8/   21158 : 0126 0131           		dc.w byte_21308-Map_Sonic, byte_21313-Map_Sonic
(1)    9/   2115C : 0146 0151           		dc.w byte_21328-Map_Sonic, byte_21333-Map_Sonic
(1)   10/   21160 : 0161 017B           		dc.w byte_21343-Map_Sonic, byte_2135D-Map_Sonic
(1)   11/   21164 : 019A 01AF           		dc.w byte_2137C-Map_Sonic, byte_21391-Map_Sonic
(1)   12/   21168 : 01C9 01DE           		dc.w byte_213AB-Map_Sonic, byte_213C0-Map_Sonic
(1)   13/   2116C : 01F8 020D           		dc.w byte_213DA-Map_Sonic, byte_213EF-Map_Sonic
(1)   14/   21170 : 0218 0223           		dc.w byte_213FA-Map_Sonic, byte_21405-Map_Sonic
(1)   15/   21174 : 0238 0243           		dc.w byte_2141A-Map_Sonic, byte_21425-Map_Sonic
(1)   16/   21178 : 0253 0272           		dc.w byte_21435-Map_Sonic, byte_21454-Map_Sonic
(1)   17/   2117C : 0291 02A6           		dc.w byte_21473-Map_Sonic, byte_21488-Map_Sonic
(1)   18/   21180 : 02C0 02D5           		dc.w byte_214A2-Map_Sonic, byte_214B7-Map_Sonic
(1)   19/   21184 : 02EF 02FA           		dc.w byte_214D1-Map_Sonic, byte_214DC-Map_Sonic
(1)   20/   21188 : 0305 0310           		dc.w byte_214E7-Map_Sonic, byte_214F2-Map_Sonic
(1)   21/   2118C : 031B 0330           		dc.w byte_214FD-Map_Sonic, byte_21512-Map_Sonic
(1)   22/   21190 : 0340 0355           		dc.w byte_21522-Map_Sonic, byte_21537-Map_Sonic
(1)   23/   21194 : 0365 0370           		dc.w byte_21547-Map_Sonic, byte_21552-Map_Sonic
(1)   24/   21198 : 037B 0386           		dc.w byte_2155D-Map_Sonic, byte_21568-Map_Sonic
(1)   25/   2119C : 0391 03A6           		dc.w byte_21573-Map_Sonic, byte_21588-Map_Sonic
(1)   26/   211A0 : 03B1 03C6           		dc.w byte_21593-Map_Sonic, byte_215A8-Map_Sonic
(1)   27/   211A4 : 03D1 03D7           		dc.w byte_215B3-Map_Sonic, byte_215B9-Map_Sonic
(1)   28/   211A8 : 03DD 03E3           		dc.w byte_215BF-Map_Sonic, byte_215C5-Map_Sonic
(1)   29/   211AC : 03E9 03EF           		dc.w byte_215CB-Map_Sonic, byte_215D1-Map_Sonic
(1)   30/   211B0 : 03FA 0400           		dc.w byte_215DC-Map_Sonic, byte_215E2-Map_Sonic
(1)   31/   211B4 : 040B 0411           		dc.w byte_215ED-Map_Sonic, byte_215F3-Map_Sonic
(1)   32/   211B8 : 041C 0431           		dc.w byte_215FE-Map_Sonic, byte_21613-Map_Sonic
(1)   33/   211BC : 0446 0456           		dc.w byte_21628-Map_Sonic, byte_21638-Map_Sonic
(1)   34/   211C0 : 0466 0476           		dc.w byte_21648-Map_Sonic, byte_21658-Map_Sonic
(1)   35/   211C4 : 0481 0491           		dc.w byte_21663-Map_Sonic, byte_21673-Map_Sonic
(1)   36/   211C8 : 04A1 04B1           		dc.w byte_21683-Map_Sonic, byte_21693-Map_Sonic
(1)   37/   211CC : 04C6 04DB           		dc.w byte_216A8-Map_Sonic, byte_216BD-Map_Sonic
(1)   38/   211D0 : 04F5 050F           		dc.w byte_216D7-Map_Sonic, byte_216F1-Map_Sonic
(1)   39/   211D4 : 051A 052A           		dc.w byte_216FC-Map_Sonic, byte_2170C-Map_Sonic
(1)   40/   211D8 : 0535 0545           		dc.w byte_21717-Map_Sonic, byte_21727-Map_Sonic
(1)   41/   211DC : 0550 0560           		dc.w byte_21732-Map_Sonic, byte_21742-Map_Sonic
(1)   42/   211E0 : 0570 058A           		dc.w byte_21752-Map_Sonic, byte_2176C-Map_Sonic
(1)   43/   211E4 : 05A4 05AF           		dc.w byte_21786-Map_Sonic, byte_21791-Map_Sonic
(1)   44/   211E8 : 05BF 05C5           		dc.w byte_217A1-Map_Sonic, byte_217A7-Map_Sonic
(1)   45/   211EC : 05CB 05D1           		dc.w byte_217AD-Map_Sonic, byte_217B3-Map_Sonic
(1)   46/   211F0 : 05E1 05F1           		dc.w byte_217C3-Map_Sonic, byte_217D3-Map_Sonic
(1)   47/   211F4 : 0601 0611           		dc.w byte_217E3-Map_Sonic, byte_217F3-Map_Sonic
(1)   48/   211F8 : 00                  byte_21292:	dc.b 0
(1)   49/   211F9 : 04                  byte_21293:	dc.b 4			; standing
(1)   50/   211FA : EC08 0000 F0        		dc.b $EC, 8, 0,	0, $F0
(1)   51/   211FF : F40D 0003 F0        		dc.b $F4, $D, 0, 3, $F0
(1)   52/   21204 : 0408 000B F0        		dc.b 4,	8, 0, $B, $F0
(1)   53/   21209 : 0C08 000E F8        		dc.b $C, 8, 0, $E, $F8
(1)   54/   2120E : 03                  byte_212A8:	dc.b 3			; waiting 1
(1)   55/   2120F : EC09 0000 F0        		dc.b $EC, 9, 0,	0, $F0
(1)   56/   21214 : FC09 0006 F0        		dc.b $FC, 9, 0,	6, $F0
(1)   57/   21219 : 0C08 000C F8        		dc.b $C, 8, 0, $C, $F8
(1)   58/   2121E : 03                  byte_212B8:	dc.b 3			; waiting 2
(1)   59/   2121F : EC09 0000 F0        		dc.b $EC, 9, 0,	0, $F0
(1)   60/   21224 : FC09 0006 F0        		dc.b $FC, 9, 0,	6, $F0
(1)   61/   21229 : 0C08 000C F8        		dc.b $C, 8, 0, $C, $F8
(1)   62/   2122E : 03                  byte_212C8:	dc.b 3			; waiting 3
(1)   63/   2122F : EC09 0000 F0        		dc.b $EC, 9, 0,	0, $F0
(1)   64/   21234 : FC09 0006 F0        		dc.b $FC, 9, 0,	6, $F0
(1)   65/   21239 : 0C08 000C F8        		dc.b $C, 8, 0, $C, $F8
(1)   66/   2123E : 03                  byte_212D8:	dc.b 3			; looking up
(1)   67/   2123F : EC0A 0000 F0        		dc.b $EC, $A, 0, 0, $F0
(1)   68/   21244 : 0408 0009 F0        		dc.b 4,	8, 0, 9, $F0
(1)   69/   21249 : 0C08 000C F8        		dc.b $C, 8, 0, $C, $F8
(1)   70/   2124E : 04                  byte_212E8:	dc.b 4			; walking 1-1
(1)   71/   2124F : EB0D 0000 EC        		dc.b $EB, $D, 0, 0, $EC
(1)   72/   21254 : FB09 0008 EC        		dc.b $FB, 9, 0,	8, $EC
(1)   73/   21259 : FB06 000E 04        		dc.b $FB, 6, 0,	$E, 4
(1)   74/   2125E : 0B04 0014 EC        		dc.b $B, 4, 0, $14, $EC
(1)   75/   21263 : 02                  byte_212FD:	dc.b 2			; walking 1-2
(1)   76/   21264 : EC0D 0000 ED        		dc.b $EC, $D, 0, 0, $ED
(1)   77/   21269 : FC0E 0008 F5        		dc.b $FC, $E, 0, 8, $F5
(1)   78/   2126E : 02                  byte_21308:	dc.b 2			; walking 1-3
(1)   79/   2126F : ED09 0000 F3        		dc.b $ED, 9, 0,	0, $F3
(1)   80/   21274 : FD0A 0006 F3        		dc.b $FD, $A, 0, 6, $F3
(1)   81/   21279 : 04                  byte_21313:	dc.b 4			; walking 1-4
(1)   82/   2127A : EB09 0000 F4        		dc.b $EB, 9, 0,	0, $F4
(1)   83/   2127F : FB09 0006 EC        		dc.b $FB, 9, 0,	6, $EC
(1)   84/   21284 : FB06 000C 04        		dc.b $FB, 6, 0,	$C, 4
(1)   85/   21289 : 0B04 0012 EC        		dc.b $B, 4, 0, $12, $EC
(1)   86/   2128E : 02                  byte_21328:	dc.b 2			; walking 1-5
(1)   87/   2128F : EC09 0000 F3        		dc.b $EC, 9, 0,	0, $F3
(1)   88/   21294 : FC0E 0006 EB        		dc.b $FC, $E, 0, 6, $EB
(1)   89/   21299 : 03                  byte_21333:	dc.b 3			; walking 1-6
(1)   90/   2129A : ED0D 0000 EC        		dc.b $ED, $D, 0, 0, $EC
(1)   91/   2129F : FD0C 0008 F4        		dc.b $FD, $C, 0, 8, $F4
(1)   92/   212A4 : 0509 000C F4        		dc.b 5,	9, 0, $C, $F4
(1)   93/   212A9 : 05                  byte_21343:	dc.b 5			; walking 2-1
(1)   94/   212AA : EB09 0000 EB        		dc.b $EB, 9, 0,	0, $EB
(1)   95/   212AF : EB06 0006 03        		dc.b $EB, 6, 0,	6, 3
(1)   96/   212B4 : FB08 000C EB        		dc.b $FB, 8, 0,	$C, $EB
(1)   97/   212B9 : 0309 000F F3        		dc.b 3,	9, 0, $F, $F3
(1)   98/   212BE : 1300 0015 FB        		dc.b $13, 0, 0,	$15, $FB
(1)   99/   212C3 : 06                  byte_2135D:	dc.b 6			; walking 2-2
(1)  100/   212C4 : EC09 0000 EC        		dc.b $EC, 9, 0,	0, $EC
(1)  101/   212C9 : EC01 0006 04        		dc.b $EC, 1, 0,	6, 4
(1)  102/   212CE : FC0C 0008 EC        		dc.b $FC, $C, 0, 8, $EC
(1)  103/   212D3 : 0409 000C F4        		dc.b 4,	9, 0, $C, $F4
(1)  104/   212D8 : FC05 0012 0C        		dc.b $FC, 5, 0,	$12, $C
(1)  105/   212DD : F400 0016 14        		dc.b $F4, 0, 0,	$16, $14
(1)  106/   212E2 : 04                  byte_2137C:	dc.b 4			; walking 2-3
(1)  107/   212E3 : ED09 0000 ED        		dc.b $ED, 9, 0,	0, $ED
(1)  108/   212E8 : ED01 0006 05        		dc.b $ED, 1, 0,	6, 5
(1)  109/   212ED : FD0D 0008 F5        		dc.b $FD, $D, 0, 8, $F5
(1)  110/   212F2 : 0D08 0010 FD        		dc.b $D, 8, 0, $10, $FD
(1)  111/   212F7 : 05                  byte_21391:	dc.b 5			; walking 2-4
(1)  112/   212F8 : EB09 0000 EB        		dc.b $EB, 9, 0,	0, $EB
(1)  113/   212FD : EB05 0006 03        		dc.b $EB, 5, 0,	6, 3
(1)  114/   21302 : FB0D 000A F3        		dc.b $FB, $D, 0, $A, $F3
(1)  115/   21307 : 0B08 0012 F3        		dc.b $B, 8, 0, $12, $F3
(1)  116/   2130C : 1304 0015 FB        		dc.b $13, 4, 0,	$15, $FB
(1)  117/   21311 : 04                  byte_213AB:	dc.b 4			; walking 2-5
(1)  118/   21312 : EC09 0000 EC        		dc.b $EC, 9, 0,	0, $EC
(1)  119/   21317 : EC01 0006 04        		dc.b $EC, 1, 0,	6, 4
(1)  120/   2131C : FC0D 0008 F4        		dc.b $FC, $D, 0, 8, $F4
(1)  121/   21321 : 0C08 0010 FC        		dc.b $C, 8, 0, $10, $FC
(1)  122/   21326 : 05                  byte_213C0:	dc.b 5			; walking 2-6
(1)  123/   21327 : ED09 0000 ED        		dc.b $ED, 9, 0,	0, $ED
(1)  124/   2132C : ED01 0006 05        		dc.b $ED, 1, 0,	6, 5
(1)  125/   21331 : FD00 0008 ED        		dc.b $FD, 0, 0,	8, $ED
(1)  126/   21336 : FD0D 0009 F5        		dc.b $FD, $D, 0, 9, $F5
(1)  127/   2133B : 0D08 0011 FD        		dc.b $D, 8, 0, $11, $FD
(1)  128/   21340 : 04                  byte_213DA:	dc.b 4			; walking 3-1
(1)  129/   21341 : F407 0000 EB        		dc.b $F4, 7, 0,	0, $EB
(1)  130/   21346 : EC09 0008 FB        		dc.b $EC, 9, 0,	8, $FB
(1)  131/   2134B : FC04 000E FB        		dc.b $FC, 4, 0,	$E, $FB
(1)  132/   21350 : 0409 0010 FB        		dc.b 4,	9, 0, $10, $FB
(1)  133/   21355 : 02                  byte_213EF:	dc.b 2			; walking 3-2
(1)  134/   21356 : F407 0000 EC        		dc.b $F4, 7, 0,	0, $EC
(1)  135/   2135B : EC0B 0008 FC        		dc.b $EC, $B, 0, 8, $FC
(1)  136/   21360 : 02                  byte_213FA:	dc.b 2			; walking 3-3
(1)  137/   21361 : F406 0000 ED        		dc.b $F4, 6, 0,	0, $ED
(1)  138/   21366 : F40A 0006 FD        		dc.b $F4, $A, 0, 6, $FD
(1)  139/   2136B : 04                  byte_21405:	dc.b 4			; walking 3-4
(1)  140/   2136C : F406 0000 EB        		dc.b $F4, 6, 0,	0, $EB
(1)  141/   21371 : EC09 0006 FB        		dc.b $EC, 9, 0,	6, $FB
(1)  142/   21376 : FC04 000C FB        		dc.b $FC, 4, 0,	$C, $FB
(1)  143/   2137B : 0409 000E FB        		dc.b 4,	9, 0, $E, $FB
(1)  144/   21380 : 02                  byte_2141A:	dc.b 2			; walking 3-5
(1)  145/   21381 : F406 0000 EC        		dc.b $F4, 6, 0,	0, $EC
(1)  146/   21386 : F40B 0006 FC        		dc.b $F4, $B, 0, 6, $FC
(1)  147/   2138B : 03                  byte_21425:	dc.b 3			; walking 3-6
(1)  148/   2138C : F407 0000 ED        		dc.b $F4, 7, 0,	0, $ED
(1)  149/   21391 : EC00 0008 FD        		dc.b $EC, 0, 0,	8, $FD
(1)  150/   21396 : F40A 0009 FD        		dc.b $F4, $A, 0, 9, $FD
(1)  151/   2139B : 06                  byte_21435:	dc.b 6			; walking 4-1
(1)  152/   2139C : FD06 0000 EB        		dc.b $FD, 6, 0,	0, $EB
(1)  153/   213A1 : ED04 0006 F3        		dc.b $ED, 4, 0,	6, $F3
(1)  154/   213A6 : F504 0008 EB        		dc.b $F5, 4, 0,	8, $EB
(1)  155/   213AB : F50A 000A FB        		dc.b $F5, $A, 0, $A, $FB
(1)  156/   213B0 : 0D00 0013 FB        		dc.b $D, 0, 0, $13, $FB
(1)  157/   213B5 : FD00 0014 13        		dc.b $FD, 0, 0,	$14, $13
(1)  158/   213BA : 06                  byte_21454:	dc.b 6			; walking 4-2
(1)  159/   213BB : FC06 0000 EC        		dc.b $FC, 6, 0,	0, $EC
(1)  160/   213C0 : E408 0006 F4        		dc.b $E4, 8, 0,	6, $F4
(1)  161/   213C5 : EC04 0009 FC        		dc.b $EC, 4, 0,	9, $FC
(1)  162/   213CA : F404 000B EC        		dc.b $F4, 4, 0,	$B, $EC
(1)  163/   213CF : F40A 000D FC        		dc.b $F4, $A, 0, $D, $FC
(1)  164/   213D4 : 0C00 0016 FC        		dc.b $C, 0, 0, $16, $FC
(1)  165/   213D9 : 04                  byte_21473:	dc.b 4			; walking 4-3
(1)  166/   213DA : FB06 0000 ED        		dc.b $FB, 6, 0,	0, $ED
(1)  167/   213DF : F304 0006 ED        		dc.b $F3, 4, 0,	6, $ED
(1)  168/   213E4 : EB0A 0008 FD        		dc.b $EB, $A, 0, 8, $FD
(1)  169/   213E9 : 0304 0011 FD        		dc.b 3,	4, 0, $11, $FD
(1)  170/   213EE : 05                  byte_21488:	dc.b 5			; walking 4-4
(1)  171/   213EF : FD06 0000 EB        		dc.b $FD, 6, 0,	0, $EB
(1)  172/   213F4 : ED08 0006 F3        		dc.b $ED, 8, 0,	6, $F3
(1)  173/   213F9 : F504 0009 EB        		dc.b $F5, 4, 0,	9, $EB
(1)  174/   213FE : F50D 000B FB        		dc.b $F5, $D, 0, $B, $FB
(1)  175/   21403 : 0508 0013 FB        		dc.b 5,	8, 0, $13, $FB
(1)  176/   21408 : 04                  byte_214A2:	dc.b 4			; walking 4-5
(1)  177/   21409 : FC06 0000 EC        		dc.b $FC, 6, 0,	0, $EC
(1)  178/   2140E : F404 0006 EC        		dc.b $F4, 4, 0,	6, $EC
(1)  179/   21413 : EC0A 0008 FC        		dc.b $EC, $A, 0, 8, $FC
(1)  180/   21418 : 0404 0011 FC        		dc.b 4,	4, 0, $11, $FC
(1)  181/   2141D : 05                  byte_214B7:	dc.b 5			; walking 4-6
(1)  182/   2141E : FB06 0000 ED        		dc.b $FB, 6, 0,	0, $ED
(1)  183/   21423 : EB0A 0006 FD        		dc.b $EB, $A, 0, 6, $FD
(1)  184/   21428 : F304 000F ED        		dc.b $F3, 4, 0,	$F, $ED
(1)  185/   2142D : 0304 0011 FD        		dc.b 3,	4, 0, $11, $FD
(1)  186/   21432 : 0B00 0013 FD        		dc.b $B, 0, 0, $13, $FD
(1)  187/   21437 : 02                  byte_214D1:	dc.b 2			; running 1-1
(1)  188/   21438 : EE09 0000 F4        		dc.b $EE, 9, 0,	0, $F4
(1)  189/   2143D : FE0E 0006 EC        		dc.b $FE, $E, 0, 6, $EC
(1)  190/   21442 : 02                  byte_214DC:	dc.b 2			; running 1-2
(1)  191/   21443 : EE09 0000 F4        		dc.b $EE, 9, 0,	0, $F4
(1)  192/   21448 : FE0E 0006 EC        		dc.b $FE, $E, 0, 6, $EC
(1)  193/   2144D : 02                  byte_214E7:	dc.b 2			; running 1-3
(1)  194/   2144E : EE09 0000 F4        		dc.b $EE, 9, 0,	0, $F4
(1)  195/   21453 : FE0E 0006 EC        		dc.b $FE, $E, 0, 6, $EC
(1)  196/   21458 : 02                  byte_214F2:	dc.b 2			; running 1-4
(1)  197/   21459 : EE09 0000 F4        		dc.b $EE, 9, 0,	0, $F4
(1)  198/   2145E : FE0E 0006 EC        		dc.b $FE, $E, 0, 6, $EC
(1)  199/   21463 : 04                  byte_214FD:	dc.b 4			; running 2-1
(1)  200/   21464 : EE09 0000 EE        		dc.b $EE, 9, 0,	0, $EE
(1)  201/   21469 : EE01 0006 06        		dc.b $EE, 1, 0,	6, 6
(1)  202/   2146E : FE0E 0008 F6        		dc.b $FE, $E, 0, 8, $F6
(1)  203/   21473 : FE00 0014 EE        		dc.b $FE, 0, 0,	$14, $EE
(1)  204/   21478 : 03                  byte_21512:	dc.b 3			; running 2-2
(1)  205/   21479 : EE09 0000 EE        		dc.b $EE, 9, 0,	0, $EE
(1)  206/   2147E : EE01 0006 06        		dc.b $EE, 1, 0,	6, 6
(1)  207/   21483 : FE0E 0008 F6        		dc.b $FE, $E, 0, 8, $F6
(1)  208/   21488 : 04                  byte_21522:	dc.b 4			; running 2-3
(1)  209/   21489 : EE09 0000 EE        		dc.b $EE, 9, 0,	0, $EE
(1)  210/   2148E : EE01 0006 06        		dc.b $EE, 1, 0,	6, 6
(1)  211/   21493 : FE0E 0008 F6        		dc.b $FE, $E, 0, 8, $F6
(1)  212/   21498 : FE00 0014 EE        		dc.b $FE, 0, 0,	$14, $EE
(1)  213/   2149D : 03                  byte_21537:	dc.b 3			; running 2-4
(1)  214/   2149E : EE09 0000 EE        		dc.b $EE, 9, 0,	0, $EE
(1)  215/   214A3 : EE01 0006 06        		dc.b $EE, 1, 0,	6, 6
(1)  216/   214A8 : FE0E 0008 F6        		dc.b $FE, $E, 0, 8, $F6
(1)  217/   214AD : 02                  byte_21547:	dc.b 2			; running 3-1
(1)  218/   214AE : F406 0000 EE        		dc.b $F4, 6, 0,	0, $EE
(1)  219/   214B3 : F40B 0006 FE        		dc.b $F4, $B, 0, 6, $FE
(1)  220/   214B8 : 02                  byte_21552:	dc.b 2			; running 3-2
(1)  221/   214B9 : F406 0000 EE        		dc.b $F4, 6, 0,	0, $EE
(1)  222/   214BE : F40B 0006 FE        		dc.b $F4, $B, 0, 6, $FE
(1)  223/   214C3 : 02                  byte_2155D:	dc.b 2			; running 3-3
(1)  224/   214C4 : F406 0000 EE        		dc.b $F4, 6, 0,	0, $EE
(1)  225/   214C9 : F40B 0006 FE        		dc.b $F4, $B, 0, 6, $FE
(1)  226/   214CE : 02                  byte_21568:	dc.b 2			; running 3-4
(1)  227/   214CF : F406 0000 EE        		dc.b $F4, 6, 0,	0, $EE
(1)  228/   214D4 : F40B 0006 FE        		dc.b $F4, $B, 0, 6, $FE
(1)  229/   214D9 : 04                  byte_21573:	dc.b 4			; running 4-1
(1)  230/   214DA : FA06 0000 EE        		dc.b $FA, 6, 0,	0, $EE
(1)  231/   214DF : F204 0006 EE        		dc.b $F2, 4, 0,	6, $EE
(1)  232/   214E4 : EA0B 0008 FE        		dc.b $EA, $B, 0, 8, $FE
(1)  233/   214E9 : 0A00 0014 FE        		dc.b $A, 0, 0, $14, $FE
(1)  234/   214EE : 02                  byte_21588:	dc.b 2			; running 4-2
(1)  235/   214EF : F207 0000 EE        		dc.b $F2, 7, 0,	0, $EE
(1)  236/   214F4 : EA0B 0008 FE        		dc.b $EA, $B, 0, 8, $FE
(1)  237/   214F9 : 04                  byte_21593:	dc.b 4			; running 4-3
(1)  238/   214FA : FA06 0000 EE        		dc.b $FA, 6, 0,	0, $EE
(1)  239/   214FF : F204 0006 EE        		dc.b $F2, 4, 0,	6, $EE
(1)  240/   21504 : EA0B 0008 FE        		dc.b $EA, $B, 0, 8, $FE
(1)  241/   21509 : 0A00 0014 FE        		dc.b $A, 0, 0, $14, $FE
(1)  242/   2150E : 02                  byte_215A8:	dc.b 2			; running 4-4
(1)  243/   2150F : F207 0000 EE        		dc.b $F2, 7, 0,	0, $EE
(1)  244/   21514 : EA0B 0008 FE        		dc.b $EA, $B, 0, 8, $FE
(1)  245/   21519 : 01                  byte_215B3:	dc.b 1			; rolling 1
(1)  246/   2151A : F00F 0000 F0        		dc.b $F0, $F, 0, 0, $F0
(1)  247/   2151F : 01                  byte_215B9:	dc.b 1			; rolling 2
(1)  248/   21520 : F00F 0000 F0        		dc.b $F0, $F, 0, 0, $F0
(1)  249/   21525 : 01                  byte_215BF:	dc.b 1			; rolling 3
(1)  250/   21526 : F00F 0000 F0        		dc.b $F0, $F, 0, 0, $F0
(1)  251/   2152B : 01                  byte_215C5:	dc.b 1			; rolling 4
(1)  252/   2152C : F00F 0000 F0        		dc.b $F0, $F, 0, 0, $F0
(1)  253/   21531 : 01                  byte_215CB:	dc.b 1			; rolling 5
(1)  254/   21532 : F00F 0000 F0        		dc.b $F0, $F, 0, 0, $F0
(1)  255/   21537 : 02                  byte_215D1:	dc.b 2			; warped 1 (unused)
(1)  256/   21538 : F40E 0000 EC        		dc.b $F4, $E, 0, 0, $EC
(1)  257/   2153D : F402 000C 0C        		dc.b $F4, 2, 0,	$C, $C
(1)  258/   21542 : 01                  byte_215DC:	dc.b 1			; warped 2 (unused)
(1)  259/   21543 : F00F 0000 F0        		dc.b $F0, $F, 0, 0, $F0
(1)  260/   21548 : 02                  byte_215E2:	dc.b 2			; warped 3 (unused)
(1)  261/   21549 : EC0B 0000 F4        		dc.b $EC, $B, 0, 0, $F4
(1)  262/   2154E : 0C08 000C F4        		dc.b $C, 8, 0, $C, $F4
(1)  263/   21553 : 01                  byte_215ED:	dc.b 1			; warped 4 (unused)
(1)  264/   21554 : F00F 0000 F0        		dc.b $F0, $F, 0, 0, $F0
(1)  265/   21559 : 02                  byte_215F3:	dc.b 2			; stopping 1
(1)  266/   2155A : ED09 0000 F0        		dc.b $ED, 9, 0,	0, $F0
(1)  267/   2155F : FD0E 0006 F0        		dc.b $FD, $E, 0, 6, $F0
(1)  268/   21564 : 04                  byte_215FE:	dc.b 4			; stopping 2
(1)  269/   21565 : ED09 0000 F0        		dc.b $ED, 9, 0,	0, $F0
(1)  270/   2156A : FD0D 0006 F0        		dc.b $FD, $D, 0, 6, $F0
(1)  271/   2156F : 0D04 000E 00        		dc.b $D, 4, 0, $E, 0
(1)  272/   21574 : 0500 0010 E8        		dc.b 5,	0, 0, $10, $E8
(1)  273/   21579 : 04                  byte_21613:	dc.b 4			; ducking
(1)  274/   2157A : F404 0000 FC        		dc.b $F4, 4, 0,	0, $FC
(1)  275/   2157F : FC0D 0002 F4        		dc.b $FC, $D, 0, 2, $F4
(1)  276/   21584 : 0C08 000A F4        		dc.b $C, 8, 0, $A, $F4
(1)  277/   21589 : 0400 000D EC        		dc.b 4,	0, 0, $D, $EC
(1)  278/   2158E : 03                  byte_21628:	dc.b 3			; balancing 1
(1)  279/   2158F : EC08 0800 E8        		dc.b $EC, 8, 8,	0, $E8
(1)  280/   21594 : F402 0803 00        		dc.b $F4, 2, 8,	3, 0
(1)  281/   21599 : F40F 0806 E0        		dc.b $F4, $F, 8, 6, $E0
(1)  282/   2159E : 03                  byte_21638:	dc.b 3			; balancing 2
(1)  283/   2159F : EC0E 0800 E8        		dc.b $EC, $E, 8, 0, $E8
(1)  284/   215A4 : 040D 080C E0        		dc.b 4,	$D, 8, $C, $E0
(1)  285/   215A9 : 0C00 1814 00        		dc.b $C, 0, $18, $14, 0
(1)  286/   215AE : 03                  byte_21648:	dc.b 3			; spinning 1 (LZ)
(1)  287/   215AF : F40D 0000 FC        		dc.b $F4, $D, 0, 0, $FC
(1)  288/   215B4 : FC05 0008 EC        		dc.b $FC, 5, 0,	8, $EC
(1)  289/   215B9 : 0408 000C FC        		dc.b 4,	8, 0, $C, $FC
(1)  290/   215BE : 02                  byte_21658:	dc.b 2			; spinning 2 (LZ)
(1)  291/   215BF : F40A 0000 E8        		dc.b $F4, $A, 0, 0, $E8
(1)  292/   215C4 : F40A 0800 00        		dc.b $F4, $A, 8, 0, 0
(1)  293/   215C9 : 03                  byte_21663:	dc.b 3			; spinning 3 (LZ)
(1)  294/   215CA : F40D 0000 E4        		dc.b $F4, $D, 0, 0, $E4
(1)  295/   215CF : FC00 0008 04        		dc.b $FC, 0, 0,	8, 4
(1)  296/   215D4 : 040C 0009 EC        		dc.b 4,	$C, 0, 9, $EC
(1)  297/   215D9 : 03                  byte_21673:	dc.b 3			; spinning 4 (LZ)
(1)  298/   215DA : F40D 0000 FC        		dc.b $F4, $D, 0, 0, $FC
(1)  299/   215DF : FC05 0008 EC        		dc.b $FC, 5, 0,	8, $EC
(1)  300/   215E4 : 0408 000C FC        		dc.b 4,	8, 0, $C, $FC
(1)  301/   215E9 : 03                  byte_21683:	dc.b 3			; bouncing
(1)  302/   215EA : E80B 0000 F0        		dc.b $E8, $B, 0, 0, $F0
(1)  303/   215EF : 0804 000C F8        		dc.b 8,	4, 0, $C, $F8
(1)  304/   215F4 : 1000 000E F8        		dc.b $10, 0, 0,	$E, $F8
(1)  305/   215F9 : 04                  byte_21693:	dc.b 4			; hanging 1 (LZ)
(1)  306/   215FA : F80E 0000 E8        		dc.b $F8, $E, 0, 0, $E8
(1)  307/   215FF : 0005 000C 08        		dc.b 0,	5, 0, $C, 8
(1)  308/   21604 : F800 0010 08        		dc.b $F8, 0, 0,	$10, 8
(1)  309/   21609 : F000 0011 F8        		dc.b $F0, 0, 0,	$11, $F8
(1)  310/   2160E : 04                  byte_216A8:	dc.b 4			; hanging 2 (LZ)
(1)  311/   2160F : F80E 0000 E8        		dc.b $F8, $E, 0, 0, $E8
(1)  312/   21614 : 0005 000C 08        		dc.b 0,	5, 0, $C, 8
(1)  313/   21619 : F800 0010 08        		dc.b $F8, 0, 0,	$10, 8
(1)  314/   2161E : F000 0011 F8        		dc.b $F0, 0, 0,	$11, $F8
(1)  315/   21623 : 05                  byte_216BD:	dc.b 5			; celebration leap 1 (unused)
(1)  316/   21624 : E80A 0000 F4        		dc.b $E8, $A, 0, 0, $F4
(1)  317/   21629 : F001 0009 0C        		dc.b $F0, 1, 0,	9, $C
(1)  318/   2162E : 0009 000B F4        		dc.b 0,	9, 0, $B, $F4
(1)  319/   21633 : 1004 0011 F4        		dc.b $10, 4, 0,	$11, $F4
(1)  320/   21638 : 0000 0013 EC        		dc.b 0,	0, 0, $13, $EC
(1)  321/   2163D : 05                  byte_216D7:	dc.b 5			; celebration leap 2 (unused)
(1)  322/   2163E : E80A 0000 F4        		dc.b $E8, $A, 0, 0, $F4
(1)  323/   21643 : E801 0009 0C        		dc.b $E8, 1, 0,	9, $C
(1)  324/   21648 : 0009 000B F4        		dc.b 0,	9, 0, $B, $F4
(1)  325/   2164D : 1004 0011 F4        		dc.b $10, 4, 0,	$11, $F4
(1)  326/   21652 : 0000 0013 EC        		dc.b 0,	0, 0, $13, $EC
(1)  327/   21657 : 02                  byte_216F1:	dc.b 2			; pushing 1
(1)  328/   21658 : ED0A 0000 F3        		dc.b $ED, $A, 0, 0, $F3
(1)  329/   2165D : 050D 0009 EB        		dc.b 5,	$D, 0, 9, $EB
(1)  330/   21662 : 03                  byte_216FC:	dc.b 3			; pushing 2
(1)  331/   21663 : EC0A 0000 F3        		dc.b $EC, $A, 0, 0, $F3
(1)  332/   21668 : 0408 0009 F3        		dc.b 4,	8, 0, 9, $F3
(1)  333/   2166D : 0C04 000C F3        		dc.b $C, 4, 0, $C, $F3
(1)  334/   21672 : 02                  byte_2170C:	dc.b 2			; pushing 3
(1)  335/   21673 : ED0A 0000 F3        		dc.b $ED, $A, 0, 0, $F3
(1)  336/   21678 : 050D 0009 EB        		dc.b 5,	$D, 0, 9, $EB
(1)  337/   2167D : 03                  byte_21717:	dc.b 3			; pushing 4
(1)  338/   2167E : EC0A 0000 F3        		dc.b $EC, $A, 0, 0, $F3
(1)  339/   21683 : 0408 0009 F3        		dc.b 4,	8, 0, 9, $F3
(1)  340/   21688 : 0C04 000C F3        		dc.b $C, 4, 0, $C, $F3
(1)  341/   2168D : 02                  byte_21727:	dc.b 2			; surfing or sliding (unused)
(1)  342/   2168E : EC09 0000 F0        		dc.b $EC, 9, 0,	0, $F0
(1)  343/   21693 : FC0E 0006 F0        		dc.b $FC, $E, 0, 6, $F0
(1)  344/   21698 : 03                  byte_21732:	dc.b 3			; collecting bubble (unused)
(1)  345/   21699 : EC0A 0000 F0        		dc.b $EC, $A, 0, 0, $F0
(1)  346/   2169E : 0405 0009 F8        		dc.b 4,	5, 0, 9, $F8
(1)  347/   216A3 : E400 000D F8        		dc.b $E4, 0, 0,	$D, $F8
(1)  348/   216A8 : 03                  byte_21742:	dc.b 3			; death	1
(1)  349/   216A9 : E80D 0000 EC        		dc.b $E8, $D, 0, 0, $EC
(1)  350/   216AE : E801 0008 0C        		dc.b $E8, 1, 0,	8, $C
(1)  351/   216B3 : F80B 000A F4        		dc.b $F8, $B, 0, $A, $F4
(1)  352/   216B8 : 05                  byte_21752:	dc.b 5			; drowning
(1)  353/   216B9 : E80D 0000 EC        		dc.b $E8, $D, 0, 0, $EC
(1)  354/   216BE : E801 0008 0C        		dc.b $E8, 1, 0,	8, $C
(1)  355/   216C3 : F809 000A F4        		dc.b $F8, 9, 0,	$A, $F4
(1)  356/   216C8 : 080C 0010 F4        		dc.b 8,	$C, 0, $10, $F4
(1)  357/   216CD : 1000 0014 F4        		dc.b $10, 0, 0,	$14, $F4
(1)  358/   216D2 : 05                  byte_2176C:	dc.b 5			; death	2
(1)  359/   216D3 : E80D 0000 EC        		dc.b $E8, $D, 0, 0, $EC
(1)  360/   216D8 : E801 0008 0C        		dc.b $E8, 1, 0,	8, $C
(1)  361/   216DD : F809 000A F4        		dc.b $F8, 9, 0,	$A, $F4
(1)  362/   216E2 : 080C 0010 F4        		dc.b 8,	$C, 0, $10, $F4
(1)  363/   216E7 : 1000 0014 F4        		dc.b $10, 0, 0,	$14, $F4
(1)  364/   216EC : 02                  byte_21786:	dc.b 2			; shrinking 1 (unused)
(1)  365/   216ED : EC08 0000 F0        		dc.b $EC, 8, 0,	0, $F0
(1)  366/   216F2 : F40F 0003 F0        		dc.b $F4, $F, 0, 3, $F0
(1)  367/   216F7 : 03                  byte_21791:	dc.b 3			; shrinking 2 (unused)
(1)  368/   216F8 : EC08 0000 F0        		dc.b $EC, 8, 0,	0, $F0
(1)  369/   216FD : F40E 0003 F0        		dc.b $F4, $E, 0, 3, $F0
(1)  370/   21702 : 0C08 000F F8        		dc.b $C, 8, 0, $F, $F8
(1)  371/   21707 : 01                  byte_217A1:	dc.b 1			; shrinking 3 (unused)
(1)  372/   21708 : F00B 0000 F4        		dc.b $F0, $B, 0, 0, $F4
(1)  373/   2170D : 01                  byte_217A7:	dc.b 1			; shrinking 4 (unused)
(1)  374/   2170E : F406 0000 F8        		dc.b $F4, 6, 0,	0, $F8
(1)  375/   21713 : 01                  byte_217AD:	dc.b 1			; shrinking 5 (unused)
(1)  376/   21714 : F801 0000 FC        		dc.b $F8, 1, 0,	0, $FC
(1)  377/   21719 : 03                  byte_217B3:	dc.b 3			; injury
(1)  378/   2171A : F40D 0800 E4        		dc.b $F4, $D, 8, 0, $E4
(1)  379/   2171F : FC05 0808 04        		dc.b $FC, 5, 8,	8, 4
(1)  380/   21724 : 0408 080C EC        		dc.b 4,	8, 8, $C, $EC
(1)  381/   21729 : 03                  byte_217C3:	dc.b 3			; spinning 5 (LZ)
(1)  382/   2172A : F40D 0800 FC        		dc.b $F4, $D, 8, 0, $FC
(1)  383/   2172F : FC00 0808 F4        		dc.b $FC, 0, 8,	8, $F4
(1)  384/   21734 : 040C 0809 F4        		dc.b 4,	$C, 8, 9, $F4
(1)  385/   21739 : 03                  byte_217D3:	dc.b 3			; spinning 6 (LZ)
(1)  386/   2173A : F00E 0000 EC        		dc.b $F0, $E, 0, 0, $EC
(1)  387/   2173F : F801 000C 0C        		dc.b $F8, 1, 0,	$C, $C
(1)  388/   21744 : 080C 000E F4        		dc.b 8,	$C, 0, $E, $F4
(1)  389/   21749 : 03                  byte_217E3:	dc.b 3			; collecting bubble (LZ)
(1)  390/   2174A : EB09 0000 F4        		dc.b $EB, 9, 0,	0, $F4
(1)  391/   2174F : FB0E 0006 EC        		dc.b $FB, $E, 0, 6, $EC
(1)  392/   21754 : 0301 0012 0C        		dc.b 3,	1, 0, $12, $C
(1)  393/   21759 : 02                  byte_217F3:	dc.b 2			; water	slide (LZ)
(1)  394/   2175A : F00F 0000 EC        		dc.b $F0, $F, 0, 0, $EC
(1)  395/   2175F : F802 0010 0C        		dc.b $F8, 2, 0,	$10, $C
(1)  396/   21764 : (MACRO)              		even
   37788/   21764 :                     
   37789/   21764 :                     ; ---------------------------------------------------------------------------
   37790/   21764 :                     ; Uncompressed graphics	loading	array for Sonic
   37791/   21764 :                     ; ---------------------------------------------------------------------------
   37792/   21764 :                     SonicDynPLC:
   37793/   21764 :                     	include "_includes-ASM/Sonic dynamic pattern load cues.asm"
(1)    1/   21764 :                     ; ---------------------------------------------------------------------------
(1)    2/   21764 :                     ; Uncompressed graphics	loading	array for Sonic
(1)    3/   21764 :                     ; ---------------------------------------------------------------------------
(1)    4/   21764 : 00B0                		dc.w SonPLC_Blank-SonicDynPLC
(1)    5/   21766 : 00B1                		dc.w SonPLC_Stand-SonicDynPLC
(1)    6/   21768 : 00BA                		dc.w SonPLC_Wait1-SonicDynPLC
(1)    7/   2176A : 00C1                		dc.w SonPLC_Wait2-SonicDynPLC
(1)    8/   2176C : 00C8                		dc.w SonPLC_Wait3-SonicDynPLC
(1)    9/   2176E : 00CF                		dc.w SonPLC_LookUp-SonicDynPLC
(1)   10/   21770 : 00D6                		dc.w SonPLC_Walk11-SonicDynPLC
(1)   11/   21772 : 00DF                		dc.w SonPLC_Walk12-SonicDynPLC
(1)   12/   21774 : 00E4                		dc.w SonPLC_Walk13-SonicDynPLC
(1)   13/   21776 : 00E9                		dc.w SonPLC_Walk14-SonicDynPLC
(1)   14/   21778 : 00F2                		dc.w SonPLC_Walk15-SonicDynPLC
(1)   15/   2177A : 00F7                		dc.w SonPLC_Walk16-SonicDynPLC
(1)   16/   2177C : 00FE                		dc.w SonPLC_Walk21-SonicDynPLC
(1)   17/   2177E : 0109                		dc.w SonPLC_Walk22-SonicDynPLC
(1)   18/   21780 : 0116                		dc.w SonPLC_Walk23-SonicDynPLC
(1)   19/   21782 : 011F                		dc.w SonPLC_Walk24-SonicDynPLC
(1)   20/   21784 : 012A                		dc.w SonPLC_Walk25-SonicDynPLC
(1)   21/   21786 : 0133                		dc.w SonPLC_Walk26-SonicDynPLC
(1)   22/   21788 : 013E                		dc.w SonPLC_Walk31-SonicDynPLC
(1)   23/   2178A : 0147                		dc.w SonPLC_Walk32-SonicDynPLC
(1)   24/   2178C : 014C                		dc.w SonPLC_Walk33-SonicDynPLC
(1)   25/   2178E : 0151                		dc.w SonPLC_Walk34-SonicDynPLC
(1)   26/   21790 : 015A                		dc.w SonPLC_Walk35-SonicDynPLC
(1)   27/   21792 : 015F                		dc.w SonPLC_Walk36-SonicDynPLC
(1)   28/   21794 : 0166                		dc.w SonPLC_Walk41-SonicDynPLC
(1)   29/   21796 : 0173                		dc.w SonPLC_Walk42-SonicDynPLC
(1)   30/   21798 : 0180                		dc.w SonPLC_Walk43-SonicDynPLC
(1)   31/   2179A : 0189                		dc.w SonPLC_Walk44-SonicDynPLC
(1)   32/   2179C : 0194                		dc.w SonPLC_Walk45-SonicDynPLC
(1)   33/   2179E : 019D                		dc.w SonPLC_Walk46-SonicDynPLC
(1)   34/   217A0 : 01A8                		dc.w SonPLC_Run11-SonicDynPLC
(1)   35/   217A2 : 01AD                		dc.w SonPLC_Run12-SonicDynPLC
(1)   36/   217A4 : 01B2                		dc.w SonPLC_Run13-SonicDynPLC
(1)   37/   217A6 : 01B7                		dc.w SonPLC_Run14-SonicDynPLC
(1)   38/   217A8 : 01BC                		dc.w SonPLC_Run21-SonicDynPLC
(1)   39/   217AA : 01C5                		dc.w SonPLC_Run22-SonicDynPLC
(1)   40/   217AC : 01CC                		dc.w SonPLC_Run23-SonicDynPLC
(1)   41/   217AE : 01D5                		dc.w SonPLC_Run24-SonicDynPLC
(1)   42/   217B0 : 01DC                		dc.w SonPLC_Run31-SonicDynPLC
(1)   43/   217B2 : 01E1                		dc.w SonPLC_Run32-SonicDynPLC
(1)   44/   217B4 : 01E6                		dc.w SonPLC_Run33-SonicDynPLC
(1)   45/   217B6 : 01EB                		dc.w SonPLC_Run34-SonicDynPLC
(1)   46/   217B8 : 01F0                		dc.w SonPLC_Run41-SonicDynPLC
(1)   47/   217BA : 01F9                		dc.w SonPLC_Run42-SonicDynPLC
(1)   48/   217BC : 01FE                		dc.w SonPLC_Run43-SonicDynPLC
(1)   49/   217BE : 0207                		dc.w SonPLC_Run44-SonicDynPLC
(1)   50/   217C0 : 020C                		dc.w SonPLC_Roll1-SonicDynPLC
(1)   51/   217C2 : 020F                		dc.w SonPLC_Roll2-SonicDynPLC
(1)   52/   217C4 : 0212                		dc.w SonPLC_Roll3-SonicDynPLC
(1)   53/   217C6 : 0215                		dc.w SonPLC_Roll4-SonicDynPLC
(1)   54/   217C8 : 0218                		dc.w SonPLC_Roll5-SonicDynPLC
(1)   55/   217CA : 021B                		dc.w SonPLC_Warp1-SonicDynPLC
(1)   56/   217CC : 0220                		dc.w SonPLC_Warp2-SonicDynPLC
(1)   57/   217CE : 0223                		dc.w SonPLC_Warp3-SonicDynPLC
(1)   58/   217D0 : 0228                		dc.w SonPLC_Warp4-SonicDynPLC
(1)   59/   217D2 : 022B                		dc.w SonPLC_Stop1-SonicDynPLC
(1)   60/   217D4 : 0230                		dc.w SonPLC_Stop2-SonicDynPLC
(1)   61/   217D6 : 0239                		dc.w SonPLC_Duck-SonicDynPLC
(1)   62/   217D8 : 0242                		dc.w SonPLC_Balance1-SonicDynPLC
(1)   63/   217DA : 0249                		dc.w SonPLC_Balance2-SonicDynPLC
(1)   64/   217DC : 0250                		dc.w SonPLC_Float1-SonicDynPLC
(1)   65/   217DE : 0257                		dc.w SonPLC_Float2-SonicDynPLC
(1)   66/   217E0 : 025A                		dc.w SonPLC_Float3-SonicDynPLC
(1)   67/   217E2 : 0261                		dc.w SonPLC_Float4-SonicDynPLC
(1)   68/   217E4 : 0268                		dc.w SonPLC_Spring-SonicDynPLC
(1)   69/   217E6 : 026F                		dc.w SonPLC_Hang1-SonicDynPLC
(1)   70/   217E8 : 0278                		dc.w SonPLC_Hang2-SonicDynPLC
(1)   71/   217EA : 0281                		dc.w SonPLC_Leap1-SonicDynPLC
(1)   72/   217EC : 028C                		dc.w SonPLC_Leap2-SonicDynPLC
(1)   73/   217EE : 0297                		dc.w SonPLC_Push1-SonicDynPLC
(1)   74/   217F0 : 029C                		dc.w SonPLC_Push2-SonicDynPLC
(1)   75/   217F2 : 02A3                		dc.w SonPLC_Push3-SonicDynPLC
(1)   76/   217F4 : 02A8                		dc.w SonPLC_Push4-SonicDynPLC
(1)   77/   217F6 : 02AF                		dc.w SonPLC_Slide-SonicDynPLC
(1)   78/   217F8 : 02B4                		dc.w SonPLC_BblUnk-SonicDynPLC
(1)   79/   217FA : 02BB                		dc.w SonPLC_Death1-SonicDynPLC
(1)   80/   217FC : 02C2                		dc.w SonPLC_Drown-SonicDynPLC
(1)   81/   217FE : 02CD                		dc.w SonPLC_Burnt-SonicDynPLC
(1)   82/   21800 : 02D8                		dc.w SonPLC_Shrink1-SonicDynPLC
(1)   83/   21802 : 02DD                		dc.w SonPLC_Shrink2-SonicDynPLC
(1)   84/   21804 : 02E4                		dc.w SonPLC_Shrink3-SonicDynPLC
(1)   85/   21806 : 02E7                		dc.w SonPLC_Shrink4-SonicDynPLC
(1)   86/   21808 : 02EA                		dc.w SonPLC_Shrink5-SonicDynPLC
(1)   87/   2180A : 0250                		dc.w SonPLC_Float1-SonicDynPLC
(1)   88/   2180C : 025A                		dc.w SonPLC_Float3-SonicDynPLC
(1)   89/   2180E : 02ED                		dc.w SonPLC_Injury1-SonicDynPLC
(1)   90/   21810 : 02F4                		dc.w SonPLC_Bubble-SonicDynPLC
(1)   91/   21812 : 02FB                		dc.w SonPLC_Injury2-SonicDynPLC
(1)   92/   21814 : 00                  SonPLC_Blank:	dc.b 0
(1)   93/   21815 : 0420 0070 0320      SonPLC_Stand:	dc.b 4,	$20, 0,	$70, 3,	$20, $B, $20, $E
            2181B : 0B20 0E          
(1)   94/   2181E : 0350 1150 1720 1D   SonPLC_Wait1:	dc.b 3,	$50, $11, $50, $17, $20, $1D
(1)   95/   21825 : 0350 2050 1720 1D   SonPLC_Wait2:	dc.b 3,	$50, $20, $50, $17, $20, $1D
(1)   96/   2182C : 0350 2050 1720 26   SonPLC_Wait3:	dc.b 3,	$50, $20, $50, $17, $20, $26
(1)   97/   21833 : 0380 2920 0B20 0E   SonPLC_LookUp:	dc.b 3,	$80, $29, $20, $B, $20,	$E
(1)   98/   2183A : 0470 3250 3A50      SonPLC_Walk11:	dc.b 4,	$70, $32, $50, $3A, $50, $40, $10, $46
            21840 : 4010 46          
(1)   99/   21843 : 0270 32B0 48        SonPLC_Walk12:	dc.b 2,	$70, $32, $B0, $48
(1)  100/   21848 : 0250 5480 5A        SonPLC_Walk13:	dc.b 2,	$50, $54, $80, $5A
(1)  101/   2184D : 0450 5450 6350      SonPLC_Walk14:	dc.b 4,	$50, $54, $50, $63, $50, $69, $10, $6F
            21853 : 6910 6F          
(1)  102/   21856 : 0250 54B0 71        SonPLC_Walk15:	dc.b 2,	$50, $54, $B0, $71
(1)  103/   2185B : 0370 3230 7D50 81   SonPLC_Walk16:	dc.b 3,	$70, $32, $30, $7D, $50, $81
(1)  104/   21862 : 0550 8750 8D20      SonPLC_Walk21:	dc.b 5,	$50, $87, $50, $8D, $20, $93, $50, $96,	0, $9C
            21868 : 9350 9600 9C       
(1)  105/   2186D : 0650 8710 9D30      SonPLC_Walk22:	dc.b 6,	$50, $87, $10, $9D, $30, $9F, $50, $A3,	$30, $A9, 0, $AD
            21873 : 9F50 A330 A900 AD 
(1)  106/   2187A : 0450 AE10 B470      SonPLC_Walk23:	dc.b 4,	$50, $AE, $10, $B4, $70, $B6, $20, $BE
            21880 : B620 BE          
(1)  107/   21883 : 0550 C130 C770      SonPLC_Walk24:	dc.b 5,	$50, $C1, $30, $C7, $70, $CB, $20, $D3,	$10, $D6
            21889 : CB20 D310 D6       
(1)  108/   2188E : 0450 C110 D870      SonPLC_Walk25:	dc.b 4,	$50, $C1, $10, $D8, $70, $DA, $20, $E2
            21894 : DA20 E2          
(1)  109/   21897 : 0550 8710 9D00      SonPLC_Walk26:	dc.b 5,	$50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED
            2189D : 9370 E520 ED       
(1)  110/   218A2 : 0470 F050 F810      SonPLC_Walk31:	dc.b 4,	$70, $F0, $50, $F8, $10, $FE, $51, 0
            218A8 : FE51 00          
(1)  111/   218AB : 0270 F0B1 06        SonPLC_Walk32:	dc.b 2,	$70, $F0, $B1, 6
(1)  112/   218B0 : 0251 1281 18        SonPLC_Walk33:	dc.b 2,	$51, $12, $81, $18
(1)  113/   218B5 : 0451 1251 2111      SonPLC_Walk34:	dc.b 4,	$51, $12, $51, $21, $11, $27, $51, $29
            218BB : 2751 29          
(1)  114/   218BE : 0251 12B1 2F        SonPLC_Walk35:	dc.b 2,	$51, $12, $B1, $2F
(1)  115/   218C3 : 0370 F001 0681 3B   SonPLC_Walk36:	dc.b 3,	$70, $F0, 1, 6,	$81, $3B
(1)  116/   218CA : 0651 4411 4A11      SonPLC_Walk41:	dc.b 6,	$51, $44, $11, $4A, $11, $4C, $81, $4E,	1, $57,	1, $58
            218D0 : 4C81 4E01 5701 58 
(1)  117/   218D7 : 0651 4421 5911      SonPLC_Walk42:	dc.b 6,	$51, $44, $21, $59, $11, $5C, $11, $5E,	$81, $60, 1, $57
            218DD : 5C11 5E81 6001 57 
(1)  118/   218E4 : 0451 6911 6F81      SonPLC_Walk43:	dc.b 4,	$51, $69, $11, $6F, $81, $71, $11, $7A
            218EA : 7111 7A          
(1)  119/   218ED : 0551 7C21 8211      SonPLC_Walk44:	dc.b 5,	$51, $7C, $21, $82, $11, $85, $71, $87,	$21, $8F
            218F3 : 8571 8721 8F       
(1)  120/   218F8 : 0451 7C11 9281      SonPLC_Walk45:	dc.b 4,	$51, $7C, $11, $92, $81, $94, $11, $9D
            218FE : 9411 9D          
(1)  121/   21901 : 0551 4481 9F11      SonPLC_Walk46:	dc.b 5,	$51, $44, $81, $9F, $11, $5E, $11, $A8,	1, $57
            21907 : 5E11 A801 57       
(1)  122/   2190C : 0251 AAB1 B0        SonPLC_Run11:	dc.b 2,	$51, $AA, $B1, $B0
(1)  123/   21911 : 0250 54B1 BC        SonPLC_Run12:	dc.b 2,	$50, $54, $B1, $BC
(1)  124/   21916 : 0251 AAB1 C8        SonPLC_Run13:	dc.b 2,	$51, $AA, $B1, $C8
(1)  125/   2191B : 0250 54B1 D4        SonPLC_Run14:	dc.b 2,	$50, $54, $B1, $D4
(1)  126/   21920 : 0451 E011 E6B1      SonPLC_Run21:	dc.b 4,	$51, $E0, $11, $E6, $B1, $E8, 1, $F4
            21926 : E801 F4          
(1)  127/   21929 : 0351 F511 FBB1 FD   SonPLC_Run22:	dc.b 3,	$51, $F5, $11, $FB, $B1, $FD
(1)  128/   21930 : 0451 E012 09B2      SonPLC_Run23:	dc.b 4,	$51, $E0, $12, 9, $B2, $B, 1, $F4
            21936 : 0B01 F4          
(1)  129/   21939 : 0351 F511 FBB2 17   SonPLC_Run24:	dc.b 3,	$51, $F5, $11, $FB, $B2, $17
(1)  130/   21940 : 0252 23B2 29        SonPLC_Run31:	dc.b 2,	$52, $23, $B2, $29
(1)  131/   21945 : 0251 12B2 35        SonPLC_Run32:	dc.b 2,	$51, $12, $B2, $35
(1)  132/   2194A : 0252 23B2 41        SonPLC_Run33:	dc.b 2,	$52, $23, $B2, $41
(1)  133/   2194F : 0251 12B2 4D        SonPLC_Run34:	dc.b 2,	$51, $12, $B2, $4D
(1)  134/   21954 : 0452 5912 5FB2      SonPLC_Run41:	dc.b 4,	$52, $59, $12, $5F, $B2, $61, 2, $6D
            2195A : 6102 6D          
(1)  135/   2195D : 0272 6EB2 76        SonPLC_Run42:	dc.b 2,	$72, $6E, $B2, $76
(1)  136/   21962 : 0452 5912 82B2      SonPLC_Run43:	dc.b 4,	$52, $59, $12, $82, $B2, $84, 2, $6D
            21968 : 8402 6D          
(1)  137/   2196B : 0272 6EB2 90        SonPLC_Run44:	dc.b 2,	$72, $6E, $B2, $90
(1)  138/   21970 : 01F2 9C             SonPLC_Roll1:	dc.b 1,	$F2, $9C
(1)  139/   21973 : 01F2 AC             SonPLC_Roll2:	dc.b 1,	$F2, $AC
(1)  140/   21976 : 01F2 BC             SonPLC_Roll3:	dc.b 1,	$F2, $BC
(1)  141/   21979 : 01F2 CC             SonPLC_Roll4:	dc.b 1,	$F2, $CC
(1)  142/   2197C : 01F2 DC             SonPLC_Roll5:	dc.b 1,	$F2, $DC
(1)  143/   2197F : 02B2 EC22 F8        SonPLC_Warp1:	dc.b 2,	$B2, $EC, $22, $F8
(1)  144/   21984 : 01F2 FB             SonPLC_Warp2:	dc.b 1,	$F2, $FB
(1)  145/   21987 : 02B3 0B23 17        SonPLC_Warp3:	dc.b 2,	$B3, $B, $23, $17
(1)  146/   2198C : 01F3 1A             SonPLC_Warp4:	dc.b 1,	$F3, $1A
(1)  147/   2198F : 0253 2AB3 30        SonPLC_Stop1:	dc.b 2,	$53, $2A, $B3, $30
(1)  148/   21994 : 0453 3C73 4213      SonPLC_Stop2:	dc.b 4,	$53, $3C, $73, $42, $13, $4A, 3, $4C
            2199A : 4A03 4C          
(1)  149/   2199D : 0413 4D73 4F23      SonPLC_Duck:	dc.b 4,	$13, $4D, $73, $4F, $23, $57, 3, $5A
            219A3 : 5703 5A          
(1)  150/   219A6 : 0323 5B23 5EF3 61   SonPLC_Balance1:dc.b 3,	$23, $5B, $23, $5E, $F3, $61
(1)  151/   219AD : 03B3 7173 7D00 71   SonPLC_Balance2:dc.b 3,	$B3, $71, $73, $7D, 0, $71
(1)  152/   219B4 : 0373 8533 8D23 91   SonPLC_Float1:	dc.b 3,	$73, $85, $33, $8D, $23, $91
(1)  153/   219BB : 0183 94             SonPLC_Float2:	dc.b 1,	$83, $94
(1)  154/   219BE : 0373 9D03 A533 A6   SonPLC_Float3:	dc.b 3,	$73, $9D, 3, $A5, $33, $A6
(1)  155/   219C5 : 0373 AA33 B223 B6   SonPLC_Float4:	dc.b 3,	$73, $AA, $33, $B2, $23, $B6
(1)  156/   219CC : 03B3 B913 C503 C7   SonPLC_Spring:	dc.b 3,	$B3, $B9, $13, $C5, 3, $C7
(1)  157/   219D3 : 04B3 C833 D403      SonPLC_Hang1:	dc.b 4,	$B3, $C8, $33, $D4, 3, $D8, 3, $D9
            219D9 : D803 D9          
(1)  158/   219DC : 04B3 DA33 E603      SonPLC_Hang2:	dc.b 4,	$B3, $DA, $33, $E6, 3, $EA, 3, $EB
            219E2 : EA03 EB          
(1)  159/   219E5 : 0583 EC13 F553      SonPLC_Leap1:	dc.b 5,	$83, $EC, $13, $F5, $53, $F7, $13, $FD,	3, $FF
            219EB : F713 FD03 FF       
(1)  160/   219F0 : 0584 0014 0953      SonPLC_Leap2:	dc.b 5,	$84, 0,	$14, 9,	$53, $F7, $13, $FD, 3, $FF
            219F6 : F713 FD03 FF       
(1)  161/   219FB : 0284 0B74 14        SonPLC_Push1:	dc.b 2,	$84, $B, $74, $14
(1)  162/   21A00 : 0384 1C24 2514 28   SonPLC_Push2:	dc.b 3,	$84, $1C, $24, $25, $14, $28
(1)  163/   21A07 : 0284 2A74 33        SonPLC_Push3:	dc.b 2,	$84, $2A, $74, $33
(1)  164/   21A0C : 0384 1C24 3B14 3E   SonPLC_Push4:	dc.b 3,	$84, $1C, $24, $3B, $14, $3E
(1)  165/   21A13 : 0254 40B4 46        SonPLC_Slide:	dc.b 2,	$54, $40, $B4, $46
(1)  166/   21A18 : 0384 5234 5B04 5F   SonPLC_BblUnk:	dc.b 3,	$84, $52, $34, $5B, 4, $5F
(1)  167/   21A1F : 0374 6014 68B4 6A   SonPLC_Death1:	dc.b 3,	$74, $60, $14, $68, $B4, $6A
(1)  168/   21A26 : 0574 7614 7E54      SonPLC_Drown:	dc.b 5,	$74, $76, $14, $7E, $54, $80, $34, $86,	4, $8A
            21A2C : 8034 8604 8A       
(1)  169/   21A31 : 0574 8B14 7E54      SonPLC_Burnt:	dc.b 5,	$74, $8B, $14, $7E, $54, $93, $34, $86,	4, $8A
            21A37 : 9334 8604 8A       
(1)  170/   21A3C : 0224 99F4 9C        SonPLC_Shrink1:	dc.b 2,	$24, $99, $F4, $9C
(1)  171/   21A41 : 0324 ACB4 AF24 BB   SonPLC_Shrink2:	dc.b 3,	$24, $AC, $B4, $AF, $24, $BB
(1)  172/   21A48 : 01B4 BE             SonPLC_Shrink3:	dc.b 1,	$B4, $BE
(1)  173/   21A4B : 0154 CA             SonPLC_Shrink4:	dc.b 1,	$54, $CA
(1)  174/   21A4E : 0114 D0             SonPLC_Shrink5:	dc.b 1,	$14, $D0
(1)  175/   21A51 : 03B4 D214 DE34 E0   SonPLC_Injury1:	dc.b 3,	$B4, $D2, $14, $DE, $34, $E0
(1)  176/   21A58 : 0354 E4B4 EA10 6D   SonPLC_Bubble:	dc.b 3,	$54, $E4, $B4, $EA, $10, $6D
(1)  177/   21A5F : 02F4 F625 06        SonPLC_Injury2:	dc.b 2,	$F4, $F6, $25, 6
(1)  178/   21A64 : (MACRO)              		even
   37794/   21A64 :                     
   37795/   21A64 :                     ; ---------------------------------------------------------------------------
   37796/   21A64 :                     ; Uncompressed graphics	- Sonic
   37797/   21A64 :                     ; ---------------------------------------------------------------------------
   37798/   21A64 :                     Art_Sonic:	binclude	"_binary-files/artunc/sonic.bin"	; Sonic
   37799/   2BB84 : (MACRO)              		even
   37800/   2BB84 :                     ; ---------------------------------------------------------------------------
   37801/   2BB84 :                     ; Compressed graphics - various
   37802/   2BB84 :                     ; ---------------------------------------------------------------------------
   37803/   2BB84 :                     Nem_Smoke:	binclude	"_binary-files/artnem/xxxsmoke.bin"	; unused smoke
   37804/   2BC88 : (MACRO)              		even
   37805/   2BC88 :                     Nem_SyzSparkle:	binclude	"_binary-files/artnem/xxxstars.bin"	; unused stars
   37806/   2BCC2 : (MACRO)              		even
   37807/   2BCC2 :                     Nem_Shield:	binclude	"_binary-files/artnem/shield.bin"	; shield
   37808/   2BE58 : (MACRO)              		even
   37809/   2BE58 :                     Nem_Stars:	binclude	"_binary-files/artnem/invstars.bin"	; invincibility stars
   37810/   2BFA0 : (MACRO)              		even
   37811/   2BFA0 :                     Nem_LzSonic:	binclude	"_binary-files/artnem/xxxlzson.bin"	; unused LZ Sonic holding his breath
   37812/   2C0AA : (MACRO)              		even
   37813/   2C0AA :                     Nem_UnkFire:	binclude	"_binary-files/artnem/xxxfire.bin"	; unused fireball
   37814/   2C0FC : (MACRO)              		even
   37815/   2C0FC :                     Nem_Warp:	binclude	"_binary-files/artnem/xxxflash.bin"	; unused entry to special stage flash
   37816/   2C344 : (MACRO)              		even
   37817/   2C344 :                     Nem_Goggle:	binclude	"_binary-files/artnem/xxxgoggl.bin"	; unused goggles
   37818/   2C4CA : (MACRO)              		even
   37819/   2C4CA :                     ; ---------------------------------------------------------------------------
   37820/   2C4CA :                     ; Sprite mappings - walls of the special stage
   37821/   2C4CA :                     ; ---------------------------------------------------------------------------
   37822/   2C4CA :                     Map_SSWalls:
   37823/   2C4CA :                     	include "_mappings/SSwalls.asm"
(1)    1/   2C4CA :                     ; ---------------------------------------------------------------------------
(1)    2/   2C4CA :                     ; Sprite mappings - walls of the special stage
(1)    3/   2C4CA :                     ; ---------------------------------------------------------------------------
(1)    4/   2C4CA : 0020 0026           		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
(1)    5/   2C4CE : 002C 0032           		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
(1)    6/   2C4D2 : 0038 003E           		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
(1)    7/   2C4D6 : 0044 004A           		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
(1)    8/   2C4DA : 0050 0056           		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
(1)    9/   2C4DE : 005C 0062           		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
(1)   10/   2C4E2 : 0068 006E           		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
(1)   11/   2C4E6 : 0074 007A           		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
(1)   12/   2C4EA : 01                  byte_2C584:	dc.b 1
(1)   13/   2C4EB : F40A 0000 F4        		dc.b $F4, $A, 0, 0, $F4
(1)   14/   2C4F0 : 01                  byte_2C58A:	dc.b 1
(1)   15/   2C4F1 : F00F 0009 F0        		dc.b $F0, $F, 0, 9, $F0
(1)   16/   2C4F6 : 01                  byte_2C590:	dc.b 1
(1)   17/   2C4F7 : F00F 0019 F0        		dc.b $F0, $F, 0, $19, $F0
(1)   18/   2C4FC : 01                  byte_2C596:	dc.b 1
(1)   19/   2C4FD : F00F 0029 F0        		dc.b $F0, $F, 0, $29, $F0
(1)   20/   2C502 : 01                  byte_2C59C:	dc.b 1
(1)   21/   2C503 : F00F 0039 F0        		dc.b $F0, $F, 0, $39, $F0
(1)   22/   2C508 : 01                  byte_2C5A2:	dc.b 1
(1)   23/   2C509 : F00F 0049 F0        		dc.b $F0, $F, 0, $49, $F0
(1)   24/   2C50E : 01                  byte_2C5A8:	dc.b 1
(1)   25/   2C50F : F00F 0059 F0        		dc.b $F0, $F, 0, $59, $F0
(1)   26/   2C514 : 01                  byte_2C5AE:	dc.b 1
(1)   27/   2C515 : F00F 0069 F0        		dc.b $F0, $F, 0, $69, $F0
(1)   28/   2C51A : 01                  byte_2C5B4:	dc.b 1
(1)   29/   2C51B : F00F 0079 F0        		dc.b $F0, $F, 0, $79, $F0
(1)   30/   2C520 : 01                  byte_2C5BA:	dc.b 1
(1)   31/   2C521 : F00F 0089 F0        		dc.b $F0, $F, 0, $89, $F0
(1)   32/   2C526 : 01                  byte_2C5C0:	dc.b 1
(1)   33/   2C527 : F00F 0099 F0        		dc.b $F0, $F, 0, $99, $F0
(1)   34/   2C52C : 01                  byte_2C5C6:	dc.b 1
(1)   35/   2C52D : F00F 00A9 F0        		dc.b $F0, $F, 0, $A9, $F0
(1)   36/   2C532 : 01                  byte_2C5CC:	dc.b 1
(1)   37/   2C533 : F00F 00B9 F0        		dc.b $F0, $F, 0, $B9, $F0
(1)   38/   2C538 : 01                  byte_2C5D2:	dc.b 1
(1)   39/   2C539 : F00F 00C9 F0        		dc.b $F0, $F, 0, $C9, $F0
(1)   40/   2C53E : 01                  byte_2C5D8:	dc.b 1
(1)   41/   2C53F : F00F 00D9 F0        		dc.b $F0, $F, 0, $D9, $F0
(1)   42/   2C544 : 01                  byte_2C5DE:	dc.b 1
(1)   43/   2C545 : F00F 00E9 F0        		dc.b $F0, $F, 0, $E9, $F0
(1)   44/   2C54A : (MACRO)              		even
   37824/   2C54A :                     ; ---------------------------------------------------------------------------
   37825/   2C54A :                     ; Compressed graphics - special stage
   37826/   2C54A :                     ; ---------------------------------------------------------------------------
   37827/   2C54A :                     Nem_SSWalls:	binclude	"_binary-files/artnem/sswalls.bin"	; special stage walls
   37828/   2CE82 : (MACRO)              		even
   37829/   2CE82 :                     Eni_SSBg1:	binclude	"_tilemaps/ssbg1.bin"	; special stage background (mappings)
   37830/   2CFB6 : (MACRO)              		even
   37831/   2CFB6 :                     Nem_SSBgFish:	binclude	"_binary-files/artnem/ssbg1.bin"	; special stage birds and fish background
   37832/   2DC46 : (MACRO)              		even
   37833/   2DC46 :                     Eni_SSBg2:	binclude	"_tilemaps/ssbg2.bin"	; special stage background (mappings)
   37834/   2DF46 : (MACRO)              		even
   37835/   2DF46 :                     Nem_SSBgCloud:	binclude	"_binary-files/artnem/ssbg2.bin"	; special stage clouds background
   37836/   2E43A : (MACRO)              		even
   37837/   2E43A :                     Nem_SSGOAL:	binclude	"_binary-files/artnem/ssgoal.bin"	; special stage GOAL block
   37838/   2E528 : (MACRO)              		even
   37839/   2E528 :                     Nem_SSRBlock:	binclude	"_binary-files/artnem/ssr.bin"		; special stage R block
   37840/   2E5F8 : (MACRO)              		even
   37841/   2E5F8 :                     Nem_SS1UpBlock:	binclude	"_binary-files/artnem/ss1up.bin"	; special stage 1UP block
   37842/   2E6EE : (MACRO)              		even
   37843/   2E6EE :                     Nem_SSEmStars:	binclude	"_binary-files/artnem/ssemstar.bin"	; special stage stars from a collected emerald
   37844/   2E74C : (MACRO)              		even
   37845/   2E74C :                     Nem_SSRedWhite:	binclude	"_binary-files/artnem/ssredwhi.bin"	; special stage red/white block
   37846/   2E7DE : (MACRO)              		even
   37847/   2E7DE :                     Nem_SSZone1:	binclude	"_binary-files/artnem/sszone1.bin"	; special stage ZONE1 block
   37848/   2E8A0 : (MACRO)              		even
   37849/   2E8A0 :                     Nem_SSZone2:	binclude	"_binary-files/artnem/sszone2.bin"	; ZONE2 block
   37850/   2E96E : (MACRO)              		even
   37851/   2E96E :                     Nem_SSZone3:	binclude	"_binary-files/artnem/sszone3.bin"	; ZONE3 block
   37852/   2EA3A : (MACRO)              		even
   37853/   2EA3A :                     Nem_SSZone4:	binclude	"_binary-files/artnem/sszone4.bin"	; ZONE4 block
   37854/   2EB02 : (MACRO)              		even
   37855/   2EB02 :                     Nem_SSZone5:	binclude	"_binary-files/artnem/sszone5.bin"	; ZONE5 block
   37856/   2EBCC : (MACRO)              		even
   37857/   2EBCC :                     Nem_SSZone6:	binclude	"_binary-files/artnem/sszone6.bin"	; ZONE6 block
   37858/   2EC9C : (MACRO)              		even
   37859/   2EC9C :                     Nem_SSUpDown:	binclude	"_binary-files/artnem/ssupdown.bin"	; special stage UP/DOWN block
   37860/   2EE90 : (MACRO)              		even
   37861/   2EE90 :                     Nem_SSEmerald:	binclude	"_binary-files/artnem/ssemeral.bin"	; special stage chaos emeralds
   37862/   2EFF8 : (MACRO)              		even
   37863/   2EFF8 :                     Nem_SSGhost:	binclude	"_binary-files/artnem/ssghost.bin"	; special stage ghost block
   37864/   2F0A8 : (MACRO)              		even
   37865/   2F0A8 :                     Nem_SSWBlock:	binclude	"_binary-files/artnem/ssw.bin"		; special stage W block
   37866/   2F182 : (MACRO)              		even
   37867/   2F182 :                     Nem_SSGlass:	binclude	"_binary-files/artnem/ssglass.bin"	; special stage destroyable glass block
   37868/   2F206 : (MACRO)              		even
   37869/   2F206 :                     Nem_ResultEm:	binclude	"_binary-files/artnem/ssresems.bin"	; chaos emeralds on special stage results screen
   37870/   2F384 : (MACRO)              		even
   37871/   2F384 :                     ; ---------------------------------------------------------------------------
   37872/   2F384 :                     ; Compressed graphics - GHZ stuff
   37873/   2F384 :                     ; ---------------------------------------------------------------------------
   37874/   2F384 :                     Nem_Stalk:	binclude	"_binary-files/artnem/ghzstalk.bin"	; GHZ flower stalk
   37875/   2F3CE : (MACRO)              		even
   37876/   2F3CE :                     Nem_Swing:	binclude	"_binary-files/artnem/ghzswing.bin"	; GHZ swinging platform
   37877/   2F4E8 : (MACRO)              		even
   37878/   2F4E8 :                     Nem_Bridge:	binclude	"_binary-files/artnem/ghzbridg.bin"	; GHZ bridge
   37879/   2F5D4 : (MACRO)              		even
   37880/   2F5D4 :                     Nem_GhzUnkBlock:binclude	"_binary-files/artnem/xxxghzbl.bin"	; unused GHZ block
   37881/   2F61C : (MACRO)              		even
   37882/   2F61C :                     Nem_Ball:	binclude	"_binary-files/artnem/ghzball.bin"	; GHZ giant ball
   37883/   2F7BA : (MACRO)              		even
   37884/   2F7BA :                     Nem_Spikes:	binclude	"_binary-files/artnem/spikes.bin"	; spikes
   37885/   2F836 : (MACRO)              		even
   37886/   2F836 :                     Nem_GhzLog:	binclude	"_binary-files/artnem/xxxghzlo.bin"	; unused GHZ log
   37887/   2FA4A : (MACRO)              		even
   37888/   2FA4A :                     Nem_SpikePole:	binclude	"_binary-files/artnem/ghzlog.bin"	; GHZ spiked log
   37889/   2FB76 : (MACRO)              		even
   37890/   2FB76 :                     Nem_PplRock:	binclude	"_binary-files/artnem/ghzrock.bin"	; GHZ purple rock
   37891/   2FCA4 : (MACRO)              		even
   37892/   2FCA4 :                     Nem_GhzWall1:	binclude	"_binary-files/artnem/ghzwall1.bin"	; GHZ destroyable wall
   37893/   2FD42 : (MACRO)              		even
   37894/   2FD42 :                     Nem_GhzWall2:	binclude	"_binary-files/artnem/ghzwall2.bin"	; GHZ normal wall
   37895/   2FDA2 : (MACRO)              		even
   37896/   2FDA2 :                     ; ---------------------------------------------------------------------------
   37897/   2FDA2 :                     ; Compressed graphics - LZ stuff
   37898/   2FDA2 :                     ; ---------------------------------------------------------------------------
   37899/   2FDA2 :                     Nem_Water:	binclude	"_binary-files/artnem/lzwater.bin"	; LZ water surface
   37900/   2FEC6 : (MACRO)              		even
   37901/   2FEC6 :                     Nem_Splash:	binclude	"_binary-files/artnem/lzsplash.bin"	; LZ waterfalls and splashes
   37902/   306BA : (MACRO)              		even
   37903/   306BA :                     Nem_LzSpikeBall:binclude	"_binary-files/artnem/lzspball.bin"	; LZ spiked ball on chain
   37904/   3083A : (MACRO)              		even
   37905/   3083A :                     Nem_FlapDoor:	binclude	"_binary-files/artnem/lzflapdo.bin"	; LZ flapping door
   37906/   309A4 : (MACRO)              		even
   37907/   309A4 :                     Nem_Bubbles:	binclude	"_binary-files/artnem/lzbubble.bin"	; LZ bubbles and countdown numbers
   37908/   30FFA : (MACRO)              		even
   37909/   30FFA :                     Nem_LzBlock3:	binclude	"_binary-files/artnem/lzblock3.bin"	; LZ 32x16 block
   37910/   310B0 : (MACRO)              		even
   37911/   310B0 :                     Nem_LzDoor1:	binclude	"_binary-files/artnem/lzvdoor.bin"	; LZ vertical door
   37912/   31152 : (MACRO)              		even
   37913/   31152 :                     Nem_Harpoon:	binclude	"_binary-files/artnem/lzharpoo.bin"	; LZ harpoon
   37914/   312AE : (MACRO)              		even
   37915/   312AE :                     Nem_LzPole:	binclude	"_binary-files/artnem/lzpole.bin"	; LZ pole that breaks
   37916/   31312 : (MACRO)              		even
   37917/   31312 :                     Nem_LzDoor2:	binclude	"_binary-files/artnem/lzhdoor.bin"	; LZ large horizontal door
   37918/   31464 : (MACRO)              		even
   37919/   31464 :                     Nem_LzWheel:	binclude	"_binary-files/artnem/lzwheel.bin"	; LZ wheel from corner of conveyor belt
   37920/   31946 : (MACRO)              		even
   37921/   31946 :                     Nem_Gargoyle:	binclude	"_binary-files/artnem/lzgargoy.bin"	; LZ gargoyle head and spitting fire
   37922/   31AB6 : (MACRO)              		even
   37923/   31AB6 :                     Nem_LzBlock2:	binclude	"_binary-files/artnem/lzblock2.bin"	; LZ blocks
   37924/   31D6E : (MACRO)              		even
   37925/   31D6E :                     Nem_LzPlatfm:	binclude	"_binary-files/artnem/lzptform.bin"	; LZ rising platforms
   37926/   31EA6 : (MACRO)              		even
   37927/   31EA6 :                     Nem_Cork:	binclude	"_binary-files/artnem/lzcork.bin"	; LZ cork block
   37928/   31FD0 : (MACRO)              		even
   37929/   31FD0 :                     Nem_LzBlock1:	binclude	"_binary-files/artnem/lzblock1.bin"	; LZ 32x32 block
   37930/   320E0 : (MACRO)              		even
   37931/   320E0 :                     ; ---------------------------------------------------------------------------
   37932/   320E0 :                     ; Compressed graphics - MZ stuff
   37933/   320E0 :                     ; ---------------------------------------------------------------------------
   37934/   320E0 :                     Nem_MzMetal:	binclude	"_binary-files/artnem/mzmetal.bin"	; MZ metal blocks
   37935/   3236E : (MACRO)              		even
   37936/   3236E :                     Nem_MzSwitch:	binclude	"_binary-files/artnem/mzswitch.bin"	; MZ switch
   37937/   3242C : (MACRO)              		even
   37938/   3242C :                     Nem_MzGlass:	binclude	"_binary-files/artnem/mzglassy.bin"	; MZ green glassy block
   37939/   324E4 : (MACRO)              		even
   37940/   324E4 :                     Nem_GhzGrass:	binclude	"_binary-files/artnem/xxxgrass.bin"	; unused grass (GHZ or MZ?)
   37941/   32538 : (MACRO)              		even
   37942/   32538 :                     Nem_MzFire:	binclude	"_binary-files/artnem/mzfire.bin"	; MZ fireballs
   37943/   32816 : (MACRO)              		even
   37944/   32816 :                     Nem_Lava:	binclude	"_binary-files/artnem/mzlava.bin"	; MZ lava
   37945/   3312C : (MACRO)              		even
   37946/   3312C :                     Nem_MzBlock:	binclude	"_binary-files/artnem/mzblock.bin"	; MZ green pushable block
   37947/   33290 : (MACRO)              		even
   37948/   33290 :                     Nem_MzUnkBlock:	binclude	"_binary-files/artnem/xxxmzblo.bin"	; MZ unused background block
   37949/   33318 : (MACRO)              		even
   37950/   33318 :                     ; ---------------------------------------------------------------------------
   37951/   33318 :                     ; Compressed graphics - SLZ stuff
   37952/   33318 :                     ; ---------------------------------------------------------------------------
   37953/   33318 :                     Nem_Seesaw:	binclude	"_binary-files/artnem/slzseesa.bin"	; SLZ seesaw
   37954/   33554 : (MACRO)              		even
   37955/   33554 :                     Nem_SlzSpike:	binclude	"_binary-files/artnem/slzspike.bin"	; SLZ spikeball that sits on a seesaw
   37956/   3369A : (MACRO)              		even
   37957/   3369A :                     Nem_Fan:	binclude	"_binary-files/artnem/slzfan.bin"	; SLZ fan
   37958/   338DE : (MACRO)              		even
   37959/   338DE :                     Nem_SlzWall:	binclude	"_binary-files/artnem/slzwall.bin"	; SLZ smashable wall
   37960/   33940 : (MACRO)              		even
   37961/   33940 :                     Nem_Pylon:	binclude	"_binary-files/artnem/slzpylon.bin"	; SLZ foreground pylon
   37962/   33A22 : (MACRO)              		even
   37963/   33A22 :                     Nem_SlzSwing:	binclude	"_binary-files/artnem/slzswing.bin"	; SLZ swinging platform
   37964/   33C04 : (MACRO)              		even
   37965/   33C04 :                     Nem_SlzBlock:	binclude	"_binary-files/artnem/slzblock.bin"	; SLZ 32x32 block
   37966/   33D10 : (MACRO)              		even
   37967/   33D10 :                     Nem_SlzCannon:	binclude	"_binary-files/artnem/slzcanno.bin"	; SLZ fireball launcher cannon
   37968/   33DB4 : (MACRO)              		even
   37969/   33DB4 :                     ; ---------------------------------------------------------------------------
   37970/   33DB4 :                     ; Compressed graphics - SYZ stuff
   37971/   33DB4 :                     ; ---------------------------------------------------------------------------
   37972/   33DB4 :                     Nem_Bumper:	binclude	"_binary-files/artnem/syzbumpe.bin"	; SYZ bumper
   37973/   33F1E : (MACRO)              		even
   37974/   33F1E :                     Nem_SyzSpike2:	binclude	"_binary-files/artnem/syzsspik.bin"	; SYZ small spikeball
   37975/   33F80 : (MACRO)              		even
   37976/   33F80 :                     Nem_LzSwitch:	binclude	"_binary-files/artnem/switch.bin"	; LZ/SYZ/SBZ switch
   37977/   34062 : (MACRO)              		even
   37978/   34062 :                     Nem_SyzSpike1:	binclude	"_binary-files/artnem/syzlspik.bin"	; SYZ/SBZ large spikeball
   37979/   342F0 : (MACRO)              		even
   37980/   342F0 :                     ; ---------------------------------------------------------------------------
   37981/   342F0 :                     ; Compressed graphics - SBZ stuff
   37982/   342F0 :                     ; ---------------------------------------------------------------------------
   37983/   342F0 :                     Nem_SbzWheel1:	binclude	"_binary-files/artnem/sbzwhee1.bin"	; SBZ spot on rotating wheel that Sonic runs around
   37984/   34344 : (MACRO)              		even
   37985/   34344 :                     Nem_SbzWheel2:	binclude	"_binary-files/artnem/sbzwhee2.bin"	; SBZ wheel that grabs Sonic
   37986/   345E0 : (MACRO)              		even
   37987/   345E0 :                     Nem_Cutter:	binclude	"_binary-files/artnem/sbzcutte.bin"	; SBZ pizza cutter
   37988/   347E4 : (MACRO)              		even
   37989/   347E4 :                     Nem_Stomper:	binclude	"_binary-files/artnem/sbzstomp.bin"	; SBZ stomper
   37990/   34982 : (MACRO)              		even
   37991/   34982 :                     Nem_SpinPform:	binclude	"_binary-files/artnem/sbzpform.bin"	; SBZ spinning platform
   37992/   34CB2 : (MACRO)              		even
   37993/   34CB2 :                     Nem_TrapDoor:	binclude	"_binary-files/artnem/sbztrapd.bin"	; SBZ trapdoor
   37994/   34E90 : (MACRO)              		even
   37995/   34E90 :                     Nem_SbzFloor:	binclude	"_binary-files/artnem/sbzfloor.bin"	; SBZ collapsing floor
   37996/   34EE8 : (MACRO)              		even
   37997/   34EE8 :                     Nem_Electric:	binclude	"_binary-files/artnem/sbzshock.bin"	; SBZ electric shock orb
   37998/   35068 : (MACRO)              		even
   37999/   35068 :                     Nem_SbzBlock:	binclude	"_binary-files/artnem/sbzvanis.bin"	; SBZ vanishing block
   38000/   35166 : (MACRO)              		even
   38001/   35166 :                     Nem_FlamePipe:	binclude	"_binary-files/artnem/sbzflame.bin"	; SBZ flaming pipe
   38002/   352F2 : (MACRO)              		even
   38003/   352F2 :                     Nem_SbzDoor1:	binclude	"_binary-files/artnem/sbzvdoor.bin"	; SBZ small vertical door
   38004/   35342 : (MACRO)              		even
   38005/   35342 :                     Nem_SlideFloor:	binclude	"_binary-files/artnem/sbzslide.bin"	; SBZ floor that slides away
   38006/   3539A : (MACRO)              		even
   38007/   3539A :                     Nem_SbzDoor2:	binclude	"_binary-files/artnem/sbzhdoor.bin"	; SBZ large horizontal door
   38008/   35496 : (MACRO)              		even
   38009/   35496 :                     Nem_Girder:	binclude	"_binary-files/artnem/sbzgirde.bin"	; SBZ crushing girder
   38010/   355AC : (MACRO)              		even
   38011/   355AC :                     ; ---------------------------------------------------------------------------
   38012/   355AC :                     ; Compressed graphics - enemies
   38013/   355AC :                     ; ---------------------------------------------------------------------------
   38014/   355AC :                     Nem_BallHog:	binclude	"_binary-files/artnem/ballhog.bin"	; ball hog
   38015/   3596C : (MACRO)              		even
   38016/   3596C :                     Nem_Crabmeat:	binclude	"_binary-files/artnem/crabmeat.bin"	; crabmeat
   38017/   35E5A : (MACRO)              		even
   38018/   35E5A :                     Nem_Buzz:	binclude	"_binary-files/artnem/buzzbomb.bin"	; buzz bomber
   38019/   36200 : (MACRO)              		even
   38020/   36200 :                     Nem_UnkExplode:	binclude	"_binary-files/artnem/xxxexplo.bin"	; unused explosion
   38021/   363E8 : (MACRO)              		even
   38022/   363E8 :                     Nem_Burrobot:	binclude	"_binary-files/artnem/burrobot.bin"	; burrobot
   38023/   36AD2 : (MACRO)              		even
   38024/   36AD2 :                     Nem_Chopper:	binclude	"_binary-files/artnem/chopper.bin"	; chopper
   38025/   36D3A : (MACRO)              		even
   38026/   36D3A :                     Nem_Jaws:	binclude	"_binary-files/artnem/jaws.bin"		; jaws
   38027/   36FC4 : (MACRO)              		even
   38028/   36FC4 :                     Nem_Roller:	binclude	"_binary-files/artnem/roller.bin"	; roller
   38029/   374E8 : (MACRO)              		even
   38030/   374E8 :                     Nem_Motobug:	binclude	"_binary-files/artnem/motobug.bin"	; moto bug
   38031/   37772 : (MACRO)              		even
   38032/   37772 :                     Nem_Newtron:	binclude	"_binary-files/artnem/newtron.bin"	; newtron
   38033/   37D90 : (MACRO)              		even
   38034/   37D90 :                     Nem_Yadrin:	binclude	"_binary-files/artnem/yadrin.bin"	; yadrin
   38035/   38178 : (MACRO)              		even
   38036/   38178 :                     Nem_Basaran:	binclude	"_binary-files/artnem/basaran.bin"	; basaran
   38037/   38474 : (MACRO)              		even
   38038/   38474 :                     Nem_Splats:	binclude	"_binary-files/artnem/splats.bin"	; splats
   38039/   386BC : (MACRO)              		even
   38040/   386BC :                     Nem_Bomb:	binclude	"_binary-files/artnem/bomb.bin"		; bomb
   38041/   38954 : (MACRO)              		even
   38042/   38954 :                     Nem_Orbinaut:	binclude	"_binary-files/artnem/orbinaut.bin"	; orbinaut
   38043/   38B32 : (MACRO)              		even
   38044/   38B32 :                     Nem_Cater:	binclude	"_binary-files/artnem/caterkil.bin"	; caterkiller
   38045/   38CC0 : (MACRO)              		even
   38046/   38CC0 :                     ; ---------------------------------------------------------------------------
   38047/   38CC0 :                     ; Compressed graphics - various
   38048/   38CC0 :                     ; ---------------------------------------------------------------------------
   38049/   38CC0 :                     Nem_TitleCard:	binclude	"_binary-files/artnem/ttlcards.bin"	; title cards
   38050/   392CE : (MACRO)              		even
   38051/   392CE :                     Nem_Hud:	binclude	"_binary-files/artnem/hud.bin"		; HUD (rings, time, score)
   38052/   393C4 : (MACRO)              		even
   38053/   393C4 :                     Nem_Lives:	binclude	"_binary-files/artnem/lifeicon.bin"	; life counter icon
   38054/   394CA : (MACRO)              		even
   38055/   394CA :                     Nem_Ring:	binclude	"_binary-files/artnem/rings.bin"	; rings
   38056/   395BE : (MACRO)              		even
   38057/   395BE :                     Nem_Monitors:	binclude	"_binary-files/artnem/monitors.bin"	; monitors
   38058/   39A1E : (MACRO)              		even
   38059/   39A1E :                     Nem_Explode:	binclude	"_binary-files/artnem/explosio.bin"	; explosion
   38060/   3A084 : (MACRO)              		even
   38061/   3A084 :                     Nem_Points:	binclude	"_binary-files/artnem/points.bin"	; points from destroyed enemy or object
   38062/   3A134 : (MACRO)              		even
   38063/   3A134 :                     Nem_GameOver:	binclude	"_binary-files/artnem/gameover.bin"	; game over / time over
   38064/   3A2C6 : (MACRO)              		even
   38065/   3A2C6 :                     Nem_HSpring:	binclude	"_binary-files/artnem/springh.bin"	; horizontal spring
   38066/   3A3C8 : (MACRO)              		even
   38067/   3A3C8 :                     Nem_VSpring:	binclude	"_binary-files/artnem/springv.bin"	; vertical spring
   38068/   3A4A4 : (MACRO)              		even
   38069/   3A4A4 :                     Nem_SignPost:	binclude	"_binary-files/artnem/signpost.bin"	; end of level signpost
   38070/   3A920 : (MACRO)              		even
   38071/   3A920 :                     Nem_Lamp:	binclude	"_binary-files/artnem/lamppost.bin"	; lamppost
   38072/   3A9E0 : (MACRO)              		even
   38073/   3A9E0 :                     Nem_BigFlash:	binclude	"_binary-files/artnem/rngflash.bin"	; flash from giant ring
   38074/   3AB54 : (MACRO)              		even
   38075/   3AB54 :                     Nem_Bonus:	binclude	"_binary-files/artnem/bonus.bin"	; hidden bonuses at end of a level
   38076/   3AE56 : (MACRO)              		even
   38077/   3AE56 :                     ; ---------------------------------------------------------------------------
   38078/   3AE56 :                     ; Compressed graphics - continue screen
   38079/   3AE56 :                     ; ---------------------------------------------------------------------------
   38080/   3AE56 :                     Nem_ContSonic:	binclude	"_binary-files/artnem/cntsonic.bin"	; Sonic on continue screen
   38081/   3B106 : (MACRO)              		even
   38082/   3B106 :                     Nem_MiniSonic:	binclude	"_binary-files/artnem/cntother.bin"	; mini Sonic and text on continue screen
   38083/   3B340 : (MACRO)              		even
   38084/   3B340 :                     ; ---------------------------------------------------------------------------
   38085/   3B340 :                     ; Compressed graphics - animals
   38086/   3B340 :                     ; ---------------------------------------------------------------------------
   38087/   3B340 :                     Nem_Rabbit:	binclude	"_binary-files/artnem/rabbit.bin"	; rabbit
   38088/   3B498 : (MACRO)              		even
   38089/   3B498 :                     Nem_Chicken:	binclude	"_binary-files/artnem/chicken.bin"	; chicken
   38090/   3B5F4 : (MACRO)              		even
   38091/   3B5F4 :                     Nem_BlackBird:	binclude	"_binary-files/artnem/blackbrd.bin"	; blackbird
   38092/   3B770 : (MACRO)              		even
   38093/   3B770 :                     Nem_Seal:	binclude	"_binary-files/artnem/seal.bin"		; seal
   38094/   3B88C : (MACRO)              		even
   38095/   3B88C :                     Nem_Pig:	binclude	"_binary-files/artnem/pig.bin"		; pig
   38096/   3B9C2 : (MACRO)              		even
   38097/   3B9C2 :                     Nem_Flicky:	binclude	"_binary-files/artnem/flicky.bin"	; flicky
   38098/   3BAFC : (MACRO)              		even
   38099/   3BAFC :                     Nem_Squirrel:	binclude	"_binary-files/artnem/squirrel.bin"	; squirrel
   38100/   3BC58 : (MACRO)              		even
   38101/   3BC58 :                     ; ---------------------------------------------------------------------------
   38102/   3BC58 :                     ; Compressed graphics - primary patterns and block mappings
   38103/   3BC58 :                     ; ---------------------------------------------------------------------------
   38104/   3BC58 :                     
   38105/   3BC58 :                     Nem_TIT_1st:	binclude	"_binary-files/artnem/8x8tit1.bin"	; Title primary patterns
   38106/   3D2B8 : (MACRO)              		even
   38107/   3D2B8 :                     Nem_TIT_2nd:	binclude	"_binary-files/artnem/8x8tit2.bin"	; Title secondary patterns
   38108/   3E660 : (MACRO)              		even
   38109/   3E660 :                     Blk16_GHZ:	binclude	"_level-data/map-16x16-blocks/ghz.bin"
   38110/   3EF74 : (MACRO)              		even
   38111/   3EF74 :                     Nem_GHZ:	binclude	"_binary-files/artnem/8x8ghz.bin"	; GHZ primary patterns
   38112/   41924 : (MACRO)              		even
   38113/   41924 :                     Blk256_GHZ:	binclude	"_level-data/map-128x128-chunks/ghz.bin"
   38114/   43A80 : (MACRO)              		even
   38115/   43A80 :                     Blk16_LZ:	binclude	"_level-data/map-16x16-blocks/lz.bin"
   38116/   43D7F : (MACRO)              		even
   38116/   43D7F : 00                                          dc.b 0 ;ds.b 1 
   38117/   43D80 :                     Nem_LZ:		binclude	"_binary-files/artnem/8x8lz.bin"	; LZ primary patterns
   38118/   45806 : (MACRO)              		even
   38119/   45806 :                     Blk256_LZ:	binclude	"_level-data/map-128x128-chunks/lz.bin"
   38120/   47C8E : (MACRO)              		even
   38121/   47C8E :                     Blk16_MZ:	binclude	"_level-data/map-16x16-blocks/mz.bin"
   38122/   48403 : (MACRO)              		even
   38122/   48403 : 00                                          dc.b 0 ;ds.b 1 
   38123/   48404 :                     Nem_MZ:		binclude	"_binary-files/artnem/8x8mz.bin"	; MZ primary patterns
   38124/   4AB58 : (MACRO)              		even
   38125/   4AB58 :                     Blk256_MZ:	binclude	"_level-data/map-128x128-chunks/mz.bin"
   38126/   4C290 : (MACRO)              		even
   38127/   4C290 :                     Blk16_SLZ:	binclude	"_level-data/map-16x16-blocks/slz.bin"
   38128/   4CA21 : (MACRO)              		even
   38128/   4CA21 : 00                                          dc.b 0 ;ds.b 1 
   38129/   4CA22 :                     Nem_SLZ:	binclude	"_binary-files/artnem/8x8slz.bin"	; SLZ primary patterns
   38130/   50411 : (MACRO)              		even
   38130/   50411 : 00                                          dc.b 0 ;ds.b 1 
   38131/   50412 :                     Blk256_SLZ:	binclude	"_level-data/map-128x128-chunks/slz.bin"
   38132/   5238E : (MACRO)              		even
   38133/   5238E :                     Blk16_SYZ:	binclude	"_level-data/map-16x16-blocks/syz.bin"
   38134/   52C3B : (MACRO)              		even
   38134/   52C3B : 00                                          dc.b 0 ;ds.b 1 
   38135/   52C3C :                     Nem_SYZ:	binclude	"_binary-files/artnem/8x8syz.bin"	; SYZ primary patterns
   38136/   56222 : (MACRO)              		even
   38137/   56222 :                     Blk256_SYZ:	binclude	"_level-data/map-128x128-chunks/syz.bin"
   38138/   5850C : (MACRO)              		even
   38139/   5850C :                     Blk16_SBZ:	binclude	"_level-data/map-16x16-blocks/sbz.bin"
   38140/   592BA : (MACRO)              		even
   38141/   592BA :                     Nem_SBZ:	binclude	"_binary-files/artnem/8x8sbz.bin"	; SBZ primary patterns
   38142/   5B988 : (MACRO)              		even
   38143/   5B988 :                     Blk256_SBZ:	binclude	"_level-data/map-128x128-chunks/sbz.bin"
   38144/   5E50B : (MACRO)              		even
   38144/   5E50B : 00                                          dc.b 0 ;ds.b 1 
   38145/   5E50C :                     ; ---------------------------------------------------------------------------
   38146/   5E50C :                     ; Compressed graphics - bosses and ending sequence
   38147/   5E50C :                     ; ---------------------------------------------------------------------------
   38148/   5E50C :                     Nem_Eggman:	binclude	"_binary-files/artnem/bossmain.bin"	; boss main patterns
   38149/   5ED70 : (MACRO)              		even
   38150/   5ED70 :                     Nem_Weapons:	binclude	"_binary-files/artnem/bossxtra.bin"	; boss add-ons and weapons
   38151/   5F05A : (MACRO)              		even
   38152/   5F05A :                     Nem_Prison:	binclude	"_binary-files/artnem/prison.bin"	; prison capsule
   38153/   5F8DE : (MACRO)              		even
   38154/   5F8DE :                     Nem_Sbz2Eggman:	binclude	"_binary-files/artnem/sbz2boss.bin"	; Eggman in SBZ2 and FZ
   38155/   6010A : (MACRO)              		even
   38156/   6010A :                     Nem_FzBoss:	binclude	"_binary-files/artnem/fzboss.bin"	; FZ boss
   38157/   60872 : (MACRO)              		even
   38158/   60872 :                     Nem_FzEggman:	binclude	"_binary-files/artnem/fzboss2.bin"	; Eggman after the FZ boss
   38159/   60DF2 : (MACRO)              		even
   38160/   60DF2 :                     Nem_Exhaust:	binclude	"_binary-files/artnem/bossflam.bin"	; boss exhaust flame
   38161/   60F12 : (MACRO)              		even
   38162/   60F12 :                     Nem_EndEm:	binclude	"_binary-files/artnem/endemera.bin"	; ending sequence chaos emeralds
   38163/   61110 : (MACRO)              		even
   38164/   61110 :                     Nem_EndSonic:	binclude	"_binary-files/artnem/endsonic.bin"	; ending sequence Sonic
   38165/   622EE : (MACRO)              		even
   38166/   622EE :                     Nem_TryAgain:	binclude	"_binary-files/artnem/tryagain.bin"	; ending "try again" screen
   38167/   62C32 : (MACRO)              		even
   38168/   62C32 :                     Nem_EndEggman:	binclude	"_binary-files/artnem/xxxend.bin"	; unused boss sequence on ending
   38169/   63008 : (MACRO)              		even
   38170/   63008 :                     Kos_EndFlowers:	binclude	"_binary-files/artkos/flowers.bin"	; ending sequence animated flowers
   38171/   63598 : (MACRO)              		even
   38172/   63598 :                     Nem_EndFlower:	binclude	"_binary-files/artnem/endflowe.bin"	; ending sequence flowers
   38173/   63820 : (MACRO)              		even
   38174/   63820 :                     Nem_CreditText:	binclude	"_binary-files/artnem/credits.bin"	; credits alphabet
   38175/   63E1E : (MACRO)              		even
   38176/   63E1E :                     Nem_EndStH:	binclude	"_binary-files/artnem/endtext.bin"	; ending sequence "Sonic the Hedgehog" text
   38177/   640A6 : (MACRO)              		even
   38178/   640A6 :                     ; ---------------------------------------------------------------------------
   38179/   640A6 :                     ; Collision data
   38180/   640A6 :                     ; ---------------------------------------------------------------------------
   38181/   640A6 :                     AngleMap:	binclude	"_level-data/collision/anglemap.bin"	; floor angle map
   38182/   641A6 : (MACRO)              		even
   38183/   641A6 :                     CollArray1:	binclude	"_level-data/collision/carray_n.bin"	; normal collision array
   38184/   651A6 : (MACRO)              		even
   38185/   651A6 :                     CollArray2:	binclude	"_level-data/collision/carray_r.bin"	; rotated collision array
   38186/   661A6 : (MACRO)              		even
   38187/   661A6 :                     Col_GHZ_1:	binclude	"_level-data/collision/ghz1.bin"	; GHZ index 1
   38188/   6635E : (MACRO)              		even
   38189/   6635E :                     Col_GHZ_2:	binclude	"_level-data/collision/ghz2.bin"	; GHZ index 2
   38190/   66516 : (MACRO)              		even
   38191/   66516 :                     Col_LZ_1:	binclude	"_level-data/collision/lz1.bin"		; LZ index 1
   38192/   665DA : (MACRO)              		even
   38193/   665DA :                     Col_LZ_2:	binclude	"_level-data/collision/lz2.bin"		; LZ index 2
   38194/   6669E : (MACRO)              		even
   38195/   6669E :                     Col_MZ_1:	binclude	"_level-data/collision/mz1.bin"		; MZ index 1
   38196/   6682E : (MACRO)              		even
   38197/   6682E :                     Col_MZ_2:	binclude	"_level-data/collision/mz2.bin"		; MZ index 2
   38198/   669BE : (MACRO)              		even
   38199/   669BE :                     Col_SLZ_1:	binclude	"_level-data/collision/slz1.bin"	; SLZ index 1
   38200/   66B5C : (MACRO)              		even
   38201/   66B5C :                     Col_SLZ_2:	binclude	"_level-data/collision/slz2.bin"	; SLZ index 2
   38202/   66CFA : (MACRO)              		even
   38203/   66CFA :                     Col_SYZ_1:	binclude	"_level-data/collision/syz1.bin"	; SYZ index 1
   38204/   66EEE : (MACRO)              		even
   38205/   66EEE :                     Col_SYZ_2:	binclude	"_level-data/collision/syz2.bin"	; SYZ index 2
   38206/   670E2 : (MACRO)              		even
   38207/   670E2 :                     Col_SBZ_1:	binclude	"_level-data/collision/sbz1.bin"	; SBZ index 1
   38208/   6733A : (MACRO)              		even
   38209/   6733A :                     Col_SBZ_2:	binclude	"_level-data/collision/sbz2.bin"	; SBZ index 2
   38210/   67592 : (MACRO)              		even
   38211/   67592 :                     ; ---------------------------------------------------------------------------
   38212/   67592 :                     ; Special layouts
   38213/   67592 :                     ; ---------------------------------------------------------------------------
   38214/   67592 :                     SS_1:		binclude	"_sslayout/1.bin"
   38215/   6780C : (MACRO)              		even
   38216/   6780C :                     SS_2:		binclude	"_sslayout/2.bin"
   38217/   67C1E : (MACRO)              		even
   38218/   67C1E :                     SS_3:		binclude	"_sslayout/3.bin"
   38219/   67F7A : (MACRO)              		even
   38220/   67F7A :                     SS_4:		binclude	"_sslayout/4.bin"
   38221/   68454 : (MACRO)              		even
   38222/   68454 :                     SS_5:		binclude	"_sslayout/5.bin"
   38223/   68926 : (MACRO)              		even
   38224/   68926 :                     SS_6:		binclude	"_sslayout/6.bin"
   38225/   68C36 : (MACRO)              		even
   38226/   68C36 :                     ; ---------------------------------------------------------------------------
   38227/   68C36 :                     ; Animated uncompressed graphics
   38228/   68C36 :                     ; ---------------------------------------------------------------------------
   38229/   68C36 :                     Art_GhzWater:	binclude	"_binary-files/artunc/ghzwater.bin"	; GHZ waterfall
   38230/   68E36 : (MACRO)              		even
   38231/   68E36 :                     Art_GhzFlower1:	binclude	"_binary-files/artunc/ghzflowl.bin"	; GHZ large flower
   38232/   69236 : (MACRO)              		even
   38233/   69236 :                     Art_GhzFlower2:	binclude	"_binary-files/artunc/ghzflows.bin"	; GHZ small flower
   38234/   696B6 : (MACRO)              		even
   38235/   696B6 :                     Art_MzLava1:	binclude	"_binary-files/artunc/mzlava1.bin"	; MZ lava surface
   38236/   699B6 : (MACRO)              		even
   38237/   699B6 :                     Art_MzLava2:	binclude	"_binary-files/artunc/mzlava2.bin"	; MZ lava
   38238/   69FB6 : (MACRO)              		even
   38239/   69FB6 :                     Art_MzTorch:	binclude	"_binary-files/artunc/mztorch.bin"	; MZ torch in background
   38240/   6A2B6 : (MACRO)              		even
   38241/   6A2B6 :                     Art_SbzSmoke:	binclude	"_binary-files/artunc/sbzsmoke.bin"	; SBZ smoke in background
   38242/   6AD36 : (MACRO)              		even
   38243/   6AD36 :                     
   38244/   6AD36 :                     ; ---------------------------------------------------------------------------
   38245/   6AD36 :                     ; Level	layout index
   38246/   6AD36 :                     ; ---------------------------------------------------------------------------
   38247/   6AD36 : 0006 AE86 0006      Level_Index:	dc.l Level_GHZ1, Level_GHZbg, byte_68D70	; MJ: Table needs to be read in long-word as the layouts are now bigger
            6AD3C : DE8E 0006 BE86    
   38248/   6AD42 : 0006 BE8A 0006      		dc.l Level_GHZ2, Level_GHZbg, byte_68E3C
            6AD48 : DE8E 0006 CE8A    
   38249/   6AD4E : 0006 CE8E 0006      		dc.l Level_GHZ3, Level_GHZbg, byte_68F84
            6AD54 : DE8E 0006 DEB0    
   38250/   6AD5A : 0006 DEB4 0006      		dc.l byte_68F88, byte_68F88, byte_68F88
            6AD60 : DEB4 0006 DEB4    
   38251/   6AD66 : 0006 DEB8 0006      		dc.l Level_LZ1, Level_LZbg, byte_69190
            6AD6C : EEB8 0006 EFBA    
   38252/   6AD72 : 0006 EFBE 0006      		dc.l Level_LZ2, Level_LZbg, byte_6922E
            6AD78 : EEB8 0006 FFBE    
   38253/   6AD7E : 0006 FFC2 0006      		dc.l Level_LZ3, Level_LZbg, byte_6934C
            6AD84 : EEB8 0007 1FC2    
   38254/   6AD8A : 0007 1FC6 0006      		dc.l Level_SBZ3, Level_LZbg, byte_6940A
            6AD90 : EEB8 0007 2FC6    
   38255/   6AD96 : 0007 2FCA 0007      		dc.l Level_MZ1, Level_MZ1bg, Level_MZ1
            6AD9C : 3FCA 0007 2FCA    
   38256/   6ADA2 : 0007 4044 0007      		dc.l Level_MZ2, Level_MZ2bg, byte_6965C
            6ADA8 : 5044 0007 50D6    
   38257/   6ADAE : 0007 50DA 0007      		dc.l Level_MZ3, Level_MZ3bg, byte_697E6
            6ADB4 : 60DA 0007 617E    
   38258/   6ADBA : 0007 6182 0007      		dc.l byte_697EA, byte_697EA, byte_697EA
            6ADC0 : 6182 0007 6182    
   38259/   6ADC6 : 0007 6186 0007      		dc.l Level_SLZ1, Level_SLZbg, byte_69B84
            6ADCC : 7186 0007 9200    
   38260/   6ADD2 : 0007 7200 0007      		dc.l Level_SLZ2, Level_SLZbg, byte_69B84
            6ADD8 : 7186 0007 9200    
   38261/   6ADDE : 0007 8200 0007      		dc.l Level_SLZ3, Level_SLZbg, byte_69B84
            6ADE4 : 7186 0007 9200    
   38262/   6ADEA : 0007 9200 0007      		dc.l byte_69B84, byte_69B84, byte_69B84
            6ADF0 : 9200 0007 9200    
   38263/   6ADF6 : 0007 9204 0007      		dc.l Level_SYZ1, Level_SYZbg, byte_69C7E
            6ADFC : A204 0007 A23E    
   38264/   6AE02 : 0007 A242 0007      		dc.l Level_SYZ2, Level_SYZbg, byte_69D86
            6AE08 : A204 0007 B242    
   38265/   6AE0E : 0007 B246 0007      		dc.l Level_SYZ3, Level_SYZbg, byte_69EE4
            6AE14 : A204 0007 C246    
   38266/   6AE1A : 0007 C24A 0007      		dc.l byte_69EE8, byte_69EE8, byte_69EE8
            6AE20 : C24A 0007 C24A    
   38267/   6AE26 : 0007 C24E 0007      		dc.l Level_SBZ1, Level_SBZ1bg, Level_SBZ1bg
            6AE2C : D24E 0007 D24E    
   38268/   6AE32 : 0007 D28C 0007      		dc.l Level_SBZ2, Level_SBZ2bg, Level_SBZ2bg
            6AE38 : E28C 0007 E28C    
   38269/   6AE3E : 0007 D28C 0007      		dc.l Level_SBZ2, Level_SBZ2bg, byte_6A2F8
            6AE44 : E28C 0007 E3F6    
   38270/   6AE4A : 0007 E3FA 0007      		dc.l byte_6A2FC, byte_6A2FC, byte_6A2FC
            6AE50 : E3FA 0007 E3FA    
   38271/   6AE56 : 0007 E3FE 0006      		dc.l Level_End, Level_GHZbg, byte_6A320
            6AE5C : DE8E 0007 F3FE    
   38272/   6AE62 : 0007 E3FE 0006      		dc.l Level_End, Level_GHZbg, byte_6A320
            6AE68 : DE8E 0007 F3FE    
   38273/   6AE6E : 0007 F3FE 0007      		dc.l byte_6A320, byte_6A320, byte_6A320
            6AE74 : F3FE 0007 F3FE    
   38274/   6AE7A : 0007 F3FE 0007      		dc.l byte_6A320, byte_6A320, byte_6A320
            6AE80 : F3FE 0007 F3FE    
   38275/   6AE86 :                     
   38276/   6AE86 :                     Level_GHZ1:	binclude	"_level-data/level-layout/ghz1.bin"
   38277/   6BE86 : (MACRO)              		even
   38278/   6BE86 : 0000 0000           byte_68D70:	dc.b 0,	0, 0, 0
   38279/   6BE8A :                     Level_GHZ2:	binclude	"_level-data/level-layout/ghz2.bin"
   38280/   6CE8A : (MACRO)              		even
   38281/   6CE8A : 0000 0000           byte_68E3C:	dc.b 0,	0, 0, 0
   38282/   6CE8E :                     Level_GHZ3:	binclude	"_level-data/level-layout/ghz3.bin"
   38283/   6DE8E : (MACRO)              		even
   38284/   6DE8E :                     Level_GHZbg:	binclude	"_level-data/level-layout/ghzbg.bin"
   38285/   6DEB0 : (MACRO)              		even
   38286/   6DEB0 : 0000 0000           byte_68F84:	dc.b 0,	0, 0, 0
   38287/   6DEB4 : 0000 0000           byte_68F88:	dc.b 0,	0, 0, 0
   38288/   6DEB8 :                     
   38289/   6DEB8 :                     Level_LZ1:	binclude	"_level-data/level-layout/lz1.bin"
   38290/   6EEB8 : (MACRO)              		even
   38291/   6EEB8 :                     Level_LZbg:	binclude	"_level-data/level-layout/lzbg.bin"
   38292/   6EFBA : (MACRO)              		even
   38293/   6EFBA : 0000 0000           byte_69190:	dc.b 0,	0, 0, 0
   38294/   6EFBE :                     Level_LZ2:	binclude	"_level-data/level-layout/lz2.bin"
   38295/   6FFBE : (MACRO)              		even
   38296/   6FFBE : 0000 0000           byte_6922E:	dc.b 0,	0, 0, 0
   38297/   6FFC2 :                     Level_LZ3:	binclude	"_level-data/level-layout/lz3.bin"
   38298/   70FC2 : (MACRO)              		even
   38299/   70FC2 :                     Level_LZ3_WALL:	binclude	"_level-data/level-layout/lz3_wall.bin"	; MJ: layout with LZ's wall change (When the switch is pressed) data is not in ram anymore,
   38300/   71FC2 : (MACRO)              		even				; and altering values in rom is prohibited, so a new layout is loaded in its place.
   38301/   71FC2 : 0000 0000           byte_6934C:	dc.b 0,	0, 0, 0
   38302/   71FC6 :                     Level_SBZ3:	binclude	"_level-data/level-layout/sbz3.bin"
   38303/   72FC6 : (MACRO)              		even
   38304/   72FC6 : 0000 0000           byte_6940A:	dc.b 0,	0, 0, 0
   38305/   72FCA :                     
   38306/   72FCA :                     Level_MZ1:	binclude	"_level-data/level-layout/mz1.bin"
   38307/   73FCA : (MACRO)              		even
   38308/   73FCA :                     Level_MZ1bg:	binclude	"_level-data/level-layout/mz1bg.bin"
   38309/   74044 : (MACRO)              		even
   38310/   74044 :                     Level_MZ2:	binclude	"_level-data/level-layout/mz2.bin"
   38311/   75044 : (MACRO)              		even
   38312/   75044 :                     Level_MZ2bg:	binclude	"_level-data/level-layout/mz2bg.bin"
   38313/   750D6 : (MACRO)              		even
   38314/   750D6 : 0000 0000           byte_6965C:	dc.b 0,	0, 0, 0
   38315/   750DA :                     Level_MZ3:	binclude	"_level-data/level-layout/mz3.bin"
   38316/   760DA : (MACRO)              		even
   38317/   760DA :                     Level_MZ3bg:	binclude	"_level-data/level-layout/mz3bg.bin"
   38318/   7617E : (MACRO)              		even
   38319/   7617E : 0000 0000           byte_697E6:	dc.b 0,	0, 0, 0
   38320/   76182 : 0000 0000           byte_697EA:	dc.b 0,	0, 0, 0
   38321/   76186 :                     
   38322/   76186 :                     Level_SLZ1:	binclude	"_level-data/level-layout/slz1.bin"
   38323/   77186 : (MACRO)              		even
   38324/   77186 :                     Level_SLZbg:	binclude	"_level-data/level-layout/slzbg.bin"
   38325/   77200 : (MACRO)              		even
   38326/   77200 :                     Level_SLZ2:	binclude	"_level-data/level-layout/slz2.bin"
   38327/   78200 : (MACRO)              		even
   38328/   78200 :                     Level_SLZ3:	binclude	"_level-data/level-layout/slz3.bin"
   38329/   79200 : (MACRO)              		even
   38330/   79200 : 0000 0000           byte_69B84:	dc.b 0,	0, 0, 0
   38331/   79204 :                     
   38332/   79204 :                     Level_SYZ1:	binclude	"_level-data/level-layout/syz1.bin"
   38333/   7A204 : (MACRO)              		even
   38334/   7A204 :                     Level_SYZbg:	binclude	"_level-data/level-layout/syzbg.bin"
   38335/   7A23E : (MACRO)              		even
   38336/   7A23E : 0000 0000           byte_69C7E:	dc.b 0,	0, 0, 0
   38337/   7A242 :                     Level_SYZ2:	binclude	"_level-data/level-layout/syz2.bin"
   38338/   7B242 : (MACRO)              		even
   38339/   7B242 : 0000 0000           byte_69D86:	dc.b 0,	0, 0, 0
   38340/   7B246 :                     Level_SYZ3:	binclude	"_level-data/level-layout/syz3.bin"
   38341/   7C246 : (MACRO)              		even
   38342/   7C246 : 0000 0000           byte_69EE4:	dc.b 0,	0, 0, 0
   38343/   7C24A : 0000 0000           byte_69EE8:	dc.b 0,	0, 0, 0
   38344/   7C24E :                     
   38345/   7C24E :                     Level_SBZ1:	binclude	"_level-data/level-layout/sbz1.bin"
   38346/   7D24E : (MACRO)              		even
   38347/   7D24E :                     Level_SBZ1bg:	binclude	"_level-data/level-layout/sbz1bg.bin"
   38348/   7D28C : (MACRO)              		even
   38349/   7D28C :                     Level_SBZ2:	binclude	"_level-data/level-layout/sbz2.bin"
   38350/   7E28C : (MACRO)              		even
   38351/   7E28C :                     Level_SBZ2bg:	binclude	"_level-data/level-layout/sbz2bg.bin"
   38352/   7E3F6 : (MACRO)              		even
   38353/   7E3F6 : 0000 0000           byte_6A2F8:	dc.b 0,	0, 0, 0
   38354/   7E3FA : 0000 0000           byte_6A2FC:	dc.b 0,	0, 0, 0
   38355/   7E3FE :                     Level_End:	binclude	"_level-data/level-layout/ending.bin"
   38356/   7F3FE : (MACRO)              		even
   38357/   7F3FE : 0000 0000           byte_6A320:	dc.b 0,	0, 0, 0
   38358/   7F402 :                     
   38359/   7F402 :                     ; ---------------------------------------------------------------------------
   38360/   7F402 :                     ; Animated uncompressed giant ring graphics
   38361/   7F402 :                     ; ---------------------------------------------------------------------------
   38362/   7F402 :                     Art_BigRing:	binclude	"_binary-files/artunc/bigring.bin"
   38363/   80042 : (MACRO)              		even
   38364/   80042 :                     
   38365/   80042 :                     
   38366/   80042 :                     ; ---------------------------------------------------------------------------
   38367/   80042 :                     ; Sprite locations index
   38368/   80042 :                     ; ---------------------------------------------------------------------------
   38369/   80042 : 0096 644A           ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38370/   80046 : 05B2 644A           		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38371/   8004A : 0B82 644A           		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38372/   8004E : 0096 644A           		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38373/   80052 : 124E 644A           		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38374/   80056 : 16BC 644A           		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38375/   8005A : 19FE 644A           		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38376/   8005E : 1FE0 644A           		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38377/   80062 : 25C8 644A           		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38378/   80066 : 2934 644A           		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38379/   8006A : 2DDE 644A           		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38380/   8006E : 25C8 644A           		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38381/   80072 : 3354 644A           		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38382/   80076 : 38AC 644A           		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38383/   8007A : 3D68 644A           		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38384/   8007E : 3354 644A           		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38385/   80082 : 4392 644A           		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38386/   80086 : 481E 644A           		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38387/   8008A : 4D88 644A           		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38388/   8008E : 4392 644A           		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38389/   80092 : 538E 644A           		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38390/   80096 : 5ACC 644A           		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38391/   8009A : 61AA 644A           		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38392/   8009E : 538E 644A           		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38393/   800A2 : 62EE 644A           		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38394/   800A6 : 62EE 644A           		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38395/   800AA : 62EE 644A           		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38396/   800AE : 62EE 644A           		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
   38397/   800B2 : 2478 24AA           		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
   38398/   800B6 : 24DC 250E           		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
   38399/   800BA : 2540 258A           		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
   38400/   800BE : 2478 24AA           		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
   38401/   800C2 : 61BC 61EE           		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
   38402/   800C6 : 6220 6252           		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
   38403/   800CA : 6284 62B6           		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
   38404/   800CE : 61BC 61EE           		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
   38405/   800D2 : FFFF 0000 0000      		dc.b $FF, $FF, 0, 0, 0,	0
   38406/   800D8 :                     ObjPos_GHZ1:	binclude	"_level-data/object-positions/ghz1.bin"
   38407/   805F4 : (MACRO)              		even
   38408/   805F4 :                     ObjPos_GHZ2:	binclude	"_level-data/object-positions/ghz2.bin"
   38409/   80BC4 : (MACRO)              		even
   38410/   80BC4 :                     ObjPos_GHZ3:	binclude	"_level-data/object-positions/ghz3.bin"
   38411/   81290 : (MACRO)              		even
   38412/   81290 :                     ObjPos_LZ1:	binclude	"_level-data/object-positions/lz1.bin"
   38413/   816FE : (MACRO)              		even
   38414/   816FE :                     ObjPos_LZ2:	binclude	"_level-data/object-positions/lz2.bin"
   38415/   81A40 : (MACRO)              		even
   38416/   81A40 :                     ObjPos_LZ3:	binclude	"_level-data/object-positions/lz3.bin"
   38417/   82022 : (MACRO)              		even
   38418/   82022 :                     ObjPos_SBZ3:	binclude	"_level-data/object-positions/sbz3.bin"
   38419/   824BA : (MACRO)              		even
   38420/   824BA :                     ObjPos_LZ1pf1:	binclude	"_level-data/object-positions/lz1pf1.bin"
   38421/   824EC : (MACRO)              		even
   38422/   824EC :                     ObjPos_LZ1pf2:	binclude	"_level-data/object-positions/lz1pf2.bin"
   38423/   8251E : (MACRO)              		even
   38424/   8251E :                     ObjPos_LZ2pf1:	binclude	"_level-data/object-positions/lz2pf1.bin"
   38425/   82550 : (MACRO)              		even
   38426/   82550 :                     ObjPos_LZ2pf2:	binclude	"_level-data/object-positions/lz2pf2.bin"
   38427/   82582 : (MACRO)              		even
   38428/   82582 :                     ObjPos_LZ3pf1:	binclude	"_level-data/object-positions/lz3pf1.bin"
   38429/   825CC : (MACRO)              		even
   38430/   825CC :                     ObjPos_LZ3pf2:	binclude	"_level-data/object-positions/lz3pf2.bin"
   38431/   8260A : (MACRO)              		even
   38432/   8260A :                     ObjPos_MZ1:	binclude	"_level-data/object-positions/mz1.bin"
   38433/   82976 : (MACRO)              		even
   38434/   82976 :                     ObjPos_MZ2:	binclude	"_level-data/object-positions/mz2.bin"
   38435/   82E20 : (MACRO)              		even
   38436/   82E20 :                     ObjPos_MZ3:	binclude	"_level-data/object-positions/mz3.bin"
   38437/   83396 : (MACRO)              		even
   38438/   83396 :                     ObjPos_SLZ1:	binclude	"_level-data/object-positions/slz1.bin"
   38439/   838EE : (MACRO)              		even
   38440/   838EE :                     ObjPos_SLZ2:	binclude	"_level-data/object-positions/slz2.bin"
   38441/   83DAA : (MACRO)              		even
   38442/   83DAA :                     ObjPos_SLZ3:	binclude	"_level-data/object-positions/slz3.bin"
   38443/   843D4 : (MACRO)              		even
   38444/   843D4 :                     ObjPos_SYZ1:	binclude	"_level-data/object-positions/syz1.bin"
   38445/   84860 : (MACRO)              		even
   38446/   84860 :                     ObjPos_SYZ2:	binclude	"_level-data/object-positions/syz2.bin"
   38447/   84DCA : (MACRO)              		even
   38448/   84DCA :                     ObjPos_SYZ3:	binclude	"_level-data/object-positions/syz3.bin"
   38449/   853D0 : (MACRO)              		even
   38450/   853D0 :                     ObjPos_SBZ1:	binclude	"_level-data/object-positions/sbz1.bin"
   38451/   85B0E : (MACRO)              		even
   38452/   85B0E :                     ObjPos_SBZ2:	binclude	"_level-data/object-positions/sbz2.bin"
   38453/   861EC : (MACRO)              		even
   38454/   861EC :                     ObjPos_FZ:	binclude	"_level-data/object-positions/fz.bin"
   38455/   861FE : (MACRO)              		even
   38456/   861FE :                     ObjPos_SBZ1pf1:	binclude	"_level-data/object-positions/sbz1pf1.bin"
   38457/   86230 : (MACRO)              		even
   38458/   86230 :                     ObjPos_SBZ1pf2:	binclude	"_level-data/object-positions/sbz1pf2.bin"
   38459/   86262 : (MACRO)              		even
   38460/   86262 :                     ObjPos_SBZ1pf3:	binclude	"_level-data/object-positions/sbz1pf3.bin"
   38461/   86294 : (MACRO)              		even
   38462/   86294 :                     ObjPos_SBZ1pf4:	binclude	"_level-data/object-positions/sbz1pf4.bin"
   38463/   862C6 : (MACRO)              		even
   38464/   862C6 :                     ObjPos_SBZ1pf5:	binclude	"_level-data/object-positions/sbz1pf5.bin"
   38465/   862F8 : (MACRO)              		even
   38466/   862F8 :                     ObjPos_SBZ1pf6:	binclude	"_level-data/object-positions/sbz1pf6.bin"
   38467/   86330 : (MACRO)              		even
   38468/   86330 :                     ObjPos_End:	binclude	"_level-data/object-positions/ending.bin"
   38469/   8648C : (MACRO)              		even
   38470/   8648C : FFFF 0000 0000      ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
   38471/   86492 :                     ; ---------------------------------------------------------------------------
   38472/   86492 :                     
   38473/   86492 :                         include "SoundDriver.asm"
(1)    1/   86492 :                     ; -------------------------------------------------
(1)    2/   86492 :                     ; ----------------- SoundDriver -------------------
(1)    3/   86492 :                     ; -------------------------------------------------
(1)    4/   86492 :                     
(1)    5/   86492 : 0008 65EA           Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
(1)    6/   86496 : 0008 D714           Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
(1)    7/   8649A : 0008 659E           Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
(1)    8/   8649E : 0008 D654           Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
(1)    9/   864A2 : 0008 6596           off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
(1)   10/   864A6 : 0008 64AA           Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
(1)   11/   864AA :                     ; ---------------------------------------------------------------------------
(1)   12/   864AA :                     ; PSG instruments used in music
(1)   13/   864AA :                     ; ---------------------------------------------------------------------------
(1)   14/   864AA : 0008 64CE 0008      PSG_Index:	dc.l PSG1, PSG2, PSG3
            864B0 : 64E5 0008 64EC    
(1)   15/   864B6 : 0008 64FD 0008      		dc.l PSG4, PSG5, PSG6
            864BC : 6517 0008 6508    
(1)   16/   864C2 : 0008 6541 0008      		dc.l PSG7, PSG8, PSG9
            864C8 : 655D 0008 6585    
(1)   17/   864CE :                     PSG1:		binclude	"sound/PSG/psg1.bin"
(1)   18/   864E5 :                     PSG2:		binclude	"sound/PSG/psg2.bin"
(1)   19/   864EC :                     PSG3:		binclude	"sound/PSG/psg3.bin"
(1)   20/   864FD :                     PSG4:		binclude	"sound/PSG/psg4.bin"
(1)   21/   86508 :                     PSG6:		binclude	"sound/PSG/psg6.bin"
(1)   22/   86517 :                     PSG5:		binclude	"sound/PSG/psg5.bin"
(1)   23/   86541 :                     PSG7:		binclude	"sound/PSG/psg7.bin"
(1)   24/   8655D :                     PSG8:		binclude	"sound/PSG/psg8.bin"
(1)   25/   86585 :                     PSG9:		binclude	"sound/PSG/psg9.bin"
(1)   26/   86596 :                     
(1)   27/   86596 : 0772 7326 1508      byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
            8659C : FF05             
(1)   28/   8659E :                     ; ---------------------------------------------------------------------------
(1)   29/   8659E :                     ; Music	Pointers
(1)   30/   8659E :                     ; ---------------------------------------------------------------------------
(1)   31/   8659E : 0008 90EC 0008      MusicIndex:	dc.l Music81, Music82
            865A4 : 9854             
(1)   32/   865A6 : 0008 9CA4 0008      		dc.l Music83, Music84
            865AC : A102             
(1)   33/   865AE : 0008 A570 0008      		dc.l Music85, Music86
            865B4 : A9BC             
(1)   34/   865B6 : 0008 AF0C 0008      		dc.l Music87, Music88
            865BC : B0F2             
(1)   35/   865BE : 0008 B1E0 0008      		dc.l Music89, Music8A
            865C4 : B50C             
(1)   36/   865C6 : 0008 B6B8 0008      		dc.l Music8B, Music8C
            865CC : B952             
(1)   37/   865CE : 0008 BB6E 0008      		dc.l Music8D, Music8E
            865D4 : BD8A             
(1)   38/   865D6 : 0008 BEE0 0008      		dc.l Music8F, Music90
            865DC : C030             
(1)   39/   865DE : 0008 C18E 0008      		dc.l Music91, Music92
            865E4 : D45C             
(1)   40/   865E6 : 0008 D586           		dc.l Music93
(1)   41/   865EA :                     ; ---------------------------------------------------------------------------
(1)   42/   865EA :                     ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
(1)   43/   865EA :                     ; ---------------------------------------------------------------------------
(1)   44/   865EA : 9090 9090 9090      SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
            865F0 : 9090 9090 9090 
            865F6 : 9090 9090          
(1)   45/   865FA : 9090 9090 9090      		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
            86600 : 9090 9090 9090 
            86606 : 9090 9080          
(1)   46/   8660A : 7070 7070 7070      		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
            86610 : 7070 7068 7070 
            86616 : 7060 7070          
(1)   47/   8661A : 6070 6070 7070      		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
            86620 : 7070 7070 7070 
            86626 : 7070 7F60          
(1)   48/   8662A : 7070 7070 7070      		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
            86630 : 7070 7070 7070 
            86636 : 7070 7080          
(1)   49/   8663A : 8080 8080 8080      		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
            86640 : 8080 8080 8080 
            86646 : 8080 8090          
(1)   50/   8664A : 9090 9090           		dc.b $90, $90, $90, $90
(1)   51/   8664E :                     
(1)   52/   8664E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1)   53/   8664E :                     
(1)   54/   8664E :                     
(1)   55/   8664E :                     sub_71B4C:				; XREF: loc_B10; PalToCRAM
(1)   56/   8664E : 33FC 0100 00A1      		move.w	#$100,($A11100).l ; stop the Z80
            86654 : 1100             
(1)   57/   86656 : 4E71                		nop	
(1)   58/   86658 : 4E71                		nop	
(1)   59/   8665A : 4E71                		nop	
(1)   60/   8665C :                     
(1)   61/   8665C :                     loc_71B5A:
(1)   62/   8665C : 0839 0000 00A1      		btst	#0,($A11100).l
            86662 : 1100             
(1)   63/   86664 : 66F6                		bne.s	loc_71B5A
(1)   64/   86666 :                     
(1)   65/   86666 : 0839 0007 00A0      		btst	#7,($A01FFD).l
            8666C : 1FFD             
(1)   66/   8666E : 6714                		beq.s	loc_71B82
(1)   67/   86670 : 33FC 0000 00A1      		move.w	#0,($A11100).l	; start	the Z80
            86676 : 1100             
(1)   68/   86678 : 4E71                		nop	
(1)   69/   8667A : 4E71                		nop	
(1)   70/   8667C : 4E71                		nop	
(1)   71/   8667E : 4E71                		nop	
(1)   72/   86680 : 4E71                		nop	
(1)   73/   86682 : 60CA                		bra.s	sub_71B4C
(1)   74/   86684 :                     ; ===========================================================================
(1)   75/   86684 :                     
(1)   76/   86684 :                     loc_71B82:
(1)   77/   86684 : 4DF9 00FF F000      		lea	($FFF000).l,a6
(1)   78/   8668A : 422E 000E           		clr.b	$E(a6)
(1)   79/   8668E : 4A2E 0003           		tst.b	3(a6)		; is music paused?
(1)   80/   86692 : 6600 02BE           		bne.w	loc_71E50	; if yes, branch
(1)   81/   86696 : 532E 0001           		subq.b	#1,1(a6)
(1)   82/   8669A : 6604                		bne.s	loc_71B9E
(1)   83/   8669C : 4EBA 0A80           		jsr	sub_7260C(pc)
(1)   84/   866A0 :                     
(1)   85/   866A0 :                     loc_71B9E:
(1)   86/   866A0 : 102E 0004           		move.b	4(a6),d0
(1)   87/   866A4 : 6704                		beq.s	loc_71BA8
(1)   88/   866A6 : 4EBA 0972           		jsr	sub_72504(pc)
(1)   89/   866AA :                     
(1)   90/   866AA :                     loc_71BA8:
(1)   91/   866AA : 4A2E 0024           		tst.b	$24(a6)
(1)   92/   866AE : 6704                		beq.s	loc_71BB2
(1)   93/   866B0 : 4EBA 0ADC           		jsr	sub_7267C(pc)
(1)   94/   866B4 :                     
(1)   95/   866B4 :                     loc_71BB2:
(1)   96/   866B4 : 4A6E 000A           		tst.w	$A(a6)		; is music or sound being played?
(1)   97/   866B8 : 6704                		beq.s	loc_71BBC	; if not, branch
(1)   98/   866BA : 4EBA 0348           		jsr	Sound_Play(pc)
(1)   99/   866BE :                     
(1)  100/   866BE :                     loc_71BBC:
(1)  101/   866BE : 0C2E 0080 0009      		cmpi.b	#$80,9(a6)
(1)  102/   866C4 : 6704                		beq.s	loc_71BC8
(1)  103/   866C6 : 4EBA 0382           		jsr	Sound_ChkValue(pc)
(1)  104/   866CA :                     
(1)  105/   866CA :                     loc_71BC8:
(1)  106/   866CA : 4BEE 0040           		lea	$40(a6),a5
(1)  107/   866CE : 4A15                		tst.b	(a5)
(1)  108/   866D0 : 6A04                		bpl.s	loc_71BD4
(1)  109/   866D2 : 4EBA 007C           		jsr	sub_71C4E(pc)
(1)  110/   866D6 :                     
(1)  111/   866D6 :                     loc_71BD4:
(1)  112/   866D6 : 422E 0008           		clr.b	8(a6)
(1)  113/   866DA : 7E05                		moveq	#5,d7
(1)  114/   866DC :                     
(1)  115/   866DC :                     loc_71BDA:
(1)  116/   866DC : DAFC 0030           		adda.w	#$30,a5
(1)  117/   866E0 : 4A15                		tst.b	(a5)
(1)  118/   866E2 : 6A04                		bpl.s	loc_71BE6
(1)  119/   866E4 : 4EBA 00E6           		jsr	sub_71CCA(pc)
(1)  120/   866E8 :                     
(1)  121/   866E8 :                     loc_71BE6:
(1)  122/   866E8 : 51CF FFF2           		dbf	d7,loc_71BDA
(1)  123/   866EC :                     
(1)  124/   866EC : 7E02                		moveq	#2,d7
(1)  125/   866EE :                     
(1)  126/   866EE :                     loc_71BEC:
(1)  127/   866EE : DAFC 0030           		adda.w	#$30,a5
(1)  128/   866F2 : 4A15                		tst.b	(a5)
(1)  129/   866F4 : 6A04                		bpl.s	loc_71BF8
(1)  130/   866F6 : 4EBA 0C6A           		jsr	sub_72850(pc)
(1)  131/   866FA :                     
(1)  132/   866FA :                     loc_71BF8:
(1)  133/   866FA : 51CF FFF2           		dbf	d7,loc_71BEC
(1)  134/   866FE :                     
(1)  135/   866FE : 1D7C 0080 000E      		move.b	#$80,$E(a6)
(1)  136/   86704 : 7E02                		moveq	#2,d7
(1)  137/   86706 :                     
(1)  138/   86706 :                     loc_71C04:
(1)  139/   86706 : DAFC 0030           		adda.w	#$30,a5
(1)  140/   8670A : 4A15                		tst.b	(a5)
(1)  141/   8670C : 6A04                		bpl.s	loc_71C10
(1)  142/   8670E : 4EBA 00BC           		jsr	sub_71CCA(pc)
(1)  143/   86712 :                     
(1)  144/   86712 :                     loc_71C10:
(1)  145/   86712 : 51CF FFF2           		dbf	d7,loc_71C04
(1)  146/   86716 :                     
(1)  147/   86716 : 7E02                		moveq	#2,d7
(1)  148/   86718 :                     
(1)  149/   86718 :                     loc_71C16:
(1)  150/   86718 : DAFC 0030           		adda.w	#$30,a5
(1)  151/   8671C : 4A15                		tst.b	(a5)
(1)  152/   8671E : 6A04                		bpl.s	loc_71C22
(1)  153/   86720 : 4EBA 0C40           		jsr	sub_72850(pc)
(1)  154/   86724 :                     
(1)  155/   86724 :                     loc_71C22:
(1)  156/   86724 : 51CF FFF2           		dbf	d7,loc_71C16
(1)  157/   86728 : 1D7C 0040 000E      		move.b	#$40,$E(a6)
(1)  158/   8672E : DAFC 0030           		adda.w	#$30,a5
(1)  159/   86732 : 4A15                		tst.b	(a5)
(1)  160/   86734 : 6A04                		bpl.s	loc_71C38
(1)  161/   86736 : 4EBA 0094           		jsr	sub_71CCA(pc)
(1)  162/   8673A :                     
(1)  163/   8673A :                     loc_71C38:
(1)  164/   8673A : DAFC 0030           		adda.w	#$30,a5
(1)  165/   8673E : 4A15                		tst.b	(a5)
(1)  166/   86740 : 6A04                		bpl.s	loc_71C44
(1)  167/   86742 : 4EBA 0C1E           		jsr	sub_72850(pc)
(1)  168/   86746 :                     
(1)  169/   86746 :                     loc_71C44:
(1)  170/   86746 : 33FC 0000 00A1      		move.w	#0,($A11100).l	; start	the Z80
            8674C : 1100             
(1)  171/   8674E : 4E75                		rts	
(1)  172/   86750 :                     ; End of function sub_71B4C
(1)  173/   86750 :                     
(1)  174/   86750 :                     
(1)  175/   86750 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1)  176/   86750 :                     
(1)  177/   86750 :                     
(1)  178/   86750 :                     sub_71C4E:				; XREF: sub_71B4C
(1)  179/   86750 : 532D 000E           		subq.b	#1,$E(a5)
(1)  180/   86754 : 6656                		bne.s	locret_71CAA
(1)  181/   86756 : 1D7C 0080 0008      		move.b	#$80,8(a6)
(1)  182/   8675C : 286D 0004           		movea.l	4(a5),a4
(1)  183/   86760 :                     
(1)  184/   86760 :                     loc_71C5E:
(1)  185/   86760 : 7A00                		moveq	#0,d5
(1)  186/   86762 : 1A1C                		move.b	(a4)+,d5
(1)  187/   86764 : 0C05 00E0           		cmpi.b	#-$20,d5
(1)  188/   86768 : 6506                		bcs.s	loc_71C6E
(1)  189/   8676A : 4EBA 0E00           		jsr	sub_72A5A(pc)
(1)  190/   8676E : 60F0                		bra.s	loc_71C5E
(1)  191/   86770 :                     ; ===========================================================================
(1)  192/   86770 :                     
(1)  193/   86770 :                     loc_71C6E:
(1)  194/   86770 : 4A05                		tst.b	d5
(1)  195/   86772 : 6A12                		bpl.s	loc_71C84
(1)  196/   86774 : 1B45 0010           		move.b	d5,$10(a5)
(1)  197/   86778 : 1A1C                		move.b	(a4)+,d5
(1)  198/   8677A : 6A0A                		bpl.s	loc_71C84
(1)  199/   8677C : 534C                		subq.w	#1,a4
(1)  200/   8677E : 1B6D 000F 000E      		move.b	$F(a5),$E(a5)
(1)  201/   86784 : 6004                		bra.s	loc_71C88
(1)  202/   86786 :                     ; ===========================================================================
(1)  203/   86786 :                     
(1)  204/   86786 :                     loc_71C84:
(1)  205/   86786 : 4EBA 00BA           		jsr	sub_71D40(pc)
(1)  206/   8678A :                     
(1)  207/   8678A :                     loc_71C88:
(1)  208/   8678A : 2B4C 0004           		move.l	a4,4(a5)
(1)  209/   8678E : 0815 0002           		btst	#2,(a5)
(1)  210/   86792 : 6618                		bne.s	locret_71CAA
(1)  211/   86794 : 7000                		moveq	#0,d0
(1)  212/   86796 : 102D 0010           		move.b	$10(a5),d0
(1)  213/   8679A : 0C00 0080           		cmpi.b	#$80,d0
(1)  214/   8679E : 670C                		beq.s	locret_71CAA
(1)  215/   867A0 : 0800 0003           		btst	#3,d0
(1)  216/   867A4 : 6608                		bne.s	loc_71CAC
(1)  217/   867A6 : 13C0 00A0 1FFF      		move.b	d0,($A01FFF).l
(1)  218/   867AC :                     
(1)  219/   867AC :                     locret_71CAA:
(1)  220/   867AC : 4E75                		rts	
(1)  221/   867AE :                     ; ===========================================================================
(1)  222/   867AE :                     
(1)  223/   867AE :                     loc_71CAC:
(1)  224/   867AE : 0400 0088           		subi.b	#$88,d0
(1)  225/   867B2 : 103B 0012           		move.b	byte_71CC4(pc,d0.w),d0
(1)  226/   867B6 : 13C0 00A0 00EA      		move.b	d0,($A000EA).l
(1)  227/   867BC : 13FC 0083 00A0      		move.b	#$83,($A01FFF).l
            867C2 : 1FFF             
(1)  228/   867C4 : 4E75                		rts	
(1)  229/   867C6 :                     ; End of function sub_71C4E
(1)  230/   867C6 :                     
(1)  231/   867C6 :                     ; ===========================================================================
(1)  232/   867C6 : 1215 1C1D FFFF      byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
(1)  233/   867CC :                     
(1)  234/   867CC :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1)  235/   867CC :                     
(1)  236/   867CC :                     
(1)  237/   867CC :                     sub_71CCA:				; XREF: sub_71B4C
(1)  238/   867CC : 532D 000E           		subq.b	#1,$E(a5)
(1)  239/   867D0 : 6610                		bne.s	loc_71CE0
(1)  240/   867D2 : 0895 0004           		bclr	#4,(a5)
(1)  241/   867D6 : 4EBA 0016           		jsr	sub_71CEC(pc)
(1)  242/   867DA : 4EBA 013E           		jsr	sub_71E18(pc)
(1)  243/   867DE : 6000 0A14           		bra.w	loc_726E2
(1)  244/   867E2 :                     ; ===========================================================================
(1)  245/   867E2 :                     
(1)  246/   867E2 :                     loc_71CE0:
(1)  247/   867E2 : 4EBA 00BC           		jsr	sub_71D9E(pc)
(1)  248/   867E6 : 4EBA 00E0           		jsr	sub_71DC6(pc)
(1)  249/   867EA : 6000 013A           		bra.w	loc_71E24
(1)  250/   867EE :                     ; End of function sub_71CCA
(1)  251/   867EE :                     
(1)  252/   867EE :                     
(1)  253/   867EE :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1)  254/   867EE :                     
(1)  255/   867EE :                     
(1)  256/   867EE :                     sub_71CEC:				; XREF: sub_71CCA
(1)  257/   867EE : 286D 0004           		movea.l	4(a5),a4
(1)  258/   867F2 : 0895 0001           		bclr	#1,(a5)
(1)  259/   867F6 :                     
(1)  260/   867F6 :                     loc_71CF4:
(1)  261/   867F6 : 7A00                		moveq	#0,d5
(1)  262/   867F8 : 1A1C                		move.b	(a4)+,d5
(1)  263/   867FA : 0C05 00E0           		cmpi.b	#-$20,d5
(1)  264/   867FE : 6506                		bcs.s	loc_71D04
(1)  265/   86800 : 4EBA 0D6A           		jsr	sub_72A5A(pc)
(1)  266/   86804 : 60F0                		bra.s	loc_71CF4
(1)  267/   86806 :                     ; ===========================================================================
(1)  268/   86806 :                     
(1)  269/   86806 :                     loc_71D04:
(1)  270/   86806 : 4EBA 0A08           		jsr	sub_726FE(pc)
(1)  271/   8680A : 4A05                		tst.b	d5
(1)  272/   8680C : 6A0E                		bpl.s	loc_71D1A
(1)  273/   8680E : 4EBA 0014           		jsr	sub_71D22(pc)
(1)  274/   86812 : 1A1C                		move.b	(a4)+,d5
(1)  275/   86814 : 6A06                		bpl.s	loc_71D1A
(1)  276/   86816 : 534C                		subq.w	#1,a4
(1)  277/   86818 : 6000 0048           		bra.w	sub_71D60
(1)  278/   8681C :                     ; ===========================================================================
(1)  279/   8681C :                     
(1)  280/   8681C :                     loc_71D1A:
(1)  281/   8681C : 4EBA 0024           		jsr	sub_71D40(pc)
(1)  282/   86820 : 6000 0040           		bra.w	sub_71D60
(1)  283/   86824 :                     ; End of function sub_71CEC
(1)  284/   86824 :                     
(1)  285/   86824 :                     
(1)  286/   86824 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1)  287/   86824 :                     
(1)  288/   86824 :                     
(1)  289/   86824 :                     sub_71D22:				; XREF: sub_71CEC
(1)  290/   86824 : 0405 0080           		subi.b	#$80,d5
(1)  291/   86828 : 6730                		beq.s	loc_71D58
(1)  292/   8682A : DA2D 0008           		add.b	8(a5),d5
(1)  293/   8682E : 0245 007F           		andi.w	#$7F,d5
(1)  294/   86832 : E34D                		lsl.w	#1,d5
(1)  295/   86834 : 41FA 0A6C           		lea	word_72790(pc),a0
(1)  296/   86838 : 3C30 5000           		move.w	(a0,d5.w),d6
(1)  297/   8683C : 3B46 0010           		move.w	d6,$10(a5)
(1)  298/   86840 : 4E75                		rts	
(1)  299/   86842 :                     ; End of function sub_71D22
(1)  300/   86842 :                     
(1)  301/   86842 :                     
(1)  302/   86842 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1)  303/   86842 :                     
(1)  304/   86842 :                     
(1)  305/   86842 :                     sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
(1)  306/   86842 : 1005                		move.b	d5,d0
(1)  307/   86844 : 122D 0002           		move.b	2(a5),d1
(1)  308/   86848 :                     
(1)  309/   86848 :                     loc_71D46:
(1)  310/   86848 : 5301                		subq.b	#1,d1
(1)  311/   8684A : 6704                		beq.s	loc_71D4E
(1)  312/   8684C : D005                		add.b	d5,d0
(1)  313/   8684E : 60F8                		bra.s	loc_71D46
(1)  314/   86850 :                     ; ===========================================================================
(1)  315/   86850 :                     
(1)  316/   86850 :                     loc_71D4E:
(1)  317/   86850 : 1B40 000F           		move.b	d0,$F(a5)
(1)  318/   86854 : 1B40 000E           		move.b	d0,$E(a5)
(1)  319/   86858 : 4E75                		rts	
(1)  320/   8685A :                     ; End of function sub_71D40
(1)  321/   8685A :                     
(1)  322/   8685A :                     ; ===========================================================================
(1)  323/   8685A :                     
(1)  324/   8685A :                     loc_71D58:				; XREF: sub_71D22
(1)  325/   8685A : 08D5 0001           		bset	#1,(a5)
(1)  326/   8685E : 426D 0010           		clr.w	$10(a5)
(1)  327/   86862 :                     
(1)  328/   86862 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1)  329/   86862 :                     
(1)  330/   86862 :                     
(1)  331/   86862 :                     sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
(1)  332/   86862 : 2B4C 0004           		move.l	a4,4(a5)
(1)  333/   86866 : 1B6D 000F 000E      		move.b	$F(a5),$E(a5)
(1)  334/   8686C : 0815 0004           		btst	#4,(a5)
(1)  335/   86870 : 662C                		bne.s	locret_71D9C
(1)  336/   86872 : 1B6D 0013 0012      		move.b	$13(a5),$12(a5)
(1)  337/   86878 : 422D 000C           		clr.b	$C(a5)
(1)  338/   8687C : 0815 0003           		btst	#3,(a5)
(1)  339/   86880 : 671C                		beq.s	locret_71D9C
(1)  340/   86882 : 206D 0014           		movea.l	$14(a5),a0
(1)  341/   86886 : 1B58 0018           		move.b	(a0)+,$18(a5)
(1)  342/   8688A : 1B58 0019           		move.b	(a0)+,$19(a5)
(1)  343/   8688E : 1B58 001A           		move.b	(a0)+,$1A(a5)
(1)  344/   86892 : 1018                		move.b	(a0)+,d0
(1)  345/   86894 : E208                		lsr.b	#1,d0
(1)  346/   86896 : 1B40 001B           		move.b	d0,$1B(a5)
(1)  347/   8689A : 426D 001C           		clr.w	$1C(a5)
(1)  348/   8689E :                     
(1)  349/   8689E :                     locret_71D9C:
(1)  350/   8689E : 4E75                		rts	
(1)  351/   868A0 :                     ; End of function sub_71D60
(1)  352/   868A0 :                     
(1)  353/   868A0 :                     
(1)  354/   868A0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1)  355/   868A0 :                     
(1)  356/   868A0 :                     
(1)  357/   868A0 :                     sub_71D9E:				; XREF: sub_71CCA; sub_72850
(1)  358/   868A0 : 4A2D 0012           		tst.b	$12(a5)
(1)  359/   868A4 : 6720                		beq.s	locret_71DC4
(1)  360/   868A6 : 532D 0012           		subq.b	#1,$12(a5)
(1)  361/   868AA : 661A                		bne.s	locret_71DC4
(1)  362/   868AC : 08D5 0001           		bset	#1,(a5)
(1)  363/   868B0 : 4A2D 0001           		tst.b	1(a5)
(1)  364/   868B4 : 6B00 000A           		bmi.w	loc_71DBE
(1)  365/   868B8 : 4EBA 0956           		jsr	sub_726FE(pc)
(1)  366/   868BC : 584F                		addq.w	#4,sp
(1)  367/   868BE : 4E75                		rts	
(1)  368/   868C0 :                     ; ===========================================================================
(1)  369/   868C0 :                     
(1)  370/   868C0 :                     loc_71DBE:
(1)  371/   868C0 : 4EBA 0BF0           		jsr	sub_729A0(pc)
(1)  372/   868C4 : 584F                		addq.w	#4,sp
(1)  373/   868C6 :                     
(1)  374/   868C6 :                     locret_71DC4:
(1)  375/   868C6 : 4E75                		rts	
(1)  376/   868C8 :                     ; End of function sub_71D9E
(1)  377/   868C8 :                     
(1)  378/   868C8 :                     
(1)  379/   868C8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1)  380/   868C8 :                     
(1)  381/   868C8 :                     
(1)  382/   868C8 :                     sub_71DC6:				; XREF: sub_71CCA; sub_72850
(1)  383/   868C8 : 584F                		addq.w	#4,sp
(1)  384/   868CA : 0815 0003           		btst	#3,(a5)
(1)  385/   868CE : 6748                		beq.s	locret_71E16
(1)  386/   868D0 : 4A2D 0018           		tst.b	$18(a5)
(1)  387/   868D4 : 6706                		beq.s	loc_71DDA
(1)  388/   868D6 : 532D 0018           		subq.b	#1,$18(a5)
(1)  389/   868DA : 4E75                		rts	
(1)  390/   868DC :                     ; ===========================================================================
(1)  391/   868DC :                     
(1)  392/   868DC :                     loc_71DDA:
(1)  393/   868DC : 532D 0019           		subq.b	#1,$19(a5)
(1)  394/   868E0 : 6702                		beq.s	loc_71DE2
(1)  395/   868E2 : 4E75                		rts	
(1)  396/   868E4 :                     ; ===========================================================================
(1)  397/   868E4 :                     
(1)  398/   868E4 :                     loc_71DE2:
(1)  399/   868E4 : 206D 0014           		movea.l	$14(a5),a0
(1)  400/   868E8 : 1B68 0001 0019      		move.b	1(a0),$19(a5)
(1)  401/   868EE : 4A2D 001B           		tst.b	$1B(a5)
(1)  402/   868F2 : 660C                		bne.s	loc_71DFE
(1)  403/   868F4 : 1B68 0003 001B      		move.b	3(a0),$1B(a5)
(1)  404/   868FA : 442D 001A           		neg.b	$1A(a5)
(1)  405/   868FE : 4E75                		rts	
(1)  406/   86900 :                     ; ===========================================================================
(1)  407/   86900 :                     
(1)  408/   86900 :                     loc_71DFE:
(1)  409/   86900 : 532D 001B           		subq.b	#1,$1B(a5)
(1)  410/   86904 : 1C2D 001A           		move.b	$1A(a5),d6
(1)  411/   86908 : 4886                		ext.w	d6
(1)  412/   8690A : DC6D 001C           		add.w	$1C(a5),d6
(1)  413/   8690E : 3B46 001C           		move.w	d6,$1C(a5)
(1)  414/   86912 : DC6D 0010           		add.w	$10(a5),d6
(1)  415/   86916 : 594F                		subq.w	#4,sp
(1)  416/   86918 :                     
(1)  417/   86918 :                     locret_71E16:
(1)  418/   86918 : 4E75                		rts	
(1)  419/   8691A :                     ; End of function sub_71DC6
(1)  420/   8691A :                     
(1)  421/   8691A :                     
(1)  422/   8691A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1)  423/   8691A :                     
(1)  424/   8691A :                     
(1)  425/   8691A :                     sub_71E18:				; XREF: sub_71CCA
(1)  426/   8691A : 0815 0001           		btst	#1,(a5)
(1)  427/   8691E : 662A                		bne.s	locret_71E48
(1)  428/   86920 : 3C2D 0010           		move.w	$10(a5),d6
(1)  429/   86924 : 6726                		beq.s	loc_71E4A
(1)  430/   86926 :                     
(1)  431/   86926 :                     loc_71E24:				; XREF: sub_71CCA
(1)  432/   86926 : 102D 001E           		move.b	$1E(a5),d0
(1)  433/   8692A : 4880                		ext.w	d0
(1)  434/   8692C : DC40                		add.w	d0,d6
(1)  435/   8692E : 0815 0002           		btst	#2,(a5)
(1)  436/   86932 : 6616                		bne.s	locret_71E48
(1)  437/   86934 : 3206                		move.w	d6,d1
(1)  438/   86936 : E049                		lsr.w	#8,d1
(1)  439/   86938 : 103C 00A4           		move.b	#-$5C,d0
(1)  440/   8693C : 4EBA 08F6           		jsr	sub_72722(pc)
(1)  441/   86940 : 1206                		move.b	d6,d1
(1)  442/   86942 : 103C 00A0           		move.b	#-$60,d0
(1)  443/   86946 : 4EBA 08EC           		jsr	sub_72722(pc)
(1)  444/   8694A :                     
(1)  445/   8694A :                     locret_71E48:
(1)  446/   8694A : 4E75                		rts	
(1)  447/   8694C :                     ; ===========================================================================
(1)  448/   8694C :                     
(1)  449/   8694C :                     loc_71E4A:
(1)  450/   8694C : 08D5 0001           		bset	#1,(a5)
(1)  451/   86950 : 4E75                		rts	
(1)  452/   86952 :                     ; End of function sub_71E18
(1)  453/   86952 :                     
(1)  454/   86952 :                     ; ===========================================================================
(1)  455/   86952 :                     
(1)  456/   86952 :                     loc_71E50:				; XREF: sub_71B4C
(1)  457/   86952 : 6B42                		bmi.s	loc_71E94
(1)  458/   86954 : 0C2E 0002 0003      		cmpi.b	#2,3(a6)
(1)  459/   8695A : 6700 00A4           		beq.w	loc_71EFE
(1)  460/   8695E : 1D7C 0002 0003      		move.b	#2,3(a6)
(1)  461/   86964 : 7602                		moveq	#2,d3
(1)  462/   86966 : 103C 00B4           		move.b	#-$4C,d0
(1)  463/   8696A : 7200                		moveq	#0,d1
(1)  464/   8696C :                     
(1)  465/   8696C :                     loc_71E6A:
(1)  466/   8696C : 4EBA 08D2           		jsr	sub_7272E(pc)
(1)  467/   86970 : 4EBA 0904           		jsr	sub_72764(pc)
(1)  468/   86974 : 5200                		addq.b	#1,d0
(1)  469/   86976 : 51CB FFF4           		dbf	d3,loc_71E6A
(1)  470/   8697A :                     
(1)  471/   8697A : 7602                		moveq	#2,d3
(1)  472/   8697C : 7028                		moveq	#$28,d0
(1)  473/   8697E :                     
(1)  474/   8697E :                     loc_71E7C:
(1)  475/   8697E : 1203                		move.b	d3,d1
(1)  476/   86980 : 4EBA 08BE           		jsr	sub_7272E(pc)
(1)  477/   86984 : 5801                		addq.b	#4,d1
(1)  478/   86986 : 4EBA 08B8           		jsr	sub_7272E(pc)
(1)  479/   8698A : 51CB FFF2           		dbf	d3,loc_71E7C
(1)  480/   8698E :                     
(1)  481/   8698E : 4EBA 0B38           		jsr	sub_729B6(pc)
(1)  482/   86992 : 6000 FDB2           		bra.w	loc_71C44
(1)  483/   86996 :                     ; ===========================================================================
(1)  484/   86996 :                     
(1)  485/   86996 :                     loc_71E94:				; XREF: loc_71E50
(1)  486/   86996 : 422E 0003           		clr.b	3(a6)
(1)  487/   8699A : 7630                		moveq	#$30,d3
(1)  488/   8699C : 4BEE 0040           		lea	$40(a6),a5
(1)  489/   869A0 : 7806                		moveq	#6,d4
(1)  490/   869A2 :                     
(1)  491/   869A2 :                     loc_71EA0:
(1)  492/   869A2 : 0815 0007           		btst	#7,(a5)
(1)  493/   869A6 : 6712                		beq.s	loc_71EB8
(1)  494/   869A8 : 0815 0002           		btst	#2,(a5)
(1)  495/   869AC : 660C                		bne.s	loc_71EB8
(1)  496/   869AE : 103C 00B4           		move.b	#-$4C,d0
(1)  497/   869B2 : 122D 000A           		move.b	$A(a5),d1
(1)  498/   869B6 : 4EBA 087C           		jsr	sub_72722(pc)
(1)  499/   869BA :                     
(1)  500/   869BA :                     loc_71EB8:
(1)  501/   869BA : DAC3                		adda.w	d3,a5
(1)  502/   869BC : 51CC FFE4           		dbf	d4,loc_71EA0
(1)  503/   869C0 :                     
(1)  504/   869C0 : 4BEE 0220           		lea	$220(a6),a5
(1)  505/   869C4 : 7802                		moveq	#2,d4
(1)  506/   869C6 :                     
(1)  507/   869C6 :                     loc_71EC4:
(1)  508/   869C6 : 0815 0007           		btst	#7,(a5)
(1)  509/   869CA : 6712                		beq.s	loc_71EDC
(1)  510/   869CC : 0815 0002           		btst	#2,(a5)
(1)  511/   869D0 : 660C                		bne.s	loc_71EDC
(1)  512/   869D2 : 103C 00B4           		move.b	#-$4C,d0
(1)  513/   869D6 : 122D 000A           		move.b	$A(a5),d1
(1)  514/   869DA : 4EBA 0858           		jsr	sub_72722(pc)
(1)  515/   869DE :                     
(1)  516/   869DE :                     loc_71EDC:
(1)  517/   869DE : DAC3                		adda.w	d3,a5
(1)  518/   869E0 : 51CC FFE4           		dbf	d4,loc_71EC4
(1)  519/   869E4 :                     
(1)  520/   869E4 : 4BEE 0340           		lea	$340(a6),a5
(1)  521/   869E8 : 0815 0007           		btst	#7,(a5)
(1)  522/   869EC : 6712                		beq.s	loc_71EFE
(1)  523/   869EE : 0815 0002           		btst	#2,(a5)
(1)  524/   869F2 : 660C                		bne.s	loc_71EFE
(1)  525/   869F4 : 103C 00B4           		move.b	#-$4C,d0
(1)  526/   869F8 : 122D 000A           		move.b	$A(a5),d1
(1)  527/   869FC : 4EBA 0836           		jsr	sub_72722(pc)
(1)  528/   86A00 :                     
(1)  529/   86A00 :                     loc_71EFE:
(1)  530/   86A00 : 6000 FD44           		bra.w	loc_71C44
(1)  531/   86A04 :                     
(1)  532/   86A04 :                     ; ---------------------------------------------------------------------------
(1)  533/   86A04 :                     ; Subroutine to	play a sound or	music track
(1)  534/   86A04 :                     ; ---------------------------------------------------------------------------
(1)  535/   86A04 :                     
(1)  536/   86A04 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1)  537/   86A04 :                     
(1)  538/   86A04 :                     
(1)  539/   86A04 :                     Sound_Play:				; XREF: sub_71B4C
(1)  540/   86A04 : 2079 0008 6492      		movea.l	(Go_SoundTypes).l,a0
(1)  541/   86A0A : 43EE 000A           		lea	$A(a6),a1	; load music track number
(1)  542/   86A0E : 1616                		move.b	0(a6),d3
(1)  543/   86A10 : 7802                		moveq	#2,d4
(1)  544/   86A12 :                     
(1)  545/   86A12 :                     loc_71F12:
(1)  546/   86A12 : 1011                		move.b	(a1),d0		; move track number to d0
(1)  547/   86A14 : 1200                		move.b	d0,d1
(1)  548/   86A16 : 4219                		clr.b	(a1)+
(1)  549/   86A18 : 0400 0081           		subi.b	#$81,d0
(1)  550/   86A1C : 6520                		bcs.s	loc_71F3E
(1)  551/   86A1E : 0C2E 0080 0009      		cmpi.b	#$80,9(a6)
(1)  552/   86A24 : 6706                		beq.s	loc_71F2C
(1)  553/   86A26 : 1D41 000A           		move.b	d1,$A(a6)
(1)  554/   86A2A : 6012                		bra.s	loc_71F3E
(1)  555/   86A2C :                     ; ===========================================================================
(1)  556/   86A2C :                     
(1)  557/   86A2C :                     loc_71F2C:
(1)  558/   86A2C : 0240 007F           		andi.w	#$7F,d0
(1)  559/   86A30 : 1430 0000           		move.b	(a0,d0.w),d2
(1)  560/   86A34 : B403                		cmp.b	d3,d2
(1)  561/   86A36 : 6506                		bcs.s	loc_71F3E
(1)  562/   86A38 : 1602                		move.b	d2,d3
(1)  563/   86A3A : 1D41 0009           		move.b	d1,9(a6)	; set music flag
(1)  564/   86A3E :                     
(1)  565/   86A3E :                     loc_71F3E:
(1)  566/   86A3E : 51CC FFD2           		dbf	d4,loc_71F12
(1)  567/   86A42 :                     
(1)  568/   86A42 : 4A03                		tst.b	d3
(1)  569/   86A44 : 6B02                		bmi.s	locret_71F4A
(1)  570/   86A46 : 1C83                		move.b	d3,0(a6)
(1)  571/   86A48 :                     
(1)  572/   86A48 :                     locret_71F4A:
(1)  573/   86A48 : 4E75                		rts	
(1)  574/   86A4A :                     ; End of function Sound_Play
(1)  575/   86A4A :                     
(1)  576/   86A4A :                     
(1)  577/   86A4A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1)  578/   86A4A :                     
(1)  579/   86A4A :                     
(1)  580/   86A4A :                     Sound_ChkValue:				; XREF: sub_71B4C
(1)  581/   86A4A : 7E00                		moveq	#0,d7
(1)  582/   86A4C : 1E2E 0009           		move.b	9(a6),d7
(1)  583/   86A50 : 6700 0662           		beq.w	Sound_E4
(1)  584/   86A54 : 6A34                		bpl.s	locret_71F8C
(1)  585/   86A56 : 1D7C 0080 0009      		move.b	#$80,9(a6)	; reset	music flag
(1)  586/   86A5C : 0C07 009F           		cmpi.b	#$9F,d7
(1)  587/   86A60 : 6300 008E           		bls.w	Sound_81to9F	; music	$81-$9F
(1)  588/   86A64 : 0C07 00A0           		cmpi.b	#$A0,d7
(1)  589/   86A68 : 6500 0020           		bcs.w	locret_71F8C
(1)  590/   86A6C : 0C07 00CF           		cmpi.b	#$CF,d7
(1)  591/   86A70 : 6300 026E           		bls.w	Sound_A0toCF	; sound	$A0-$CF
(1)  592/   86A74 : 0C07 00D0           		cmpi.b	#$D0,d7
(1)  593/   86A78 : 6500 0010           		bcs.w	locret_71F8C
(1)  594/   86A7C : 0C07 00E0           		cmpi.b	#$E0,d7
(1)  595/   86A80 : 6500 03A2           		bcs.w	Sound_D0toDF	; sound	$D0-$DF
(1)  596/   86A84 : 0C07 00E4           		cmpi.b	#$E4,d7
(1)  597/   86A88 : 6302                		bls.s	Sound_E0toE4	; sound	$E0-$E4
(1)  598/   86A8A :                     
(1)  599/   86A8A :                     locret_71F8C:
(1)  600/   86A8A : 4E75                		rts	
(1)  601/   86A8C :                     ; ===========================================================================
(1)  602/   86A8C :                     
(1)  603/   86A8C :                     Sound_E0toE4:				; XREF: Sound_ChkValue
(1)  604/   86A8C : 0407 00E0           		subi.b	#$E0,d7
(1)  605/   86A90 : E54F                		lsl.w	#2,d7
(1)  606/   86A92 : 4EFB 7002           		jmp	Sound_ExIndex(pc,d7.w)
(1)  607/   86A96 :                     ; ===========================================================================
(1)  608/   86A96 :                     
(1)  609/   86A96 :                     Sound_ExIndex:
(1)  610/   86A96 : 6000 0564           		bra.w	Sound_E0
(1)  611/   86A9A :                     ; ===========================================================================
(1)  612/   86A9A : 6000 000E           		bra.w	Sound_E1
(1)  613/   86A9E :                     ; ===========================================================================
(1)  614/   86A9E : 6000 0696           		bra.w	Sound_E2
(1)  615/   86AA2 :                     ; ===========================================================================
(1)  616/   86AA2 : 6000 06C0           		bra.w	Sound_E3
(1)  617/   86AA6 :                     ; ===========================================================================
(1)  618/   86AA6 : 6000 060C           		bra.w	Sound_E4
(1)  619/   86AAA :                     ; ===========================================================================
(1)  620/   86AAA :                     ; ---------------------------------------------------------------------------
(1)  621/   86AAA :                     ; Play "Say-gaa" PCM sound
(1)  622/   86AAA :                     ; ---------------------------------------------------------------------------
(1)  623/   86AAA :                     
(1)  624/   86AAA :                     Sound_E1:				  
(1)  625/   86AAA : 45F9 0008 E198      		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
(1)  626/   86AB0 : 263C 0000 6978      		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
(1)  627/   86AB6 : 13FC 002A 00A0      		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
            86ABC : 4000             
(1)  628/   86ABE :                     PlayPCM_Loop:	  
(1)  629/   86ABE : 13DA 00A0 4001      		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
(1)  630/   86AC4 : 303C 0014           		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
(1)  631/   86AC8 : 51C8 FFFE           		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
(1)  632/   86ACC : 96BC 0000 0001      		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
(1)  633/   86AD2 : 6718                		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
(1)  634/   86AD4 : 41F8 F604           		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
(1)  635/   86AD8 : 43F9 00A1 0003      		lea	($A10003).l,a1			; address where JoyPad states are read from 
(1)  636/   86ADE : 4EB8 0FDA           		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
(1)  637/   86AE2 : 0838 0007 F604      		btst	#7,($FFFFF604).w		; Check for Start button 
(1)  638/   86AE8 : 6602                		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
(1)  639/   86AEA : 60D2                		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
(1)  640/   86AEC :                     return_PlayPCM: 
(1)  641/   86AEC : 584F                		addq.w	#4,sp 
(1)  642/   86AEE : 4E75                		rts
(1)  643/   86AF0 :                     
(1)  644/   86AF0 :                     ; ===========================================================================
(1)  645/   86AF0 :                     ; ---------------------------------------------------------------------------
(1)  646/   86AF0 :                     ; Play music track $81-$9F
(1)  647/   86AF0 :                     ; ---------------------------------------------------------------------------
(1)  648/   86AF0 :                     
(1)  649/   86AF0 :                     Sound_81to9F:				; XREF: Sound_ChkValue
(1)  650/   86AF0 : 0C07 0088           		cmpi.b	#$88,d7		; is "extra life" music	played?
(1)  651/   86AF4 : 6648                		bne.s	loc_72024	; if not, branch
(1)  652/   86AF6 : 4A2E 0027           		tst.b	$27(a6)
(1)  653/   86AFA : 6600 01D4           		bne.w	loc_721B6
(1)  654/   86AFE : 4BEE 0040           		lea	$40(a6),a5
(1)  655/   86B02 : 7009                		moveq	#9,d0
(1)  656/   86B04 :                     
(1)  657/   86B04 :                     loc_71FE6:
(1)  658/   86B04 : 0895 0002           		bclr	#2,(a5)
(1)  659/   86B08 : DAFC 0030           		adda.w	#$30,a5
(1)  660/   86B0C : 51C8 FFF6           		dbf	d0,loc_71FE6
(1)  661/   86B10 :                     
(1)  662/   86B10 : 4BEE 0220           		lea	$220(a6),a5
(1)  663/   86B14 : 7005                		moveq	#5,d0
(1)  664/   86B16 :                     
(1)  665/   86B16 :                     loc_71FF8:
(1)  666/   86B16 : 0895 0007           		bclr	#7,(a5)
(1)  667/   86B1A : DAFC 0030           		adda.w	#$30,a5
(1)  668/   86B1E : 51C8 FFF6           		dbf	d0,loc_71FF8
(1)  669/   86B22 : 4216                		clr.b	0(a6)
(1)  670/   86B24 : 204E                		movea.l	a6,a0
(1)  671/   86B26 : 43EE 03A0           		lea	$3A0(a6),a1
(1)  672/   86B2A : 303C 0087           		move.w	#$87,d0
(1)  673/   86B2E :                     
(1)  674/   86B2E :                     loc_72012:
(1)  675/   86B2E : 22D8                		move.l	(a0)+,(a1)+
(1)  676/   86B30 : 51C8 FFFC           		dbf	d0,loc_72012
(1)  677/   86B34 :                     
(1)  678/   86B34 : 1D7C 0080 0027      		move.b	#$80,$27(a6)
(1)  679/   86B3A : 4216                		clr.b	0(a6)
(1)  680/   86B3C : 6008                		bra.s	loc_7202C
(1)  681/   86B3E :                     ; ===========================================================================
(1)  682/   86B3E :                     
(1)  683/   86B3E :                     loc_72024:
(1)  684/   86B3E : 422E 0027           		clr.b	$27(a6)
(1)  685/   86B42 : 422E 0026           		clr.b	$26(a6)
(1)  686/   86B46 :                     
(1)  687/   86B46 :                     loc_7202C:
(1)  688/   86B46 : 4EBA 0598           		jsr	sub_725CA(pc)
(1)  689/   86B4A : 2879 0008 64A2      		movea.l	(off_719A0).l,a4
(1)  690/   86B50 : 0407 0081           		subi.b	#$81,d7
(1)  691/   86B54 : 1D74 7000 0029      		move.b	(a4,d7.w),$29(a6)
(1)  692/   86B5A : 2879 0008 649A      		movea.l	(Go_MusicIndex).l,a4
(1)  693/   86B60 : E54F                		lsl.w	#2,d7
(1)  694/   86B62 : 2874 7000           		movea.l	(a4,d7.w),a4
(1)  695/   86B66 : 7000                		moveq	#0,d0
(1)  696/   86B68 : 3014                		move.w	(a4),d0
(1)  697/   86B6A : D08C                		add.l	a4,d0
(1)  698/   86B6C : 2D40 0018           		move.l	d0,$18(a6)
(1)  699/   86B70 : 102C 0005           		move.b	5(a4),d0
(1)  700/   86B74 : 1D40 0028           		move.b	d0,$28(a6)
(1)  701/   86B78 : 4A2E 002A           		tst.b	$2A(a6)
(1)  702/   86B7C : 6704                		beq.s	loc_72068
(1)  703/   86B7E : 102E 0029           		move.b	$29(a6),d0
(1)  704/   86B82 :                     
(1)  705/   86B82 :                     loc_72068:
(1)  706/   86B82 : 1D40 0002           		move.b	d0,2(a6)
(1)  707/   86B86 : 1D40 0001           		move.b	d0,1(a6)
(1)  708/   86B8A : 7200                		moveq	#0,d1
(1)  709/   86B8C : 264C                		movea.l	a4,a3
(1)  710/   86B8E : 5C4C                		addq.w	#6,a4
(1)  711/   86B90 : 7E00                		moveq	#0,d7
(1)  712/   86B92 : 1E2B 0002           		move.b	2(a3),d7
(1)  713/   86B96 : 6700 0096           		beq.w	loc_72114
(1)  714/   86B9A : 5307                		subq.b	#1,d7
(1)  715/   86B9C : 123C 00C0           		move.b	#-$40,d1
(1)  716/   86BA0 : 182B 0004           		move.b	4(a3),d4
(1)  717/   86BA4 : 7C30                		moveq	#$30,d6
(1)  718/   86BA6 : 1A3C 0001           		move.b	#1,d5
(1)  719/   86BAA : 43EE 0040           		lea	$40(a6),a1
(1)  720/   86BAE : 45FA 0124           		lea	byte_721BA(pc),a2
(1)  721/   86BB2 :                     
(1)  722/   86BB2 :                     loc_72098:
(1)  723/   86BB2 : 08D1 0007           		bset	#7,(a1)
(1)  724/   86BB6 : 135A 0001           		move.b	(a2)+,1(a1)
(1)  725/   86BBA : 1344 0002           		move.b	d4,2(a1)
(1)  726/   86BBE : 1346 000D           		move.b	d6,$D(a1)
(1)  727/   86BC2 : 1341 000A           		move.b	d1,$A(a1)
(1)  728/   86BC6 : 1345 000E           		move.b	d5,$E(a1)
(1)  729/   86BCA : 7000                		moveq	#0,d0
(1)  730/   86BCC : 301C                		move.w	(a4)+,d0
(1)  731/   86BCE : D08B                		add.l	a3,d0
(1)  732/   86BD0 : 2340 0004           		move.l	d0,4(a1)
(1)  733/   86BD4 : 335C 0008           		move.w	(a4)+,8(a1)
(1)  734/   86BD8 : D2C6                		adda.w	d6,a1
(1)  735/   86BDA : 51CF FFD6           		dbf	d7,loc_72098
(1)  736/   86BDE : 0C2B 0007 0002      		cmpi.b	#7,2(a3)
(1)  737/   86BE4 : 660C                		bne.s	loc_720D8
(1)  738/   86BE6 : 702B                		moveq	#$2B,d0
(1)  739/   86BE8 : 7200                		moveq	#0,d1
(1)  740/   86BEA : 4EBA 0654           		jsr	sub_7272E(pc)
(1)  741/   86BEE : 6000 003E           		bra.w	loc_72114
(1)  742/   86BF2 :                     ; ===========================================================================
(1)  743/   86BF2 :                     
(1)  744/   86BF2 :                     loc_720D8:
(1)  745/   86BF2 : 7028                		moveq	#$28,d0
(1)  746/   86BF4 : 7206                		moveq	#6,d1
(1)  747/   86BF6 : 4EBA 0648           		jsr	sub_7272E(pc)
(1)  748/   86BFA : 103C 0042           		move.b	#$42,d0
(1)  749/   86BFE : 727F                		moveq	#$7F,d1
(1)  750/   86C00 : 4EBA 0674           		jsr	sub_72764(pc)
(1)  751/   86C04 : 103C 004A           		move.b	#$4A,d0
(1)  752/   86C08 : 727F                		moveq	#$7F,d1
(1)  753/   86C0A : 4EBA 066A           		jsr	sub_72764(pc)
(1)  754/   86C0E : 103C 0046           		move.b	#$46,d0
(1)  755/   86C12 : 727F                		moveq	#$7F,d1
(1)  756/   86C14 : 4EBA 0660           		jsr	sub_72764(pc)
(1)  757/   86C18 : 103C 004E           		move.b	#$4E,d0
(1)  758/   86C1C : 727F                		moveq	#$7F,d1
(1)  759/   86C1E : 4EBA 0656           		jsr	sub_72764(pc)
(1)  760/   86C22 : 103C 00B6           		move.b	#-$4A,d0
(1)  761/   86C26 : 123C 00C0           		move.b	#-$40,d1
(1)  762/   86C2A : 4EBA 064A           		jsr	sub_72764(pc)
(1)  763/   86C2E :                     
(1)  764/   86C2E :                     loc_72114:
(1)  765/   86C2E : 7E00                		moveq	#0,d7
(1)  766/   86C30 : 1E2B 0003           		move.b	3(a3),d7
(1)  767/   86C34 : 6738                		beq.s	loc_72154
(1)  768/   86C36 : 5307                		subq.b	#1,d7
(1)  769/   86C38 : 43EE 0190           		lea	$190(a6),a1
(1)  770/   86C3C : 45FA 009E           		lea	byte_721C2(pc),a2
(1)  771/   86C40 :                     
(1)  772/   86C40 :                     loc_72126:
(1)  773/   86C40 : 08D1 0007           		bset	#7,(a1)
(1)  774/   86C44 : 135A 0001           		move.b	(a2)+,1(a1)
(1)  775/   86C48 : 1344 0002           		move.b	d4,2(a1)
(1)  776/   86C4C : 1346 000D           		move.b	d6,$D(a1)
(1)  777/   86C50 : 1345 000E           		move.b	d5,$E(a1)
(1)  778/   86C54 : 7000                		moveq	#0,d0
(1)  779/   86C56 : 301C                		move.w	(a4)+,d0
(1)  780/   86C58 : D08B                		add.l	a3,d0
(1)  781/   86C5A : 2340 0004           		move.l	d0,4(a1)
(1)  782/   86C5E : 335C 0008           		move.w	(a4)+,8(a1)
(1)  783/   86C62 : 101C                		move.b	(a4)+,d0
(1)  784/   86C64 : 135C 000B           		move.b	(a4)+,$B(a1)
(1)  785/   86C68 : D2C6                		adda.w	d6,a1
(1)  786/   86C6A : 51CF FFD4           		dbf	d7,loc_72126
(1)  787/   86C6E :                     
(1)  788/   86C6E :                     loc_72154:
(1)  789/   86C6E : 43EE 0220           		lea	$220(a6),a1
(1)  790/   86C72 : 7E05                		moveq	#5,d7
(1)  791/   86C74 :                     
(1)  792/   86C74 :                     loc_7215A:
(1)  793/   86C74 : 4A11                		tst.b	(a1)
(1)  794/   86C76 : 6A00 001E           		bpl.w	loc_7217C
(1)  795/   86C7A : 7000                		moveq	#0,d0
(1)  796/   86C7C : 1029 0001           		move.b	1(a1),d0
(1)  797/   86C80 : 6B06                		bmi.s	loc_7216E
(1)  798/   86C82 : 5500                		subq.b	#2,d0
(1)  799/   86C84 : E508                		lsl.b	#2,d0
(1)  800/   86C86 : 6002                		bra.s	loc_72170
(1)  801/   86C88 :                     ; ===========================================================================
(1)  802/   86C88 :                     
(1)  803/   86C88 :                     loc_7216E:
(1)  804/   86C88 : E608                		lsr.b	#3,d0
(1)  805/   86C8A :                     
(1)  806/   86C8A :                     loc_72170:
(1)  807/   86C8A : 41FA 0158           		lea	dword_722CC(pc),a0
(1)  808/   86C8E : 2070 0000           		movea.l	(a0,d0.w),a0
(1)  809/   86C92 : 08D0 0002           		bset	#2,(a0)
(1)  810/   86C96 :                     
(1)  811/   86C96 :                     loc_7217C:
(1)  812/   86C96 : D2C6                		adda.w	d6,a1
(1)  813/   86C98 : 51CF FFDA           		dbf	d7,loc_7215A
(1)  814/   86C9C :                     
(1)  815/   86C9C : 4A6E 0340           		tst.w	$340(a6)
(1)  816/   86CA0 : 6A06                		bpl.s	loc_7218E
(1)  817/   86CA2 : 08EE 0002 0100      		bset	#2,$100(a6)
(1)  818/   86CA8 :                     
(1)  819/   86CA8 :                     loc_7218E:
(1)  820/   86CA8 : 4A6E 0370           		tst.w	$370(a6)
(1)  821/   86CAC : 6A06                		bpl.s	loc_7219A
(1)  822/   86CAE : 08EE 0002 01F0      		bset	#2,$1F0(a6)
(1)  823/   86CB4 :                     
(1)  824/   86CB4 :                     loc_7219A:
(1)  825/   86CB4 : 4BEE 0070           		lea	$70(a6),a5
(1)  826/   86CB8 : 7805                		moveq	#5,d4
(1)  827/   86CBA :                     
(1)  828/   86CBA :                     loc_721A0:
(1)  829/   86CBA : 4EBA 0554           		jsr	sub_726FE(pc)
(1)  830/   86CBE : DAC6                		adda.w	d6,a5
(1)  831/   86CC0 : 51CC FFF8           		dbf	d4,loc_721A0
(1)  832/   86CC4 : 7802                		moveq	#2,d4
(1)  833/   86CC6 :                     
(1)  834/   86CC6 :                     loc_721AC:
(1)  835/   86CC6 : 4EBA 07EA           		jsr	sub_729A0(pc)
(1)  836/   86CCA : DAC6                		adda.w	d6,a5
(1)  837/   86CCC : 51CC FFF8           		dbf	d4,loc_721AC
(1)  838/   86CD0 :                     
(1)  839/   86CD0 :                     loc_721B6:
(1)  840/   86CD0 : 584F                		addq.w	#4,sp
(1)  841/   86CD2 : 4E75                		rts	
(1)  842/   86CD4 :                     ; ===========================================================================
(1)  843/   86CD4 : 0600 0102 0405      byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
            86CDA : 0600             
(1)  844/   86CDC : (MACRO)              		even
(1)  845/   86CDC : 80A0 C000           byte_721C2:	dc.b $80, $A0, $C0, 0
(1)  846/   86CE0 : (MACRO)              		even
(1)  847/   86CE0 :                     ; ===========================================================================
(1)  848/   86CE0 :                     ; ---------------------------------------------------------------------------
(1)  849/   86CE0 :                     ; Play normal sound effect
(1)  850/   86CE0 :                     ; ---------------------------------------------------------------------------
(1)  851/   86CE0 :                     
(1)  852/   86CE0 :                     Sound_A0toCF:				; XREF: Sound_ChkValue
(1)  853/   86CE0 : 4A2E 0027           		tst.b	$27(a6)
(1)  854/   86CE4 : 6600 00FA           		bne.w	loc_722C6
(1)  855/   86CE8 : 4A2E 0004           		tst.b	4(a6)
(1)  856/   86CEC : 6600 00F2           		bne.w	loc_722C6
(1)  857/   86CF0 : 4A2E 0024           		tst.b	$24(a6)
(1)  858/   86CF4 : 6600 00EA           		bne.w	loc_722C6
(1)  859/   86CF8 : 0C07 00B5           		cmpi.b	#$B5,d7		; is ring sound	effect played?
(1)  860/   86CFC : 6610                		bne.s	Sound_notB5	; if not, branch
(1)  861/   86CFE : 4A2E 002B           		tst.b	$2B(a6)
(1)  862/   86D02 : 6604                		bne.s	loc_721EE
(1)  863/   86D04 : 1E3C 00CE           		move.b	#$CE,d7		; play ring sound in left speaker
(1)  864/   86D08 :                     
(1)  865/   86D08 :                     loc_721EE:
(1)  866/   86D08 : 086E 0000 002B      		bchg	#0,$2B(a6)	; change speaker
(1)  867/   86D0E :                     
(1)  868/   86D0E :                     Sound_notB5:
(1)  869/   86D0E : 0C07 00A7           		cmpi.b	#$A7,d7		; is "pushing" sound played?
(1)  870/   86D12 : 660E                		bne.s	Sound_notA7	; if not, branch
(1)  871/   86D14 : 4A2E 002C           		tst.b	$2C(a6)
(1)  872/   86D18 : 6600 00C4           		bne.w	locret_722C4
(1)  873/   86D1C : 1D7C 0080 002C      		move.b	#$80,$2C(a6)
(1)  874/   86D22 :                     
(1)  875/   86D22 :                     Sound_notA7:
(1)  876/   86D22 : 2079 0008 649E      		movea.l	(Go_SoundIndex).l,a0
(1)  877/   86D28 : 0407 00A0           		subi.b	#$A0,d7
(1)  878/   86D2C : E54F                		lsl.w	#2,d7
(1)  879/   86D2E : 2670 7000           		movea.l	(a0,d7.w),a3
(1)  880/   86D32 : 224B                		movea.l	a3,a1
(1)  881/   86D34 : 7200                		moveq	#0,d1
(1)  882/   86D36 : 3219                		move.w	(a1)+,d1
(1)  883/   86D38 : D28B                		add.l	a3,d1
(1)  884/   86D3A : 1A19                		move.b	(a1)+,d5
(1)  885/   86D3C : 1E19                		move.b	(a1)+,d7
(1)  886/   86D3E : 5307                		subq.b	#1,d7
(1)  887/   86D40 : 7C30                		moveq	#$30,d6
(1)  888/   86D42 :                     
(1)  889/   86D42 :                     loc_72228:
(1)  890/   86D42 : 7600                		moveq	#0,d3
(1)  891/   86D44 : 1629 0001           		move.b	1(a1),d3
(1)  892/   86D48 : 1803                		move.b	d3,d4
(1)  893/   86D4A : 6B12                		bmi.s	loc_72244
(1)  894/   86D4C : 5543                		subq.w	#2,d3
(1)  895/   86D4E : E54B                		lsl.w	#2,d3
(1)  896/   86D50 : 4BFA 0092           		lea	dword_722CC(pc),a5
(1)  897/   86D54 : 2A75 3000           		movea.l	(a5,d3.w),a5
(1)  898/   86D58 : 08D5 0002           		bset	#2,(a5)
(1)  899/   86D5C : 602A                		bra.s	loc_7226E
(1)  900/   86D5E :                     ; ===========================================================================
(1)  901/   86D5E :                     
(1)  902/   86D5E :                     loc_72244:
(1)  903/   86D5E : E64B                		lsr.w	#3,d3
(1)  904/   86D60 : 4BFA 0082           		lea	dword_722CC(pc),a5
(1)  905/   86D64 : 2A75 3000           		movea.l	(a5,d3.w),a5
(1)  906/   86D68 : 08D5 0002           		bset	#2,(a5)
(1)  907/   86D6C : 0C04 00C0           		cmpi.b	#$C0,d4
(1)  908/   86D70 : 6616                		bne.s	loc_7226E
(1)  909/   86D72 : 1004                		move.b	d4,d0
(1)  910/   86D74 : 0000 001F           		ori.b	#$1F,d0
(1)  911/   86D78 : 13C0 00C0 0011      		move.b	d0,($C00011).l
(1)  912/   86D7E : 0840 0005           		bchg	#5,d0
(1)  913/   86D82 : 13C0 00C0 0011      		move.b	d0,($C00011).l
(1)  914/   86D88 :                     
(1)  915/   86D88 :                     loc_7226E:
(1)  916/   86D88 : 2A7B 307A           		movea.l	dword_722EC(pc,d3.w),a5
(1)  917/   86D8C : 244D                		movea.l	a5,a2
(1)  918/   86D8E : 700B                		moveq	#$B,d0
(1)  919/   86D90 :                     
(1)  920/   86D90 :                     loc_72276:
(1)  921/   86D90 : 429A                		clr.l	(a2)+
(1)  922/   86D92 : 51C8 FFFC           		dbf	d0,loc_72276
(1)  923/   86D96 :                     
(1)  924/   86D96 : 3A99                		move.w	(a1)+,(a5)
(1)  925/   86D98 : 1B45 0002           		move.b	d5,2(a5)
(1)  926/   86D9C : 7000                		moveq	#0,d0
(1)  927/   86D9E : 3019                		move.w	(a1)+,d0
(1)  928/   86DA0 : D08B                		add.l	a3,d0
(1)  929/   86DA2 : 2B40 0004           		move.l	d0,4(a5)
(1)  930/   86DA6 : 3B59 0008           		move.w	(a1)+,8(a5)
(1)  931/   86DAA : 1B7C 0001 000E      		move.b	#1,$E(a5)
(1)  932/   86DB0 : 1B46 000D           		move.b	d6,$D(a5)
(1)  933/   86DB4 : 4A04                		tst.b	d4
(1)  934/   86DB6 : 6B0A                		bmi.s	loc_722A8
(1)  935/   86DB8 : 1B7C 00C0 000A      		move.b	#$C0,$A(a5)
(1)  936/   86DBE : 2B41 0020           		move.l	d1,$20(a5)
(1)  937/   86DC2 :                     
(1)  938/   86DC2 :                     loc_722A8:
(1)  939/   86DC2 : 51CF FF7E           		dbf	d7,loc_72228
(1)  940/   86DC6 :                     
(1)  941/   86DC6 : 4A2E 0250           		tst.b	$250(a6)
(1)  942/   86DCA : 6A06                		bpl.s	loc_722B8
(1)  943/   86DCC : 08EE 0002 0340      		bset	#2,$340(a6)
(1)  944/   86DD2 :                     
(1)  945/   86DD2 :                     loc_722B8:
(1)  946/   86DD2 : 4A2E 0310           		tst.b	$310(a6)
(1)  947/   86DD6 : 6A06                		bpl.s	locret_722C4
(1)  948/   86DD8 : 08EE 0002 0370      		bset	#2,$370(a6)
(1)  949/   86DDE :                     
(1)  950/   86DDE :                     locret_722C4:
(1)  951/   86DDE : 4E75                		rts	
(1)  952/   86DE0 :                     ; ===========================================================================
(1)  953/   86DE0 :                     
(1)  954/   86DE0 :                     loc_722C6:
(1)  955/   86DE0 : 4216                		clr.b	0(a6)
(1)  956/   86DE2 : 4E75                		rts	
(1)  957/   86DE4 :                     ; ===========================================================================
(1)  958/   86DE4 : 00FF F0D0           dword_722CC:	dc.l $FFF0D0
(1)  959/   86DE8 : 0000 0000           		dc.l 0
(1)  960/   86DEC : 00FF F100           		dc.l $FFF100
(1)  961/   86DF0 : 00FF F130           		dc.l $FFF130
(1)  962/   86DF4 : 00FF F190           		dc.l $FFF190
(1)  963/   86DF8 : 00FF F1C0           		dc.l $FFF1C0
(1)  964/   86DFC : 00FF F1F0           		dc.l $FFF1F0
(1)  965/   86E00 : 00FF F1F0           		dc.l $FFF1F0
(1)  966/   86E04 : 00FF F220           dword_722EC:	dc.l $FFF220
(1)  967/   86E08 : 0000 0000           		dc.l 0
(1)  968/   86E0C : 00FF F250           		dc.l $FFF250
(1)  969/   86E10 : 00FF F280           		dc.l $FFF280
(1)  970/   86E14 : 00FF F2B0           		dc.l $FFF2B0
(1)  971/   86E18 : 00FF F2E0           		dc.l $FFF2E0
(1)  972/   86E1C : 00FF F310           		dc.l $FFF310
(1)  973/   86E20 : 00FF F310           		dc.l $FFF310
(1)  974/   86E24 :                     ; ===========================================================================
(1)  975/   86E24 :                     ; ---------------------------------------------------------------------------
(1)  976/   86E24 :                     ; Play GHZ waterfall sound
(1)  977/   86E24 :                     ; ---------------------------------------------------------------------------
(1)  978/   86E24 :                     
(1)  979/   86E24 :                     Sound_D0toDF:				; XREF: Sound_ChkValue
(1)  980/   86E24 : 4A2E 0027           		tst.b	$27(a6)
(1)  981/   86E28 : 6600 00B4           		bne.w	locret_723C6
(1)  982/   86E2C : 4A2E 0004           		tst.b	4(a6)
(1)  983/   86E30 : 6600 00AC           		bne.w	locret_723C6
(1)  984/   86E34 : 4A2E 0024           		tst.b	$24(a6)
(1)  985/   86E38 : 6600 00A4           		bne.w	locret_723C6
(1)  986/   86E3C : 2079 0008 6496      		movea.l	(Go_SoundD0).l,a0
(1)  987/   86E42 : 0407 00D0           		subi.b	#$D0,d7
(1)  988/   86E46 : E54F                		lsl.w	#2,d7
(1)  989/   86E48 : 2670 7000           		movea.l	(a0,d7.w),a3
(1)  990/   86E4C : 224B                		movea.l	a3,a1
(1)  991/   86E4E : 7000                		moveq	#0,d0
(1)  992/   86E50 : 3019                		move.w	(a1)+,d0
(1)  993/   86E52 : D08B                		add.l	a3,d0
(1)  994/   86E54 : 2D40 0020           		move.l	d0,$20(a6)
(1)  995/   86E58 : 1A19                		move.b	(a1)+,d5
(1)  996/   86E5A : 1E19                		move.b	(a1)+,d7
(1)  997/   86E5C : 5307                		subq.b	#1,d7
(1)  998/   86E5E : 7C30                		moveq	#$30,d6
(1)  999/   86E60 :                     
(1) 1000/   86E60 :                     loc_72348:
(1) 1001/   86E60 : 1829 0001           		move.b	1(a1),d4
(1) 1002/   86E64 : 6B0C                		bmi.s	loc_7235A
(1) 1003/   86E66 : 08EE 0002 0100      		bset	#2,$100(a6)
(1) 1004/   86E6C : 4BEE 0340           		lea	$340(a6),a5
(1) 1005/   86E70 : 600A                		bra.s	loc_72364
(1) 1006/   86E72 :                     ; ===========================================================================
(1) 1007/   86E72 :                     
(1) 1008/   86E72 :                     loc_7235A:
(1) 1009/   86E72 : 08EE 0002 01F0      		bset	#2,$1F0(a6)
(1) 1010/   86E78 : 4BEE 0370           		lea	$370(a6),a5
(1) 1011/   86E7C :                     
(1) 1012/   86E7C :                     loc_72364:
(1) 1013/   86E7C : 244D                		movea.l	a5,a2
(1) 1014/   86E7E : 700B                		moveq	#$B,d0
(1) 1015/   86E80 :                     
(1) 1016/   86E80 :                     loc_72368:
(1) 1017/   86E80 : 429A                		clr.l	(a2)+
(1) 1018/   86E82 : 51C8 FFFC           		dbf	d0,loc_72368
(1) 1019/   86E86 :                     
(1) 1020/   86E86 : 3A99                		move.w	(a1)+,(a5)
(1) 1021/   86E88 : 1B45 0002           		move.b	d5,2(a5)
(1) 1022/   86E8C : 7000                		moveq	#0,d0
(1) 1023/   86E8E : 3019                		move.w	(a1)+,d0
(1) 1024/   86E90 : D08B                		add.l	a3,d0
(1) 1025/   86E92 : 2B40 0004           		move.l	d0,4(a5)
(1) 1026/   86E96 : 3B59 0008           		move.w	(a1)+,8(a5)
(1) 1027/   86E9A : 1B7C 0001 000E      		move.b	#1,$E(a5)
(1) 1028/   86EA0 : 1B46 000D           		move.b	d6,$D(a5)
(1) 1029/   86EA4 : 4A04                		tst.b	d4
(1) 1030/   86EA6 : 6B06                		bmi.s	loc_72396
(1) 1031/   86EA8 : 1B7C 00C0 000A      		move.b	#$C0,$A(a5)
(1) 1032/   86EAE :                     
(1) 1033/   86EAE :                     loc_72396:
(1) 1034/   86EAE : 51CF FFB0           		dbf	d7,loc_72348
(1) 1035/   86EB2 :                     
(1) 1036/   86EB2 : 4A2E 0250           		tst.b	$250(a6)
(1) 1037/   86EB6 : 6A06                		bpl.s	loc_723A6
(1) 1038/   86EB8 : 08EE 0002 0340      		bset	#2,$340(a6)
(1) 1039/   86EBE :                     
(1) 1040/   86EBE :                     loc_723A6:
(1) 1041/   86EBE : 4A2E 0310           		tst.b	$310(a6)
(1) 1042/   86EC2 : 6A1A                		bpl.s	locret_723C6
(1) 1043/   86EC4 : 08EE 0002 0370      		bset	#2,$370(a6)
(1) 1044/   86ECA : 0004 001F           		ori.b	#$1F,d4
(1) 1045/   86ECE : 13C4 00C0 0011      		move.b	d4,($C00011).l
(1) 1046/   86ED4 : 0844 0005           		bchg	#5,d4
(1) 1047/   86ED8 : 13C4 00C0 0011      		move.b	d4,($C00011).l
(1) 1048/   86EDE :                     
(1) 1049/   86EDE :                     locret_723C6:
(1) 1050/   86EDE : 4E75                		rts	
(1) 1051/   86EE0 :                     ; End of function Sound_ChkValue
(1) 1052/   86EE0 :                     
(1) 1053/   86EE0 :                     ; ===========================================================================
(1) 1054/   86EE0 : 00FF F100           		dc.l $FFF100
(1) 1055/   86EE4 : 00FF F1F0           		dc.l $FFF1F0
(1) 1056/   86EE8 : 00FF F250           		dc.l $FFF250
(1) 1057/   86EEC : 00FF F310           		dc.l $FFF310
(1) 1058/   86EF0 : 00FF F340           		dc.l $FFF340
(1) 1059/   86EF4 : 00FF F370           		dc.l $FFF370
(1) 1060/   86EF8 :                     
(1) 1061/   86EF8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1) 1062/   86EF8 :                     
(1) 1063/   86EF8 :                     
(1) 1064/   86EF8 :                     Snd_FadeOut1:				; XREF: Sound_E0
(1) 1065/   86EF8 : 4216                		clr.b	0(a6)
(1) 1066/   86EFA : 4BEE 0220           		lea	$220(a6),a5
(1) 1067/   86EFE : 7E05                		moveq	#5,d7
(1) 1068/   86F00 :                     
(1) 1069/   86F00 :                     loc_723EA:
(1) 1070/   86F00 : 4A15                		tst.b	(a5)
(1) 1071/   86F02 : 6A00 0084           		bpl.w	loc_72472
(1) 1072/   86F06 : 0895 0007           		bclr	#7,(a5)
(1) 1073/   86F0A : 7600                		moveq	#0,d3
(1) 1074/   86F0C : 162D 0001           		move.b	1(a5),d3
(1) 1075/   86F10 : 6B40                		bmi.s	loc_7243C
(1) 1076/   86F12 : 4EBA 02FC           		jsr	sub_726FE(pc)
(1) 1077/   86F16 : 0C03 0004           		cmpi.b	#4,d3
(1) 1078/   86F1A : 6610                		bne.s	loc_72416
(1) 1079/   86F1C : 4A2E 0340           		tst.b	$340(a6)
(1) 1080/   86F20 : 6A0A                		bpl.s	loc_72416
(1) 1081/   86F22 : 4BEE 0340           		lea	$340(a6),a5
(1) 1082/   86F26 : 226E 0020           		movea.l	$20(a6),a1
(1) 1083/   86F2A : 6012                		bra.s	loc_72428
(1) 1084/   86F2C :                     ; ===========================================================================
(1) 1085/   86F2C :                     
(1) 1086/   86F2C :                     loc_72416:
(1) 1087/   86F2C : 5503                		subq.b	#2,d3
(1) 1088/   86F2E : E50B                		lsl.b	#2,d3
(1) 1089/   86F30 : 41FA FEB2           		lea	dword_722CC(pc),a0
(1) 1090/   86F34 : 264D                		movea.l	a5,a3
(1) 1091/   86F36 : 2A70 3000           		movea.l	(a0,d3.w),a5
(1) 1092/   86F3A : 226E 0018           		movea.l	$18(a6),a1
(1) 1093/   86F3E :                     
(1) 1094/   86F3E :                     loc_72428:
(1) 1095/   86F3E : 0895 0002           		bclr	#2,(a5)
(1) 1096/   86F42 : 08D5 0001           		bset	#1,(a5)
(1) 1097/   86F46 : 102D 000B           		move.b	$B(a5),d0
(1) 1098/   86F4A : 4EBA 0814           		jsr	sub_72C4E(pc)
(1) 1099/   86F4E : 2A4B                		movea.l	a3,a5
(1) 1100/   86F50 : 6036                		bra.s	loc_72472
(1) 1101/   86F52 :                     ; ===========================================================================
(1) 1102/   86F52 :                     
(1) 1103/   86F52 :                     loc_7243C:
(1) 1104/   86F52 : 4EBA 055E           		jsr	sub_729A0(pc)
(1) 1105/   86F56 : 41EE 0370           		lea	$370(a6),a0
(1) 1106/   86F5A : 0C03 00E0           		cmpi.b	#$E0,d3
(1) 1107/   86F5E : 6710                		beq.s	loc_7245A
(1) 1108/   86F60 : 0C03 00C0           		cmpi.b	#$C0,d3
(1) 1109/   86F64 : 670A                		beq.s	loc_7245A
(1) 1110/   86F66 : E60B                		lsr.b	#3,d3
(1) 1111/   86F68 : 41FA FE7A           		lea	dword_722CC(pc),a0
(1) 1112/   86F6C : 2070 3000           		movea.l	(a0,d3.w),a0
(1) 1113/   86F70 :                     
(1) 1114/   86F70 :                     loc_7245A:
(1) 1115/   86F70 : 0890 0002           		bclr	#2,(a0)
(1) 1116/   86F74 : 08D0 0001           		bset	#1,(a0)
(1) 1117/   86F78 : 0C28 00E0 0001      		cmpi.b	#$E0,1(a0)
(1) 1118/   86F7E : 6608                		bne.s	loc_72472
(1) 1119/   86F80 : 13E8 001F 00C0      		move.b	$1F(a0),($C00011).l
            86F86 : 0011             
(1) 1120/   86F88 :                     
(1) 1121/   86F88 :                     loc_72472:
(1) 1122/   86F88 : DAFC 0030           		adda.w	#$30,a5
(1) 1123/   86F8C : 51CF FF72           		dbf	d7,loc_723EA
(1) 1124/   86F90 :                     
(1) 1125/   86F90 : 4E75                		rts	
(1) 1126/   86F92 :                     ; End of function Snd_FadeOut1
(1) 1127/   86F92 :                     
(1) 1128/   86F92 :                     
(1) 1129/   86F92 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1) 1130/   86F92 :                     
(1) 1131/   86F92 :                     
(1) 1132/   86F92 :                     Snd_FadeOut2:				; XREF: Sound_E0
(1) 1133/   86F92 : 4BEE 0340           		lea	$340(a6),a5
(1) 1134/   86F96 : 4A15                		tst.b	(a5)
(1) 1135/   86F98 : 6A2A                		bpl.s	loc_724AE
(1) 1136/   86F9A : 0895 0007           		bclr	#7,(a5)
(1) 1137/   86F9E : 0815 0002           		btst	#2,(a5)
(1) 1138/   86FA2 : 6620                		bne.s	loc_724AE
(1) 1139/   86FA4 : 4EBA 0276           		jsr	loc_7270A(pc)
(1) 1140/   86FA8 : 4BEE 0100           		lea	$100(a6),a5
(1) 1141/   86FAC : 0895 0002           		bclr	#2,(a5)
(1) 1142/   86FB0 : 08D5 0001           		bset	#1,(a5)
(1) 1143/   86FB4 : 4A15                		tst.b	(a5)
(1) 1144/   86FB6 : 6A0C                		bpl.s	loc_724AE
(1) 1145/   86FB8 : 226E 0018           		movea.l	$18(a6),a1
(1) 1146/   86FBC : 102D 000B           		move.b	$B(a5),d0
(1) 1147/   86FC0 : 4EBA 079E           		jsr	sub_72C4E(pc)
(1) 1148/   86FC4 :                     
(1) 1149/   86FC4 :                     loc_724AE:
(1) 1150/   86FC4 : 4BEE 0370           		lea	$370(a6),a5
(1) 1151/   86FC8 : 4A15                		tst.b	(a5)
(1) 1152/   86FCA : 6A2E                		bpl.s	locret_724E4
(1) 1153/   86FCC : 0895 0007           		bclr	#7,(a5)
(1) 1154/   86FD0 : 0815 0002           		btst	#2,(a5)
(1) 1155/   86FD4 : 6624                		bne.s	locret_724E4
(1) 1156/   86FD6 : 4EBA 04E0           		jsr	loc_729A6(pc)
(1) 1157/   86FDA : 4BEE 01F0           		lea	$1F0(a6),a5
(1) 1158/   86FDE : 0895 0002           		bclr	#2,(a5)
(1) 1159/   86FE2 : 08D5 0001           		bset	#1,(a5)
(1) 1160/   86FE6 : 4A15                		tst.b	(a5)
(1) 1161/   86FE8 : 6A10                		bpl.s	locret_724E4
(1) 1162/   86FEA : 0C2D 00E0 0001      		cmpi.b	#-$20,1(a5)
(1) 1163/   86FF0 : 6608                		bne.s	locret_724E4
(1) 1164/   86FF2 : 13ED 001F 00C0      		move.b	$1F(a5),($C00011).l
            86FF8 : 0011             
(1) 1165/   86FFA :                     
(1) 1166/   86FFA :                     locret_724E4:
(1) 1167/   86FFA : 4E75                		rts	
(1) 1168/   86FFC :                     ; End of function Snd_FadeOut2
(1) 1169/   86FFC :                     
(1) 1170/   86FFC :                     ; ===========================================================================
(1) 1171/   86FFC :                     ; ---------------------------------------------------------------------------
(1) 1172/   86FFC :                     ; Fade out music
(1) 1173/   86FFC :                     ; ---------------------------------------------------------------------------
(1) 1174/   86FFC :                     
(1) 1175/   86FFC :                     Sound_E0:				; XREF: Sound_ExIndex
(1) 1176/   86FFC : 4EBA FEFA           		jsr	Snd_FadeOut1(pc)
(1) 1177/   87000 : 4EBA FF90           		jsr	Snd_FadeOut2(pc)
(1) 1178/   87004 : 1D7C 0003 0006      		move.b	#3,6(a6)
(1) 1179/   8700A : 1D7C 0028 0004      		move.b	#$28,4(a6)
(1) 1180/   87010 : 422E 0040           		clr.b	$40(a6)
(1) 1181/   87014 : 422E 002A           		clr.b	$2A(a6)
(1) 1182/   87018 : 4E75                		rts	
(1) 1183/   8701A :                     
(1) 1184/   8701A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1) 1185/   8701A :                     
(1) 1186/   8701A :                     
(1) 1187/   8701A :                     sub_72504:				; XREF: sub_71B4C
(1) 1188/   8701A : 102E 0006           		move.b	6(a6),d0
(1) 1189/   8701E : 6706                		beq.s	loc_72510
(1) 1190/   87020 : 532E 0006           		subq.b	#1,6(a6)
(1) 1191/   87024 : 4E75                		rts	
(1) 1192/   87026 :                     ; ===========================================================================
(1) 1193/   87026 :                     
(1) 1194/   87026 :                     loc_72510:
(1) 1195/   87026 : 532E 0004           		subq.b	#1,4(a6)
(1) 1196/   8702A : 6700 0088           		beq.w	Sound_E4
(1) 1197/   8702E : 1D7C 0003 0006      		move.b	#3,6(a6)
(1) 1198/   87034 : 4BEE 0070           		lea	$70(a6),a5
(1) 1199/   87038 : 7E05                		moveq	#5,d7
(1) 1200/   8703A :                     
(1) 1201/   8703A :                     loc_72524:
(1) 1202/   8703A : 4A15                		tst.b	(a5)
(1) 1203/   8703C : 6A10                		bpl.s	loc_72538
(1) 1204/   8703E : 522D 0009           		addq.b	#1,9(a5)
(1) 1205/   87042 : 6A06                		bpl.s	loc_72534
(1) 1206/   87044 : 0895 0007           		bclr	#7,(a5)
(1) 1207/   87048 : 6004                		bra.s	loc_72538
(1) 1208/   8704A :                     ; ===========================================================================
(1) 1209/   8704A :                     
(1) 1210/   8704A :                     loc_72534:
(1) 1211/   8704A : 4EBA 077A           		jsr	sub_72CB4(pc)
(1) 1212/   8704E :                     
(1) 1213/   8704E :                     loc_72538:
(1) 1214/   8704E : DAFC 0030           		adda.w	#$30,a5
(1) 1215/   87052 : 51CF FFE6           		dbf	d7,loc_72524
(1) 1216/   87056 :                     
(1) 1217/   87056 : 7E02                		moveq	#2,d7
(1) 1218/   87058 :                     
(1) 1219/   87058 :                     loc_72542:
(1) 1220/   87058 : 4A15                		tst.b	(a5)
(1) 1221/   8705A : 6A1A                		bpl.s	loc_72560
(1) 1222/   8705C : 522D 0009           		addq.b	#1,9(a5)
(1) 1223/   87060 : 0C2D 0010 0009      		cmpi.b	#$10,9(a5)
(1) 1224/   87066 : 6506                		bcs.s	loc_72558
(1) 1225/   87068 : 0895 0007           		bclr	#7,(a5)
(1) 1226/   8706C : 6008                		bra.s	loc_72560
(1) 1227/   8706E :                     ; ===========================================================================
(1) 1228/   8706E :                     
(1) 1229/   8706E :                     loc_72558:
(1) 1230/   8706E : 1C2D 0009           		move.b	9(a5),d6
(1) 1231/   87072 : 4EBA 0408           		jsr	sub_7296A(pc)
(1) 1232/   87076 :                     
(1) 1233/   87076 :                     loc_72560:
(1) 1234/   87076 : DAFC 0030           		adda.w	#$30,a5
(1) 1235/   8707A : 51CF FFDC           		dbf	d7,loc_72542
(1) 1236/   8707E :                     
(1) 1237/   8707E : 4E75                		rts	
(1) 1238/   87080 :                     ; End of function sub_72504
(1) 1239/   87080 :                     
(1) 1240/   87080 :                     
(1) 1241/   87080 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1) 1242/   87080 :                     
(1) 1243/   87080 :                     
(1) 1244/   87080 :                     sub_7256A:				; XREF: Sound_E4; sub_725CA
(1) 1245/   87080 : 7602                		moveq	#2,d3
(1) 1246/   87082 : 7028                		moveq	#$28,d0
(1) 1247/   87084 :                     
(1) 1248/   87084 :                     loc_7256E:
(1) 1249/   87084 : 1203                		move.b	d3,d1
(1) 1250/   87086 : 4EBA 01B8           		jsr	sub_7272E(pc)
(1) 1251/   8708A : 5801                		addq.b	#4,d1
(1) 1252/   8708C : 4EBA 01B2           		jsr	sub_7272E(pc)
(1) 1253/   87090 : 51CB FFF2           		dbf	d3,loc_7256E
(1) 1254/   87094 :                     
(1) 1255/   87094 : 7040                		moveq	#$40,d0
(1) 1256/   87096 : 727F                		moveq	#$7F,d1
(1) 1257/   87098 : 7802                		moveq	#2,d4
(1) 1258/   8709A :                     
(1) 1259/   8709A :                     loc_72584:
(1) 1260/   8709A : 7603                		moveq	#3,d3
(1) 1261/   8709C :                     
(1) 1262/   8709C :                     loc_72586:
(1) 1263/   8709C : 4EBA 01A2           		jsr	sub_7272E(pc)
(1) 1264/   870A0 : 4EBA 01D4           		jsr	sub_72764(pc)
(1) 1265/   870A4 : 5840                		addq.w	#4,d0
(1) 1266/   870A6 : 51CB FFF4           		dbf	d3,loc_72586
(1) 1267/   870AA :                     
(1) 1268/   870AA : 0400 000F           		subi.b	#$F,d0
(1) 1269/   870AE : 51CC FFEA           		dbf	d4,loc_72584
(1) 1270/   870B2 :                     
(1) 1271/   870B2 : 4E75                		rts	
(1) 1272/   870B4 :                     ; End of function sub_7256A
(1) 1273/   870B4 :                     
(1) 1274/   870B4 :                     ; ===========================================================================
(1) 1275/   870B4 :                     ; ---------------------------------------------------------------------------
(1) 1276/   870B4 :                     ; Stop music
(1) 1277/   870B4 :                     ; ---------------------------------------------------------------------------
(1) 1278/   870B4 :                     
(1) 1279/   870B4 :                     Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
(1) 1280/   870B4 : 702B                		moveq	#$2B,d0
(1) 1281/   870B6 : 123C 0080           		move.b	#$80,d1
(1) 1282/   870BA : 4EBA 0184           		jsr	sub_7272E(pc)
(1) 1283/   870BE : 7027                		moveq	#$27,d0
(1) 1284/   870C0 : 7200                		moveq	#0,d1
(1) 1285/   870C2 : 4EBA 017C           		jsr	sub_7272E(pc)
(1) 1286/   870C6 : 204E                		movea.l	a6,a0
(1) 1287/   870C8 : 303C 00E3           		move.w	#$E3,d0
(1) 1288/   870CC :                     
(1) 1289/   870CC :                     loc_725B6:
(1) 1290/   870CC : 4298                		clr.l	(a0)+
(1) 1291/   870CE : 51C8 FFFC           		dbf	d0,loc_725B6
(1) 1292/   870D2 :                     
(1) 1293/   870D2 : 1D7C 0080 0009      		move.b	#$80,9(a6)	; set music to $80 (silence)
(1) 1294/   870D8 : 4EBA FFA6           		jsr	sub_7256A(pc)
(1) 1295/   870DC : 6000 03EA           		bra.w	sub_729B6
(1) 1296/   870E0 :                     
(1) 1297/   870E0 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1) 1298/   870E0 :                     
(1) 1299/   870E0 :                     
(1) 1300/   870E0 :                     sub_725CA:				; XREF: Sound_ChkValue
(1) 1301/   870E0 : 204E                		movea.l	a6,a0
(1) 1302/   870E2 : 1216                		move.b	0(a6),d1
(1) 1303/   870E4 : 142E 0027           		move.b	$27(a6),d2
(1) 1304/   870E8 : 162E 002A           		move.b	$2A(a6),d3
(1) 1305/   870EC : 182E 0026           		move.b	$26(a6),d4
(1) 1306/   870F0 : 3A2E 000A           		move.w	$A(a6),d5
(1) 1307/   870F4 : 303C 0087           		move.w	#$87,d0
(1) 1308/   870F8 :                     
(1) 1309/   870F8 :                     loc_725E4:
(1) 1310/   870F8 : 4298                		clr.l	(a0)+
(1) 1311/   870FA : 51C8 FFFC           		dbf	d0,loc_725E4
(1) 1312/   870FE :                     
(1) 1313/   870FE : 1C81                		move.b	d1,0(a6)
(1) 1314/   87100 : 1D42 0027           		move.b	d2,$27(a6)
(1) 1315/   87104 : 1D43 002A           		move.b	d3,$2A(a6)
(1) 1316/   87108 : 1D44 0026           		move.b	d4,$26(a6)
(1) 1317/   8710C : 3D45 000A           		move.w	d5,$A(a6)
(1) 1318/   87110 : 1D7C 0080 0009      		move.b	#$80,9(a6)
(1) 1319/   87116 : 4EBA FF68           		jsr	sub_7256A(pc)
(1) 1320/   8711A : 6000 03AC           		bra.w	sub_729B6
(1) 1321/   8711E :                     ; End of function sub_725CA
(1) 1322/   8711E :                     
(1) 1323/   8711E :                     
(1) 1324/   8711E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1) 1325/   8711E :                     
(1) 1326/   8711E :                     
(1) 1327/   8711E :                     sub_7260C:				; XREF: sub_71B4C
(1) 1328/   8711E : 1D6E 0002 0001      		move.b	2(a6),1(a6)
(1) 1329/   87124 : 41EE 004E           		lea	$4E(a6),a0
(1) 1330/   87128 : 7030                		moveq	#$30,d0
(1) 1331/   8712A : 7209                		moveq	#9,d1
(1) 1332/   8712C :                     
(1) 1333/   8712C :                     loc_7261A:
(1) 1334/   8712C : 5210                		addq.b	#1,(a0)
(1) 1335/   8712E : D0C0                		adda.w	d0,a0
(1) 1336/   87130 : 51C9 FFFA           		dbf	d1,loc_7261A
(1) 1337/   87134 :                     
(1) 1338/   87134 : 4E75                		rts	
(1) 1339/   87136 :                     ; End of function sub_7260C
(1) 1340/   87136 :                     
(1) 1341/   87136 :                     ; ===========================================================================
(1) 1342/   87136 :                     ; ---------------------------------------------------------------------------
(1) 1343/   87136 :                     ; Speed	up music
(1) 1344/   87136 :                     ; ---------------------------------------------------------------------------
(1) 1345/   87136 :                     
(1) 1346/   87136 :                     Sound_E2:				; XREF: Sound_ExIndex
(1) 1347/   87136 : 4A2E 0027           		tst.b	$27(a6)
(1) 1348/   8713A : 6614                		bne.s	loc_7263E
(1) 1349/   8713C : 1D6E 0029 0002      		move.b	$29(a6),2(a6)
(1) 1350/   87142 : 1D6E 0029 0001      		move.b	$29(a6),1(a6)
(1) 1351/   87148 : 1D7C 0080 002A      		move.b	#$80,$2A(a6)
(1) 1352/   8714E : 4E75                		rts	
(1) 1353/   87150 :                     ; ===========================================================================
(1) 1354/   87150 :                     
(1) 1355/   87150 :                     loc_7263E:
(1) 1356/   87150 : 1D6E 03C9 03A2      		move.b	$3C9(a6),$3A2(a6)
(1) 1357/   87156 : 1D6E 03C9 03A1      		move.b	$3C9(a6),$3A1(a6)
(1) 1358/   8715C : 1D7C 0080 03CA      		move.b	#$80,$3CA(a6)
(1) 1359/   87162 : 4E75                		rts	
(1) 1360/   87164 :                     ; ===========================================================================
(1) 1361/   87164 :                     ; ---------------------------------------------------------------------------
(1) 1362/   87164 :                     ; Change music back to normal speed
(1) 1363/   87164 :                     ; ---------------------------------------------------------------------------
(1) 1364/   87164 :                     
(1) 1365/   87164 :                     Sound_E3:				; XREF: Sound_ExIndex
(1) 1366/   87164 : 4A2E 0027           		tst.b	$27(a6)
(1) 1367/   87168 : 6612                		bne.s	loc_7266A
(1) 1368/   8716A : 1D6E 0028 0002      		move.b	$28(a6),2(a6)
(1) 1369/   87170 : 1D6E 0028 0001      		move.b	$28(a6),1(a6)
(1) 1370/   87176 : 422E 002A           		clr.b	$2A(a6)
(1) 1371/   8717A : 4E75                		rts	
(1) 1372/   8717C :                     ; ===========================================================================
(1) 1373/   8717C :                     
(1) 1374/   8717C :                     loc_7266A:
(1) 1375/   8717C : 1D6E 03C8 03A2      		move.b	$3C8(a6),$3A2(a6)
(1) 1376/   87182 : 1D6E 03C8 03A1      		move.b	$3C8(a6),$3A1(a6)
(1) 1377/   87188 : 422E 03CA           		clr.b	$3CA(a6)
(1) 1378/   8718C : 4E75                		rts	
(1) 1379/   8718E :                     
(1) 1380/   8718E :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1) 1381/   8718E :                     
(1) 1382/   8718E :                     
(1) 1383/   8718E :                     sub_7267C:				; XREF: sub_71B4C
(1) 1384/   8718E : 4A2E 0025           		tst.b	$25(a6)
(1) 1385/   87192 : 6706                		beq.s	loc_72688
(1) 1386/   87194 : 532E 0025           		subq.b	#1,$25(a6)
(1) 1387/   87198 : 4E75                		rts	
(1) 1388/   8719A :                     ; ===========================================================================
(1) 1389/   8719A :                     
(1) 1390/   8719A :                     loc_72688:
(1) 1391/   8719A : 4A2E 0026           		tst.b	$26(a6)
(1) 1392/   8719E : 6748                		beq.s	loc_726D6
(1) 1393/   871A0 : 532E 0026           		subq.b	#1,$26(a6)
(1) 1394/   871A4 : 1D7C 0002 0025      		move.b	#2,$25(a6)
(1) 1395/   871AA : 4BEE 0070           		lea	$70(a6),a5
(1) 1396/   871AE : 7E05                		moveq	#5,d7
(1) 1397/   871B0 :                     
(1) 1398/   871B0 :                     loc_7269E:
(1) 1399/   871B0 : 4A15                		tst.b	(a5)
(1) 1400/   871B2 : 6A08                		bpl.s	loc_726AA
(1) 1401/   871B4 : 532D 0009           		subq.b	#1,9(a5)
(1) 1402/   871B8 : 4EBA 060C           		jsr	sub_72CB4(pc)
(1) 1403/   871BC :                     
(1) 1404/   871BC :                     loc_726AA:
(1) 1405/   871BC : DAFC 0030           		adda.w	#$30,a5
(1) 1406/   871C0 : 51CF FFEE           		dbf	d7,loc_7269E
(1) 1407/   871C4 : 7E02                		moveq	#2,d7
(1) 1408/   871C6 :                     
(1) 1409/   871C6 :                     loc_726B4:
(1) 1410/   871C6 : 4A15                		tst.b	(a5)
(1) 1411/   871C8 : 6A14                		bpl.s	loc_726CC
(1) 1412/   871CA : 532D 0009           		subq.b	#1,9(a5)
(1) 1413/   871CE : 1C2D 0009           		move.b	9(a5),d6
(1) 1414/   871D2 : 0C06 0010           		cmpi.b	#$10,d6
(1) 1415/   871D6 : 6502                		bcs.s	loc_726C8
(1) 1416/   871D8 : 7C0F                		moveq	#$F,d6
(1) 1417/   871DA :                     
(1) 1418/   871DA :                     loc_726C8:
(1) 1419/   871DA : 4EBA 02A0           		jsr	sub_7296A(pc)
(1) 1420/   871DE :                     
(1) 1421/   871DE :                     loc_726CC:
(1) 1422/   871DE : DAFC 0030           		adda.w	#$30,a5
(1) 1423/   871E2 : 51CF FFE2           		dbf	d7,loc_726B4
(1) 1424/   871E6 : 4E75                		rts	
(1) 1425/   871E8 :                     ; ===========================================================================
(1) 1426/   871E8 :                     
(1) 1427/   871E8 :                     loc_726D6:
(1) 1428/   871E8 : 08AE 0002 0040      		bclr	#2,$40(a6)
(1) 1429/   871EE : 422E 0024           		clr.b	$24(a6)
(1) 1430/   871F2 : 4E75                		rts	
(1) 1431/   871F4 :                     ; End of function sub_7267C
(1) 1432/   871F4 :                     
(1) 1433/   871F4 :                     ; ===========================================================================
(1) 1434/   871F4 :                     
(1) 1435/   871F4 :                     loc_726E2:				; XREF: sub_71CCA
(1) 1436/   871F4 : 0815 0001           		btst	#1,(a5)
(1) 1437/   871F8 : 6614                		bne.s	locret_726FC
(1) 1438/   871FA : 0815 0002           		btst	#2,(a5)
(1) 1439/   871FE : 660E                		bne.s	locret_726FC
(1) 1440/   87200 : 7028                		moveq	#$28,d0
(1) 1441/   87202 : 122D 0001           		move.b	1(a5),d1
(1) 1442/   87206 : 0001 00F0           		ori.b	#-$10,d1
(1) 1443/   8720A : 6000 0034           		bra.w	sub_7272E
(1) 1444/   8720E :                     ; ===========================================================================
(1) 1445/   8720E :                     
(1) 1446/   8720E :                     locret_726FC:
(1) 1447/   8720E : 4E75                		rts	
(1) 1448/   87210 :                     
(1) 1449/   87210 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1) 1450/   87210 :                     
(1) 1451/   87210 :                     
(1) 1452/   87210 :                     sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
(1) 1453/   87210 : 0815 0004           		btst	#4,(a5)
(1) 1454/   87214 : 6610                		bne.s	locret_72714
(1) 1455/   87216 : 0815 0002           		btst	#2,(a5)
(1) 1456/   8721A : 660A                		bne.s	locret_72714
(1) 1457/   8721C :                     
(1) 1458/   8721C :                     loc_7270A:				; XREF: Snd_FadeOut2
(1) 1459/   8721C : 7028                		moveq	#$28,d0
(1) 1460/   8721E : 122D 0001           		move.b	1(a5),d1
(1) 1461/   87222 : 6000 001C           		bra.w	sub_7272E
(1) 1462/   87226 :                     ; ===========================================================================
(1) 1463/   87226 :                     
(1) 1464/   87226 :                     locret_72714:
(1) 1465/   87226 : 4E75                		rts	
(1) 1466/   87228 :                     ; End of function sub_726FE
(1) 1467/   87228 :                     
(1) 1468/   87228 :                     ; ===========================================================================
(1) 1469/   87228 :                     
(1) 1470/   87228 :                     loc_72716:				; XREF: sub_72A5A
(1) 1471/   87228 : 0815 0002           		btst	#2,(a5)
(1) 1472/   8722C : 6604                		bne.s	locret_72720
(1) 1473/   8722E : 6000 0004           		bra.w	sub_72722
(1) 1474/   87232 :                     ; ===========================================================================
(1) 1475/   87232 :                     
(1) 1476/   87232 :                     locret_72720:
(1) 1477/   87232 : 4E75                		rts	
(1) 1478/   87234 :                     
(1) 1479/   87234 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1) 1480/   87234 :                     
(1) 1481/   87234 :                     
(1) 1482/   87234 :                     sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
(1) 1483/   87234 : 082D 0002 0001      		btst	#2,1(a5)
(1) 1484/   8723A : 6630                		bne.s	loc_7275A
(1) 1485/   8723C : D02D 0001           		add.b	1(a5),d0
(1) 1486/   87240 :                     ; End of function sub_72722
(1) 1487/   87240 :                     
(1) 1488/   87240 :                     
(1) 1489/   87240 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1) 1490/   87240 :                     
(1) 1491/   87240 :                     
(1) 1492/   87240 :                     sub_7272E:				; XREF: loc_71E6A
(1) 1493/   87240 : 1439 00A0 4000      		move.b	($A04000).l,d2
(1) 1494/   87246 : 0802 0007           		btst	#7,d2
(1) 1495/   8724A : 66F4                		bne.s	sub_7272E
(1) 1496/   8724C : 13C0 00A0 4000      		move.b	d0,($A04000).l
(1) 1497/   87252 : 4E71                		nop	
(1) 1498/   87254 : 4E71                		nop	
(1) 1499/   87256 : 4E71                		nop	
(1) 1500/   87258 :                     
(1) 1501/   87258 :                     loc_72746:
(1) 1502/   87258 : 1439 00A0 4000      		move.b	($A04000).l,d2
(1) 1503/   8725E : 0802 0007           		btst	#7,d2
(1) 1504/   87262 : 66F4                		bne.s	loc_72746
(1) 1505/   87264 :                     
(1) 1506/   87264 : 13C1 00A0 4001      		move.b	d1,($A04001).l
(1) 1507/   8726A : 4E75                		rts	
(1) 1508/   8726C :                     ; End of function sub_7272E
(1) 1509/   8726C :                     
(1) 1510/   8726C :                     ; ===========================================================================
(1) 1511/   8726C :                     
(1) 1512/   8726C :                     loc_7275A:				; XREF: sub_72722
(1) 1513/   8726C : 142D 0001           		move.b	1(a5),d2
(1) 1514/   87270 : 0882 0002           		bclr	#2,d2
(1) 1515/   87274 : D002                		add.b	d2,d0
(1) 1516/   87276 :                     
(1) 1517/   87276 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1) 1518/   87276 :                     
(1) 1519/   87276 :                     
(1) 1520/   87276 :                     sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
(1) 1521/   87276 : 1439 00A0 4000      		move.b	($A04000).l,d2
(1) 1522/   8727C : 0802 0007           		btst	#7,d2
(1) 1523/   87280 : 66F4                		bne.s	sub_72764
(1) 1524/   87282 : 13C0 00A0 4002      		move.b	d0,($A04002).l
(1) 1525/   87288 : 4E71                		nop	
(1) 1526/   8728A : 4E71                		nop	
(1) 1527/   8728C : 4E71                		nop	
(1) 1528/   8728E :                     
(1) 1529/   8728E :                     loc_7277C:
(1) 1530/   8728E : 1439 00A0 4000      		move.b	($A04000).l,d2
(1) 1531/   87294 : 0802 0007           		btst	#7,d2
(1) 1532/   87298 : 66F4                		bne.s	loc_7277C
(1) 1533/   8729A :                     
(1) 1534/   8729A : 13C1 00A0 4003      		move.b	d1,($A04003).l
(1) 1535/   872A0 : 4E75                		rts	
(1) 1536/   872A2 :                     ; End of function sub_72764
(1) 1537/   872A2 :                     
(1) 1538/   872A2 :                     ; ===========================================================================
(1) 1539/   872A2 : 025E 0284 02AB      word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
            872A8 : 02D3 02FE 032D 
            872AE : 035C 038F 03C5    
(1) 1540/   872B4 : 03FF 043C 047C      		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
            872BA : 0A5E 0A84 0AAB 
            872C0 : 0AD3 0AFE 0B2D    
(1) 1541/   872C6 : 0B5C 0B8F 0BC5      		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
            872CC : 0BFF 0C3C 0C7C 
            872D2 : 125E 1284          
(1) 1542/   872D6 : 12AB 12D3 12FE      		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
            872DC : 132D 135C 138F 
            872E2 : 13C5 13FF          
(1) 1543/   872E6 : 143C 147C 1A5E      		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
            872EC : 1A84 1AAB 1AD3 
            872F2 : 1AFE 1B2D          
(1) 1544/   872F6 : 1B5C 1B8F 1BC5      		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
            872FC : 1BFF 1C3C 1C7C 
            87302 : 225E 2284          
(1) 1545/   87306 : 22AB 22D3 22FE      		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
            8730C : 232D 235C 238F 
            87312 : 23C5 23FF          
(1) 1546/   87316 : 243C 247C 2A5E      		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
            8731C : 2A84 2AAB 2AD3 
            87322 : 2AFE 2B2D          
(1) 1547/   87326 : 2B5C 2B8F 2BC5      		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
            8732C : 2BFF 2C3C 2C7C 
            87332 : 325E 3284          
(1) 1548/   87336 : 32AB 32D3 32FE      		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
            8733C : 332D 335C 338F 
            87342 : 33C5 33FF          
(1) 1549/   87346 : 343C 347C 3A5E      		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
            8734C : 3A84 3AAB 3AD3 
            87352 : 3AFE 3B2D          
(1) 1550/   87356 : 3B5C 3B8F 3BC5      		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
            8735C : 3BFF 3C3C 3C7C    
(1) 1551/   87362 :                     
(1) 1552/   87362 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1) 1553/   87362 :                     
(1) 1554/   87362 :                     
(1) 1555/   87362 :                     sub_72850:				; XREF: sub_71B4C
(1) 1556/   87362 : 532D 000E           		subq.b	#1,$E(a5)
(1) 1557/   87366 : 6610                		bne.s	loc_72866
(1) 1558/   87368 : 0895 0004           		bclr	#4,(a5)
(1) 1559/   8736C : 4EBA 001C           		jsr	sub_72878(pc)
(1) 1560/   87370 : 4EBA 007C           		jsr	sub_728DC(pc)
(1) 1561/   87374 : 6000 00CA           		bra.w	loc_7292E
(1) 1562/   87378 :                     ; ===========================================================================
(1) 1563/   87378 :                     
(1) 1564/   87378 :                     loc_72866:
(1) 1565/   87378 : 4EBA F526           		jsr	sub_71D9E(pc)
(1) 1566/   8737C : 4EBA 00BA           		jsr	sub_72926(pc)
(1) 1567/   87380 : 4EBA F546           		jsr	sub_71DC6(pc)
(1) 1568/   87384 : 4EBA 006E           		jsr	sub_728E2(pc)
(1) 1569/   87388 : 4E75                		rts	
(1) 1570/   8738A :                     ; End of function sub_72850
(1) 1571/   8738A :                     
(1) 1572/   8738A :                     
(1) 1573/   8738A :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1) 1574/   8738A :                     
(1) 1575/   8738A :                     
(1) 1576/   8738A :                     sub_72878:				; XREF: sub_72850
(1) 1577/   8738A : 0895 0001           		bclr	#1,(a5)
(1) 1578/   8738E : 286D 0004           		movea.l	4(a5),a4
(1) 1579/   87392 :                     
(1) 1580/   87392 :                     loc_72880:
(1) 1581/   87392 : 7A00                		moveq	#0,d5
(1) 1582/   87394 : 1A1C                		move.b	(a4)+,d5
(1) 1583/   87396 : 0C05 00E0           		cmpi.b	#$E0,d5
(1) 1584/   8739A : 6506                		bcs.s	loc_72890
(1) 1585/   8739C : 4EBA 01CE           		jsr	sub_72A5A(pc)
(1) 1586/   873A0 : 60F0                		bra.s	loc_72880
(1) 1587/   873A2 :                     ; ===========================================================================
(1) 1588/   873A2 :                     
(1) 1589/   873A2 :                     loc_72890:
(1) 1590/   873A2 : 4A05                		tst.b	d5
(1) 1591/   873A4 : 6A10                		bpl.s	loc_728A4
(1) 1592/   873A6 : 4EBA 0016           		jsr	sub_728AC(pc)
(1) 1593/   873AA : 1A1C                		move.b	(a4)+,d5
(1) 1594/   873AC : 4A05                		tst.b	d5
(1) 1595/   873AE : 6A06                		bpl.s	loc_728A4
(1) 1596/   873B0 : 534C                		subq.w	#1,a4
(1) 1597/   873B2 : 6000 F4AE           		bra.w	sub_71D60
(1) 1598/   873B6 :                     ; ===========================================================================
(1) 1599/   873B6 :                     
(1) 1600/   873B6 :                     loc_728A4:
(1) 1601/   873B6 : 4EBA F48A           		jsr	sub_71D40(pc)
(1) 1602/   873BA : 6000 F4A6           		bra.w	sub_71D60
(1) 1603/   873BE :                     ; End of function sub_72878
(1) 1604/   873BE :                     
(1) 1605/   873BE :                     
(1) 1606/   873BE :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1) 1607/   873BE :                     
(1) 1608/   873BE :                     
(1) 1609/   873BE :                     sub_728AC:				; XREF: sub_72878
(1) 1610/   873BE : 0405 0081           		subi.b	#$81,d5
(1) 1611/   873C2 : 6518                		bcs.s	loc_728CA
(1) 1612/   873C4 : DA2D 0008           		add.b	8(a5),d5
(1) 1613/   873C8 : 0245 007F           		andi.w	#$7F,d5
(1) 1614/   873CC : E34D                		lsl.w	#1,d5
(1) 1615/   873CE : 41FA 0110           		lea	word_729CE(pc),a0
(1) 1616/   873D2 : 3B70 5000 0010      		move.w	(a0,d5.w),$10(a5)
(1) 1617/   873D8 : 6000 F488           		bra.w	sub_71D60
(1) 1618/   873DC :                     ; ===========================================================================
(1) 1619/   873DC :                     
(1) 1620/   873DC :                     loc_728CA:
(1) 1621/   873DC : 08D5 0001           		bset	#1,(a5)
(1) 1622/   873E0 : 3B7C FFFF 0010      		move.w	#-1,$10(a5)
(1) 1623/   873E6 : 4EBA F47A           		jsr	sub_71D60(pc)
(1) 1624/   873EA : 6000 00C6           		bra.w	sub_729A0
(1) 1625/   873EE :                     ; End of function sub_728AC
(1) 1626/   873EE :                     
(1) 1627/   873EE :                     
(1) 1628/   873EE :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1) 1629/   873EE :                     
(1) 1630/   873EE :                     
(1) 1631/   873EE :                     sub_728DC:				; XREF: sub_72850
(1) 1632/   873EE : 3C2D 0010           		move.w	$10(a5),d6
(1) 1633/   873F2 : 6B3E                		bmi.s	loc_72920
(1) 1634/   873F4 :                     ; End of function sub_728DC
(1) 1635/   873F4 :                     
(1) 1636/   873F4 :                     
(1) 1637/   873F4 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1) 1638/   873F4 :                     
(1) 1639/   873F4 :                     
(1) 1640/   873F4 :                     sub_728E2:				; XREF: sub_72850
(1) 1641/   873F4 : 102D 001E           		move.b	$1E(a5),d0
(1) 1642/   873F8 : 4880                		ext.w	d0
(1) 1643/   873FA : DC40                		add.w	d0,d6
(1) 1644/   873FC : 0815 0002           		btst	#2,(a5)
(1) 1645/   87400 : 662E                		bne.s	locret_7291E
(1) 1646/   87402 : 0815 0001           		btst	#1,(a5)
(1) 1647/   87406 : 6628                		bne.s	locret_7291E
(1) 1648/   87408 : 102D 0001           		move.b	1(a5),d0
(1) 1649/   8740C : 0C00 00E0           		cmpi.b	#$E0,d0
(1) 1650/   87410 : 6604                		bne.s	loc_72904
(1) 1651/   87412 : 103C 00C0           		move.b	#$C0,d0
(1) 1652/   87416 :                     
(1) 1653/   87416 :                     loc_72904:
(1) 1654/   87416 : 3206                		move.w	d6,d1
(1) 1655/   87418 : 0201 000F           		andi.b	#$F,d1
(1) 1656/   8741C : 8001                		or.b	d1,d0
(1) 1657/   8741E : E84E                		lsr.w	#4,d6
(1) 1658/   87420 : 0206 003F           		andi.b	#$3F,d6
(1) 1659/   87424 : 13C0 00C0 0011      		move.b	d0,($C00011).l
(1) 1660/   8742A : 13C6 00C0 0011      		move.b	d6,($C00011).l
(1) 1661/   87430 :                     
(1) 1662/   87430 :                     locret_7291E:
(1) 1663/   87430 : 4E75                		rts	
(1) 1664/   87432 :                     ; End of function sub_728E2
(1) 1665/   87432 :                     
(1) 1666/   87432 :                     ; ===========================================================================
(1) 1667/   87432 :                     
(1) 1668/   87432 :                     loc_72920:				; XREF: sub_728DC
(1) 1669/   87432 : 08D5 0001           		bset	#1,(a5)
(1) 1670/   87436 : 4E75                		rts	
(1) 1671/   87438 :                     
(1) 1672/   87438 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1) 1673/   87438 :                     
(1) 1674/   87438 :                     
(1) 1675/   87438 :                     sub_72926:				; XREF: sub_72850
(1) 1676/   87438 : 4A2D 000B           		tst.b	$B(a5)
(1) 1677/   8743C : 6700 005E           		beq.w	locret_7298A
(1) 1678/   87440 :                     
(1) 1679/   87440 :                     loc_7292E:				; XREF: sub_72850
(1) 1680/   87440 : 1C2D 0009           		move.b	9(a5),d6
(1) 1681/   87444 : 7000                		moveq	#0,d0
(1) 1682/   87446 : 102D 000B           		move.b	$B(a5),d0
(1) 1683/   8744A : 6730                		beq.s	sub_7296A
(1) 1684/   8744C : 2079 0008 64A6      		movea.l	(Go_PSGIndex).l,a0
(1) 1685/   87452 : 5340                		subq.w	#1,d0
(1) 1686/   87454 : E548                		lsl.w	#2,d0
(1) 1687/   87456 : 2070 0000           		movea.l	(a0,d0.w),a0
(1) 1688/   8745A : 102D 000C           		move.b	$C(a5),d0
(1) 1689/   8745E : 1030 0000           		move.b	(a0,d0.w),d0
(1) 1690/   87462 : 522D 000C           		addq.b	#1,$C(a5)
(1) 1691/   87466 : 0800 0007           		btst	#7,d0
(1) 1692/   8746A : 6706                		beq.s	loc_72960
(1) 1693/   8746C : 0C00 0080           		cmpi.b	#$80,d0
(1) 1694/   87470 : 673A                		beq.s	loc_7299A
(1) 1695/   87472 :                     
(1) 1696/   87472 :                     loc_72960:
(1) 1697/   87472 : DC40                		add.w	d0,d6
(1) 1698/   87474 : 0C06 0010           		cmpi.b	#$10,d6
(1) 1699/   87478 : 6502                		bcs.s	sub_7296A
(1) 1700/   8747A : 7C0F                		moveq	#$F,d6
(1) 1701/   8747C :                     ; End of function sub_72926
(1) 1702/   8747C :                     
(1) 1703/   8747C :                     
(1) 1704/   8747C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1) 1705/   8747C :                     
(1) 1706/   8747C :                     
(1) 1707/   8747C :                     sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
(1) 1708/   8747C : 0815 0001           		btst	#1,(a5)
(1) 1709/   87480 : 661A                		bne.s	locret_7298A
(1) 1710/   87482 : 0815 0002           		btst	#2,(a5)
(1) 1711/   87486 : 6614                		bne.s	locret_7298A
(1) 1712/   87488 : 0815 0004           		btst	#4,(a5)
(1) 1713/   8748C : 6610                		bne.s	loc_7298C
(1) 1714/   8748E :                     
(1) 1715/   8748E :                     loc_7297C:
(1) 1716/   8748E : 8C2D 0001           		or.b	1(a5),d6
(1) 1717/   87492 : 0606 0010           		addi.b	#$10,d6
(1) 1718/   87496 : 13C6 00C0 0011      		move.b	d6,($C00011).l
(1) 1719/   8749C :                     
(1) 1720/   8749C :                     locret_7298A:
(1) 1721/   8749C : 4E75                		rts	
(1) 1722/   8749E :                     ; ===========================================================================
(1) 1723/   8749E :                     
(1) 1724/   8749E :                     loc_7298C:
(1) 1725/   8749E : 4A2D 0013           		tst.b	$13(a5)
(1) 1726/   874A2 : 67EA                		beq.s	loc_7297C
(1) 1727/   874A4 : 4A2D 0012           		tst.b	$12(a5)
(1) 1728/   874A8 : 66E4                		bne.s	loc_7297C
(1) 1729/   874AA : 4E75                		rts	
(1) 1730/   874AC :                     ; End of function sub_7296A
(1) 1731/   874AC :                     
(1) 1732/   874AC :                     ; ===========================================================================
(1) 1733/   874AC :                     
(1) 1734/   874AC :                     loc_7299A:				; XREF: sub_72926
(1) 1735/   874AC : 532D 000C           		subq.b	#1,$C(a5)
(1) 1736/   874B0 : 4E75                		rts	
(1) 1737/   874B2 :                     
(1) 1738/   874B2 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1) 1739/   874B2 :                     
(1) 1740/   874B2 :                     
(1) 1741/   874B2 :                     sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
(1) 1742/   874B2 : 0815 0002           		btst	#2,(a5)
(1) 1743/   874B6 : 660E                		bne.s	locret_729B4
(1) 1744/   874B8 :                     
(1) 1745/   874B8 :                     loc_729A6:				; XREF: Snd_FadeOut2
(1) 1746/   874B8 : 102D 0001           		move.b	1(a5),d0
(1) 1747/   874BC : 0000 001F           		ori.b	#$1F,d0
(1) 1748/   874C0 : 13C0 00C0 0011      		move.b	d0,($C00011).l
(1) 1749/   874C6 :                     
(1) 1750/   874C6 :                     locret_729B4:
(1) 1751/   874C6 : 4E75                		rts	
(1) 1752/   874C8 :                     ; End of function sub_729A0
(1) 1753/   874C8 :                     
(1) 1754/   874C8 :                     
(1) 1755/   874C8 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1) 1756/   874C8 :                     
(1) 1757/   874C8 :                     
(1) 1758/   874C8 :                     sub_729B6:				; XREF: loc_71E7C
(1) 1759/   874C8 : 41F9 00C0 0011      		lea	($C00011).l,a0
(1) 1760/   874CE : 10BC 009F           		move.b	#$9F,(a0)
(1) 1761/   874D2 : 10BC 00BF           		move.b	#$BF,(a0)
(1) 1762/   874D6 : 10BC 00DF           		move.b	#$DF,(a0)
(1) 1763/   874DA : 10BC 00FF           		move.b	#$FF,(a0)
(1) 1764/   874DE : 4E75                		rts	
(1) 1765/   874E0 :                     ; End of function sub_729B6
(1) 1766/   874E0 :                     
(1) 1767/   874E0 :                     ; ===========================================================================
(1) 1768/   874E0 : 0356 0326 02F9      word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
            874E6 : 02CE 02A5 0280 
            874EC : 025C 023A 021A    
(1) 1769/   874F2 : 01FB 01DF 01C4      		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
            874F8 : 01AB 0193 017D 
            874FE : 0167 0153 0140    
(1) 1770/   87504 : 012E 011D 010D      		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
            8750A : 00FE 00EF 00E2 
            87510 : 00D6 00C9 00BE 
            87516 : 00B4             
(1) 1771/   87518 : 00A9 00A0 0097      		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
            8751E : 008F 0087 007F 
            87524 : 0078 0071 006B 
            8752A : 0065             
(1) 1772/   8752C : 005F 005A 0055      		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
            87532 : 0050 004B 0047 
            87538 : 0043 0040 003C 
            8753E : 0039             
(1) 1773/   87540 : 0036 0033 0030      		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
            87546 : 002D 002B 0028 
            8754C : 0026 0024 0022 
            87552 : 0020             
(1) 1774/   87554 : 001F 001D 001B      		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
            8755A : 001A 0018 0017 
            87560 : 0016 0015 0013 
            87566 : 0012             
(1) 1775/   87568 : 0011 0000           		dc.w $11, 0
(1) 1776/   8756C :                     
(1) 1777/   8756C :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1) 1778/   8756C :                     
(1) 1779/   8756C :                     
(1) 1780/   8756C :                     sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
(1) 1781/   8756C : 0445 00E0           		subi.w	#$E0,d5
(1) 1782/   87570 : E54D                		lsl.w	#2,d5
(1) 1783/   87572 : 4EFB 5002           		jmp	loc_72A64(pc,d5.w)
(1) 1784/   87576 :                     ; End of function sub_72A5A
(1) 1785/   87576 :                     
(1) 1786/   87576 :                     ; ===========================================================================
(1) 1787/   87576 :                     
(1) 1788/   87576 :                     loc_72A64:
(1) 1789/   87576 : 6000 0066           		bra.w	loc_72ACC
(1) 1790/   8757A :                     ; ===========================================================================
(1) 1791/   8757A : 6000 0082           		bra.w	loc_72AEC
(1) 1792/   8757E :                     ; ===========================================================================
(1) 1793/   8757E : 6000 0084           		bra.w	loc_72AF2
(1) 1794/   87582 :                     ; ===========================================================================
(1) 1795/   87582 : 6000 0086           		bra.w	loc_72AF8
(1) 1796/   87586 :                     ; ===========================================================================
(1) 1797/   87586 : 6000 009E           		bra.w	loc_72B14
(1) 1798/   8758A :                     ; ===========================================================================
(1) 1799/   8758A : 6000 0124           		bra.w	loc_72B9E
(1) 1800/   8758E :                     ; ===========================================================================
(1) 1801/   8758E : 6000 0126           		bra.w	loc_72BA4
(1) 1802/   87592 :                     ; ===========================================================================
(1) 1803/   87592 : 6000 012C           		bra.w	loc_72BAE
(1) 1804/   87596 :                     ; ===========================================================================
(1) 1805/   87596 : 6000 012E           		bra.w	loc_72BB4
(1) 1806/   8759A :                     ; ===========================================================================
(1) 1807/   8759A : 6000 0134           		bra.w	loc_72BBE
(1) 1808/   8759E :                     ; ===========================================================================
(1) 1809/   8759E : 6000 0138           		bra.w	loc_72BC6
(1) 1810/   875A2 :                     ; ===========================================================================
(1) 1811/   875A2 : 6000 013E           		bra.w	loc_72BD0
(1) 1812/   875A6 :                     ; ===========================================================================
(1) 1813/   875A6 : 6000 0150           		bra.w	loc_72BE6
(1) 1814/   875AA :                     ; ===========================================================================
(1) 1815/   875AA : 6000 0154           		bra.w	loc_72BEE
(1) 1816/   875AE :                     ; ===========================================================================
(1) 1817/   875AE : 6000 0156           		bra.w	loc_72BF4
(1) 1818/   875B2 :                     ; ===========================================================================
(1) 1819/   875B2 : 6000 0184           		bra.w	loc_72C26
(1) 1820/   875B6 :                     ; ===========================================================================
(1) 1821/   875B6 : 6000 028A           		bra.w	loc_72D30
(1) 1822/   875BA :                     ; ===========================================================================
(1) 1823/   875BA : 6000 02A8           		bra.w	loc_72D52
(1) 1824/   875BE :                     ; ===========================================================================
(1) 1825/   875BE : 6000 02AA           		bra.w	loc_72D58
(1) 1826/   875C2 :                     ; ===========================================================================
(1) 1827/   875C2 : 6000 0352           		bra.w	loc_72E06
(1) 1828/   875C6 :                     ; ===========================================================================
(1) 1829/   875C6 : 6000 0368           		bra.w	loc_72E20
(1) 1830/   875CA :                     ; ===========================================================================
(1) 1831/   875CA : 6000 036A           		bra.w	loc_72E26
(1) 1832/   875CE :                     ; ===========================================================================
(1) 1833/   875CE : 6000 036C           		bra.w	loc_72E2C
(1) 1834/   875D2 :                     ; ===========================================================================
(1) 1835/   875D2 : 6000 0374           		bra.w	loc_72E38
(1) 1836/   875D6 :                     ; ===========================================================================
(1) 1837/   875D6 : 6000 038A           		bra.w	loc_72E52
(1) 1838/   875DA :                     ; ===========================================================================
(1) 1839/   875DA : 6000 0398           		bra.w	loc_72E64
(1) 1840/   875DE :                     ; ===========================================================================
(1) 1841/   875DE :                     
(1) 1842/   875DE :                     loc_72ACC:				; XREF: loc_72A64
(1) 1843/   875DE : 121C                		move.b	(a4)+,d1
(1) 1844/   875E0 : 4A2D 0001           		tst.b	1(a5)
(1) 1845/   875E4 : 6B16                		bmi.s	locret_72AEA
(1) 1846/   875E6 : 102D 000A           		move.b	$A(a5),d0
(1) 1847/   875EA : 0200 0037           		andi.b	#$37,d0
(1) 1848/   875EE : 8200                		or.b	d0,d1
(1) 1849/   875F0 : 1B41 000A           		move.b	d1,$A(a5)
(1) 1850/   875F4 : 103C 00B4           		move.b	#$B4,d0
(1) 1851/   875F8 : 6000 FC2E           		bra.w	loc_72716
(1) 1852/   875FC :                     ; ===========================================================================
(1) 1853/   875FC :                     
(1) 1854/   875FC :                     locret_72AEA:
(1) 1855/   875FC : 4E75                		rts	
(1) 1856/   875FE :                     ; ===========================================================================
(1) 1857/   875FE :                     
(1) 1858/   875FE :                     loc_72AEC:				; XREF: loc_72A64
(1) 1859/   875FE : 1B5C 001E           		move.b	(a4)+,$1E(a5)
(1) 1860/   87602 : 4E75                		rts	
(1) 1861/   87604 :                     ; ===========================================================================
(1) 1862/   87604 :                     
(1) 1863/   87604 :                     loc_72AF2:				; XREF: loc_72A64
(1) 1864/   87604 : 1D5C 0007           		move.b	(a4)+,7(a6)
(1) 1865/   87608 : 4E75                		rts	
(1) 1866/   8760A :                     ; ===========================================================================
(1) 1867/   8760A :                     
(1) 1868/   8760A :                     loc_72AF8:				; XREF: loc_72A64
(1) 1869/   8760A : 7000                		moveq	#0,d0
(1) 1870/   8760C : 102D 000D           		move.b	$D(a5),d0
(1) 1871/   87610 : 2875 0000           		movea.l	(a5,d0.w),a4
(1) 1872/   87614 : 2BBC 0000 0000      		move.l	#0,(a5,d0.w)
            8761A : 0000             
(1) 1873/   8761C : 544C                		addq.w	#2,a4
(1) 1874/   8761E : 5800                		addq.b	#4,d0
(1) 1875/   87620 : 1B40 000D           		move.b	d0,$D(a5)
(1) 1876/   87624 : 4E75                		rts	
(1) 1877/   87626 :                     ; ===========================================================================
(1) 1878/   87626 :                     
(1) 1879/   87626 :                     loc_72B14:				; XREF: loc_72A64
(1) 1880/   87626 : 204E                		movea.l	a6,a0
(1) 1881/   87628 : 43EE 03A0           		lea	$3A0(a6),a1
(1) 1882/   8762C : 303C 0087           		move.w	#$87,d0
(1) 1883/   87630 :                     
(1) 1884/   87630 :                     loc_72B1E:
(1) 1885/   87630 : 20D9                		move.l	(a1)+,(a0)+
(1) 1886/   87632 : 51C8 FFFC           		dbf	d0,loc_72B1E
(1) 1887/   87636 :                     
(1) 1888/   87636 : 08EE 0002 0040      		bset	#2,$40(a6)
(1) 1889/   8763C : 264D                		movea.l	a5,a3
(1) 1890/   8763E : 1C3C 0028           		move.b	#$28,d6
(1) 1891/   87642 : 9C2E 0026           		sub.b	$26(a6),d6
(1) 1892/   87646 : 7E05                		moveq	#5,d7
(1) 1893/   87648 : 4BEE 0070           		lea	$70(a6),a5
(1) 1894/   8764C :                     
(1) 1895/   8764C :                     loc_72B3A:
(1) 1896/   8764C : 0815 0007           		btst	#7,(a5)
(1) 1897/   87650 : 671C                		beq.s	loc_72B5C
(1) 1898/   87652 : 08D5 0001           		bset	#1,(a5)
(1) 1899/   87656 : DD2D 0009           		add.b	d6,9(a5)
(1) 1900/   8765A : 0815 0002           		btst	#2,(a5)
(1) 1901/   8765E : 660E                		bne.s	loc_72B5C
(1) 1902/   87660 : 7000                		moveq	#0,d0
(1) 1903/   87662 : 102D 000B           		move.b	$B(a5),d0
(1) 1904/   87666 : 226E 0018           		movea.l	$18(a6),a1
(1) 1905/   8766A : 4EBA 00F4           		jsr	sub_72C4E(pc)
(1) 1906/   8766E :                     
(1) 1907/   8766E :                     loc_72B5C:
(1) 1908/   8766E : DAFC 0030           		adda.w	#$30,a5
(1) 1909/   87672 : 51CF FFD8           		dbf	d7,loc_72B3A
(1) 1910/   87676 :                     
(1) 1911/   87676 : 7E02                		moveq	#2,d7
(1) 1912/   87678 :                     
(1) 1913/   87678 :                     loc_72B66:
(1) 1914/   87678 : 0815 0007           		btst	#7,(a5)
(1) 1915/   8767C : 670C                		beq.s	loc_72B78
(1) 1916/   8767E : 08D5 0001           		bset	#1,(a5)
(1) 1917/   87682 : 4EBA FE2E           		jsr	sub_729A0(pc)
(1) 1918/   87686 : DD2D 0009           		add.b	d6,9(a5)
(1) 1919/   8768A :                     
(1) 1920/   8768A :                     loc_72B78:
(1) 1921/   8768A : DAFC 0030           		adda.w	#$30,a5
(1) 1922/   8768E : 51CF FFE8           		dbf	d7,loc_72B66
(1) 1923/   87692 : 2A4B                		movea.l	a3,a5
(1) 1924/   87694 : 1D7C 0080 0024      		move.b	#$80,$24(a6)
(1) 1925/   8769A : 1D7C 0028 0026      		move.b	#$28,$26(a6)
(1) 1926/   876A0 : 422E 0027           		clr.b	$27(a6)
(1) 1927/   876A4 : 33FC 0000 00A1      		move.w	#0,($A11100).l
            876AA : 1100             
(1) 1928/   876AC : 504F                		addq.w	#8,sp
(1) 1929/   876AE : 4E75                		rts	
(1) 1930/   876B0 :                     ; ===========================================================================
(1) 1931/   876B0 :                     
(1) 1932/   876B0 :                     loc_72B9E:				; XREF: loc_72A64
(1) 1933/   876B0 : 1B5C 0002           		move.b	(a4)+,2(a5)
(1) 1934/   876B4 : 4E75                		rts	
(1) 1935/   876B6 :                     ; ===========================================================================
(1) 1936/   876B6 :                     
(1) 1937/   876B6 :                     loc_72BA4:				; XREF: loc_72A64
(1) 1938/   876B6 : 101C                		move.b	(a4)+,d0
(1) 1939/   876B8 : D12D 0009           		add.b	d0,9(a5)
(1) 1940/   876BC : 6000 0108           		bra.w	sub_72CB4
(1) 1941/   876C0 :                     ; ===========================================================================
(1) 1942/   876C0 :                     
(1) 1943/   876C0 :                     loc_72BAE:				; XREF: loc_72A64
(1) 1944/   876C0 : 08D5 0004           		bset	#4,(a5)
(1) 1945/   876C4 : 4E75                		rts	
(1) 1946/   876C6 :                     ; ===========================================================================
(1) 1947/   876C6 :                     
(1) 1948/   876C6 :                     loc_72BB4:				; XREF: loc_72A64
(1) 1949/   876C6 : 1B54 0012           		move.b	(a4),$12(a5)
(1) 1950/   876CA : 1B5C 0013           		move.b	(a4)+,$13(a5)
(1) 1951/   876CE : 4E75                		rts	
(1) 1952/   876D0 :                     ; ===========================================================================
(1) 1953/   876D0 :                     
(1) 1954/   876D0 :                     loc_72BBE:				; XREF: loc_72A64
(1) 1955/   876D0 : 101C                		move.b	(a4)+,d0
(1) 1956/   876D2 : D12D 0008           		add.b	d0,8(a5)
(1) 1957/   876D6 : 4E75                		rts	
(1) 1958/   876D8 :                     ; ===========================================================================
(1) 1959/   876D8 :                     
(1) 1960/   876D8 :                     loc_72BC6:				; XREF: loc_72A64
(1) 1961/   876D8 : 1D54 0002           		move.b	(a4),2(a6)
(1) 1962/   876DC : 1D5C 0001           		move.b	(a4)+,1(a6)
(1) 1963/   876E0 : 4E75                		rts	
(1) 1964/   876E2 :                     ; ===========================================================================
(1) 1965/   876E2 :                     
(1) 1966/   876E2 :                     loc_72BD0:				; XREF: loc_72A64
(1) 1967/   876E2 : 41EE 0040           		lea	$40(a6),a0
(1) 1968/   876E6 : 101C                		move.b	(a4)+,d0
(1) 1969/   876E8 : 7230                		moveq	#$30,d1
(1) 1970/   876EA : 7409                		moveq	#9,d2
(1) 1971/   876EC :                     
(1) 1972/   876EC :                     loc_72BDA:
(1) 1973/   876EC : 1140 0002           		move.b	d0,2(a0)
(1) 1974/   876F0 : D0C1                		adda.w	d1,a0
(1) 1975/   876F2 : 51CA FFF8           		dbf	d2,loc_72BDA
(1) 1976/   876F6 :                     
(1) 1977/   876F6 : 4E75                		rts	
(1) 1978/   876F8 :                     ; ===========================================================================
(1) 1979/   876F8 :                     
(1) 1980/   876F8 :                     loc_72BE6:				; XREF: loc_72A64
(1) 1981/   876F8 : 101C                		move.b	(a4)+,d0
(1) 1982/   876FA : D12D 0009           		add.b	d0,9(a5)
(1) 1983/   876FE : 4E75                		rts	
(1) 1984/   87700 :                     ; ===========================================================================
(1) 1985/   87700 :                     
(1) 1986/   87700 :                     loc_72BEE:				; XREF: loc_72A64
(1) 1987/   87700 : 422E 002C           		clr.b	$2C(a6)
(1) 1988/   87704 : 4E75                		rts	
(1) 1989/   87706 :                     ; ===========================================================================
(1) 1990/   87706 :                     
(1) 1991/   87706 :                     loc_72BF4:				; XREF: loc_72A64
(1) 1992/   87706 : 0895 0007           		bclr	#7,(a5)
(1) 1993/   8770A : 0895 0004           		bclr	#4,(a5)
(1) 1994/   8770E : 4EBA FB00           		jsr	sub_726FE(pc)
(1) 1995/   87712 : 4A2E 0250           		tst.b	$250(a6)
(1) 1996/   87716 : 6B1C                		bmi.s	loc_72C22
(1) 1997/   87718 : 264D                		movea.l	a5,a3
(1) 1998/   8771A : 4BEE 0100           		lea	$100(a6),a5
(1) 1999/   8771E : 226E 0018           		movea.l	$18(a6),a1
(1) 2000/   87722 : 0895 0002           		bclr	#2,(a5)
(1) 2001/   87726 : 08D5 0001           		bset	#1,(a5)
(1) 2002/   8772A : 102D 000B           		move.b	$B(a5),d0
(1) 2003/   8772E : 4EBA 0030           		jsr	sub_72C4E(pc)
(1) 2004/   87732 : 2A4B                		movea.l	a3,a5
(1) 2005/   87734 :                     
(1) 2006/   87734 :                     loc_72C22:
(1) 2007/   87734 : 504F                		addq.w	#8,sp
(1) 2008/   87736 : 4E75                		rts	
(1) 2009/   87738 :                     ; ===========================================================================
(1) 2010/   87738 :                     
(1) 2011/   87738 :                     loc_72C26:				; XREF: loc_72A64
(1) 2012/   87738 : 7000                		moveq	#0,d0
(1) 2013/   8773A : 101C                		move.b	(a4)+,d0
(1) 2014/   8773C : 1B40 000B           		move.b	d0,$B(a5)
(1) 2015/   87740 : 0815 0002           		btst	#2,(a5)
(1) 2016/   87744 : 6600 0076           		bne.w	locret_72CAA
(1) 2017/   87748 : 226E 0018           		movea.l	$18(a6),a1
(1) 2018/   8774C : 4A2E 000E           		tst.b	$E(a6)
(1) 2019/   87750 : 670E                		beq.s	sub_72C4E
(1) 2020/   87752 : 226D 0020           		movea.l	$20(a5),a1
(1) 2021/   87756 : 4A2E 000E           		tst.b	$E(a6)
(1) 2022/   8775A : 6B04                		bmi.s	sub_72C4E
(1) 2023/   8775C : 226E 0020           		movea.l	$20(a6),a1
(1) 2024/   87760 :                     
(1) 2025/   87760 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1) 2026/   87760 :                     
(1) 2027/   87760 :                     
(1) 2028/   87760 :                     sub_72C4E:				; XREF: Snd_FadeOut1; et al
(1) 2029/   87760 : 5340                		subq.w	#1,d0
(1) 2030/   87762 : 6B0A                		bmi.s	loc_72C5C
(1) 2031/   87764 : 323C 0019           		move.w	#$19,d1
(1) 2032/   87768 :                     
(1) 2033/   87768 :                     loc_72C56:
(1) 2034/   87768 : D2C1                		adda.w	d1,a1
(1) 2035/   8776A : 51C8 FFFC           		dbf	d0,loc_72C56
(1) 2036/   8776E :                     
(1) 2037/   8776E :                     loc_72C5C:
(1) 2038/   8776E : 1219                		move.b	(a1)+,d1
(1) 2039/   87770 : 1B41 001F           		move.b	d1,$1F(a5)
(1) 2040/   87774 : 1801                		move.b	d1,d4
(1) 2041/   87776 : 103C 00B0           		move.b	#$B0,d0
(1) 2042/   8777A : 4EBA FAB8           		jsr	sub_72722(pc)
(1) 2043/   8777E : 45FA 00AA           		lea	byte_72D18(pc),a2
(1) 2044/   87782 : 7613                		moveq	#$13,d3
(1) 2045/   87784 :                     
(1) 2046/   87784 :                     loc_72C72:
(1) 2047/   87784 : 101A                		move.b	(a2)+,d0
(1) 2048/   87786 : 1219                		move.b	(a1)+,d1
(1) 2049/   87788 : 4EBA FAAA           		jsr	sub_72722(pc)
(1) 2050/   8778C : 51CB FFF6           		dbf	d3,loc_72C72
(1) 2051/   87790 : 7A03                		moveq	#3,d5
(1) 2052/   87792 : 0244 0007           		andi.w	#7,d4
(1) 2053/   87796 : 183B 4026           		move.b	byte_72CAC(pc,d4.w),d4
(1) 2054/   8779A : 162D 0009           		move.b	9(a5),d3
(1) 2055/   8779E :                     
(1) 2056/   8779E :                     loc_72C8C:
(1) 2057/   8779E : 101A                		move.b	(a2)+,d0
(1) 2058/   877A0 : 1219                		move.b	(a1)+,d1
(1) 2059/   877A2 : E20C                		lsr.b	#1,d4
(1) 2060/   877A4 : 6402                		bcc.s	loc_72C96
(1) 2061/   877A6 : D203                		add.b	d3,d1
(1) 2062/   877A8 :                     
(1) 2063/   877A8 :                     loc_72C96:
(1) 2064/   877A8 : 4EBA FA8A           		jsr	sub_72722(pc)
(1) 2065/   877AC : 51CD FFF0           		dbf	d5,loc_72C8C
(1) 2066/   877B0 : 103C 00B4           		move.b	#$B4,d0
(1) 2067/   877B4 : 122D 000A           		move.b	$A(a5),d1
(1) 2068/   877B8 : 4EBA FA7A           		jsr	sub_72722(pc)
(1) 2069/   877BC :                     
(1) 2070/   877BC :                     locret_72CAA:
(1) 2071/   877BC : 4E75                		rts	
(1) 2072/   877BE :                     ; End of function sub_72C4E
(1) 2073/   877BE :                     
(1) 2074/   877BE :                     ; ===========================================================================
(1) 2075/   877BE : 0808 0808 0A0E      byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
            877C4 : 0E0F             
(1) 2076/   877C6 :                     
(1) 2077/   877C6 :                     ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
(1) 2078/   877C6 :                     
(1) 2079/   877C6 :                     
(1) 2080/   877C6 :                     sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
(1) 2081/   877C6 : 0815 0002           		btst	#2,(a5)
(1) 2082/   877CA : 665C                		bne.s	locret_72D16
(1) 2083/   877CC : 7000                		moveq	#0,d0
(1) 2084/   877CE : 102D 000B           		move.b	$B(a5),d0
(1) 2085/   877D2 : 226E 0018           		movea.l	$18(a6),a1
(1) 2086/   877D6 : 4A2E 000E           		tst.b	$E(a6)
(1) 2087/   877DA : 670E                		beq.s	loc_72CD8
(1) 2088/   877DC : 226E 0020           		movea.l	$20(a6),a1
(1) 2089/   877E0 : 4A2E 000E           		tst.b	$E(a6)
(1) 2090/   877E4 : 6B04                		bmi.s	loc_72CD8
(1) 2091/   877E6 : 226E 0020           		movea.l	$20(a6),a1
(1) 2092/   877EA :                     
(1) 2093/   877EA :                     loc_72CD8:
(1) 2094/   877EA : 5340                		subq.w	#1,d0
(1) 2095/   877EC : 6B0A                		bmi.s	loc_72CE6
(1) 2096/   877EE : 323C 0019           		move.w	#$19,d1
(1) 2097/   877F2 :                     
(1) 2098/   877F2 :                     loc_72CE0:
(1) 2099/   877F2 : D2C1                		adda.w	d1,a1
(1) 2100/   877F4 : 51C8 FFFC           		dbf	d0,loc_72CE0
(1) 2101/   877F8 :                     
(1) 2102/   877F8 :                     loc_72CE6:
(1) 2103/   877F8 : D2FC 0015           		adda.w	#$15,a1
(1) 2104/   877FC : 45FA 0040           		lea	byte_72D2C(pc),a2
(1) 2105/   87800 : 102D 001F           		move.b	$1F(a5),d0
(1) 2106/   87804 : 0240 0007           		andi.w	#7,d0
(1) 2107/   87808 : 183B 00B4           		move.b	byte_72CAC(pc,d0.w),d4
(1) 2108/   8780C : 162D 0009           		move.b	9(a5),d3
(1) 2109/   87810 : 6B16                		bmi.s	locret_72D16
(1) 2110/   87812 : 7A03                		moveq	#3,d5
(1) 2111/   87814 :                     
(1) 2112/   87814 :                     loc_72D02:
(1) 2113/   87814 : 101A                		move.b	(a2)+,d0
(1) 2114/   87816 : 1219                		move.b	(a1)+,d1
(1) 2115/   87818 : E20C                		lsr.b	#1,d4
(1) 2116/   8781A : 6408                		bcc.s	loc_72D12
(1) 2117/   8781C : D203                		add.b	d3,d1
(1) 2118/   8781E : 6504                		bcs.s	loc_72D12
(1) 2119/   87820 : 4EBA FA12           		jsr	sub_72722(pc)
(1) 2120/   87824 :                     
(1) 2121/   87824 :                     loc_72D12:
(1) 2122/   87824 : 51CD FFEE           		dbf	d5,loc_72D02
(1) 2123/   87828 :                     
(1) 2124/   87828 :                     locret_72D16:
(1) 2125/   87828 : 4E75                		rts	
(1) 2126/   8782A :                     ; End of function sub_72CB4
(1) 2127/   8782A :                     
(1) 2128/   8782A :                     ; ===========================================================================
(1) 2129/   8782A : 3038 343C 5058      byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
            87830 : 545C 6068          
(1) 2130/   87834 : 646C 7078 747C      		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
            8783A : 8088 848C          
(1) 2131/   8783E : 4048 444C           byte_72D2C:	dc.b $40, $48, $44, $4C
(1) 2132/   87842 :                     ; ===========================================================================
(1) 2133/   87842 :                     
(1) 2134/   87842 :                     loc_72D30:				; XREF: loc_72A64
(1) 2135/   87842 : 08D5 0003           		bset	#3,(a5)
(1) 2136/   87846 : 2B4C 0014           		move.l	a4,$14(a5)
(1) 2137/   8784A : 1B5C 0018           		move.b	(a4)+,$18(a5)
(1) 2138/   8784E : 1B5C 0019           		move.b	(a4)+,$19(a5)
(1) 2139/   87852 : 1B5C 001A           		move.b	(a4)+,$1A(a5)
(1) 2140/   87856 : 101C                		move.b	(a4)+,d0
(1) 2141/   87858 : E208                		lsr.b	#1,d0
(1) 2142/   8785A : 1B40 001B           		move.b	d0,$1B(a5)
(1) 2143/   8785E : 426D 001C           		clr.w	$1C(a5)
(1) 2144/   87862 : 4E75                		rts	
(1) 2145/   87864 :                     ; ===========================================================================
(1) 2146/   87864 :                     
(1) 2147/   87864 :                     loc_72D52:				; XREF: loc_72A64
(1) 2148/   87864 : 08D5 0003           		bset	#3,(a5)
(1) 2149/   87868 : 4E75                		rts	
(1) 2150/   8786A :                     ; ===========================================================================
(1) 2151/   8786A :                     
(1) 2152/   8786A :                     loc_72D58:				; XREF: loc_72A64
(1) 2153/   8786A : 0895 0007           		bclr	#7,(a5)
(1) 2154/   8786E : 0895 0004           		bclr	#4,(a5)
(1) 2155/   87872 : 4A2D 0001           		tst.b	1(a5)
(1) 2156/   87876 : 6B0E                		bmi.s	loc_72D74
(1) 2157/   87878 : 4A2E 0008           		tst.b	8(a6)
(1) 2158/   8787C : 6B00 0094           		bmi.w	loc_72E02
(1) 2159/   87880 : 4EBA F98E           		jsr	sub_726FE(pc)
(1) 2160/   87884 : 6004                		bra.s	loc_72D78
(1) 2161/   87886 :                     ; ===========================================================================
(1) 2162/   87886 :                     
(1) 2163/   87886 :                     loc_72D74:
(1) 2164/   87886 : 4EBA FC2A           		jsr	sub_729A0(pc)
(1) 2165/   8788A :                     
(1) 2166/   8788A :                     loc_72D78:
(1) 2167/   8788A : 4A2E 000E           		tst.b	$E(a6)
(1) 2168/   8788E : 6A00 0082           		bpl.w	loc_72E02
(1) 2169/   87892 : 4216                		clr.b	0(a6)
(1) 2170/   87894 : 7000                		moveq	#0,d0
(1) 2171/   87896 : 102D 0001           		move.b	1(a5),d0
(1) 2172/   8789A : 6B40                		bmi.s	loc_72DCC
(1) 2173/   8789C : 41FA F546           		lea	dword_722CC(pc),a0
(1) 2174/   878A0 : 264D                		movea.l	a5,a3
(1) 2175/   878A2 : 0C00 0004           		cmpi.b	#4,d0
(1) 2176/   878A6 : 6610                		bne.s	loc_72DA8
(1) 2177/   878A8 : 4A2E 0340           		tst.b	$340(a6)
(1) 2178/   878AC : 6A0A                		bpl.s	loc_72DA8
(1) 2179/   878AE : 4BEE 0340           		lea	$340(a6),a5
(1) 2180/   878B2 : 226E 0020           		movea.l	$20(a6),a1
(1) 2181/   878B6 : 6010                		bra.s	loc_72DB8
(1) 2182/   878B8 :                     ; ===========================================================================
(1) 2183/   878B8 :                     
(1) 2184/   878B8 :                     loc_72DA8:
(1) 2185/   878B8 : 5500                		subq.b	#2,d0
(1) 2186/   878BA : E508                		lsl.b	#2,d0
(1) 2187/   878BC : 2A70 0000           		movea.l	(a0,d0.w),a5
(1) 2188/   878C0 : 4A15                		tst.b	(a5)
(1) 2189/   878C2 : 6A14                		bpl.s	loc_72DC8
(1) 2190/   878C4 : 226E 0018           		movea.l	$18(a6),a1
(1) 2191/   878C8 :                     
(1) 2192/   878C8 :                     loc_72DB8:
(1) 2193/   878C8 : 0895 0002           		bclr	#2,(a5)
(1) 2194/   878CC : 08D5 0001           		bset	#1,(a5)
(1) 2195/   878D0 : 102D 000B           		move.b	$B(a5),d0
(1) 2196/   878D4 : 4EBA FE8A           		jsr	sub_72C4E(pc)
(1) 2197/   878D8 :                     
(1) 2198/   878D8 :                     loc_72DC8:
(1) 2199/   878D8 : 2A4B                		movea.l	a3,a5
(1) 2200/   878DA : 6036                		bra.s	loc_72E02
(1) 2201/   878DC :                     ; ===========================================================================
(1) 2202/   878DC :                     
(1) 2203/   878DC :                     loc_72DCC:
(1) 2204/   878DC : 41EE 0370           		lea	$370(a6),a0
(1) 2205/   878E0 : 4A10                		tst.b	(a0)
(1) 2206/   878E2 : 6A0C                		bpl.s	loc_72DE0
(1) 2207/   878E4 : 0C00 00E0           		cmpi.b	#$E0,d0
(1) 2208/   878E8 : 6710                		beq.s	loc_72DEA
(1) 2209/   878EA : 0C00 00C0           		cmpi.b	#$C0,d0
(1) 2210/   878EE : 670A                		beq.s	loc_72DEA
(1) 2211/   878F0 :                     
(1) 2212/   878F0 :                     loc_72DE0:
(1) 2213/   878F0 : 41FA F4F2           		lea	dword_722CC(pc),a0
(1) 2214/   878F4 : E608                		lsr.b	#3,d0
(1) 2215/   878F6 : 2070 0000           		movea.l	(a0,d0.w),a0
(1) 2216/   878FA :                     
(1) 2217/   878FA :                     loc_72DEA:
(1) 2218/   878FA : 0890 0002           		bclr	#2,(a0)
(1) 2219/   878FE : 08D0 0001           		bset	#1,(a0)
(1) 2220/   87902 : 0C28 00E0 0001      		cmpi.b	#$E0,1(a0)
(1) 2221/   87908 : 6608                		bne.s	loc_72E02
(1) 2222/   8790A : 13E8 001F 00C0      		move.b	$1F(a0),($C00011).l
            87910 : 0011             
(1) 2223/   87912 :                     
(1) 2224/   87912 :                     loc_72E02:
(1) 2225/   87912 : 504F                		addq.w	#8,sp
(1) 2226/   87914 : 4E75                		rts	
(1) 2227/   87916 :                     ; ===========================================================================
(1) 2228/   87916 :                     
(1) 2229/   87916 :                     loc_72E06:				; XREF: loc_72A64
(1) 2230/   87916 : 1B7C 00E0 0001      		move.b	#$E0,1(a5)
(1) 2231/   8791C : 1B5C 001F           		move.b	(a4)+,$1F(a5)
(1) 2232/   87920 : 0815 0002           		btst	#2,(a5)
(1) 2233/   87924 : 6608                		bne.s	locret_72E1E
(1) 2234/   87926 : 13EC FFFF 00C0      		move.b	-1(a4),($C00011).l
            8792C : 0011             
(1) 2235/   8792E :                     
(1) 2236/   8792E :                     locret_72E1E:
(1) 2237/   8792E : 4E75                		rts	
(1) 2238/   87930 :                     ; ===========================================================================
(1) 2239/   87930 :                     
(1) 2240/   87930 :                     loc_72E20:				; XREF: loc_72A64
(1) 2241/   87930 : 0895 0003           		bclr	#3,(a5)
(1) 2242/   87934 : 4E75                		rts	
(1) 2243/   87936 :                     ; ===========================================================================
(1) 2244/   87936 :                     
(1) 2245/   87936 :                     loc_72E26:				; XREF: loc_72A64
(1) 2246/   87936 : 1B5C 000B           		move.b	(a4)+,$B(a5)
(1) 2247/   8793A : 4E75                		rts	
(1) 2248/   8793C :                     ; ===========================================================================
(1) 2249/   8793C :                     
(1) 2250/   8793C :                     loc_72E2C:				; XREF: loc_72A64
(1) 2251/   8793C : 101C                		move.b	(a4)+,d0
(1) 2252/   8793E : E148                		lsl.w	#8,d0
(1) 2253/   87940 : 101C                		move.b	(a4)+,d0
(1) 2254/   87942 : D8C0                		adda.w	d0,a4
(1) 2255/   87944 : 534C                		subq.w	#1,a4
(1) 2256/   87946 : 4E75                		rts	
(1) 2257/   87948 :                     ; ===========================================================================
(1) 2258/   87948 :                     
(1) 2259/   87948 :                     loc_72E38:				; XREF: loc_72A64
(1) 2260/   87948 : 7000                		moveq	#0,d0
(1) 2261/   8794A : 101C                		move.b	(a4)+,d0
(1) 2262/   8794C : 121C                		move.b	(a4)+,d1
(1) 2263/   8794E : 4A35 0024           		tst.b	$24(a5,d0.w)
(1) 2264/   87952 : 6604                		bne.s	loc_72E48
(1) 2265/   87954 : 1B81 0024           		move.b	d1,$24(a5,d0.w)
(1) 2266/   87958 :                     
(1) 2267/   87958 :                     loc_72E48:
(1) 2268/   87958 : 5335 0024           		subq.b	#1,$24(a5,d0.w)
(1) 2269/   8795C : 66DE                		bne.s	loc_72E2C
(1) 2270/   8795E : 544C                		addq.w	#2,a4
(1) 2271/   87960 : 4E75                		rts	
(1) 2272/   87962 :                     ; ===========================================================================
(1) 2273/   87962 :                     
(1) 2274/   87962 :                     loc_72E52:				; XREF: loc_72A64
(1) 2275/   87962 : 7000                		moveq	#0,d0
(1) 2276/   87964 : 102D 000D           		move.b	$D(a5),d0
(1) 2277/   87968 : 5900                		subq.b	#4,d0
(1) 2278/   8796A : 2B8C 0000           		move.l	a4,(a5,d0.w)
(1) 2279/   8796E : 1B40 000D           		move.b	d0,$D(a5)
(1) 2280/   87972 : 60C8                		bra.s	loc_72E2C
(1) 2281/   87974 :                     ; ===========================================================================
(1) 2282/   87974 :                     
(1) 2283/   87974 :                     loc_72E64:				; XREF: loc_72A64
(1) 2284/   87974 : 103C 0088           		move.b	#$88,d0
(1) 2285/   87978 : 123C 000F           		move.b	#$F,d1
(1) 2286/   8797C : 4EBA F8C2           		jsr	sub_7272E(pc)
(1) 2287/   87980 : 103C 008C           		move.b	#$8C,d0
(1) 2288/   87984 : 123C 000F           		move.b	#$F,d1
(1) 2289/   87988 : 6000 F8B6           		bra.w	sub_7272E
(1) 2290/   8798C :                     ; ===========================================================================
(1) 2291/   8798C :                     ; ============================ DAC DRIVER ===============================
(1) 2292/   8798C :                     ; ===========================================================================
(1) 2293/   8798C :                     Kos_Z80:	include	"sound/z80.asm"
(2)    1/   8798C :                     ;  DZ80 V3.4.1 Z80 Disassembly of z80nodata.bin
(2)    2/   8798C :                     ;  2007/09/18 15:48
(2)    3/   8798C :                     ;  Sonic 1 Z80 Driver disassembly by Puto.
(2)    4/   8798C :                     ;  Disassembly fixed, improved and integrated into SVN by Flamewing.
(2)    5/   8798C :                     ;  Should be assembled with AS (though it should be easily portable to other assemblers if necessary).
(2)    6/   8798C :                     ;
(2)    7/   8798C :                     
(2)    8/   8798C :                     	save
(2)    9/       0 :                     	!org	0							; z80 Align, handled by the build process
(2)   10/       0 :                     	cpu  Z80
(2)   11/       0 :                     	listing purecode
(2)   12/       0 :                     
(2)   13/       0 : =0BH                 zSEGA_Pitch:	equ	0Bh					; The pitch of the SEGA sound
(2)   14/       0 :                     
(2)   15/       0 :                     
(2)   16/       0 : =1FFCH               z80_stack:		equ 1FFCh
(2)   17/       0 : =1FFDH               zDAC_Status:	equ 1FFDh				; Bit 7 set if the driver is not accepting new samples, it is clear otherwise
(2)   18/       0 : =1FFFH               zDAC_Sample:	equ 1FFFh				; Sample to play, the 68k will move into this locatiton whatever sample that's supposed to be played.
(2)   19/       0 :                     
(2)   20/       0 : =4000H               zYM2612_A0:		equ 4000h
(2)   21/       0 : =6000H               zBankRegister:	equ 6000h
(2)   22/       0 : =8000H               zROMWindow:		equ 8000h
(2)   23/       0 :                     
(2)   24/       0 :                     zmake68kPtr  function addr,zROMWindow+(addr&7FFFh)
(2)   25/       0 :                     zmake68kBank function addr,(((addr&0FF8000h)/zROMWindow))
(2)   26/       0 :                     
(2)   27/       0 :                     ; function to decide whether an offset's full range won't fit in one byte
(2)   28/       0 :                     offsetover1byte function from,maxsize, ((from&0FFh)>(100h-maxsize))
(2)   29/       0 :                     
(2)   30/       0 :                     ; macro to make sure that ($ & 0FF00h) == (($+maxsize) & 0FF00h)
(2)   31/       0 :                     ensure1byteoffset macro maxsize
(2)   32/       0 :                     	if offsetover1byte($,maxsize)
(2)   33/       0 :                     startpad := $
(2)   34/       0 :                     		align 100h
(2)   35/       0 :                     	    if MOMPASS=1
(2)   36/       0 :                     endpad := $
(2)   37/       0 :                     		if endpad-startpad>=1h
(2)   38/       0 :                     			; warn because otherwise you'd have no clue why you're running out of space so fast
(2)   39/       0 :                     			message "had to insert \{endpad-startpad}h   bytes of padding before improperly located data at 0\{startpad}h in Z80 code"
(2)   40/       0 :                     		endif
(2)   41/       0 :                     	    endif
(2)   42/       0 :                     	endif
(2)   43/       0 :                         endm
(2)   44/       0 :                     
(2)   45/       0 :                     ;Z80Driver_Start:
(2)   46/       0 : F3                  	di									; Disable interrupts. Interrupts will never be reenabled
(2)   47/       1 : F3                  	di									; for the z80, so that no code will be executed on V-Int.
(2)   48/       2 : F3                  	di									; This means that the sample loop is all the z80 does.
(2)   49/       3 : 31 FC 1F            	ld	sp,z80_stack					; Initialize the stack pointer (unused throughout the driver)
(2)   50/       6 : DD 21 00 40         	ld	ix,zYM2612_A0					; ix = Pointer to memory-mapped communication register with YM2612
(2)   51/       A : AF                  	xor	a								; a=0
(2)   52/       B : 32 FD 1F            	ld	(zDAC_Status),a					; Disable DAC
(2)   53/       E : 32 FF 1F            	ld	(zDAC_Sample),a					; Clear sample
(2)   54/      11 : 3E 01               	ld	a,zmake68kBank(SegaPCM)&1		; least significant bit from ROM bank ID
(2)   55/      13 : 32 00 60            	ld	(zBankRegister),a				; Latch it to bank register, initializing bank switch
(2)   56/      16 :                     
(2)   57/      16 : 06 08               	ld	b,8								; Number of bits to latch to ROM bank
(2)   58/      18 : 3E 08               	ld	a,zmake68kBank(SegaPCM)>>1		; Bank ID without the least significant bit
(2)   59/      1A :                     
(2)   60/      1A :                     zBankSwitchLoop:
(2)   61/      1A : 32 00 60            	ld	(zBankRegister),a				; Latch another bit to bank register.
(2)   62/      1D : 0F                  	rrca								; Move next bit into position
(2)   63/      1E : 10 FA               	djnz	zBankSwitchLoop				; decrement and loop if not zero
(2)   64/      20 :                     
(2)   65/      20 : 18 10               	jr	zCheckForSamples
(2)   66/      22 :                     
(2)   67/      22 :                     ; ===========================================================================
(2)   68/      22 :                     ; JMan2050's DAC decode lookup table
(2)   69/      22 :                     ; ===========================================================================
(2)   70/      22 : (MACRO)              	ensure1byteoffset 10h
(2)   71/      22 :                     zDACDecodeTbl:
(2)   72/      22 : 00 01 02 04 08 10   	db	   0,	 1,   2,   4,   8,  10h,  20h,  40h
               28 : 20 40             
(2)   73/      2A : 80 FF FE FC F8 F0   	db	 80h,	-1,  -2,  -4,  -8, -10h, -20h, -40h
               30 : E0 C0             
(2)   74/      32 :                     
(2)   75/      32 :                     zCheckForSamples:
(2)   76/      32 : 21 FF 1F            	ld	hl,zDAC_Sample					; Load the address of next sample.
(2)   77/      35 :                     
(2)   78/      35 :                     zWaitDACLoop:
(2)   79/      35 : 7E                  	ld	a,(hl)							; a = next sample to play.
(2)   80/      36 : B7                  	or	a								; Do we have a valid sample?
(2)   81/      37 : F2 35 00            	jp	p,zWaitDACLoop					; Loop until we do
(2)   82/      3A :                     
(2)   83/      3A : D6 81               	sub	81h								; Make 0-based index
(2)   84/      3C : 77                  	ld	(hl),a							; Store it back into sample index (i.e., mark it as being played)
(2)   85/      3D : FE 06               	cp	6								; Is the sample 87h or higher?
(2)   86/      3F : 30 78               	jr	nc,zPlay_SegaPCM				; If yes, branch
(2)   87/      41 :                     
(2)   88/      41 : 11 00 00            	ld	de,0							; de = 0
(2)   89/      44 : FD 21 D6 00         	ld	iy,zPCM_Table					; iy = pointer to PCM Table
(2)   90/      48 :                     
(2)   91/      48 :                     	; Each entry on PCM table has 8 bytes in size, so multiply a by 8
(2)   92/      48 :                     	; Warning: do NOT play samples 84h-86h!
(2)   93/      48 : CB 27               	sla	a
(2)   94/      4A : CB 27               	sla	a
(2)   95/      4C : CB 27               	sla	a
(2)   96/      4E : 06 00               	ld	b,0								; b = 0
(2)   97/      50 : 4F                  	ld	c,a								; c = a
(2)   98/      51 : FD 09               	add	iy,bc							; iy = pointer to DAC sample entry
(2)   99/      53 : FD 5E 00            	ld	e,(iy+0)						; e = low byte of sample location
(2)  100/      56 : FD 56 01            	ld	d,(iy+1)						; de = pointer location of DAC sample
(2)  101/      59 : FD 4E 02            	ld	c,(iy+2)						; c = low byte of sample size
(2)  102/      5C : FD 46 03            	ld	b,(iy+3)						; bc = size of the DAC sample
(2)  103/      5F : D9                  	exx									; bc' = size of sample, de' = location of sample, hl' = pointer to zDAC_Sample
(2)  104/      60 : 16 80               	ld	d,80h							; d = is an accumulator; this initializes it to 80h
(2)  105/      62 : 21 FD 1F            	ld	hl,zDAC_Status					; hl = pointer to zDAC_Status
(2)  106/      65 : 72                  	ld	(hl),d							; Set flag to not accept driver input
(2)  107/      66 : DD 36 00 2B         	ld	(ix+0),2Bh						; Select enable/disable DAC register
(2)  108/      6A : 1E 2A               	ld	e,2Ah							; Command to select DAC output register
(2)  109/      6C : FD 4E 04            	ld	c,(iy+4)						; c = pitch of the DAC sample
(2)  110/      6F : DD 72 01            	ld	(ix+1),d						; Enable DAC
(2)  111/      72 : 36 00               	ld	(hl),0							; Set flag to accept driver input
(2)  112/      74 :                     	; After the following exx, we have:
(2)  113/      74 :                     	; bc = size of sample, de = location of sample, hl = pointer to zDAC_Sample,
(2)  114/      74 :                     	; c' = pitch of sample, d' = PCM accumulator,
(2)  115/      74 :                     	; e' = command to select DAC output register, hl' = pointer to DAC status
(2)  116/      74 : D9                  	exx
(2)  117/      75 : 26 00               	ld	h,(zDACDecodeTbl&0FF00h)>>8		; We set low byte of pointer below
(2)  118/      77 :                     
(2)  119/      77 :                     zPlayPCMLoop:
(2)  120/      77 : 1A                  	ld	a,(de)							; a = byte from DAC sample
(2)  121/      78 : E6 F0               	and	0F0h							; Get upper nibble
(2)  122/      7A :                     	; Shift-right 4 times to rotate the nibble into place
(2)  123/      7A : 0F                  	rrca
(2)  124/      7B : 0F                  	rrca
(2)  125/      7C : 0F                  	rrca
(2)  126/      7D : 0F                  	rrca
(2)  127/      7E : C6 22               	add	a,zDACDecodeTbl&0FFh			; Add in low byte of offset into decode table
(2)  128/      80 : 6F                  	ld	l,a								; hl = pointer to nibble entry in JMan2050 table
(2)  129/      81 : 7E                  	ld	a,(hl)							; a = JMan2050 entry for current nibble
(2)  130/      82 :                     	; After the following exx, we have:
(2)  131/      82 :                     	; bc' = size of sample, de' = location of sample, hl' = pointer to nibble entry in JMan2050 table,
(2)  132/      82 :                     	; c = pitch of sample, d = PCM accumulator,
(2)  133/      82 :                     	; e = command to select DAC output register, hl = pointer to DAC status
(2)  134/      82 : D9                  	exx
(2)  135/      83 : 82                  	add	a,d								; Add accumulator value...
(2)  136/      84 : 57                  	ld	d,a								; ... then store value back into accumulator
(2)  137/      85 : 75                  	ld	(hl),l							; Set flag to not accept driver input (l = FFh)
(2)  138/      86 : DD 73 00            	ld	(ix+0),e						; Select DAC output register
(2)  139/      89 : DD 72 01            	ld	(ix+1),d						; Send current data
(2)  140/      8C : 74                  	ld	(hl),h							; Set flag to accept driver input (h = 1Fh)
(2)  141/      8D :                     
(2)  142/      8D : 41                  	ld	b,c								; b = sample pitch
(2)  143/      8E : 10 FE               	djnz	$							; Pitch loop
(2)  144/      90 :                     
(2)  145/      90 :                     	; After the following exx, we have:
(2)  146/      90 :                     	; bc = size of sample, de = location of sample, hl = pointer to nibble entry in JMan2050 table,
(2)  147/      90 :                     	; c' = pitch of sample, d' = PCM accumulator,
(2)  148/      90 :                     	; e' = command to select DAC output register, hl' = pointer to DAC status
(2)  149/      90 : D9                  	exx
(2)  150/      91 : 1A                  	ld	a,(de)							; a = byte from DAC sample
(2)  151/      92 : E6 0F               	and	0Fh								; Want only lower nibble now
(2)  152/      94 : C6 22               	add	a,zDACDecodeTbl&0FFh			; Add in low byte of offset into decode table
(2)  153/      96 : 6F                  	ld	l,a								; hl = pointer to nibble entry in JMan2050 table
(2)  154/      97 : 7E                  	ld	a,(hl)							; a = JMan2050 entry for current nibble
(2)  155/      98 :                     	; After the following exx, we have:
(2)  156/      98 :                     	; bc' = size of sample, de' = location of sample, hl' = pointer to nibble entry in JMan2050 table,
(2)  157/      98 :                     	; c = pitch of sample, d = PCM accumulator,
(2)  158/      98 :                     	; e = command to select DAC output register, hl = pointer to DAC status
(2)  159/      98 : D9                  	exx
(2)  160/      99 : 82                  	add	a,d								; Add accumulator value...
(2)  161/      9A : 57                  	ld	d,a								; ... then store value back into accumulator
(2)  162/      9B : 75                  	ld	(hl),l							; Set flag to not accept driver input (l = FFh)
(2)  163/      9C : DD 73 00            	ld	(ix+0),e						; Select DAC output register
(2)  164/      9F : DD 72 01            	ld	(ix+1),d						; Send current data
(2)  165/      A2 : 74                  	ld	(hl),h							; Set flag to accept driver input (h = 1Fh)
(2)  166/      A3 :                     
(2)  167/      A3 : 41                  	ld	b,c								; b = sample pitch
(2)  168/      A4 : 10 FE               	djnz	$							; Pitch loop
(2)  169/      A6 :                     
(2)  170/      A6 :                     	; After the following exx, we have:
(2)  171/      A6 :                     	; bc = size of sample, de = location of sample, hl = pointer to nibble entry in JMan2050 table,
(2)  172/      A6 :                     	; c' = pitch of sample, d' = PCM accumulator,
(2)  173/      A6 :                     	; e' = command to select DAC output register, hl' = pointer to DAC status
(2)  174/      A6 : D9                  	exx
(2)  175/      A7 : 3A FF 1F            	ld	a,(zDAC_Sample)					; a = sample we're playing (minus 81h)
(2)  176/      AA : CB 7F               	bit	7,a								; Test bit 7 of register a
(2)  177/      AC : C2 32 00            	jp	nz,zCheckForSamples				; If it is set, we need to get a new sample
(2)  178/      AF :                     
(2)  179/      AF : 13                  	inc	de								; Point to next byte of DAC sample
(2)  180/      B0 : 0B                  	dec	bc								; Decrement remaining bytes on DAC sample
(2)  181/      B1 : 79                  	ld	a,c								; a = low byte of remainig bytes
(2)  182/      B2 : B0                  	or	b								; Are there any bytes left?
(2)  183/      B3 : C2 77 00            	jp	nz,zPlayPCMLoop					; If yes, keep playing sample
(2)  184/      B6 :                     
(2)  185/      B6 : C3 32 00            	jp	zCheckForSamples				; Sample is done; wait for new samples
(2)  186/      B9 :                     ;
(2)  187/      B9 :                     ; Subroutine - Play_SegaPCM
(2)  188/      B9 :                     ;
(2)  189/      B9 :                     ; This subroutine plays the "SEGA" sound.
(2)  190/      B9 :                     ;
(2)  191/      B9 :                     zPlay_SegaPCM:
(2)  192/      B9 : 11 98 E1            	ld	de,zmake68kPtr(SegaPCM)			; de = bank-relative location of the SEGA sound
(2)  193/      BC : 21 78 69            	ld	hl,SegaPCM_End-SegaPCM			; hl = size of the SEGA sound
(2)  194/      BF : 0E 2A               	ld	c,2Ah							; c = Command to select DAC output register
(2)  195/      C1 :                     
(2)  196/      C1 :                     zPlaySEGAPCMLoop:
(2)  197/      C1 : 1A                  	ld	a,(de)							; a = next byte from SEGA PCM
(2)  198/      C2 : DD 71 00            	ld	(ix+0),c						; Select DAC output register
(2)  199/      C5 : DD 77 01            	ld	(ix+1),a						; Send current data
(2)  200/      C8 :                     
(2)  201/      C8 : 06 0B               	ld	b,zSEGA_Pitch					; b = pitch of the SEGA sample
(2)  202/      CA : 10 FE               	djnz	$							; Pitch loop
(2)  203/      CC :                     
(2)  204/      CC : 13                  	inc	de								; Point to next byte of DAC sample
(2)  205/      CD : 2B                  	dec	hl								; Decrement remaining bytes on DAC sample
(2)  206/      CE : 7D                  	ld	a,l								; a = low byte of remainig bytes
(2)  207/      CF : B4                  	or	h								; Are there any bytes left?
(2)  208/      D0 : C2 C1 00            	jp	nz,zPlaySEGAPCMLoop				; If yes, keep playing sample
(2)  209/      D3 :                     
(2)  210/      D3 : C3 32 00            	jp	zCheckForSamples				; SEGA sound is done; wait for new samples
(2)  211/      D6 :                     
(2)  212/      D6 :                     ;
(2)  213/      D6 :                     ; Table referencing the three PCM samples
(2)  214/      D6 :                     ;
(2)  215/      D6 :                     ; As documented by jman2050, first two bytes are a pointer to the sample, third and fourth are the sample size, fifth is the pitch, 6-8 are unused.
(2)  216/      D6 :                     ;
(2)  217/      D6 :                     
(2)  218/      D6 :                     
(2)  219/      D6 :                     zPCM_Table:
(2)  220/      D6 : EE 00               	dw	zDAC_Sample1	; Kick sample
(2)  221/      D8 : 52 03               	dw	(zDAC_Sample1_End-zDAC_Sample1)
(2)  222/      DA : 17 00               	dw	0017h			; Pitch = 17h
(2)  223/      DC : 00 00               	dw	0000h
(2)  224/      DE :                     
(2)  225/      DE : 40 04               	dw	zDAC_Sample2	; Snare sample
(2)  226/      E0 : 70 07               	dw	(zDAC_Sample2_End-zDAC_Sample2)
(2)  227/      E2 : 01 00               	dw	0001h			; Pitch = 1h
(2)  228/      E4 : 00 00               	dw	0000h
(2)  229/      E6 :                     
(2)  230/      E6 : B0 0B               	dw	zDAC_Sample3	; Timpani sample
(2)  231/      E8 : 16 10               	dw	(zDAC_Sample3_End-zDAC_Sample3)
(2)  232/      EA :                     zSample3_Pitch:
(2)  233/      EA : 1B 00               	dw	001Bh			; Pitch = 1Bh
(2)  234/      EC : 00 00               	dw	0000h
(2)  235/      EE :                     
(2)  236/      EE :                     
(2)  237/      EE :                     
(2)  238/      EE :                     zDAC_Sample1:
(2)  239/      EE :                     	binclude "sound/dac/kick.dpcm"
(2)  240/     440 :                     zDAC_Sample1_End:
(2)  241/     440 :                     
(2)  242/     440 :                     zDAC_Sample2:
(2)  243/     440 :                     	binclude "sound/dac/snare.dpcm"
(2)  244/     BB0 :                     zDAC_Sample2_End:
(2)  245/     BB0 :                     
(2)  246/     BB0 :                     zDAC_Sample3:
(2)  247/     BB0 :                     	binclude "sound/dac/timpani.dpcm"
(2)  248/    1BC6 :                     zDAC_Sample3_End:
(2)  249/    1BC6 :                     
(2)  257/    1BC6 :                     
(2)  258/    1BC6 : ALL                  	restore
(2)  259/    1BC6 :                     	padding off
(2)  260/   890EC :                     	!org (Kos_Z80+Size_of_DAC_driver_guess)
(2)  261/   890EC :                     
(1) 2294/   890EC :                     
(1) 2295/   890EC :                     ; ---------------------------------------------------------------------------
(1) 2296/   890EC :                     ; SMPS2ASM - A collection of macros that make SMPS's bytecode human-readable.
(1) 2297/   890EC :                     ; ---------------------------------------------------------------------------
(1) 2298/   890EC : =$1                  SonicDriverVer = 1 ; Tell SMPS2ASM that we're using Sonic 1's driver.
(1) 2299/   890EC :                     		include "sound/_smps2asm_inc.asm"
(2)    1/   890EC :                     ; ===========================================================================
(2)    2/   890EC :                     ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
(2)    3/   890EC :                     ; ===========================================================================
(2)    4/   890EC :                     ; Permission to use, copy, modify, and/or distribute this software for any
(2)    5/   890EC :                     ; purpose with or without fee is hereby granted.
(2)    6/   890EC :                     ;
(2)    7/   890EC :                     ; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
(2)    8/   890EC :                     ; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
(2)    9/   890EC :                     ; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
(2)   10/   890EC :                     ; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
(2)   11/   890EC :                     ; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
(2)   12/   890EC :                     ; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
(2)   13/   890EC :                     ; OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
(2)   14/   890EC :                     ; ===========================================================================
(2)   15/   890EC :                     
(2)   16/   890EC : =$1                  SMPS2ASMVer	= 1
(2)   17/   890EC :                     
(2)   18/   890EC :                     ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
(2)   19/   890EC : =$C                  psgdelta	EQU 12
(2)   20/   890EC :                     ; ---------------------------------------------------------------------------
(2)   21/   890EC :                     ; Standard Octave Pitch Equates
(2)   22/   890EC :                     	enumconf	$C
(2)   23/   890EC : =$88..$B8            	enum		smpsPitch10lo=$88,smpsPitch09lo,smpsPitch08lo,smpsPitch07lo,smpsPitch06lo
(2)   24/   890EC : =$C4..$F4            	nextenum	smpsPitch05lo,smpsPitch04lo,smpsPitch03lo,smpsPitch02lo,smpsPitch01lo
(2)   25/   890EC : =$0..$30             	enum		smpsPitch00=$00,smpsPitch01hi,smpsPitch02hi,smpsPitch03hi,smpsPitch04hi
(2)   26/   890EC : =$3C..$6C            	nextenum	smpsPitch05hi,smpsPitch06hi,smpsPitch07hi,smpsPitch08hi,smpsPitch09hi
(2)   27/   890EC : =$78                 	nextenum	smpsPitch10hi
(2)   28/   890EC :                     	enumconf	1
(2)   29/   890EC :                     ; ---------------------------------------------------------------------------
(2)   30/   890EC :                     ; Note Equates
(2)   31/   890EC : =$80..$8F            	enum		nRst=$80,nC0,nCs0,nD0,nEb0,nE0,nF0,nFs0,nG0,nAb0,nA0,nBb0,nB0,nC1,nCs1,nD1
(2)   32/   890EC : =$90..$9F            	nextenum	nEb1,nE1,nF1,nFs1,nG1,nAb1,nA1,nBb1,nB1,nC2,nCs2,nD2,nEb2,nE2,nF2,nFs2
(2)   33/   890EC : =$A0..$AF            	nextenum	nG2,nAb2,nA2,nBb2,nB2,nC3,nCs3,nD3,nEb3,nE3,nF3,nFs3,nG3,nAb3,nA3,nBb3
(2)   34/   890EC : =$B0..$BF            	nextenum	nB3,nC4,nCs4,nD4,nEb4,nE4,nF4,nFs4,nG4,nAb4,nA4,nBb4,nB4,nC5,nCs5,nD5
(2)   35/   890EC : =$C0..$CF            	nextenum	nEb5,nE5,nF5,nFs5,nG5,nAb5,nA5,nBb5,nB5,nC6,nCs6,nD6,nEb6,nE6,nF6,nFs6
(2)   36/   890EC : =$D0..$DF            	nextenum	nG6,nAb6,nA6,nBb6,nB6,nC7,nCs7,nD7,nEb7,nE7,nF7,nFs7,nG7,nAb7,nA7,nBb7
(2)   37/   890EC :                     ; SMPS2ASM uses nMaxPSG for songs from S1/S2 drivers.
(2)   38/   890EC :                     ; nMaxPSG1 and nMaxPSG2 are used only for songs from S3/S&K/S3D drivers.
(2)   39/   890EC :                     ; The use of psgdelta is intended to undo the effects of PSGPitchConvert
(2)   40/   890EC :                     ; and ensure that the ending note is indeed the maximum PSG frequency.
(2)   42/   890EC : =$C6                 nMaxPSG				EQU nA5
(2)   43/   890EC : =$D2                 nMaxPSG1			EQU nA5+psgdelta
(2)   44/   890EC : =$D2                 nMaxPSG2			EQU nA5+psgdelta
(2)   50/   890EC :                     ; ---------------------------------------------------------------------------
(2)   51/   890EC :                     ; PSG volume envelope equates
(2)   54/   890EC : =$1..$6              			enum		fTone_01=$01,fTone_02,fTone_03,fTone_04,fTone_05,fTone_06
(2)   55/   890EC : =$7..$9              			nextenum	fTone_07,fTone_08,fTone_09
(2)   75/   890EC :                     ; ---------------------------------------------------------------------------
(2)   76/   890EC :                     ; DAC Equates
(2)   79/   890EC : =$81..$83            			enum		dKick=$81,dSnare,dTimpani
(2)   80/   890EC : =$88..$8B            			enum		dHiTimpani=$88,dMidTimpani,dLowTimpani,dVLowTimpani
(2)  124/   890EC :                     ; ---------------------------------------------------------------------------
(2)  125/   890EC :                     ; Channel IDs for SFX
(2)  126/   890EC : =$80                 cPSG1				EQU $80
(2)  127/   890EC : =$A0                 cPSG2				EQU $A0
(2)  128/   890EC : =$C0                 cPSG3				EQU $C0
(2)  129/   890EC : =$E0                 cNoise				EQU $E0	; Not for use in S3/S&K/S3D
(2)  130/   890EC : =$2                  cFM3				EQU $02
(2)  131/   890EC : =$4                  cFM4				EQU $04
(2)  132/   890EC : =$5                  cFM5				EQU $05
(2)  133/   890EC : =$6                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
(2)  134/   890EC :                     ; ---------------------------------------------------------------------------
(2)  135/   890EC :                     ; Conversion macros and functions
(2)  136/   890EC :                     
(2)  137/   890EC :                     conv0To256  function n,((n==0)<<8)|n
(2)  138/   890EC :                     s2TempotoS1 function n,(((768-n)>>1)/(256-n))&$FF
(2)  139/   890EC :                     s2TempotoS3 function n,($100-((n==0)|n))&$FF
(2)  140/   890EC :                     s1TempotoS2 function n,((((conv0To256(n)-1)<<8)+(conv0To256(n)>>1))/conv0To256(n))&$FF
(2)  141/   890EC :                     s1TempotoS3 function n,s2TempotoS3(s1TempotoS2(n))
(2)  142/   890EC :                     s3TempotoS1 function n,s2TempotoS1(s2TempotoS3(n))
(2)  143/   890EC :                     s3TempotoS2 function n,s2TempotoS3(n)
(2)  144/   890EC :                     
(2)  145/   890EC :                     convertMainTempoMod macro mod
(2)  146/   890EC :                     	if ((SourceDriver>=3)&&(SonicDriverVer>=3))||(SonicDriverVer==SourceDriver)
(2)  147/   890EC :                     		dc.b	mod
(2)  148/   890EC :                     	elseif SourceDriver==1
(2)  149/   890EC :                     		if mod==1
(2)  150/   890EC :                     			fatal "Invalid main tempo of 1 in song from Sonic 1"
(2)  151/   890EC :                     		endif
(2)  152/   890EC :                     		if SonicDriverVer==2
(2)  153/   890EC :                     			dc.b	s1TempotoS2(mod)
(2)  154/   890EC :                     		else;if SonicDriverVer>=3
(2)  155/   890EC :                     			dc.b	s1TempotoS3(mod)
(2)  156/   890EC :                     		endif
(2)  157/   890EC :                     	elseif SourceDriver==2
(2)  158/   890EC :                     		if mod==0
(2)  159/   890EC :                     			fatal "Invalid main tempo of 0 in song from Sonic 2"
(2)  160/   890EC :                     		endif
(2)  161/   890EC :                     		if SonicDriverVer==1
(2)  162/   890EC :                     			dc.b	s2TempotoS1(mod)
(2)  163/   890EC :                     		else;if SonicDriverVer>=3
(2)  164/   890EC :                     			dc.b	s2TempotoS3(mod)
(2)  165/   890EC :                     		endif
(2)  166/   890EC :                     	else;if SourceDriver>=3
(2)  167/   890EC :                     		if mod==0
(2)  168/   890EC :                     			message "Performing approximate conversion of Sonic 3 main tempo modifier of 0"
(2)  169/   890EC :                     		endif
(2)  170/   890EC :                     		if SonicDriverVer==1
(2)  171/   890EC :                     			dc.b	s3TempotoS1(mod)
(2)  172/   890EC :                     		else;if SonicDriverVer==2
(2)  173/   890EC :                     			dc.b	s3TempotoS2(mod)
(2)  174/   890EC :                     		endif
(2)  175/   890EC :                     	endif
(2)  176/   890EC :                     	endm
(2)  177/   890EC :                     
(2)  178/   890EC :                     ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
(2)  179/   890EC :                     PSGPitchConvert macro pitch
(2)  180/   890EC :                     	if (SonicDriverVer>=3)&&(SourceDriver<3)
(2)  181/   890EC :                     		dc.b	(pitch+psgdelta)&$FF
(2)  182/   890EC :                     	elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(2)  183/   890EC :                     		dc.b	(pitch-psgdelta)&$FF
(2)  184/   890EC :                     	else
(2)  185/   890EC :                     		dc.b	pitch
(2)  186/   890EC :                     	endif
(2)  187/   890EC :                     	endm
(2)  188/   890EC :                     
(2)  189/   890EC :                     CheckedChannelPointer macro loc
(2)  190/   890EC :                     	if SonicDriverVer<>1
(2)  191/   890EC :                     		dc.w	z80_ptr(loc)
(2)  192/   890EC :                     	else
(2)  193/   890EC :                     		if MOMPASS>1
(2)  194/   890EC :                     			if loc<songStart
(2)  195/   890EC :                     				fatal "Tracks for Sonic 1 songs must come after the start of the song"
(2)  196/   890EC :                     			endif
(2)  197/   890EC :                     		endif
(2)  198/   890EC :                     		dc.w	loc-songStart
(2)  199/   890EC :                     	endif
(2)  200/   890EC :                     	endm
(2)  201/   890EC :                     ; ---------------------------------------------------------------------------
(2)  202/   890EC :                     ; Header Macros
(2)  203/   890EC :                     smpsHeaderStartSong macro ver, sourcesmps2asmver
(2)  204/   890EC :                     
(2)  205/   890EC :                     SourceDriver set ver
(2)  206/   890EC :                     
(2)  207/   890EC :                     	if ("sourcesmps2asmver"<>"")
(2)  208/   890EC :                     		set SourceSMPS2ASM,sourcesmps2asmver
(2)  209/   890EC :                     	else
(2)  210/   890EC :                     		set SourceSMPS2ASM,0
(2)  211/   890EC :                     	endif
(2)  212/   890EC :                     
(2)  213/   890EC :                     songStart set *
(2)  214/   890EC :                     
(2)  215/   890EC :                     	if MOMPASS>1
(2)  216/   890EC :                     		if SMPS2ASMVer < SourceSMPS2ASM
(2)  217/   890EC :                     			message "Song at 0x\{songStart} was made for a newer version of SMPS2ASM (this is version \{SMPS2ASMVer}, but song wants at least version \{SourceSMPS2ASM})."
(2)  218/   890EC :                     		endif
(2)  219/   890EC :                     	endif
(2)  220/   890EC :                     
(2)  221/   890EC :                     	endm
(2)  222/   890EC :                     
(2)  223/   890EC :                     smpsHeaderVoiceNull macro
(2)  224/   890EC :                     	if songStart<>*
(2)  225/   890EC :                     		fatal "Missing smpsHeaderStartSong"
(2)  226/   890EC :                     	endif
(2)  227/   890EC :                     	dc.w	$0000
(2)  228/   890EC :                     	endm
(2)  229/   890EC :                     
(2)  230/   890EC :                     ; Header - Set up Voice Location
(2)  231/   890EC :                     ; Common to music and SFX
(2)  232/   890EC :                     smpsHeaderVoice macro loc
(2)  233/   890EC :                     	if songStart<>*
(2)  234/   890EC :                     		fatal "Missing smpsHeaderStartSong"
(2)  235/   890EC :                     	endif
(2)  236/   890EC :                     	if SonicDriverVer<>1
(2)  237/   890EC :                     		dc.w	z80_ptr(loc)
(2)  238/   890EC :                     	else
(2)  239/   890EC :                     		if MOMPASS>1
(2)  240/   890EC :                     			if loc<songStart
(2)  241/   890EC :                     				fatal "Voice banks for Sonic 1 songs must come after the song"
(2)  242/   890EC :                     			endif
(2)  243/   890EC :                     		endif
(2)  244/   890EC :                     		dc.w	loc-songStart
(2)  245/   890EC :                     	endif
(2)  246/   890EC :                     	endm
(2)  247/   890EC :                     
(2)  248/   890EC :                     ; Header - Set up Voice Location as S3's Universal Voice Bank
(2)  249/   890EC :                     ; Common to music and SFX
(2)  250/   890EC :                     smpsHeaderVoiceUVB macro
(2)  251/   890EC :                     	if songStart<>*
(2)  252/   890EC :                     		fatal "Missing smpsHeaderStartSong"
(2)  253/   890EC :                     	endif
(2)  254/   890EC :                     	if SonicDriverVer>=5
(2)  255/   890EC :                     		dc.w	z80_ptr(z80_UniVoiceBank)
(2)  256/   890EC :                     	elseif SonicDriverVer>=3
(2)  257/   890EC :                     		dc.w	little_endian(z80_UniVoiceBank)
(2)  258/   890EC :                     	else
(2)  259/   890EC :                     		fatal "Universal Voice Bank does not exist in Sonic 1 or Sonic 2 drivers"
(2)  260/   890EC :                     	endif
(2)  261/   890EC :                     	endm
(2)  262/   890EC :                     
(2)  263/   890EC :                     ; Header macros for music (not for SFX)
(2)  264/   890EC :                     ; Header - Set up Channel Usage
(2)  265/   890EC :                     smpsHeaderChan macro fm,psg
(2)  266/   890EC :                     	dc.b	fm,psg
(2)  267/   890EC :                     	endm
(2)  268/   890EC :                     
(2)  269/   890EC :                     ; Header - Set up Tempo
(2)  270/   890EC :                     smpsHeaderTempo macro div,mod
(2)  271/   890EC :                     	dc.b	div
(2)  272/   890EC :                     	convertMainTempoMod mod
(2)  273/   890EC :                     	endm
(2)  274/   890EC :                     
(2)  275/   890EC :                     ; Header - Set up DAC Channel
(2)  276/   890EC :                     smpsHeaderDAC macro loc,pitch,vol
(2)  277/   890EC :                     	CheckedChannelPointer loc
(2)  278/   890EC :                     	if ("pitch"<>"")
(2)  279/   890EC :                     		dc.b	pitch
(2)  280/   890EC :                     		if ("vol"<>"")
(2)  281/   890EC :                     			dc.b	vol
(2)  282/   890EC :                     		else
(2)  283/   890EC :                     			dc.b	$00
(2)  284/   890EC :                     		endif
(2)  285/   890EC :                     	else
(2)  286/   890EC :                     		dc.w	$00
(2)  287/   890EC :                     	endif
(2)  288/   890EC :                     	endm
(2)  289/   890EC :                     
(2)  290/   890EC :                     ; Header - Set up FM Channel
(2)  291/   890EC :                     smpsHeaderFM macro loc,pitch,vol
(2)  292/   890EC :                     	CheckedChannelPointer loc
(2)  293/   890EC :                     	dc.b	pitch,vol
(2)  294/   890EC :                     	endm
(2)  295/   890EC :                     
(2)  296/   890EC :                     ; Header - Set up PSG Channel
(2)  297/   890EC :                     smpsHeaderPSG macro loc,pitch,vol,mod,voice
(2)  298/   890EC :                     	CheckedChannelPointer loc
(2)  299/   890EC :                     	PSGPitchConvert pitch
(2)  300/   890EC :                     	dc.b	vol
(2)  301/   890EC :                     	; Frequency envelope
(2)  302/   890EC :                     	if (SonicDriverVer>=3) && (SourceDriver<3)
(2)  303/   890EC :                     		; In SMPS 68k Type 1, this byte is skipped and can contain garbage.
(2)  304/   890EC :                     		; Sonic 2's Oil Ocean Zone and Ending themes set this byte to a non-zero value which
(2)  305/   890EC :                     		; other drivers may try to process as valid data, so manually force it to 0 here.
(2)  306/   890EC :                     		dc.b	0
(2)  307/   890EC :                     	else
(2)  308/   890EC :                     		if (MOMPASS==2) && (SonicDriverVer<3) && (SourceDriver>=3) && (mod<>0)
(2)  309/   890EC :                     			message "This track header specifies a frequency envelope, but this driver does not support them."			
(2)  310/   890EC :                     		endif
(2)  311/   890EC :                     		dc.b	mod
(2)  312/   890EC :                     	endif
(2)  313/   890EC :                     	; Volume envelope
(2)  314/   890EC :                     	dc.b	voice
(2)  315/   890EC :                     	endm
(2)  316/   890EC :                     
(2)  317/   890EC :                     ; Header macros for SFX (not for music)
(2)  318/   890EC :                     ; Header - Set up Tempo
(2)  319/   890EC :                     smpsHeaderTempoSFX macro div
(2)  320/   890EC :                     	dc.b	div
(2)  321/   890EC :                     	endm
(2)  322/   890EC :                     
(2)  323/   890EC :                     ; Header - Set up Channel Usage
(2)  324/   890EC :                     smpsHeaderChanSFX macro chan
(2)  325/   890EC :                     	dc.b	chan
(2)  326/   890EC :                     	endm
(2)  327/   890EC :                     
(2)  328/   890EC :                     ; Header - Set up FM Channel
(2)  329/   890EC :                     smpsHeaderSFXChannel macro chanid,loc,pitch,vol
(2)  330/   890EC :                     	if (SonicDriverVer>=3)&&(chanid==cNoise)
(2)  331/   890EC :                     		fatal "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
(2)  332/   890EC :                     	elseif (SonicDriverVer<3)&&(chanid==cFM6)
(2)  333/   890EC :                     		fatal "Using channel ID of FM6 ($06) in Sonic 1 or Sonic 2 drivers is unsupported. Change it to another channel."
(2)  334/   890EC :                     	endif
(2)  335/   890EC :                     	dc.b	$80,chanid
(2)  336/   890EC :                     	CheckedChannelPointer loc
(2)  337/   890EC :                     	if (chanid&$80)<>0
(2)  338/   890EC :                     		PSGPitchConvert pitch
(2)  339/   890EC :                     	else
(2)  340/   890EC :                     		dc.b	pitch
(2)  341/   890EC :                     	endif
(2)  342/   890EC :                     	dc.b	vol
(2)  343/   890EC :                     	endm
(2)  344/   890EC :                     ; ---------------------------------------------------------------------------
(2)  345/   890EC :                     ; Co-ord Flag Macros and Equates
(2)  346/   890EC :                     ; E0xx - Panning, AMS, FMS
(2)  347/   890EC :                     smpsPan macro direction,amsfms
(2)  348/   890EC :                     panNone set $00
(2)  349/   890EC :                     panRight set $40
(2)  350/   890EC :                     panLeft set $80
(2)  351/   890EC :                     panCentre set $C0
(2)  352/   890EC :                     panCenter set $C0 ; silly Americans :U
(2)  353/   890EC :                     	dc.b $E0,direction+amsfms
(2)  354/   890EC :                     	endm
(2)  355/   890EC :                     
(2)  356/   890EC :                     ; E1xx - Set channel detune to val
(2)  357/   890EC :                     smpsDetune macro val
(2)  358/   890EC :                     	dc.b	$E1,val
(2)  359/   890EC :                     	endm
(2)  360/   890EC :                     
(2)  361/   890EC :                     ; E2xx - Useless
(2)  362/   890EC :                     smpsNop macro val
(2)  363/   890EC :                     	if SonicDriverVer<3
(2)  364/   890EC :                     		dc.b	$E2,val
(2)  365/   890EC :                     	endif
(2)  366/   890EC :                     	endm
(2)  367/   890EC :                     
(2)  368/   890EC :                     ; Return (used after smpsCall)
(2)  369/   890EC :                     smpsReturn macro val
(2)  370/   890EC :                     	if SonicDriverVer>=3
(2)  371/   890EC :                     		dc.b	$F9
(2)  372/   890EC :                     	else
(2)  373/   890EC :                     		dc.b	$E3
(2)  374/   890EC :                     	endif
(2)  375/   890EC :                     	endm
(2)  376/   890EC :                     
(2)  377/   890EC :                     ; Fade in previous song (ie. 1-Up)
(2)  378/   890EC :                     smpsFade macro val
(2)  379/   890EC :                     	if SonicDriverVer>=3
(2)  380/   890EC :                     		dc.b	$E2
(2)  381/   890EC :                     		if ("val"<>"")
(2)  382/   890EC :                     			dc.b	val
(2)  383/   890EC :                     		else
(2)  384/   890EC :                     			dc.b	$FF
(2)  385/   890EC :                     		endif
(2)  386/   890EC :                     		if SourceDriver<3
(2)  387/   890EC :                     			smpsStop
(2)  388/   890EC :                     		endif
(2)  389/   890EC :                     	elseif (SourceDriver>=3) && ("val"<>"") && ("val"<>"$FF")
(2)  390/   890EC :                     		; This is one of those weird S3+ "fades" that we don't need
(2)  391/   890EC :                     	else
(2)  392/   890EC :                     		dc.b	$E4
(2)  393/   890EC :                     	endif
(2)  394/   890EC :                     	endm
(2)  395/   890EC :                     
(2)  396/   890EC :                     ; E5xx - Set channel tempo divider to xx
(2)  397/   890EC :                     smpsChanTempoDiv macro val
(2)  398/   890EC :                     	if SonicDriverVer>=5
(2)  399/   890EC :                     		; New flag unique to Flamewing's modified S&K driver
(2)  400/   890EC :                     		dc.b	$FF,$08,val
(2)  401/   890EC :                     	elseif SonicDriverVer==3
(2)  402/   890EC :                     		fatal "Coord. Flag to set tempo divider of a single channel does not exist in S3 driver. Use Flamewing's modified S&K sound driver instead."
(2)  403/   890EC :                     	else
(2)  404/   890EC :                     		dc.b	$E5,val
(2)  405/   890EC :                     	endif
(2)  406/   890EC :                     	endm
(2)  407/   890EC :                     
(2)  408/   890EC :                     ; E6xx - Alter Volume by xx
(2)  409/   890EC :                     smpsAlterVol macro val
(2)  410/   890EC :                     	dc.b	$E6,val
(2)  411/   890EC :                     	endm
(2)  412/   890EC :                     
(2)  413/   890EC :                     ; E7 - Prevent attack of next note
(2)  414/   890EC : =$E7                 smpsNoAttack	EQU $E7
(2)  415/   890EC :                     
(2)  416/   890EC :                     ; E8xx - Set note fill to xx
(2)  417/   890EC :                     smpsNoteFill macro val
(2)  418/   890EC :                     	if (SonicDriverVer>=5)&&(SourceDriver<3)
(2)  419/   890EC :                     		; Unique to Flamewing's modified driver
(2)  420/   890EC :                     		dc.b	$FF,$0A,val
(2)  421/   890EC :                     	else
(2)  422/   890EC :                     		if (SonicDriverVer>=3)&&(SourceDriver<3)
(2)  423/   890EC :                     			message "Note fill will not work as intended unless you divide the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(2)  424/   890EC :                     		elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(2)  425/   890EC :                     			message "Note fill will not work as intended unless you multiply the fill value by the tempo divider or complain to Flamewing to add an appropriate coordination flag for it."
(2)  426/   890EC :                     		endif
(2)  427/   890EC :                     		dc.b	$E8,val
(2)  428/   890EC :                     	endif
(2)  429/   890EC :                     	endm
(2)  430/   890EC :                     
(2)  431/   890EC :                     ; Add xx to channel pitch
(2)  432/   890EC :                     smpsChangeTransposition macro val
(2)  433/   890EC :                     	if SonicDriverVer>=3
(2)  434/   890EC :                     		dc.b	$FB,val
(2)  435/   890EC :                     	else
(2)  436/   890EC :                     		dc.b	$E9,val
(2)  437/   890EC :                     	endif
(2)  438/   890EC :                     	endm
(2)  439/   890EC :                     
(2)  440/   890EC :                     ; Set music tempo modifier to xx
(2)  441/   890EC :                     smpsSetTempoMod macro mod
(2)  442/   890EC :                     	if SonicDriverVer>=3
(2)  443/   890EC :                     		dc.b	$FF,$00
(2)  444/   890EC :                     	else
(2)  445/   890EC :                     		dc.b	$EA
(2)  446/   890EC :                     	endif
(2)  447/   890EC :                     	convertMainTempoMod mod
(2)  448/   890EC :                     	endm
(2)  449/   890EC :                     
(2)  450/   890EC :                     ; Set music tempo divider to xx
(2)  451/   890EC :                     smpsSetTempoDiv macro val
(2)  452/   890EC :                     	if SonicDriverVer>=3
(2)  453/   890EC :                     		dc.b	$FF,$04,val
(2)  454/   890EC :                     	else
(2)  455/   890EC :                     		dc.b	$EB,val
(2)  456/   890EC :                     	endif
(2)  457/   890EC :                     	endm
(2)  458/   890EC :                     
(2)  459/   890EC :                     ; ECxx - Set Volume to xx
(2)  460/   890EC :                     smpsSetVol macro val
(2)  461/   890EC :                     	if SonicDriverVer>=3
(2)  462/   890EC :                     		dc.b	$E4,val
(2)  463/   890EC :                     	else
(2)  464/   890EC :                     		fatal "Coord. Flag to set volume (instead of volume attenuation) does not exist in S1 or S2 drivers. Complain to Flamewing to add it."
(2)  465/   890EC :                     	endif
(2)  466/   890EC :                     	endm
(2)  467/   890EC :                     
(2)  468/   890EC :                     ; Works on all drivers
(2)  469/   890EC :                     smpsPSGAlterVol macro vol
(2)  470/   890EC :                     	dc.b	$EC,vol
(2)  471/   890EC :                     	endm
(2)  472/   890EC :                     
(2)  473/   890EC :                     ; Clears pushing sound flag in S1
(2)  474/   890EC :                     smpsClearPush macro
(2)  475/   890EC :                     	if SonicDriverVer==1
(2)  476/   890EC :                     		dc.b	$ED
(2)  477/   890EC :                     	else
(2)  478/   890EC :                     		fatal "Coord. Flag to clear S1 push block flag does not exist in S2 or S3 drivers. Complain to Flamewing to add it."
(2)  479/   890EC :                     	endif
(2)  480/   890EC :                     	endm
(2)  481/   890EC :                     
(2)  482/   890EC :                     ; Stops special SFX (S1 only) and restarts overridden music track
(2)  483/   890EC :                     smpsStopSpecial macro
(2)  484/   890EC :                     	if SonicDriverVer==1
(2)  485/   890EC :                     		dc.b	$EE
(2)  486/   890EC :                     	else
(2)  487/   890EC :                     		message "Coord. Flag to stop special SFX does not exist in S2 or S3 drivers. Complain to Flamewing to add it. With adequate caution, smpsStop can do this job."
(2)  488/   890EC :                     		smpsStop
(2)  489/   890EC :                     	endif
(2)  490/   890EC :                     	endm
(2)  491/   890EC :                     
(2)  492/   890EC :                     ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
(2)  493/   890EC :                     smpsFMvoice macro voice,songID
(2)  494/   890EC :                     	if (SonicDriverVer>=3)&&("songID"<>"")
(2)  495/   890EC :                     		dc.b	$EF,voice|$80,songID+$81
(2)  496/   890EC :                     	else
(2)  497/   890EC :                     		dc.b	$EF,voice
(2)  498/   890EC :                     	endif
(2)  499/   890EC :                     	endm
(2)  500/   890EC :                     
(2)  501/   890EC :                     ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
(2)  502/   890EC :                     smpsModSet macro wait,speed,change,step
(2)  503/   890EC :                     	dc.b	$F0
(2)  504/   890EC :                     	if (SonicDriverVer>=3)&&(SourceDriver<3)
(2)  505/   890EC :                     		dc.b	wait+1,speed,change,((step+1) * speed) & $FF
(2)  506/   890EC :                     	elseif (SonicDriverVer<3)&&(SourceDriver>=3)
(2)  507/   890EC :                     		dc.b	wait-1,speed,change,conv0To256(step)/conv0To256(speed)-1
(2)  508/   890EC :                     	else
(2)  509/   890EC :                     		dc.b	wait,speed,change,step
(2)  510/   890EC :                     	endif
(2)  511/   890EC :                     	;dc.b	speed,change,step
(2)  512/   890EC :                     	endm
(2)  513/   890EC :                     
(2)  514/   890EC :                     ; Turn on Modulation
(2)  515/   890EC :                     smpsModOn macro type
(2)  516/   890EC :                     	if SonicDriverVer>=3
(2)  517/   890EC :                     		if "type"<>""
(2)  518/   890EC :                     			dc.b	$F4,type
(2)  519/   890EC :                     		else
(2)  520/   890EC :                     			dc.b	$F4,$80
(2)  521/   890EC :                     		endif
(2)  522/   890EC :                     	else
(2)  523/   890EC :                     		dc.b	$F1
(2)  524/   890EC :                     	endif
(2)  525/   890EC :                     	endm
(2)  526/   890EC :                     
(2)  527/   890EC :                     ; F2 - End of channel
(2)  528/   890EC :                     smpsStop macro
(2)  529/   890EC :                     	dc.b	$F2
(2)  530/   890EC :                     	endm
(2)  531/   890EC :                     
(2)  532/   890EC :                     ; F3xx - PSG waveform to xx
(2)  533/   890EC :                     smpsPSGform macro form
(2)  534/   890EC :                     	dc.b	$F3,form
(2)  535/   890EC :                     	endm
(2)  536/   890EC :                     
(2)  537/   890EC :                     ; Turn off Modulation
(2)  538/   890EC :                     smpsModOff macro
(2)  539/   890EC :                     	if SonicDriverVer>=3
(2)  540/   890EC :                     		dc.b	$FA
(2)  541/   890EC :                     	else
(2)  542/   890EC :                     		dc.b	$F4
(2)  543/   890EC :                     	endif
(2)  544/   890EC :                     	endm
(2)  545/   890EC :                     
(2)  546/   890EC :                     ; F5xx - PSG voice to xx
(2)  547/   890EC :                     smpsPSGvoice macro voice
(2)  548/   890EC :                     	dc.b	$F5,voice
(2)  549/   890EC :                     	endm
(2)  550/   890EC :                     
(2)  551/   890EC :                     ; F6xxxx - Jump to xxxx
(2)  552/   890EC :                     smpsJump macro loc
(2)  553/   890EC :                     	dc.b	$F6
(2)  554/   890EC :                     	if SonicDriverVer<>1
(2)  555/   890EC :                     		dc.w	z80_ptr(loc)
(2)  556/   890EC :                     	else
(2)  557/   890EC :                     		dc.w	loc-*-1
(2)  558/   890EC :                     	endif
(2)  559/   890EC :                     	endm
(2)  560/   890EC :                     
(2)  561/   890EC :                     ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
(2)  562/   890EC :                     smpsLoop macro index,loops,loc
(2)  563/   890EC :                     	dc.b	$F7
(2)  564/   890EC :                     	dc.b	index,loops
(2)  565/   890EC :                     	if SonicDriverVer<>1
(2)  566/   890EC :                     		dc.w	z80_ptr(loc)
(2)  567/   890EC :                     	else
(2)  568/   890EC :                     		dc.w	loc-*-1
(2)  569/   890EC :                     	endif
(2)  570/   890EC :                     	endm
(2)  571/   890EC :                     
(2)  572/   890EC :                     ; F8xxxx - Call pattern at xxxx, saving return point
(2)  573/   890EC :                     smpsCall macro loc
(2)  574/   890EC :                     	dc.b	$F8
(2)  575/   890EC :                     	if SonicDriverVer<>1
(2)  576/   890EC :                     		dc.w	z80_ptr(loc)
(2)  577/   890EC :                     	else
(2)  578/   890EC :                     		dc.w	loc-*-1
(2)  579/   890EC :                     	endif
(2)  580/   890EC :                     	endm
(2)  581/   890EC :                     ; ---------------------------------------------------------------------------
(2)  582/   890EC :                     ; Alter Volume
(2)  583/   890EC :                     smpsFMAlterVol macro val1,val2
(2)  584/   890EC :                     	if (SonicDriverVer>=3)&&("val2"<>"")
(2)  585/   890EC :                     		dc.b	$E5,val1,val2
(2)  586/   890EC :                     	else
(2)  587/   890EC :                     		dc.b	$E6,val1
(2)  588/   890EC :                     	endif
(2)  589/   890EC :                     	endm
(2)  590/   890EC :                     
(2)  591/   890EC :                     ; S3/S&K/S3D-only coordination flags
(2)  696/   890EC :                     ; ---------------------------------------------------------------------------
(2)  697/   890EC :                     ; S1/S2 only coordination flag
(2)  698/   890EC :                     ; Sets D1L to maximum volume (minimum attenuation) and RR to maximum for operators 3 and 4 of FM1
(2)  699/   890EC :                     smpsMaxRelRate macro
(2)  700/   890EC :                     	if SonicDriverVer>=3
(2)  701/   890EC :                     		; Emulate it in S3/S&K/S3D driver
(2)  702/   890EC :                     		smpsFMICommand $88,$0F
(2)  703/   890EC :                     		smpsFMICommand $8C,$0F
(2)  704/   890EC :                     	else
(2)  705/   890EC :                     		dc.b	$F9
(2)  706/   890EC :                     	endif
(2)  707/   890EC :                     	endm
(2)  708/   890EC :                     ; ---------------------------------------------------------------------------
(2)  709/   890EC :                     ; Backwards compatibility
(2)  710/   890EC :                     smpsAlterNote macro
(2)  711/   890EC :                     	smpsDetune	ALLARGS
(2)  712/   890EC :                     	endm
(2)  713/   890EC :                     
(2)  714/   890EC :                     smpsAlterPitch macro
(2)  715/   890EC :                     	smpsChangeTransposition	ALLARGS
(2)  716/   890EC :                     	endm
(2)  717/   890EC :                     
(2)  718/   890EC :                     smpsFMFlutter macro
(2)  719/   890EC :                     	smpsFMVolEnv	ALLARGS
(2)  720/   890EC :                     	endm
(2)  721/   890EC :                     
(2)  722/   890EC :                     smpsWeirdD1LRR macro
(2)  723/   890EC :                     	smpsMaxRelRate ALLARGS
(2)  724/   890EC :                     	endm
(2)  725/   890EC :                     
(2)  726/   890EC :                     smpsSetvoice macro
(2)  727/   890EC :                     	smpsFMvoice ALLARGS
(2)  728/   890EC :                     	endm
(2)  729/   890EC :                     ; ---------------------------------------------------------------------------
(2)  730/   890EC :                     ; Macros for FM instruments
(2)  731/   890EC :                     ; Voices - Feedback
(2)  732/   890EC :                     smpsVcFeedback macro val
(2)  733/   890EC :                     vcFeedback set val
(2)  734/   890EC :                     	endm
(2)  735/   890EC :                     
(2)  736/   890EC :                     ; Voices - Algorithm
(2)  737/   890EC :                     smpsVcAlgorithm macro val
(2)  738/   890EC :                     vcAlgorithm set val
(2)  739/   890EC :                     	endm
(2)  740/   890EC :                     
(2)  741/   890EC :                     smpsVcUnusedBits macro val,d1r1,d1r2,d1r3,d1r4
(2)  742/   890EC :                     vcUnusedBits set val
(2)  743/   890EC :                     	if ("d1r1"<>"")&&("d1r2"<>"")&&("d1r3"<>"")&&("d1r4"<>"")
(2)  744/   890EC :                     		set vcD1R1Unk,d1r1<<5
(2)  745/   890EC :                     		set vcD1R2Unk,d1r2<<5
(2)  746/   890EC :                     		set vcD1R3Unk,d1r3<<5
(2)  747/   890EC :                     		set vcD1R4Unk,d1r4<<5
(2)  748/   890EC :                     	else
(2)  749/   890EC :                     		set vcD1R1Unk,0
(2)  750/   890EC :                     		set vcD1R2Unk,0
(2)  751/   890EC :                     		set vcD1R3Unk,0
(2)  752/   890EC :                     		set vcD1R4Unk,0
(2)  753/   890EC :                     	endif
(2)  754/   890EC :                     	endm
(2)  755/   890EC :                     
(2)  756/   890EC :                     ; Voices - Detune
(2)  757/   890EC :                     smpsVcDetune macro op1,op2,op3,op4
(2)  758/   890EC :                     	set vcDT1,op1
(2)  759/   890EC :                     	set vcDT2,op2
(2)  760/   890EC :                     	set vcDT3,op3
(2)  761/   890EC :                     	set vcDT4,op4
(2)  762/   890EC :                     	endm
(2)  763/   890EC :                     
(2)  764/   890EC :                     ; Voices - Coarse-Frequency
(2)  765/   890EC :                     smpsVcCoarseFreq macro op1,op2,op3,op4
(2)  766/   890EC :                     	set vcCF1,op1
(2)  767/   890EC :                     	set vcCF2,op2
(2)  768/   890EC :                     	set vcCF3,op3
(2)  769/   890EC :                     	set vcCF4,op4
(2)  770/   890EC :                     	endm
(2)  771/   890EC :                     
(2)  772/   890EC :                     ; Voices - Rate Scale
(2)  773/   890EC :                     smpsVcRateScale macro op1,op2,op3,op4
(2)  774/   890EC :                     	set vcRS1,op1
(2)  775/   890EC :                     	set vcRS2,op2
(2)  776/   890EC :                     	set vcRS3,op3
(2)  777/   890EC :                     	set vcRS4,op4
(2)  778/   890EC :                     	endm
(2)  779/   890EC :                     
(2)  780/   890EC :                     ; Voices - Attack Rate
(2)  781/   890EC :                     smpsVcAttackRate macro op1,op2,op3,op4
(2)  782/   890EC :                     	set vcAR1,op1
(2)  783/   890EC :                     	set vcAR2,op2
(2)  784/   890EC :                     	set vcAR3,op3
(2)  785/   890EC :                     	set vcAR4,op4
(2)  786/   890EC :                     	endm
(2)  787/   890EC :                     
(2)  788/   890EC :                     ; Voices - Amplitude Modulation
(2)  789/   890EC :                     ; The original SMPS2ASM erroneously assumed the 6th and 7th bits
(2)  790/   890EC :                     ; were the Amplitude Modulation.
(2)  791/   890EC :                     ; According to several docs, however, it's actually the high bit.
(2)  792/   890EC :                     smpsVcAmpMod macro op1,op2,op3,op4
(2)  793/   890EC :                     	if SourceSMPS2ASM==0
(2)  794/   890EC :                     		set vcAM1,op1<<5
(2)  795/   890EC :                     		set vcAM2,op2<<5
(2)  796/   890EC :                     		set vcAM3,op3<<5
(2)  797/   890EC :                     		set vcAM4,op4<<5
(2)  798/   890EC :                     	else
(2)  799/   890EC :                     		set vcAM1,op1<<7
(2)  800/   890EC :                     		set vcAM2,op2<<7
(2)  801/   890EC :                     		set vcAM3,op3<<7
(2)  802/   890EC :                     		set vcAM4,op4<<7
(2)  803/   890EC :                     	endif
(2)  804/   890EC :                     	endm
(2)  805/   890EC :                     
(2)  806/   890EC :                     ; Voices - First Decay Rate
(2)  807/   890EC :                     smpsVcDecayRate1 macro op1,op2,op3,op4
(2)  808/   890EC :                     	set vcD1R1,op1
(2)  809/   890EC :                     	set vcD1R2,op2
(2)  810/   890EC :                     	set vcD1R3,op3
(2)  811/   890EC :                     	set vcD1R4,op4
(2)  812/   890EC :                     	endm
(2)  813/   890EC :                     
(2)  814/   890EC :                     ; Voices - Second Decay Rate
(2)  815/   890EC :                     smpsVcDecayRate2 macro op1,op2,op3,op4
(2)  816/   890EC :                     	set vcD2R1,op1
(2)  817/   890EC :                     	set vcD2R2,op2
(2)  818/   890EC :                     	set vcD2R3,op3
(2)  819/   890EC :                     	set vcD2R4,op4
(2)  820/   890EC :                     	endm
(2)  821/   890EC :                     
(2)  822/   890EC :                     ; Voices - Decay Level
(2)  823/   890EC :                     smpsVcDecayLevel macro op1,op2,op3,op4
(2)  824/   890EC :                     	set vcDL1,op1
(2)  825/   890EC :                     	set vcDL2,op2
(2)  826/   890EC :                     	set vcDL3,op3
(2)  827/   890EC :                     	set vcDL4,op4
(2)  828/   890EC :                     	endm
(2)  829/   890EC :                     
(2)  830/   890EC :                     ; Voices - Release Rate
(2)  831/   890EC :                     smpsVcReleaseRate macro op1,op2,op3,op4
(2)  832/   890EC :                     	set vcRR1,op1
(2)  833/   890EC :                     	set vcRR2,op2
(2)  834/   890EC :                     	set vcRR3,op3
(2)  835/   890EC :                     	set vcRR4,op4
(2)  836/   890EC :                     	endm
(2)  837/   890EC :                     
(2)  838/   890EC :                     ; Voices - Total Level
(2)  839/   890EC :                     ; The original SMPS2ASM decides TL high bits automatically,
(2)  840/   890EC :                     ; but later versions leave it up to the user.
(2)  841/   890EC :                     ; Alternatively, if we're converting an SMPS 68k song to SMPS Z80,
(2)  842/   890EC :                     ; then we *want* the TL bits to match the algorithm, because SMPS 68k
(2)  843/   890EC :                     ; prefers the algorithm over the TL bits, ignoring the latter, while
(2)  844/   890EC :                     ; SMPS Z80 does the opposite.
(2)  845/   890EC :                     ; Unfortunately, there's nothing we can do if we're trying to convert
(2)  846/   890EC :                     ; an SMPS Z80 song to SMPS 68k. It will ignore the bits no matter
(2)  847/   890EC :                     ; what we do, so we just print a warning.
(2)  848/   890EC :                     smpsVcTotalLevel macro op1,op2,op3,op4
(2)  849/   890EC :                     	set vcTL1,op1
(2)  850/   890EC :                     	set vcTL2,op2
(2)  851/   890EC :                     	set vcTL3,op3
(2)  852/   890EC :                     	set vcTL4,op4
(2)  853/   890EC :                     	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
(2)  854/   890EC :                     ;   0     1     2     3     4     5     6     7
(2)  855/   890EC :                     ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
(2)  856/   890EC :                     	if SourceSMPS2ASM==0
(2)  857/   890EC :                     		set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  858/   890EC :                     		set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  859/   890EC :                     		set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  860/   890EC :                     		set vcTLMask1,$80
(2)  861/   890EC :                     	else
(2)  862/   890EC :                     		set vcTLMask4,0
(2)  863/   890EC :                     		set vcTLMask3,0
(2)  864/   890EC :                     		set vcTLMask2,0
(2)  865/   890EC :                     		set vcTLMask1,0
(2)  866/   890EC :                     	endif
(2)  867/   890EC :                     
(2)  868/   890EC :                     	if (SonicDriverVer>=3)&&(SourceDriver<3)
(2)  869/   890EC :                     		set vcTLMask4,((vcAlgorithm==7)<<7)
(2)  870/   890EC :                     		set vcTLMask3,((vcAlgorithm>=4)<<7)
(2)  871/   890EC :                     		set vcTLMask2,((vcAlgorithm>=5)<<7)
(2)  872/   890EC :                     		set vcTLMask1,$80
(2)  873/   890EC :                     		set vcTL1,vcTL1&$7F
(2)  874/   890EC :                     		set vcTL2,vcTL2&$7F
(2)  875/   890EC :                     		set vcTL3,vcTL3&$7F
(2)  876/   890EC :                     		set vcTL4,vcTL4&$7F
(2)  877/   890EC :                     	elseif (SonicDriverVer<3)&&(SourceDriver>=3)&&((((vcTL1|vcTLMask1)&$80)<>$80)||(((vcTL2|vcTLMask2)&$80)<>((vcAlgorithm>=5)<<7))||(((vcTL3|vcTLMask3)&$80)<>((vcAlgorithm>=4)<<7))||(((vcTL4|vcTLMask4)&$80)<>((vcAlgorithm==7)<<7)))
(2)  878/   890EC :                     		if MOMPASS>1
(2)  879/   890EC :                     			message "Voice at 0x\{*} has TL bits that do not match its algorithm setting. This voice will not work in S1/S2 drivers."
(2)  880/   890EC :                     		endif
(2)  881/   890EC :                     	endif
(2)  882/   890EC :                     
(2)  883/   890EC :                     	if SonicDriverVer==2
(2)  884/   890EC :                     		dc.b	(vcDT4<<4)+vcCF4       ,(vcDT2<<4)+vcCF2       ,(vcDT3<<4)+vcCF3       ,(vcDT1<<4)+vcCF1
(2)  885/   890EC :                     		dc.b	(vcRS4<<6)+vcAR4       ,(vcRS2<<6)+vcAR2       ,(vcRS3<<6)+vcAR3       ,(vcRS1<<6)+vcAR1
(2)  886/   890EC :                     		dc.b	vcAM4|vcD1R4|vcD1R4Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  887/   890EC :                     		dc.b	vcD2R4                 ,vcD2R2                 ,vcD2R3                 ,vcD2R1
(2)  888/   890EC :                     		dc.b	(vcDL4<<4)+vcRR4       ,(vcDL2<<4)+vcRR2       ,(vcDL3<<4)+vcRR3       ,(vcDL1<<4)+vcRR1
(2)  889/   890EC :                     		dc.b	vcTL4|vcTLMask4        ,vcTL2|vcTLMask2        ,vcTL3|vcTLMask3        ,vcTL1|vcTLMask1
(2)  890/   890EC :                     	else
(2)  891/   890EC :                     		dc.b	(vcDT4<<4)+vcCF4       ,(vcDT3<<4)+vcCF3       ,(vcDT2<<4)+vcCF2       ,(vcDT1<<4)+vcCF1
(2)  892/   890EC :                     		dc.b	(vcRS4<<6)+vcAR4       ,(vcRS3<<6)+vcAR3       ,(vcRS2<<6)+vcAR2       ,(vcRS1<<6)+vcAR1
(2)  893/   890EC :                     		dc.b	vcAM4|vcD1R4|vcD1R4Unk ,vcAM3|vcD1R3|vcD1R3Unk ,vcAM2|vcD1R2|vcD1R2Unk ,vcAM1|vcD1R1|vcD1R1Unk
(2)  894/   890EC :                     		dc.b	vcD2R4                 ,vcD2R3                 ,vcD2R2                 ,vcD2R1
(2)  895/   890EC :                     		dc.b	(vcDL4<<4)+vcRR4       ,(vcDL3<<4)+vcRR3       ,(vcDL2<<4)+vcRR2       ,(vcDL1<<4)+vcRR1
(2)  896/   890EC :                     		dc.b	vcTL4|vcTLMask4        ,vcTL3|vcTLMask3        ,vcTL2|vcTLMask2        ,vcTL1|vcTLMask1
(2)  897/   890EC :                     	endif
(2)  898/   890EC :                     	endm
(2)  899/   890EC :                     
(2)  900/   890EC :                     
(1) 2300/   890EC :                     
(1) 2301/   890EC :                     		
(1) 2302/   890EC :                     Music81:	binclude	"sound/MUSIC/music81.bin"
(1) 2303/   89854 : (MACRO)              		even
(1) 2304/   89854 :                     Music82:	binclude	"sound/MUSIC/music82.bin"
(1) 2305/   89CA4 : (MACRO)              		even
(1) 2306/   89CA4 :                     Music83:	binclude	"sound/MUSIC/music83.bin"
(1) 2307/   8A102 : (MACRO)              		even
(1) 2308/   8A102 :                     Music84:	binclude	"sound/MUSIC/music84.bin"
(1) 2309/   8A570 : (MACRO)              		even
(1) 2310/   8A570 :                     Music85:	binclude	"sound/MUSIC/music85.bin"
(1) 2311/   8A9BC : (MACRO)              		even
(1) 2312/   8A9BC :                     Music86:	binclude	"sound/MUSIC/music86.bin"
(1) 2313/   8AF0C : (MACRO)              		even
(1) 2314/   8AF0C :                     Music87:	binclude	"sound/MUSIC/music87.bin"
(1) 2315/   8B0F2 : (MACRO)              		even
(1) 2316/   8B0F2 :                     Music88:	binclude	"sound/MUSIC/music88.bin"
(1) 2317/   8B1E0 : (MACRO)              		even
(1) 2318/   8B1E0 :                     Music89:	binclude	"sound/MUSIC/music89.bin"
(1) 2319/   8B50C : (MACRO)              		even
(1) 2320/   8B50C :                     Music8A:	binclude	"sound/MUSIC/music8A.bin"
(1) 2321/   8B6B8 : (MACRO)              		even
(1) 2322/   8B6B8 :                     Music8B:	binclude	"sound/MUSIC/music8B.bin"
(1) 2323/   8B952 : (MACRO)              		even
(1) 2324/   8B952 :                     Music8C:	binclude	"sound/MUSIC/music8C.bin"
(1) 2325/   8BB6E : (MACRO)              		even
(1) 2326/   8BB6E :                     Music8D:	binclude	"sound/MUSIC/music8D.bin"
(1) 2327/   8BD8A : (MACRO)              		even
(1) 2328/   8BD8A :                     Music8E:	binclude	"sound/MUSIC/music8E.bin"
(1) 2329/   8BEE0 : (MACRO)              		even
(1) 2330/   8BEE0 :                     Music8F:	binclude	"sound/MUSIC/music8F.bin"
(1) 2331/   8C030 : (MACRO)              		even
(1) 2332/   8C030 :                     Music90:	binclude	"sound/MUSIC/music90.bin"
(1) 2333/   8C18E : (MACRO)              		even
(1) 2334/   8C18E :                     Music91:	binclude	"sound/MUSIC/music91.bin"
(1) 2335/   8D45C : (MACRO)              		even
(1) 2336/   8D45C :                     Music92:	binclude	"sound/MUSIC/music92.bin"
(1) 2337/   8D586 : (MACRO)              		even
(1) 2338/   8D586 :                     Music93:	binclude	"sound/MUSIC/music93.bin"
(1) 2339/   8D654 : (MACRO)              		even
(1) 2340/   8D654 :                     ; ---------------------------------------------------------------------------
(1) 2341/   8D654 :                     ; Sound	effect pointers
(1) 2342/   8D654 :                     ; ---------------------------------------------------------------------------
(1) 2343/   8D654 : 0008 D718 0008      SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
            8D65A : D72E 0008 D758    
(1) 2344/   8D660 : 0008 D778 0008      		dc.l SoundA3, SoundA4, SoundA5
            8D666 : D7AA 0008 D7E0    
(1) 2345/   8D66C : 0008 D80C 0008      		dc.l SoundA6, SoundA7, SoundA8
            8D672 : D83C 0008 D86C    
(1) 2346/   8D678 : 0008 D8A0 0008      		dc.l SoundA9, SoundAA, SoundAB
            8D67E : D8B2 0008 D8F4    
(1) 2347/   8D684 : 0008 D914 0008      		dc.l SoundAC, SoundAD, SoundAE
            8D68A : D948 0008 D97E    
(1) 2348/   8D690 : 0008 D9C8 0008      		dc.l SoundAF, SoundB0, SoundB1
            8D696 : D9F6 0008 DA28    
(1) 2349/   8D69C : 0008 DA54 0008      		dc.l SoundB2, SoundB3, SoundB4
            8D6A2 : DAA4 0008 DAEE    
(1) 2350/   8D6A8 : 0008 DB4A 0008      		dc.l SoundB5, SoundB6, SoundB7
            8D6AE : DB78 0008 DB96    
(1) 2351/   8D6B4 : 0008 DBD2 0008      		dc.l SoundB8, SoundB9, SoundBA
            8D6BA : DBF0 0008 DC54    
(1) 2352/   8D6C0 : 0008 DC7C 0008      		dc.l SoundBB, SoundBC, SoundBD
            8D6C6 : DCA8 0008 DCEA    
(1) 2353/   8D6CC : 0008 DD3E 0008      		dc.l SoundBE, SoundBF, SoundC0
            8D6D2 : DD78 0008 DDEA    
(1) 2354/   8D6D8 : 0008 DE18 0008      		dc.l SoundC1, SoundC2, SoundC3
            8D6DE : DE52 0008 DE7C    
(1) 2355/   8D6E4 : 0008 DEF6 0008      		dc.l SoundC4, SoundC5, SoundC6
            8D6EA : DF1E 0008 DF86    
(1) 2356/   8D6F0 : 0008 DFC8 0008      		dc.l SoundC7, SoundC8, SoundC9
            8D6F6 : DFF6 0008 E008    
(1) 2357/   8D6FC : 0008 E036 0008      		dc.l SoundCA, SoundCB, SoundCC
            8D702 : E064 0008 E0B0    
(1) 2358/   8D708 : 0008 E0EA 0008      		dc.l SoundCD, SoundCE, SoundCF
            8D70E : E0F8 0008 E126    
(1) 2359/   8D714 : 0008 E15E           SoundD0Index:	dc.l SoundD0
(1) 2360/   8D718 :                     SoundA0:	binclude	"sound/SFX/soundA0.bin"
(1) 2361/   8D72E : (MACRO)              		even
(1) 2362/   8D72E :                     SoundA1:	binclude	"sound/SFX/soundA1.bin"
(1) 2363/   8D758 : (MACRO)              		even
(1) 2364/   8D758 :                     SoundA2:	binclude	"sound/SFX/soundA2.bin"
(1) 2365/   8D778 : (MACRO)              		even
(1) 2366/   8D778 :                     SoundA3:	binclude	"sound/SFX/soundA3.bin"
(1) 2367/   8D7AA : (MACRO)              		even
(1) 2368/   8D7AA :                     SoundA4:	binclude	"sound/SFX/soundA4.bin"
(1) 2369/   8D7E0 : (MACRO)              		even
(1) 2370/   8D7E0 :                     SoundA5:	binclude	"sound/SFX/soundA5.bin"
(1) 2371/   8D80C : (MACRO)              		even
(1) 2372/   8D80C :                     SoundA6:	binclude	"sound/SFX/soundA6.bin"
(1) 2373/   8D83C : (MACRO)              		even
(1) 2374/   8D83C :                     SoundA7:	binclude	"sound/SFX/soundA7.bin"
(1) 2375/   8D86C : (MACRO)              		even
(1) 2376/   8D86C :                     SoundA8:	binclude	"sound/SFX/soundA8.bin"
(1) 2377/   8D8A0 : (MACRO)              		even
(1) 2378/   8D8A0 :                     SoundA9:	binclude	"sound/SFX/soundA9.bin"
(1) 2379/   8D8B2 : (MACRO)              		even
(1) 2380/   8D8B2 :                     SoundAA:	binclude	"sound/SFX/soundAA.bin"
(1) 2381/   8D8F4 : (MACRO)              		even
(1) 2382/   8D8F4 :                     SoundAB:	binclude	"sound/SFX/soundAB.bin"
(1) 2383/   8D914 : (MACRO)              		even
(1) 2384/   8D914 :                     SoundAC:	binclude	"sound/SFX/soundAC.bin"
(1) 2385/   8D948 : (MACRO)              		even
(1) 2386/   8D948 :                     SoundAD:	binclude	"sound/SFX/soundAD.bin"
(1) 2387/   8D97E : (MACRO)              		even
(1) 2388/   8D97E :                     SoundAE:	binclude	"sound/SFX/soundAE.bin"
(1) 2389/   8D9C8 : (MACRO)              		even
(1) 2390/   8D9C8 :                     SoundAF:	binclude	"sound/SFX/soundAF.bin"
(1) 2391/   8D9F6 : (MACRO)              		even
(1) 2392/   8D9F6 :                     SoundB0:	binclude	"sound/SFX/soundB0.bin"
(1) 2393/   8DA28 : (MACRO)              		even
(1) 2394/   8DA28 :                     SoundB1:	binclude	"sound/SFX/soundB1.bin"
(1) 2395/   8DA54 : (MACRO)              		even
(1) 2396/   8DA54 :                     SoundB2:	binclude	"sound/SFX/soundB2.bin"
(1) 2397/   8DAA4 : (MACRO)              		even
(1) 2398/   8DAA4 :                     SoundB3:	binclude	"sound/SFX/soundB3.bin"
(1) 2399/   8DAEE : (MACRO)              		even
(1) 2400/   8DAEE :                     SoundB4:	binclude	"sound/SFX/soundB4.bin"
(1) 2401/   8DB4A : (MACRO)              		even
(1) 2402/   8DB4A :                     SoundB5:	binclude	"sound/SFX/soundB5.bin"
(1) 2403/   8DB78 : (MACRO)              		even
(1) 2404/   8DB78 :                     SoundB6:	binclude	"sound/SFX/soundB6.bin"
(1) 2405/   8DB96 : (MACRO)              		even
(1) 2406/   8DB96 :                     SoundB7:	binclude	"sound/SFX/soundB7.bin"
(1) 2407/   8DBD2 : (MACRO)              		even
(1) 2408/   8DBD2 :                     SoundB8:	binclude	"sound/SFX/soundB8.bin"
(1) 2409/   8DBF0 : (MACRO)              		even
(1) 2410/   8DBF0 :                     SoundB9:	binclude	"sound/SFX/soundB9.bin"
(1) 2411/   8DC54 : (MACRO)              		even
(1) 2412/   8DC54 :                     SoundBA:	binclude	"sound/SFX/soundBA.bin"
(1) 2413/   8DC7C : (MACRO)              		even
(1) 2414/   8DC7C :                     SoundBB:	binclude	"sound/SFX/soundBB.bin"
(1) 2415/   8DCA8 : (MACRO)              		even
(1) 2416/   8DCA8 :                     SoundBC:	binclude	"sound/SFX/soundBC.bin"
(1) 2417/   8DCEA : (MACRO)              		even
(1) 2418/   8DCEA :                     SoundBD:	binclude	"sound/SFX/soundBD.bin"
(1) 2419/   8DD3E : (MACRO)              		even
(1) 2420/   8DD3E :                     SoundBE:	binclude	"sound/SFX/soundBE.bin"
(1) 2421/   8DD78 : (MACRO)              		even
(1) 2422/   8DD78 :                     SoundBF:	binclude	"sound/SFX/soundBF.bin"
(1) 2423/   8DDEA : (MACRO)              		even
(1) 2424/   8DDEA :                     SoundC0:	binclude	"sound/SFX/soundC0.bin"
(1) 2425/   8DE18 : (MACRO)              		even
(1) 2426/   8DE18 :                     SoundC1:	binclude	"sound/SFX/soundC1.bin"
(1) 2427/   8DE52 : (MACRO)              		even
(1) 2428/   8DE52 :                     SoundC2:	binclude	"sound/SFX/soundC2.bin"
(1) 2429/   8DE7C : (MACRO)              		even
(1) 2430/   8DE7C :                     SoundC3:	binclude	"sound/SFX/soundC3.bin"
(1) 2431/   8DEF6 : (MACRO)              		even
(1) 2432/   8DEF6 :                     SoundC4:	binclude	"sound/SFX/soundC4.bin"
(1) 2433/   8DF1E : (MACRO)              		even
(1) 2434/   8DF1E :                     SoundC5:	binclude	"sound/SFX/soundC5.bin"
(1) 2435/   8DF86 : (MACRO)              		even
(1) 2436/   8DF86 :                     SoundC6:	binclude	"sound/SFX/soundC6.bin"
(1) 2437/   8DFC8 : (MACRO)              		even
(1) 2438/   8DFC8 :                     SoundC7:	binclude	"sound/SFX/soundC7.bin"
(1) 2439/   8DFF6 : (MACRO)              		even
(1) 2440/   8DFF6 :                     SoundC8:	binclude	"sound/SFX/soundC8.bin"
(1) 2441/   8E008 : (MACRO)              		even
(1) 2442/   8E008 :                     SoundC9:	binclude	"sound/SFX/soundC9.bin"
(1) 2443/   8E036 : (MACRO)              		even
(1) 2444/   8E036 :                     SoundCA:	binclude	"sound/SFX/soundCA.bin"
(1) 2445/   8E064 : (MACRO)              		even
(1) 2446/   8E064 :                     SoundCB:	binclude	"sound/SFX/soundCB.bin"
(1) 2447/   8E0B0 : (MACRO)              		even
(1) 2448/   8E0B0 :                     SoundCC:	binclude	"sound/SFX/soundCC.bin"
(1) 2449/   8E0EA : (MACRO)              		even
(1) 2450/   8E0EA :                     SoundCD:	binclude	"sound/SFX/soundCD.bin"
(1) 2451/   8E0F8 : (MACRO)              		even
(1) 2452/   8E0F8 :                     SoundCE:	binclude	"sound/SFX/soundCE.bin"
(1) 2453/   8E126 : (MACRO)              		even
(1) 2454/   8E126 :                     SoundCF:	binclude	"sound/SFX/soundCF.bin"
(1) 2455/   8E15E : (MACRO)              		even
(1) 2456/   8E15E :                     SoundD0:	binclude	"sound/SFX/soundD0.bin"
(1) 2457/   8E198 : (MACRO)              		even
(1) 2458/   8E198 :                     SegaPCM:	binclude	"sound/DAC/segapcm.bin"
(1) 2459/   94B10 : (MACRO)              SegaPCM_End	even
(1) 2460/   94B10 :                     
   38474/   94B10 :                     
   38475/   94B10 :                        include   "_includes-ASM/ErrorHandler.asm"
(1)    1/   94B10 :                     
(1)    2/   94B10 :                     ; ===============================================================
(1)    3/   94B10 :                     ; ---------------------------------------------------------------
(1)    4/   94B10 :                     ; MD Debugger and Error Handler v.2.6
(1)    5/   94B10 :                     ;
(1)    6/   94B10 :                     ;
(1)    7/   94B10 :                     ; Documentation, references and source code are available at:
(1)    8/   94B10 :                     ; - https://github.com/vladikcomper/md-modules
(1)    9/   94B10 :                     ;
(1)   10/   94B10 :                     ; (c) 2016-2024, Vladikcomper
(1)   11/   94B10 :                     ; ---------------------------------------------------------------
(1)   12/   94B10 :                     ; Debugger and Error handler blob
(1)   13/   94B10 :                     ; ---------------------------------------------------------------
(1)   14/   94B10 :                     
(1)   15/   94B10 :                     
(1)   16/   94B10 :                     ; ---------------------------------------------------------------
(1)   17/   94B10 :                     ; Exception vectors
(1)   18/   94B10 :                     ; ---------------------------------------------------------------
(1)   19/   94B10 :                     
(1)   23/   94B10 : =$0                  _eh_default:	equ	0
(1)   25/   94B10 :                     
(1)   26/   94B10 :                     ; ---------------------------------------------------------------
(1)   27/   94B10 :                     
(1)   28/   94B10 :                     BusError:
(1)   29/   94B10 : (MACRO)              	__ErrorMessage "BUS ERROR", _eh_default|_eh_address_error
(1)   29/   94B10 :  (MACRO-2)                           __FSTRING_GenerateArgumentsCode "BUS ERROR"
(1)   29/   94B10 :                     
(1)   29/   94B10 : =$FFFFFFFFFFFFFFFF           .__pos: set     strstr("BUS ERROR","%<")             ; token position
(1)   29/   94B10 : =$0                          .__sp:  set             0                                               ; stack displacement
(1)   29/   94B10 : ="BUS ERROR"                 .__str: set             "BUS ERROR"
(1)   29/   94B10 :                     
(1)   29/   94B10 :                             ; Parse "BUS ERROR" itself
(1)   29/   94B10 :                             while (.__pos>=0)
(1)   29/   94B10 :                     
(1)   29/   94B10 :                             ; Find the last occurance "%<" in the "BUS ERROR"
(1)   29/   94B10 :                             while ( strstr(substr(.__str,.__pos+2,0),"%<")>=0 )
(1)   29/   94B10 :                                             .__pos:         set             strstr(substr(.__str,.__pos+2,0),"%<")+.__pos+2
(1)   29/   94B10 :                                     endm
(1)   29/   94B10 :                                     .__substr:      set             substr(.__str,.__pos,0)
(1)   29/   94B10 :                     
(1)   29/   94B10 :                                     ; Retrive expression in brackets following % char
(1)   29/   94B10 :                             .__endpos:      set             strstr(.__substr,">")
(1)   29/   94B10 :                                     if (.__endpos<0) ; Fix bizzare AS bug as stsstr() fails to check the last character of "BUS ERROR"
(1)   29/   94B10 :                                             .__endpos:      set             strlen(.__substr)-1
(1)   29/   94B10 :                                     endif
(1)   29/   94B10 :                             .__midpos:      set             strstr(substr(.__substr,5,0)," ")
(1)   29/   94B10 :                             if ((.__midpos<0)||(.__midpos+5>.__endpos))
(1)   29/   94B10 :                                             .__midpos:      set             .__endpos
(1)   29/   94B10 :                                     else
(1)   29/   94B10 :                                             .__midpos:      set             .__midpos+5
(1)   29/   94B10 :                             endif
(1)   29/   94B10 :                                     .__type:                set             substr(.__substr,2,2)   ; .type
(1)   29/   94B10 :                     
(1)   29/   94B10 :                                     ; Expression is an effective address (e.g. %(.w d0 hex) )
(1)   29/   94B10 :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   29/   94B10 :                                             .__operand:     set             substr(.__substr,5,.__midpos-5)                                         ; ea
(1)   29/   94B10 :                                             .__param:       set             substr(.__substr,.__midpos+1,.__endpos-.__midpos-1)             ; param
(1)   29/   94B10 :                     
(1)   29/   94B10 :                                             if (.__type==".b")
(1)   29/   94B10 :                                                     subq.w  #2, sp
(1)   29/   94B10 :                                                     __FSTRING_PushArgument.b        .__operand,1(sp)
(1)   29/   94B10 :                                                     .__sp:  set             .__sp+2
(1)   29/   94B10 :                     
(1)   29/   94B10 :                                             elseif (.__type==".w")
(1)   29/   94B10 :                                                     __FSTRING_PushArgument.w        .__operand,-(sp)
(1)   29/   94B10 :                                                     .__sp:  set             .__sp+2
(1)   29/   94B10 :                     
(1)   29/   94B10 :                                             elseif (.__type==".l")
(1)   29/   94B10 :                                                     __FSTRING_PushArgument.l        .__operand,-(sp)
(1)   29/   94B10 :                                                     .__sp:  set             .__sp+4
(1)   29/   94B10 :                     
(1)   29/   94B10 :                                             else
(1)   29/   94B10 :                                                     error "Unrecognized type in "BUS ERROR" operand: \{.__type}"
(1)   29/   94B10 :                                             endif
(1)   29/   94B10 :                     
(1)   29/   94B10 :                                     endif
(1)   29/   94B10 :                     
(1)   29/   94B10 :                                     ; Cut "BUS ERROR"
(1)   29/   94B10 :                                     if (.__pos>0)
(1)   29/   94B10 :                                             .__str: set             substr(.__str, 0, .__pos)
(1)   29/   94B10 :                                             .__pos: set             strstr(.__str,"%<")
(1)   29/   94B10 :                                     else
(1)   29/   94B10 :                                             .__pos: set             -1
(1)   29/   94B10 :                                     endif
(1)   29/   94B10 :                     
(1)   29/   94B10 :                             endm
(1)   29/   94B10 :                     
(1)   29/   94B10 : 4EB9 0009 4C52                      jsr             MDDBG__ErrorHandler
(1)   29/   94B16 :  (MACRO-2)                           __FSTRING_GenerateDecodedString "BUS ERROR"
(1)   29/   94B16 :                     
(1)   29/   94B16 : =$0                          .__lpos:        set             0               ; start position
(1)   29/   94B16 : =$FFFFFFFFFFFFFFFF           .__pos: set             strstr("BUS ERROR", "%<")
(1)   29/   94B16 :                     
(1)   29/   94B16 :                             while (.__pos>=0)
(1)   29/   94B16 :                     
(1)   29/   94B16 :                                     ; Write part of "BUS ERROR" before % token
(1)   29/   94B16 :                                     if (.__pos-.__lpos>0)
(1)   29/   94B16 :                                             dc.b    substr("BUS ERROR", .__lpos, .__pos-.__lpos)
(1)   29/   94B16 :                                     endif
(1)   29/   94B16 :                     
(1)   29/   94B16 :                                     ; Retrive expression in brakets following % char
(1)   29/   94B16 :                             .__endpos:      set             strstr(substr("BUS ERROR",.__pos+1,0),">")+.__pos+1 
(1)   29/   94B16 :                                     if (.__endpos<=.__pos) ; Fix bizzare AS bug as stsstr() fails to check the last character of "BUS ERROR"
(1)   29/   94B16 :                                             .__endpos:      set             strlen("BUS ERROR")-1
(1)   29/   94B16 :                                     endif
(1)   29/   94B16 :                             .__midpos:      set             strstr(substr("BUS ERROR",.__pos+5,0)," ")+.__pos+5
(1)   29/   94B16 :                             if ((.__midpos<.__pos+5)||(.__midpos>.__endpos))
(1)   29/   94B16 :                                             .__midpos:      set             .__endpos
(1)   29/   94B16 :                             endif
(1)   29/   94B16 :                                     .__type:                set             substr("BUS ERROR",.__pos+1+1,2)             ; .type
(1)   29/   94B16 :                     
(1)   29/   94B16 :                                     ; Expression is an effective address (e.g. %<.w d0 hex> )
(1)   29/   94B16 :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   29/   94B16 :                                             .__param:       set             substr("BUS ERROR",.__midpos+1,.__endpos-.__midpos-1)        ; param
(1)   29/   94B16 :                     
(1)   29/   94B16 :                                             ; Validate format setting ("param")
(1)   29/   94B16 :                                             if (strlen(.__param)<1)
(1)   29/   94B16 :                                                     .__param:       set             "hex"                   ; if param is ommited, set it to "hex"
(1)   29/   94B16 :                                             elseif (.__param=="signed")
(1)   29/   94B16 :                                                     .__param:       set             "hex+signed"    ; if param is "signed", correct it to "hex+signed"
(1)   29/   94B16 :                                             endif
(1)   29/   94B16 :                     
(1)   29/   94B16 :                                             if (val(.__param) < $80)
(1)   29/   94B16 :                                                     !error "Illegal operand format setting: \{.__param}. Expected hex, dec, bin, sym, str or their derivatives."
(1)   29/   94B16 :                                             endif
(1)   29/   94B16 :                     
(1)   29/   94B16 :                                             if (.__type==".b")
(1)   29/   94B16 :                                                     dc.b    val(.__param)
(1)   29/   94B16 :                                             elseif (.__type==".w")
(1)   29/   94B16 :                                                     dc.b    val(.__param)|1
(1)   29/   94B16 :                                             else
(1)   29/   94B16 :                                                     dc.b    val(.__param)|3
(1)   29/   94B16 :                                             endif
(1)   29/   94B16 :                     
(1)   29/   94B16 :                                     ; Expression is an inline constant (e.g. %<endl> )
(1)   29/   94B16 :                                     else
(1)   29/   94B16 :                                             dc.b    val(substr("BUS ERROR",.__pos+1+1,.__endpos-.__pos-2))
(1)   29/   94B16 :                                     endif
(1)   29/   94B16 :                     
(1)   29/   94B16 :                                     .__lpos:        set             .__endpos+1
(1)   29/   94B16 :                                     if (strstr(substr("BUS ERROR",.__pos+1,0),"%<")>=0)
(1)   29/   94B16 :                                             .__pos: set             strstr(substr("BUS ERROR",.__pos+1,0), "%<")+.__pos+1
(1)   29/   94B16 :                                     else
(1)   29/   94B16 :                                             .__pos: set             -1
(1)   29/   94B16 :                                     endif
(1)   29/   94B16 :                     
(1)   29/   94B16 :                             endm
(1)   29/   94B16 :                     
(1)   29/   94B16 :                             ; Write part of "BUS ERROR" before the end
(1)   29/   94B16 : 4255 5320 4552              dc.b    substr("BUS ERROR", .__lpos, 0), 0
            94B1C : 524F 5200          
(1)   29/   94B20 :                     
(1)   29/   94B20 :                     
(1)   29/   94B20 : =$80                                 .__align_flag: set (((*)&1)!1)*_eh_align_offset
(1)   29/   94B20 : A1                                          dc.b    (_eh_default|_eh_address_error)+_eh_return|.__align_flag ; add flag "_eh_align_offset" if the next byte is at odd offset ...
(1)   29/   94B21 :                                             !align  2                                                                                               ; ... to tell Error handler to skip this byte, so it'll jump to ...
(1)   29/   94B22 : 4EF9 0009 5A18                              jmp             MDDBG__ErrorHandler_PagesController     ; ... extensions controller
(1)   30/   94B28 :                     
(1)   31/   94B28 :                     AddressError:
(1)   32/   94B28 : (MACRO)              	__ErrorMessage "ADDRESS ERROR", _eh_default|_eh_address_error
(1)   32/   94B28 :  (MACRO-2)                           __FSTRING_GenerateArgumentsCode "ADDRESS ERROR"
(1)   32/   94B28 :                     
(1)   32/   94B28 : =$FFFFFFFFFFFFFFFF           .__pos: set     strstr("ADDRESS ERROR","%<")             ; token position
(1)   32/   94B28 : =$0                          .__sp:  set             0                                               ; stack displacement
(1)   32/   94B28 : ="ADDRESS ERROR"             .__str: set             "ADDRESS ERROR"
(1)   32/   94B28 :                     
(1)   32/   94B28 :                             ; Parse "ADDRESS ERROR" itself
(1)   32/   94B28 :                             while (.__pos>=0)
(1)   32/   94B28 :                     
(1)   32/   94B28 :                             ; Find the last occurance "%<" in the "ADDRESS ERROR"
(1)   32/   94B28 :                             while ( strstr(substr(.__str,.__pos+2,0),"%<")>=0 )
(1)   32/   94B28 :                                             .__pos:         set             strstr(substr(.__str,.__pos+2,0),"%<")+.__pos+2
(1)   32/   94B28 :                                     endm
(1)   32/   94B28 :                                     .__substr:      set             substr(.__str,.__pos,0)
(1)   32/   94B28 :                     
(1)   32/   94B28 :                                     ; Retrive expression in brackets following % char
(1)   32/   94B28 :                             .__endpos:      set             strstr(.__substr,">")
(1)   32/   94B28 :                                     if (.__endpos<0) ; Fix bizzare AS bug as stsstr() fails to check the last character of "ADDRESS ERROR"
(1)   32/   94B28 :                                             .__endpos:      set             strlen(.__substr)-1
(1)   32/   94B28 :                                     endif
(1)   32/   94B28 :                             .__midpos:      set             strstr(substr(.__substr,5,0)," ")
(1)   32/   94B28 :                             if ((.__midpos<0)||(.__midpos+5>.__endpos))
(1)   32/   94B28 :                                             .__midpos:      set             .__endpos
(1)   32/   94B28 :                                     else
(1)   32/   94B28 :                                             .__midpos:      set             .__midpos+5
(1)   32/   94B28 :                             endif
(1)   32/   94B28 :                                     .__type:                set             substr(.__substr,2,2)   ; .type
(1)   32/   94B28 :                     
(1)   32/   94B28 :                                     ; Expression is an effective address (e.g. %(.w d0 hex) )
(1)   32/   94B28 :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   32/   94B28 :                                             .__operand:     set             substr(.__substr,5,.__midpos-5)                                         ; ea
(1)   32/   94B28 :                                             .__param:       set             substr(.__substr,.__midpos+1,.__endpos-.__midpos-1)             ; param
(1)   32/   94B28 :                     
(1)   32/   94B28 :                                             if (.__type==".b")
(1)   32/   94B28 :                                                     subq.w  #2, sp
(1)   32/   94B28 :                                                     __FSTRING_PushArgument.b        .__operand,1(sp)
(1)   32/   94B28 :                                                     .__sp:  set             .__sp+2
(1)   32/   94B28 :                     
(1)   32/   94B28 :                                             elseif (.__type==".w")
(1)   32/   94B28 :                                                     __FSTRING_PushArgument.w        .__operand,-(sp)
(1)   32/   94B28 :                                                     .__sp:  set             .__sp+2
(1)   32/   94B28 :                     
(1)   32/   94B28 :                                             elseif (.__type==".l")
(1)   32/   94B28 :                                                     __FSTRING_PushArgument.l        .__operand,-(sp)
(1)   32/   94B28 :                                                     .__sp:  set             .__sp+4
(1)   32/   94B28 :                     
(1)   32/   94B28 :                                             else
(1)   32/   94B28 :                                                     error "Unrecognized type in "ADDRESS ERROR" operand: \{.__type}"
(1)   32/   94B28 :                                             endif
(1)   32/   94B28 :                     
(1)   32/   94B28 :                                     endif
(1)   32/   94B28 :                     
(1)   32/   94B28 :                                     ; Cut "ADDRESS ERROR"
(1)   32/   94B28 :                                     if (.__pos>0)
(1)   32/   94B28 :                                             .__str: set             substr(.__str, 0, .__pos)
(1)   32/   94B28 :                                             .__pos: set             strstr(.__str,"%<")
(1)   32/   94B28 :                                     else
(1)   32/   94B28 :                                             .__pos: set             -1
(1)   32/   94B28 :                                     endif
(1)   32/   94B28 :                     
(1)   32/   94B28 :                             endm
(1)   32/   94B28 :                     
(1)   32/   94B28 : 4EB9 0009 4C52                      jsr             MDDBG__ErrorHandler
(1)   32/   94B2E :  (MACRO-2)                           __FSTRING_GenerateDecodedString "ADDRESS ERROR"
(1)   32/   94B2E :                     
(1)   32/   94B2E : =$0                          .__lpos:        set             0               ; start position
(1)   32/   94B2E : =$FFFFFFFFFFFFFFFF           .__pos: set             strstr("ADDRESS ERROR", "%<")
(1)   32/   94B2E :                     
(1)   32/   94B2E :                             while (.__pos>=0)
(1)   32/   94B2E :                     
(1)   32/   94B2E :                                     ; Write part of "ADDRESS ERROR" before % token
(1)   32/   94B2E :                                     if (.__pos-.__lpos>0)
(1)   32/   94B2E :                                             dc.b    substr("ADDRESS ERROR", .__lpos, .__pos-.__lpos)
(1)   32/   94B2E :                                     endif
(1)   32/   94B2E :                     
(1)   32/   94B2E :                                     ; Retrive expression in brakets following % char
(1)   32/   94B2E :                             .__endpos:      set             strstr(substr("ADDRESS ERROR",.__pos+1,0),">")+.__pos+1 
(1)   32/   94B2E :                                     if (.__endpos<=.__pos) ; Fix bizzare AS bug as stsstr() fails to check the last character of "ADDRESS ERROR"
(1)   32/   94B2E :                                             .__endpos:      set             strlen("ADDRESS ERROR")-1
(1)   32/   94B2E :                                     endif
(1)   32/   94B2E :                             .__midpos:      set             strstr(substr("ADDRESS ERROR",.__pos+5,0)," ")+.__pos+5
(1)   32/   94B2E :                             if ((.__midpos<.__pos+5)||(.__midpos>.__endpos))
(1)   32/   94B2E :                                             .__midpos:      set             .__endpos
(1)   32/   94B2E :                             endif
(1)   32/   94B2E :                                     .__type:                set             substr("ADDRESS ERROR",.__pos+1+1,2)             ; .type
(1)   32/   94B2E :                     
(1)   32/   94B2E :                                     ; Expression is an effective address (e.g. %<.w d0 hex> )
(1)   32/   94B2E :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   32/   94B2E :                                             .__param:       set             substr("ADDRESS ERROR",.__midpos+1,.__endpos-.__midpos-1)        ; param
(1)   32/   94B2E :                     
(1)   32/   94B2E :                                             ; Validate format setting ("param")
(1)   32/   94B2E :                                             if (strlen(.__param)<1)
(1)   32/   94B2E :                                                     .__param:       set             "hex"                   ; if param is ommited, set it to "hex"
(1)   32/   94B2E :                                             elseif (.__param=="signed")
(1)   32/   94B2E :                                                     .__param:       set             "hex+signed"    ; if param is "signed", correct it to "hex+signed"
(1)   32/   94B2E :                                             endif
(1)   32/   94B2E :                     
(1)   32/   94B2E :                                             if (val(.__param) < $80)
(1)   32/   94B2E :                                                     !error "Illegal operand format setting: \{.__param}. Expected hex, dec, bin, sym, str or their derivatives."
(1)   32/   94B2E :                                             endif
(1)   32/   94B2E :                     
(1)   32/   94B2E :                                             if (.__type==".b")
(1)   32/   94B2E :                                                     dc.b    val(.__param)
(1)   32/   94B2E :                                             elseif (.__type==".w")
(1)   32/   94B2E :                                                     dc.b    val(.__param)|1
(1)   32/   94B2E :                                             else
(1)   32/   94B2E :                                                     dc.b    val(.__param)|3
(1)   32/   94B2E :                                             endif
(1)   32/   94B2E :                     
(1)   32/   94B2E :                                     ; Expression is an inline constant (e.g. %<endl> )
(1)   32/   94B2E :                                     else
(1)   32/   94B2E :                                             dc.b    val(substr("ADDRESS ERROR",.__pos+1+1,.__endpos-.__pos-2))
(1)   32/   94B2E :                                     endif
(1)   32/   94B2E :                     
(1)   32/   94B2E :                                     .__lpos:        set             .__endpos+1
(1)   32/   94B2E :                                     if (strstr(substr("ADDRESS ERROR",.__pos+1,0),"%<")>=0)
(1)   32/   94B2E :                                             .__pos: set             strstr(substr("ADDRESS ERROR",.__pos+1,0), "%<")+.__pos+1
(1)   32/   94B2E :                                     else
(1)   32/   94B2E :                                             .__pos: set             -1
(1)   32/   94B2E :                                     endif
(1)   32/   94B2E :                     
(1)   32/   94B2E :                             endm
(1)   32/   94B2E :                     
(1)   32/   94B2E :                             ; Write part of "ADDRESS ERROR" before the end
(1)   32/   94B2E : 4144 4452 4553              dc.b    substr("ADDRESS ERROR", .__lpos, 0), 0
            94B34 : 5320 4552 524F 
            94B3A : 5200             
(1)   32/   94B3C :                     
(1)   32/   94B3C :                     
(1)   32/   94B3C : =$80                                 .__align_flag: set (((*)&1)!1)*_eh_align_offset
(1)   32/   94B3C : A1                                          dc.b    (_eh_default|_eh_address_error)+_eh_return|.__align_flag ; add flag "_eh_align_offset" if the next byte is at odd offset ...
(1)   32/   94B3D :                                             !align  2                                                                                               ; ... to tell Error handler to skip this byte, so it'll jump to ...
(1)   32/   94B3E : 4EF9 0009 5A18                              jmp             MDDBG__ErrorHandler_PagesController     ; ... extensions controller
(1)   33/   94B44 :                     
(1)   34/   94B44 :                     IllegalInstr:
(1)   35/   94B44 : (MACRO)              	__ErrorMessage "ILLEGAL INSTRUCTION", _eh_default
(1)   35/   94B44 :  (MACRO-2)                           __FSTRING_GenerateArgumentsCode "ILLEGAL INSTRUCTION"
(1)   35/   94B44 :                     
(1)   35/   94B44 : =$FFFFFFFFFFFFFFFF           .__pos: set     strstr("ILLEGAL INSTRUCTION","%<")             ; token position
(1)   35/   94B44 : =$0                          .__sp:  set             0                                               ; stack displacement
(1)   35/   94B44 : ="ILLEGAL INSTRU..           .__str: set             "ILLEGAL INSTRUCTION"
(1)   35/   94B44 :                     
(1)   35/   94B44 :                             ; Parse "ILLEGAL INSTRUCTION" itself
(1)   35/   94B44 :                             while (.__pos>=0)
(1)   35/   94B44 :                     
(1)   35/   94B44 :                             ; Find the last occurance "%<" in the "ILLEGAL INSTRUCTION"
(1)   35/   94B44 :                             while ( strstr(substr(.__str,.__pos+2,0),"%<")>=0 )
(1)   35/   94B44 :                                             .__pos:         set             strstr(substr(.__str,.__pos+2,0),"%<")+.__pos+2
(1)   35/   94B44 :                                     endm
(1)   35/   94B44 :                                     .__substr:      set             substr(.__str,.__pos,0)
(1)   35/   94B44 :                     
(1)   35/   94B44 :                                     ; Retrive expression in brackets following % char
(1)   35/   94B44 :                             .__endpos:      set             strstr(.__substr,">")
(1)   35/   94B44 :                                     if (.__endpos<0) ; Fix bizzare AS bug as stsstr() fails to check the last character of "ILLEGAL INSTRUCTION"
(1)   35/   94B44 :                                             .__endpos:      set             strlen(.__substr)-1
(1)   35/   94B44 :                                     endif
(1)   35/   94B44 :                             .__midpos:      set             strstr(substr(.__substr,5,0)," ")
(1)   35/   94B44 :                             if ((.__midpos<0)||(.__midpos+5>.__endpos))
(1)   35/   94B44 :                                             .__midpos:      set             .__endpos
(1)   35/   94B44 :                                     else
(1)   35/   94B44 :                                             .__midpos:      set             .__midpos+5
(1)   35/   94B44 :                             endif
(1)   35/   94B44 :                                     .__type:                set             substr(.__substr,2,2)   ; .type
(1)   35/   94B44 :                     
(1)   35/   94B44 :                                     ; Expression is an effective address (e.g. %(.w d0 hex) )
(1)   35/   94B44 :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   35/   94B44 :                                             .__operand:     set             substr(.__substr,5,.__midpos-5)                                         ; ea
(1)   35/   94B44 :                                             .__param:       set             substr(.__substr,.__midpos+1,.__endpos-.__midpos-1)             ; param
(1)   35/   94B44 :                     
(1)   35/   94B44 :                                             if (.__type==".b")
(1)   35/   94B44 :                                                     subq.w  #2, sp
(1)   35/   94B44 :                                                     __FSTRING_PushArgument.b        .__operand,1(sp)
(1)   35/   94B44 :                                                     .__sp:  set             .__sp+2
(1)   35/   94B44 :                     
(1)   35/   94B44 :                                             elseif (.__type==".w")
(1)   35/   94B44 :                                                     __FSTRING_PushArgument.w        .__operand,-(sp)
(1)   35/   94B44 :                                                     .__sp:  set             .__sp+2
(1)   35/   94B44 :                     
(1)   35/   94B44 :                                             elseif (.__type==".l")
(1)   35/   94B44 :                                                     __FSTRING_PushArgument.l        .__operand,-(sp)
(1)   35/   94B44 :                                                     .__sp:  set             .__sp+4
(1)   35/   94B44 :                     
(1)   35/   94B44 :                                             else
(1)   35/   94B44 :                                                     error "Unrecognized type in "ILLEGAL INSTRUCTION" operand: \{.__type}"
(1)   35/   94B44 :                                             endif
(1)   35/   94B44 :                     
(1)   35/   94B44 :                                     endif
(1)   35/   94B44 :                     
(1)   35/   94B44 :                                     ; Cut "ILLEGAL INSTRUCTION"
(1)   35/   94B44 :                                     if (.__pos>0)
(1)   35/   94B44 :                                             .__str: set             substr(.__str, 0, .__pos)
(1)   35/   94B44 :                                             .__pos: set             strstr(.__str,"%<")
(1)   35/   94B44 :                                     else
(1)   35/   94B44 :                                             .__pos: set             -1
(1)   35/   94B44 :                                     endif
(1)   35/   94B44 :                     
(1)   35/   94B44 :                             endm
(1)   35/   94B44 :                     
(1)   35/   94B44 : 4EB9 0009 4C52                      jsr             MDDBG__ErrorHandler
(1)   35/   94B4A :  (MACRO-2)                           __FSTRING_GenerateDecodedString "ILLEGAL INSTRUCTION"
(1)   35/   94B4A :                     
(1)   35/   94B4A : =$0                          .__lpos:        set             0               ; start position
(1)   35/   94B4A : =$FFFFFFFFFFFFFFFF           .__pos: set             strstr("ILLEGAL INSTRUCTION", "%<")
(1)   35/   94B4A :                     
(1)   35/   94B4A :                             while (.__pos>=0)
(1)   35/   94B4A :                     
(1)   35/   94B4A :                                     ; Write part of "ILLEGAL INSTRUCTION" before % token
(1)   35/   94B4A :                                     if (.__pos-.__lpos>0)
(1)   35/   94B4A :                                             dc.b    substr("ILLEGAL INSTRUCTION", .__lpos, .__pos-.__lpos)
(1)   35/   94B4A :                                     endif
(1)   35/   94B4A :                     
(1)   35/   94B4A :                                     ; Retrive expression in brakets following % char
(1)   35/   94B4A :                             .__endpos:      set             strstr(substr("ILLEGAL INSTRUCTION",.__pos+1,0),">")+.__pos+1 
(1)   35/   94B4A :                                     if (.__endpos<=.__pos) ; Fix bizzare AS bug as stsstr() fails to check the last character of "ILLEGAL INSTRUCTION"
(1)   35/   94B4A :                                             .__endpos:      set             strlen("ILLEGAL INSTRUCTION")-1
(1)   35/   94B4A :                                     endif
(1)   35/   94B4A :                             .__midpos:      set             strstr(substr("ILLEGAL INSTRUCTION",.__pos+5,0)," ")+.__pos+5
(1)   35/   94B4A :                             if ((.__midpos<.__pos+5)||(.__midpos>.__endpos))
(1)   35/   94B4A :                                             .__midpos:      set             .__endpos
(1)   35/   94B4A :                             endif
(1)   35/   94B4A :                                     .__type:                set             substr("ILLEGAL INSTRUCTION",.__pos+1+1,2)             ; .type
(1)   35/   94B4A :                     
(1)   35/   94B4A :                                     ; Expression is an effective address (e.g. %<.w d0 hex> )
(1)   35/   94B4A :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   35/   94B4A :                                             .__param:       set             substr("ILLEGAL INSTRUCTION",.__midpos+1,.__endpos-.__midpos-1)        ; param
(1)   35/   94B4A :                     
(1)   35/   94B4A :                                             ; Validate format setting ("param")
(1)   35/   94B4A :                                             if (strlen(.__param)<1)
(1)   35/   94B4A :                                                     .__param:       set             "hex"                   ; if param is ommited, set it to "hex"
(1)   35/   94B4A :                                             elseif (.__param=="signed")
(1)   35/   94B4A :                                                     .__param:       set             "hex+signed"    ; if param is "signed", correct it to "hex+signed"
(1)   35/   94B4A :                                             endif
(1)   35/   94B4A :                     
(1)   35/   94B4A :                                             if (val(.__param) < $80)
(1)   35/   94B4A :                                                     !error "Illegal operand format setting: \{.__param}. Expected hex, dec, bin, sym, str or their derivatives."
(1)   35/   94B4A :                                             endif
(1)   35/   94B4A :                     
(1)   35/   94B4A :                                             if (.__type==".b")
(1)   35/   94B4A :                                                     dc.b    val(.__param)
(1)   35/   94B4A :                                             elseif (.__type==".w")
(1)   35/   94B4A :                                                     dc.b    val(.__param)|1
(1)   35/   94B4A :                                             else
(1)   35/   94B4A :                                                     dc.b    val(.__param)|3
(1)   35/   94B4A :                                             endif
(1)   35/   94B4A :                     
(1)   35/   94B4A :                                     ; Expression is an inline constant (e.g. %<endl> )
(1)   35/   94B4A :                                     else
(1)   35/   94B4A :                                             dc.b    val(substr("ILLEGAL INSTRUCTION",.__pos+1+1,.__endpos-.__pos-2))
(1)   35/   94B4A :                                     endif
(1)   35/   94B4A :                     
(1)   35/   94B4A :                                     .__lpos:        set             .__endpos+1
(1)   35/   94B4A :                                     if (strstr(substr("ILLEGAL INSTRUCTION",.__pos+1,0),"%<")>=0)
(1)   35/   94B4A :                                             .__pos: set             strstr(substr("ILLEGAL INSTRUCTION",.__pos+1,0), "%<")+.__pos+1
(1)   35/   94B4A :                                     else
(1)   35/   94B4A :                                             .__pos: set             -1
(1)   35/   94B4A :                                     endif
(1)   35/   94B4A :                     
(1)   35/   94B4A :                             endm
(1)   35/   94B4A :                     
(1)   35/   94B4A :                             ; Write part of "ILLEGAL INSTRUCTION" before the end
(1)   35/   94B4A : 494C 4C45 4741              dc.b    substr("ILLEGAL INSTRUCTION", .__lpos, 0), 0
            94B50 : 4C20 494E 5354 
            94B56 : 5255 4354 494F 
            94B5C : 4E00             
(1)   35/   94B5E :                     
(1)   35/   94B5E :                     
(1)   35/   94B5E : =$80                                 .__align_flag: set (((*)&1)!1)*_eh_align_offset
(1)   35/   94B5E : A0                                          dc.b    (_eh_default)+_eh_return|.__align_flag ; add flag "_eh_align_offset" if the next byte is at odd offset ...
(1)   35/   94B5F :                                             !align  2                                                                                               ; ... to tell Error handler to skip this byte, so it'll jump to ...
(1)   35/   94B60 : 4EF9 0009 5A18                              jmp             MDDBG__ErrorHandler_PagesController     ; ... extensions controller
(1)   36/   94B66 :                     
(1)   37/   94B66 :                     ZeroDivide:
(1)   38/   94B66 : (MACRO)              	__ErrorMessage "ZERO DIVIDE", _eh_default
(1)   38/   94B66 :  (MACRO-2)                           __FSTRING_GenerateArgumentsCode "ZERO DIVIDE"
(1)   38/   94B66 :                     
(1)   38/   94B66 : =$FFFFFFFFFFFFFFFF           .__pos: set     strstr("ZERO DIVIDE","%<")             ; token position
(1)   38/   94B66 : =$0                          .__sp:  set             0                                               ; stack displacement
(1)   38/   94B66 : ="ZERO DIVIDE"               .__str: set             "ZERO DIVIDE"
(1)   38/   94B66 :                     
(1)   38/   94B66 :                             ; Parse "ZERO DIVIDE" itself
(1)   38/   94B66 :                             while (.__pos>=0)
(1)   38/   94B66 :                     
(1)   38/   94B66 :                             ; Find the last occurance "%<" in the "ZERO DIVIDE"
(1)   38/   94B66 :                             while ( strstr(substr(.__str,.__pos+2,0),"%<")>=0 )
(1)   38/   94B66 :                                             .__pos:         set             strstr(substr(.__str,.__pos+2,0),"%<")+.__pos+2
(1)   38/   94B66 :                                     endm
(1)   38/   94B66 :                                     .__substr:      set             substr(.__str,.__pos,0)
(1)   38/   94B66 :                     
(1)   38/   94B66 :                                     ; Retrive expression in brackets following % char
(1)   38/   94B66 :                             .__endpos:      set             strstr(.__substr,">")
(1)   38/   94B66 :                                     if (.__endpos<0) ; Fix bizzare AS bug as stsstr() fails to check the last character of "ZERO DIVIDE"
(1)   38/   94B66 :                                             .__endpos:      set             strlen(.__substr)-1
(1)   38/   94B66 :                                     endif
(1)   38/   94B66 :                             .__midpos:      set             strstr(substr(.__substr,5,0)," ")
(1)   38/   94B66 :                             if ((.__midpos<0)||(.__midpos+5>.__endpos))
(1)   38/   94B66 :                                             .__midpos:      set             .__endpos
(1)   38/   94B66 :                                     else
(1)   38/   94B66 :                                             .__midpos:      set             .__midpos+5
(1)   38/   94B66 :                             endif
(1)   38/   94B66 :                                     .__type:                set             substr(.__substr,2,2)   ; .type
(1)   38/   94B66 :                     
(1)   38/   94B66 :                                     ; Expression is an effective address (e.g. %(.w d0 hex) )
(1)   38/   94B66 :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   38/   94B66 :                                             .__operand:     set             substr(.__substr,5,.__midpos-5)                                         ; ea
(1)   38/   94B66 :                                             .__param:       set             substr(.__substr,.__midpos+1,.__endpos-.__midpos-1)             ; param
(1)   38/   94B66 :                     
(1)   38/   94B66 :                                             if (.__type==".b")
(1)   38/   94B66 :                                                     subq.w  #2, sp
(1)   38/   94B66 :                                                     __FSTRING_PushArgument.b        .__operand,1(sp)
(1)   38/   94B66 :                                                     .__sp:  set             .__sp+2
(1)   38/   94B66 :                     
(1)   38/   94B66 :                                             elseif (.__type==".w")
(1)   38/   94B66 :                                                     __FSTRING_PushArgument.w        .__operand,-(sp)
(1)   38/   94B66 :                                                     .__sp:  set             .__sp+2
(1)   38/   94B66 :                     
(1)   38/   94B66 :                                             elseif (.__type==".l")
(1)   38/   94B66 :                                                     __FSTRING_PushArgument.l        .__operand,-(sp)
(1)   38/   94B66 :                                                     .__sp:  set             .__sp+4
(1)   38/   94B66 :                     
(1)   38/   94B66 :                                             else
(1)   38/   94B66 :                                                     error "Unrecognized type in "ZERO DIVIDE" operand: \{.__type}"
(1)   38/   94B66 :                                             endif
(1)   38/   94B66 :                     
(1)   38/   94B66 :                                     endif
(1)   38/   94B66 :                     
(1)   38/   94B66 :                                     ; Cut "ZERO DIVIDE"
(1)   38/   94B66 :                                     if (.__pos>0)
(1)   38/   94B66 :                                             .__str: set             substr(.__str, 0, .__pos)
(1)   38/   94B66 :                                             .__pos: set             strstr(.__str,"%<")
(1)   38/   94B66 :                                     else
(1)   38/   94B66 :                                             .__pos: set             -1
(1)   38/   94B66 :                                     endif
(1)   38/   94B66 :                     
(1)   38/   94B66 :                             endm
(1)   38/   94B66 :                     
(1)   38/   94B66 : 4EB9 0009 4C52                      jsr             MDDBG__ErrorHandler
(1)   38/   94B6C :  (MACRO-2)                           __FSTRING_GenerateDecodedString "ZERO DIVIDE"
(1)   38/   94B6C :                     
(1)   38/   94B6C : =$0                          .__lpos:        set             0               ; start position
(1)   38/   94B6C : =$FFFFFFFFFFFFFFFF           .__pos: set             strstr("ZERO DIVIDE", "%<")
(1)   38/   94B6C :                     
(1)   38/   94B6C :                             while (.__pos>=0)
(1)   38/   94B6C :                     
(1)   38/   94B6C :                                     ; Write part of "ZERO DIVIDE" before % token
(1)   38/   94B6C :                                     if (.__pos-.__lpos>0)
(1)   38/   94B6C :                                             dc.b    substr("ZERO DIVIDE", .__lpos, .__pos-.__lpos)
(1)   38/   94B6C :                                     endif
(1)   38/   94B6C :                     
(1)   38/   94B6C :                                     ; Retrive expression in brakets following % char
(1)   38/   94B6C :                             .__endpos:      set             strstr(substr("ZERO DIVIDE",.__pos+1,0),">")+.__pos+1 
(1)   38/   94B6C :                                     if (.__endpos<=.__pos) ; Fix bizzare AS bug as stsstr() fails to check the last character of "ZERO DIVIDE"
(1)   38/   94B6C :                                             .__endpos:      set             strlen("ZERO DIVIDE")-1
(1)   38/   94B6C :                                     endif
(1)   38/   94B6C :                             .__midpos:      set             strstr(substr("ZERO DIVIDE",.__pos+5,0)," ")+.__pos+5
(1)   38/   94B6C :                             if ((.__midpos<.__pos+5)||(.__midpos>.__endpos))
(1)   38/   94B6C :                                             .__midpos:      set             .__endpos
(1)   38/   94B6C :                             endif
(1)   38/   94B6C :                                     .__type:                set             substr("ZERO DIVIDE",.__pos+1+1,2)             ; .type
(1)   38/   94B6C :                     
(1)   38/   94B6C :                                     ; Expression is an effective address (e.g. %<.w d0 hex> )
(1)   38/   94B6C :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   38/   94B6C :                                             .__param:       set             substr("ZERO DIVIDE",.__midpos+1,.__endpos-.__midpos-1)        ; param
(1)   38/   94B6C :                     
(1)   38/   94B6C :                                             ; Validate format setting ("param")
(1)   38/   94B6C :                                             if (strlen(.__param)<1)
(1)   38/   94B6C :                                                     .__param:       set             "hex"                   ; if param is ommited, set it to "hex"
(1)   38/   94B6C :                                             elseif (.__param=="signed")
(1)   38/   94B6C :                                                     .__param:       set             "hex+signed"    ; if param is "signed", correct it to "hex+signed"
(1)   38/   94B6C :                                             endif
(1)   38/   94B6C :                     
(1)   38/   94B6C :                                             if (val(.__param) < $80)
(1)   38/   94B6C :                                                     !error "Illegal operand format setting: \{.__param}. Expected hex, dec, bin, sym, str or their derivatives."
(1)   38/   94B6C :                                             endif
(1)   38/   94B6C :                     
(1)   38/   94B6C :                                             if (.__type==".b")
(1)   38/   94B6C :                                                     dc.b    val(.__param)
(1)   38/   94B6C :                                             elseif (.__type==".w")
(1)   38/   94B6C :                                                     dc.b    val(.__param)|1
(1)   38/   94B6C :                                             else
(1)   38/   94B6C :                                                     dc.b    val(.__param)|3
(1)   38/   94B6C :                                             endif
(1)   38/   94B6C :                     
(1)   38/   94B6C :                                     ; Expression is an inline constant (e.g. %<endl> )
(1)   38/   94B6C :                                     else
(1)   38/   94B6C :                                             dc.b    val(substr("ZERO DIVIDE",.__pos+1+1,.__endpos-.__pos-2))
(1)   38/   94B6C :                                     endif
(1)   38/   94B6C :                     
(1)   38/   94B6C :                                     .__lpos:        set             .__endpos+1
(1)   38/   94B6C :                                     if (strstr(substr("ZERO DIVIDE",.__pos+1,0),"%<")>=0)
(1)   38/   94B6C :                                             .__pos: set             strstr(substr("ZERO DIVIDE",.__pos+1,0), "%<")+.__pos+1
(1)   38/   94B6C :                                     else
(1)   38/   94B6C :                                             .__pos: set             -1
(1)   38/   94B6C :                                     endif
(1)   38/   94B6C :                     
(1)   38/   94B6C :                             endm
(1)   38/   94B6C :                     
(1)   38/   94B6C :                             ; Write part of "ZERO DIVIDE" before the end
(1)   38/   94B6C : 5A45 524F 2044              dc.b    substr("ZERO DIVIDE", .__lpos, 0), 0
            94B72 : 4956 4944 4500    
(1)   38/   94B78 :                     
(1)   38/   94B78 :                     
(1)   38/   94B78 : =$80                                 .__align_flag: set (((*)&1)!1)*_eh_align_offset
(1)   38/   94B78 : A0                                          dc.b    (_eh_default)+_eh_return|.__align_flag ; add flag "_eh_align_offset" if the next byte is at odd offset ...
(1)   38/   94B79 :                                             !align  2                                                                                               ; ... to tell Error handler to skip this byte, so it'll jump to ...
(1)   38/   94B7A : 4EF9 0009 5A18                              jmp             MDDBG__ErrorHandler_PagesController     ; ... extensions controller
(1)   39/   94B80 :                     
(1)   40/   94B80 :                     ChkInstr:
(1)   41/   94B80 : (MACRO)              	__ErrorMessage "CHK INSTRUCTION", _eh_default
(1)   41/   94B80 :  (MACRO-2)                           __FSTRING_GenerateArgumentsCode "CHK INSTRUCTION"
(1)   41/   94B80 :                     
(1)   41/   94B80 : =$FFFFFFFFFFFFFFFF           .__pos: set     strstr("CHK INSTRUCTION","%<")             ; token position
(1)   41/   94B80 : =$0                          .__sp:  set             0                                               ; stack displacement
(1)   41/   94B80 : ="CHK INSTRUCTION"           .__str: set             "CHK INSTRUCTION"
(1)   41/   94B80 :                     
(1)   41/   94B80 :                             ; Parse "CHK INSTRUCTION" itself
(1)   41/   94B80 :                             while (.__pos>=0)
(1)   41/   94B80 :                     
(1)   41/   94B80 :                             ; Find the last occurance "%<" in the "CHK INSTRUCTION"
(1)   41/   94B80 :                             while ( strstr(substr(.__str,.__pos+2,0),"%<")>=0 )
(1)   41/   94B80 :                                             .__pos:         set             strstr(substr(.__str,.__pos+2,0),"%<")+.__pos+2
(1)   41/   94B80 :                                     endm
(1)   41/   94B80 :                                     .__substr:      set             substr(.__str,.__pos,0)
(1)   41/   94B80 :                     
(1)   41/   94B80 :                                     ; Retrive expression in brackets following % char
(1)   41/   94B80 :                             .__endpos:      set             strstr(.__substr,">")
(1)   41/   94B80 :                                     if (.__endpos<0) ; Fix bizzare AS bug as stsstr() fails to check the last character of "CHK INSTRUCTION"
(1)   41/   94B80 :                                             .__endpos:      set             strlen(.__substr)-1
(1)   41/   94B80 :                                     endif
(1)   41/   94B80 :                             .__midpos:      set             strstr(substr(.__substr,5,0)," ")
(1)   41/   94B80 :                             if ((.__midpos<0)||(.__midpos+5>.__endpos))
(1)   41/   94B80 :                                             .__midpos:      set             .__endpos
(1)   41/   94B80 :                                     else
(1)   41/   94B80 :                                             .__midpos:      set             .__midpos+5
(1)   41/   94B80 :                             endif
(1)   41/   94B80 :                                     .__type:                set             substr(.__substr,2,2)   ; .type
(1)   41/   94B80 :                     
(1)   41/   94B80 :                                     ; Expression is an effective address (e.g. %(.w d0 hex) )
(1)   41/   94B80 :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   41/   94B80 :                                             .__operand:     set             substr(.__substr,5,.__midpos-5)                                         ; ea
(1)   41/   94B80 :                                             .__param:       set             substr(.__substr,.__midpos+1,.__endpos-.__midpos-1)             ; param
(1)   41/   94B80 :                     
(1)   41/   94B80 :                                             if (.__type==".b")
(1)   41/   94B80 :                                                     subq.w  #2, sp
(1)   41/   94B80 :                                                     __FSTRING_PushArgument.b        .__operand,1(sp)
(1)   41/   94B80 :                                                     .__sp:  set             .__sp+2
(1)   41/   94B80 :                     
(1)   41/   94B80 :                                             elseif (.__type==".w")
(1)   41/   94B80 :                                                     __FSTRING_PushArgument.w        .__operand,-(sp)
(1)   41/   94B80 :                                                     .__sp:  set             .__sp+2
(1)   41/   94B80 :                     
(1)   41/   94B80 :                                             elseif (.__type==".l")
(1)   41/   94B80 :                                                     __FSTRING_PushArgument.l        .__operand,-(sp)
(1)   41/   94B80 :                                                     .__sp:  set             .__sp+4
(1)   41/   94B80 :                     
(1)   41/   94B80 :                                             else
(1)   41/   94B80 :                                                     error "Unrecognized type in "CHK INSTRUCTION" operand: \{.__type}"
(1)   41/   94B80 :                                             endif
(1)   41/   94B80 :                     
(1)   41/   94B80 :                                     endif
(1)   41/   94B80 :                     
(1)   41/   94B80 :                                     ; Cut "CHK INSTRUCTION"
(1)   41/   94B80 :                                     if (.__pos>0)
(1)   41/   94B80 :                                             .__str: set             substr(.__str, 0, .__pos)
(1)   41/   94B80 :                                             .__pos: set             strstr(.__str,"%<")
(1)   41/   94B80 :                                     else
(1)   41/   94B80 :                                             .__pos: set             -1
(1)   41/   94B80 :                                     endif
(1)   41/   94B80 :                     
(1)   41/   94B80 :                             endm
(1)   41/   94B80 :                     
(1)   41/   94B80 : 4EB9 0009 4C52                      jsr             MDDBG__ErrorHandler
(1)   41/   94B86 :  (MACRO-2)                           __FSTRING_GenerateDecodedString "CHK INSTRUCTION"
(1)   41/   94B86 :                     
(1)   41/   94B86 : =$0                          .__lpos:        set             0               ; start position
(1)   41/   94B86 : =$FFFFFFFFFFFFFFFF           .__pos: set             strstr("CHK INSTRUCTION", "%<")
(1)   41/   94B86 :                     
(1)   41/   94B86 :                             while (.__pos>=0)
(1)   41/   94B86 :                     
(1)   41/   94B86 :                                     ; Write part of "CHK INSTRUCTION" before % token
(1)   41/   94B86 :                                     if (.__pos-.__lpos>0)
(1)   41/   94B86 :                                             dc.b    substr("CHK INSTRUCTION", .__lpos, .__pos-.__lpos)
(1)   41/   94B86 :                                     endif
(1)   41/   94B86 :                     
(1)   41/   94B86 :                                     ; Retrive expression in brakets following % char
(1)   41/   94B86 :                             .__endpos:      set             strstr(substr("CHK INSTRUCTION",.__pos+1,0),">")+.__pos+1 
(1)   41/   94B86 :                                     if (.__endpos<=.__pos) ; Fix bizzare AS bug as stsstr() fails to check the last character of "CHK INSTRUCTION"
(1)   41/   94B86 :                                             .__endpos:      set             strlen("CHK INSTRUCTION")-1
(1)   41/   94B86 :                                     endif
(1)   41/   94B86 :                             .__midpos:      set             strstr(substr("CHK INSTRUCTION",.__pos+5,0)," ")+.__pos+5
(1)   41/   94B86 :                             if ((.__midpos<.__pos+5)||(.__midpos>.__endpos))
(1)   41/   94B86 :                                             .__midpos:      set             .__endpos
(1)   41/   94B86 :                             endif
(1)   41/   94B86 :                                     .__type:                set             substr("CHK INSTRUCTION",.__pos+1+1,2)             ; .type
(1)   41/   94B86 :                     
(1)   41/   94B86 :                                     ; Expression is an effective address (e.g. %<.w d0 hex> )
(1)   41/   94B86 :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   41/   94B86 :                                             .__param:       set             substr("CHK INSTRUCTION",.__midpos+1,.__endpos-.__midpos-1)        ; param
(1)   41/   94B86 :                     
(1)   41/   94B86 :                                             ; Validate format setting ("param")
(1)   41/   94B86 :                                             if (strlen(.__param)<1)
(1)   41/   94B86 :                                                     .__param:       set             "hex"                   ; if param is ommited, set it to "hex"
(1)   41/   94B86 :                                             elseif (.__param=="signed")
(1)   41/   94B86 :                                                     .__param:       set             "hex+signed"    ; if param is "signed", correct it to "hex+signed"
(1)   41/   94B86 :                                             endif
(1)   41/   94B86 :                     
(1)   41/   94B86 :                                             if (val(.__param) < $80)
(1)   41/   94B86 :                                                     !error "Illegal operand format setting: \{.__param}. Expected hex, dec, bin, sym, str or their derivatives."
(1)   41/   94B86 :                                             endif
(1)   41/   94B86 :                     
(1)   41/   94B86 :                                             if (.__type==".b")
(1)   41/   94B86 :                                                     dc.b    val(.__param)
(1)   41/   94B86 :                                             elseif (.__type==".w")
(1)   41/   94B86 :                                                     dc.b    val(.__param)|1
(1)   41/   94B86 :                                             else
(1)   41/   94B86 :                                                     dc.b    val(.__param)|3
(1)   41/   94B86 :                                             endif
(1)   41/   94B86 :                     
(1)   41/   94B86 :                                     ; Expression is an inline constant (e.g. %<endl> )
(1)   41/   94B86 :                                     else
(1)   41/   94B86 :                                             dc.b    val(substr("CHK INSTRUCTION",.__pos+1+1,.__endpos-.__pos-2))
(1)   41/   94B86 :                                     endif
(1)   41/   94B86 :                     
(1)   41/   94B86 :                                     .__lpos:        set             .__endpos+1
(1)   41/   94B86 :                                     if (strstr(substr("CHK INSTRUCTION",.__pos+1,0),"%<")>=0)
(1)   41/   94B86 :                                             .__pos: set             strstr(substr("CHK INSTRUCTION",.__pos+1,0), "%<")+.__pos+1
(1)   41/   94B86 :                                     else
(1)   41/   94B86 :                                             .__pos: set             -1
(1)   41/   94B86 :                                     endif
(1)   41/   94B86 :                     
(1)   41/   94B86 :                             endm
(1)   41/   94B86 :                     
(1)   41/   94B86 :                             ; Write part of "CHK INSTRUCTION" before the end
(1)   41/   94B86 : 4348 4B20 494E              dc.b    substr("CHK INSTRUCTION", .__lpos, 0), 0
            94B8C : 5354 5255 4354 
            94B92 : 494F 4E00          
(1)   41/   94B96 :                     
(1)   41/   94B96 :                     
(1)   41/   94B96 : =$80                                 .__align_flag: set (((*)&1)!1)*_eh_align_offset
(1)   41/   94B96 : A0                                          dc.b    (_eh_default)+_eh_return|.__align_flag ; add flag "_eh_align_offset" if the next byte is at odd offset ...
(1)   41/   94B97 :                                             !align  2                                                                                               ; ... to tell Error handler to skip this byte, so it'll jump to ...
(1)   41/   94B98 : 4EF9 0009 5A18                              jmp             MDDBG__ErrorHandler_PagesController     ; ... extensions controller
(1)   42/   94B9E :                     
(1)   43/   94B9E :                     TrapvInstr:
(1)   44/   94B9E : (MACRO)              	__ErrorMessage "TRAPV INSTRUCTION", _eh_default
(1)   44/   94B9E :  (MACRO-2)                           __FSTRING_GenerateArgumentsCode "TRAPV INSTRUCTION"
(1)   44/   94B9E :                     
(1)   44/   94B9E : =$FFFFFFFFFFFFFFFF           .__pos: set     strstr("TRAPV INSTRUCTION","%<")             ; token position
(1)   44/   94B9E : =$0                          .__sp:  set             0                                               ; stack displacement
(1)   44/   94B9E : ="TRAPV INSTRUCT..           .__str: set             "TRAPV INSTRUCTION"
(1)   44/   94B9E :                     
(1)   44/   94B9E :                             ; Parse "TRAPV INSTRUCTION" itself
(1)   44/   94B9E :                             while (.__pos>=0)
(1)   44/   94B9E :                     
(1)   44/   94B9E :                             ; Find the last occurance "%<" in the "TRAPV INSTRUCTION"
(1)   44/   94B9E :                             while ( strstr(substr(.__str,.__pos+2,0),"%<")>=0 )
(1)   44/   94B9E :                                             .__pos:         set             strstr(substr(.__str,.__pos+2,0),"%<")+.__pos+2
(1)   44/   94B9E :                                     endm
(1)   44/   94B9E :                                     .__substr:      set             substr(.__str,.__pos,0)
(1)   44/   94B9E :                     
(1)   44/   94B9E :                                     ; Retrive expression in brackets following % char
(1)   44/   94B9E :                             .__endpos:      set             strstr(.__substr,">")
(1)   44/   94B9E :                                     if (.__endpos<0) ; Fix bizzare AS bug as stsstr() fails to check the last character of "TRAPV INSTRUCTION"
(1)   44/   94B9E :                                             .__endpos:      set             strlen(.__substr)-1
(1)   44/   94B9E :                                     endif
(1)   44/   94B9E :                             .__midpos:      set             strstr(substr(.__substr,5,0)," ")
(1)   44/   94B9E :                             if ((.__midpos<0)||(.__midpos+5>.__endpos))
(1)   44/   94B9E :                                             .__midpos:      set             .__endpos
(1)   44/   94B9E :                                     else
(1)   44/   94B9E :                                             .__midpos:      set             .__midpos+5
(1)   44/   94B9E :                             endif
(1)   44/   94B9E :                                     .__type:                set             substr(.__substr,2,2)   ; .type
(1)   44/   94B9E :                     
(1)   44/   94B9E :                                     ; Expression is an effective address (e.g. %(.w d0 hex) )
(1)   44/   94B9E :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   44/   94B9E :                                             .__operand:     set             substr(.__substr,5,.__midpos-5)                                         ; ea
(1)   44/   94B9E :                                             .__param:       set             substr(.__substr,.__midpos+1,.__endpos-.__midpos-1)             ; param
(1)   44/   94B9E :                     
(1)   44/   94B9E :                                             if (.__type==".b")
(1)   44/   94B9E :                                                     subq.w  #2, sp
(1)   44/   94B9E :                                                     __FSTRING_PushArgument.b        .__operand,1(sp)
(1)   44/   94B9E :                                                     .__sp:  set             .__sp+2
(1)   44/   94B9E :                     
(1)   44/   94B9E :                                             elseif (.__type==".w")
(1)   44/   94B9E :                                                     __FSTRING_PushArgument.w        .__operand,-(sp)
(1)   44/   94B9E :                                                     .__sp:  set             .__sp+2
(1)   44/   94B9E :                     
(1)   44/   94B9E :                                             elseif (.__type==".l")
(1)   44/   94B9E :                                                     __FSTRING_PushArgument.l        .__operand,-(sp)
(1)   44/   94B9E :                                                     .__sp:  set             .__sp+4
(1)   44/   94B9E :                     
(1)   44/   94B9E :                                             else
(1)   44/   94B9E :                                                     error "Unrecognized type in "TRAPV INSTRUCTION" operand: \{.__type}"
(1)   44/   94B9E :                                             endif
(1)   44/   94B9E :                     
(1)   44/   94B9E :                                     endif
(1)   44/   94B9E :                     
(1)   44/   94B9E :                                     ; Cut "TRAPV INSTRUCTION"
(1)   44/   94B9E :                                     if (.__pos>0)
(1)   44/   94B9E :                                             .__str: set             substr(.__str, 0, .__pos)
(1)   44/   94B9E :                                             .__pos: set             strstr(.__str,"%<")
(1)   44/   94B9E :                                     else
(1)   44/   94B9E :                                             .__pos: set             -1
(1)   44/   94B9E :                                     endif
(1)   44/   94B9E :                     
(1)   44/   94B9E :                             endm
(1)   44/   94B9E :                     
(1)   44/   94B9E : 4EB9 0009 4C52                      jsr             MDDBG__ErrorHandler
(1)   44/   94BA4 :  (MACRO-2)                           __FSTRING_GenerateDecodedString "TRAPV INSTRUCTION"
(1)   44/   94BA4 :                     
(1)   44/   94BA4 : =$0                          .__lpos:        set             0               ; start position
(1)   44/   94BA4 : =$FFFFFFFFFFFFFFFF           .__pos: set             strstr("TRAPV INSTRUCTION", "%<")
(1)   44/   94BA4 :                     
(1)   44/   94BA4 :                             while (.__pos>=0)
(1)   44/   94BA4 :                     
(1)   44/   94BA4 :                                     ; Write part of "TRAPV INSTRUCTION" before % token
(1)   44/   94BA4 :                                     if (.__pos-.__lpos>0)
(1)   44/   94BA4 :                                             dc.b    substr("TRAPV INSTRUCTION", .__lpos, .__pos-.__lpos)
(1)   44/   94BA4 :                                     endif
(1)   44/   94BA4 :                     
(1)   44/   94BA4 :                                     ; Retrive expression in brakets following % char
(1)   44/   94BA4 :                             .__endpos:      set             strstr(substr("TRAPV INSTRUCTION",.__pos+1,0),">")+.__pos+1 
(1)   44/   94BA4 :                                     if (.__endpos<=.__pos) ; Fix bizzare AS bug as stsstr() fails to check the last character of "TRAPV INSTRUCTION"
(1)   44/   94BA4 :                                             .__endpos:      set             strlen("TRAPV INSTRUCTION")-1
(1)   44/   94BA4 :                                     endif
(1)   44/   94BA4 :                             .__midpos:      set             strstr(substr("TRAPV INSTRUCTION",.__pos+5,0)," ")+.__pos+5
(1)   44/   94BA4 :                             if ((.__midpos<.__pos+5)||(.__midpos>.__endpos))
(1)   44/   94BA4 :                                             .__midpos:      set             .__endpos
(1)   44/   94BA4 :                             endif
(1)   44/   94BA4 :                                     .__type:                set             substr("TRAPV INSTRUCTION",.__pos+1+1,2)             ; .type
(1)   44/   94BA4 :                     
(1)   44/   94BA4 :                                     ; Expression is an effective address (e.g. %<.w d0 hex> )
(1)   44/   94BA4 :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   44/   94BA4 :                                             .__param:       set             substr("TRAPV INSTRUCTION",.__midpos+1,.__endpos-.__midpos-1)        ; param
(1)   44/   94BA4 :                     
(1)   44/   94BA4 :                                             ; Validate format setting ("param")
(1)   44/   94BA4 :                                             if (strlen(.__param)<1)
(1)   44/   94BA4 :                                                     .__param:       set             "hex"                   ; if param is ommited, set it to "hex"
(1)   44/   94BA4 :                                             elseif (.__param=="signed")
(1)   44/   94BA4 :                                                     .__param:       set             "hex+signed"    ; if param is "signed", correct it to "hex+signed"
(1)   44/   94BA4 :                                             endif
(1)   44/   94BA4 :                     
(1)   44/   94BA4 :                                             if (val(.__param) < $80)
(1)   44/   94BA4 :                                                     !error "Illegal operand format setting: \{.__param}. Expected hex, dec, bin, sym, str or their derivatives."
(1)   44/   94BA4 :                                             endif
(1)   44/   94BA4 :                     
(1)   44/   94BA4 :                                             if (.__type==".b")
(1)   44/   94BA4 :                                                     dc.b    val(.__param)
(1)   44/   94BA4 :                                             elseif (.__type==".w")
(1)   44/   94BA4 :                                                     dc.b    val(.__param)|1
(1)   44/   94BA4 :                                             else
(1)   44/   94BA4 :                                                     dc.b    val(.__param)|3
(1)   44/   94BA4 :                                             endif
(1)   44/   94BA4 :                     
(1)   44/   94BA4 :                                     ; Expression is an inline constant (e.g. %<endl> )
(1)   44/   94BA4 :                                     else
(1)   44/   94BA4 :                                             dc.b    val(substr("TRAPV INSTRUCTION",.__pos+1+1,.__endpos-.__pos-2))
(1)   44/   94BA4 :                                     endif
(1)   44/   94BA4 :                     
(1)   44/   94BA4 :                                     .__lpos:        set             .__endpos+1
(1)   44/   94BA4 :                                     if (strstr(substr("TRAPV INSTRUCTION",.__pos+1,0),"%<")>=0)
(1)   44/   94BA4 :                                             .__pos: set             strstr(substr("TRAPV INSTRUCTION",.__pos+1,0), "%<")+.__pos+1
(1)   44/   94BA4 :                                     else
(1)   44/   94BA4 :                                             .__pos: set             -1
(1)   44/   94BA4 :                                     endif
(1)   44/   94BA4 :                     
(1)   44/   94BA4 :                             endm
(1)   44/   94BA4 :                     
(1)   44/   94BA4 :                             ; Write part of "TRAPV INSTRUCTION" before the end
(1)   44/   94BA4 : 5452 4150 5620              dc.b    substr("TRAPV INSTRUCTION", .__lpos, 0), 0
            94BAA : 494E 5354 5255 
            94BB0 : 4354 494F 4E00    
(1)   44/   94BB6 :                     
(1)   44/   94BB6 :                     
(1)   44/   94BB6 : =$80                                 .__align_flag: set (((*)&1)!1)*_eh_align_offset
(1)   44/   94BB6 : A0                                          dc.b    (_eh_default)+_eh_return|.__align_flag ; add flag "_eh_align_offset" if the next byte is at odd offset ...
(1)   44/   94BB7 :                                             !align  2                                                                                               ; ... to tell Error handler to skip this byte, so it'll jump to ...
(1)   44/   94BB8 : 4EF9 0009 5A18                              jmp             MDDBG__ErrorHandler_PagesController     ; ... extensions controller
(1)   45/   94BBE :                     
(1)   46/   94BBE :                     PrivilegeViol:
(1)   47/   94BBE : (MACRO)              	__ErrorMessage "PRIVILEGE VIOLATION", _eh_default
(1)   47/   94BBE :  (MACRO-2)                           __FSTRING_GenerateArgumentsCode "PRIVILEGE VIOLATION"
(1)   47/   94BBE :                     
(1)   47/   94BBE : =$FFFFFFFFFFFFFFFF           .__pos: set     strstr("PRIVILEGE VIOLATION","%<")             ; token position
(1)   47/   94BBE : =$0                          .__sp:  set             0                                               ; stack displacement
(1)   47/   94BBE : ="PRIVILEGE VIOL..           .__str: set             "PRIVILEGE VIOLATION"
(1)   47/   94BBE :                     
(1)   47/   94BBE :                             ; Parse "PRIVILEGE VIOLATION" itself
(1)   47/   94BBE :                             while (.__pos>=0)
(1)   47/   94BBE :                     
(1)   47/   94BBE :                             ; Find the last occurance "%<" in the "PRIVILEGE VIOLATION"
(1)   47/   94BBE :                             while ( strstr(substr(.__str,.__pos+2,0),"%<")>=0 )
(1)   47/   94BBE :                                             .__pos:         set             strstr(substr(.__str,.__pos+2,0),"%<")+.__pos+2
(1)   47/   94BBE :                                     endm
(1)   47/   94BBE :                                     .__substr:      set             substr(.__str,.__pos,0)
(1)   47/   94BBE :                     
(1)   47/   94BBE :                                     ; Retrive expression in brackets following % char
(1)   47/   94BBE :                             .__endpos:      set             strstr(.__substr,">")
(1)   47/   94BBE :                                     if (.__endpos<0) ; Fix bizzare AS bug as stsstr() fails to check the last character of "PRIVILEGE VIOLATION"
(1)   47/   94BBE :                                             .__endpos:      set             strlen(.__substr)-1
(1)   47/   94BBE :                                     endif
(1)   47/   94BBE :                             .__midpos:      set             strstr(substr(.__substr,5,0)," ")
(1)   47/   94BBE :                             if ((.__midpos<0)||(.__midpos+5>.__endpos))
(1)   47/   94BBE :                                             .__midpos:      set             .__endpos
(1)   47/   94BBE :                                     else
(1)   47/   94BBE :                                             .__midpos:      set             .__midpos+5
(1)   47/   94BBE :                             endif
(1)   47/   94BBE :                                     .__type:                set             substr(.__substr,2,2)   ; .type
(1)   47/   94BBE :                     
(1)   47/   94BBE :                                     ; Expression is an effective address (e.g. %(.w d0 hex) )
(1)   47/   94BBE :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   47/   94BBE :                                             .__operand:     set             substr(.__substr,5,.__midpos-5)                                         ; ea
(1)   47/   94BBE :                                             .__param:       set             substr(.__substr,.__midpos+1,.__endpos-.__midpos-1)             ; param
(1)   47/   94BBE :                     
(1)   47/   94BBE :                                             if (.__type==".b")
(1)   47/   94BBE :                                                     subq.w  #2, sp
(1)   47/   94BBE :                                                     __FSTRING_PushArgument.b        .__operand,1(sp)
(1)   47/   94BBE :                                                     .__sp:  set             .__sp+2
(1)   47/   94BBE :                     
(1)   47/   94BBE :                                             elseif (.__type==".w")
(1)   47/   94BBE :                                                     __FSTRING_PushArgument.w        .__operand,-(sp)
(1)   47/   94BBE :                                                     .__sp:  set             .__sp+2
(1)   47/   94BBE :                     
(1)   47/   94BBE :                                             elseif (.__type==".l")
(1)   47/   94BBE :                                                     __FSTRING_PushArgument.l        .__operand,-(sp)
(1)   47/   94BBE :                                                     .__sp:  set             .__sp+4
(1)   47/   94BBE :                     
(1)   47/   94BBE :                                             else
(1)   47/   94BBE :                                                     error "Unrecognized type in "PRIVILEGE VIOLATION" operand: \{.__type}"
(1)   47/   94BBE :                                             endif
(1)   47/   94BBE :                     
(1)   47/   94BBE :                                     endif
(1)   47/   94BBE :                     
(1)   47/   94BBE :                                     ; Cut "PRIVILEGE VIOLATION"
(1)   47/   94BBE :                                     if (.__pos>0)
(1)   47/   94BBE :                                             .__str: set             substr(.__str, 0, .__pos)
(1)   47/   94BBE :                                             .__pos: set             strstr(.__str,"%<")
(1)   47/   94BBE :                                     else
(1)   47/   94BBE :                                             .__pos: set             -1
(1)   47/   94BBE :                                     endif
(1)   47/   94BBE :                     
(1)   47/   94BBE :                             endm
(1)   47/   94BBE :                     
(1)   47/   94BBE : 4EB9 0009 4C52                      jsr             MDDBG__ErrorHandler
(1)   47/   94BC4 :  (MACRO-2)                           __FSTRING_GenerateDecodedString "PRIVILEGE VIOLATION"
(1)   47/   94BC4 :                     
(1)   47/   94BC4 : =$0                          .__lpos:        set             0               ; start position
(1)   47/   94BC4 : =$FFFFFFFFFFFFFFFF           .__pos: set             strstr("PRIVILEGE VIOLATION", "%<")
(1)   47/   94BC4 :                     
(1)   47/   94BC4 :                             while (.__pos>=0)
(1)   47/   94BC4 :                     
(1)   47/   94BC4 :                                     ; Write part of "PRIVILEGE VIOLATION" before % token
(1)   47/   94BC4 :                                     if (.__pos-.__lpos>0)
(1)   47/   94BC4 :                                             dc.b    substr("PRIVILEGE VIOLATION", .__lpos, .__pos-.__lpos)
(1)   47/   94BC4 :                                     endif
(1)   47/   94BC4 :                     
(1)   47/   94BC4 :                                     ; Retrive expression in brakets following % char
(1)   47/   94BC4 :                             .__endpos:      set             strstr(substr("PRIVILEGE VIOLATION",.__pos+1,0),">")+.__pos+1 
(1)   47/   94BC4 :                                     if (.__endpos<=.__pos) ; Fix bizzare AS bug as stsstr() fails to check the last character of "PRIVILEGE VIOLATION"
(1)   47/   94BC4 :                                             .__endpos:      set             strlen("PRIVILEGE VIOLATION")-1
(1)   47/   94BC4 :                                     endif
(1)   47/   94BC4 :                             .__midpos:      set             strstr(substr("PRIVILEGE VIOLATION",.__pos+5,0)," ")+.__pos+5
(1)   47/   94BC4 :                             if ((.__midpos<.__pos+5)||(.__midpos>.__endpos))
(1)   47/   94BC4 :                                             .__midpos:      set             .__endpos
(1)   47/   94BC4 :                             endif
(1)   47/   94BC4 :                                     .__type:                set             substr("PRIVILEGE VIOLATION",.__pos+1+1,2)             ; .type
(1)   47/   94BC4 :                     
(1)   47/   94BC4 :                                     ; Expression is an effective address (e.g. %<.w d0 hex> )
(1)   47/   94BC4 :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   47/   94BC4 :                                             .__param:       set             substr("PRIVILEGE VIOLATION",.__midpos+1,.__endpos-.__midpos-1)        ; param
(1)   47/   94BC4 :                     
(1)   47/   94BC4 :                                             ; Validate format setting ("param")
(1)   47/   94BC4 :                                             if (strlen(.__param)<1)
(1)   47/   94BC4 :                                                     .__param:       set             "hex"                   ; if param is ommited, set it to "hex"
(1)   47/   94BC4 :                                             elseif (.__param=="signed")
(1)   47/   94BC4 :                                                     .__param:       set             "hex+signed"    ; if param is "signed", correct it to "hex+signed"
(1)   47/   94BC4 :                                             endif
(1)   47/   94BC4 :                     
(1)   47/   94BC4 :                                             if (val(.__param) < $80)
(1)   47/   94BC4 :                                                     !error "Illegal operand format setting: \{.__param}. Expected hex, dec, bin, sym, str or their derivatives."
(1)   47/   94BC4 :                                             endif
(1)   47/   94BC4 :                     
(1)   47/   94BC4 :                                             if (.__type==".b")
(1)   47/   94BC4 :                                                     dc.b    val(.__param)
(1)   47/   94BC4 :                                             elseif (.__type==".w")
(1)   47/   94BC4 :                                                     dc.b    val(.__param)|1
(1)   47/   94BC4 :                                             else
(1)   47/   94BC4 :                                                     dc.b    val(.__param)|3
(1)   47/   94BC4 :                                             endif
(1)   47/   94BC4 :                     
(1)   47/   94BC4 :                                     ; Expression is an inline constant (e.g. %<endl> )
(1)   47/   94BC4 :                                     else
(1)   47/   94BC4 :                                             dc.b    val(substr("PRIVILEGE VIOLATION",.__pos+1+1,.__endpos-.__pos-2))
(1)   47/   94BC4 :                                     endif
(1)   47/   94BC4 :                     
(1)   47/   94BC4 :                                     .__lpos:        set             .__endpos+1
(1)   47/   94BC4 :                                     if (strstr(substr("PRIVILEGE VIOLATION",.__pos+1,0),"%<")>=0)
(1)   47/   94BC4 :                                             .__pos: set             strstr(substr("PRIVILEGE VIOLATION",.__pos+1,0), "%<")+.__pos+1
(1)   47/   94BC4 :                                     else
(1)   47/   94BC4 :                                             .__pos: set             -1
(1)   47/   94BC4 :                                     endif
(1)   47/   94BC4 :                     
(1)   47/   94BC4 :                             endm
(1)   47/   94BC4 :                     
(1)   47/   94BC4 :                             ; Write part of "PRIVILEGE VIOLATION" before the end
(1)   47/   94BC4 : 5052 4956 494C              dc.b    substr("PRIVILEGE VIOLATION", .__lpos, 0), 0
            94BCA : 4547 4520 5649 
            94BD0 : 4F4C 4154 494F 
            94BD6 : 4E00             
(1)   47/   94BD8 :                     
(1)   47/   94BD8 :                     
(1)   47/   94BD8 : =$80                                 .__align_flag: set (((*)&1)!1)*_eh_align_offset
(1)   47/   94BD8 : A0                                          dc.b    (_eh_default)+_eh_return|.__align_flag ; add flag "_eh_align_offset" if the next byte is at odd offset ...
(1)   47/   94BD9 :                                             !align  2                                                                                               ; ... to tell Error handler to skip this byte, so it'll jump to ...
(1)   47/   94BDA : 4EF9 0009 5A18                              jmp             MDDBG__ErrorHandler_PagesController     ; ... extensions controller
(1)   48/   94BE0 :                     
(1)   49/   94BE0 :                     Trace:
(1)   50/   94BE0 : (MACRO)              	__ErrorMessage "TRACE", _eh_default
(1)   50/   94BE0 :  (MACRO-2)                           __FSTRING_GenerateArgumentsCode "TRACE"
(1)   50/   94BE0 :                     
(1)   50/   94BE0 : =$FFFFFFFFFFFFFFFF           .__pos: set     strstr("TRACE","%<")             ; token position
(1)   50/   94BE0 : =$0                          .__sp:  set             0                                               ; stack displacement
(1)   50/   94BE0 : ="TRACE"                     .__str: set             "TRACE"
(1)   50/   94BE0 :                     
(1)   50/   94BE0 :                             ; Parse "TRACE" itself
(1)   50/   94BE0 :                             while (.__pos>=0)
(1)   50/   94BE0 :                     
(1)   50/   94BE0 :                             ; Find the last occurance "%<" in the "TRACE"
(1)   50/   94BE0 :                             while ( strstr(substr(.__str,.__pos+2,0),"%<")>=0 )
(1)   50/   94BE0 :                                             .__pos:         set             strstr(substr(.__str,.__pos+2,0),"%<")+.__pos+2
(1)   50/   94BE0 :                                     endm
(1)   50/   94BE0 :                                     .__substr:      set             substr(.__str,.__pos,0)
(1)   50/   94BE0 :                     
(1)   50/   94BE0 :                                     ; Retrive expression in brackets following % char
(1)   50/   94BE0 :                             .__endpos:      set             strstr(.__substr,">")
(1)   50/   94BE0 :                                     if (.__endpos<0) ; Fix bizzare AS bug as stsstr() fails to check the last character of "TRACE"
(1)   50/   94BE0 :                                             .__endpos:      set             strlen(.__substr)-1
(1)   50/   94BE0 :                                     endif
(1)   50/   94BE0 :                             .__midpos:      set             strstr(substr(.__substr,5,0)," ")
(1)   50/   94BE0 :                             if ((.__midpos<0)||(.__midpos+5>.__endpos))
(1)   50/   94BE0 :                                             .__midpos:      set             .__endpos
(1)   50/   94BE0 :                                     else
(1)   50/   94BE0 :                                             .__midpos:      set             .__midpos+5
(1)   50/   94BE0 :                             endif
(1)   50/   94BE0 :                                     .__type:                set             substr(.__substr,2,2)   ; .type
(1)   50/   94BE0 :                     
(1)   50/   94BE0 :                                     ; Expression is an effective address (e.g. %(.w d0 hex) )
(1)   50/   94BE0 :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   50/   94BE0 :                                             .__operand:     set             substr(.__substr,5,.__midpos-5)                                         ; ea
(1)   50/   94BE0 :                                             .__param:       set             substr(.__substr,.__midpos+1,.__endpos-.__midpos-1)             ; param
(1)   50/   94BE0 :                     
(1)   50/   94BE0 :                                             if (.__type==".b")
(1)   50/   94BE0 :                                                     subq.w  #2, sp
(1)   50/   94BE0 :                                                     __FSTRING_PushArgument.b        .__operand,1(sp)
(1)   50/   94BE0 :                                                     .__sp:  set             .__sp+2
(1)   50/   94BE0 :                     
(1)   50/   94BE0 :                                             elseif (.__type==".w")
(1)   50/   94BE0 :                                                     __FSTRING_PushArgument.w        .__operand,-(sp)
(1)   50/   94BE0 :                                                     .__sp:  set             .__sp+2
(1)   50/   94BE0 :                     
(1)   50/   94BE0 :                                             elseif (.__type==".l")
(1)   50/   94BE0 :                                                     __FSTRING_PushArgument.l        .__operand,-(sp)
(1)   50/   94BE0 :                                                     .__sp:  set             .__sp+4
(1)   50/   94BE0 :                     
(1)   50/   94BE0 :                                             else
(1)   50/   94BE0 :                                                     error "Unrecognized type in "TRACE" operand: \{.__type}"
(1)   50/   94BE0 :                                             endif
(1)   50/   94BE0 :                     
(1)   50/   94BE0 :                                     endif
(1)   50/   94BE0 :                     
(1)   50/   94BE0 :                                     ; Cut "TRACE"
(1)   50/   94BE0 :                                     if (.__pos>0)
(1)   50/   94BE0 :                                             .__str: set             substr(.__str, 0, .__pos)
(1)   50/   94BE0 :                                             .__pos: set             strstr(.__str,"%<")
(1)   50/   94BE0 :                                     else
(1)   50/   94BE0 :                                             .__pos: set             -1
(1)   50/   94BE0 :                                     endif
(1)   50/   94BE0 :                     
(1)   50/   94BE0 :                             endm
(1)   50/   94BE0 :                     
(1)   50/   94BE0 : 4EB9 0009 4C52                      jsr             MDDBG__ErrorHandler
(1)   50/   94BE6 :  (MACRO-2)                           __FSTRING_GenerateDecodedString "TRACE"
(1)   50/   94BE6 :                     
(1)   50/   94BE6 : =$0                          .__lpos:        set             0               ; start position
(1)   50/   94BE6 : =$FFFFFFFFFFFFFFFF           .__pos: set             strstr("TRACE", "%<")
(1)   50/   94BE6 :                     
(1)   50/   94BE6 :                             while (.__pos>=0)
(1)   50/   94BE6 :                     
(1)   50/   94BE6 :                                     ; Write part of "TRACE" before % token
(1)   50/   94BE6 :                                     if (.__pos-.__lpos>0)
(1)   50/   94BE6 :                                             dc.b    substr("TRACE", .__lpos, .__pos-.__lpos)
(1)   50/   94BE6 :                                     endif
(1)   50/   94BE6 :                     
(1)   50/   94BE6 :                                     ; Retrive expression in brakets following % char
(1)   50/   94BE6 :                             .__endpos:      set             strstr(substr("TRACE",.__pos+1,0),">")+.__pos+1 
(1)   50/   94BE6 :                                     if (.__endpos<=.__pos) ; Fix bizzare AS bug as stsstr() fails to check the last character of "TRACE"
(1)   50/   94BE6 :                                             .__endpos:      set             strlen("TRACE")-1
(1)   50/   94BE6 :                                     endif
(1)   50/   94BE6 :                             .__midpos:      set             strstr(substr("TRACE",.__pos+5,0)," ")+.__pos+5
(1)   50/   94BE6 :                             if ((.__midpos<.__pos+5)||(.__midpos>.__endpos))
(1)   50/   94BE6 :                                             .__midpos:      set             .__endpos
(1)   50/   94BE6 :                             endif
(1)   50/   94BE6 :                                     .__type:                set             substr("TRACE",.__pos+1+1,2)             ; .type
(1)   50/   94BE6 :                     
(1)   50/   94BE6 :                                     ; Expression is an effective address (e.g. %<.w d0 hex> )
(1)   50/   94BE6 :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   50/   94BE6 :                                             .__param:       set             substr("TRACE",.__midpos+1,.__endpos-.__midpos-1)        ; param
(1)   50/   94BE6 :                     
(1)   50/   94BE6 :                                             ; Validate format setting ("param")
(1)   50/   94BE6 :                                             if (strlen(.__param)<1)
(1)   50/   94BE6 :                                                     .__param:       set             "hex"                   ; if param is ommited, set it to "hex"
(1)   50/   94BE6 :                                             elseif (.__param=="signed")
(1)   50/   94BE6 :                                                     .__param:       set             "hex+signed"    ; if param is "signed", correct it to "hex+signed"
(1)   50/   94BE6 :                                             endif
(1)   50/   94BE6 :                     
(1)   50/   94BE6 :                                             if (val(.__param) < $80)
(1)   50/   94BE6 :                                                     !error "Illegal operand format setting: \{.__param}. Expected hex, dec, bin, sym, str or their derivatives."
(1)   50/   94BE6 :                                             endif
(1)   50/   94BE6 :                     
(1)   50/   94BE6 :                                             if (.__type==".b")
(1)   50/   94BE6 :                                                     dc.b    val(.__param)
(1)   50/   94BE6 :                                             elseif (.__type==".w")
(1)   50/   94BE6 :                                                     dc.b    val(.__param)|1
(1)   50/   94BE6 :                                             else
(1)   50/   94BE6 :                                                     dc.b    val(.__param)|3
(1)   50/   94BE6 :                                             endif
(1)   50/   94BE6 :                     
(1)   50/   94BE6 :                                     ; Expression is an inline constant (e.g. %<endl> )
(1)   50/   94BE6 :                                     else
(1)   50/   94BE6 :                                             dc.b    val(substr("TRACE",.__pos+1+1,.__endpos-.__pos-2))
(1)   50/   94BE6 :                                     endif
(1)   50/   94BE6 :                     
(1)   50/   94BE6 :                                     .__lpos:        set             .__endpos+1
(1)   50/   94BE6 :                                     if (strstr(substr("TRACE",.__pos+1,0),"%<")>=0)
(1)   50/   94BE6 :                                             .__pos: set             strstr(substr("TRACE",.__pos+1,0), "%<")+.__pos+1
(1)   50/   94BE6 :                                     else
(1)   50/   94BE6 :                                             .__pos: set             -1
(1)   50/   94BE6 :                                     endif
(1)   50/   94BE6 :                     
(1)   50/   94BE6 :                             endm
(1)   50/   94BE6 :                     
(1)   50/   94BE6 :                             ; Write part of "TRACE" before the end
(1)   50/   94BE6 : 5452 4143 4500              dc.b    substr("TRACE", .__lpos, 0), 0
(1)   50/   94BEC :                     
(1)   50/   94BEC :                     
(1)   50/   94BEC : =$80                                 .__align_flag: set (((*)&1)!1)*_eh_align_offset
(1)   50/   94BEC : A0                                          dc.b    (_eh_default)+_eh_return|.__align_flag ; add flag "_eh_align_offset" if the next byte is at odd offset ...
(1)   50/   94BED :                                             !align  2                                                                                               ; ... to tell Error handler to skip this byte, so it'll jump to ...
(1)   50/   94BEE : 4EF9 0009 5A18                              jmp             MDDBG__ErrorHandler_PagesController     ; ... extensions controller
(1)   51/   94BF4 :                     
(1)   52/   94BF4 :                     Line1010Emu:
(1)   53/   94BF4 : (MACRO)              	__ErrorMessage "LINE 1010 EMULATOR", _eh_default
(1)   53/   94BF4 :  (MACRO-2)                           __FSTRING_GenerateArgumentsCode "LINE 1010 EMULATOR"
(1)   53/   94BF4 :                     
(1)   53/   94BF4 : =$FFFFFFFFFFFFFFFF           .__pos: set     strstr("LINE 1010 EMULATOR","%<")             ; token position
(1)   53/   94BF4 : =$0                          .__sp:  set             0                                               ; stack displacement
(1)   53/   94BF4 : ="LINE 1010 EMUL..           .__str: set             "LINE 1010 EMULATOR"
(1)   53/   94BF4 :                     
(1)   53/   94BF4 :                             ; Parse "LINE 1010 EMULATOR" itself
(1)   53/   94BF4 :                             while (.__pos>=0)
(1)   53/   94BF4 :                     
(1)   53/   94BF4 :                             ; Find the last occurance "%<" in the "LINE 1010 EMULATOR"
(1)   53/   94BF4 :                             while ( strstr(substr(.__str,.__pos+2,0),"%<")>=0 )
(1)   53/   94BF4 :                                             .__pos:         set             strstr(substr(.__str,.__pos+2,0),"%<")+.__pos+2
(1)   53/   94BF4 :                                     endm
(1)   53/   94BF4 :                                     .__substr:      set             substr(.__str,.__pos,0)
(1)   53/   94BF4 :                     
(1)   53/   94BF4 :                                     ; Retrive expression in brackets following % char
(1)   53/   94BF4 :                             .__endpos:      set             strstr(.__substr,">")
(1)   53/   94BF4 :                                     if (.__endpos<0) ; Fix bizzare AS bug as stsstr() fails to check the last character of "LINE 1010 EMULATOR"
(1)   53/   94BF4 :                                             .__endpos:      set             strlen(.__substr)-1
(1)   53/   94BF4 :                                     endif
(1)   53/   94BF4 :                             .__midpos:      set             strstr(substr(.__substr,5,0)," ")
(1)   53/   94BF4 :                             if ((.__midpos<0)||(.__midpos+5>.__endpos))
(1)   53/   94BF4 :                                             .__midpos:      set             .__endpos
(1)   53/   94BF4 :                                     else
(1)   53/   94BF4 :                                             .__midpos:      set             .__midpos+5
(1)   53/   94BF4 :                             endif
(1)   53/   94BF4 :                                     .__type:                set             substr(.__substr,2,2)   ; .type
(1)   53/   94BF4 :                     
(1)   53/   94BF4 :                                     ; Expression is an effective address (e.g. %(.w d0 hex) )
(1)   53/   94BF4 :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   53/   94BF4 :                                             .__operand:     set             substr(.__substr,5,.__midpos-5)                                         ; ea
(1)   53/   94BF4 :                                             .__param:       set             substr(.__substr,.__midpos+1,.__endpos-.__midpos-1)             ; param
(1)   53/   94BF4 :                     
(1)   53/   94BF4 :                                             if (.__type==".b")
(1)   53/   94BF4 :                                                     subq.w  #2, sp
(1)   53/   94BF4 :                                                     __FSTRING_PushArgument.b        .__operand,1(sp)
(1)   53/   94BF4 :                                                     .__sp:  set             .__sp+2
(1)   53/   94BF4 :                     
(1)   53/   94BF4 :                                             elseif (.__type==".w")
(1)   53/   94BF4 :                                                     __FSTRING_PushArgument.w        .__operand,-(sp)
(1)   53/   94BF4 :                                                     .__sp:  set             .__sp+2
(1)   53/   94BF4 :                     
(1)   53/   94BF4 :                                             elseif (.__type==".l")
(1)   53/   94BF4 :                                                     __FSTRING_PushArgument.l        .__operand,-(sp)
(1)   53/   94BF4 :                                                     .__sp:  set             .__sp+4
(1)   53/   94BF4 :                     
(1)   53/   94BF4 :                                             else
(1)   53/   94BF4 :                                                     error "Unrecognized type in "LINE 1010 EMULATOR" operand: \{.__type}"
(1)   53/   94BF4 :                                             endif
(1)   53/   94BF4 :                     
(1)   53/   94BF4 :                                     endif
(1)   53/   94BF4 :                     
(1)   53/   94BF4 :                                     ; Cut "LINE 1010 EMULATOR"
(1)   53/   94BF4 :                                     if (.__pos>0)
(1)   53/   94BF4 :                                             .__str: set             substr(.__str, 0, .__pos)
(1)   53/   94BF4 :                                             .__pos: set             strstr(.__str,"%<")
(1)   53/   94BF4 :                                     else
(1)   53/   94BF4 :                                             .__pos: set             -1
(1)   53/   94BF4 :                                     endif
(1)   53/   94BF4 :                     
(1)   53/   94BF4 :                             endm
(1)   53/   94BF4 :                     
(1)   53/   94BF4 : 4EB9 0009 4C52                      jsr             MDDBG__ErrorHandler
(1)   53/   94BFA :  (MACRO-2)                           __FSTRING_GenerateDecodedString "LINE 1010 EMULATOR"
(1)   53/   94BFA :                     
(1)   53/   94BFA : =$0                          .__lpos:        set             0               ; start position
(1)   53/   94BFA : =$FFFFFFFFFFFFFFFF           .__pos: set             strstr("LINE 1010 EMULATOR", "%<")
(1)   53/   94BFA :                     
(1)   53/   94BFA :                             while (.__pos>=0)
(1)   53/   94BFA :                     
(1)   53/   94BFA :                                     ; Write part of "LINE 1010 EMULATOR" before % token
(1)   53/   94BFA :                                     if (.__pos-.__lpos>0)
(1)   53/   94BFA :                                             dc.b    substr("LINE 1010 EMULATOR", .__lpos, .__pos-.__lpos)
(1)   53/   94BFA :                                     endif
(1)   53/   94BFA :                     
(1)   53/   94BFA :                                     ; Retrive expression in brakets following % char
(1)   53/   94BFA :                             .__endpos:      set             strstr(substr("LINE 1010 EMULATOR",.__pos+1,0),">")+.__pos+1 
(1)   53/   94BFA :                                     if (.__endpos<=.__pos) ; Fix bizzare AS bug as stsstr() fails to check the last character of "LINE 1010 EMULATOR"
(1)   53/   94BFA :                                             .__endpos:      set             strlen("LINE 1010 EMULATOR")-1
(1)   53/   94BFA :                                     endif
(1)   53/   94BFA :                             .__midpos:      set             strstr(substr("LINE 1010 EMULATOR",.__pos+5,0)," ")+.__pos+5
(1)   53/   94BFA :                             if ((.__midpos<.__pos+5)||(.__midpos>.__endpos))
(1)   53/   94BFA :                                             .__midpos:      set             .__endpos
(1)   53/   94BFA :                             endif
(1)   53/   94BFA :                                     .__type:                set             substr("LINE 1010 EMULATOR",.__pos+1+1,2)             ; .type
(1)   53/   94BFA :                     
(1)   53/   94BFA :                                     ; Expression is an effective address (e.g. %<.w d0 hex> )
(1)   53/   94BFA :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   53/   94BFA :                                             .__param:       set             substr("LINE 1010 EMULATOR",.__midpos+1,.__endpos-.__midpos-1)        ; param
(1)   53/   94BFA :                     
(1)   53/   94BFA :                                             ; Validate format setting ("param")
(1)   53/   94BFA :                                             if (strlen(.__param)<1)
(1)   53/   94BFA :                                                     .__param:       set             "hex"                   ; if param is ommited, set it to "hex"
(1)   53/   94BFA :                                             elseif (.__param=="signed")
(1)   53/   94BFA :                                                     .__param:       set             "hex+signed"    ; if param is "signed", correct it to "hex+signed"
(1)   53/   94BFA :                                             endif
(1)   53/   94BFA :                     
(1)   53/   94BFA :                                             if (val(.__param) < $80)
(1)   53/   94BFA :                                                     !error "Illegal operand format setting: \{.__param}. Expected hex, dec, bin, sym, str or their derivatives."
(1)   53/   94BFA :                                             endif
(1)   53/   94BFA :                     
(1)   53/   94BFA :                                             if (.__type==".b")
(1)   53/   94BFA :                                                     dc.b    val(.__param)
(1)   53/   94BFA :                                             elseif (.__type==".w")
(1)   53/   94BFA :                                                     dc.b    val(.__param)|1
(1)   53/   94BFA :                                             else
(1)   53/   94BFA :                                                     dc.b    val(.__param)|3
(1)   53/   94BFA :                                             endif
(1)   53/   94BFA :                     
(1)   53/   94BFA :                                     ; Expression is an inline constant (e.g. %<endl> )
(1)   53/   94BFA :                                     else
(1)   53/   94BFA :                                             dc.b    val(substr("LINE 1010 EMULATOR",.__pos+1+1,.__endpos-.__pos-2))
(1)   53/   94BFA :                                     endif
(1)   53/   94BFA :                     
(1)   53/   94BFA :                                     .__lpos:        set             .__endpos+1
(1)   53/   94BFA :                                     if (strstr(substr("LINE 1010 EMULATOR",.__pos+1,0),"%<")>=0)
(1)   53/   94BFA :                                             .__pos: set             strstr(substr("LINE 1010 EMULATOR",.__pos+1,0), "%<")+.__pos+1
(1)   53/   94BFA :                                     else
(1)   53/   94BFA :                                             .__pos: set             -1
(1)   53/   94BFA :                                     endif
(1)   53/   94BFA :                     
(1)   53/   94BFA :                             endm
(1)   53/   94BFA :                     
(1)   53/   94BFA :                             ; Write part of "LINE 1010 EMULATOR" before the end
(1)   53/   94BFA : 4C49 4E45 2031              dc.b    substr("LINE 1010 EMULATOR", .__lpos, 0), 0
            94C00 : 3031 3020 454D 
            94C06 : 554C 4154 4F52 00 
(1)   53/   94C0D :                     
(1)   53/   94C0D :                     
(1)   53/   94C0D : =$0                                  .__align_flag: set (((*)&1)!1)*_eh_align_offset
(1)   53/   94C0D : 20                                          dc.b    (_eh_default)+_eh_return|.__align_flag ; add flag "_eh_align_offset" if the next byte is at odd offset ...
(1)   53/   94C0E :                                             !align  2                                                                                               ; ... to tell Error handler to skip this byte, so it'll jump to ...
(1)   53/   94C0E : 4EF9 0009 5A18                              jmp             MDDBG__ErrorHandler_PagesController     ; ... extensions controller
(1)   54/   94C14 :                     
(1)   55/   94C14 :                     Line1111Emu:
(1)   56/   94C14 : (MACRO)              	__ErrorMessage "LINE 1111 EMULATOR", _eh_default
(1)   56/   94C14 :  (MACRO-2)                           __FSTRING_GenerateArgumentsCode "LINE 1111 EMULATOR"
(1)   56/   94C14 :                     
(1)   56/   94C14 : =$FFFFFFFFFFFFFFFF           .__pos: set     strstr("LINE 1111 EMULATOR","%<")             ; token position
(1)   56/   94C14 : =$0                          .__sp:  set             0                                               ; stack displacement
(1)   56/   94C14 : ="LINE 1111 EMUL..           .__str: set             "LINE 1111 EMULATOR"
(1)   56/   94C14 :                     
(1)   56/   94C14 :                             ; Parse "LINE 1111 EMULATOR" itself
(1)   56/   94C14 :                             while (.__pos>=0)
(1)   56/   94C14 :                     
(1)   56/   94C14 :                             ; Find the last occurance "%<" in the "LINE 1111 EMULATOR"
(1)   56/   94C14 :                             while ( strstr(substr(.__str,.__pos+2,0),"%<")>=0 )
(1)   56/   94C14 :                                             .__pos:         set             strstr(substr(.__str,.__pos+2,0),"%<")+.__pos+2
(1)   56/   94C14 :                                     endm
(1)   56/   94C14 :                                     .__substr:      set             substr(.__str,.__pos,0)
(1)   56/   94C14 :                     
(1)   56/   94C14 :                                     ; Retrive expression in brackets following % char
(1)   56/   94C14 :                             .__endpos:      set             strstr(.__substr,">")
(1)   56/   94C14 :                                     if (.__endpos<0) ; Fix bizzare AS bug as stsstr() fails to check the last character of "LINE 1111 EMULATOR"
(1)   56/   94C14 :                                             .__endpos:      set             strlen(.__substr)-1
(1)   56/   94C14 :                                     endif
(1)   56/   94C14 :                             .__midpos:      set             strstr(substr(.__substr,5,0)," ")
(1)   56/   94C14 :                             if ((.__midpos<0)||(.__midpos+5>.__endpos))
(1)   56/   94C14 :                                             .__midpos:      set             .__endpos
(1)   56/   94C14 :                                     else
(1)   56/   94C14 :                                             .__midpos:      set             .__midpos+5
(1)   56/   94C14 :                             endif
(1)   56/   94C14 :                                     .__type:                set             substr(.__substr,2,2)   ; .type
(1)   56/   94C14 :                     
(1)   56/   94C14 :                                     ; Expression is an effective address (e.g. %(.w d0 hex) )
(1)   56/   94C14 :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   56/   94C14 :                                             .__operand:     set             substr(.__substr,5,.__midpos-5)                                         ; ea
(1)   56/   94C14 :                                             .__param:       set             substr(.__substr,.__midpos+1,.__endpos-.__midpos-1)             ; param
(1)   56/   94C14 :                     
(1)   56/   94C14 :                                             if (.__type==".b")
(1)   56/   94C14 :                                                     subq.w  #2, sp
(1)   56/   94C14 :                                                     __FSTRING_PushArgument.b        .__operand,1(sp)
(1)   56/   94C14 :                                                     .__sp:  set             .__sp+2
(1)   56/   94C14 :                     
(1)   56/   94C14 :                                             elseif (.__type==".w")
(1)   56/   94C14 :                                                     __FSTRING_PushArgument.w        .__operand,-(sp)
(1)   56/   94C14 :                                                     .__sp:  set             .__sp+2
(1)   56/   94C14 :                     
(1)   56/   94C14 :                                             elseif (.__type==".l")
(1)   56/   94C14 :                                                     __FSTRING_PushArgument.l        .__operand,-(sp)
(1)   56/   94C14 :                                                     .__sp:  set             .__sp+4
(1)   56/   94C14 :                     
(1)   56/   94C14 :                                             else
(1)   56/   94C14 :                                                     error "Unrecognized type in "LINE 1111 EMULATOR" operand: \{.__type}"
(1)   56/   94C14 :                                             endif
(1)   56/   94C14 :                     
(1)   56/   94C14 :                                     endif
(1)   56/   94C14 :                     
(1)   56/   94C14 :                                     ; Cut "LINE 1111 EMULATOR"
(1)   56/   94C14 :                                     if (.__pos>0)
(1)   56/   94C14 :                                             .__str: set             substr(.__str, 0, .__pos)
(1)   56/   94C14 :                                             .__pos: set             strstr(.__str,"%<")
(1)   56/   94C14 :                                     else
(1)   56/   94C14 :                                             .__pos: set             -1
(1)   56/   94C14 :                                     endif
(1)   56/   94C14 :                     
(1)   56/   94C14 :                             endm
(1)   56/   94C14 :                     
(1)   56/   94C14 : 4EB9 0009 4C52                      jsr             MDDBG__ErrorHandler
(1)   56/   94C1A :  (MACRO-2)                           __FSTRING_GenerateDecodedString "LINE 1111 EMULATOR"
(1)   56/   94C1A :                     
(1)   56/   94C1A : =$0                          .__lpos:        set             0               ; start position
(1)   56/   94C1A : =$FFFFFFFFFFFFFFFF           .__pos: set             strstr("LINE 1111 EMULATOR", "%<")
(1)   56/   94C1A :                     
(1)   56/   94C1A :                             while (.__pos>=0)
(1)   56/   94C1A :                     
(1)   56/   94C1A :                                     ; Write part of "LINE 1111 EMULATOR" before % token
(1)   56/   94C1A :                                     if (.__pos-.__lpos>0)
(1)   56/   94C1A :                                             dc.b    substr("LINE 1111 EMULATOR", .__lpos, .__pos-.__lpos)
(1)   56/   94C1A :                                     endif
(1)   56/   94C1A :                     
(1)   56/   94C1A :                                     ; Retrive expression in brakets following % char
(1)   56/   94C1A :                             .__endpos:      set             strstr(substr("LINE 1111 EMULATOR",.__pos+1,0),">")+.__pos+1 
(1)   56/   94C1A :                                     if (.__endpos<=.__pos) ; Fix bizzare AS bug as stsstr() fails to check the last character of "LINE 1111 EMULATOR"
(1)   56/   94C1A :                                             .__endpos:      set             strlen("LINE 1111 EMULATOR")-1
(1)   56/   94C1A :                                     endif
(1)   56/   94C1A :                             .__midpos:      set             strstr(substr("LINE 1111 EMULATOR",.__pos+5,0)," ")+.__pos+5
(1)   56/   94C1A :                             if ((.__midpos<.__pos+5)||(.__midpos>.__endpos))
(1)   56/   94C1A :                                             .__midpos:      set             .__endpos
(1)   56/   94C1A :                             endif
(1)   56/   94C1A :                                     .__type:                set             substr("LINE 1111 EMULATOR",.__pos+1+1,2)             ; .type
(1)   56/   94C1A :                     
(1)   56/   94C1A :                                     ; Expression is an effective address (e.g. %<.w d0 hex> )
(1)   56/   94C1A :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   56/   94C1A :                                             .__param:       set             substr("LINE 1111 EMULATOR",.__midpos+1,.__endpos-.__midpos-1)        ; param
(1)   56/   94C1A :                     
(1)   56/   94C1A :                                             ; Validate format setting ("param")
(1)   56/   94C1A :                                             if (strlen(.__param)<1)
(1)   56/   94C1A :                                                     .__param:       set             "hex"                   ; if param is ommited, set it to "hex"
(1)   56/   94C1A :                                             elseif (.__param=="signed")
(1)   56/   94C1A :                                                     .__param:       set             "hex+signed"    ; if param is "signed", correct it to "hex+signed"
(1)   56/   94C1A :                                             endif
(1)   56/   94C1A :                     
(1)   56/   94C1A :                                             if (val(.__param) < $80)
(1)   56/   94C1A :                                                     !error "Illegal operand format setting: \{.__param}. Expected hex, dec, bin, sym, str or their derivatives."
(1)   56/   94C1A :                                             endif
(1)   56/   94C1A :                     
(1)   56/   94C1A :                                             if (.__type==".b")
(1)   56/   94C1A :                                                     dc.b    val(.__param)
(1)   56/   94C1A :                                             elseif (.__type==".w")
(1)   56/   94C1A :                                                     dc.b    val(.__param)|1
(1)   56/   94C1A :                                             else
(1)   56/   94C1A :                                                     dc.b    val(.__param)|3
(1)   56/   94C1A :                                             endif
(1)   56/   94C1A :                     
(1)   56/   94C1A :                                     ; Expression is an inline constant (e.g. %<endl> )
(1)   56/   94C1A :                                     else
(1)   56/   94C1A :                                             dc.b    val(substr("LINE 1111 EMULATOR",.__pos+1+1,.__endpos-.__pos-2))
(1)   56/   94C1A :                                     endif
(1)   56/   94C1A :                     
(1)   56/   94C1A :                                     .__lpos:        set             .__endpos+1
(1)   56/   94C1A :                                     if (strstr(substr("LINE 1111 EMULATOR",.__pos+1,0),"%<")>=0)
(1)   56/   94C1A :                                             .__pos: set             strstr(substr("LINE 1111 EMULATOR",.__pos+1,0), "%<")+.__pos+1
(1)   56/   94C1A :                                     else
(1)   56/   94C1A :                                             .__pos: set             -1
(1)   56/   94C1A :                                     endif
(1)   56/   94C1A :                     
(1)   56/   94C1A :                             endm
(1)   56/   94C1A :                     
(1)   56/   94C1A :                             ; Write part of "LINE 1111 EMULATOR" before the end
(1)   56/   94C1A : 4C49 4E45 2031              dc.b    substr("LINE 1111 EMULATOR", .__lpos, 0), 0
            94C20 : 3131 3120 454D 
            94C26 : 554C 4154 4F52 00 
(1)   56/   94C2D :                     
(1)   56/   94C2D :                     
(1)   56/   94C2D : =$0                                  .__align_flag: set (((*)&1)!1)*_eh_align_offset
(1)   56/   94C2D : 20                                          dc.b    (_eh_default)+_eh_return|.__align_flag ; add flag "_eh_align_offset" if the next byte is at odd offset ...
(1)   56/   94C2E :                                             !align  2                                                                                               ; ... to tell Error handler to skip this byte, so it'll jump to ...
(1)   56/   94C2E : 4EF9 0009 5A18                              jmp             MDDBG__ErrorHandler_PagesController     ; ... extensions controller
(1)   57/   94C34 :                     
(1)   58/   94C34 :                     ErrorExcept:
(1)   59/   94C34 : (MACRO)              	__ErrorMessage "ERROR EXCEPTION", _eh_default
(1)   59/   94C34 :  (MACRO-2)                           __FSTRING_GenerateArgumentsCode "ERROR EXCEPTION"
(1)   59/   94C34 :                     
(1)   59/   94C34 : =$FFFFFFFFFFFFFFFF           .__pos: set     strstr("ERROR EXCEPTION","%<")             ; token position
(1)   59/   94C34 : =$0                          .__sp:  set             0                                               ; stack displacement
(1)   59/   94C34 : ="ERROR EXCEPTION"           .__str: set             "ERROR EXCEPTION"
(1)   59/   94C34 :                     
(1)   59/   94C34 :                             ; Parse "ERROR EXCEPTION" itself
(1)   59/   94C34 :                             while (.__pos>=0)
(1)   59/   94C34 :                     
(1)   59/   94C34 :                             ; Find the last occurance "%<" in the "ERROR EXCEPTION"
(1)   59/   94C34 :                             while ( strstr(substr(.__str,.__pos+2,0),"%<")>=0 )
(1)   59/   94C34 :                                             .__pos:         set             strstr(substr(.__str,.__pos+2,0),"%<")+.__pos+2
(1)   59/   94C34 :                                     endm
(1)   59/   94C34 :                                     .__substr:      set             substr(.__str,.__pos,0)
(1)   59/   94C34 :                     
(1)   59/   94C34 :                                     ; Retrive expression in brackets following % char
(1)   59/   94C34 :                             .__endpos:      set             strstr(.__substr,">")
(1)   59/   94C34 :                                     if (.__endpos<0) ; Fix bizzare AS bug as stsstr() fails to check the last character of "ERROR EXCEPTION"
(1)   59/   94C34 :                                             .__endpos:      set             strlen(.__substr)-1
(1)   59/   94C34 :                                     endif
(1)   59/   94C34 :                             .__midpos:      set             strstr(substr(.__substr,5,0)," ")
(1)   59/   94C34 :                             if ((.__midpos<0)||(.__midpos+5>.__endpos))
(1)   59/   94C34 :                                             .__midpos:      set             .__endpos
(1)   59/   94C34 :                                     else
(1)   59/   94C34 :                                             .__midpos:      set             .__midpos+5
(1)   59/   94C34 :                             endif
(1)   59/   94C34 :                                     .__type:                set             substr(.__substr,2,2)   ; .type
(1)   59/   94C34 :                     
(1)   59/   94C34 :                                     ; Expression is an effective address (e.g. %(.w d0 hex) )
(1)   59/   94C34 :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   59/   94C34 :                                             .__operand:     set             substr(.__substr,5,.__midpos-5)                                         ; ea
(1)   59/   94C34 :                                             .__param:       set             substr(.__substr,.__midpos+1,.__endpos-.__midpos-1)             ; param
(1)   59/   94C34 :                     
(1)   59/   94C34 :                                             if (.__type==".b")
(1)   59/   94C34 :                                                     subq.w  #2, sp
(1)   59/   94C34 :                                                     __FSTRING_PushArgument.b        .__operand,1(sp)
(1)   59/   94C34 :                                                     .__sp:  set             .__sp+2
(1)   59/   94C34 :                     
(1)   59/   94C34 :                                             elseif (.__type==".w")
(1)   59/   94C34 :                                                     __FSTRING_PushArgument.w        .__operand,-(sp)
(1)   59/   94C34 :                                                     .__sp:  set             .__sp+2
(1)   59/   94C34 :                     
(1)   59/   94C34 :                                             elseif (.__type==".l")
(1)   59/   94C34 :                                                     __FSTRING_PushArgument.l        .__operand,-(sp)
(1)   59/   94C34 :                                                     .__sp:  set             .__sp+4
(1)   59/   94C34 :                     
(1)   59/   94C34 :                                             else
(1)   59/   94C34 :                                                     error "Unrecognized type in "ERROR EXCEPTION" operand: \{.__type}"
(1)   59/   94C34 :                                             endif
(1)   59/   94C34 :                     
(1)   59/   94C34 :                                     endif
(1)   59/   94C34 :                     
(1)   59/   94C34 :                                     ; Cut "ERROR EXCEPTION"
(1)   59/   94C34 :                                     if (.__pos>0)
(1)   59/   94C34 :                                             .__str: set             substr(.__str, 0, .__pos)
(1)   59/   94C34 :                                             .__pos: set             strstr(.__str,"%<")
(1)   59/   94C34 :                                     else
(1)   59/   94C34 :                                             .__pos: set             -1
(1)   59/   94C34 :                                     endif
(1)   59/   94C34 :                     
(1)   59/   94C34 :                             endm
(1)   59/   94C34 :                     
(1)   59/   94C34 : 4EB9 0009 4C52                      jsr             MDDBG__ErrorHandler
(1)   59/   94C3A :  (MACRO-2)                           __FSTRING_GenerateDecodedString "ERROR EXCEPTION"
(1)   59/   94C3A :                     
(1)   59/   94C3A : =$0                          .__lpos:        set             0               ; start position
(1)   59/   94C3A : =$FFFFFFFFFFFFFFFF           .__pos: set             strstr("ERROR EXCEPTION", "%<")
(1)   59/   94C3A :                     
(1)   59/   94C3A :                             while (.__pos>=0)
(1)   59/   94C3A :                     
(1)   59/   94C3A :                                     ; Write part of "ERROR EXCEPTION" before % token
(1)   59/   94C3A :                                     if (.__pos-.__lpos>0)
(1)   59/   94C3A :                                             dc.b    substr("ERROR EXCEPTION", .__lpos, .__pos-.__lpos)
(1)   59/   94C3A :                                     endif
(1)   59/   94C3A :                     
(1)   59/   94C3A :                                     ; Retrive expression in brakets following % char
(1)   59/   94C3A :                             .__endpos:      set             strstr(substr("ERROR EXCEPTION",.__pos+1,0),">")+.__pos+1 
(1)   59/   94C3A :                                     if (.__endpos<=.__pos) ; Fix bizzare AS bug as stsstr() fails to check the last character of "ERROR EXCEPTION"
(1)   59/   94C3A :                                             .__endpos:      set             strlen("ERROR EXCEPTION")-1
(1)   59/   94C3A :                                     endif
(1)   59/   94C3A :                             .__midpos:      set             strstr(substr("ERROR EXCEPTION",.__pos+5,0)," ")+.__pos+5
(1)   59/   94C3A :                             if ((.__midpos<.__pos+5)||(.__midpos>.__endpos))
(1)   59/   94C3A :                                             .__midpos:      set             .__endpos
(1)   59/   94C3A :                             endif
(1)   59/   94C3A :                                     .__type:                set             substr("ERROR EXCEPTION",.__pos+1+1,2)             ; .type
(1)   59/   94C3A :                     
(1)   59/   94C3A :                                     ; Expression is an effective address (e.g. %<.w d0 hex> )
(1)   59/   94C3A :                                     if ((strlen(.__type)==2)&&(substr(.__type,0,1)=="."))
(1)   59/   94C3A :                                             .__param:       set             substr("ERROR EXCEPTION",.__midpos+1,.__endpos-.__midpos-1)        ; param
(1)   59/   94C3A :                     
(1)   59/   94C3A :                                             ; Validate format setting ("param")
(1)   59/   94C3A :                                             if (strlen(.__param)<1)
(1)   59/   94C3A :                                                     .__param:       set             "hex"                   ; if param is ommited, set it to "hex"
(1)   59/   94C3A :                                             elseif (.__param=="signed")
(1)   59/   94C3A :                                                     .__param:       set             "hex+signed"    ; if param is "signed", correct it to "hex+signed"
(1)   59/   94C3A :                                             endif
(1)   59/   94C3A :                     
(1)   59/   94C3A :                                             if (val(.__param) < $80)
(1)   59/   94C3A :                                                     !error "Illegal operand format setting: \{.__param}. Expected hex, dec, bin, sym, str or their derivatives."
(1)   59/   94C3A :                                             endif
(1)   59/   94C3A :                     
(1)   59/   94C3A :                                             if (.__type==".b")
(1)   59/   94C3A :                                                     dc.b    val(.__param)
(1)   59/   94C3A :                                             elseif (.__type==".w")
(1)   59/   94C3A :                                                     dc.b    val(.__param)|1
(1)   59/   94C3A :                                             else
(1)   59/   94C3A :                                                     dc.b    val(.__param)|3
(1)   59/   94C3A :                                             endif
(1)   59/   94C3A :                     
(1)   59/   94C3A :                                     ; Expression is an inline constant (e.g. %<endl> )
(1)   59/   94C3A :                                     else
(1)   59/   94C3A :                                             dc.b    val(substr("ERROR EXCEPTION",.__pos+1+1,.__endpos-.__pos-2))
(1)   59/   94C3A :                                     endif
(1)   59/   94C3A :                     
(1)   59/   94C3A :                                     .__lpos:        set             .__endpos+1
(1)   59/   94C3A :                                     if (strstr(substr("ERROR EXCEPTION",.__pos+1,0),"%<")>=0)
(1)   59/   94C3A :                                             .__pos: set             strstr(substr("ERROR EXCEPTION",.__pos+1,0), "%<")+.__pos+1
(1)   59/   94C3A :                                     else
(1)   59/   94C3A :                                             .__pos: set             -1
(1)   59/   94C3A :                                     endif
(1)   59/   94C3A :                     
(1)   59/   94C3A :                             endm
(1)   59/   94C3A :                     
(1)   59/   94C3A :                             ; Write part of "ERROR EXCEPTION" before the end
(1)   59/   94C3A : 4552 524F 5220              dc.b    substr("ERROR EXCEPTION", .__lpos, 0), 0
            94C40 : 4558 4345 5054 
            94C46 : 494F 4E00          
(1)   59/   94C4A :                     
(1)   59/   94C4A :                     
(1)   59/   94C4A : =$80                                 .__align_flag: set (((*)&1)!1)*_eh_align_offset
(1)   59/   94C4A : A0                                          dc.b    (_eh_default)+_eh_return|.__align_flag ; add flag "_eh_align_offset" if the next byte is at odd offset ...
(1)   59/   94C4B :                                             !align  2                                                                                               ; ... to tell Error handler to skip this byte, so it'll jump to ...
(1)   59/   94C4C : 4EF9 0009 5A18                              jmp             MDDBG__ErrorHandler_PagesController     ; ... extensions controller
(1)   60/   94C52 :                     
(1)   61/   94C52 :                     
(1)   62/   94C52 :                     ; ---------------------------------------------------------------
(1)   63/   94C52 :                     ; MD Debugger blob
(1)   64/   94C52 :                     ; ---------------------------------------------------------------
(1)   65/   94C52 :                     
(1)   66/   94C52 :                     ErrorHandler:
(1)   67/   94C52 :                     
(1)   68/   94C52 : 46FC 2700 4FEF      	dc.l	$46FC2700, $4FEFFFF0, $48E7FFFE, $4EBA0242, $49EF004C, $4E682F08, $47EF0040, $4EBA0124
            94C58 : FFF0 48E7 FFFE 
            94C5E : 4EBA 0242 49EF 
            94C64 : 004C 4E68 2F08 
            94C6A : 47EF 0040 4EBA 
            94C70 : 0124             
(1)   69/   94C72 : 41FA 02C4 4EBA      	dc.l	$41FA02C4, $4EBA0B6C, $225C45D4, $4EBA0C2A, $4EBA0AF2, $49D21C19, $6A025249, $47D10806
            94C78 : 0B6C 225C 45D4 
            94C7E : 4EBA 0C2A 4EBA 
            94C84 : 0AF2 49D2 1C19 
            94C8A : 6A02 5249 47D1 
            94C90 : 0806             
(1)   70/   94C92 : 0000 670E 41FA      	dc.l	$0000670E, $41FA02A7, $222C0002, $4EBA016A, $504C41FA, $02A4222C, $00024EBA, $015C0806
            94C98 : 02A7 222C 0002 
            94C9E : 4EBA 016A 504C 
            94CA4 : 41FA 02A4 222C 
            94CAA : 0002 4EBA 015C 
            94CB0 : 0806             
(1)   71/   94CB2 : 0002 6614 2278      	dc.l	$00026614, $22780000, $45EC0006, $4EBA01BC, $41FA0290, $4EBA0142, $4EBA0AAA, $08060006
            94CB8 : 0000 45EC 0006 
            94CBE : 4EBA 01BC 41FA 
            94CC4 : 0290 4EBA 0142 
            94CCA : 4EBA 0AAA 0806 
            94CD0 : 0006             
(1)   72/   94CD2 : 6600 00AA 45EF      	dc.l	$660000AA, $45EF0004, $4EBA0A74, $3F017003, $4EBA0A38, $303C6430, $7A074EBA, $0132321F
            94CD8 : 0004 4EBA 0A74 
            94CDE : 3F01 7003 4EBA 
            94CE4 : 0A38 303C 6430 
            94CEA : 7A07 4EBA 0132 
            94CF0 : 321F             
(1)   73/   94CF2 : 7011 4EBA 0A26      	dc.l	$70114EBA, $0A26303C, $61307A06, $4EBA0120, $303C7370, $7A002F0C, $45D74EBA, $0112584F
            94CF8 : 303C 6130 7A06 
            94CFE : 4EBA 0120 303C 
            94D04 : 7370 7A00 2F0C 
            94D0A : 45D7 4EBA 0112 
            94D10 : 584F             
(1)   74/   94D12 : 0806 0001 6714      	dc.l	$08060001, $671443FA, $025545D7, $4EBA0B8E, $43FA0256, $45D44EBA, $0B80584F, $4EBA0A20
            94D18 : 43FA 0255 45D7 
            94D1E : 4EBA 0B8E 43FA 
            94D24 : 0256 45D4 4EBA 
            94D2A : 0B80 584F 4EBA 
            94D30 : 0A20             
(1)   75/   94D32 : 5241 7001 4EBA      	dc.l	$52417001, $4EBA09E4, $20380078, $41FA0244, $4EBA010A, $20380070, $41FA0240, $4EBA00FE
            94D38 : 09E4 2038 0078 
            94D3E : 41FA 0244 4EBA 
            94D44 : 010A 2038 0070 
            94D4A : 41FA 0240 4EBA 
            94D50 : 00FE             
(1)   76/   94D52 : 4EBA 0A22 2278      	dc.l	$4EBA0A22, $22780000, $45D45389, $61404EBA, $09EE7A19, $9A416B0A, $61484EBA, $005A51CD
            94D58 : 0000 45D4 5389 
            94D5E : 6140 4EBA 09EE 
            94D64 : 7A19 9A41 6B0A 
            94D6A : 6148 4EBA 005A 
            94D70 : 51CD             
(1)   77/   94D72 : FFFA 0806 0005      	dc.l	$FFFA0806, $0005660A, $4E7160FC, $72004EBA, $0A222ECB, $4CDF7FFF, $487AFFEE, $2F2FFFC4
            94D78 : 660A 4E71 60FC 
            94D7E : 7200 4EBA 0A22 
            94D84 : 2ECB 4CDF 7FFF 
            94D8A : 487A FFEE 2F2F 
            94D90 : FFC4             
(1)   78/   94D92 : 4E75 43FA 015E      	dc.l	$4E7543FA, $015E45FA, $02084EFA, $08EE223C, $00FFFFFF, $2409C481, $2242240A, $C4812442
            94D98 : 45FA 0208 4EFA 
            94D9E : 08EE 223C 00FF 
            94DA4 : FFFF 2409 C481 
            94DAA : 2242 240A C481 
            94DB0 : 2442             
(1)   79/   94DB2 : 4E75 4FEF FFD0      	dc.l	$4E754FEF, $FFD041D7, $7EFF20FC, $28535029, $30FC3A20, $60184FEF, $FFD041D7, $7EFF30FC
            94DB8 : 41D7 7EFF 20FC 
            94DBE : 2853 5029 30FC 
            94DC4 : 3A20 6018 4FEF 
            94DCA : FFD0 41D7 7EFF 
            94DD0 : 30FC             
(1)   80/   94DD2 : 202B 320A 924C      	dc.l	$202B320A, $924C4EBA, $05BA30FC, $3A207005, $72ECB5C9, $650272EE, $10C1321A, $4EBA05C2
            94DD8 : 4EBA 05BA 30FC 
            94DDE : 3A20 7005 72EC 
            94DE4 : B5C9 6502 72EE 
            94DEA : 10C1 321A 4EBA 
            94DF0 : 05C2             
(1)   81/   94DF2 : 10FC 0020 51C8      	dc.l	$10FC0020, $51C8FFEA, $421841D7, $72004EBA, $09DC4FEF, $00304E75, $4EBA09D8, $2F012F01
            94DF8 : FFEA 4218 41D7 
            94DFE : 7200 4EBA 09DC 
            94E04 : 4FEF 0030 4E75 
            94E0A : 4EBA 09D8 2F01 
            94E10 : 2F01             
(1)   82/   94E12 : 45D7 43FA           	dc.l	$45D743FA
(1)   83/   94E16 : 0148                	dc.w	DEBUGGER__STR_OFFSET_SELECTOR-MDDBG__Error_DrawOffsetLocation__inj-2
(1)   84/   94E18 : 4EBA 0A90 504F      	dc.l	$4EBA0A90, $504F4E75, $4FEFFFF0, $7EFF41D7, $30C030FC, $3A2010FC, $00EC221A, $4EBA0574
            94E1E : 4E75 4FEF FFF0 
            94E24 : 7EFF 41D7 30C0 
            94E2A : 30FC 3A20 10FC 
            94E30 : 00EC 221A 4EBA 
            94E36 : 0574             
(1)   85/   94E38 : 4218 41D7 7200      	dc.l	$421841D7, $72004EBA, $099E5240, $51CDFFE0, $4FEF0010, $4E752200, $48414601, $66F62440
            94E3E : 4EBA 099E 5240 
            94E44 : 51CD FFE0 4FEF 
            94E4A : 0010 4E75 2200 
            94E50 : 4841 4601 66F6 
            94E56 : 2440             
(1)   86/   94E58 : 0C5A 4EF9 6604      	dc.l	$0C5A4EF9, $66042212, $60A80C6A, $4EF8FFFE, $66063212, $48C1609A, $4EBA0972, $41FA011E
            94E5E : 2212 60A8 0C6A 
            94E64 : 4EF8 FFFE 6606 
            94E6A : 3212 48C1 609A 
            94E70 : 4EBA 0972 41FA 
            94E76 : 011E             
(1)   87/   94E78 : 4EFA 0966 5989      	dc.l	$4EFA0966, $59894EBA, $FF20B3CA, $650C0C52, $0040650A, $548AB3CA, $64F47200, $4E752212
            94E7E : 4EBA FF20 B3CA 
            94E84 : 650C 0C52 0040 
            94E8A : 650A 548A B3CA 
            94E90 : 64F4 7200 4E75 
            94E96 : 2212             
(1)   88/   94E98 : 67F2 0801 0000      	dc.l	$67F20801, $000066EC, $4E754BF9, $00C00004, $4DEDFFFC, $44D569FC, $41FA0026, $30186A04
            94E9E : 66EC 4E75 4BF9 
            94EA4 : 00C0 0004 4DED 
            94EAA : FFFC 44D5 69FC 
            94EB0 : 41FA 0026 3018 
            94EB6 : 6A04             
(1)   89/   94EB8 : 3A80 60F8 7000      	dc.l	$3A8060F8, $70002ABC, $40000000, $2C802ABC, $40000010, $2C802ABC, $C0000000, $3C804E75
            94EBE : 2ABC 4000 0000 
            94EC4 : 2C80 2ABC 4000 
            94ECA : 0010 2C80 2ABC 
            94ED0 : C000 0000 3C80 
            94ED6 : 4E75             
(1)   90/   94ED8 : 8004 8134 8500      	dc.l	$80048134, $85008700, $8B008C81, $8D008F02, $90119100, $92008220, $84040000, $44000000
            94EDE : 8700 8B00 8C81 
            94EE4 : 8D00 8F02 9011 
            94EEA : 9100 9200 8220 
            94EF0 : 8404 0000 4400 
            94EF6 : 0000             
(1)   91/   94EF8 : 0000 0001 0010      	dc.l	$00000001, $00100011, $01000101, $01100111, $10001001, $10101011, $11001101, $11101111
            94EFE : 0011 0100 0101 
            94F04 : 0110 0111 1000 
            94F0A : 1001 1010 1011 
            94F10 : 1100 1101 1110 
            94F16 : 1111             
(1)   92/   94F18 : FFFF 0EEE FFF2      	dc.l	$FFFF0EEE, $FFF200CE, $FFF20EEA, $FFF20E86, $FFF24000, $00020028, $00280000, $008000FF
            94F1E : 00CE FFF2 0EEA 
            94F24 : FFF2 0E86 FFF2 
            94F2A : 4000 0002 0028 
            94F30 : 0028 0000 0080 
            94F36 : 00FF             
(1)   93/   94F38 : EAE0 FA01 F026      	dc.l	$EAE0FA01, $F02600EA, $41646472, $6573733A, $2000EA4F, $66667365, $743A2000, $EA43616C
            94F3E : 00EA 4164 6472 
            94F44 : 6573 733A 2000 
            94F4A : EA4F 6666 7365 
            94F50 : 743A 2000 EA43 
            94F56 : 616C             
(1)   94/   94F58 : 6C65 723A 2000      	dc.l	$6C65723A, $2000EC80, $8120E8BF, $ECC800EC, $8320E8BF, $ECC800FA, $10E87573, $703A20EC
            94F5E : EC80 8120 E8BF 
            94F64 : ECC8 00EC 8320 
            94F6A : E8BF ECC8 00FA 
            94F70 : 10E8 7573 703A 
            94F76 : 20EC             
(1)   95/   94F78 : 8300 FA03 E873      	dc.l	$8300FA03, $E873723A, $20EC8100, $EA56496E, $743A2000, $EA48496E, $743A2000, $E83C756E
            94F7E : 723A 20EC 8100 
            94F84 : EA56 496E 743A 
            94F8A : 2000 EA48 496E 
            94F90 : 743A 2000 E83C 
            94F96 : 756E             
(1)   96/   94F98 : 6465 6669 6E65      	dc.l	$64656669, $6E65643E, $000002F7, $00000000, $00000000, $183C3C18, $18001800, $6C6C6C00
            94F9E : 643E 0000 02F7 
            94FA4 : 0000 0000 0000 
            94FAA : 0000 183C 3C18 
            94FB0 : 1800 1800 6C6C 
            94FB6 : 6C00             
(1)   97/   94FB8 : 0000 0000 6C6C      	dc.l	$00000000, $6C6CFE6C, $FE6C6C00, $187EC07C, $06FC1800, $00C60C18, $3060C600, $386C3876
            94FBE : FE6C FE6C 6C00 
            94FC4 : 187E C07C 06FC 
            94FCA : 1800 00C6 0C18 
            94FD0 : 3060 C600 386C 
            94FD6 : 3876             
(1)   98/   94FD8 : CCCC 7600 1818      	dc.l	$CCCC7600, $18183000, $00000000, $18306060, $60301800, $60301818, $18306000, $00EE7CFE
            94FDE : 3000 0000 0000 
            94FE4 : 1830 6060 6030 
            94FEA : 1800 6030 1818 
            94FF0 : 1830 6000 00EE 
            94FF6 : 7CFE             
(1)   99/   94FF8 : 7CEE 0000 0018      	dc.l	$7CEE0000, $0018187E, $18180000, $00000000, $18183000, $000000FE, $00000000, $00000000
            94FFE : 187E 1818 0000 
            95004 : 0000 0000 1818 
            9500A : 3000 0000 00FE 
            95010 : 0000 0000 0000 
            95016 : 0000             
(1)  100/   95018 : 0038 3800 060C      	dc.l	$00383800, $060C1830, $60C08000, $7CC6CEDE, $F6E67C00, $18781818, $18187E00, $7CC60C18
            9501E : 1830 60C0 8000 
            95024 : 7CC6 CEDE F6E6 
            9502A : 7C00 1878 1818 
            95030 : 1818 7E00 7CC6 
            95036 : 0C18             
(1)  101/   95038 : 3066 FE00 7CC6      	dc.l	$3066FE00, $7CC6063C, $06C67C00, $0C1C3C6C, $FE0C0C00, $FEC0FC06, $06C67C00, $7CC6C0FC
            9503E : 063C 06C6 7C00 
            95044 : 0C1C 3C6C FE0C 
            9504A : 0C00 FEC0 FC06 
            95050 : 06C6 7C00 7CC6 
            95056 : C0FC             
(1)  102/   95058 : C6C6 7C00 FEC6      	dc.l	$C6C67C00, $FEC6060C, $18181800, $7CC6C67C, $C6C67C00, $7CC6C67E, $06C67C00, $001C1C00
            9505E : 060C 1818 1800 
            95064 : 7CC6 C67C C6C6 
            9506A : 7C00 7CC6 C67E 
            95070 : 06C6 7C00 001C 
            95076 : 1C00             
(1)  103/   95078 : 001C 1C00 0018      	dc.l	$001C1C00, $00181800, $00181830, $0C183060, $30180C00, $0000FE00, $00FE0000, $6030180C
            9507E : 1800 0018 1830 
            95084 : 0C18 3060 3018 
            9508A : 0C00 0000 FE00 
            95090 : 00FE 0000 6030 
            95096 : 180C             
(1)  104/   95098 : 1830 6000 7CC6      	dc.l	$18306000, $7CC6060C, $18001800, $7CC6C6DE, $DCC07E00, $386CC6C6, $FEC6C600, $FC66667C
            9509E : 060C 1800 1800 
            950A4 : 7CC6 C6DE DCC0 
            950AA : 7E00 386C C6C6 
            950B0 : FEC6 C600 FC66 
            950B6 : 667C             
(1)  105/   950B8 : 6666 FC00 3C66      	dc.l	$6666FC00, $3C66C0C0, $C0663C00, $F86C6666, $666CF800, $FEC2C0F8, $C0C2FE00, $FE62607C
            950BE : C0C0 C066 3C00 
            950C4 : F86C 6666 666C 
            950CA : F800 FEC2 C0F8 
            950D0 : C0C2 FE00 FE62 
            950D6 : 607C             
(1)  106/   950D8 : 6060 F000 7CC6      	dc.l	$6060F000, $7CC6C0C0, $DEC67C00, $C6C6C6FE, $C6C6C600, $3C181818, $18183C00, $3C181818
            950DE : C0C0 DEC6 7C00 
            950E4 : C6C6 C6FE C6C6 
            950EA : C600 3C18 1818 
            950F0 : 1818 3C00 3C18 
            950F6 : 1818             
(1)  107/   950F8 : D8D8 7000 C6CC      	dc.l	$D8D87000, $C6CCD8F0, $D8CCC600, $F0606060, $6062FE00, $C6EEFED6, $D6C6C600, $C6E6E6F6
            950FE : D8F0 D8CC C600 
            95104 : F060 6060 6062 
            9510A : FE00 C6EE FED6 
            95110 : D6C6 C600 C6E6 
            95116 : E6F6             
(1)  108/   95118 : DECE C600 7CC6      	dc.l	$DECEC600, $7CC6C6C6, $C6C67C00, $FC66667C, $6060F000, $7CC6C6C6, $C6D67C06, $FCC6C6FC
            9511E : C6C6 C6C6 7C00 
            95124 : FC66 667C 6060 
            9512A : F000 7CC6 C6C6 
            95130 : C6D6 7C06 FCC6 
            95136 : C6FC             
(1)  109/   95138 : D8CC C600 7CC6      	dc.l	$D8CCC600, $7CC6C07C, $06C67C00, $7E5A1818, $18183C00, $C6C6C6C6, $C6C67C00, $C6C6C6C6
            9513E : C07C 06C6 7C00 
            95144 : 7E5A 1818 1818 
            9514A : 3C00 C6C6 C6C6 
            95150 : C6C6 7C00 C6C6 
            95156 : C6C6             
(1)  110/   95158 : 6C38 1000 C6C6      	dc.l	$6C381000, $C6C6D6D6, $FEEEC600, $C66C3838, $386CC600, $6666663C, $18183C00, $FE860C18
            9515E : D6D6 FEEE C600 
            95164 : C66C 3838 386C 
            9516A : C600 6666 663C 
            95170 : 1818 3C00 FE86 
            95176 : 0C18             
(1)  111/   95178 : 3062 FE00 7C60      	dc.l	$3062FE00, $7C606060, $60607C00, $C0603018, $0C060200, $7C0C0C0C, $0C0C7C00, $10386CC6
            9517E : 6060 6060 7C00 
            95184 : C060 3018 0C06 
            9518A : 0200 7C0C 0C0C 
            95190 : 0C0C 7C00 1038 
            95196 : 6CC6             
(1)  112/   95198 : 0000 0000 0000      	dc.l	$00000000, $00000000, $000000FF, $30301800, $00000000, $0000780C, $7CCC7E00, $E0607C66
            9519E : 0000 0000 00FF 
            951A4 : 3030 1800 0000 
            951AA : 0000 0000 780C 
            951B0 : 7CCC 7E00 E060 
            951B6 : 7C66             
(1)  113/   951B8 : 6666 FC00 0000      	dc.l	$6666FC00, $00007CC6, $C0C67C00, $1C0C7CCC, $CCCC7E00, $00007CC6, $FEC07C00, $1C3630FC
            951BE : 7CC6 C0C6 7C00 
            951C4 : 1C0C 7CCC CCCC 
            951CA : 7E00 0000 7CC6 
            951D0 : FEC0 7C00 1C36 
            951D6 : 30FC             
(1)  114/   951D8 : 3030 7800 0000      	dc.l	$30307800, $000076CE, $C67E067C, $E0607C66, $6666E600, $18003818, $18183C00, $0C001C0C
            951DE : 76CE C67E 067C 
            951E4 : E060 7C66 6666 
            951EA : E600 1800 3818 
            951F0 : 1818 3C00 0C00 
            951F6 : 1C0C             
(1)  115/   951F8 : 0C0C CC78 E060      	dc.l	$0C0CCC78, $E060666C, $786CE600, $18181818, $18181C00, $00006CFE, $D6D6C600, $0000DC66
            951FE : 666C 786C E600 
            95204 : 1818 1818 1818 
            9520A : 1C00 0000 6CFE 
            95210 : D6D6 C600 0000 
            95216 : DC66             
(1)  116/   95218 : 6666 6600 0000      	dc.l	$66666600, $00007CC6, $C6C67C00, $0000DC66, $667C60F0, $000076CC, $CC7C0C1E, $0000DC66
            9521E : 7CC6 C6C6 7C00 
            95224 : 0000 DC66 667C 
            9522A : 60F0 0000 76CC 
            95230 : CC7C 0C1E 0000 
            95236 : DC66             
(1)  117/   95238 : 6060 F000 0000      	dc.l	$6060F000, $00007CC0, $7C067C00, $3030FC30, $30361C00, $0000CCCC, $CCCC7600, $0000C6C6
            9523E : 7CC0 7C06 7C00 
            95244 : 3030 FC30 3036 
            9524A : 1C00 0000 CCCC 
            95250 : CCCC 7600 0000 
            95256 : C6C6             
(1)  118/   95258 : 6C38 1000 0000      	dc.l	$6C381000, $0000C6C6, $D6FE6C00, $0000C66C, $386CC600, $0000C6C6, $CE76067C, $0000FC98
            9525E : C6C6 D6FE 6C00 
            95264 : 0000 C66C 386C 
            9526A : C600 0000 C6C6 
            95270 : CE76 067C 0000 
            95276 : FC98             
(1)  119/   95278 : 3064 FC00 0E18      	dc.l	$3064FC00, $0E181870, $18180E00, $18181800, $18181800, $7018180E, $18187000, $76DC0000
            9527E : 1870 1818 0E00 
            95284 : 1818 1800 1818 
            9528A : 1800 7018 180E 
            95290 : 1818 7000 76DC 
            95296 : 0000             
(1)  120/   95298 : 0000 0000 43FA      	dc.l	$00000000, $43FA090A, $0C59DEB2, $667270FE, $D05974FC, $76004841, $024100FF, $D241D241
            9529E : 090A 0C59 DEB2 
            952A4 : 6672 70FE D059 
            952AA : 74FC 7600 4841 
            952B0 : 0241 00FF D241 
            952B6 : D241             
(1)  121/   952B8 : B240 625C 675E      	dc.l	$B240625C, $675E2031, $10006758, $47F10800, $48417000, $301BB253, $654C43F3, $08FE45E9
            952BE : 2031 1000 6758 
            952C4 : 47F1 0800 4841 
            952CA : 7000 301B B253 
            952D0 : 654C 43F3 08FE 
            952D6 : 45E9             
(1)  122/   952D8 : FFFC E248 C042      	dc.l	$FFFCE248, $C042B273, $00006514, $6204D6C0, $601A47F3, $0004200A, $908B6AE6, $594B600C
            952DE : B273 0000 6514 
            952E4 : 6204 D6C0 601A 
            952EA : 47F3 0004 200A 
            952F0 : 908B 6AE6 594B 
            952F6 : 600C             
(1)  123/   952F8 : 45F3 00FC 200A      	dc.l	$45F300FC, $200A908B, $6AD847D2, $925B7400, $341BD3C2, $48414241, $4841D283, $70004E75
            952FE : 908B 6AD8 47D2 
            95304 : 925B 7400 341B 
            9530A : D3C2 4841 4241 
            95310 : 4841 D283 7000 
            95316 : 4E75             
(1)  124/   95318 : 70FF 4E75 4841      	dc.l	$70FF4E75, $48417000, $3001D680, $5283323C, $FFFF4841, $59416A8E, $70FF4E75, $47FA0872
            9531E : 7000 3001 D680 
            95324 : 5283 323C FFFF 
            9532A : 4841 5941 6A8E 
            95330 : 70FF 4E75 47FA 
            95336 : 0872             
(1)  125/   95338 : 0C5B DEB2 664A      	dc.l	$0C5BDEB2, $664AD6D3, $78007200, $740045D3, $51CC0006, $16197807, $D603D341, $5242B252
            9533E : D6D3 7800 7200 
            95344 : 7400 45D3 51CC 
            9534A : 0006 1619 7807 
            95350 : D603 D341 5242 
            95356 : B252             
(1)  126/   95358 : 620A 65EC B42A      	dc.l	$620A65EC, $B42A0002, $671265E4, $584AB252, $62FA65DC, $B42A0002, $65D666F0, $10EA0003
            9535E : 0002 6712 65E4 
            95364 : 584A B252 62FA 
            9536A : 65DC B42A 0002 
            95370 : 65D6 66F0 10EA 
            95376 : 0003             
(1)  127/   95378 : 670A 51CF FFC6      	dc.l	$670A51CF, $FFC64E94, $64C04E75, $53484E75, $70004E75, $4EFA0024, $4EFA0018, $760F3401
            9537E : 4E94 64C0 4E75 
            95384 : 5348 4E75 7000 
            9538A : 4E75 4EFA 0024 
            95390 : 4EFA 0018 760F 
            95396 : 3401             
(1)  128/   95398 : E84A C443 10FB      	dc.l	$E84AC443, $10FB205C, $51CF004A, $4E946444, $4E754841, $61046548, $4841E959, $780FC841
            9539E : 205C 51CF 004A 
            953A4 : 4E94 6444 4E75 
            953AA : 4841 6104 6548 
            953B0 : 4841 E959 780F 
            953B6 : C841             
(1)  129/   953B8 : 10FB 4040 51CF      	dc.l	$10FB4040, $51CF0006, $4E946534, $E959780F, $C84110FB, $402E51CF, $00064E94, $6522E959
            953BE : 0006 4E94 6534 
            953C4 : E959 780F C841 
            953CA : 10FB 402E 51CF 
            953D0 : 0006 4E94 6522 
            953D6 : E959             
(1)  130/   953D8 : 780F C841 10FB      	dc.l	$780FC841, $10FB401C, $51CF0006, $4E946510, $E959760F, $C24310FB, $100A51CF, $00044ED4
            953DE : 401C 51CF 0006 
            953E4 : 4E94 6510 E959 
            953EA : 760F C243 10FB 
            953F0 : 100A 51CF 0004 
            953F6 : 4ED4             
(1)  131/   953F8 : 4E75 3031 3233      	dc.l	$4E753031, $32333435, $36373839, $41424344, $45464841, $67066106, $65E6609C, $4841E959
            953FE : 3435 3637 3839 
            95404 : 4142 4344 4546 
            9540A : 4841 6706 6106 
            95410 : 65E6 609C 4841 
            95416 : E959             
(1)  132/   95418 : 780F C841 670E      	dc.l	$780FC841, $670E10FB, $40DA51CF, $FFA04E94, $649A4E75, $E959780F, $C841670E, $10FB40C4
            9541E : 10FB 40DA 51CF 
            95424 : FFA0 4E94 649A 
            9542A : 4E75 E959 780F 
            95430 : C841 670E 10FB 
            95436 : 40C4             
(1)  133/   95438 : 51CF FF9C 4E94      	dc.l	$51CFFF9C, $4E946496, $4E75E959, $780FC841, $679E10FB, $40AE51CF, $FF984E94, $64924E75
            9543E : 6496 4E75 E959 
            95444 : 780F C841 679E 
            9544A : 10FB 40AE 51CF 
            95450 : FF98 4E94 6492 
            95456 : 4E75             
(1)  134/   95458 : 4EFA 0026 4EFA      	dc.l	$4EFA0026, $4EFA001A, $74077018, $D201D100, $10C051CF, $00064E94, $650451CA, $FFEE4E75
            9545E : 001A 7407 7018 
            95464 : D201 D100 10C0 
            9546A : 51CF 0006 4E94 
            95470 : 6504 51CA FFEE 
            95476 : 4E75             
(1)  135/   95478 : 4841 6104 6518      	dc.l	$48416104, $65184841, $740F7018, $D241D100, $10C051CF, $00064E94, $650451CA, $FFEE4E75
            9547E : 4841 740F 7018 
            95484 : D241 D100 10C0 
            9548A : 51CF 0006 4E94 
            95490 : 6504 51CA FFEE 
            95496 : 4E75             
(1)  136/   95498 : 4EFA 0010 4EFA      	dc.l	$4EFA0010, $4EFA0048, $47FA009A, $024100FF, $600447FA, $008C4200, $7609381B, $34039244
            9549E : 0048 47FA 009A 
            954A4 : 0241 00FF 6004 
            954AA : 47FA 008C 4200 
            954B0 : 7609 381B 3403 
            954B6 : 9244             
(1)  137/   954B8 : 55CA FFFC D244      	dc.l	$55CAFFFC, $D2449443, $44428002, $670E0602, $003010C2, $51CF0006, $4E946510, $381B6ADC
            954BE : 9443 4442 8002 
            954C4 : 670E 0602 0030 
            954CA : 10C2 51CF 0006 
            954D0 : 4E94 6510 381B 
            954D6 : 6ADC             
(1)  138/   954D8 : 0601 0030 10C1      	dc.l	$06010030, $10C151CF, $00044ED4, $4E7547FA, $002E4200, $7609281B, $34039284, $55CAFFFC
            954DE : 51CF 0004 4ED4 
            954E4 : 4E75 47FA 002E 
            954EA : 4200 7609 281B 
            954F0 : 3403 9284 55CA 
            954F6 : FFFC             
(1)  139/   954F8 : D284 9443 4442      	dc.l	$D2849443, $44428002, $670E0602, $003010C2, $51CF0006, $4E9465D4, $281B6ADC, $609E3B9A
            954FE : 8002 670E 0602 
            95504 : 0030 10C2 51CF 
            9550A : 0006 4E94 65D4 
            95510 : 281B 6ADC 609E 
            95516 : 3B9A             
(1)  140/   95518 : CA00 05F5 E100      	dc.l	$CA0005F5, $E1000098, $9680000F, $42400001, $86A00000, $2710FFFF, $03E80064, $000AFFFF
            9551E : 0098 9680 000F 
            95524 : 4240 0001 86A0 
            9552A : 0000 2710 FFFF 
            95530 : 03E8 0064 000A 
            95536 : FFFF             
(1)  141/   95538 : 2710 03E8 0064      	dc.l	$271003E8, $0064000A, $FFFF48C1, $60084EFA, $00064881, $48C148E7, $50604EBA, $FD486618
            9553E : 000A FFFF 48C1 
            95544 : 6008 4EFA 0006 
            9554A : 4881 48C1 48E7 
            95550 : 5060 4EBA FD48 
            95556 : 6618             
(1)  142/   95558 : 2E81 4EBA FDD8      	dc.l	$2E814EBA, $FDD84CDF, $060A650A, $08030003, $66044EFA, $00B64E75, $4CDF060A, $08030002
            9555E : 4CDF 060A 650A 
            95564 : 0803 0003 6604 
            9556A : 4EFA 00B6 4E75 
            95570 : 4CDF 060A 0803 
            95576 : 0002             
(1)  143/   95578 : 6708 47FA 000A      	dc.l	$670847FA, $000A4EFA, $00B470FF, $60DE3C75, $6E6B6E6F, $776E3E00, $10FC002B, $51CF0006
            9557E : 4EFA 00B4 70FF 
            95584 : 60DE 3C75 6E6B 
            9558A : 6E6F 776E 3E00 
            95590 : 10FC 002B 51CF 
            95596 : 0006             
(1)  144/   95598 : 4E94 65D2 4841      	dc.l	$4E9465D2, $48414A41, $6700FE72, $6000FE68, $08030003, $66C04EFA, $FDFA48E7, $F81010D9
            9559E : 4A41 6700 FE72 
            955A4 : 6000 FE68 0803 
            955AA : 0003 66C0 4EFA 
            955B0 : FDFA 48E7 F810 
            955B6 : 10D9             
(1)  145/   955B8 : 5FCF FFFC 6E14      	dc.l	$5FCFFFFC, $6E146718, $16207470, $C4034EBB, $201A64EA, $4CDF081F, $4E754E94, $64E060F4
            955BE : 6718 1620 7470 
            955C4 : C403 4EBB 201A 
            955CA : 64EA 4CDF 081F 
            955D0 : 4E75 4E94 64E0 
            955D6 : 60F4             
(1)  146/   955D8 : 5348 4E94 4CDF      	dc.l	$53484E94, $4CDF081F, $4E7547FA, $FDA8B702, $D4024EFB, $205A4E71, $4E7147FA, $FEA4B702
            955DE : 081F 4E75 47FA 
            955E4 : FDA8 B702 D402 
            955EA : 4EFB 205A 4E71 
            955F0 : 4E71 47FA FEA4 
            955F6 : B702             
(1)  147/   955F8 : D402 4EFB 204A      	dc.l	$D4024EFB, $204A4E71, $4E7147FA, $FE54B702, $D4024EFB, $203A5348, $4E7547FA, $FF2E7403
            955FE : 4E71 4E71 47FA 
            95604 : FE54 B702 D402 
            9560A : 4EFB 203A 5348 
            95610 : 4E75 47FA FF2E 
            95616 : 7403             
(1)  148/   95618 : C403 D442 4EFB      	dc.l	$C403D442, $4EFB2028, $4E714A40, $6B084A81, $67164EFA, $FF644EFA, $FF78265A, $10DB57CF
            9561E : 2028 4E71 4A40 
            95624 : 6B08 4A81 6716 
            9562A : 4EFA FF64 4EFA 
            95630 : FF78 265A 10DB 
            95636 : 57CF             
(1)  149/   95638 : FFFC 67D2 4E94      	dc.l	$FFFC67D2, $4E9464F4, $4E755248, $6032504B, $321A4ED3, $584B221A, $4ED35547, $6028504B
            9563E : 64F4 4E75 5248 
            95644 : 6032 504B 321A 
            9564A : 4ED3 584B 221A 
            95650 : 4ED3 5547 6028 
            95656 : 504B             
(1)  150/   95658 : 321A 6004 584B      	dc.l	$321A6004, $584B221A, $6A084481, $10FC002D, $600410FC, $002B51CF, $00064E94, $65CA4ED3
            9565E : 221A 6A08 4481 
            95664 : 10FC 002D 6004 
            9566A : 10FC 002B 51CF 
            95670 : 0006 4E94 65CA 
            95676 : 4ED3             
(1)  151/   95678 : 51CF FFC6 4ED4      	dc.l	$51CFFFC6, $4ED46506, $524810D9, $4E755447, $53494ED4, $4BF900C0, $00044DED, $FFFC4A51
            9567E : 6506 5248 10D9 
            95684 : 4E75 5447 5349 
            9568A : 4ED4 4BF9 00C0 
            95690 : 0004 4DED FFFC 
            95696 : 4A51             
(1)  152/   95698 : 6B10 2A99 41D2      	dc.l	$6B102A99, $41D23818, $4EBA023C, $43E90020, $60EC5449, $2ABCC000, $00007000, $76033C80
            9569E : 3818 4EBA 023C 
            956A4 : 43E9 0020 60EC 
            956AA : 5449 2ABC C000 
            956B0 : 0000 7000 7603 
            956B6 : 3C80             
(1)  153/   956B8 : 3419 3C82 3419      	dc.l	$34193C82, $34196AFA, $72004EBB, $204C51CB, $FFEE2A19, $200B4840, $024000FF, $00405D00
            956BE : 6AFA 7200 4EBB 
            956C4 : 204C 51CB FFEE 
            956CA : 2A19 200B 4840 
            956D0 : 0240 00FF 0040 
            956D6 : 5D00             
(1)  154/   956D8 : 4840 2640 4E63      	dc.l	$48402640, $4E6326C5, $26C526D9, $26D92A85, $70003219, $61122ABC, $40000000, $72006108
            956DE : 26C5 26C5 26D9 
            956E4 : 26D9 2A85 7000 
            956EA : 3219 6112 2ABC 
            956F0 : 4000 0000 7200 
            956F6 : 6108             
(1)  155/   956F8 : 3ABC 8174 2A85      	dc.l	$3ABC8174, $2A854E75, $2C802C80, $2C802C80, $2C802C80, $2C802C80, $51C9FFEE, $4E754CAF
            956FE : 4E75 2C80 2C80 
            95704 : 2C80 2C80 2C80 
            9570A : 2C80 2C80 2C80 
            95710 : 51C9 FFEE 4E75 
            95716 : 4CAF             
(1)  156/   95718 : 0003 0004 48E7      	dc.l	$00030004, $48E76010, $4E6B240B, $48424202, $0C425D00, $661C342B, $00040242, $E000C2EB
            9571E : 6010 4E6B 240B 
            95724 : 4842 4202 0C42 
            9572A : 5D00 661C 342B 
            95730 : 0004 0242 E000 
            95736 : C2EB             
(1)  157/   95738 : 000E D441 D440      	dc.l	$000ED441, $D440D440, $36823742, $0004504B, $36DB4CDF, $08064E75, $2F0B4E6B, $200B4840
            9573E : D440 3682 3742 
            95744 : 0004 504B 36DB 
            9574A : 4CDF 0806 4E75 
            95750 : 2F0B 4E6B 200B 
            95756 : 4840             
(1)  158/   95758 : 4200 0C40 5D00      	dc.l	$42000C40, $5D006612, $72003213, $02411FFF, $82EB000E, $20014840, $E248265F, $4E752F0B
            9575E : 6612 7200 3213 
            95764 : 0241 1FFF 82EB 
            9576A : 000E 2001 4840 
            95770 : E248 265F 4E75 
            95776 : 2F0B             
(1)  159/   95778 : 2F00 4E6B 200B      	dc.l	$2F004E6B, $200B4840, $42000C40, $5D006616, $302B0004, $D06B000E, $02405FFF, $36803740
            9577E : 4840 4200 0C40 
            95784 : 5D00 6616 302B 
            9578A : 0004 D06B 000E 
            95790 : 0240 5FFF 3680 
            95796 : 3740             
(1)  160/   95798 : 0004 504B 36DB      	dc.l	$0004504B, $36DB201F, $265F4E75, $2F0B2F00, $4E6B200B, $48404200, $0C405D00, $66043741
            9579E : 201F 265F 4E75 
            957A4 : 2F0B 2F00 4E6B 
            957AA : 200B 4840 4200 
            957B0 : 0C40 5D00 6604 
            957B6 : 3741             
(1)  161/   957B8 : 000C 201F 265F      	dc.l	$000C201F, $265F4E75, $2F0B2F00, $4E6B200B, $48404200, $0C405D00, $6606504B, $36C136C1
            957BE : 4E75 2F0B 2F00 
            957C4 : 4E6B 200B 4840 
            957CA : 4200 0C40 5D00 
            957D0 : 6606 504B 36C1 
            957D6 : 36C1             
(1)  162/   957D8 : 201F 265F 4E75      	dc.l	$201F265F, $4E7561C4, $487AFF94, $48E77F12, $4E6B240B, $48424202, $0C425D00, $66282A1B
            957DE : 61C4 487A FF94 
            957E4 : 48E7 7F12 4E6B 
            957EA : 240B 4842 4202 
            957F0 : 0C42 5D00 6628 
            957F6 : 2A1B             
(1)  163/   957F8 : 2E1B 4C93 005C      	dc.l	$2E1B4C93, $005C4846, $4DF900C0, $00002D45, $00044845, $72001218, $6E126B32, $4893001C
            957FE : 4846 4DF9 00C0 
            95804 : 0000 2D45 0004 
            9580A : 4845 7200 1218 
            95810 : 6E12 6B32 4893 
            95816 : 001C             
(1)  164/   95818 : 4845 48E3 0500      	dc.l	$484548E3, $05004CDF, $48FE4E75, $51CB0012, $D642DE86, $0887001D, $2D470004, $2A074845
            9581E : 4CDF 48FE 4E75 
            95824 : 51CB 0012 D642 
            9582A : DE86 0887 001D 
            95830 : 2D47 0004 2A07 
            95836 : 4845             
(1)  165/   95838 : D244 3C81 5445      	dc.l	$D2443C81, $54457200, $12186EE0, $67CE0241, $001E4EFB, $1002DE86, $721D0387, $6020602A
            9583E : 7200 1218 6EE0 
            95844 : 67CE 0241 001E 
            9584A : 4EFB 1002 DE86 
            95850 : 721D 0387 6020 
            95856 : 602A             
(1)  166/   95858 : 602E 6036 603E      	dc.l	$602E6036, $603E1418, $60141818, $60D8603A, $1218D241, $76804843, $CE834841, $8E813602
            9585E : 1418 6014 1818 
            95864 : 60D8 603A 1218 
            9586A : D241 7680 4843 
            95870 : CE83 4841 8E81 
            95876 : 3602             
(1)  167/   95878 : 2D47 0004 2A07      	dc.l	$2D470004, $2A074845, $60BC0244, $9FFF60B6, $02449FFF, $00442000, $60AC0244, $9FFF0044
            9587E : 4845 60BC 0244 
            95884 : 9FFF 60B6 0244 
            9588A : 9FFF 0044 2000 
            95890 : 60AC 0244 9FFF 
            95896 : 0044             
(1)  168/   95898 : 4000 60A2 0044      	dc.l	$400060A2, $00446000, $609C3F04, $1E98381F, $6094487A, $FECA2F0C, $49FA0016, $4FEFFFF0
            9589E : 6000 609C 3F04 
            958A4 : 1E98 381F 6094 
            958AA : 487A FECA 2F0C 
            958B0 : 49FA 0016 4FEF 
            958B6 : FFF0             
(1)  169/   958B8 : 41D7 7E0E 4EBA      	dc.l	$41D77E0E, $4EBAFCF4, $4FEF0010, $285F4E75, $42184447, $0647000F, $90C72F08, $4EBAFF0E
            958BE : FCF4 4FEF 0010 
            958C4 : 285F 4E75 4218 
            958CA : 4447 0647 000F 
            958D0 : 90C7 2F08 4EBA 
            958D6 : FF0E             
(1)  170/   958D8 : 205F 7E0E 4E75      	dc.l	$205F7E0E, $4E75741E, $10181200, $E609C242, $3CB11000, $D000C042, $3CB10000, $51CCFFEA
            958DE : 741E 1018 1200 
            958E4 : E609 C242 3CB1 
            958EA : 1000 D000 C042 
            958F0 : 3CB1 0000 51CC 
            958F6 : FFEA             
(1)  171/   958F8 : 4E75 487A 0056      	dc.l	$4E75487A, $00562F0C, $49FA0016, $4FEFFFF0, $41D77E0E, $4EBAFCA4, $4FEF0010, $285F4E75
            958FE : 2F0C 49FA 0016 
            95904 : 4FEF FFF0 41D7 
            9590A : 7E0E 4EBA FCA4 
            95910 : 4FEF 0010 285F 
            95916 : 4E75             
(1)  172/   95918 : 4218 4447 0647      	dc.l	$42184447, $0647000F, $90C72F08, $2F0D4BF9, $00C00004, $3E3C9E00, $60023A87, $1E186EFA
            9591E : 000F 90C7 2F08 
            95924 : 2F0D 4BF9 00C0 
            9592A : 0004 3E3C 9E00 
            95930 : 6002 3A87 1E18 
            95936 : 6EFA             
(1)  173/   95938 : 6710 0407 00E0      	dc.l	$67100407, $00E067F2, $0C070010, $6DEE5248, $60EA2A5F, $205F7E0E, $4E7533FC, $9E0000C0
            9593E : 67F2 0C07 0010 
            95944 : 6DEE 5248 60EA 
            9594A : 2A5F 205F 7E0E 
            95950 : 4E75 33FC 9E00 
            95956 : 00C0             
(1)  174/   95958 : 0004 4E75 487A      	dc.l	$00044E75, $487AFFF4, $3F072F0D, $4BF900C0, $00043E3C, $9E006002, $3A871E18, $6EFA6710
            9595E : FFF4 3F07 2F0D 
            95964 : 4BF9 00C0 0004 
            9596A : 3E3C 9E00 6002 
            95970 : 3A87 1E18 6EFA 
            95976 : 6710             
(1)  175/   95978 : 0407 00E0 67F2      	dc.l	$040700E0, $67F20C07, $00106DEE, $524860EA, $2A5F3E1F, $4E7546FC, $27004FEF, $FFF048E7
            9597E : 0C07 0010 6DEE 
            95984 : 5248 60EA 2A5F 
            9598A : 3E1F 4E75 46FC 
            95990 : 2700 4FEF FFF0 
            95996 : 48E7             
(1)  176/   95998 : FFFE 47EF 003C      	dc.l	$FFFE47EF, $003C4EBA, $F5024EBA, $F3F04CDF, $7FFF487A, $F3CE2F2F, $00144E75, $48E7C456
            9599E : 4EBA F502 4EBA 
            959A4 : F3F0 4CDF 7FFF 
            959AA : 487A F3CE 2F2F 
            959B0 : 0014 4E75 48E7 
            959B6 : C456             
(1)  177/   959B8 : 4E6B 200B 4840      	dc.l	$4E6B200B, $48404200, $0C405D00, $66124BF9, $00C00004, $4DEDFFFC, $43FAF558, $4EBAFCF4
            959BE : 4200 0C40 5D00 
            959C4 : 6612 4BF9 00C0 
            959CA : 0004 4DED FFFC 
            959D0 : 43FA F558 4EBA 
            959D6 : FCF4             
(1)  178/   959D8 : 4CDF 6A23 4E75      	dc.l	$4CDF6A23, $4E7548E7, $C0D04E6B, $200B4840, $42000C40, $5D00660C, $3F3C0000, $610C610A
            959DE : 48E7 C0D0 4E6B 
            959E4 : 200B 4840 4200 
            959EA : 0C40 5D00 660C 
            959F0 : 3F3C 0000 610C 
            959F6 : 610A             
(1)  179/   959F8 : 67FC 544F 4CDF      	dc.l	$67FC544F, $4CDF0B03, $4E756174, $41EF0004, $43F900A1, $00036178, $70F0C02F, $00054E75
            959FE : 0B03 4E75 6174 
            95A04 : 41EF 0004 43F9 
            95A0A : 00A1 0003 6178 
            95A10 : 70F0 C02F 0005 
            95A16 : 4E75             
(1)  180/   95A18 : 48E7 FFFE 3F3C      	dc.l	$48E7FFFE, $3F3C0000, $61E04BF9, $00C00004, $4DEDFFFC, $61D467F2, $6B4041FA, $00765888
            95A1E : 0000 61E0 4BF9 
            95A24 : 00C0 0004 4DED 
            95A2A : FFFC 61D4 67F2 
            95A30 : 6B40 41FA 0076 
            95A36 : 5888             
(1)  181/   95A38 : D000 64FA 2010      	dc.l	$D00064FA, $20106F32, $20404FEF, $FFF043FA, $F4E647D7, $2A3C4000, $00034EBA, $FC782ABC
            95A3E : 6F32 2040 4FEF 
            95A44 : FFF0 43FA F4E6 
            95A4A : 47D7 2A3C 4000 
            95A50 : 0003 4EBA FC78 
            95A56 : 2ABC             
(1)  182/   95A58 : 8230 8406 2A85      	dc.l	$82308406, $2A85487A, $000C4850, $4CEF7FFF, $00164E75, $4FEF0010, $60B02ABA, $F47A60AA
            95A5E : 487A 000C 4850 
            95A64 : 4CEF 7FFF 0016 
            95A6A : 4E75 4FEF 0010 
            95A70 : 60B0 2ABA F47A 
            95A76 : 60AA             
(1)  183/   95A78 : 41F9 00C0 0004      	dc.l	$41F900C0, $000444D0, $6BFC44D0, $6AFC4E75, $12BC0000, $4E7172C0, $1011E508, $12BC0040
            95A7E : 44D0 6BFC 44D0 
            95A84 : 6AFC 4E75 12BC 
            95A8A : 0000 4E71 72C0 
            95A90 : 1011 E508 12BC 
            95A96 : 0040             
(1)  184/   95A98 : 4E71 C001 1211      	dc.l	$4E71C001, $12110201, $003F8001, $46001210, $B10110C0, $C20010C1
            95A9E : 0201 003F 8001 
            95AA4 : 4600 1210 B101 
            95AAA : 10C0 C200 10C1    
(1)  185/   95AB0 : 4E75                	dc.w	$4E75
(1)  186/   95AB2 : 0009 5ABE 0000      	dc.l	DEBUGGER__EXTENSIONS__BTN_A_DEBUGGER, DEBUGGER__EXTENSIONS__BTN_C_DEBUGGER, DEBUGGER__EXTENSIONS__BTN_B_DEBUGGER, $48E700FE, $41FA002A, $4EBAFD1C, $49D77C06, $3F3C2000
            95AB8 : 0000 0009 5B0A 
            95ABE : 48E7 00FE 41FA 
            95AC4 : 002A 4EBA FD1C 
            95ACA : 49D7 7C06 3F3C 
            95AD0 : 2000             
(1)  187/   95AD2 : 2F3C E861 303A      	dc.l	$2F3CE861, $303A41D7, $221C4EBA, $F32C522F, $000251CE, $FFF24FEF, $00224E75, $E0FA01F0
            95AD8 : 41D7 221C 4EBA 
            95ADE : F32C 522F 0002 
            95AE4 : 51CE FFF2 4FEF 
            95AEA : 0022 4E75 E0FA 
            95AF0 : 01F0             
(1)  188/   95AF2 : 26EA 4164 6472      	dc.l	$26EA4164, $64726573, $73205265, $67697374, $6572733A, $E0E00000, $41FA0088, $4EBAFCD4
            95AF8 : 6573 7320 5265 
            95AFE : 6769 7374 6572 
            95B04 : 733A E0E0 0000 
            95B0A : 41FA 0088 4EBA 
            95B10 : FCD4             
(1)  189/   95B12 : 2278 0000 5989      	dc.l	$22780000, $598945D7, $4EBAF284, $B3CA6570, $0C520040, $64642012, $67602040, $02400001
            95B18 : 45D7 4EBA F284 
            95B1E : B3CA 6570 0C52 
            95B24 : 0040 6464 2012 
            95B2A : 6760 2040 0240 
            95B30 : 0001             
(1)  190/   95B32 : 6658 1220 1020      	dc.l	$66581220, $10200C00, $00616604, $4A01663A, $0C00004E, $660A0201, $00F80C01, $0090672A
            95B38 : 0C00 0061 6604 
            95B3E : 4A01 663A 0C00 
            95B44 : 004E 660A 0201 
            95B4A : 00F8 0C01 0090 
            95B50 : 672A             
(1)  191/   95B52 : 3020 0C40 6100      	dc.l	$30200C40, $61006722, $12004200, $0C404E00, $66120C01, $00A8650C, $0C0100BB, $62060C01
            95B58 : 6722 1200 4200 
            95B5E : 0C40 4E00 6612 
            95B64 : 0C01 00A8 650C 
            95B6A : 0C01 00BB 6206 
            95B70 : 0C01             
(1)  192/   95B72 : 00B9 6606 0C60      	dc.l	$00B96606, $0C604EB9, $66102F0A, $2F092208, $4EBAF28A, $225F245F, $548A548A, $B3CA6490
            95B78 : 4EB9 6610 2F0A 
            95B7E : 2F09 2208 4EBA 
            95B84 : F28A 225F 245F 
            95B8A : 548A 548A B3CA 
            95B90 : 6490             
(1)  193/   95B92 : 4E75 E0FA 01F0      	dc.l	$4E75E0FA, $01F026EA, $4261636B, $74726163, $653AE0E0
            95B98 : 26EA 4261 636B 
            95B9E : 7472 6163 653A 
            95BA4 : E0E0             
(1)  194/   95BA6 : 0000                	dc.w	$0000
(1)  195/   95BA8 :                     
(1)  196/   95BA8 :                     ; ---------------------------------------------------------------
(1)  197/   95BA8 :                     ; MD Debugger's exported symbols
(1)  198/   95BA8 :                     ; ---------------------------------------------------------------
(1)  199/   95BA8 :                     
(1)  200/   95BA8 : =$94C52              MDDBG__ErrorHandler: equ ErrorHandler+$0
(1)  201/   95BA8 : =$94D7A              MDDBG__Error_IdleLoop: equ ErrorHandler+$128
(1)  202/   95BA8 : =$94D94              MDDBG__Error_InitConsole: equ ErrorHandler+$142
(1)  203/   95BA8 : =$94DA0              MDDBG__Error_MaskStackBoundaries: equ ErrorHandler+$14E
(1)  204/   95BA8 : =$94E0A              MDDBG__Error_DrawOffsetLocation: equ ErrorHandler+$1B8
(1)  205/   95BA8 : =$94E0E              MDDBG__Error_DrawOffsetLocation2: equ ErrorHandler+$1BC
(1)  206/   95BA8 : =$94E14              MDDBG__Error_DrawOffsetLocation__inj: equ ErrorHandler+$1C2
(1)  207/   95BA8 : =$94EA2              MDDBG__ErrorHandler_SetupVDP: equ ErrorHandler+$250
(1)  208/   95BA8 : =$94ED8              MDDBG__ErrorHandler_VDPConfig: equ ErrorHandler+$286
(1)  209/   95BA8 : =$94EEE              MDDBG__ErrorHandler_VDPConfig_Nametables: equ ErrorHandler+$29C
(1)  210/   95BA8 : =$94F2A              MDDBG__ErrorHandler_ConsoleConfig_Initial: equ ErrorHandler+$2D8
(1)  211/   95BA8 : =$94F2E              MDDBG__ErrorHandler_ConsoleConfig_Shared: equ ErrorHandler+$2DC
(1)  212/   95BA8 : =$94F5E              MDDBG__Str_OffsetLocation_24bit: equ ErrorHandler+$30C
(1)  213/   95BA8 : =$94F67              MDDBG__Str_OffsetLocation_32bit: equ ErrorHandler+$315
(1)  214/   95BA8 : =$94FA2              MDDBG__Art1bpp_Font: equ ErrorHandler+$350
(1)  215/   95BA8 : =$9529C              MDDBG__GetSymbolByOffset: equ ErrorHandler+$64A
(1)  216/   95BA8 : =$955B2              MDDBG__FormatString: equ ErrorHandler+$960
(1)  217/   95BA8 : =$9568C              MDDBG__Console_Init: equ ErrorHandler+$A3A
(1)  218/   95BA8 : =$956CA              MDDBG__Console_Reset: equ ErrorHandler+$A78
(1)  219/   95BA8 : =$956CC              MDDBG__Console_InitShared: equ ErrorHandler+$A7A
(1)  220/   95BA8 : =$95716              MDDBG__Console_SetPosAsXY_Stack: equ ErrorHandler+$AC4
(1)  221/   95BA8 : =$9571C              MDDBG__Console_SetPosAsXY: equ ErrorHandler+$ACA
(1)  222/   95BA8 : =$95750              MDDBG__Console_GetPosAsXY: equ ErrorHandler+$AFE
(1)  223/   95BA8 : =$95776              MDDBG__Console_StartNewLine: equ ErrorHandler+$B24
(1)  224/   95BA8 : =$957A4              MDDBG__Console_SetBasePattern: equ ErrorHandler+$B52
(1)  225/   95BA8 : =$957C0              MDDBG__Console_SetWidth: equ ErrorHandler+$B6E
(1)  226/   95BA8 : =$957DE              MDDBG__Console_WriteLine_WithPattern: equ ErrorHandler+$B8C
(1)  227/   95BA8 : =$957E0              MDDBG__Console_WriteLine: equ ErrorHandler+$B8E
(1)  228/   95BA8 : =$957E4              MDDBG__Console_Write: equ ErrorHandler+$B92
(1)  229/   95BA8 : =$958AA              MDDBG__Console_WriteLine_Formatted: equ ErrorHandler+$C58
(1)  230/   95BA8 : =$958AE              MDDBG__Console_Write_Formatted: equ ErrorHandler+$C5C
(1)  231/   95BA8 : =$958DE              MDDBG__Decomp1bpp: equ ErrorHandler+$C8C
(1)  232/   95BA8 : =$958FA              MDDBG__KDebug_WriteLine_Formatted: equ ErrorHandler+$CA8
(1)  233/   95BA8 : =$958FE              MDDBG__KDebug_Write_Formatted: equ ErrorHandler+$CAC
(1)  234/   95BA8 : =$95952              MDDBG__KDebug_FlushLine: equ ErrorHandler+$D00
(1)  235/   95BA8 : =$9595C              MDDBG__KDebug_WriteLine: equ ErrorHandler+$D0A
(1)  236/   95BA8 : =$95960              MDDBG__KDebug_Write: equ ErrorHandler+$D0E
(1)  237/   95BA8 : =$9598E              MDDBG__ErrorHandler_ConsoleOnly: equ ErrorHandler+$D3C
(1)  238/   95BA8 : =$959B4              MDDBG__ErrorHandler_ClearConsole: equ ErrorHandler+$D62
(1)  239/   95BA8 : =$959DE              MDDBG__ErrorHandler_PauseConsole: equ ErrorHandler+$D8C
(1)  240/   95BA8 : =$95A18              MDDBG__ErrorHandler_PagesController: equ ErrorHandler+$DC6
(1)  241/   95BA8 : =$95A78              MDDBG__VSync: equ ErrorHandler+$E26
(1)  242/   95BA8 : =$95AB2              MDDBG__ErrorHandler_ExtraDebuggerList: equ ErrorHandler+$E60
(1)  243/   95BA8 : =$95ABE              MDDBG__Debugger_AddressRegisters: equ ErrorHandler+$E6C
(1)  244/   95BA8 : =$95B0A              MDDBG__Debugger_Backtrace: equ ErrorHandler+$EB8
(1)  245/   95BA8 :                     
(1)  246/   95BA8 :                     ; ---------------------------------------------------------------
(1)  247/   95BA8 :                     ; WARNING!
(1)  248/   95BA8 :                     ;	DO NOT put any data from now on! DO NOT use ROM padding!
(1)  249/   95BA8 :                     ;	Symbol data should be appended here after ROM is compiled
(1)  250/   95BA8 :                     ;	by ConvSym utility, otherwise debugger modules won't be able
(1)  251/   95BA8 :                     ;	to resolve symbol names.
(1)  252/   95BA8 :                     ; ---------------------------------------------------------------
(1)  253/   95BA8 :                     
   38476/   95BA8 :                     
   38477/   95BA8 :                     ; --------------------------------------------------------------
   38478/   95BA8 :                     ; WARNING!
   38479/   95BA8 :                     ;	DO NOT put any data from now on! DO NOT use ROM padding!
   38480/   95BA8 :                     ;	Symbol data should be appended here after ROM is compiled
   38481/   95BA8 :                     ;	by ConvSym utility, otherwise debugger modules won't be able
   38482/   95BA8 :                     ;	to resolve symbol names.
   38483/   95BA8 :                     ; --------------------------------------------------------------	
   38484/   95BA8 :                     
   38485/   95BA8 :                     EndOfRom:
   38486/   95BA8 :                     		END
 AS V1.42 Beta [Bld 212] - Source File sonic.asm - Page 2 - 12/19/2024 3:38:4


  Symbol Table (* = unused):
  --------------------------

*ARCHITECTURE :                                      "x86_64-unknown-win64" - |
 AddPoints :                  1C6E8 C |  AddressError :               94B28 C |
 AddressError.__align_flag :     80 - |  AddressError.__lpos :            0 - |
 AddressError.__pos :                                      FFFFFFFFFFFFFFFF - |
*AddressError.__sp :              0 - |
*AddressError.__str :                                       "ADDRESS ERROR" - |
 AngleMap :                   640A6 C |  Angle_Data :                  2AF4 C |
 AniArt_Ending :              1C304 C |  AniArt_GHZ :                 1C0B6 C |
 AniArt_GiantRing :           1C56C C |  AniArt_Index :               1C0A8 C |
 AniArt_Load :                1C086 C |  AniArt_MZ :                  1C174 C |
 AniArt_MZextra :             1C430 C |  AniArt_Pause :               1C0A6 C |
 AniArt_SBZ :                 1C24E C |  AniArt_none :                1C418 C |
 Ani_Eggman :                 17A96 C |  Ani_obj08 :                  14382 C |
 Ani_obj0A :                  13E76 C |  Ani_obj0C :                  11192 C |
 Ani_obj0D :                   EAE0 C |  Ani_obj0E :                   A4EA C |
 Ani_obj0F :                   A4F8 C |  Ani_obj14 :                   E28C C |
 Ani_obj16 :                  11D24 C |  Ani_obj1E :                   8C44 C |
 Ani_obj1F :                   9510 C |  Ani_obj22 :                   9808 C |
 Ani_obj23 :                   981A C |  Ani_obj25 :                   9D74 C |
 Ani_obj26 :                   A2EE C |  Ani_obj2A :                   87D4 C |
 Ani_obj2A_Open :              87E4 C |  Ani_obj2A_Shut :              87D8 C |
 Ani_obj2B :                   A99E C |  Ani_obj2C :                   AA4E C |
 Ani_obj2D :                   AC2A C |  Ani_obj35 :                   B0AE C |
 Ani_obj38 :                  1410A C |  Ani_obj3E :                  1AB38 C |
 Ani_obj40 :                   F53E C |  Ani_obj41 :                   DACA C |
 Ani_obj42 :                   DCE4 C |  Ani_obj43 :                   DF54 C |
 Ani_obj47 :                   E8B6 C |  Ani_obj4A :                  14214 C |
 Ani_obj4C :                   EFD2 C |  Ani_obj4E :                   F000 C |
 Ani_obj50 :                   F6D8 C |  Ani_obj55 :                   FFE4 C |
 Ani_obj5F :                  119B0 C |  Ani_obj60 :                  11C78 C |
 Ani_obj64 :                  12738 C |  Ani_obj65 :                  128E8 C |
 Ani_obj69 :                  15692 C |  Ani_obj6C :                  15F04 C |
 Ani_obj6D :                   E384 C |  Ani_obj6E :                  15FB6 C |
 Ani_obj6F :                  16276 C |  Ani_obj78 :                  16AD6 C |
 Ani_obj81 :                   4E6A C |  Ani_obj82 :                  197D4 C |
 Ani_obj85 :                  1A1A6 C |  Ani_obj86 :                  1A812 C |
 Ani_obj86a :                 1A848 C |  Ani_obj87 :                   5340 C |
 Ani_obj8B :                   58CC C |  Anim_End :                    A5A8 C |
 Anim_End_FA :                 A5A0 C |  Anim_End_FB :                 A592 C |
 Anim_End_FC :                 A58A C |  Anim_End_FD :                 A580 C |
 Anim_End_FE :                 A56C C |  Anim_End_FF :                 A55C C |
 Anim_Next :                   A536 C |  Anim_Run :                    A51A C |
 Anim_Wait :                   A55A C |  AnimateSprite :               A4FE C |
 ArtLoadCues :                1D66C C |  Art_BigRing :                7F402 C |
 Art_GhzFlower1 :             68E36 C |  Art_GhzFlower2 :             69236 C |
 Art_GhzWater :               68C36 C |  Art_Hud :                    1CB36 C |
 Art_LivesNums :              1CE36 C |  Art_MzLava1 :                696B6 C |
 Art_MzLava2 :                699B6 C |  Art_MzTorch :                69FB6 C |
 Art_SbzSmoke :               6A2B6 C |  Art_Sonic :                  21A64 C |
 Art_Text :                     3D6 C | *BIGENDIAN :                      0 - |
*BRANCHEXT :                      0 - |  BgScrollSpeed :               603A C |
 BgScroll_End :                60AC C |  BgScroll_GHZ :                6072 C |
 BgScroll_Index :              6064 C |  BgScroll_LZ :                 6076 C |
 BgScroll_MZ :                 607E C |  BgScroll_SBZ :                60A0 C |
 BgScroll_SLZ :                6080 C |  BgScroll_SYZ :                608C C |
 BldSpr_ScrPos :               D41C C |  Blk16_GHZ :                  3E660 C |
 Blk16_LZ :                   43A80 C |  Blk16_MZ :                   47C8E C |
 Blk16_SBZ :                  5850C C |  Blk16_SLZ :                  4C290 C |
 Blk16_SYZ :                  5238E C |  Blk256_GHZ :                 41924 C |
 Blk256_LZ :                  45806 C |  Blk256_MZ :                  4AB58 C |
 Blk256_SBZ :                 5B988 C |  Blk256_SLZ :                 50412 C |
 Blk256_SYZ :                 56222 C |  BossDefeated :               17644 C |
 BossMove :                   17686 C |  Boundary_Bottom :            130E8 C |
 Boundary_Sides :             1310E C |  BuildSprites :                D42C C |
 BusError :                   94B10 C |  BusError.__align_flag :         80 - |
 BusError.__lpos :                0 - |  BusError.__pos :  FFFFFFFFFFFFFFFF - |
*BusError.__sp :                  0 - | *BusError.__str :       "BUS ERROR" - |
*CASESENSITIVE :                  1 - |  CCL_NoChange :               147AC C |
*COMPMODE :                       0 - | *CONSTPI :        3.141592653589793 - |
*CUSTOM :                         0 - |  CalcAngle :                   2A8E C |
 CalcSine :                    27C0 C |  ChangeRingFrame :             402A C |
 CheckSumCheck :                31C C |  CheckSumError :                3B8 C |
 CheckSum_Loop :                3D4 C |  CheckSum_Red :                 3C8 C |
 Checksum :                     18E C |  ChkInstr :                   94B80 C |
 ChkInstr.__align_flag :         80 - |  ChkInstr.__lpos :                0 - |
 ChkInstr.__pos :  FFFFFFFFFFFFFFFF - | *ChkInstr.__sp :                  0 - |
*ChkInstr.__str : "CHK INSTRUCTION" - |  ChkObjOnScreen :              D64C C |
 ChkObjOnScreen2 :             D674 C |  ClearPLC :                    13C4 C |
 ClearPLC_Loop :               13CA C |  ClearScreen :                 10AA C |
 ClrCRAMLoop :                  26E C |  ClrRAMLoop :                   262 C |
 ClrVDPStuff :                  278 C |  ColIndexLoad :                3EFA C |
 ColPointers :                 3F14 C |  Col_GHZ_1 :                  661A6 C |
 Col_GHZ_2 :                  6635E C |  Col_LZ_1 :                   66516 C |
 Col_LZ_2 :                   665DA C |  Col_MZ_1 :                   6669E C |
 Col_MZ_2 :                   6682E C |  Col_SBZ_1 :                  670E2 C |
 Col_SBZ_2 :                  6733A C |  Col_SLZ_1 :                  669BE C |
 Col_SLZ_2 :                  66B5C C |  Col_SYZ_1 :                  66CFA C |
 Col_SYZ_2 :                  66EEE C |  ColisionChkLayer :           14798 C |
 CollArray1 :                 641A6 C |  CollArray2 :                 651A6 C |
 CollectRing :                 9A64 C |  ContScrCounter :             1C994 C |
 ContScr_Loop :               1C9B2 C |  Cont_ClrObjRam :              4B36 C |
 Cont_GotoLevel :              4C42 C |  Cont_MainLoop :               4BE8 C |
 ContinueScreen :              4B04 C |  Cred_ClrObjRam :              562A C |
 Cred_ClrPallet :              564E C |  Cred_WaitLoop :               569C C |
 Credits :                     55EE C | *DATE :                "12/19/2024" - |
 DEBUGGER__EXTENSIONS__BTN_A_DEBUGGER :                               95ABE - |
 DEBUGGER__EXTENSIONS__BTN_B_DEBUGGER :                               95B0A - |
 DEBUGGER__EXTENSIONS__BTN_C_DEBUGGER :                                   0 - |
 DEBUGGER__EXTENSIONS__ENABLE :   1 - |  DEBUGGER__SHOW_SR_USP :          0 - |
 DEBUGGER__STR_OFFSET_SELECTOR :                                      94F5E - |
 DebugList :                  1D1C8 C |  DebugMode :                  1CF76 C |
 Debug_BackItem :             1D0CA C |  Debug_Control :              1D032 C |
 Debug_DoNothing :            1D1AA C |  Debug_Ending :               1D592 C |
 Debug_Exit :                 1D144 C |  Debug_GHZ :                  1D1D6 C |
 Debug_Index :                1CF84 C |  Debug_LZ :                   1D258 C |
 Debug_MZ :                   1D322 C |  Debug_Main :                 1CF88 C |
 Debug_MakeItem :             1D102 C |  Debug_NextItem :             1D0E6 C |
 Debug_NoLoop :               1D0FE C |  Debug_SBZ :                  1D4A8 C |
 Debug_SLZ :                  1D3B4 C |  Debug_SYZ :                  1D42E C |
 Debug_ShowItem :             1D1AC C |  Debug_Skip :                 1D00A C |
 Debug_UseList :              1CFE0 C |  Debug_Zone :                 1CFDA C |
 DeformBgLayer :               60D4 C |  Deform_GHZ :                  613A C |
 Deform_Index :                612C C |  Deform_LZ :                   61E4 C |
 Deform_MZ :                   6224 C |  Deform_SBZ :                  6392 C |
 Deform_SLZ :                  627C C |  Deform_SLZ_2 :                62F6 C |
 Deform_SYZ :                  6354 C |  DelayProgram :                278E C |
 DeleteObject :                D40E C |  DeleteObject2 :               D410 C |
 Demo :                        3196 C |  Demo_EndGHZ1 :                5B7A C |
 Demo_EndGHZ2 :                5CB8 C |  Demo_EndIndex :               3EAA C |
 Demo_EndLZ :                  5C18 C |  Demo_EndMZ :                  5BA8 C |
 Demo_EndSBZ1 :                5C68 C |  Demo_EndSBZ2 :                5C88 C |
 Demo_EndSLZ :                 5C48 C |  Demo_EndSYZ :                 5BE8 C |
 Demo_GHZ :                    40D0 C |  Demo_Index :                  3E8A C |
 Demo_Level :                  3228 C |  Demo_Levels :                 323E C |
 Demo_MZ :                     4150 C |  Demo_SS :                     4300 C |
 Demo_SYZ :                    4280 C |  Demo_Time :                    B6A C |
 Demo_TimeEnd :                 B8A C |  DisplaySprite :               D3D2 C |
 DisplaySprite2 :              D3F0 C |  DynScrResizeLoad :            6B80 C |
 DynWater_Index :              3A42 C |  DynWater_LZ1 :                3A4A C |
 DynWater_LZ2 :                3ADC C |  DynWater_LZ3 :                3AFE C |
 DynWater_SBZ3 :               3C04 C |  EndDemo_Exit :                5720 C |
 EndDemo_LampLoad :            571A C |  EndDemo_LampVar :             5732 C |
 EndDemo_Levels :              5722 C |  EndOfRom :                   95BA8 C |
 End_AllEmlds :                511A C |  End_ClrObjRam :               4F1E C |
 End_ClrRam :                  4F2E C |  End_ClrRam2 :                 4F3E C |
 End_ClrRam3 :                 4F4E C |  End_LoadData :                4FB0 C |
 End_LoadSonic :               5010 C |  End_MainLoop :                50AE C |
 End_MoveSonExit :             520A C |  End_MoveSonic :               519A C |
 End_MoveSonic2 :              51BA C |  End_MoveSonic3 :              51F2 C |
 EndingDemoLoad :              56C2 C |  EndingSequence :              4F08 C |
 EndingStLocArray :            5E96 C |  Enemy_Points :               1AD9C C |
 EniDec :                      1504 C |  Eni_JapNames :               20BE2 C |
 Eni_SSBg1 :                  2CE82 C |  Eni_SSBg2 :                  2DC46 C |
 Eni_SegaLogo :               1DFC8 C |  Eni_Title :                  1E0C0 C |
 EntryPoint :                   206 C |  ErrorExcept :                94C34 C |
 ErrorExcept.__align_flag :      80 - |  ErrorExcept.__lpos :             0 - |
 ErrorExcept.__pos :                                       FFFFFFFFFFFFFFFF - |
*ErrorExcept.__sp :               0 - |
*ErrorExcept.__str :                                      "ERROR EXCEPTION" - |
 ErrorHandler :               94C52 C |  ErrorTrap :                    200 C |
 ExitPlatform :                73D0 C |  ExitPlatform2 :               73D2 C |
 ExtraLife :                   A170 C | *FALSE :                          0 - |
*FULLPMMU :                       1 - |  FindFloor :                  147AE C |
 FindFloor2 :                 14858 C |  FindWall :                   148F4 C |
 FindWall2 :                  149A0 C |  FloorLog_Unk :               14A3C C |
 FloorLog_Unk2 :              14A92 C |  Floor_ChkTile :              1472C C |
 GameClrRAM :                   370 C |  GameInit :                     364 C |
 GameModeArray :                396 C |  GameOver :                   13620 C |
 GameProgram :                  300 C |  Go_MusicIndex :              8649A C |
 Go_PSGIndex :                864A6 C |  Go_SoundD0 :                 86496 C |
 Go_SoundIndex :              8649E C |  Go_SoundTypes :              86492 C |
 GotThroughAct :               EA4E C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - |  HudDb_ChkBonus :             1C840 C |
 HudDb_End :                  1C868 C |  HudDb_ObjCount :             1C822 C |
 HudDb_Rings :                1C80E C |  HudDb_XY :                   1C8D6 C |
 HudDb_XY2 :                  1C8F6 C |  HudDb_XYLoop :               1C8FE C |
 HudDebug :                   1C7FE C |  HudUpdate :                  1C714 C |
 Hud_1 :                      1CA00 C |  Hud_10 :                     1C9FC C |
 Hud_100 :                    1C9F8 C |  Hud_1000 :                   1C9F4 C |
*Hud_10000 :                  1C9F0 C |  Hud_100000 :                 1C9EC C |
 Hud_Base :                   1C87E C |  Hud_BonusLoop :              1CA76 C |
 Hud_ChkBonus :               1C7BE C |  Hud_ChkLives :               1C7B0 C |
 Hud_ChkRings :               1C734 C |  Hud_ChkTime :                1C754 C |
 Hud_ClrBonus :               1CABC C |  Hud_ClrBonusLoop :           1CABE C |
 Hud_ClrLives :               1CB24 C |  Hud_ClrLivesLoop :           1CB2A C |
 Hud_End :                    1C7E6 C |  Hud_Lives :                  1CACA C |
 Hud_LivesLoop :              1CAE4 C |  Hud_LoadArt :                1C93E C |
 Hud_LoadZero :               1C86A C |  Hud_Mins :                   1CA04 C |
 Hud_Rings :                  1C92C C |  Hud_Score :                  1C936 C |
 Hud_ScoreLoop :              1C944 C |  Hud_Secs :                   1CA0E C |
 Hud_TilesBase :              1C8C6 C |  Hud_TilesZero :              1C8D2 C |
 Hud_TimeLoop :               1CA1C C |  Hud_TimeRingBonus :          1CA68 C |
 HurtSonic :                  1ADBE C |  Hurt_ChkSpikes :             1AE28 C |
 Hurt_NoRings :               1AE58 C |  Hurt_Reverse :               1AE1A C |
 Hurt_Shield :                1ADE4 C |  Hurt_Sound :                 1AE4E C |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      1 - |  IllegalInstr :               94B44 C |
 IllegalInstr.__align_flag :     80 - |  IllegalInstr.__lpos :            0 - |
 IllegalInstr.__pos :                                      FFFFFFFFFFFFFFFF - |
*IllegalInstr.__sp :              0 - |
*IllegalInstr.__str :                                 "ILLEGAL INSTRUCTION" - |
 JoypadInit :                   F9C C |  Joypad_Read :                  FDA C |
 Joypad_WaitZ80 :               FA4 C |  KillSonic :                  1AE60 C |
 Kill_NoDeath :               1AEB4 C |  Kill_Sound :                 1AEAE C |
 KosDec :                      1682 C |  Kos_EndFlowers :             63008 C |
 Kos_Z80 :                    8798C C | *LISTON :                         3 - |
 LSelectPointers :             3160 C |  LZDynamicWater :              3A18 C |
 LZFindChunk :                 3D4E C |  LZLoadChunk :                 3D54 C |
 LZMoveWater :                 39D2 C |  LZSlide_Move :                3D6A C |
 LZWaterEffects :              39B6 C |  LZWaterSlides :               3D1C C |
 LZWindTunnels :               3C1A C |  LZWind_Data :                 3CFC C |
 LZWind_Loop :                 3C42 C |  LZWind_Move :                 3CA6 C |
 LZWind_MoveDown :             3CCE C |  LevSelControls :              3246 C |
 LevSelTextLoad :              32CC C |  LevSel_ChgLine :              336C C |
 LevSel_ChgSnd :               3358 C |  LevSel_Credits :              30DA C |
 LevSel_Down :                 3276 C |  LevSel_Ending :               30CC C |
 LevSel_Level :                3120 C |  LevSel_Level_SS :             30F0 C |
 LevSel_NoCheat :              30BA C |  LevSel_NoMove :               32CA C |
 LevSel_PlaySnd :              30C6 C |  LevSel_Refresh :              3286 C |
 LevSel_Refresh2 :             32C2 C |  LevSel_Right :                32B2 C |
 LevSel_SndTest :              3290 C |  LevSel_UpDown :               3256 C |
 LevSz_ChkLamp :               5EB6 C |  LevSz_SonicPos :              5EF0 C |
 LevSz_StartLoc :              5ECC C |  LevSz_Unk :                   5FEC C |
 Level :                       3588 C |  LevelLayoutLoad :             6B5A C |
 LevelMenuText :               3388 C |  LevelOrder :                  C4CA C |
 LevelSelect :                 3076 C |  LevelSelectCode_J :           318A C |
 LevelSelectCode_US :          3190 C |  LevelSizeArray :              5D46 C |
 LevelSizeLoad :               5CE8 C |  Level_BgmNotLZ4 :             36DE C |
 Level_ChkDebug :              3768 C |  Level_ChkDemo :               3936 C |
 Level_ChkWater :              377C C |  Level_ChkWaterPal :           385E C |
 Level_ClrCardArt :            38AA C |  Level_ClrObjRam :             35F2 C |
 Level_ClrRam :                35E8 C |  Level_ClrVars :               3602 C |
 Level_ClrVars2 :              3612 C |  Level_ClrVars3 :              3622 C |
 Level_Delay :                 3876 C |  Level_DelayLoop :             387A C |
 Level_Demo :                  3834 C |  Level_End :                  7E3FE C |
 Level_EndDemo :               3954 C |  Level_GHZ1 :                 6AE86 C |
 Level_GHZ2 :                 6BE8A C |  Level_GHZ3 :                 6CE8E C |
 Level_GHZbg :                6DE8E C |  Level_GetBgm :                36C8 C |
 Level_Index :                6AD36 C |  Level_LZ1 :                  6DEB8 C |
 Level_LZ2 :                  6EFBE C |  Level_LZ3 :                  6FFC2 C |
 Level_LZ3_WALL :             70FC2 C |  Level_LZbg :                 6EEB8 C |
 Level_LoadObj :               37A8 C |  Level_LoadPal :               3694 C |
 Level_MZ1 :                  72FCA C |  Level_MZ1bg :                73FCA C |
 Level_MZ2 :                  74044 C |  Level_MZ2bg :                75044 C |
 Level_MZ3 :                  750DA C |  Level_MZ3bg :                760DA C |
 Level_MainLoop :              38C8 C |  Level_PlayBgm :               36E8 C |
 Level_SBZ1 :                 7C24E C |  Level_SBZ1bg :               7D24E C |
 Level_SBZ2 :                 7D28C C |  Level_SBZ2bg :               7E28C C |
 Level_SBZ3 :                 71FC6 C |  Level_SLZ1 :                 76186 C |
 Level_SLZ2 :                 77200 C |  Level_SLZ3 :                 78200 C |
 Level_SLZbg :                77186 C |  Level_SYZ1 :                 79204 C |
 Level_SYZ2 :                 7A242 C |  Level_SYZ3 :                 7B246 C |
 Level_SYZbg :                7A204 C |  Level_StartGame :             38C2 C |
 Level_TtlCard :               36FC C |  Level_WaterPal :              36B8 C |
 Level_WaterPal2 :             3872 C |  Line1010Emu :                94BF4 C |
 Line1010Emu.__align_flag :       0 - |  Line1010Emu.__lpos :             0 - |
 Line1010Emu.__pos :                                       FFFFFFFFFFFFFFFF - |
*Line1010Emu.__sp :               0 - |
*Line1010Emu.__str :                                   "LINE 1010 EMULATOR" - |
 Line1111Emu :                94C14 C |  Line1111Emu.__align_flag :       0 - |
 Line1111Emu.__lpos :             0 - |
 Line1111Emu.__pos :                                       FFFFFFFFFFFFFFFF - |
*Line1111Emu.__sp :               0 - |
*Line1111Emu.__str :                                   "LINE 1111 EMULATOR" - |
 LoadPLC :                     1366 C |  LoadPLC2 :                    1398 C |
 LoadSonicDynPLC :            139FE C |  LoadTiles :                  1C41A C |
 LoadTilesAsYouMove :          6700 C |  LoadTilesFromStart :          6AA0 C |
 LoadTilesFromStart2 :         6AC6 C |  LoopTileNums :                5FD0 C |
*MACEXP :                         7 - | *MDDBG__Art1bpp_Font :        94FA2 - |
*MDDBG__Console_GetPosAsXY :  95750 - | *MDDBG__Console_Init :        9568C - |
*MDDBG__Console_InitShared :  956CC - | *MDDBG__Console_Reset :       956CA - |
*MDDBG__Console_SetBasePattern :                                      957A4 - |
*MDDBG__Console_SetPosAsXY :  9571C - |
*MDDBG__Console_SetPosAsXY_Stack :                                    95716 - |
*MDDBG__Console_SetWidth :    957C0 - |
*MDDBG__Console_StartNewLine :                                        95776 - |
*MDDBG__Console_Write :       957E4 - | *MDDBG__Console_WriteLine :   957E0 - |
*MDDBG__Console_WriteLine_Formatted :                                 958AA - |
*MDDBG__Console_WriteLine_WithPattern :                               957DE - |
*MDDBG__Console_Write_Formatted :                                     958AE - |
 MDDBG__Debugger_AddressRegisters :                                   95ABE - |
 MDDBG__Debugger_Backtrace :  95B0A - | *MDDBG__Decomp1bpp :          958DE - |
 MDDBG__ErrorHandler :        94C52 - |
*MDDBG__ErrorHandler_ClearConsole :                                   959B4 - |
*MDDBG__ErrorHandler_ConsoleConfig_Initial :                          94F2A - |
*MDDBG__ErrorHandler_ConsoleConfig_Shared :                           94F2E - |
*MDDBG__ErrorHandler_ConsoleOnly :                                    9598E - |
*MDDBG__ErrorHandler_ExtraDebuggerList :                              95AB2 - |
 MDDBG__ErrorHandler_PagesController :                                95A18 - |
*MDDBG__ErrorHandler_PauseConsole :                                   959DE - |
*MDDBG__ErrorHandler_SetupVDP :                                       94EA2 - |
*MDDBG__ErrorHandler_VDPConfig :                                      94ED8 - |
*MDDBG__ErrorHandler_VDPConfig_Nametables :                           94EEE - |
*MDDBG__Error_DrawOffsetLocation :                                    94E0A - |
*MDDBG__Error_DrawOffsetLocation2 :                                   94E0E - |
 MDDBG__Error_DrawOffsetLocation__inj :                               94E14 - |
*MDDBG__Error_IdleLoop :      94D7A - | *MDDBG__Error_InitConsole :   94D94 - |
*MDDBG__Error_MaskStackBoundaries :                                   94DA0 - |
*MDDBG__FormatString :        955B2 - | *MDDBG__GetSymbolByOffset :   9529C - |
*MDDBG__KDebug_FlushLine :    95952 - | *MDDBG__KDebug_Write :        95960 - |
*MDDBG__KDebug_WriteLine :    9595C - |
*MDDBG__KDebug_WriteLine_Formatted :                                  958FA - |
*MDDBG__KDebug_Write_Formatted :                                      958FE - |
 MDDBG__Str_OffsetLocation_24bit :                                    94F5E - |
*MDDBG__Str_OffsetLocation_32bit :                                    94F67 - |
*MDDBG__VSync :               95A78 - |  MLB_ChkSBZPal :               6B34 C |
 MLB_NormalPal :               6B46 C |  MLB_UsePal0E :                6B44 C |
 MOMCPU :                     68000 - | *MOMCPUNAME :               "68000" - |
 MainGameLoop :                 388 C |  MainLoadBlockLoad :           6AEE C |
 MainLoadBlocks :             1D5FC C |  Map_BossItems :              17BAE C |
 Map_Eggman :                 17AE6 C |  Map_Eggman2 :                1A1AC C |
 Map_FZBoss :                 1A1EE C |  Map_SSWalls :                2C4CA C |
 Map_SS_Chaos1 :              1B728 C |  Map_SS_Chaos2 :              1B72C C |
 Map_SS_Chaos3 :              1B730 C |  Map_SS_Down :                1B718 C |
 Map_SS_Glass :               1B6E8 C |  Map_SS_R :                   1B6D4 C |
 Map_SS_Up :                  1B708 C |  Map_Sonic :                  21148 C |
 Map_obj08 :                  1438A C |  Map_obj0A :                  13F0E C |
 Map_obj0B :                  110D2 C |  Map_obj0C :                  111A2 C |
 Map_obj0D :                   EAFC C |  Map_obj0E :                   A66E C |
 Map_obj0F :                   A5AA C |  Map_obj11 :                   7744 C |
 Map_obj12 :                   E74A C |  Map_obj14 :                   B150 C |
 Map_obj15 :                   7A54 C |  Map_obj15a :                  7A72 C |
 Map_obj15b :                 10856 C |  Map_obj16 :                  11D3C C |
 Map_obj17 :                   7C00 C |  Map_obj18 :                   7F44 C |
 Map_obj18a :                  7F90 C |  Map_obj18b :                  7FA2 C |
 Map_obj18x :                  7F02 C |  Map_obj1A :                   83A4 C |
 Map_obj1B :                  10F1C C |  Map_obj1C :                   865A C |
 Map_obj1D :                   8720 C |  Map_obj1E :                   8C5E C |
 Map_obj1F :                   9546 C |  Map_obj21 :                  1C610 C |
 Map_obj22 :                   9826 C |  Map_obj23 :                   98F6 C |
 Map_obj24 :                   8CA2 C |  Map_obj25 :                   9D7C C |
 Map_obj26 :                   A370 C |  Map_obj27 :                   8CC2 C |
 Map_obj28 :                   9260 C |  Map_obj28a :                  9278 C |
 Map_obj28b :                  9290 C |  Map_obj29 :                   92A8 C |
 Map_obj2A :                   87F0 C |  Map_obj2B :                   A9B0 C |
 Map_obj2C :                   AA56 C |  Map_obj2D :                   AC42 C |
 Map_obj2F :                   B0B6 C |  Map_obj30 :                   B3DA C |
 Map_obj31 :                   B92A C |  Map_obj32 :                   BC80 C |
 Map_obj33 :                   C0C0 C |  Map_obj34 :                   C7B8 C |
 Map_obj36 :                   CDBA C |  Map_obj38 :                  14170 C |
 Map_obj39 :                   C976 C |  Map_obj3A :                   C9AA C |
 Map_obj3B :                   CEE0 C |  Map_obj3C :                   D084 C |
 Map_obj3E :                  1AB40 C |  Map_obj3F :                   8D08 C |
 Map_obj40 :                   F55C C |  Map_obj41 :                   DAE6 C |
 Map_obj42 :                   DD0C C |  Map_obj43 :                   DF6C C |
 Map_obj44 :                   E01A C |  Map_obj45 :                   BA36 C |
 Map_obj46 :                   E6CC C |  Map_obj47 :                   E8C6 C |
 Map_obj48 :                   7FB2 C |  Map_obj4A :                  1422A C |
 Map_obj4B :                   9DBC C |  Map_obj4C :                   F008 C |
 Map_obj4E :                   F2EC C |  Map_obj50 :                   F6EA C |
 Map_obj51 :                   FB8E C |  Map_obj52 :                   FE04 C |
 Map_obj52a :                  FE5A C |  Map_obj53 :                   854A C |
 Map_obj54 :                   EFCE C |  Map_obj55 :                   FFF8 C |
 Map_obj56 :                  104BA C |  Map_obj57 :                  1070C C |
 Map_obj57a :                 10714 C |  Map_obj59 :                  10AFA C |
 Map_obj5A :                  10C34 C |  Map_obj5B :                  10DEC C |
 Map_obj5C :                  10E46 C |  Map_obj5D :                  113C0 C |
 Map_obj5E :                  11752 C |  Map_obj5Ea :                 11794 C |
 Map_obj5F :                  119D0 C |  Map_obj60 :                  11C86 C |
 Map_obj61 :                  11F64 C |  Map_obj62 :                  120B8 C |
 Map_obj63 :                  1241A C |  Map_obj64 :                  12768 C |
 Map_obj65 :                  128F0 C |  Map_obj66 :                  15080 C |
 Map_obj67 :                  15474 C |  Map_obj69 :                  156CE C |
 Map_obj69a :                 15728 C |  Map_obj6A :                  15986 C |
 Map_obj6B :                  15D56 C |  Map_obj6C :                  15F18 C |
 Map_obj6D :                   E3BC C |  Map_obj6E :                  15FCE C |
 Map_obj70 :                  16414 C |  Map_obj71 :                  11266 C |
 Map_obj76 :                  195D0 C |  Map_obj78 :                  16B56 C |
 Map_obj79 :                  16EDE C |  Map_obj7B :                  18EB0 C |
 Map_obj7C :                   9E5E C |  Map_obj7D :                  1702E C |
 Map_obj7E :                   CA6C C |  Map_obj7F :                   CBC6 C |
 Map_obj80 :                   4E78 C |  Map_obj82 :                  19806 C |
 Map_obj83 :                  19AE4 C |  Map_obj84 :                  1A448 C |
 Map_obj86 :                  1A828 C |  Map_obj86a :                 1A878 C |
 Map_obj87 :                   54AA C |  Map_obj88 :                   55A4 C |
 Map_obj89 :                   55DC C |  Map_obj8A :                  170C8 C |
 Map_obj8B :                   59E6 C |  MarkObjGone :                 F46A C |
 Mark_ChkGone :                F48C C |  Mark_Delete :                 F49E C |
 MoveDemo_On :                 3E1A C | *MoveDemo_Record :             3DE2 C |
 MoveSonicInDemo :             3DDA C |  Music81 :                    890EC C |
 Music82 :                    89854 C |  Music83 :                    89CA4 C |
 Music84 :                    8A102 C |  Music85 :                    8A570 C |
 Music86 :                    8A9BC C |  Music87 :                    8AF0C C |
 Music88 :                    8B0F2 C |  Music89 :                    8B1E0 C |
 Music8A :                    8B50C C |  Music8B :                    8B6B8 C |
 Music8C :                    8B952 C |  Music8D :                    8BB6E C |
 Music8E :                    8BD8A C |  Music8F :                    8BEE0 C |
 Music90 :                    8C030 C |  Music91 :                    8C18E C |
 Music92 :                    8D45C C |  Music93 :                    8D586 C |
 MusicIndex :                 8659E C |  MusicList :                   3580 C |
 MusicList2 :                 12A6A C |  MvSonic2 :                    7946 C |
 MvSonicOnPtfm :               792E C |  MvSonicOnPtfm2 :              793A C |
*NESTMAX :                      100 - |  NemDec :                      1226 C |
 NemDec2 :                     1270 C |  NemDec3 :                     12B2 C |
 NemDec4 :                     1314 C |  Nem_Ball :                   2F61C C |
 Nem_BallHog :                355AC C |  Nem_Basaran :                38178 C |
 Nem_BigFlash :               3A9E0 C |  Nem_BlackBird :              3B5F4 C |
 Nem_Bomb :                   386BC C |  Nem_Bonus :                  3AB54 C |
 Nem_Bridge :                 2F4E8 C |  Nem_Bubbles :                309A4 C |
 Nem_Bumper :                 33DB4 C |  Nem_Burrobot :               363E8 C |
 Nem_Buzz :                   35E5A C |  Nem_Cater :                  38B32 C |
 Nem_Chicken :                3B498 C |  Nem_Chopper :                36AD2 C |
 Nem_ContSonic :              3AE56 C |  Nem_Cork :                   31EA6 C |
 Nem_Crabmeat :               3596C C |  Nem_CreditText :             63820 C |
 Nem_Cutter :                 345E0 C |  Nem_Eggman :                 5E50C C |
 Nem_Electric :               34EE8 C |  Nem_EndEggman :              62C32 C |
 Nem_EndEm :                  60F12 C |  Nem_EndFlower :              63598 C |
 Nem_EndSonic :               61110 C |  Nem_EndStH :                 63E1E C |
 Nem_Exhaust :                60DF2 C |  Nem_Explode :                39A1E C |
 Nem_Fan :                    3369A C |  Nem_FlamePipe :              35166 C |
 Nem_FlapDoor :               3083A C |  Nem_Flicky :                 3B9C2 C |
 Nem_FzBoss :                 6010A C |  Nem_FzEggman :               60872 C |
 Nem_GHZ :                    3EF74 C |  Nem_GameOver :               3A134 C |
 Nem_Gargoyle :               31946 C | *Nem_GhzGrass :               324E4 C |
*Nem_GhzLog :                 2F836 C | *Nem_GhzUnkBlock :            2F5D4 C |
 Nem_GhzWall1 :               2FCA4 C |  Nem_GhzWall2 :               2FD42 C |
 Nem_Girder :                 35496 C | *Nem_Goggle :                 2C344 C |
 Nem_HSpring :                3A2C6 C |  Nem_Harpoon :                31152 C |
 Nem_Hud :                    392CE C |  Nem_JapNames :               20CA0 C |
 Nem_Jaws :                   36D3A C |  Nem_LZ :                     43D80 C |
 Nem_Lamp :                   3A920 C |  Nem_Lava :                   32816 C |
 Nem_Lives :                  393C4 C |  Nem_LzBlock1 :               31FD0 C |
 Nem_LzBlock2 :               31AB6 C |  Nem_LzBlock3 :               30FFA C |
 Nem_LzDoor1 :                310B0 C |  Nem_LzDoor2 :                31312 C |
 Nem_LzPlatfm :               31D6E C |  Nem_LzPole :                 312AE C |
 Nem_LzSonic :                2BFA0 C |  Nem_LzSpikeBall :            306BA C |
 Nem_LzSwitch :               33F80 C |  Nem_LzWheel :                31464 C |
 Nem_MZ :                     48404 C |  Nem_MiniSonic :              3B106 C |
 Nem_Monitors :               395BE C |  Nem_Motobug :                374E8 C |
 Nem_MzBlock :                3312C C |  Nem_MzFire :                 32538 C |
 Nem_MzGlass :                3242C C |  Nem_MzMetal :                320E0 C |
 Nem_MzSwitch :               3236E C | *Nem_MzUnkBlock :             33290 C |
 Nem_Newtron :                37772 C |  Nem_Orbinaut :               38954 C |
 Nem_Pig :                    3B88C C |  Nem_Points :                 3A084 C |
 Nem_PplRock :                2FB76 C |  Nem_Prison :                 5F05A C |
 Nem_Pylon :                  33940 C |  Nem_Rabbit :                 3B340 C |
 Nem_ResultEm :               2F206 C |  Nem_Ring :                   394CA C |
 Nem_Roller :                 36FC4 C |  Nem_SBZ :                    592BA C |
 Nem_SLZ :                    4CA22 C |  Nem_SS1UpBlock :             2E5F8 C |
 Nem_SSBgCloud :              2DF46 C |  Nem_SSBgFish :               2CFB6 C |
 Nem_SSEmStars :              2E6EE C |  Nem_SSEmerald :              2EE90 C |
 Nem_SSGOAL :                 2E43A C |  Nem_SSGhost :                2EFF8 C |
 Nem_SSGlass :                2F182 C |  Nem_SSRBlock :               2E528 C |
 Nem_SSRedWhite :             2E74C C |  Nem_SSUpDown :               2EC9C C |
 Nem_SSWBlock :               2F0A8 C |  Nem_SSWalls :                2C54A C |
 Nem_SSZone1 :                2E7DE C |  Nem_SSZone2 :                2E8A0 C |
 Nem_SSZone3 :                2E96E C |  Nem_SSZone4 :                2EA3A C |
 Nem_SSZone5 :                2EB02 C |  Nem_SSZone6 :                2EBCC C |
 Nem_SYZ :                    52C3C C |  Nem_Sbz2Eggman :             5F8DE C |
 Nem_SbzBlock :               35068 C |  Nem_SbzDoor1 :               352F2 C |
 Nem_SbzDoor2 :               3539A C |  Nem_SbzFloor :               34E90 C |
 Nem_SbzWheel1 :              342F0 C |  Nem_SbzWheel2 :              34344 C |
 Nem_Seal :                   3B770 C |  Nem_Seesaw :                 33318 C |
 Nem_SegaLogo :               1DB66 C |  Nem_Shield :                 2BCC2 C |
 Nem_SignPost :               3A4A4 C |  Nem_SlideFloor :             35342 C |
 Nem_SlzBlock :               33C04 C |  Nem_SlzCannon :              33D10 C |
 Nem_SlzSpike :               33554 C |  Nem_SlzSwing :               33A22 C |
 Nem_SlzWall :                338DE C | *Nem_Smoke :                  2BB84 C |
 Nem_SpikePole :              2FA4A C |  Nem_Spikes :                 2F7BA C |
 Nem_SpinPform :              34982 C |  Nem_Splash :                 2FEC6 C |
*Nem_Splats :                 38474 C |  Nem_Squirrel :               3BAFC C |
 Nem_Stalk :                  2F384 C |  Nem_Stars :                  2BE58 C |
 Nem_Stomper :                347E4 C |  Nem_Swing :                  2F3CE C |
*Nem_SyzSparkle :             2BC88 C |  Nem_SyzSpike1 :              34062 C |
 Nem_SyzSpike2 :              33F1E C |  Nem_TIT_1st :                3BC58 C |
 Nem_TIT_2nd :                3D2B8 C |  Nem_TitleCard :              38CC0 C |
 Nem_TitleFg :                1E1D4 C |  Nem_TitleSonic :             1F1E0 C |
 Nem_TitleTM :                20BAE C |  Nem_TrapDoor :               34CB2 C |
 Nem_TryAgain :               622EE C | *Nem_UnkExplode :             36200 C |
*Nem_UnkFire :                2C0AA C |  Nem_VSpring :                3A3C8 C |
 Nem_Warp :                   2C0FC C |  Nem_Water :                  2FDA2 C |
 Nem_Weapons :                5ED70 C |  Nem_Yadrin :                 37D90 C |
 NotOnScreen :                 D670 C |  NotOnScreen2 :                D6A4 C |
 OPL_ClrList :                 D6F2 C |  OPL_Index :                   D6B6 C |
 OPL_Main :                    D6BA C |  OPL_MakeItem :                D81E C |
 OPL_Next :                    D74E C |  Obj01 :                      12974 C |
 Obj01_ChkInvin :             12A84 C |  Obj01_ChkRoll :              1314E C |
 Obj01_ChkShoes :             12ACA C |  Obj01_Control :              129E0 C |
 Obj01_Death :                13604 C |  Obj01_Display :              12A7E C |
 Obj01_DoRoll :               13158 C |  Obj01_ExitChk :              12AFE C |
 Obj01_Hurt :                 13594 C |  Obj01_InWater :              12B24 C |
 Obj01_Index :                1298E C |  Obj01_JumpMove :             13030 C |
 Obj01_Main :                 12998 C |  Obj01_MdJump :               12BDE C |
 Obj01_MdJump2 :              12C28 C |  Obj01_MdNormal :             12BBA C |
 Obj01_MdRoll :               12C08 C |  Obj01_Modes :                12A62 C |
 Obj01_NoRoll :               1314C C |  Obj01_Normal :               12980 C |
 Obj01_NotLeft :              12C7A C |  Obj01_NotRight :             12C86 C |
 Obj01_OutWater :             12B76 C |  Obj01_PlayMusic :            12AB4 C |
 Obj01_ResetLevel :           136A4 C |  Obj01_ResetScr :             12D52 C |
 Obj01_ResetScr2 :            13034 C |  Obj01_RmvInvin :             12AC4 C |
 Obj03 :                      1BDEC C |  Obj03_ICX_B1 :               1BF02 C |
 Obj03_ICX_B2 :               1BF1C C |  Obj03_Index :                1BE1E C |
 Obj03_Init :                 1BE24 C |  Obj03_Init_CheckX :          1BE8A C |
 Obj03_Init_CheckX_Next :     1BEAE C |  Obj03_Init_Next :            1BE7E C |
 Obj03_MXA_B1 :               1BF6C C |  Obj03_MXA_B2 :               1BF86 C |
 Obj03_MYA_B1 :               1C058 C |  Obj03_MYA_B2 :               1C072 C |
 Obj03_MY_B1 :                1BFEE C |  Obj03_MY_B2 :                1C008 C |
 Obj03_MainX :                1BEAE C |  Obj03_MainX_Alt :            1BF30 C |
 Obj03_MainY :                1BF9A C |  Obj03_MainY_Alt :            1C01C C |
 Obj03_MarkChkGone :          1BE18 C |  Obj08 :                      140AE C |
 Obj08_Delete :               14104 C |  Obj08_Display :              140EC C |
 Obj08_Index :                140BC C |  Obj08_Main :                 140C2 C |
 Obj09 :                      1B74C C |  Obj09_BumpSnd :              1BCE4 C |
 Obj09_Chk1Up :               1BB90 C |  Obj09_ChkBumper :            1BC76 C |
 Obj09_ChkCont :              1BB54 C |  Obj09_ChkDebug :             1B7AC C |
 Obj09_ChkEmer :              1BBBA C |  Obj09_ChkGhost :             1BC00 C |
 Obj09_ChkGhostTag :          1BC0C C |  Obj09_ChkGlass :             1BDA2 C |
 Obj09_ChkItems :             1BB1A C |  Obj09_ChkItems2 :            1BC56 C |
 Obj09_ChkRight :             1B834 C |  Obj09_DOWNblock :            1BD38 C |
 Obj09_DOWNsnd :              1BD62 C |  Obj09_Display :              1B802 C |
 Obj09_Exit2 :                1B9FC C |  Obj09_ExitStage :            1B9A8 C |
 Obj09_Fall :                 1BA1E C |  Obj09_GOAL :                 1BCEE C |
 Obj09_Get1Up :               1BBA4 C |  Obj09_GetCont :              1BB68 C |
 Obj09_GetEmer :              1BBD4 C |  Obj09_GhostLoop :            1BC36 C |
 Obj09_GhostLoop2 :           1BC34 C |  Obj09_GhostNotSolid :        1BC4E C |
 Obj09_Glass :                1BDBA C |  Obj09_GlassSnd :             1BDDE C |
 Obj09_GlassUpdate :          1BDDA C |  Obj09_InAir :                1B7F6 C |
 Obj09_Index :                1B768 C |  Obj09_Jump :                 1B91E C |
 Obj09_Main :                 1B770 C |  Obj09_MakeGhostSolid :       1BC24 C |
 Obj09_Modes :                1B7E4 C |  Obj09_Move :                 1B828 C |
 Obj09_MoveLeft :             1B8C0 C |  Obj09_MoveRight :            1B8F0 C |
 Obj09_NoCont :               1BB8C C |  Obj09_NoDebug :              1B7C0 C |
 Obj09_NoEmer :               1BBF2 C |  Obj09_NoGhost :              1BC20 C |
 Obj09_NoGlass :              1BDE8 C |  Obj09_NoJump :               1B960 C |
 Obj09_NoReplace :            1BC40 C |  Obj09_Normal :               1B75A C |
 Obj09_OnWall :               1B7E8 C |  Obj09_Rblock :               1BD6C C |
 Obj09_RevStage :             1BD94 C |  Obj09_UPblock :              1BD04 C |
 Obj09_UPsnd :                1BD2E C |  Obj0A :                      13A58 C |
 Obj0A_AirLeft :              13B58 C |  Obj0A_Animate :              13AD0 C |
 Obj0A_ChkWater :             13ADC C |  Obj0A_Countdown :            13C5C C |
 Obj0A_Delete :               13B38 C |  Obj0A_Delete2 :              13B52 C |
 Obj0A_Delete3 :              13B8A C |  Obj0A_Display :              13B3E C |
 Obj0A_Display2 :             13B72 C |  Obj0A_GoMakeItem :           13D6A C |
 Obj0A_Index :                13A66 C |  Obj0A_Main :                 13A78 C |
 Obj0A_MakeItem :             13D7C C |  Obj0A_ReduceAir :            13CE0 C |
 Obj0A_ShowNumber :           13B90 C |  Obj0A_WarnSound :            13CD6 C |
 Obj0A_Wobble :               13AFA C |  Obj0A_WobbleData :           13BDC C |
 Obj0B :                      10FB6 C |  Obj0B_Action :               11002 C |
 Obj0B_Display :              110CE C |  Obj0B_Grab :                 11078 C |
 Obj0B_Index :                10FC4 C |  Obj0B_LetGo :                11058 C |
 Obj0B_Main :                 10FCA C |  Obj0B_MoveDown :             1103E C |
 Obj0B_MoveUp :               1101C C |  Obj0B_Release :              11062 C |
 Obj0C :                      110F6 C |  Obj0C_Display :              1118E C |
 Obj0C_Index :                11104 C |  Obj0C_Main :                 11108 C |
 Obj0C_OpenClose :            11134 C |  Obj0C_Solid :                11156 C |
 Obj0D :                       E8EE C |  Obj0D_Index :                 E92A C |
 Obj0D_Main :                  E934 C |  Obj0D_SonicRun :              EA18 C |
 Obj0D_SparkPos :              EA08 C |  Obj0D_Sparkle :               E99E C |
 Obj0D_Spin :                  E982 C |  Obj0D_Touch :                 E958 C |
 Obj0E :                       A402 C |  Obj0E_Animate :               A472 C |
 Obj0E_Delay :                 A44C C |  Obj0E_Display :               A46C C |
 Obj0E_Index :                 A410 C |  Obj0E_Main :                  A418 C |
 Obj0E_Move :                  A45C C |  Obj0E_Wait :                  A45A C |
 Obj0F :                       A482 C |  Obj0F_Index :                 A494 C |
 Obj0F_Main :                  A49A C |  Obj0F_PrsStart :              A4E0 C |
 Obj10 :                      1BDEA C |  Obj11 :                       713C C |
 Obj11_Action :                7214 C |  Obj11_Action2 :               7398 C |
 Obj11_Bend :                  7430 C |  Obj11_BendData :              74DC C |
 Obj11_BendData2 :             75EC C |  Obj11_ChkDel :                76EC C |
 Obj11_DelAll :                770C C |  Obj11_DelLoop :               7718 C |
 Obj11_Delete :                7732 C |  Obj11_Delete2 :               7738 C |
 Obj11_Display :               7224 C |  Obj11_Display2 :              773E C |
 Obj11_Index :                 714A C |  Obj11_Main :                  7156 C |
 Obj11_MakeBdg :               719C C |  Obj11_MoveSonic :             7404 C |
 Obj11_Solid :                 722C C |  Obj11_WalkOff :               73A2 C |
 Obj12 :                       E6D4 C |  Obj12_Animate :               E70A C |
 Obj12_ChkDel :                E728 C |  Obj12_Index :                 E6E2 C |
 Obj12_Main :                  E6E6 C |  Obj13 :                       E060 C |
 Obj13_Index :                 E072 C |  Obj13_Main :                  E07C C |
 Obj13_MakeLava :              E09C C |  Obj13_Rates :                 E076 C |
 Obj14 :                       E0CC C |  Obj14_Action :                E182 C |
 Obj14_ChkDel :                E1A0 C |  Obj14_Delete :                E288 C |
 Obj14_Index :                 E0DE C |  Obj14_Main :                  E0F6 C |
 Obj14_PlaySnd :               E178 C |  Obj14_SetSpeed :              E144 C |
 Obj14_Speeds :                E0E4 C |  Obj14_Type00 :                E1D2 C |
 Obj14_Type04 :                E1FA C |  Obj14_Type05 :                E21C C |
 Obj14_Type06 :                E23E C |  Obj14_Type07 :                E262 C |
 Obj14_Type08 :                E286 C |  Obj14_TypeIndex :             E1C0 C |
 Obj15 :                       7762 C |  Obj15_Action :                78F8 C |
 Obj15_Action2 :               7904 C |  Obj15_ChkDel :                7A0A C |
 Obj15_DelAll :                7A2A C |  Obj15_DelLoop :               7A32 C |
 Obj15_Delete :                7A4A C |  Obj15_Display :               7A50 C |
 Obj15_Index :                 7770 C |  Obj15_Main :                  777E C |
 Obj15_MakeChain :             7834 C |  Obj15_Move :                  7970 C |
 Obj15_Move2 :                 79C6 C |  Obj15_NotSLZ :                77DC C |
 Obj15_SetLength :             780A C |  Obj15_SetSolid :              78E8 C |
 Obj15_Solid :                 736C C |  Obj16 :                      11CA6 C |
 Obj16_ChkDel :               11D20 C |  Obj16_Data :                 11D04 C |
 Obj16_Index :                11CB4 C |  Obj16_Main :                 11CBA C |
 Obj16_Move :                 11CEA C |  Obj16_Wait :                 11D0A C |
 Obj17 :                       7AAE C |  Obj17_Action :                7B84 C |
 Obj17_ChkDel :                7BB0 C |  Obj17_DelAll :                7BD0 C |
 Obj17_DelLoop :               7BDC C |  Obj17_Delete :                7BF2 C |
 Obj17_Display :               7BF8 C |  Obj17_Index :                 7ABC C |
 Obj17_Main :                  7AC6 C |  Obj17_MakeHelix :             7B14 C |
 Obj17_RotateSpikes :          7B90 C |  Obj18 :                       7C3A C |
 Obj18_01_Move :               7D9A C |  Obj18_02_Move :               7DE0 C |
 Obj18_03_NoMove :             7E00 C |  Obj18_03_Wait :               7E02 C |
 Obj18_07_NoMove :             7E9C C |  Obj18_07_Wait :               7E9E C |
 Obj18_08_NoStop :             7EC0 C |  Obj18_Action :                7CF2 C |
 Obj18_Action2 :               7D02 C |  Obj18_ChgMotion :             7ED8 C |
 Obj18_ChkDel :                7EE0 C |  Obj18_Delete :                7EFE C |
 Obj18_Index :                 7C48 C |  Obj18_Main :                  7C52 C |
 Obj18_Move :                  7D4E C |  Obj18_NotSLZ :                7CA2 C |
 Obj18_NotSYZ :                7C80 C |  Obj18_Nudge :                 7D34 C |
 Obj18_SetFrame :              7CDA C |  Obj18_Solid :                 7CDE C |
 Obj18_Type00 :                7D7C C |  Obj18_Type01 :                7D8E C |
 Obj18_Type02 :                7DD4 C |  Obj18_Type03 :                7DEC C |
 Obj18_Type04 :                7E14 C |  Obj18_Type05 :                7D7E C |
 Obj18_Type06 :                7DC4 C |  Obj18_Type07 :                7E7E C |
 Obj18_Type08 :                7EAA C |  Obj18_Type0A :                7EC2 C |
 Obj18_Type0B :                7DB6 C |  Obj18_Type0C :                7DA6 C |
 Obj18_TypeIndex :             7D62 C |  Obj19 :                       7FB0 C |
 Obj1A :                       8018 C |  Obj1A_ChkTouch :              806E C |
 Obj1A_Collapse :              827C C |  Obj1A_Delete :                8122 C |
 Obj1A_Display :               80C2 C |  Obj1A_Index :                 8026 C |
 Obj1A_Main :                  8032 C |  Obj1A_Slope :                 8080 C |
 Obj1A_SlopeData :             8374 C |  Obj1A_TimeZero :              8112 C |
 Obj1A_Touch :                 8092 C |  Obj1A_WalkOff :               80A4 C |
 Obj1B :                      10E76 C |  Obj1B_Action :               10EAC C |
 Obj1B_Animate :              10EEA C |  Obj1B_Display :              10F18 C |
 Obj1B_Index :                10E84 C |  Obj1B_Main :                 10E88 C |
 Obj1C :                       85CE C |  Obj1C_ChkDel :                8610 C |
 Obj1C_Index :                 85DC C |  Obj1C_Main :                  85E0 C |
 Obj1C_Var :                   8632 C |  Obj1D :                       8662 C |
 Obj1D_Action :                86A0 C |  Obj1D_ChkDel :                86BA C |
 Obj1D_ChkTouch :              86E4 C |  Obj1D_Delete :                86DE C |
 Obj1D_Index :                 8670 C |  Obj1D_Main :                  8676 C |
 Obj1E :                       8950 C |  Obj1E_Action :                89B2 C |
 Obj1E_Index :                 895E C |  Obj1E_Main :                  8962 C |
 Obj1E_MakeBall :              89D4 C |  Obj1E_MarkAsGone :            89D0 C |
 Obj1E_SetBall :               89CC C |  Obj1F :                       92EA C |
 Obj1F_Action :                9356 C |  Obj1F_BallMain :              94B4 C |
 Obj1F_BallMove :              94EA C |  Obj1F_Delete :                94AE C |
 Obj1F_Delete2 :               950C C |  Obj1F_Index :                 92F8 C |
 Obj1F_Index2 :                9372 C |  Obj1F_Main :                  9302 C |
 Obj1F_MakeFire :              93B2 C |  Obj1F_MakeFire2 :             93E6 C |
 Obj1F_Move :                  938A C |  Obj1F_SetAni :                947E C |
 Obj1F_WaitFire :              9376 C |  Obj1F_WalkOnFloor :           9410 C |
 Obj20 :                       8A1E C |  Obj20_Animate :               8AC8 C |
 Obj20_Bounce :                8A74 C |  Obj20_ChkExplode :            8AB0 C |
 Obj20_Display :               8ADA C |  Obj20_Index :                 8A2C C |
 Obj20_Main :                  8A30 C |  Obj21 :                      1C5A4 C |
 Obj21_Display :              1C606 C |  Obj21_Flash :                1C5E0 C |
 Obj21_Flash2 :               1C5F0 C |  Obj21_Index :                1C5B2 C |
 Obj21_Main :                 1C5B6 C |  Obj22 :                       95D4 C |
 Obj22_Action :                9612 C |  Obj22_ChgDir :                96FC C |
 Obj22_ChkNrSonic :            96C6 C |  Obj22_Delete :                9720 C |
 Obj22_Fire :                  9664 C |  Obj22_Index :                 95E2 C |
 Obj22_Index2 :                962E C |  Obj22_Main :                  95E8 C |
 Obj22_Move :                  9632 C |  Obj22_SetNrSonic :            96E2 C |
 Obj22_Stop :                  970E C |  Obj23 :                       9726 C |
 Obj23_Animate :               9788 C |  Obj23_Animate2 :              97F8 C |
 Obj23_ChkCancel :             9798 C |  Obj23_Delete :                97E8 C |
 Obj23_Explode :               97DA C |  Obj23_FromBuzz :              97A4 C |
 Obj23_FromNewt :              97EE C |  Obj23_Index :                 9734 C |
 Obj23_Main :                  973E C |  Obj24 :                       8AF0 C |
 Obj24_Animate :               8B42 C |  Obj24_Display :               8B5C C |
 Obj24_Index :                 8AFE C |  Obj24_Main :                  8B02 C |
 Obj25 :                       9916 C |  Obj25_Animate :               9A04 C |
 Obj25_Collect :               9A2C C |  Obj25_Delete :                9A60 C |
 Obj25_Index :                 9924 C |  Obj25_Main :                  994E C |
 Obj25_MakeRings :             999A C |  Obj25_PlaySnd :               9A9E C |
 Obj25_PosData :               992E C |  Obj25_Sparkle :               9A52 C |
 Obj26 :                       9F02 C |  Obj26_Animate :               A060 C |
 Obj26_BreakOpen :             A08E C |  Obj26_Display :               A06A C |
 Obj26_Explode :               A0B4 C |  Obj26_Fall :                  9FB6 C |
 Obj26_Index :                 9F10 C |  Obj26_Main :                  9F1A C |
 Obj26_NotBroken :             9F70 C |  Obj26_SetBroken :             A0CE C |
 Obj26_Solid :                 9F7C C |  Obj26_SolidSides :            A274 C |
 Obj27 :                       8B60 C |  Obj27_Animate :               8BD4 C |
 Obj27_Display :               8BEE C |  Obj27_Index :                 8B6E C |
 Obj27_LoadAnimal :            8B74 C |  Obj27_Main :                  8B94 C |
 Obj28 :                       8D1E C |  Obj28_Display :               8F12 C |
 Obj28_EndMap :                8DC6 C |  Obj28_EndSpeed :              8D9A C |
 Obj28_EndVram :               8DF2 C |  Obj28_Ending :                8E08 C |
 Obj28_FromEnemy :             8E72 C |  Obj28_Index :                 8D2C C |
 Obj28_VarIndex :              8D56 C |  Obj28_Variables :             8D62 C |
 Obj29 :                       920C C |  Obj29_Index :                 921E C |
 Obj29_Main :                  9222 C |  Obj29_Slower :                924C C |
 Obj2A :                       8738 C |  Obj2A_Animate :               87AC C |
 Obj2A_Index :                 8746 C |  Obj2A_Main :                  874A C |
 Obj2A_MarkAsUsed :            87D0 C |  Obj2A_Open :                  87A6 C |
 Obj2A_OpenShut :              876E C |  Obj2B :                       A906 C |
 Obj2B_ChgAni :                A97A C |  Obj2B_ChgSpeed :              A952 C |
 Obj2B_Index :                 A918 C |  Obj2B_Main :                  A91C C |
 Obj2C :                       A9C0 C |  Obj2C_Animate :               AA3C C |
 Obj2C_Index :                 A9CE C |  Obj2C_Main :                  A9D2 C |
 Obj2C_Turn :                  AA20 C |  Obj2D :                       AA8A C |
 Obj2D_Action :                AADC C |  Obj2D_ChgDir :                AB00 C |
 Obj2D_ChkSonic :              ABD8 C |  Obj2D_ChkSonic2 :             AC08 C |
 Obj2D_Index :                 AA98 C |  Obj2D_Index2 :                AAF8 C |
 Obj2D_Jump :                  AB9C C |  Obj2D_Main :                  AA9C C |
 Obj2D_Move :                  AB2A C |  Obj2E :                       A0E8 C |
 Obj2E_ChkEggman :             A154 C |  Obj2E_ChkEnd :                A268 C |
 Obj2E_ChkInvinc :             A1CC C |  Obj2E_ChkRings :              A220 C |
 Obj2E_ChkS :                  A260 C |  Obj2E_ChkShield :             A1B0 C |
 Obj2E_ChkShoes :              A182 C |  Obj2E_ChkSonic :              A16A C |
 Obj2E_Delete :                A26A C |  Obj2E_Index :                 A0FA C |
 Obj2E_Main :                  A100 C |  Obj2E_Move :                  A140 C |
 Obj2E_NoMusic :               A21E C |  Obj2E_RingSound :             A256 C |
 Obj2F :                       AC9E C |  Obj2F_Action :                AD1A C |
 Obj2F_ChkDel :                AE9E C |  Obj2F_Data :                  ACB0 C |
 Obj2F_Data1 :                 AEFC C |  Obj2F_Data2 :                 AF48 C |
 Obj2F_Data3 :                 AF74 C |  Obj2F_DelFlames :             AECA C |
 Obj2F_Display :               AD7C C |  Obj2F_Index :                 ACAC C |
 Obj2F_Main :                  ACBC C |  Obj2F_Move :                  ADCC C |
 Obj2F_Slope :                 AD42 C |  Obj2F_Solid :                 AD5A C |
 Obj2F_Type00 :                ADA4 C |  Obj2F_Type01 :                ADA6 C |
 Obj2F_Type02 :                ADB0 C |  Obj2F_Type03 :                ADBA C |
 Obj2F_Type04 :                ADC4 C |  Obj2F_Type05 :                ADE4 C |
 Obj2F_TypeIndex :             AD98 C |  Obj2F_Types :                 AD84 C |
 Obj30 :                       B180 C |  Obj30_Block012 :              B26C C |
 Obj30_Block34 :               B292 C |  Obj30_ChkSwitch :             B3A2 C |
 Obj30_Delete :                B1B0 C |  Obj30_Index :                 B1B4 C |
 Obj30_Load :                  B1F8 C |  Obj30_Loop :                  B1F2 C |
 Obj30_Main :                  B1CA C |  Obj30_Reflect012 :            B284 C |
 Obj30_Reflect34 :             B2AA C |  Obj30_Type00 :                B2DC C |
 Obj30_Type01 :                B2DE C |  Obj30_Type02 :                B2E8 C |
 Obj30_Type03 :                B30A C |  Obj30_Type04 :                B390 C |
 Obj30_TypeIndex :             B2D2 C |  Obj30_Types :                 B2BE C |
 Obj30_Vars1 :                 B1BE C |  Obj30_Vars2 :                 B1C4 C |
 Obj31 :                       B45C C |  Obj31_ChkDel :                B5F2 C |
 Obj31_Display :               B5B8 C |  Obj31_Display2 :              B5EE C |
 Obj31_Index :                 B46A C |  Obj31_Loop :                  B4CC C |
 Obj31_Main :                  B492 C |  Obj31_MakeStomper :           B4D4 C |
 Obj31_Restart :               B6BE C |  Obj31_SetSize :               B556 C |
 Obj31_SwchNums :              B474 C |  Obj31_Type00 :                B632 C |
 Obj31_Type01 :                B6CE C |  Obj31_Type03 :                B75E C |
 Obj31_TypeIndex :             B624 C |  Obj31_Types :                 B612 C |
 Obj31_Var :                   B478 C |  Obj31_Var2 :                  B570 C |
 Obj32 :                       BB0A C |  Obj32_Delete :                BBF8 C |
 Obj32_Display :               BBD4 C |  Obj32_Index :                 BB18 C |
 Obj32_MZBlock :               BBFE C |  Obj32_MZData :                BC38 C |
 Obj32_MZLoop :                BC1E C |  Obj32_Main :                  BB1C C |
 Obj32_Pressed :               BB52 C |  Obj33 :                       BCAE C |
 Obj33_ChkGone :               BD2E C |  Obj33_ChkLava :               BEF6 C |
 Obj33_ChkLava2 :              BF1C C |  Obj33_Index :                 BCBC C |
 Obj33_LoadLava :              BF3A C |  Obj33_Main :                  BCC6 C |
 Obj33_NoLava :                BF38 C |  Obj33_StopPush :              BEAC C |
 Obj33_Var :                   BCC2 C |  Obj34 :                       C0E0 C |
 Obj34_ActNumber :             C146 C |  Obj34_ChangeArt :             C1EC C |
 Obj34_CheckFZ :               C108 C |  Obj34_CheckSBZ3 :             C0F6 C |
 Obj34_ChkPos :                C18C C |  Obj34_ChkPos2 :               C1C0 C |
 Obj34_ConData :               C220 C |  Obj34_Delete :                C20C C |
 Obj34_Index :                 C0EE C |  Obj34_ItemData :              C210 C |
 Obj34_LoadConfig :            C116 C |  Obj34_Loop :                  C128 C |
 Obj34_MakeSprite :            C15A C |  Obj34_Move :                  C19C C |
 Obj34_Move2 :                 C1D6 C |  Obj34_Wait :                  C1B2 C |
 Obj35 :                       AFC0 C |  Obj35_Animate :               B0A0 C |
 Obj35_Index :                 AFCE C |  Obj35_Main :                  AFD4 C |
 Obj35_Move :                  B094 C |  Obj36 :                       CBFA C |
 Obj36_Display :               CCF4 C |  Obj36_Hurt :                  CCC4 C |
 Obj36_Index :                 CC08 C |  Obj36_Main :                  CC18 C |
 Obj36_SideWays :              CC7E C |  Obj36_Solid :                 CC62 C |
 Obj36_Type00 :                CD2E C |  Obj36_Type01 :                CD30 C |
 Obj36_Type02 :                CD44 C |  Obj36_Type0x :                CD18 C |
 Obj36_TypeIndex :             CD28 C |  Obj36_Upright :               CC9E C |
 Obj36_Var :                   CC0C C |  Obj36_Wait :                  CD58 C |
 Obj37 :                       9AA4 C |  Obj37_Bounce :                9B7A C |
 Obj37_ChkDel :                9BB4 C |  Obj37_Collect :               9BCC C |
 Obj37_CountRings :            9ABC C |  Obj37_Delete :                9BEE C |
 Obj37_Index :                 9AB2 C |  Obj37_Loop :                  9AD4 C |
 Obj37_MakeRings :             9ADC C |  Obj37_ResetCounter :          9B5E C |
 Obj37_Sparkle :               9BE0 C |  Obj38 :                      13F16 C |
 Obj38_Delete :               13F94 C |  Obj38_Delete2 :              1400C C |
 Obj38_DoStars :              13F56 C |  Obj38_Index :                13F24 C |
 Obj38_Main :                 13F2A C |  Obj38_RmvShield :            13F92 C |
 Obj38_Shield :               13F62 C |  Obj38_StarTrail :            13FC4 C |
 Obj38_StarTrail2 :           13FE0 C |  Obj38_StarTrail2a :          13FE4 C |
 Obj38_Stars :                13F9A C |  Obj39 :                       C290 C |
 Obj39_ChgMode :               C326 C |  Obj39_ChkPLC :                C2A4 C |
 Obj39_Display :               C346 C |  Obj39_Index :                 C29E C |
 Obj39_Main :                  C2AC C |  Obj39_Move :                  C2F2 C |
 Obj39_ResetLvl :              C340 C |  Obj39_SetWait :               C2FA C |
 Obj39_Wait :                  C306 C |  Obj3A :                       C34A C |
 Obj3A_AddBonus :              C46A C |  Obj3A_ChkBonus :              C444 C |
 Obj3A_ChkPLC :                C36A C |  Obj3A_ChkPos :                C3C0 C |
 Obj3A_ChkPos2 :               C4FA C |  Obj3A_ChkSS :                 C4AE C |
 Obj3A_Config :                C54C C |  Obj3A_Display :               C414 C |
 Obj3A_Display2 :              C4C6 C |  Obj3A_Index :                 C358 C |
 Obj3A_Loop :                  C37C C |  Obj3A_Main :                  C372 C |
 Obj3A_Move :                  C3D0 C |  Obj3A_Move2 :                 C50A C |
 Obj3A_NextLevel :             C484 C |  Obj3A_RingBonus :             C434 C |
 Obj3A_SBZ2 :                  C520 C |  Obj3A_SetDelay :              C462 C |
 Obj3A_TimeBonus :             C418 C |  Obj3A_Wait :                  C40A C |
 Obj3B :                       CE22 C |  Obj3B_Index :                 CE30 C |
 Obj3B_Main :                  CE34 C |  Obj3B_Solid :                 CE58 C |
 Obj3C :                       CEEE C |  Obj3C_ChkRoll :               CF54 C |
 Obj3C_ChkSpeed :              CF64 C |  Obj3C_FragMove :              CFA8 C |
 Obj3C_FragSpd1 :              D044 C |  Obj3C_FragSpd2 :              D064 C |
 Obj3C_Index :                 CF00 C |  Obj3C_Main :                  CF06 C |
 Obj3C_Smash :                 CF8E C |  Obj3C_Solid :                 CF30 C |
 Obj3D :                      174E6 C |  Obj3D_Display :              1788A C |
 Obj3D_FaceDel :              17850 C |  Obj3D_FaceDisp :             1784E C |
 Obj3D_FaceMain :             17804 C |  Obj3D_FlameDel :             17884 C |
 Obj3D_FlameDisp :            17882 C |  Obj3D_FlameMain :            17856 C |
 Obj3D_Index :                174F4 C |  Obj3D_LoadBoss :             17516 C |
 Obj3D_Loop :                 1750E C |  Obj3D_Main :                 17502 C |
 Obj3D_MakeBall :             176AC C |  Obj3D_ObjData :              174FC C |
 Obj3D_Reverse :              17724 C |  Obj3D_ShipDel :              177FE C |
 Obj3D_ShipFlash :            17612 C |  Obj3D_ShipIndex :            175A0 C |
 Obj3D_ShipMain :             1756E C |  Obj3D_ShipMove :             176FA C |
 Obj3D_ShipStart :            175AE C |  Obj3E :                      1A8F4 C |
 Obj3E_Animals :              1AAC8 C |  Obj3E_BodyMain :             1A994 C |
 Obj3E_ChkOpened :            1A9B2 C |  Obj3E_Delete :               1A924 C |
 Obj3E_DoOpen :               1A9C8 C |  Obj3E_EndAct :               1AB16 C |
 Obj3E_Explosion :            1AA34 C |  Obj3E_FindObj28 :            1AB20 C |
 Obj3E_Index :                1A92A C |  Obj3E_Loop :                 1AA9E C |
 Obj3E_Main :                 1A94A C |  Obj3E_MakeAnimal :           1AA78 C |
 Obj3E_Not02 :                1A992 C |  Obj3E_Obj28Found :           1AB36 C |
 Obj3E_Switched :             1A9D0 C |  Obj3E_Var :                  1A93A C |
 Obj3F :                       8BF2 C |  Obj3F_Index :                 8C00 C |
 Obj3F_Main :                  8C04 C |  Obj40 :                       F3D8 C |
 Obj40_Action :                F452 C |  Obj40_Animate :               F52C C |
 Obj40_Delete :                F53A C |  Obj40_FixToFloor :            F4CA C |
 Obj40_Index :                 F3E6 C |  Obj40_Index2 :                F4A2 C |
 Obj40_Main :                  F3EE C |  Obj40_Move :                  F4A6 C |
 Obj40_Pause :                 F514 C |  Obj40_SetSmoke :              F44A C |
 Obj41 :                       D88A C |  Obj41_AniDwn :                DAB4 C |
 Obj41_AniLR :                 DA38 C |  Obj41_AniUp :                 D9A0 C |
 Obj41_BounceDwn :             DA7C C |  Obj41_BounceLR :              D9E2 C |
 Obj41_BounceUp :              D966 C |  Obj41_Dwn :                   DA4E C |
 Obj41_Index :                 D8BC C |  Obj41_LR :                    D9B6 C |
 Obj41_Main :                  D8D4 C |  Obj41_Powers :                D8D0 C |
 Obj41_ResetDwn :              DABE C |  Obj41_ResetLR :               DA42 C |
 Obj41_ResetUp :               D9AA C |  Obj41_Up :                    D94A C |
 Obj42 :                       DB34 C |  Obj42_Action :                DB78 C |
 Obj42_ChkDist :               DB9E C |  Obj42_Delete :                DCE0 C |
 Obj42_Fall :                  DC00 C |  Obj42_FireMissile :           DC88 C |
 Obj42_Index :                 DB42 C |  Obj42_Index2 :                DB94 C |
 Obj42_Main :                  DB48 C |  Obj42_MatchFloor :            DC54 C |
 Obj42_Move :                  DC3A C |  Obj42_Speed :                 DC74 C |
 Obj42_Type00 :                DBE0 C |  Obj42_Type01 :                DC7A C |
 Obj43 :                       DDC4 C |  Obj43_Action :                DE1E C |
 Obj43_ChkGone :               DE58 C |  Obj43_ChkJump :               DEC8 C |
 Obj43_Delete :                DE6A C |  Obj43_Index :                 DDD2 C |
 Obj43_Index2 :                DE6E C |  Obj43_Jump :                  DEE6 C |
 Obj43_Main :                  DDD6 C |  Obj43_MatchFloor :            DEFA C |
 Obj43_RollChk :               DE76 C |  Obj43_RollNoChk :             DEA0 C |
 Obj43_Stop :                  DF1C C |  Obj44 :                       DF9E C |
 Obj44_Display :               DFF6 C |  Obj44_Index :                 DFAC C |
 Obj44_Main :                  DFB2 C |  Obj44_Solid :                 DFEA C |
 Obj44_SolidWall :             8866 C |  Obj44_SolidWall2 :            88DE C |
 Obj45 :                       B778 C |  Obj45_ChkDel :                B882 C |
 Obj45_Display :               B87E C |  Obj45_Index :                 B786 C |
 Obj45_Load :                  B7C0 C |  Obj45_Loop :                  B7BA C |
 Obj45_Main :                  B7A2 C |  Obj45_Move :                  B8A2 C |
 Obj45_Solid :                 B834 C |  Obj45_Var :                   B790 C |
 Obj46 :                       E598 C |  Obj46_Action :                E5E6 C |
 Obj46_ChkDel :                E614 C |  Obj46_Index :                 E5A6 C |
 Obj46_Main :                  E5AA C |  Obj46_Type00 :                E642 C |
 Obj46_Type01 :                E65C C |  Obj46_Type02 :                E644 C |
 Obj46_Type03 :                E67C C |  Obj46_Type04 :                E6B8 C |
 Obj46_TypeIndex :             E638 C |  Obj47 :                       E798 C |
 Obj47_ChkHit :                E8A0 C |  Obj47_Delete :                E8B2 C |
 Obj47_Display :               E876 C |  Obj47_Hit :                   E7D4 C |
 Obj47_Index :                 E7A6 C |  Obj47_Main :                  E7AA C |
 Obj47_Score :                 E852 C |  Obj48 :                      178C4 C |
 Obj48_Base :                 17996 C |  Obj48_ChkVanish :            17A5E C |
 Obj48_Display :              179E4 C |  Obj48_Display2 :             179F8 C |
 Obj48_Display3 :             17A58 C |  Obj48_Display4 :             17A90 C |
 Obj48_Index :                178D2 C |  Obj48_Main :                 178DC C |
 Obj48_MakeBall :             17968 C |  Obj48_MakeLinks :            17908 C |
 Obj48_Move :                  7986 C |  Obj48_PosData :              17990 C |
 Obj48_Vanish :               17A68 C |  Obj49 :                       CE90 C |
 Obj49_ChkDel :                CEC0 C |  Obj49_Index :                 CE9E C |
 Obj49_Main :                  CEA2 C |  Obj49_PlaySnd :               CEAC C |
 Obj4A :                      14012 C |  Obj4A_Display :              14094 C |
 Obj4A_Index :                14020 C |  Obj4A_LoadSonic :            1409A C |
 Obj4A_Main :                 14026 C |  Obj4A_Main2 :                1402E C |
 Obj4A_RmvSonic :             14058 C |  Obj4A_Wait :                 140AC C |
 Obj4B :                       9BF2 C |  Obj4B_Animate :               9C52 C |
 Obj4B_Collect :               9C7A C |  Obj4B_Delete :                9CBC C |
 Obj4B_Index :                 9C00 C |  Obj4B_Main :                  9C08 C |
 Obj4B_Okay :                  9C3C C |  Obj4B_PlaySnd :               9CB0 C |
 Obj4C :                       EB48 C |  Obj4C_Delete :                EC1C C |
 Obj4C_Display :               EC0C C |  Obj4C_Index :                 EB5A C |
 Obj4C_Main :                  EB66 C |  Obj4C_MakeLava :              EBB6 C |
 Obj4C_Type00 :                EBEE C |  Obj4D :                       EC32 C |
 Obj4D_Action :                ED3A C |  Obj4D_ChkDel :                ED58 C |
 Obj4D_Delete :                EE1A C |  Obj4D_Index :                 EC44 C |
 Obj4D_Loop :                  EC7C C |  Obj4D_Main :                  EC50 C |
 Obj4D_MakeLava :              EC82 C |  Obj4D_PlaySnd :               ED30 C |
 Obj4D_Speeds :                EC4C C |  Obj4D_Type00 :                ED7C C |
 Obj4D_Type01 :                ED9C C |  Obj4D_TypeIndex :             ED78 C |
 Obj4E :                       EE1E C |  Obj4E_Action :                EE94 C |
 Obj4E_Animate :               EF00 C |  Obj4E_ChkDel :                EF16 C |
 Obj4E_ChkGone :               EF3E C |  Obj4E_ChkSonic :              EEA0 C |
 Obj4E_Delete :                EF72 C |  Obj4E_Index :                 EE2C C |
 Obj4E_Loop :                  EE40 C |  Obj4E_Main :                  EE36 C |
 Obj4E_Main2 :                 EE46 C |  Obj4E_Move :                  EEC0 C |
 Obj4E_Move2 :                 EF56 C |  Obj4E_Solid :                 EED0 C |
 Obj4F :                       F5C2 C |  Obj50 :                       F5F6 C |
 Obj50_Action :                F65C C |  Obj50_ChkWall :               F5C4 C |
 Obj50_FixToFloor :            F6A0 C |  Obj50_Index :                 F604 C |
 Obj50_Index2 :                F678 C |  Obj50_Main :                  F608 C |
 Obj50_Move :                  F67C C |  Obj50_Pause :                 F6C0 C |
 Obj51 :                       FA4E C |  Obj51_Bonus :                 FB3E C |
 Obj51_Display :               FB5E C |  Obj51_Index :                 FA60 C |
 Obj51_Main :                  FA66 C |  Obj51_Points :                FB86 C |
 Obj51_Smash :                 FABA C |  Obj51_Solid :                 FA90 C |
 Obj51_Speeds :                FB76 C |  Obj52 :                       FBB2 C |
 Obj52_02_Wait :               FCF8 C |  Obj52_03_End :                FD14 C |
 Obj52_05_End :                FD34 C |  Obj52_07_ChkDel :             FD66 C |
 Obj52_0A_Back :               FDEA C |  Obj52_0A_Reset :              FDFA C |
 Obj52_0A_Wait :               FDDC C |  Obj52_ChkDel :                FC7E C |
 Obj52_Index :                 FBC0 C |  Obj52_Main :                  FBD0 C |
 Obj52_Move :                  FCA0 C |  Obj52_Platform :              FC50 C |
 Obj52_StandOn :               FC62 C |  Obj52_Type00 :                FCCA C |
 Obj52_Type01 :                FCCC C |  Obj52_Type02 :                FCEC C |
 Obj52_Type03 :                FCFA C |  Obj52_Type05 :                FD1A C |
 Obj52_Type06 :                FD3A C |  Obj52_Type07 :                FD5C C |
 Obj52_Type08 :                FD88 C |  Obj52_Type0A :                FDA8 C |
 Obj52_TypeIndex :             FCB4 C |  Obj52_Var :                   FBC6 C |
 Obj53 :                       8128 C |  Obj53_ChkTouch :              818C C |
 Obj53_Collapse :              825A C |  Obj53_Data1 :                 8304 C |
 Obj53_Data2 :                 831E C |  Obj53_Data3 :                 8326 C |
 Obj53_Delete :                8254 C |  Obj53_Display :               81F4 C |
 Obj53_Index :                 8136 C |  Obj53_Main :                  8142 C |
 Obj53_MarkAsGone :            81CA C |  Obj53_NotSBZ :                8174 C |
 Obj53_NotSLZ :                8166 C |  Obj53_Solid :                 819E C |
 Obj53_TimeZero :              8244 C |  Obj53_Touch :                 81CE C |
 Obj53_WalkOff :               81E0 C |  Obj54 :                       EF76 C |
 Obj54_ChkDel :                EFAA C |  Obj54_Index :                 EF84 C |
 Obj54_Main :                  EF8C C |  Obj54_Sizes :                 EF88 C |
 Obj55 :                       FE62 C |  Obj55_Action :                FEA4 C |
 Obj55_ChkDel :                FF3C C |  Obj55_ChkDrop :               FEC8 C |
 Obj55_ChkSonic :              FFB0 C |  Obj55_DropFly :               FF04 C |
 Obj55_FlyUp :                 FF82 C |  Obj55_Index :                 FE70 C |
 Obj55_Index2 :                FEC0 C |  Obj55_Main :                  FE74 C |
 Obj55_NoDrop :                FF02 C |  Obj55_PlaySnd :               FF46 C |
 Obj56 :                      10040 C |  Obj56_Action :               10136 C |
 Obj56_ChkDel :               1016E C |  Obj56_ChkGone :              10114 C |
 Obj56_Index :                1004E C |  Obj56_Main :                 10062 C |
 Obj56_Move_LR :              101C4 C |  Obj56_Move_Sqr :             1043A C |
 Obj56_Move_UD :              101F2 C |  Obj56_Type00 :               101AC C |
 Obj56_Type01 :               101AE C |  Obj56_Type02 :               101BA C |
 Obj56_Type03 :               101DC C |  Obj56_Type04 :               101E8 C |
 Obj56_Type05 :               1020A C |  Obj56_Type06 :               1029E C |
 Obj56_Type07 :               10302 C |  Obj56_Type08 :               103FA C |
 Obj56_Type09 :               1040C C |  Obj56_Type0A :               1041C C |
 Obj56_Type0B :               1042C C |  Obj56_Type0C :               10334 C |
 Obj56_Type0D :               10396 C |  Obj56_TypeIndex :            10190 C |
 Obj56_Var :                  10052 C |  Obj57 :                      1053C C |
 Obj57_ChkDel :               106C6 C |  Obj57_DelLoop :              106F0 C |
 Obj57_Delete :               106E8 C |  Obj57_Display :              10708 C |
 Obj57_Index :                1054A C |  Obj57_Main :                 10550 C |
 Obj57_MakeChain :            105E8 C |  Obj57_Move :                 1066C C |
 Obj57_MoveLoop :             10696 C |  Obj57_MoveSub :              10674 C |
 Obj58 :                      1072C C |  Obj58_Index :                1073A C |
 Obj58_Main :                 1073E C |  Obj58_Move :                 10798 C |
 Obj58_Type00 :               107D6 C |  Obj58_Type01 :               107D8 C |
 Obj58_Type02 :               107FA C |  Obj58_Type03 :               1081E C |
 Obj58_TypeIndex :            107CE C |  Obj59 :                      10888 C |
 Obj59_Action :               10968 C |  Obj59_ChkDel :               10AD8 C |
 Obj59_Delete :               10A62 C |  Obj59_Index :                108B8 C |
 Obj59_Main :                 108E0 C |  Obj59_Main2 :                10904 C |
 Obj59_MakeMulti :            10AB0 C |  Obj59_Move :                 10A66 C |
 Obj59_Platform :             10958 C |  Obj59_Type00 :               109B2 C |
 Obj59_Type01 :               109B4 C |  Obj59_Type02 :               109C2 C |
 Obj59_Type04 :               109D6 C |  Obj59_Type06 :               109E8 C |
 Obj59_Type08 :               10A0A C |  Obj59_Type09 :               10A2C C |
 Obj59_TypeIndex :            1099E C |  Obj59_Types :                1098A C |
 Obj59_Var1 :                 108C0 C |  Obj59_Var2 :                 108C2 C |
 Obj5A :                      10B0C C |  Obj5A_Action :               10B82 C |
 Obj5A_Index :                10B3C C |  Obj5A_Main :                 10B42 C |
 Obj5A_Platform :             10B72 C |  Obj5A_Type00 :               10BB6 C |
 Obj5A_Type04 :               10BF4 C |  Obj5A_TypeIndex :            10BB2 C |
 Obj5A_Types :                10B9E C |  Obj5B :                      10C42 C |
 Obj5B_Index :                10C72 C |  Obj5B_Loop :                 10C96 C |
 Obj5B_Main :                 10C78 C |  Obj5B_MakeBlocks :           10CA4 C |
 Obj5B_Move :                 10CF6 C |  Obj5B_Solid :                10D0A C |
 Obj5B_Type00 :               10D5A C |  Obj5B_Type01 :               10DC0 C |
 Obj5B_Type02 :               10D7C C |  Obj5B_TypeIndex :            10D52 C |
 Obj5C :                      10DF4 C |  Obj5C_Display :              10E1E C |
 Obj5C_Index :                10E02 C |  Obj5C_Main :                 10E06 C |
 Obj5D :                      112AC C |  Obj5D_Animate :              1136A C |
 Obj5D_Blow :                 11304 C |  Obj5D_ChkDel :               1139C C |
 Obj5D_ChkSonic :             11322 C |  Obj5D_Delay :                112E2 C |
 Obj5D_Index :                112BA C |  Obj5D_Main :                 112BE C |
 Obj5D_MoveSonic :            11366 C |  Obj5E :                      113EC C |
 Obj5E_Data1 :                116F2 C |  Obj5E_Data2 :                11722 C |
 Obj5E_Index :                11420 C |  Obj5E_Main :                 1142C C |
 Obj5E_MoveSpike :            11596 C |  Obj5E_Slope :                11494 C |
 Obj5E_Slope2 :               114C6 C |  Obj5E_Speeds :               116E8 C |
 Obj5E_SpikeFall :            1162A C |  Obj5E_Spikeball :            11540 C |
 Obj5E_Spring :               11686 C |  Obj5F :                      117A4 C |
 Obj5F_Action :               117F6 C |  Obj5F_ChkSonic :             1187E C |
 Obj5F_Display :              1190A C |  Obj5F_End :                  11980 C |
 Obj5F_Explode :              1186C C |  Obj5F_Index :                117B2 C |
 Obj5F_Index2 :               11812 C |  Obj5F_Loop :                 11940 C |
 Obj5F_Main :                 117BA C |  Obj5F_MakeFuse :             1189C C |
 Obj5F_MakeShrap :            11946 C |  Obj5F_ShrSpeed :             119A0 C |
 Obj5F_Wait :                 11846 C |  Obj5F_Walk :                 11818 C |
 Obj60 :                      11A76 C |  Obj60_Animate :              11B92 C |
 Obj60_ChkDel :               11BA4 C |  Obj60_ChkDel2 :              11C68 C |
 Obj60_ChkGone :              11BC6 C |  Obj60_ChkSonic :             11B62 C |
 Obj60_Circle :               11C3E C |  Obj60_Delete :               11BFA C |
 Obj60_Display :              11BA0 C |  Obj60_Display2 :             11C3A C |
 Obj60_FireOrb :              11C28 C |  Obj60_Index :                11A84 C |
 Obj60_Main :                 11A8E C |  Obj60_MakeOrbs :             11ADC C |
 Obj60_Move :                 11B40 C |  Obj60_MoveOrb :              11BFE C |
 Obj61 :                      11D76 C |  Obj61_Action :               11DEE C |
 Obj61_ChkDel :               11E2E C |  Obj61_Index :                11D84 C |
 Obj61_Main :                 11D90 C |  Obj61_Type00 :               11E60 C |
 Obj61_Type01 :               11E62 C |  Obj61_Type02 :               11E88 C |
 Obj61_Type04 :               11EAA C |  Obj61_Type05 :               11ECA C |
 Obj61_Type07 :               11EDC C |  Obj61_TypeIndex :            11E50 C |
 Obj61_Var :                  11D88 C |  Obj62 :                      11F8A C |
 Obj62_AniFire :              12080 C |  Obj62_FireBall :             12024 C |
 Obj62_Index :                11F9C C |  Obj62_Main :                 11FAC C |
 Obj62_MakeFire :             11FEA C |  Obj62_NoFire :               12022 C |
 Obj62_Sound :                12076 C |  Obj62_SpitRate :             11FA4 C |
 Obj62_StopFire :             12090 C |  Obj62_StopFire2 :            120AA C |
 Obj63 :                      120DC C |  Obj63_ChangeDir :            1230E C |
 Obj63_Data :                 12386 C |  Obj63_Display :              12106 C |
 Obj63_Index :                12132 C |  Obj63_Loop :                 12230 C |
 Obj63_Main :                 1213A C |  Obj63_MakePtfms :            12236 C |
 Obj64 :                      12442 C |  Obj64_Animate :              124BA C |
 Obj64_BblMaker :             125B0 C |  Obj64_BblTypes :             126E8 C |
 Obj64_Bubble :               124A0 C |  Obj64_Burst :                124DE C |
 Obj64_ChkDel :               126BC C |  Obj64_ChkSonic :             126FA C |
 Obj64_ChkWater :             124D4 C |  Obj64_Delete :               12588 C |
 Obj64_Delete2 :              125A6 C |  Obj64_Delete3 :              125AC C |
 Obj64_Display :              12578 C |  Obj64_Display2 :             1258E C |
 Obj64_Index :                12450 C |  Obj64_Main :                 1245C C |
 Obj64_Wobble :               124EC C |  Obj65 :                      1283A C |
 Obj65_Animate :              128B4 C |  Obj65_Animate2 :             128E6 C |
 Obj65_ChkDel :               128C0 C |  Obj65_FixHeight :            128C4 C |
 Obj65_Index :                12848 C |  Obj65_Main :                 12852 C |
 Obj66 :                      14E8A C |  Obj66_Action :               14F0E C |
 Obj66_Animate :              15016 C |  Obj66_ChgPos :               15036 C |
 Obj66_ChkSwitch :            14FEE C |  Obj66_Display :              14FA2 C |
 Obj66_GrabSonic :            14F48 C |  Obj66_Index :                14E98 C |
 Obj66_Loop :                 14EAC C |  Obj66_Main :                 14EA0 C |
 Obj66_MakeItem :             14ED2 C |  Obj66_PosData :              15060 C |
 Obj66_Release :              14FA6 C |  Obj67 :                      152D0 C |
 Obj67_Action :               15352 C |  Obj67_ChkDel :               1544C C |
 Obj67_Delete :               1546E C |  Obj67_Index :                152DE C |
 Obj67_Main :                 152E2 C |  Obj67_MoveSonic :            1535E C |
 Obj67_MoveSpot :             15412 C |  Obj68 :                      1547C C |
 Obj68_Action :               154B8 C |  Obj68_Delete :               154D8 C |
 Obj68_Index :                1548A C |  Obj68_Main :                 1548E C |
 Obj68_MoveSonic :            154DE C |  Obj69 :                      1551E C |
 Obj69_Animate :              155D2 C |  Obj69_Animate2 :             15648 C |
 Obj69_Delay :                1562C C |  Obj69_Display :              15618 C |
 Obj69_Display2 :             1568E C |  Obj69_Index :                1552C C |
 Obj69_Main :                 15532 C |  Obj69_NotSolid :             155FC C |
 Obj69_NotSolid2 :            15672 C |  Obj69_Spinner :              1561C C |
 Obj69_Trapdoor :             155B0 C |  Obj6A :                      1576A C |
 Obj6A_Action :               157BA C |  Obj6A_Animate01 :            15818 C |
 Obj6A_Animate02 :            15868 C |  Obj6A_Animate03 :            158F4 C |
 Obj6A_Animate04 :            15966 C |  Obj6A_Delete :               157F0 C |
 Obj6A_Index :                15778 C |  Obj6A_Main :                 1577C C |
 Obj6A_Type00 :               15800 C |  Obj6A_Type01 :               15802 C |
 Obj6A_Type02 :               15850 C |  Obj6A_Type03 :               158A0 C |
 Obj6A_Type04 :               15914 C |  Obj6A_TypeIndex :            157F6 C |
 Obj6B :                      15A00 C |  Obj6B_Action :               15AF8 C |
 Obj6B_ChkDel :               15B30 C |  Obj6B_ChkGone :              15A66 C |
 Obj6B_ChkGone2 :             15AE6 C |  Obj6B_Delete :               15A78 C |
 Obj6B_Delete2 :              15B70 C |  Obj6B_Index :                15A0E C |
 Obj6B_Main :                 15A26 C |  Obj6B_SBZ12 :                15AA6 C |
 Obj6B_SBZ3 :                 15A7E C |  Obj6B_Type00 :               15B82 C |
 Obj6B_Type01 :               15B84 C |  Obj6B_Type02 :               15BF0 C |
 Obj6B_Type03 :               15C46 C |  Obj6B_Type04 :               15C9A C |
 Obj6B_Type05 :               15CFC C |  Obj6B_TypeIndex :            15B76 C |
 Obj6B_Var :                  15A12 C |  Obj6C :                      15DE6 C |
 Obj6C_Animate :              15E6A C |  Obj6C_Display :              15F00 C |
 Obj6C_Index :                15DF4 C |  Obj6C_Main :                 15DFC C |
 Obj6C_NotSolid :             15EDE C |  Obj6C_Vanish :               15E7A C |
 Obj6D :                       E2A8 C |  Obj6D_Action :                E31E C |
 Obj6D_ChkDel :                E362 C |  Obj6D_Index :                 E2B6 C |
 Obj6D_Main :                  E2BA C |  Obj6E :                      15F34 C |
 Obj6E_Animate :              15F92 C |  Obj6E_Display :              15FB2 C |
 Obj6E_Index :                15F42 C |  Obj6E_Main :                 15F46 C |
 Obj6E_Shock :                15F72 C |  Obj6F :                      16058 C |
 Obj6F_Act1or2 :              16096 C |  Obj6F_Delete :               160AA C |
 Obj6F_Display :              16082 C |  Obj6F_Index :                160B0 C |
 Obj6F_LoadPform :            161AA C |  Obj6F_Loop :                 161A2 C |
 Obj6F_Main :                 160B4 C |  Obj70 :                      16316 C |
 Obj70_Action :               16362 C |  Obj70_ChkDel :               163A2 C |
 Obj70_Delete :               163C4 C |  Obj70_Index :                16324 C |
 Obj70_Main :                 16328 C |  Obj70_Move :                 16372 C |
 Obj70_Move2 :                163CA C |  Obj70_MoveData :             163F4 C |
 Obj70_Solid :                16382 C |  Obj71 :                      111CA C |
 Obj71_ChkDel :               11236 C |  Obj71_Delete :               11260 C |
 Obj71_Index :                111D8 C |  Obj71_Main :                 111DC C |
 Obj71_NoDisplay :            1125E C |  Obj71_Solid :                11214 C |
 Obj72 :                      16454 C |  Obj72_Data :                 16698 C |
 Obj72_Delete :               16480 C |  Obj72_Index :                16486 C |
 Obj72_Main :                 1648E C |  Obj73 :                      18008 C |
 Obj73_Display :              18412 C |  Obj73_FaceDel :              183D8 C |
 Obj73_FaceMain :             18384 C |  Obj73_FlameDel :             1840C C |
 Obj73_FlameMain :            183DE C |  Obj73_Index :                18016 C |
 Obj73_LoadBoss :             18066 C |  Obj73_Loop :                 1804E C |
 Obj73_Main :                 1802C C |  Obj73_MakeLava :             181E4 C |
 Obj73_MakeLava2 :            18272 C |  Obj73_ObjData :              18020 C |
 Obj73_ShipDel :              1837E C |  Obj73_ShipIndex :            180CE C |
 Obj73_ShipMain :             1809E C |  Obj73_TubeDel :              18472 C |
 Obj73_TubeMain :             1844A C |  Obj74 :                      18478 C |
 Obj74_Action :               184EE C |  Obj74_Animate :              18674 C |
 Obj74_Delete :               18518 C |  Obj74_Delete2 :              18654 C |
 Obj74_Delete3 :              18680 C |  Obj74_Drop :                 18526 C |
 Obj74_Duplicate :            185C4 C |  Obj74_Duplicate2 :           185A4 C |
 Obj74_FallEdge :             18606 C |  Obj74_Index :                1848C C |
 Obj74_Index2 :               1851E C |  Obj74_Loop :                 1858A C |
 Obj74_Main :                 18494 C |  Obj74_MakeFlame :            18556 C |
 Obj75 :                      18EC0 C |  Obj75_FaceDelete :           19312 C |
 Obj75_FaceMain :             192F2 C |  Obj75_FindBlocks :           1921C C |
 Obj75_FindLoop :             1922C C |  Obj75_FlameDelete :          1938A C |
 Obj75_FlameMain :            1935C C |  Obj75_Index :                18ECE C |
 Obj75_LoadBoss :             18F2A C |  Obj75_Loop :                 18F12 C |
 Obj75_Main :                 18EE4 C |  Obj75_ObjData :              18ED8 C |
 Obj75_ShipDelete :           192EC C |  Obj75_ShipIndex :            18F92 C |
 Obj75_ShipMain :             18F62 C |  Obj75_SpikeDelete :          1945E C |
 Obj75_SpikeMain :            193C8 C |  Obj76 :                      19464 C |
 Obj76_Action :               194D6 C |  Obj76_Break :                1954C C |
 Obj76_Delete :               19546 C |  Obj76_Display :              1952E C |
 Obj76_ExitLoop :             194D4 C |  Obj76_FragPos :              195C0 C |
 Obj76_FragSpeed :            195B0 C |  Obj76_Index :                19472 C |
 Obj76_Loop :                 19484 C |  Obj76_LoopFrag :             1956E C |
 Obj76_Main :                 19478 C |  Obj76_MakeBlock :            1948C C |
 Obj76_MakeFrag :             19576 C |  Obj76_Solid :                19518 C |
 Obj77 :                      17C10 C |  Obj77_Display :              17FD0 C |
 Obj77_FaceDel :              17F90 C |  Obj77_FaceMain :             17F48 C |
 Obj77_FlameDel :             17FCA C |  Obj77_FlameMain :            17F96 C |
 Obj77_Index :                17C1E C |  Obj77_LoadBoss :             17C78 C |
 Obj77_Loop :                 17C60 C |  Obj77_Main :                 17C2C C |
 Obj77_ObjData :              17C26 C |  Obj77_ShipDel :              17F42 C |
 Obj77_ShipIndex :            17CE6 C |  Obj77_ShipMain :             17CB2 C |
 Obj78 :                      16720 C |  Obj78_Action :               1682A C |
 Obj78_AniBody :              169AA C |  Obj78_AniHead :              16866 C |
 Obj78_BodySeg1 :             169B4 C |  Obj78_BodySeg2 :             16982 C |
 Obj78_ChkGone :              16894 C |  Obj78_Delete :               168AE C |
 Obj78_Display :              16870 C |  Obj78_FragSpeed :            16A70 C |
 Obj78_Index :                1672E C |  Obj78_Index2 :               168B4 C |
 Obj78_LoadBody :             167C2 C |  Obj78_Main :                 1673E C |
 Obj78_Move :                 168B8 C |  Obj78_Move2 :                168C0 C |
 Obj78_QuitLoad :             1681C C |  Obj79 :                      16C16 C |
 Obj79_AfterHit :             16D78 C |  Obj79_BlueLamp :             16C96 C |
 Obj79_HitLamp :              16CDA C |  Obj79_Index :                16C2A C |
 Obj79_LoadInfo :             16E32 C |  Obj79_Main :                 16C32 C |
 Obj79_RedLamp :              16C82 C |  Obj79_StoreInfo :            16DB8 C |
 Obj79_Twirl :                16D7A C |  Obj7A :                      1868C C |
 Obj7A_Delete :               18686 C |  Obj7A_FaceMain :             189C2 C |
 Obj7A_FlameMain :            18A06 C |  Obj7A_Index :                1869A C |
 Obj7A_LoadBoss :             186F6 C |  Obj7A_Loop :                 186DE C |
 Obj7A_Main :                 186B0 C |  Obj7A_MakeBall :             188A4 C |
 Obj7A_ObjData :              186A4 C |  Obj7A_ShipIndex :            1877E C |
 Obj7A_ShipMain :             1874E C |  Obj7A_TubeMain :             18A76 C |
 Obj7B :                      18AA0 C |  Obj7B_Explode :              18DFC C |
 Obj7B_Fall :                 18B3E C |  Obj7B_FragSpeed :            18E72 C |
 Obj7B_Index :                18AD6 C |  Obj7B_Loop :                 18E1A C |
 Obj7B_Main :                 18AE2 C |  Obj7B_MakeFrag :             18E0E C |
 Obj7B_MoveFrag :             18E82 C |  Obj7C :                       9CC0 C |
 Obj7C_ChkDel :                9CFE C |  Obj7C_Collect :               9D22 C |
 Obj7C_Delete :                9D70 C |  Obj7C_End :                   9D62 C |
 Obj7C_Index :                 9CCE C |  Obj7C_Main :                  9CD4 C |
 Obj7D :                      16F44 C |  Obj7D_ChkDel :               16FD4 C |
 Obj7D_DelayDel :             17000 C |  Obj7D_Delete :               16FF2 C |
 Obj7D_Delete2 :              17028 C |  Obj7D_Index :                16F52 C |
 Obj7D_Main :                 16F56 C |  Obj7D_Points :               16FF8 C |
 Obj7E :                       C584 C |  Obj7E_ChkPLC :                C5A8 C |
 Obj7E_ChkPos :                C61A C |  Obj7E_Config :                C702 C |
 Obj7E_Continue :              C6CA C |  Obj7E_Display :               C662 C |
 Obj7E_Display2 :              C6FE C |  Obj7E_Exit :                  C6C0 C |
 Obj7E_Index :                 C592 C |  Obj7E_Loop :                  C5C4 C |
 Obj7E_Main :                  C5B0 C |  Obj7E_Move :                  C62A C |
 Obj7E_RingBonus :             C666 C |  Obj7E_Wait :                  C658 C |
 Obj7F :                       C72A C |  Obj7F_Display :               C7B4 C |
 Obj7F_Flash :                 C79E C |  Obj7F_Index :                 C738 C |
 Obj7F_Loop :                  C75E C |  Obj7F_Main :                  C748 C |
 Obj7F_PosData :               C73C C |  Obj80 :                       4C66 C |
 Obj80_ChkType :               4D42 C |  Obj80_Delete :                4D78 C |
 Obj80_Display :               4CAC C |  Obj80_Display2 :              4D72 C |
 Obj80_Index :                 4C74 C |  Obj80_Main :                  4C7C C |
 Obj80_MakeMiniSonic :         4CD0 C |  Obj80_MiniSonLoop :           4CFA C |
 Obj80_MiniSonicPos :          4CB2 C |  Obj81 :                       4D7E C |
 Obj81_AddSpeed :              4E52 C |  Obj81_Animate :               4E08 C |
 Obj81_ChkLand :               4DD0 C |  Obj81_GetUp :                 4E1A C |
 Obj81_Index :                 4D92 C |  Obj81_Main :                  4D9A C |
 Obj81_Run :                   4E42 C |  Obj81_ShowFall :              4DF6 C |
 Obj81_ShowRun :               4E58 C |  Obj82 :                      19604 C |
 Obj82_ChkSonic :             196E8 C |  Obj82_EggIndex :             196E0 C |
 Obj82_Eggman :               196C2 C |  Obj82_FindBlocks :           19774 C |
 Obj82_FindLoop :             19786 C |  Obj82_Index :                19612 C |
 Obj82_Leap :                 19728 C |  Obj82_Main :                 1961E C |
 Obj82_ObjData :              19618 C |  Obj82_PreLeap :              1970C C |
 Obj82_SwDisplay :            197CE C |  Obj82_SwIndex :              197B4 C |
 Obj82_Switch :               197A6 C |  Obj83 :                      19932 C |
 Obj83_Break :                19A66 C |  Obj83_BreakSnd :             19ABC C |
 Obj83_ChkBreak :             199CE C |  Obj83_ExitMake :             199C8 C |
 Obj83_FragPos :              19AD4 C |  Obj83_FragSpeed :            19ACC C |
 Obj83_Index :                19940 C |  Obj83_LoopFrag :             19A88 C |
 Obj83_Main :                 1994C C |  Obj83_MakeBlock :            1997C C |
 Obj83_MakeFrag :             19A90 C |  Obj83_Solid :                199DE C |
 Obj83_Solid2 :               19A32 C |  Obj84 :                      1A220 C |
 Obj84_Delete :               1A21A C |  Obj84_Index :                1A22E C |
 Obj84_Main :                 1A244 C |  Obj84_PosData :              1A234 C |
 Obj85 :                      19B2A C |  Obj85_Delete :               19B24 C |
 Obj85_Eggman :               19C3E C |  Obj85_Index :                19B38 C |
 Obj85_LoadBoss :             19BB6 C |  Obj85_Loop :                 19BAE C |
 Obj85_Main :                 19BA0 C |  Obj85_ObjData :              19B46 C |
 Obj85_ObjData2 :             19B82 C |  Obj86 :                      1A5AC C |
 Obj86_Generator :            1A606 C |  Obj86_Index :                1A5BA C |
 Obj86_Index2 :               1A772 C |  Obj86_Loop :                 1A69C C |
 Obj86_Main :                 1A5C4 C |  Obj86_MakeBalls :            1A67C C |
 Obj87 :                       520C C |  Obj87_Animate :               52F6 C |
 Obj87_ClrLoop :               52BA C |  Obj87_ClrObjRam :             52AC C |
 Obj87_Index :                 5220 C |  Obj87_Leap :                  5302 C |
 Obj87_LookUp :                5290 C |  Obj87_Main :                  5234 C |
 Obj87_Main2 :                 524A C |  Obj87_MakeEmlds :             5278 C |
 Obj87_MakeLogo :              52D8 C |  Obj87_Wait :                  528E C |
 Obj87_Wait2 :                 52D6 C |  Obj87_Wait3 :                 52F4 C |
 Obj87_Wait4 :                 533E C |  Obj88 :                       5366 C |
 Obj88_Index :                 537A C |  Obj88_Main :                  537E C |
 Obj88_Main2 :                 538A C |  Obj88_MainLoop :              539E C |
 Obj88_Move :                  53E6 C |  Obj89 :                       5440 C |
 Obj89_Delay :                 5490 C |  Obj89_Display :               54A6 C |
 Obj89_GotoCredits :           549A C |  Obj89_Index :                 544E C |
 Obj89_Main :                  5454 C |  Obj89_Move :                  547E C |
 Obj8A :                      1704A C |  Obj8A_Display :              170C2 C |
 Obj8A_Index :                17058 C |  Obj8A_Main :                 1705C C |
 Obj8B :                       580C C |  Obj8B_Animate :               5878 C |
 Obj8B_Index :                 5820 C |  Obj8B_Juggle :                5884 C |
 Obj8B_Main :                  5828 C |  Obj8C :                       58EC C |
 Obj8C_ChkEmLoop :             595E C |  Obj8C_ChkEms :                5954 C |
 Obj8C_Index :                 5900 C |  Obj8C_Main :                  5904 C |
 Obj8C_MakeEms :               5910 C |  Obj8C_Move :                  5990 C |
 ObjHitCeiling :              14D8E C |  ObjHitFloor :                14C08 C |
 ObjHitFloor2 :               14C0C C |  ObjHitWallLeft :             14E5C C |
 ObjHitWallRight :            14CCA C |  ObjPosLoad :                  D6A8 C |
 ObjPos_End :                 86330 C |  ObjPos_FZ :                  861EC C |
 ObjPos_GHZ1 :                800D8 C |  ObjPos_GHZ2 :                805F4 C |
 ObjPos_GHZ3 :                80BC4 C |  ObjPos_Index :               80042 C |
 ObjPos_LZ1 :                 81290 C |  ObjPos_LZ1pf1 :              824BA C |
 ObjPos_LZ1pf2 :              824EC C |  ObjPos_LZ2 :                 816FE C |
 ObjPos_LZ2pf1 :              8251E C |  ObjPos_LZ2pf2 :              82550 C |
 ObjPos_LZ3 :                 81A40 C |  ObjPos_LZ3pf1 :              82582 C |
 ObjPos_LZ3pf2 :              825CC C |  ObjPos_MZ1 :                 8260A C |
 ObjPos_MZ2 :                 82976 C |  ObjPos_MZ3 :                 82E20 C |
 ObjPos_Null :                8648C C |  ObjPos_SBZ1 :                853D0 C |
 ObjPos_SBZ1pf1 :             861FE C |  ObjPos_SBZ1pf2 :             86230 C |
 ObjPos_SBZ1pf3 :             86262 C |  ObjPos_SBZ1pf4 :             86294 C |
 ObjPos_SBZ1pf5 :             862C6 C |  ObjPos_SBZ1pf6 :             862F8 C |
 ObjPos_SBZ2 :                85B0E C |  ObjPos_SBZ3 :                82022 C |
 ObjPos_SLZ1 :                83396 C |  ObjPos_SLZ2 :                838EE C |
 ObjPos_SLZ3 :                83DAA C |  ObjPos_SYZ1 :                843D4 C |
 ObjPos_SYZ2 :                84860 C |  ObjPos_SYZ3 :                84DCA C |
 Obj_Index :                   D150 C |  ObjectFall :                  D380 C |
 ObjectsLoad :                 D106 C |  Osc_Data :                    3F58 C |
 Osc_Data2 :                   3FEA C |  Osc_Loop :                    3F50 C |
 OscillateNumDo :              3F9A C |  OscillateNumInit :            3F44 C |
*PACKING :                        0 - | *PADDING :                        0 - |
 PLC_Boss :                   1D9A4 C |  PLC_EggmanSBZ2 :             1DB32 C |
 PLC_Ending :                 1DAC2 C |  PLC_Explode :                1D6E0 C |
 PLC_FZBoss :                 1DB46 C |  PLC_GHZ :                    1D6F0 C |
 PLC_GHZ2 :                   1D734 C |  PLC_GHZAnimals :             1DA60 C |
 PLC_GameOver :               1D6E8 C |  PLC_LZ :                     1D75A C |
 PLC_LZ2 :                    1D7A4 C |  PLC_LZAnimals :              1DA6E C |
 PLC_MZ :                     1D7F4 C |  PLC_MZ2 :                    1D832 C |
 PLC_MZAnimals :              1DA7C C |  PLC_Main :                   1D6AC C |
 PLC_Main2 :                  1D6CC C |  PLC_SBZ :                    1D902 C |
 PLC_SBZ2 :                   1D94C C |  PLC_SBZAnimals :             1DAA6 C |
 PLC_SLZ :                    1D852 C |  PLC_SLZ2 :                   1D88A C |
 PLC_SLZAnimals :             1DA8A C |  PLC_SYZ :                    1D8B0 C |
 PLC_SYZ2 :                   1D8D0 C |  PLC_SYZAnimals :             1DA98 C |
 PLC_Signpost :               1D9CA C |  PLC_SpeStResult :            1DAB4 C |
 PLC_SpeStage :               1D9E6 C |  PLC_TitleCard :              1D99C C |
 PLC_TryAgain :               1DB1E C |  PLC_Warp :                   1D9DE C |
 PSG1 :                       864CE C |  PSG2 :                       864E5 C |
 PSG3 :                       864EC C |  PSG4 :                       864FD C |
 PSG5 :                       86517 C |  PSG6 :                       86508 C |
 PSG7 :                       86541 C |  PSG8 :                       8655D C |
 PSG9 :                       86585 C |  PSGInitLoop :                  280 C |
 PSG_Index :                  864AA C |  PalCycle :                    1734 C |
 PalCycle_GHZ :                174A C |  PalCycle_LZ :                 1778 C |
 PalCycle_Load :               1722 C |  PalCycle_MZ :                 182A C |
 PalCycle_SBZ :                18AE C |  PalCycle_SLZ :                182C C |
 PalCycle_SS :                 4786 C |  PalCycle_SYZ :                1868 C |
 PalCycle_Sega :               1DF0 C |  PalCycle_Title :              1742 C |
 PalLoad1 :                    1EE2 C |  PalLoad2 :                    1EFE C |
 PalLoad3_Water :              1F16 C |  PalLoad4_Water :              1F32 C |
 PalPointers :                 1F4E C |  PalToCRAM :                    F0C C |
 PalWhite_Loop :               1CD0 C |  Pal_AddColor :                1C0C C |
 Pal_AddColor2 :               1DB0 C |  Pal_AddGreen :                1C22 C |
 Pal_AddRed :                  1C30 C |  Pal_DecBlue :                 1CA4 C |
 Pal_DecColor :                1C86 C |  Pal_DecColor2 :               1D32 C |
 Pal_DecGreen :                1C96 C |  Pal_Ending :                  270E C |
 Pal_FadeFrom :                1C38 C |  Pal_FadeIn :                  1BCA C |
 Pal_FadeOut :                 1C58 C |  Pal_FadeTo :                  1B92 C |
 Pal_FadeTo2 :                 1B98 C |  Pal_GHZ :                     218E C |
 Pal_GHZCyc :                  196C C |  Pal_LZ :                      21EE C |
 Pal_LZCyc1 :                  198C C |  Pal_LZCyc2 :                  19AC C |
 Pal_LZCyc3 :                  19BE C |  Pal_LZSonWater :              260E C |
 Pal_LZWater :                 224E C |  Pal_LevelSel :                20EE C |
 Pal_MZ :                      22CE C |  Pal_MakeFlash :               1D62 C |
 Pal_MakeWhite :               1CB6 C |  Pal_SBZ1 :                    23EE C |
 Pal_SBZ2 :                    244E C |  Pal_SBZ3 :                    252E C |
 Pal_SBZ3Cyc1 :                19D0 C |  Pal_SBZ3SonWat :              262E C |
 Pal_SBZ3Water :               258E C |  Pal_SBZCyc1 :                 1AF0 C |
 Pal_SBZCyc10 :                1B86 C |  Pal_SBZCyc2 :                 1B00 C |
 Pal_SBZCyc3 :                 1B10 C |  Pal_SBZCyc4 :                 1B20 C |
 Pal_SBZCyc5 :                 1B2C C |  Pal_SBZCyc6 :                 1B3C C |
 Pal_SBZCyc7 :                 1B4C C |  Pal_SBZCyc8 :                 1B6C C |
 Pal_SBZCyc9 :                 1B76 C |  Pal_SBZCycList :              1A8C C |
 Pal_SBZCycList2 :             1AC4 C |  Pal_SLZ :                     232E C |
 Pal_SLZCyc :                  1A38 C |  Pal_SSCyc1 :                  48EE C |
 Pal_SSCyc2 :                  4936 C |  Pal_SYZ :                     238E C |
 Pal_SYZCyc1 :                 1A5C C |  Pal_SYZCyc2 :                 1A7C C |
 Pal_Sega1 :                   1EA6 C |  Pal_Sega2 :                   1EB2 C |
 Pal_SegaBG :                  1FEE C |  Pal_Sonic :                   216E C |
 Pal_SpeContinue :             26CE C |  Pal_SpeResult :               264E C |
 Pal_Special :                 24AE C |  Pal_Title :                   206E C |
 Pal_TitleCyc :                194C C |  Pal_ToBlack :                 1BAA C |
 Pal_ToWhite :                 1D82 C |  Pal_WhiteToBlack :            1CF0 C |
 PauseGame :                   118E C |  Pause_ChkBC :                 11D2 C |
 Pause_ChkStart :              11E2 C |  Pause_DoNothing :             11F6 C |
 Pause_SlowMo :                11F8 C |  Platform2 :                   727E C |
 Platform3 :                   7284 C |  PlatformObject :              725C C |
 PlayLevel :                   3128 C |  PlayPCM_Loop :               86ABE C |
 PlaySound :                   117C C |  PlaySound_Special :           1182 C |
*PlaySound_Unk :               1188 C |  PortA_Ok :                     214 C |
 PortC_Ok :                     292 C |  PrivilegeViol :              94BBE C |
 PrivilegeViol.__align_flag :    80 - |  PrivilegeViol.__lpos :           0 - |
 PrivilegeViol.__pos :                                     FFFFFFFFFFFFFFFF - |
*PrivilegeViol.__sp :             0 - |
*PrivilegeViol.__str :                                "PRIVILEGE VIOLATION" - |
*RELAXED :                        0 - | *RamEndLoc :                    1AC C |
*RamStartLoc :                  1A8 C |  RandomNumber :                279A C |
 ReadJoypads :                  FCC C |  Resize_Ending :               713A C |
 Resize_FZ :                   70DE C |  Resize_FZboss :               710A C |
 Resize_FZend :                7128 C |  Resize_FZend2 :               7138 C |
 Resize_FZmain :               70F6 C |  Resize_GHZ :                  6BF2 C |
 Resize_GHZ1 :                 6C08 C |  Resize_GHZ2 :                 6C1E C |
 Resize_GHZ3 :                 6C50 C |  Resize_GHZ3boss :             6CB8 C |
 Resize_GHZ3end :              6CFC C |  Resize_GHZ3main :             6C64 C |
 Resize_GHZx :                 6C02 C |  Resize_Index :                6BE4 C |
 Resize_LZ :                   6D04 C |  Resize_LZ12 :                 6D1C C |
 Resize_LZ3 :                  6D1E C |  Resize_LZx :                  6D14 C |
 Resize_MZ :                   6DA4 C |  Resize_MZ1 :                  6DBA C |
 Resize_MZ2 :                  6E8A C |  Resize_MZ3 :                  6EA0 C |
 Resize_MZ3boss :              6EB2 C |  Resize_MZ3end :               6EFE C |
 Resize_MZx :                  6DB4 C |  Resize_SBZ :                  701E C |
 Resize_SBZ1 :                 7034 C |  Resize_SBZ2 :                 7058 C |
 Resize_SBZ2boss :             7090 C |  Resize_SBZ2boss2 :            70AE C |
 Resize_SBZ2end :              70CC C |  Resize_SBZ2main :             706E C |
 Resize_SBZ3 :                 6D7C C |  Resize_SBZx :                 702E C |
 Resize_SLZ :                  6F06 C |  Resize_SLZ12 :                6F1C C |
 Resize_SLZ3 :                 6F1E C |  Resize_SLZ3boss :             6F46 C |
 Resize_SLZ3end :              6F72 C |  Resize_SLZ3main :             6F32 C |
 Resize_SLZx :                 6F16 C |  Resize_SYZ :                  6F7C C |
 Resize_SYZ1 :                 6F92 C |  Resize_SYZ2 :                 6F94 C |
 Resize_SYZ3 :                 6FB8 C |  Resize_SYZ3boss :             6FE4 C |
 Resize_SYZ3end :              7016 C |  Resize_SYZ3main :             6FCC C |
 Resize_SYZx :                 6F8C C |  ResumeMusic :                13E4C C |
 RomEndLoc :                    1A4 C | *RomStartLoc :                  1A0 C |
 RunPLC_Loop :                 14E4 C |  RunPLC_RAM :                  13D2 C |
 RunPLC_ROM :                  14D2 C |  SAP_First :                  143BE C |
 SAnim_Delay :                137E0 C |  SAnim_Do :                   137A6 C |
 SAnim_Do2 :                  137CC C |  SAnim_End :                  13810 C |
 SAnim_End_FD :               13806 C |  SAnim_End_FE :               137F2 C |
 SAnim_End_FF :               137E2 C |  SAnim_Next :                 137D8 C |
 SAnim_Push :                 138D6 C |  SAnim_RollJump :             13892 C |
 SAnim_WalkRun :              13812 C | *SMPS2ASMVer :                    1 - |
 SPLC_LoadTile :              13A42 C |  SPLC_ReadEntry :             13A2C C |
*SRAMSupport :                  1B0 C |  SS_1 :                       67592 C |
 SS_2 :                       6780C C |  SS_3 :                       67C1E C |
 SS_4 :                       67F7A C |  SS_5 :                       68454 C |
 SS_6 :                       68926 C |  SS_Ani1Up :                  1B336 C |
 SS_Ani1UpData :              1B360 C |  SS_AniBumpData :             1B330 C |
 SS_AniBumper :               1B300 C |  SS_AniEmerData :             1B3D6 C |
 SS_AniEmeraldSparks :        1B39C C |  SS_AniGlassBlock :           1B3DC C |
 SS_AniGlassData :            1B40A C |  SS_AniIndex :                1B2B8 C |
 SS_AniItems :                1B298 C |  SS_AniRevData :              1B396 C |
 SS_AniReverse :              1B366 C |  SS_AniRingData :             1B2FA C |
 SS_AniRingSparks :           1B2D0 C |  SS_AniWallsRings :           1B058 C |
 SS_BGAnimate :                4A08 C |  SS_BGLoad :                   46C0 C |
 SS_ChkEmldLoop :             1B472 C |  SS_ChkEmldNum :              1B45C C |
 SS_ChkEmldRepeat :           1B47A C |  SS_ChkEnd :                   458A C |
 SS_ClrNemRam :                44B0 C |  SS_ClrObjRam :                4480 C |
 SS_ClrRAM3 :                 1B4AA C |  SS_ClrRam :                   4490 C |
 SS_ClrRam2 :                  44A0 C |  SS_End :                      45AE C |
 SS_EndClrObjRam :             4674 C |  SS_EndLoop :                  45BE C |
 SS_FixCamera :               1B97E C |  SS_LayoutIndex :             1B414 C |
 SS_Load :                    1B444 C |  SS_LoadData :                1B47E C |
 SS_MainLoop :                 454E C |  SS_MapIndex :                1B500 C |
 SS_NoDebug :                  453C C |  SS_NormalExit :               4680 C |
 SS_RemoveCollectedItem :     1B282 C |  SS_ShowLayout :              1AF16 C |
 SS_StartLoc :                1B42C C |  SS_ToSegaScreen :             46B8 C |
 SS_WaRiVramSet :             1B202 C |  ScrollBlock1 :                65B6 C |
 ScrollBlock2 :                6620 C |  ScrollBlock3 :                6662 C |
 ScrollBlock4 :                6692 C |  ScrollHoriz :                 63CC C |
 ScrollHoriz2 :                6400 C |  ScrollVertical :              6464 C |
 SegaPCM :                    8E198 C |  SegaPCM_End :                94B10 C |
 SegaScreen :                  2BF6 C |  Sega_GotoTitle :              2CF6 C |
 Sega_WaitEnd :                2CDE C |  Sega_WaitPallet :             2CB6 C |
 SetupValues :                  294 C |  ShowVDPGraphics :             1206 C |
 SignpostArtLoad :             4098 C |  Signpost_Exit :               40CE C |
 Sine_Data :                   27D8 C |  SingleObjLoad :               D858 C |
 SingleObjLoad2 :              D86E C |  Size_of_DAC_driver_guess :    1760 - |
*Size_of_SegaPCM :             6978 - |  SkipSecurity :                 234 C |
 Slide_Chunks :                3DAE C |  Slide_Speeds :                3DC4 C |
 SlopeObject :                 7330 C |  SlopeObject2 :                832E C |
 SmashObject :                 CFC0 C |  Smash_LoadFrag :              CFEA C |
 Smash_Loop :                  CFE2 C |  Smash_PlaySnd :               D03A C |
 Snd_FadeOut1 :               86EF8 C |  Snd_FadeOut2 :               86F92 C |
 SolidObject :                 F792 C |  SolidObject2F :               F81E C |
 SolidObject71 :               F7D8 C |  SonAni_Balance :             13984 C |
 SonAni_Blank :               139EE C |  SonAni_Bubble :              139C8 C |
 SonAni_Death1 :              139D0 C |  SonAni_Death2 :              139D8 C |
 SonAni_Drown :               139D4 C |  SonAni_Duck :                1398C C |
 SonAni_Float1 :              139A4 C |  SonAni_Float2 :              139A8 C |
 SonAni_Float3 :              139F2 C |  SonAni_Float4 :              139FA C |
 SonAni_Hurt :                139E6 C |  SonAni_LZHang :              139B4 C |
 SonAni_LZSlide :             139EA C |  SonAni_Leap1 :               139B8 C |
 SonAni_Leap2 :               139BE C |  SonAni_LookUp :              13988 C |
 SonAni_Push :                13966 C |  SonAni_Roll :                13956 C |
 SonAni_Roll2 :               1395E C |  SonAni_Run :                 1394E C |
 SonAni_Shrink :              139DC C |  SonAni_Spring :              139B0 C |
 SonAni_Stop :                139A0 C |  SonAni_Surf :                139C4 C |
 SonAni_Wait :                1396E C |  SonAni_Walk :                13946 C |
 SonAni_Warp1 :               13990 C |  SonAni_Warp2 :               13994 C |
 SonAni_Warp3 :               13998 C |  SonAni_Warp4 :               1399C C |
 SonPLC_Balance1 :            219A6 C |  SonPLC_Balance2 :            219AD C |
 SonPLC_BblUnk :              21A18 C |  SonPLC_Blank :               21814 C |
 SonPLC_Bubble :              21A58 C |  SonPLC_Burnt :               21A31 C |
 SonPLC_Death1 :              21A1F C |  SonPLC_Drown :               21A26 C |
 SonPLC_Duck :                2199D C |  SonPLC_Float1 :              219B4 C |
 SonPLC_Float2 :              219BB C |  SonPLC_Float3 :              219BE C |
 SonPLC_Float4 :              219C5 C |  SonPLC_Hang1 :               219D3 C |
 SonPLC_Hang2 :               219DC C |  SonPLC_Injury1 :             21A51 C |
 SonPLC_Injury2 :             21A5F C |  SonPLC_Leap1 :               219E5 C |
 SonPLC_Leap2 :               219F0 C |  SonPLC_LookUp :              21833 C |
 SonPLC_Push1 :               219FB C |  SonPLC_Push2 :               21A00 C |
 SonPLC_Push3 :               21A07 C |  SonPLC_Push4 :               21A0C C |
 SonPLC_Roll1 :               21970 C |  SonPLC_Roll2 :               21973 C |
 SonPLC_Roll3 :               21976 C |  SonPLC_Roll4 :               21979 C |
 SonPLC_Roll5 :               2197C C |  SonPLC_Run11 :               2190C C |
 SonPLC_Run12 :               21911 C |  SonPLC_Run13 :               21916 C |
 SonPLC_Run14 :               2191B C |  SonPLC_Run21 :               21920 C |
 SonPLC_Run22 :               21929 C |  SonPLC_Run23 :               21930 C |
 SonPLC_Run24 :               21939 C |  SonPLC_Run31 :               21940 C |
 SonPLC_Run32 :               21945 C |  SonPLC_Run33 :               2194A C |
 SonPLC_Run34 :               2194F C |  SonPLC_Run41 :               21954 C |
 SonPLC_Run42 :               2195D C |  SonPLC_Run43 :               21962 C |
 SonPLC_Run44 :               2196B C |  SonPLC_Shrink1 :             21A3C C |
 SonPLC_Shrink2 :             21A41 C |  SonPLC_Shrink3 :             21A48 C |
 SonPLC_Shrink4 :             21A4B C |  SonPLC_Shrink5 :             21A4E C |
 SonPLC_Slide :               21A13 C |  SonPLC_Spring :              219CC C |
 SonPLC_Stand :               21815 C |  SonPLC_Stop1 :               2198F C |
 SonPLC_Stop2 :               21994 C |  SonPLC_Wait1 :               2181E C |
 SonPLC_Wait2 :               21825 C |  SonPLC_Wait3 :               2182C C |
 SonPLC_Walk11 :              2183A C |  SonPLC_Walk12 :              21843 C |
 SonPLC_Walk13 :              21848 C |  SonPLC_Walk14 :              2184D C |
 SonPLC_Walk15 :              21856 C |  SonPLC_Walk16 :              2185B C |
 SonPLC_Walk21 :              21862 C |  SonPLC_Walk22 :              2186D C |
 SonPLC_Walk23 :              2187A C |  SonPLC_Walk24 :              21883 C |
 SonPLC_Walk25 :              2188E C |  SonPLC_Walk26 :              21897 C |
 SonPLC_Walk31 :              218A2 C |  SonPLC_Walk32 :              218AB C |
 SonPLC_Walk33 :              218B0 C |  SonPLC_Walk34 :              218B5 C |
 SonPLC_Walk35 :              218BE C |  SonPLC_Walk36 :              218C3 C |
 SonPLC_Walk41 :              218CA C |  SonPLC_Walk42 :              218D7 C |
 SonPLC_Walk43 :              218E4 C |  SonPLC_Walk44 :              218ED C |
 SonPLC_Walk45 :              218F8 C |  SonPLC_Walk46 :              21901 C |
 SonPLC_Warp1 :               2197F C |  SonPLC_Warp2 :               21984 C |
 SonPLC_Warp3 :               21987 C |  SonPLC_Warp4 :               2198C C |
 SonicAniData :               13908 C |  SonicDriverVer :                 1 - |
 SonicDynPLC :                21764 C |  Sonic_Angle :                14520 C |
 Sonic_AnglePos :             143AC C |  Sonic_Animate :              13784 C |
 Sonic_Balance :              12CE8 C |  Sonic_ChgJumpDir :           12FEA C |
 Sonic_Display :              12A70 C |  Sonic_DontRunOnWalls :       14CF8 C |
 Sonic_Duck :                 12D36 C |  Sonic_Floor :                13346 C |
 Sonic_HitFloor :             14B60 C |  Sonic_HitWall :              14E32 C |
 Sonic_HurtStop :             135C8 C |  Sonic_Jump :                 1318C C |
 Sonic_JumpAngle :            1332A C |  Sonic_JumpHeight :           1323A C |
 Sonic_LevelBound :           130A6 C |  Sonic_LookUp :               12D1A C |
 Sonic_Loops :                136B8 C |  Sonic_Move :                 12C52 C |
 Sonic_MoveLeft :             12E20 C |  Sonic_MoveRight :            12E8C C |
 Sonic_RecordPos :            12B00 C |  Sonic_ResetOnFloor :         13542 C |
 Sonic_Roll :                 13126 C |  Sonic_RollLeft :             12FA4 C |
 Sonic_RollRepel :            132AC C |  Sonic_RollRight :            12FC8 C |
 Sonic_RollSpeed :            12EF2 C |  Sonic_SlopeRepel :           132E8 C |
 Sonic_SlopeResist :          13276 C |  Sonic_WalkCeiling :          145E8 C |
 Sonic_WalkSpeed :            14ACE C |  Sonic_WalkVertL :            1468A C |
 Sonic_WalkVertR :            1454C C |  Sonic_Water :                12B1A C |
 SoundA0 :                    8D718 C |  SoundA1 :                    8D72E C |
 SoundA2 :                    8D758 C |  SoundA3 :                    8D778 C |
 SoundA4 :                    8D7AA C |  SoundA5 :                    8D7E0 C |
 SoundA6 :                    8D80C C |  SoundA7 :                    8D83C C |
 SoundA8 :                    8D86C C |  SoundA9 :                    8D8A0 C |
 SoundAA :                    8D8B2 C |  SoundAB :                    8D8F4 C |
 SoundAC :                    8D914 C |  SoundAD :                    8D948 C |
 SoundAE :                    8D97E C |  SoundAF :                    8D9C8 C |
 SoundB0 :                    8D9F6 C |  SoundB1 :                    8DA28 C |
 SoundB2 :                    8DA54 C |  SoundB3 :                    8DAA4 C |
 SoundB4 :                    8DAEE C |  SoundB5 :                    8DB4A C |
 SoundB6 :                    8DB78 C |  SoundB7 :                    8DB96 C |
 SoundB8 :                    8DBD2 C |  SoundB9 :                    8DBF0 C |
 SoundBA :                    8DC54 C |  SoundBB :                    8DC7C C |
 SoundBC :                    8DCA8 C |  SoundBD :                    8DCEA C |
 SoundBE :                    8DD3E C |  SoundBF :                    8DD78 C |
 SoundC0 :                    8DDEA C |  SoundC1 :                    8DE18 C |
 SoundC2 :                    8DE52 C |  SoundC3 :                    8DE7C C |
 SoundC4 :                    8DEF6 C |  SoundC5 :                    8DF1E C |
 SoundC6 :                    8DF86 C |  SoundC7 :                    8DFC8 C |
 SoundC8 :                    8DFF6 C |  SoundC9 :                    8E008 C |
 SoundCA :                    8E036 C |  SoundCB :                    8E064 C |
 SoundCC :                    8E0B0 C |  SoundCD :                    8E0EA C |
 SoundCE :                    8E0F8 C |  SoundCF :                    8E126 C |
 SoundD0 :                    8E15E C |  SoundD0Index :               8D714 C |
 SoundDriverLoad :             1138 C |  SoundIndex :                 8D654 C |
 SoundTypes :                 865EA C |  Sound_81to9F :               86AF0 C |
 Sound_A0toCF :               86CE0 C |  Sound_ChkValue :             86A4A C |
 Sound_D0toDF :               86E24 C |  Sound_E0 :                   86FFC C |
 Sound_E0toE4 :               86A8C C |  Sound_E1 :                   86AAA C |
 Sound_E2 :                   87136 C |  Sound_E3 :                   87164 C |
 Sound_E4 :                   870B4 C |  Sound_ExIndex :              86A96 C |
 Sound_Play :                 86A04 C |  Sound_notA7 :                86D22 C |
 Sound_notB5 :                86D0E C |  SpecialStage :                4400 C |
 SpeedToPos :                  D3AC C |  StartLocArray :               5F60 C |
 StartOfRom :                     0 C | *TIME :                    "3:38:2" - |
*TRUE :                           1 - |  TimeBonuses :                 EAB4 C |
 TimeOver :                   1C7E8 C |  TitleScreen :                 2CFE C |
 Title_ChkLevSel :             3028 C |  Title_ChkRegion :             2F9C C |
 Title_ClrObjRam :             2D4A C |  Title_ClrObjRam2 :            2F04 C |
 Title_ClrPallet :             2DAA C |  Title_ClrScroll :             304A C |
 Title_ClrVram :               306C C |  Title_CountC :                3008 C |
 Title_EnterCheat :            2FB0 C |  Title_LoadText :              2E24 C |
 Title_PlayRing :              2FE6 C |  Title_RegionJ :               2FAA C |
 TouchResponse :              1ABB0 C |  Touch_CatKiller :            1AEDA C |
 Touch_ChkHurt :              1ADAA C |  Touch_ChkValue :             1AC88 C |
 Touch_D7orE1 :               1AF10 C |  Touch_Enemy :                1ACFC C |
 Touch_Height :               1AC42 C |  Touch_Hurt :                 1ADB4 C |
 Touch_KillEnemy :            1AD36 C |  Touch_Loop :                 1ABE2 C |
 Touch_Monitor :              1ACC0 C |  Touch_NextObj :              1ABEE C |
 Touch_NoDuck :               1ABD4 C |  Touch_Sizes :                1ABFA C |
 Touch_Special :              1AEB8 C |  Touch_Width :                1AC6A C |
 Touch_Yadrin :               1AEDE C |  Trace :                      94BE0 C |
 Trace.__align_flag :            80 - |  Trace.__lpos :                   0 - |
 Trace.__pos :     FFFFFFFFFFFFFFFF - | *Trace.__sp :                     0 - |
*Trace.__str :              "TRACE" - |  TrapvInstr :                 94B9E C |
 TrapvInstr.__align_flag :       80 - |  TrapvInstr.__lpos :              0 - |
 TrapvInstr.__pos :                                        FFFFFFFFFFFFFFFF - |
*TrapvInstr.__sp :                0 - |
*TrapvInstr.__str :                                     "TRAPV INSTRUCTION" - |
 TryAg_ClrObjRam :             5792 C |  TryAg_ClrPallet :             57A8 C |
 TryAg_Exit :                  5804 C |  TryAg_MainLoop :              57D4 C |
 TryAgainEnd :                 5756 C |  Unpause :                     11F0 C |
 VDPInitLoop :                  23E C |  VDPSetupArray :               1084 C |
 VDPSetupGame :                1008 C |  VDP_ClrCRAM :                 1042 C |
 VDP_Loop :                    101C C | *VERSION :                     142F - |
*Vectors :                        0 C |  WaitForZ80 :                   250 C |
 WaterHeight :                 3A10 C |  Z80InitLoop :                  256 C |
*Z80SYNTAX :                      0 - |  ZeroDivide :                 94B66 C |
 ZeroDivide.__align_flag :       80 - |  ZeroDivide.__lpos :              0 - |
 ZeroDivide.__pos :                                        FFFFFFFFFFFFFFFF - |
*ZeroDivide.__sp :                0 - | *ZeroDivide.__str :   "ZERO DIVIDE" - |
*__DEBUG__ :                      1 - |  _eh_address_error :              1 - |
 _eh_align_offset :              80 - |  _eh_default :                    0 - |
*_eh_enter_console :             40 - | *_eh_hide_caller :                4 - |
 _eh_return :                    20 - | *_eh_show_sr_usp :                2 - |
*bin :                           A0 - | *byte :                           0 - |
 byte_10054 :                  FE0E C |  byte_1005A :                  FE14 C |
 byte_10065 :                  FE1F C |  byte_1007A :                  FE34 C |
 byte_1008F :                  FE49 C |  byte_100A2 :                  FE5C C |
 byte_10230 :                  FFEA C |  byte_10234 :                  FFEE C |
 byte_10238 :                  FFF2 C |  byte_10246 :                 10000 C |
 byte_1024C :                 10006 C |  byte_1025C :                 10016 C |
 byte_10271 :                 1002B C |  byte_10710 :                 104CA C |
 byte_10716 :                 104D0 C |  byte_1072B :                 104E5 C |
 byte_10736 :                 104F0 C |  byte_1074B :                 10505 C |
 byte_1075B :                 10515 C |  byte_10761 :                 1051B C |
 byte_1076C :                 10526 C |  byte_10958 :                 1070E C |
 byte_10964 :                 1071A C |  byte_1096A :                 10720 C |
 byte_10970 :                 10726 C |  byte_10AA6 :                 1085C C |
 byte_10AC0 :                 10876 C |  byte_10AC6 :                 1087C C |
 byte_10D4A :                 10AFC C |  byte_10E84 :                 10C36 C |
 byte_1103E :                 10DEE C |  byte_11098 :                 10E48 C |
 byte_11178 :                 10F28 C |  byte_11188 :                 10F38 C |
 byte_11198 :                 10F48 C |  byte_111A8 :                 10F58 C |
 byte_111C7 :                 10F77 C |  byte_111E6 :                 10F96 C |
 byte_11326 :                 110D6 C |  byte_11331 :                 110E1 C |
 byte_113E6 :                 11196 C |  byte_113EC :                 1119C C |
 byte_113F8 :                 111A8 C |  byte_11403 :                 111B3 C |
 byte_1140E :                 111BE C |  byte_114BC :                 1126C C |
 byte_114D1 :                 11281 C |  byte_114E6 :                 11296 C |
 byte_1161A :                 113CA C |  byte_11625 :                 113D5 C |
 byte_11630 :                 113E0 C |  byte_119AC :                 1175A C |
 byte_119D0 :                 1177E C |  byte_119EA :                 11798 C |
 byte_119F0 :                 1179E C |  byte_11C12 :                 119BA C |
 byte_11C16 :                 119BE C |  byte_11C1C :                 119C4 C |
 byte_11C20 :                 119C8 C |  byte_11C24 :                 119CC C |
 byte_11C40 :                 119E8 C |  byte_11C50 :                 119F8 C |
 byte_11C60 :                 11A08 C |  byte_11C70 :                 11A18 C |
 byte_11C80 :                 11A28 C |  byte_11C90 :                 11A38 C |
 byte_11CA0 :                 11A48 C |  byte_11CAB :                 11A53 C |
 byte_11CB6 :                 11A5E C |  byte_11CBC :                 11A64 C |
 byte_11CC2 :                 11A6A C |  byte_11CC8 :                 11A70 C |
 byte_11EDA :                 11C7C C |  byte_11EDE :                 11C80 C |
 byte_11EEC :                 11C8E C |  byte_11EF2 :                 11C94 C |
 byte_11EF8 :                 11C9A C |  byte_11EFE :                 11CA0 C |
 byte_11F8A :                 11D2C C |  byte_11F8E :                 11D30 C |
 byte_11F92 :                 11D34 C |  byte_11F96 :                 11D38 C |
 byte_11FA6 :                 11D48 C |  byte_11FAC :                 11D4E C |
 byte_11FB2 :                 11D54 C |  byte_11FBD :                 11D5F C |
 byte_11FC3 :                 11D65 C |  byte_11FC9 :                 11D6B C |
 byte_121CA :                 11F6C C |  byte_121D0 :                 11F72 C |
 byte_121DB :                 11F7D C |  byte_121E1 :                 11F83 C |
 byte_12320 :                 120C0 C |  byte_12330 :                 120D0 C |
 byte_12336 :                 120D6 C |  byte_12686 :                 12424 C |
 byte_1268C :                 1242A C |  byte_12692 :                 12430 C |
 byte_12698 :                 12436 C |  byte_1269E :                 1243C C |
 byte_129AA :                 12746 C |  byte_129B0 :                 1274C C |
 byte_129B6 :                 12752 C |  byte_129BE :                 1275A C |
 byte_129C0 :                 1275C C |  byte_129C6 :                 12762 C |
 byte_129FA :                 12796 C |  byte_12A00 :                 1279C C |
 byte_12A06 :                 127A2 C |  byte_12A0C :                 127A8 C |
 byte_12A12 :                 127AE C |  byte_12A18 :                 127B4 C |
 byte_12A1E :                 127BA C |  byte_12A24 :                 127C0 C |
 byte_12A39 :                 127D5 C |  byte_12A4E :                 127EA C |
 byte_12A54 :                 127F0 C |  byte_12A5A :                 127F6 C |
 byte_12A60 :                 127FC C |  byte_12A66 :                 12802 C |
 byte_12A6C :                 12808 C |  byte_12A72 :                 1280E C |
 byte_12A78 :                 12814 C |  byte_12A7E :                 1281A C |
 byte_12A84 :                 12820 C |  byte_12A8A :                 12826 C |
 byte_12A90 :                 1282C C |  byte_12A96 :                 12832 C |
 byte_12A9C :                 12838 C |  byte_12B4E :                 128EA C |
 byte_12B6C :                 12908 C |  byte_12B72 :                 1290E C |
 byte_12B7D :                 12919 C |  byte_12B88 :                 12924 C |
 byte_12B8E :                 1292A C |  byte_12B99 :                 12935 C |
 byte_12B9F :                 1293B C |  byte_12BA5 :                 12941 C |
 byte_12BAB :                 12947 C |  byte_12BB6 :                 12952 C |
 byte_12BC1 :                 1295D C |  byte_12BCC :                 12968 C |
 byte_140D6 :                 13E94 C |  byte_140E0 :                 13E9E C |
 byte_140EA :                 13EA8 C |  byte_140F4 :                 13EB2 C |
 byte_140FE :                 13EBC C |  byte_14108 :                 13EC6 C |
 byte_14112 :                 13ED0 C |  byte_14118 :                 13ED6 C |
 byte_14120 :                 13EDE C |  byte_14128 :                 13EE6 C |
 byte_14130 :                 13EEE C |  byte_14138 :                 13EF6 C |
 byte_14140 :                 13EFE C |  byte_14148 :                 13F06 C |
 byte_1414A :                 13F08 C |  byte_14152 :                 13F10 C |
 byte_14356 :                 14114 C |  byte_1435E :                 1411C C |
 byte_14364 :                 14122 C |  byte_1437E :                 1413C C |
 byte_14398 :                 14156 C |  byte_143C2 :                 14180 C |
 byte_143CD :                 1418B C |  byte_143D7 :                 14195 C |
 byte_143EC :                 141AA C |  byte_14401 :                 141BF C |
 byte_14416 :                 141D4 C |  byte_1442B :                 141E9 C |
 byte_14440 :                 141FE C |  byte_14458 :                 14216 C |
 byte_1447C :                 1423A C |  byte_1448C :                 1424A C |
 byte_1449C :                 1425A C |  byte_144B6 :                 14274 C |
 byte_144E4 :                 142A2 C |  byte_1453F :                 142FD C |
 byte_14595 :                 14353 C |  byte_145BF :                 1437D C |
 byte_145C6 :                 14384 C |  byte_145D2 :                 14390 C |
 byte_145DD :                 1439B C |  byte_145E8 :                 143A6 C |
 byte_152B4 :                 150A2 C |  byte_152D3 :                 150C1 C |
 byte_152F2 :                 150E0 C |  byte_15311 :                 150FF C |
 byte_15330 :                 1511E C |  byte_1534F :                 1513D C |
 byte_1536E :                 1515C C |  byte_1538D :                 1517B C |
 byte_153AC :                 1519A C |  byte_153CB :                 151B9 C |
 byte_153EA :                 151D8 C |  byte_15409 :                 151F7 C |
 byte_15428 :                 15216 C |  byte_15447 :                 15235 C |
 byte_15466 :                 15254 C |  byte_15485 :                 15273 C |
 byte_154A4 :                 15292 C |  byte_15688 :                 15476 C |
 byte_158AC :                 1569A C |  byte_158B2 :                 156A0 C |
 byte_158B8 :                 156A6 C |  byte_158CC :                 156BA C |
 byte_158E6 :                 156D4 C |  byte_158FB :                 156E9 C |
 byte_15924 :                 15712 C |  byte_15944 :                 15732 C |
 byte_1594F :                 1573D C |  byte_1595A :                 15748 C |
 byte_15965 :                 15753 C |  byte_15970 :                 1575E C |
 byte_15BA0 :                 1598E C |  byte_15BC4 :                 159B2 C |
 byte_15BE8 :                 159D6 C |  byte_15BFD :                 159EB C |
 byte_15F72 :                 15D60 C |  byte_15F87 :                 15D75 C |
 byte_15FB0 :                 15D9E C |  byte_1611A :                 15F08 C |
 byte_16122 :                 15F10 C |  byte_16132 :                 15F20 C |
 byte_16138 :                 15F26 C |  byte_1613E :                 15F2C C |
 byte_16144 :                 15F32 C |  byte_161CC :                 15FBA C |
 byte_161D0 :                 15FBE C |  byte_161EC :                 15FDA C |
 byte_161F7 :                 15FE5 C |  byte_16207 :                 15FF5 C |
 byte_16221 :                 1600F C |  byte_16236 :                 16024 C |
 byte_16255 :                 16043 C |  byte_1648E :                 1627A C |
 byte_164A2 :                 1628E C |  byte_1662A :                 16416 C |
 byte_16D9E :                 16B86 C |  byte_16DA4 :                 16B8C C |
 byte_16DAA :                 16B92 C |  byte_16DB0 :                 16B98 C |
 byte_16DB6 :                 16B9E C |  byte_16DBC :                 16BA4 C |
 byte_16DC2 :                 16BAA C |  byte_16DC8 :                 16BB0 C |
 byte_16DCE :                 16BB6 C |  byte_16DD4 :                 16BBC C |
 byte_16DDA :                 16BC2 C |  byte_16DE0 :                 16BC8 C |
 byte_16DE6 :                 16BCE C |  byte_16DEC :                 16BD4 C |
 byte_16DF2 :                 16BDA C |  byte_16DF8 :                 16BE0 C |
 byte_16DFE :                 16BE6 C |  byte_16E04 :                 16BEC C |
 byte_16E0A :                 16BF2 C |  byte_16E10 :                 16BF8 C |
 byte_16E16 :                 16BFE C |  byte_16E1C :                 16C04 C |
 byte_16E22 :                 16C0A C |  byte_16E28 :                 16C10 C |
 byte_17100 :                 16EE6 C |  byte_1711F :                 16F05 C |
 byte_17134 :                 16F1A C |  byte_1713F :                 16F25 C |
 byte_17250 :                 17036 C |  byte_17251 :                 17037 C |
 byte_17257 :                 1703D C |  byte_1725D :                 17043 C |
 byte_172F8 :                 170DE C |  byte_1733F :                 17125 C |
 byte_17390 :                 17176 C |  byte_173C3 :                 171A9 C |
 byte_1743C :                 17222 C |  byte_174A1 :                 17287 C |
 byte_17524 :                 1730A C |  byte_17598 :                 1737E C |
 byte_17634 :                 1741A C |  byte_17680 :                 17466 C |
 byte_176A9 :                 1748F C |  byte_17CD4 :                 17AAE C |
 byte_17CD8 :                 17AB2 C |  byte_17CDC :                 17AB6 C |
 byte_17CE0 :                 17ABA C |  byte_17CE4 :                 17ABE C |
 byte_17CE8 :                 17AC2 C |  byte_17CEC :                 17AC6 C |
 byte_17CF0 :                 17ACA C |  byte_17CF4 :                 17ACE C |
 byte_17CF8 :                 17AD2 C |  byte_17CFC :                 17AD6 C |
 byte_17D00 :                 17ADA C |  byte_17D26 :                 17B00 C |
 byte_17D45 :                 17B1F C |  byte_17D50 :                 17B2A C |
 byte_17D5B :                 17B35 C |  byte_17D6B :                 17B45 C |
 byte_17D7B :                 17B55 C |  byte_17D8B :                 17B65 C |
 byte_17D9B :                 17B75 C |  byte_17DB0 :                 17B8A C |
 byte_17DB6 :                 17B90 C |  byte_17DBC :                 17B96 C |
 byte_17DBD :                 17B97 C |  byte_17DC8 :                 17BA2 C |
 byte_17DE4 :                 17BBE C |  byte_17DEA :                 17BC4 C |
 byte_17DF6 :                 17BD0 C |  byte_17DFC :                 17BD6 C |
 byte_17E02 :                 17BDC C |  byte_17E08 :                 17BE2 C |
 byte_17E1E :                 17BF8 C |  byte_17E2A :                 17C04 C |
 byte_19022 :                 18DF4 C |  byte_19026 :                 18DF8 C |
 byte_190E2 :                 18EB4 C |  byte_190E8 :                 18EBA C |
 byte_19808 :                 195DA C |  byte_19814 :                 195E6 C |
 byte_1981A :                 195EC C |  byte_19820 :                 195F2 C |
 byte_19826 :                 195F8 C |  byte_19A10 :                 197E2 C |
 byte_19A14 :                 197E6 C |  byte_19A18 :                 197EA C |
 byte_19A20 :                 197F2 C |  byte_19A24 :                 197F6 C |
 byte_19A2A :                 197FC C |  byte_19A30 :                 19802 C |
 byte_19A4A :                 1981C C |  byte_19A5A :                 1982C C |
 byte_19A70 :                 19842 C |  byte_19A86 :                 19858 C |
 byte_19A9C :                 1986E C |  byte_19AB2 :                 19884 C |
 byte_19AC8 :                 1989A C |  byte_19AEC :                 198BE C |
 byte_19B06 :                 198D8 C |  byte_19B26 :                 198F8 C |
 byte_19B4F :                 19921 C |  byte_19D1C :                 19AEE C |
 byte_19D22 :                 19AF4 C |  byte_19D2E :                 19B00 C |
 byte_19D3A :                 19B0C C |  byte_19D46 :                 19B18 C |
 byte_1A3C :                   1822 C |  byte_1A3D6 :                 1A1A8 C |
 byte_1A3DE :                 1A1B0 C |  byte_1A3FD :                 1A1CF C |
 byte_1A422 :                 1A1F4 C |  byte_1A42D :                 1A1FF C |
 byte_1A43D :                 1A20F C |  byte_1A68E :                 1A460 C |
 byte_1A6AD :                 1A47F C |  byte_1A6D6 :                 1A4A8 C |
 byte_1A709 :                 1A4DB C |  byte_1A746 :                 1A518 C |
 byte_1A788 :                 1A55A C |  byte_1A7CF :                 1A5A1 C |
 byte_1AA46 :                 1A818 C |  byte_1AA4A :                 1A81C C |
 byte_1AA50 :                 1A822 C |  byte_1AA5E :                 1A830 C |
 byte_1AA64 :                 1A836 C |  byte_1AA6A :                 1A83C C |
 byte_1AA70 :                 1A842 C |  byte_1AA7A :                 1A84C C |
 byte_1AA9C :                 1A86E C |  byte_1AABC :                 1A88E C |
 byte_1AAC7 :                 1A899 C |  byte_1AAD2 :                 1A8A4 C |
 byte_1AADD :                 1A8AF C |  byte_1AAE8 :                 1A8BA C |
 byte_1AAF3 :                 1A8C5 C |  byte_1AAFE :                 1A8D0 C |
 byte_1AB04 :                 1A8D6 C |  byte_1AB0A :                 1A8DC C |
 byte_1AB15 :                 1A8E7 C |  byte_1AB20 :                 1A8F2 C |
 byte_1AD70 :                 1AB3C C |  byte_1AD82 :                 1AB4E C |
 byte_1ADA6 :                 1AB72 C |  byte_1ADAC :                 1AB78 C |
 byte_1ADCB :                 1AB97 C |  byte_1ADD1 :                 1AB9D C |
 byte_1ADDC :                 1ABA8 C |  byte_1ADE2 :                 1ABAE C |
 byte_1B912 :                 1B6DA C |  byte_1B918 :                 1B6E0 C |
 byte_1B91E :                 1B6E6 C |  byte_1B928 :                 1B6F0 C |
 byte_1B92E :                 1B6F6 C |  byte_1B934 :                 1B6FC C |
 byte_1B93A :                 1B702 C |  byte_1B944 :                 1B70C C |
 byte_1B94A :                 1B712 C |  byte_1B954 :                 1B71C C |
 byte_1B95A :                 1B722 C |  byte_1B96C :                 1B734 C |
 byte_1B972 :                 1B73A C |  byte_1B978 :                 1B740 C |
 byte_1B97E :                 1B746 C |  byte_1C10E :                 1C170 C |
 byte_1C334 :                 1C396 C |  byte_1C376 :                 1C3D8 C |
 byte_1C5BC :                 1C618 C |  byte_1C5F0 :                 1C64C C |
 byte_1C624 :                 1C680 C |  byte_1C658 :                 1C6B4 C |
 byte_21292 :                 211F8 C |  byte_21293 :                 211F9 C |
 byte_212A8 :                 2120E C |  byte_212B8 :                 2121E C |
 byte_212C8 :                 2122E C |  byte_212D8 :                 2123E C |
 byte_212E8 :                 2124E C |  byte_212FD :                 21263 C |
 byte_21308 :                 2126E C |  byte_21313 :                 21279 C |
 byte_21328 :                 2128E C |  byte_21333 :                 21299 C |
 byte_21343 :                 212A9 C |  byte_2135D :                 212C3 C |
 byte_2137C :                 212E2 C |  byte_21391 :                 212F7 C |
 byte_213AB :                 21311 C |  byte_213C0 :                 21326 C |
 byte_213DA :                 21340 C |  byte_213EF :                 21355 C |
 byte_213FA :                 21360 C |  byte_21405 :                 2136B C |
 byte_2141A :                 21380 C |  byte_21425 :                 2138B C |
 byte_21435 :                 2139B C |  byte_21454 :                 213BA C |
 byte_21473 :                 213D9 C |  byte_21488 :                 213EE C |
 byte_214A2 :                 21408 C |  byte_214B7 :                 2141D C |
 byte_214D1 :                 21437 C |  byte_214DC :                 21442 C |
 byte_214E7 :                 2144D C |  byte_214F2 :                 21458 C |
 byte_214FD :                 21463 C |  byte_21512 :                 21478 C |
 byte_21522 :                 21488 C |  byte_21537 :                 2149D C |
 byte_21547 :                 214AD C |  byte_21552 :                 214B8 C |
 byte_2155D :                 214C3 C |  byte_21568 :                 214CE C |
 byte_21573 :                 214D9 C |  byte_21588 :                 214EE C |
 byte_21593 :                 214F9 C |  byte_215A8 :                 2150E C |
 byte_215B3 :                 21519 C |  byte_215B9 :                 2151F C |
 byte_215BF :                 21525 C |  byte_215C5 :                 2152B C |
 byte_215CB :                 21531 C |  byte_215D1 :                 21537 C |
 byte_215DC :                 21542 C |  byte_215E2 :                 21548 C |
 byte_215ED :                 21553 C |  byte_215F3 :                 21559 C |
 byte_215FE :                 21564 C |  byte_21613 :                 21579 C |
 byte_21628 :                 2158E C |  byte_21638 :                 2159E C |
 byte_21648 :                 215AE C |  byte_21658 :                 215BE C |
 byte_21663 :                 215C9 C |  byte_21673 :                 215D9 C |
 byte_21683 :                 215E9 C |  byte_21693 :                 215F9 C |
 byte_216A8 :                 2160E C |  byte_216BD :                 21623 C |
 byte_216D7 :                 2163D C |  byte_216F1 :                 21657 C |
 byte_216FC :                 21662 C |  byte_2170C :                 21672 C |
 byte_21717 :                 2167D C |  byte_21727 :                 2168D C |
 byte_21732 :                 21698 C |  byte_21742 :                 216A8 C |
 byte_21752 :                 216B8 C |  byte_2176C :                 216D2 C |
 byte_21786 :                 216EC C |  byte_21791 :                 216F7 C |
 byte_217A1 :                 21707 C |  byte_217A7 :                 2170D C |
 byte_217AD :                 21713 C |  byte_217B3 :                 21719 C |
 byte_217C3 :                 21729 C |  byte_217D3 :                 21739 C |
 byte_217E3 :                 21749 C |  byte_217F3 :                 21759 C |
 byte_2C584 :                 2C4EA C |  byte_2C58A :                 2C4F0 C |
 byte_2C590 :                 2C4F6 C |  byte_2C596 :                 2C4FC C |
 byte_2C59C :                 2C502 C |  byte_2C5A2 :                 2C508 C |
 byte_2C5A8 :                 2C50E C |  byte_2C5AE :                 2C514 C |
 byte_2C5B4 :                 2C51A C |  byte_2C5BA :                 2C520 C |
 byte_2C5C0 :                 2C526 C |  byte_2C5C6 :                 2C52C C |
 byte_2C5CC :                 2C532 C |  byte_2C5D2 :                 2C538 C |
 byte_2C5D8 :                 2C53E C |  byte_2C5DE :                 2C544 C |
 byte_4A3C :                   4860 C |  byte_4ABC :                   48E0 C |
 byte_4CB8 :                   4ADC C |  byte_4CC4 :                   4AE8 C |
 byte_4CCC :                   4AF0 C |  byte_504A :                   4E6C C |
 byte_5066 :                   4E88 C |  byte_509E :                   4EC0 C |
 byte_50AE :                   4ED0 C |  byte_50BE :                   4EE0 C |
 byte_50CE :                   4EF0 C |  byte_50D9 :                   4EFB C |
 byte_50DF :                   4F01 C |  byte_551C :                   5346 C |
 byte_552A :                   5354 C |  byte_5534 :                   535E C |
 byte_5690 :                   54BA C |  byte_569B :                   54C5 C |
 byte_56AB :                   54D5 C |  byte_56B6 :                   54E0 C |
 byte_56C1 :                   54EB C |  byte_56CC :                   54F6 C |
 byte_56DC :                   5506 C |  byte_5700 :                   552A C |
 byte_5788 :                   55B2 C |  byte_578E :                   55B8 C |
 byte_5794 :                   55BE C |  byte_579A :                   55C4 C |
 byte_57A0 :                   55CA C |  byte_57A6 :                   55D0 C |
 byte_57AC :                   55D6 C |  byte_57B4 :                   55DE C |
 byte_5AA8 :                   58D2 C |  byte_5AAC :                   58D6 C |
 byte_5AB0 :                   58DA C |  byte_5BCC :                   59F6 C |
 byte_5BF5 :                   5A1F C |  byte_5C1E :                   5A48 C |
 byte_5C47 :                   5A71 C |  byte_5C70 :                   5A9A C |
 byte_5CAD :                   5AD7 C |  byte_5CE0 :                   5B0A C |
 byte_5D13 :                   5B3D C |  byte_68D70 :                 6BE86 C |
 byte_68E3C :                 6CE8A C |  byte_68F84 :                 6DEB0 C |
 byte_68F88 :                 6DEB4 C |  byte_69190 :                 6EFBA C |
 byte_6922E :                 6FFBE C |  byte_6934C :                 71FC2 C |
 byte_6940A :                 72FC6 C |  byte_6965C :                 750D6 C |
 byte_697E6 :                 7617E C |  byte_697EA :                 76182 C |
 byte_69B84 :                 79200 C |  byte_69C7E :                 7A23E C |
 byte_69D86 :                 7B242 C |  byte_69EE4 :                 7C246 C |
 byte_69EE8 :                 7C24A C |  byte_6A2F8 :                 7E3F6 C |
 byte_6A2FC :                 7E3FA C |  byte_6A320 :                 7F3FE C |
 byte_71A94 :                 86596 C |  byte_71CC4 :                 867C6 C |
 byte_721BA :                 86CD4 C |  byte_721C2 :                 86CDC C |
 byte_72CAC :                 877BE C |  byte_72D18 :                 8782A C |
 byte_72D2C :                 8783E C |  byte_793A :                   774A C |
 byte_7940 :                   7750 C |  byte_794B :                   775B C |
 byte_7C4E :                   7A5A C |  byte_7C59 :                   7A65 C |
 byte_7C5F :                   7A6B C |  byte_7C6C :                   7A78 C |
 byte_7C95 :                   7AA1 C |  byte_7C9B :                   7AA7 C |
 byte_7E08 :                   7C10 C |  byte_7E0E :                   7C16 C |
 byte_7E14 :                   7C1C C |  byte_7E1A :                   7C22 C |
 byte_7E20 :                   7C28 C |  byte_7E26 :                   7C2E C |
 byte_7E2C :                   7C34 C |  byte_7E2D :                   7C35 C |
 byte_80FE :                   7F06 C |  byte_8109 :                   7F11 C |
 byte_8140 :                   7F48 C |  byte_8155 :                   7F5D C |
 byte_818A :                   7F92 C |  byte_819C :                   7FA4 C |
 byte_81B2 :                   7FBA C |  byte_81D1 :                   7FD9 C |
 byte_81E6 :                   7FEE C |  byte_81FB :                   8003 C |
 byte_85A8 :                   83AC C |  byte_85F9 :                   83FD C |
 byte_864A :                   844E C |  byte_86C8 :                   84CC C |
 byte_874E :                   8552 C |  byte_8763 :                   8567 C |
 byte_878C :                   8590 C |  byte_87A1 :                   85A5 C |
 byte_8858 :                   865C C |  byte_891E :                   8722 C |
 byte_89FE :                   8802 C |  byte_8A09 :                   880D C |
 byte_8A14 :                   8818 C |  byte_8A1F :                   8823 C |
 byte_8A2A :                   882E C |  byte_8A35 :                   8839 C |
 byte_8A40 :                   8844 C |  byte_8A4B :                   884F C |
 byte_8A56 :                   885A C |  byte_8E4A :                   8C46 C |
 byte_8E6E :                   8C6A C |  byte_8E79 :                   8C75 C |
 byte_8E84 :                   8C80 C |  byte_8E8F :                   8C8B C |
 byte_8E9A :                   8C96 C |  byte_8EA0 :                   8C9C C |
 byte_8EAE :                   8CAA C |  byte_8EB4 :                   8CB0 C |
 byte_8EBA :                   8CB6 C |  byte_8EC0 :                   8CBC C |
 byte_8ED0 :                   8CCC C |  byte_8ED6 :                   8CD2 C |
 byte_8EDC :                   8CD8 C |  byte_8EE2 :                   8CDE C |
 byte_8EF7 :                   8CF3 C |  byte_8F16 :                   8D12 C |
 byte_8F1C :                   8D18 C |  byte_946C :                   9266 C |
 byte_9472 :                   926C C |  byte_9478 :                   9272 C |
 byte_9484 :                   927E C |  byte_948A :                   9284 C |
 byte_9490 :                   928A C |  byte_949C :                   9296 C |
 byte_94A2 :                   929C C |  byte_94A8 :                   92A2 C |
 byte_94BC :                   92B6 C |  byte_94C2 :                   92BC C |
 byte_94C8 :                   92C2 C |  byte_94CE :                   92C8 C |
 byte_94D4 :                   92CE C |  byte_94DA :                   92D4 C |
 byte_94E5 :                   92DF C |  byte_972A :                   9520 C |
 byte_972E :                   9524 C |  byte_9732 :                   9528 C |
 byte_9736 :                   952C C |  byte_973C :                   9532 C |
 byte_9742 :                   9538 C |  byte_9748 :                   953E C |
 byte_974C :                   9542 C |  byte_975E :                   9554 C |
 byte_9773 :                   9569 C |  byte_9788 :                   957E C |
 byte_979D :                   9593 C |  byte_97B2 :                   95A8 C |
 byte_97D1 :                   95C7 C |  byte_97D7 :                   95CD C |
 byte_9A1E :                   980E C |  byte_9A22 :                   9812 C |
 byte_9A26 :                   9816 C |  byte_9A2E :                   981E C |
 byte_9A32 :                   9822 C |  byte_9A42 :                   9832 C |
 byte_9A61 :                   9851 C |  byte_9A80 :                   9870 C |
 byte_9AA4 :                   9894 C |  byte_9AC8 :                   98B8 C |
 byte_9AE7 :                   98D7 C |  byte_9B0E :                   98FE C |
 byte_9B14 :                   9904 C |  byte_9B1A :                   990A C |
 byte_9B20 :                   9910 C |  byte_9F8C :                   9D76 C |
 byte_9FA2 :                   9D8C C |  byte_9FA8 :                   9D92 C |
 byte_9FAE :                   9D98 C |  byte_9FB4 :                   9D9E C |
 byte_9FBA :                   9DA4 C |  byte_9FC0 :                   9DAA C |
 byte_9FC6 :                   9DB0 C |  byte_9FCC :                   9DB6 C |
 byte_9FDA :                   9DC4 C |  byte_A00D :                   9DF7 C |
 byte_A036 :                   9E20 C |  byte_A04B :                   9E35 C |
 byte_A084 :                   9E6E C |  byte_A08F :                   9E79 C |
 byte_A0A4 :                   9E8E C |  byte_A0B9 :                   9EA3 C |
 byte_A0CE :                   9EB8 C |  byte_A0E3 :                   9ECD C |
 byte_A0F8 :                   9EE2 C |  byte_A103 :                   9EED C |
 byte_A51C :                   A302 C |  byte_A522 :                   A308 C |
 byte_A52E :                   A314 C |  byte_A53A :                   A320 C |
 byte_A546 :                   A32C C |  byte_A552 :                   A338 C |
 byte_A55E :                   A344 C |  byte_A56A :                   A350 C |
 byte_A576 :                   A35C C |  byte_A582 :                   A368 C |
 byte_A5A2 :                   A388 C |  byte_A5A8 :                   A38E C |
 byte_A5B3 :                   A399 C |  byte_A5BE :                   A3A4 C |
 byte_A5C9 :                   A3AF C |  byte_A5D4 :                   A3BA C |
 byte_A5DF :                   A3C5 C |  byte_A5EA :                   A3D0 C |
 byte_A5F5 :                   A3DB C |  byte_A600 :                   A3E6 C |
*byte_A601 :                   A3E7 C |  byte_A60B :                   A3F1 C |
 byte_A616 :                   A3FC C |  byte_A706 :                   A4EC C |
 byte_A714 :                   A4FA C |  byte_A7CC :                   A5B2 C |
 byte_A7CD :                   A5B3 C |  byte_A7EB :                   A5D1 C |
 byte_A882 :                   A668 C |  byte_A898 :                   A67E C |
 byte_A8CB :                   A6B1 C |  byte_A917 :                   A6FD C |
 byte_A96D :                   A753 C |  byte_A9AF :                   A795 C |
 byte_A9E7 :                   A7CD C |  byte_AA47 :                   A82D C |
 byte_AAB1 :                   A897 C |  byte_ABBE :                   A9A4 C |
 byte_ABC2 :                   A9A8 C |  byte_ABC6 :                   A9AC C |
 byte_ABCE :                   A9B4 C |  byte_ABD4 :                   A9BA C |
 byte_AC6A :                   AA50 C |  byte_AC78 :                   AA5E C |
 byte_AC83 :                   AA69 C |  byte_AC8E :                   AA74 C |
 byte_AC99 :                   AA7F C |  byte_AE4C :                   AC32 C |
 byte_AE50 :                   AC36 C |  byte_AE54 :                   AC3A C |
 byte_AE58 :                   AC3E C |  byte_AE6A :                   AC50 C |
 byte_AE75 :                   AC5B C |  byte_AE80 :                   AC66 C |
 byte_AE8B :                   AC71 C |  byte_AE96 :                   AC7C C |
 byte_AEA1 :                   AC87 C |  byte_AEAC :                   AC92 C |
 byte_B2CE :                   B0B0 C |  byte_B2DA :                   B0BC C |
 byte_B31C :                   B0FE C |  byte_B34F :                   B131 C |
 byte_B37A :                   B15C C |  byte_B380 :                   B162 C |
 byte_B386 :                   B168 C |  byte_B38C :                   B16E C |
 byte_B392 :                   B174 C |  byte_B398 :                   B17A C |
 byte_B600 :                   B3E0 C |  byte_B63D :                   B41D C |
 byte_B648 :                   B428 C |  byte_BB64 :                   B940 C |
 byte_BB7E :                   B95A C |  byte_BB98 :                   B974 C |
 byte_BB9E :                   B97A C |  byte_BBA9 :                   B985 C |
 byte_BBBE :                   B99A C |  byte_BBDD :                   B9B9 C |
 byte_BC06 :                   B9E2 C |  byte_BC39 :                   BA15 C |
 byte_BC53 :                   BA2F C |  byte_BC6C :                   BA48 C |
 byte_BC7C :                   BA58 C |  byte_BC8C :                   BA68 C |
 byte_BC92 :                   BA6E C |  byte_BC9D :                   BA79 C |
 byte_BCB2 :                   BA8E C |  byte_BCD1 :                   BAAD C |
 byte_BCFA :                   BAD6 C |  byte_BEAC :                   BC88 C |
 byte_BEB7 :                   BC93 C |  byte_BEC2 :                   BC9E C |
 byte_C2EA :                   C0C4 C |  byte_C2F0 :                   C0CA C |
 byte_C9FE :                   C7D0 C |  byte_CA2C :                   C7FE C |
 byte_CA5A :                   C82C C |  byte_CA7A :                   C84C C |
 byte_CAA8 :                   C87A C |  byte_CADC :                   C8AE C |
 byte_CB10 :                   C8E2 C |  byte_CB26 :                   C8F8 C |
 byte_CB31 :                   C903 C |  byte_CB3C :                   C90E C |
 byte_CB47 :                   C919 C |  byte_CB8A :                   C95C C |
 byte_CBAC :                   C97E C |  byte_CBB7 :                   C989 C |
 byte_CBC2 :                   C994 C |  byte_CBCD :                   C99F C |
 byte_CBEA :                   C9BC C |  byte_CC13 :                   C9E5 C |
 byte_CC32 :                   CA04 C |  byte_CC51 :                   CA23 C |
 byte_CC75 :                   CA47 C |  byte_CCAC :                   CA7E C |
 byte_CCEE :                   CAC0 C |  byte_CD0D :                   CADF C |
 byte_CD31 :                   CB03 C |  byte_CD46 :                   CB18 C |
 byte_CD5B :                   CB2D C |  byte_CD6B :                   CB3D C |
 byte_CDA8 :                   CB7A C |  byte_CE02 :                   CBD4 C |
 byte_CE08 :                   CBDA C |  byte_CE0E :                   CBE0 C |
 byte_CE14 :                   CBE6 C |  byte_CE1A :                   CBEC C |
 byte_CE20 :                   CBF2 C |  byte_CE26 :                   CBF8 C |
 byte_CFF4 :                   CDC6 C |  byte_D004 :                   CDD6 C |
 byte_D014 :                   CDE6 C |  byte_D01A :                   CDEC C |
 byte_D02A :                   CDFC C |  byte_D049 :                   CE1B C |
 byte_D110 :                   CEE2 C |  byte_D2BC :                   D08A C |
 byte_D2E5 :                   D0B3 C |  byte_D30E :                   D0DC C |
 byte_DD02 :                   DACE C |  byte_DD0E :                   DADA C |
 byte_DD26 :                   DAF2 C |  byte_DD31 :                   DAFD C |
 byte_DD37 :                   DB03 C |  byte_DD47 :                   DB13 C |
 byte_DD4D :                   DB19 C |  byte_DD53 :                   DB1F C |
 byte_DF24 :                   DCEE C |  byte_DF28 :                   DCF2 C |
 byte_DF30 :                   DCFA C |  byte_DF34 :                   DCFE C |
 byte_DF38 :                   DD02 C |  byte_DF58 :                   DD22 C |
 byte_DF68 :                   DD32 C |  byte_DF78 :                   DD42 C |
 byte_DF88 :                   DD52 C |  byte_DF9D :                   DD67 C |
 byte_DFAD :                   DD77 C |  byte_DFB8 :                   DD82 C |
 byte_DFC8 :                   DD92 C |  byte_DFD8 :                   DDA2 C |
 byte_DFE8 :                   DDB2 C |  byte_DFF8 :                   DDC2 C |
 byte_E190 :                   DF5A C |  byte_E196 :                   DF60 C |
 byte_E19C :                   DF66 C |  byte_E1AC :                   DF76 C |
 byte_E1B7 :                   DF81 C |  byte_E1C2 :                   DF8C C |
 byte_E1C8 :                   DF92 C |  byte_E1CE :                   DF98 C |
 byte_E256 :                   E020 C |  byte_E26B :                   E035 C |
 byte_E280 :                   E04A C |  byte_E4CC :                   E294 C |
 byte_E4D2 :                   E29A C |  byte_E4D6 :                   E29E C |
 byte_E4DC :                   E2A4 C |  byte_E5C4 :                   E38C C |
 byte_E5D2 :                   E39A C |  byte_E5DC :                   E3A4 C |
 byte_E5EA :                   E3B2 C |  byte_E620 :                   E3E8 C |
 byte_E626 :                   E3EE C |  byte_E631 :                   E3F9 C |
 byte_E63C :                   E404 C |  byte_E64C :                   E414 C |
 byte_E65C :                   E424 C |  byte_E671 :                   E439 C |
 byte_E686 :                   E44E C |  byte_E6A0 :                   E468 C |
 byte_E6BA :                   E482 C |  byte_E6D9 :                   E4A1 C |
 byte_E6F8 :                   E4C0 C |  byte_E6FE :                   E4C6 C |
 byte_E709 :                   E4D1 C |  byte_E714 :                   E4DC C |
 byte_E724 :                   E4EC C |  byte_E734 :                   E4FC C |
 byte_E749 :                   E511 C |  byte_E75E :                   E526 C |
 byte_E778 :                   E540 C |  byte_E792 :                   E55A C |
 byte_E7B1 :                   E579 C |  byte_E906 :                   E6CE C |
 byte_E98E :                   E756 C |  byte_E999 :                   E761 C |
 byte_E9A4 :                   E76C C |  byte_E9AF :                   E777 C |
 byte_E9BA :                   E782 C |  byte_E9C5 :                   E78D C |
 byte_EAF4 :                   E8BA C |  byte_EAF8 :                   E8BE C |
 byte_EB06 :                   E8CC C |  byte_EB11 :                   E8D7 C |
 byte_EB1C :                   E8E2 C |  byte_ED24 :                   EAE8 C |
 byte_ED28 :                   EAEC C |  byte_ED2E :                   EAF2 C |
 byte_ED34 :                   EAF8 C |  byte_ED42 :                   EB06 C |
 byte_ED52 :                   EB16 C |  byte_ED5D :                   EB21 C |
 byte_ED68 :                   EB2C C |  byte_ED73 :                   EB37 C |
 byte_F212 :                   EFD0 C |  byte_F220 :                   EFDE C |
 byte_F22A :                   EFE8 C |  byte_F22E :                   EFEC C |
 byte_F232 :                   EFF0 C |  byte_F23A :                   EFF8 C |
 byte_F23E :                   EFFC C |  byte_F244 :                   F002 C |
 byte_F272 :                   F030 C |  byte_F27D :                   F03B C |
 byte_F288 :                   F046 C |  byte_F29D :                   F05B C |
 byte_F2B2 :                   F070 C |  byte_F2D1 :                   F08F C |
 byte_F2F0 :                   F0AE C |  byte_F2FB :                   F0B9 C |
 byte_F306 :                   F0C4 C |  byte_F339 :                   F0F7 C |
 byte_F36C :                   F12A C |  byte_F39F :                   F15D C |
 byte_F3BE :                   F17C C |  byte_F3DD :                   F19B C |
 byte_F3FC :                   F1BA C |  byte_F44D :                   F20B C |
 byte_F49E :                   F25C C |  byte_F4EF :                   F2AD C |
 byte_F50E :                   F2CC C |  byte_F52D :                   F2EB C |
 byte_F538 :                   F2F6 C |  byte_F566 :                   F324 C |
 byte_F594 :                   F352 C |  byte_F5C2 :                   F380 C |
 byte_F5F0 :                   F3AE C |  byte_F788 :                   F544 C |
 byte_F78C :                   F548 C |  byte_F792 :                   F54E C |
 byte_F7AE :                   F56A C |  byte_F7C3 :                   F57F C |
 byte_F7D8 :                   F594 C |  byte_F7F2 :                   F5AE C |
 byte_F7F8 :                   F5B4 C |  byte_F7FE :                   F5BA C |
 byte_F804 :                   F5C0 C |  byte_F920 :                   F6DC C |
 byte_F924 :                   F6E0 C |  byte_F93A :                   F6F6 C |
 byte_F954 :                   F710 C |  byte_F96E :                   F72A C |
 byte_F988 :                   F744 C |  byte_F9A2 :                   F75E C |
 byte_F9BC :                   F778 C |  byte_FDD8 :                   FB92 C |
 byte_FDE3 :                   FB9D C | *cFM3 :                           2 - |
*cFM4 :                           4 - | *cFM5 :                           5 - |
*cFM6 :                           6 - | *cNoise :                        E0 - |
*cPSG1 :                         80 - | *cPSG2 :                         A0 - |
*cPSG3 :                         C0 - | *cr :                            E6 - |
*dHiTimpani :                    88 - | *dKick :                         81 - |
*dLowTimpani :                   8A - | *dMidTimpani :                   89 - |
*dSnare :                        82 - | *dTimpani :                      83 - |
*dVLowTimpani :                  8B - | *dec :                           90 - |
 dword_61B4 :                  6002 C |  dword_722CC :                86DE4 C |
 dword_722EC :                86E04 C | *endl :                          E0 - |
*fTone_01 :                       1 - | *fTone_02 :                       2 - |
*fTone_03 :                       3 - | *fTone_04 :                       4 - |
*fTone_05 :                       5 - | *fTone_06 :                       6 - |
*fTone_07 :                       7 - | *fTone_08 :                       8 - |
*fTone_09 :                       9 - | *forced :                         4 - |
*hex :                           80 - |  loc_10004 :                   FDBE C |
 loc_101A0 :                   FF5A C |  loc_101B0 :                   FF6A C |
 loc_10214 :                   FFCE C |  loc_102C8 :                  10082 C |
 loc_10332 :                  100EC C |  loc_10416 :                  101D0 C |
 loc_10444 :                  101FE C |  loc_1047A :                  10234 C |
 loc_1049E :                  10258 C |  loc_104A4 :                  1025E C |
 loc_104AE :                  10268 C |  loc_104BC :                  10276 C |
 loc_104C8 :                  10282 C |  loc_10500 :                  102BA C |
 loc_10512 :                  102CC C |  loc_10520 :                  102DA C |
 loc_1052C :                  102E6 C |  loc_1055E :                  10318 C |
 loc_10598 :                  10352 C |  loc_105A2 :                  1035C C |
 loc_105B4 :                  1036E C |  loc_105C0 :                  1037A C |
 loc_105F8 :                  103B2 C |  loc_1060 :                     E46 C |
 loc_10606 :                  103C0 C |  loc_10618 :                  103D2 C |
 loc_10624 :                  103DE C |  loc_1068E :                  10448 C |
 loc_106AE :                  10468 C |  loc_106CC :                  10486 C |
 loc_106EA :                  104A4 C |  loc_1076 :                     E5C C |
 loc_107E8 :                  105A2 C |  loc_10890 :                  10646 C |
 loc_10894 :                  1064A C |  loc_10A38 :                  107EE C |
 loc_10A5C :                  10812 C |  loc_10B0 :                     E96 C |
 loc_10C94 :                  10A48 C |  loc_10CC8 :                  10A7C C |
 loc_10CD0 :                  10A84 C |  loc_10CF0 :                  10AA4 C |
 loc_10D4 :                     EBA C |  loc_10E24 :                  10BD6 C |
 loc_10E30 :                  10BE2 C |  loc_10E62 :                  10C14 C |
 loc_10E6E :                  10C20 C |  loc_10EDA :                  10C8C C |
 loc_10F92 :                  10D42 C |  loc_10FC0 :                  10D70 C |
 loc_10FE0 :                  10D90 C |  loc_10FEC :                  10D9C C |
 loc_11114 :                  10EC4 C |  loc_1114A :                  10EFA C |
 loc_1159A :                  1134A C |  loc_115A8 :                  11358 C |
 loc_115D8 :                  11388 C |  loc_115E4 :                  11394 C |
 loc_116D2 :                  11480 C |  loc_116E0 :                  1148E C |
 loc_11702 :                  114B0 C |  loc_11730 :                  114DE C |
 loc_1174A :                  114F8 C |  loc_1175E :                  1150C C |
 loc_11766 :                  11514 C |  loc_11772 :                  11520 C |
 loc_117FC :                  115AA C |  loc_11822 :                  115D0 C |
 loc_11838 :                  115E6 C |  loc_1183E :                  115EC C |
 loc_1185C :                  1160A C |  loc_1189A :                  11648 C |
 loc_118BA :                  11668 C |  loc_1192C :                  116DA C |
 loc_119E :                     F84 C |  loc_11A3C :                  117EA C |
 loc_11AA8 :                  11856 C |  loc_11ADE :                  1188A C |
 loc_11B54 :                  118FE C |  loc_11B70 :                  1191A C |
 loc_11B7C :                  11926 C |  loc_11BCE :                  11976 C |
 loc_11D02 :                  11AAA C |  loc_11D10 :                  11AB8 C |
 loc_11D90 :                  11B34 C |  loc_11DCA :                  11B6E C |
 loc_11DDC :                  11B80 C |  loc_11E34 :                  11BD8 C |
 loc_11E40 :                  11BE4 C |  loc_120D6 :                  11E78 C |
 loc_1214E :                  11EF0 C |  loc_12162 :                  11F04 C |
 loc_1216A :                  11F0C C |  loc_12180 :                  11F22 C |
 loc_1219A :                  11F3C C |  loc_121A6 :                  11F48 C |
 loc_1236A :                  1210A C |  loc_12378 :                  12118 C |
 loc_123E2 :                  12182 C |  loc_12448 :                  121E8 C |
 loc_1244C :                  121EC C |  loc_12460 :                  12200 C |
 loc_124AA :                  12248 C |  loc_124B2 :                  12250 C |
 loc_124C2 :                  12260 C |  loc_124DE :                  1227C C |
 loc_124F2 :                  12290 C |  loc_124FC :                  1229A C |
 loc_12520 :                  122BE C |  loc_12534 :                  122D2 C |
 loc_12552 :                  122F0 C |  loc_1256A :                  12308 C |
 loc_12584 :                  12322 C |  loc_12598 :                  12336 C |
 loc_125AE :                  1234C C |  loc_125C2 :                  12360 C |
 loc_125D4 :                  12372 C |  loc_1283A :                  125D8 C |
 loc_12872 :                  12610 C |  loc_12874 :                  12612 C |
 loc_1287C :                  1261A C |  loc_128E :                    1074 C |
 loc_128E4 :                  12680 C |  loc_128F8 :                  12694 C |
 loc_12914 :                  126B0 C |  loc_12998 :                  12734 C |
 loc_12AE6 :                  12882 C |  loc_12B0A :                  128A6 C |
 loc_12B36 :                  128D2 C |  loc_12C58 :                  129FA C |
 loc_12C64 :                  12A06 C |  loc_12C7E :                  12A20 C |
 loc_12CA6 :                  12A48 C |  loc_12CB6 :                  12A58 C |
 loc_12E0E :                  12BB0 C |  loc_12E5C :                  12BFE C |
 loc_12E6 :                    10CC C |  loc_12EA6 :                  12C48 C |
 loc_12F5A :                  12CFC C |  loc_12F62 :                  12D04 C |
 loc_12F6A :                  12D0C C |  loc_12F70 :                  12D12 C |
 loc_12FBE :                  12D60 C |  loc_12FC2 :                  12D64 C |
 loc_12FDC :                  12D7E C |  loc_12FE2 :                  12D84 C |
 loc_12FEA :                  12D8C C |  loc_12FEE :                  12D90 C |
 loc_1300C :                  12DAE C |  loc_13024 :                  12DC6 C |
 loc_13060 :                  12E02 C |  loc_13066 :                  12E08 C |
 loc_13078 :                  12E1A C |  loc_13086 :                  12E28 C |
 loc_1309A :                  12E3C C |  loc_130A6 :                  12E48 C |
 loc_130B2 :                  12E54 C |  loc_130BA :                  12E5C C |
 loc_13104 :                  12EA6 C |  loc_1310C :                  12EAE C |
 loc_13118 :                  12EBA C |  loc_13120 :                  12EC2 C |
 loc_1314 :                    10FA C |  loc_1317C :                  12F1E C |
 loc_13188 :                  12F2A C |  loc_13198 :                  12F3A C |
 loc_1319E :                  12F40 C |  loc_131A6 :                  12F48 C |
 loc_131AA :                  12F4C C |  loc_131CC :                  12F6E C |
 loc_131F0 :                  12F92 C |  loc_131FA :                  12F9C C |
 loc_1320A :                  12FAC C |  loc_13218 :                  12FBA C |
 loc_13220 :                  12FC2 C |  loc_1323A :                  12FDC C |
 loc_13242 :                  12FE4 C |  loc_13278 :                  1301A C |
 loc_132A0 :                  13042 C |  loc_132A4 :                  13046 C |
 loc_132C0 :                  13062 C |  loc_132C6 :                  13068 C |
 loc_132CE :                  13070 C |  loc_13332 :                  130D4 C |
 loc_13336 :                  130D8 C |  loc_13392 :                  13134 C |
 loc_133A :                    1120 C |  loc_1341C :                  131BE C |
 loc_13490 :                  13232 C |  loc_134A :                    1130 C |
 loc_134AE :                  13250 C |  loc_134C4 :                  13266 C |
 loc_13504 :                  132A6 C |  loc_13534 :                  132D6 C |
 loc_1353A :                  132DC C |  loc_13540 :                  132E2 C |
 loc_1356A :                  1330C C |  loc_13582 :                  13324 C |
 loc_13596 :                  13338 C |  loc_13598 :                  1333A C |
 loc_1359E :                  13340 C |  loc_135F0 :                  13392 C |
 loc_13602 :                  133A4 C |  loc_1361E :                  133C0 C |
 loc_1364E :                  133F0 C |  loc_1365C :                  133FE C |
 loc_13670 :                  13412 C |  loc_13680 :                  13422 C |
 loc_1369A :                  1343C C |  loc_136B4 :                  13456 C |
 loc_136E2 :                  13484 C |  loc_136F4 :                  13496 C |
 loc_13706 :                  134A8 C |  loc_13726 :                  134C8 C |
 loc_1373E :                  134E0 C |  loc_13758 :                  134FA C |
 loc_13772 :                  13514 C |  loc_137AE :                  13550 C |
 loc_137E4 :                  13586 C |  loc_1380C :                  135AE C |
 loc_138C2 :                  13664 C |  loc_138D4 :                  13676 C |
*loc_13926 :                  136C0 C | *loc_13966 :                  13726 C |
 loc_13976 :                  13736 C |  loc_13988 :                  13748 C |
 loc_13996 :                  13756 C |  loc_139B2 :                  13772 C |
 loc_13A70 :                  13830 C |  loc_13A78 :                  13838 C |
 loc_13A9C :                  1385C C |  loc_13AB4 :                  13874 C |
 loc_13AC2 :                  13882 C |  loc_13ADE :                  1389E C |
 loc_13AF0 :                  138B0 C |  loc_13AFA :                  138BA C |
 loc_13B1E :                  138DE C |  loc_13B26 :                  138E6 C |
 loc_13BE :                    11A4 C |  loc_13CA :                    11B0 C |
 loc_13D00 :                  13AC0 C |  loc_13D44 :                  13B04 C |
 loc_13F02 :                  13CC2 C |  loc_13F86 :                  13D46 C |
 loc_13F94 :                  13D54 C |  loc_13FAC :                  13D6C C |
 loc_13FF2 :                  13DB0 C |  loc_1403E :                  13DFC C |
 loc_1404 :                    11EA C |  loc_1406A :                  13E28 C |
 loc_14082 :                  13E40 C |  loc_140A6 :                  13E64 C |
 loc_140AC :                  13E6A C |  loc_142C :                    1212 C |
 loc_1432 :                    1218 C |  loc_145C :                    1242 C |
 loc_14602 :                  143D2 C |  loc_1461E :                  143EE C |
 loc_14624 :                  143F4 C |  loc_1462C :                  143FC C |
 loc_14630 :                  14400 C |  loc_146A :                    1250 C |
 loc_146C0 :                  14490 C |  loc_146C6 :                  14496 C |
 loc_146CC :                  1449C C |  loc_1475E :                  1452E C |
 loc_1476A :                  1453A C |  loc_147F2 :                  145C2 C |
 loc_147F8 :                  145C8 C |  loc_147FE :                  145CE C |
 loc_14894 :                  14664 C |  loc_1489A :                  1466A C |
 loc_148A0 :                  14670 C |  loc_14936 :                  14706 C |
 loc_1493C :                  1470C C |  loc_14942 :                  14712 C |
*loc_14996 :                  14760 C | *loc_1499A :                  14764 C |
 loc_149B2 :                  1477C C |  loc_149DE :                  147C2 C |
 loc_149EC :                  147D0 C |  loc_14A12 :                  147F6 C |
 loc_14A22 :                  14806 C |  loc_14A3E :                  14822 C |
 loc_14A5A :                  1483E C |  loc_14A66 :                  1484A C |
 loc_14A86 :                  1486E C |  loc_14A94 :                  1487C C |
 loc_14ABA :                  148A2 C |  loc_14ACA :                  148B2 C |
 loc_14AE6 :                  148CE C |  loc_14AFC :                  148E4 C |
 loc_14B1E :                  1490A C |  loc_14B2 :                    1298 C |
 loc_14B2C :                  14918 C |  loc_14B5A :                  14946 C |
 loc_14B62 :                  1494E C |  loc_14B7E :                  1496A C |
 loc_14B9A :                  14986 C |  loc_14BA6 :                  14992 C |
 loc_14BC6 :                  149B6 C |  loc_14BD4 :                  149C4 C |
 loc_14C0 :                    12A6 C |  loc_14C02 :                  149F2 C |
 loc_14C0A :                  149FA C |  loc_14C2 :                    12A8 C |
 loc_14C26 :                  14A16 C |  loc_14C3C :                  14A2C C |
 loc_14C5E :                  14A4E C |  loc_14C64 :                  14A54 C |
 loc_14C6A :                  14A5A C |  loc_14CA6 :                  14A96 C |
 loc_14CB2 :                  14AA2 C |  loc_14CB8 :                  14AA8 C |
 loc_14CBE :                  14AAE C |  loc_14CC4 :                  14AB4 C |
 loc_14CCA :                  14ABA C |  loc_14CD0 :                  14AC0 C |
 loc_14CD4 :                  14AC4 C |  loc_14CD6 :                  14AC6 C |
 loc_14D0 :                    12B6 C |  loc_14D14 :                  14B04 C |
 loc_14D1A :                  14B0A C |  loc_14D20 :                  14B10 C |
 loc_14D24 :                  14B14 C |  loc_14D3C :                  14B2C C |
 loc_14D6 :                    12BC C |  loc_14DD0 :                  14BC0 C |
 loc_14DDE :                  14BCE C |  loc_14DF0 :                  14BE0 C |
 loc_14E0A :                  14BFA C |  loc_14E4 :                    12CA C |
 loc_14EBC :                  14CAC C |  loc_14F7C :                  14D6C C |
 loc_14FD6 :                  14DC6 C |  loc_1502 :                    12E8 C |
 loc_1504A :                  14E3A C |  loc_150FE :                  14EEC C |
 loc_1518 :                    12FE C |  loc_151C8 :                  14FB6 C |
 loc_151F0 :                  14FDE C |  loc_151F8 :                  14FE6 C |
 loc_15224 :                  15012 C |  loc_1530 :                    1316 C |
 loc_1538 :                    131E C |  loc_153A :                    1320 C |
 loc_15546 :                  15334 C |  loc_155A8 :                  15396 C |
 loc_155B8 :                  153A6 C |  loc_155D0 :                  153BE C |
 loc_155E2 :                  153D0 C |  loc_155FA :                  153E8 C |
 loc_15608 :                  153F6 C |  loc_15616 :                  15404 C |
 loc_1568 :                    134E C |  loc_156BA :                  154A8 C |
 loc_1574 :                    135A C |  loc_1598 :                    137E C |
 loc_15A0 :                    1386 C |  loc_15A4 :                    138A C |
 loc_15A46 :                  15834 C |  loc_15A96 :                  15884 C |
 loc_15AC :                    1392 C |  loc_15B02 :                  158F0 C |
 loc_15B74 :                  15962 C |  loc_15D0 :                    13B6 C |
 loc_15D64 :                  15B52 C |  loc_15D8 :                    13BE C |
 loc_15DB4 :                  15BA2 C |  loc_15DC2 :                  15BB0 C |
 loc_15DD4 :                  15BC2 C |  loc_15DE0 :                  15BCE C |
 loc_15E14 :                  15C02 C |  loc_15E1E :                  15C0C C |
 loc_15E30 :                  15C1E C |  loc_15E3C :                  15C2A C |
 loc_15E6A :                  15C58 C |  loc_15E7C :                  15C6A C |
 loc_15E8E :                  15C7C C |  loc_15EA0 :                  15C8E C |
 loc_15EBE :                  15CAC C |  loc_15ED0 :                  15CBE C |
 loc_15EE0 :                  15CCE C |  loc_15EF0 :                  15CDE C |
 loc_15F02 :                  15CF0 C |  loc_15F3E :                  15D2C C |
 loc_15F5E :                  15D4C C |  loc_16068 :                  15E56 C |
 loc_160A4 :                  15E92 C |  loc_160AA :                  15E98 C |
 loc_160D6 :                  15EC4 C |  loc_160E :                    13F4 C |
 loc_1629A :                  16088 C |  loc_16352 :                  16140 C |
 loc_16356 :                  16144 C |  loc_1636C :                  1615A C |
 loc_16378 :                  16166 C |  loc_16380 :                  1616E C |
 loc_1639A :                  16188 C |  loc_163D0 :                  161BC C |
 loc_163D8 :                  161C4 C |  loc_16404 :                  161F0 C |
 loc_16420 :                  1620C C |  loc_16424 :                  16210 C |
 loc_16456 :                  16242 C |  loc_16474 :                  16260 C |
 loc_16480 :                  1626C C |  loc_16484 :                  16270 C |
 loc_166C8 :                  164B4 C |  loc_166E0 :                  164CC C |
 loc_1670E :                  164FA C |  loc_1675E :                  1654A C |
 loc_1676 :                    145C C |  loc_16798 :                  16584 C |
 loc_167C2 :                  165AE C |  loc_167DA :                  165C6 C |
 loc_16800 :                  165EC C |  loc_16830 :                  1661C C |
 loc_16844 :                  16630 C |  loc_16866 :                  16652 C |
 loc_16874 :                  16660 C |  loc_1687A :                  16666 C |
 loc_16898 :                  16684 C |  loc_168A6 :                  16692 C |
 loc_16996 :                  16782 C |  loc_169CA :                  167B6 C |
 loc_16AA :                    1490 C |  loc_16ABC :                  168A6 C |
 loc_16AFC :                  168E6 C |  loc_16B02 :                  168EC C |
 loc_16B1E :                  16908 C |  loc_16B5E :                  16948 C |
 loc_16B70 :                  1695A C |  loc_16C0C :                  169F6 C |
 loc_16C50 :                  16A3A C |  loc_16C64 :                  16A4E C |
 loc_16C7C :                  16A64 C |  loc_16C82 :                  16A6A C |
 loc_16C90 :                  16A78 C |  loc_16C96 :                  16A7E C |
 loc_16CAA :                  16A92 C |  loc_16CC0 :                  16AA8 C |
 loc_16CE0 :                  16AC8 C |  loc_16DC :                    14C2 C |
 loc_16E2 :                    14C8 C |  loc_16F76 :                  16D5C C |
 loc_16FA0 :                  16D86 C |  loc_170E4 :                  16ECA C |
 loc_173E :                    1524 C |  loc_1758 :                    153E C |
 loc_1768 :                    154E C |  loc_1772 :                    1558 C |
 loc_17772 :                  17556 C |  loc_177A :                    1560 C |
 loc_177E :                    1564 C |  loc_177E6 :                  175CA C |
 loc_1783C :                  17620 C |  loc_1784C :                  17630 C |
 loc_1786 :                    156C C |  loc_178A :                    1570 C |
 loc_17910 :                  176F0 C |  loc_17916 :                  176F6 C |
 loc_1794 :                    157A C |  loc_17950 :                  17730 C |
 loc_17954 :                  17734 C |  loc_17960 :                  17740 C |
 loc_17976 :                  17756 C |  loc_1797A :                  1775A C |
 loc_1798 :                    157E C |  loc_17984 :                  17764 C |
 loc_179AC :                  1778C C |  loc_179BC :                  1779C C |
 loc_179C2 :                  177A2 C |  loc_179DA :                  177BA C |
 loc_179E0 :                  177C0 C |  loc_179EE :                  177CE C |
 loc_179F6 :                  177D6 C |  loc_17A10 :                  177F0 C |
 loc_17A16 :                  177F6 C |  loc_17A2 :                    1588 C |
 loc_17A3E :                  1781E C |  loc_17A46 :                  17826 C |
 loc_17A50 :                  17830 C |  loc_17A5A :                  1783A C |
 loc_17A8 :                    158E C |  loc_17A96 :                  17876 C |
 loc_17B4 :                    159A C |  loc_17B60 :                  1793E C |
 loc_17BC6 :                  179A4 C |  loc_17BE0 :                  179BE C |
 loc_17BFA :                  179D8 C |  loc_17C3C :                  17A1A C |
 loc_17C4 :                    15AA C |  loc_17C68 :                  17A44 C |
 loc_17CE :                    15B4 C |  loc_17D6 :                    15BC C |
 loc_17DC :                    15C2 C |  loc_17EE :                    15D4 C |
 loc_17F1E :                  17CF6 C |  loc_17F38 :                  17D10 C |
 loc_17F48 :                  17D20 C |  loc_17F70 :                  17D48 C |
 loc_17F7E :                  17D56 C |  loc_17F8E :                  17D66 C |
 loc_17F92 :                  17D6A C |  loc_17FA0 :                  17D78 C |
 loc_17FB6 :                  17D8E C |  loc_17FC :                    15E2 C |
 loc_17FCA :                  17DA2 C |  loc_17FDC :                  17DB4 C |
 loc_17FE0 :                  17DB8 C |  loc_17FF6 :                  17DCE C |
 loc_1800A :                  17DE2 C |  loc_1801A :                  17DF2 C |
 loc_1801E :                  17DF6 C |  loc_18046 :                  17E1E C |
 loc_1804E :                  17E26 C |  loc_1806C :                  17E44 C |
 loc_180A :                    15F0 C |  loc_180A2 :                  17E7A C |
 loc_180AE :                  17E86 C |  loc_180BC :                  17E94 C |
 loc_180D2 :                  17EAA C |  loc_180E6 :                  17EBE C |
 loc_180F2 :                  17ECA C |  loc_180F6 :                  17ECE C |
 loc_18112 :                  17EEA C |  loc_18126 :                  17EFE C |
 loc_1812A :                  17F02 C |  loc_18136 :                  17F0E C |
 loc_1814E :                  17F26 C |  loc_18152 :                  17F2A C |
 loc_18160 :                  17F38 C |  loc_18166 :                  17F3E C |
 loc_1818 :                    15FE C |  loc_1818C :                  17F64 C |
 loc_18196 :                  17F6E C |  loc_181A0 :                  17F78 C |
 loc_181B6 :                  17F8E C |  loc_181F0 :                  17FC8 C |
 loc_1826 :                    160C C |  loc_18302 :                  180D8 C |
 loc_18334 :                  1810A C |  loc_1833E :                  18114 C |
 loc_18374 :                  1814A C |  loc_18382 :                  18158 C |
 loc_18392 :                  18168 C |  loc_183AA :                  18180 C |
 loc_183CA :                  181A0 C |  loc_183DE :                  181B4 C |
 loc_183E6 :                  181BC C |  loc_183FE :                  181D4 C |
 loc_1844 :                    162A C |  loc_1844A :                  1821E C |
 loc_1845C :                  18230 C |  loc_18474 :                  18248 C |
 loc_18482 :                  18256 C |  loc_18498 :                  1826C C |
 loc_184EA :                  182BE C |  loc_184F6 :                  182CA C |
 loc_18500 :                  182D4 C |  loc_1852C :                  18300 C |
 loc_18544 :                  18318 C |  loc_1854E :                  18322 C |
 loc_1856 :                    163C C |  loc_18566 :                  1833A C |
 loc_1856C :                  18340 C |  loc_1857A :                  1834E C |
 loc_18582 :                  18356 C |  loc_1859C :                  18370 C |
 loc_185A2 :                  18376 C |  loc_185D2 :                  183A6 C |
 loc_185DA :                  183AE C |  loc_185E4 :                  183B8 C |
 loc_185EE :                  183C2 C |  loc_18602 :                  183D6 C |
 loc_1862A :                  183FE C |  loc_18636 :                  1840A C |
 loc_1864A :                  1841E C |  loc_1868 :                    164E C |
 loc_18688 :                  1845C C | *loc_186A :                    1650 C |
 loc_1870A :                  184DE C |  loc_187CA :                  1859E C |
 loc_1881E :                  185F2 C |  loc_18826 :                  185FA C |
 loc_1882C :                  18600 C |  loc_1884A :                  1861E C |
 loc_18856 :                  1862A C |  loc_18886 :                  1865A C |
 loc_1895C :                  1872E C |  loc_18968 :                  1873A C |
 loc_18974 :                  18746 C |  loc_189B8 :                  1878A C |
 loc_189CA :                  1879C C |  loc_189EE :                  187C0 C |
 loc_189FE :                  187D0 C |  loc_18A28 :                  187FA C |
 loc_18A36 :                  18808 C |  loc_18A46 :                  18818 C |
 loc_18A5E :                  18830 C |  loc_18A7C :                  1884E C |
 loc_18A8 :                    168E C |  loc_18A82 :                  18854 C |
 loc_18A88 :                  1885A C |  loc_18A9E :                  18870 C |
 loc_18AB4 :                  18886 C |  loc_18AC0 :                  18892 C |
 loc_18AFA :                  188CC C |  loc_18B36 :                  18908 C |
 loc_18B40 :                  18912 C |  loc_18B48 :                  1891A C |
 loc_18B52 :                  18924 C |  loc_18B7C :                  1894E C |
 loc_18B80 :                  18952 C |  loc_18B90 :                  18962 C |
 loc_18B96 :                  18968 C |  loc_18BA :                    16A0 C |
 loc_18BAE :                  18980 C |  loc_18BB4 :                  18986 C |
 loc_18BC2 :                  18994 C |  loc_18BC6 :                  18998 C |
 loc_18BE0 :                  189B2 C |  loc_18BE8 :                  189BA C |
 loc_18C06 :                  189D8 C |  loc_18C10 :                  189E2 C |
 loc_18C1A :                  189EC C |  loc_18C2 :                    16A8 C |
 loc_18C32 :                  18A04 C |  loc_18C56 :                  18A28 C |
 loc_18C6C :                  18A3E C |  loc_18C78 :                  18A4A C |
 loc_18CB8 :                  18A8A C |  loc_18D6 :                    16BC C |
 loc_18D68 :                  18B3A C |  loc_18D8E :                  18B60 C |
 loc_18DAE :                  18B80 C |  loc_18DC6 :                  18B98 C |
 loc_18DDA :                  18BAC C |  loc_18E00 :                  18BD2 C |
 loc_18E16 :                  18BE8 C |  loc_18E2A :                  18BFC C |
 loc_18E48 :                  18C1A C |  loc_18E7A :                  18C4C C |
 loc_18E88 :                  18C5A C |  loc_18E96 :                  18C68 C |
 loc_18EA :                    16D0 C |  loc_18EAA :                  18C7C C |
 loc_18EB4 :                  18C86 C |  loc_18EC0 :                  18C92 C |
 loc_18F38 :                  18D0A C |  loc_18F58 :                  18D2A C |
 loc_18F5C :                  18D2E C |  loc_18F7E :                  18D50 C |
 loc_18F9C :                  18D6E C |  loc_18FA2 :                  18D74 C |
 loc_18FC :                    16E2 C |  loc_18FDC :                  18DAE C |
 loc_19008 :                  18DDA C |  loc_1906 :                    16EC C |
 loc_1909A :                  18E6C C |  loc_191C :                    1702 C |
 loc_191CC :                  18F9E C |  loc_191DE :                  18FB0 C |
 loc_191F2 :                  18FC4 C |  loc_19202 :                  18FD4 C |
 loc_1923A :                  1900C C |  loc_19248 :                  1901A C |
 loc_19258 :                  1902A C |  loc_19270 :                  19042 C |
 loc_1928 :                    170E C |  loc_1928E :                  19060 C |
 loc_19294 :                  19066 C |  loc_1929E :                  19070 C |
 loc_192AE :                  19080 C |  loc_192E8 :                  190BA C |
 loc_192EC :                  190BE C |  loc_19302 :                  190D4 C |
 loc_1933C :                  1910E C |  loc_19344 :                  19116 C |
 loc_19348 :                  1911A C |  loc_19362 :                  19134 C |
 loc_19366 :                  19138 C |  loc_1937C :                  1914E C |
 loc_1938 :                    171E C |  loc_1938E :                  19160 C |
 loc_1939C :                  1916E C |  loc_193B4 :                  19186 C |
 loc_193BE :                  19190 C |  loc_193CC :                  1919E C |
 loc_193D0 :                  191A2 C |  loc_193E8 :                  191BA C |
 loc_193EE :                  191C0 C |  loc_19406 :                  191D8 C |
 loc_19410 :                  191E2 C |  loc_1941C :                  191EE C |
 loc_19424 :                  191F6 C |  loc_19438 :                  1920A C |
 loc_19446 :                  19218 C |  loc_1946A :                  1923C C |
 loc_19474 :                  19246 C |  loc_1947E :                  19250 C |
 loc_194A8 :                  1927A C |  loc_194AC :                  1927E C |
 loc_194BC :                  1928E C |  loc_194C2 :                  19294 C |
 loc_194DA :                  192AC C |  loc_194E0 :                  192B2 C |
 loc_194EE :                  192C0 C |  loc_194F2 :                  192C4 C |
 loc_1950C :                  192DE C |  loc_19512 :                  192E4 C |
 loc_19552 :                  19324 C |  loc_19556 :                  19328 C |
 loc_1955A :                  1932C C |  loc_19570 :                  19342 C |
 loc_19572 :                  19344 C |  loc_19574 :                  19346 C |
 loc_1957E :                  19350 C |  loc_195AA :                  1937C C |
 loc_195B6 :                  19388 C |  loc_195BE :                  19390 C |
 loc_195DA :                  193AC C |  loc_1961C :                  193EE C |
 loc_1964C :                  1941E C |  loc_19652 :                  19424 C |
 loc_19658 :                  1942A C |  loc_19688 :                  1945A C |
 loc_196A :                    1750 C |  loc_19712 :                  194E4 C |
 loc_19718 :                  194EA C |  loc_19762 :                  19534 C |
 loc_197AA :                  1957C C |  loc_197D4 :                  195A6 C |
 loc_1982C :                  195FE C |  loc_19934 :                  19706 C |
 loc_19954 :                  19726 C |  loc_1996A :                  1973C C |
 loc_19976 :                  19748 C |  loc_199D0 :                  197A2 C |
 loc_199E6 :                  197B8 C |  loc_19C0 :                    17A6 C |
 loc_19C36 :                  19A08 C |  loc_19C62 :                  19A34 C |
 loc_19C72 :                  19A44 C |  loc_19C80 :                  19A52 C |
 loc_19CC4 :                  19A96 C |  loc_19D8 :                    17BE C |
 loc_19E20 :                  19BF2 C |  loc_19E3E :                  19C10 C |
 loc_19E5A :                  19C2C C |  loc_19E90 :                  19C62 C |
 loc_19EA2 :                  19C74 C |  loc_19EA8 :                  19C7A C |
 loc_19EC6 :                  19C98 C |  loc_19F0 :                    17D6 C |
 loc_19F10 :                  19CE2 C |  loc_19F2E :                  19D00 C |
 loc_19F48 :                  19D1A C |  loc_19F50 :                  19D22 C |
 loc_19F6A :                  19D3C C |  loc_19F88 :                  19D5A C |
 loc_19F96 :                  19D68 C |  loc_19F9C :                  19D6E C |
 loc_19FA6 :                  19D78 C |  loc_19FBC :                  19D8E C |
 loc_19FE6 :                  19DB8 C |  loc_1A000 :                  19DD2 C |
 loc_1A00A :                  19DDC C |  loc_1A020 :                  19DF2 C |
 loc_1A02A :                  19DFC C |  loc_1A070 :                  19E42 C |
 loc_1A074 :                  19E46 C |  loc_1A09A :                  19E6C C |
 loc_1A0A :                    17F0 C |  loc_1A0B4 :                  19E86 C |
 loc_1A0F2 :                  19EC4 C |  loc_1A110 :                  19EE2 C |
 loc_1A112 :                  19EE4 C |  loc_1A124 :                  19EF6 C |
 loc_1A142 :                  19F14 C |  loc_1A15C :                  19F2E C |
 loc_1A166 :                  19F38 C |  loc_1A172 :                  19F44 C |
 loc_1A192 :                  19F64 C |  loc_1A1D0 :                  19FA2 C |
 loc_1A1D4 :                  19FA6 C |  loc_1A1FC :                  19FCE C |
 loc_1A210 :                  19FE2 C |  loc_1A216 :                  19FE8 C |
 loc_1A23A :                  1A00C C |  loc_1A248 :                  1A01A C |
 loc_1A260 :                  1A032 C |  loc_1A264 :                  1A036 C |
 loc_1A280 :                  1A052 C |  loc_1A28C :                  1A05E C |
 loc_1A296 :                  1A068 C |  loc_1A2A6 :                  1A078 C |
 loc_1A2C6 :                  1A098 C |  loc_1A2E4 :                  1A0B6 C |
 loc_1A312 :                  1A0E4 C |  loc_1A346 :                  1A118 C |
 loc_1A35E :                  1A130 C |  loc_1A376 :                  1A148 C |
 loc_1A38A :                  1A15C C |  loc_1A38E :                  1A160 C |
 loc_1A3A6 :                  1A178 C |  loc_1A3AC :                  1A17E C |
 loc_1A3D0 :                  1A1A2 C |  loc_1A4CE :                  1A2A0 C |
 loc_1A4DC :                  1A2AE C |  loc_1A4EA :                  1A2BC C |
 loc_1A514 :                  1A2E6 C |  loc_1A524 :                  1A2F6 C |
 loc_1A550 :                  1A322 C |  loc_1A55C :                  1A32E C |
 loc_1A578 :                  1A34A C |  loc_1A57E :                  1A350 C |
 loc_1A598 :                  1A36A C |  loc_1A5B4 :                  1A386 C |
 loc_1A5D4 :                  1A3A6 C |  loc_1A5E4 :                  1A3B6 C |
 loc_1A60 :                    1846 C |  loc_1A604 :                  1A3D6 C |
 loc_1A626 :                  1A3F8 C |  loc_1A646 :                  1A418 C |
 loc_1A656 :                  1A428 C |  loc_1A850 :                  1A622 C |
 loc_1A86C :                  1A63E C |  loc_1A89A :                  1A66C C |
 loc_1A954 :                  1A726 C |  loc_1A95E :                  1A730 C |
 loc_1A962 :                  1A734 C |  loc_1A97E :                  1A750 C |
 loc_1A982 :                  1A754 C |  loc_1A9A6 :                  1A778 C |
 loc_1A9C0 :                  1A792 C |  loc_1A9E6 :                  1A7B8 C |
 loc_1AA1E :                  1A7F0 C |  loc_1AA34 :                  1A806 C |
 loc_1ACA0 :                  1AA70 C |  loc_1AD2E :                  1AAFA C |
 loc_1AD38 :                  1AB04 C |  loc_1ADA :                    18C0 C |
 loc_1AE0 :                    18C6 C |  loc_1AE98 :                  1AC64 C |
 loc_1AEA :                    18D0 C |  loc_1AEB6 :                  1AC82 C |
 loc_1AF1E :                  1ACEA C |  loc_1AF40 :                  1AD0C C |
 loc_1AF6 :                    18DC C |  loc_1AF82 :                  1AD4E C |
 loc_1AF9C :                  1AD68 C |  loc_1AFC2 :                  1AD8C C |
 loc_1AFCA :                  1AD94 C |  loc_1AFDA :                  1ADA4 C |
 loc_1AFE6 :                  1ADB0 C |  loc_1B06 :                    18EC C |
 loc_1B130 :                  1AEF8 C |  loc_1B13C :                  1AF04 C |
 loc_1B140 :                  1AF08 C |  loc_1B144 :                  1AF0C C |
 loc_1B19E :                  1AF66 C |  loc_1B1C0 :                  1AF88 C |
 loc_1B20C :                  1AFD4 C |  loc_1B210 :                  1AFD8 C |
 loc_1B268 :                  1B030 C |  loc_1B288 :                  1B050 C |
 loc_1B2A4 :                  1B06C C |  loc_1B2C8 :                  1B090 C |
 loc_1B2E :                    1914 C |  loc_1B2E4 :                  1B0AC C |
 loc_1B326 :                  1B0EE C |  loc_1B350 :                  1B118 C |
 loc_1B38 :                    191E C |  loc_1B4C4 :                  1B28C C |
 loc_1B4DA :                  1B2A2 C |  loc_1B4E8 :                  1B2B0 C |
*loc_1B4EA :                  1B2B2 C |  loc_1B52 :                    1938 C |
 loc_1B564 :                  1B32C C |  loc_1B5CA :                  1B392 C |
 loc_1B6F6 :                  1B4BE C |  loc_1B6F8 :                  1B4C0 C |
 loc_1B714 :                  1B4DC C |  loc_1B730 :                  1B4F8 C |
 loc_1BA78 :                  1B840 C |  loc_1BA94 :                  1B85C C |
 loc_1BA9A :                  1B862 C |  loc_1BAA4 :                  1B86C C |
 loc_1BAA8 :                  1B870 C |  loc_1BAF2 :                  1B8BA C |
 loc_1BB06 :                  1B8CE C |  loc_1BB14 :                  1B8DC C |
 loc_1BB1A :                  1B8E2 C |  loc_1BB22 :                  1B8EA C |
 loc_1BB42 :                  1B90A C |  loc_1BB48 :                  1B910 C |
 loc_1BB50 :                  1B918 C |  loc_1BBCE :                  1B996 C |
 loc_1BBF4 :                  1B9BC C |  loc_1BC12 :                  1B9DA C |
 loc_1BC40 :                  1BA08 C |  loc_1BCB0 :                  1BA78 C |
 loc_1BCC6 :                  1BA8E C |  loc_1BCD4 :                  1BA9C C |
 loc_1BD46 :                  1BB0E C |  loc_1BEA0 :                  1BC68 C |
 loc_1C078 :                  1C0DA C |  loc_1C08A :                  1C0EC C |
 loc_1C0AE :                  1C110 C |  loc_1C0C0 :                  1C122 C |
 loc_1C0E8 :                  1C14A C |  loc_1C134 :                  1C196 C |
 loc_1C150 :                  1C1B2 C |  loc_1C188 :                  1C1EA C |
 loc_1C1AE :                  1C210 C |  loc_1C1F8 :                  1C25A C |
 loc_1C234 :                  1C296 C |  loc_1C23A :                  1C29C C |
 loc_1C250 :                  1C2B2 C |  loc_1C25C :                  1C2BE C |
 loc_1C298 :                  1C2FA C |  loc_1C2CE :                  1C330 C |
 loc_1C2F4 :                  1C356 C |  loc_1C33C :                  1C39E C |
 loc_1C37A :                  1C3DC C |  loc_1C3EE :                  1C450 C |
 loc_1C3FA :                  1C45C C |  loc_1C410 :                  1C472 C |
 loc_1C41E :                  1C480 C |  loc_1C434 :                  1C496 C |
 loc_1C442 :                  1C4A4 C |  loc_1C458 :                  1C4BA C |
 loc_1C466 :                  1C4C8 C |  loc_1C47C :                  1C4DE C |
 loc_1C48A :                  1C4EC C |  loc_1C4A0 :                  1C502 C |
 loc_1C4AE :                  1C510 C |  loc_1C4C4 :                  1C526 C |
 loc_1C4D2 :                  1C534 C |  loc_1C4E8 :                  1C548 C |
 loc_1C4FA :                  1C558 C |  loc_1C518 :                  1C574 C |
 loc_1C6AC :                  1C708 C |  loc_1C6E4 :                  1C740 C |
 loc_1C734 :                  1C790 C |  loc_1C83E :                  1C89A C |
 loc_1C842 :                  1C89E C |  loc_1C852 :                  1C8AE C |
 loc_1C858 :                  1C8B4 C |  loc_1C85E :                  1C8BA C |
 loc_1C8B2 :                  1C90E C |  loc_1C8EC :                  1C948 C |
 loc_1C8F4 :                  1C950 C |  loc_1C8FE :                  1C95A C |
 loc_1C92C :                  1C988 C |  loc_1C95A :                  1C9B6 C |
 loc_1C962 :                  1C9BE C |  loc_1C9BA :                  1CA16 C |
 loc_1C9C4 :                  1CA20 C |  loc_1C9CC :                  1CA28 C |
 loc_1C9D6 :                  1CA32 C |  loc_1CA1E :                  1CA7A C |
 loc_1CA26 :                  1CA82 C |  loc_1CA30 :                  1CA8C C |
 loc_1CA5A :                  1CAB6 C |  loc_1CA90 :                  1CAEC C |
 loc_1CA98 :                  1CAF4 C |  loc_1CAA2 :                  1CAFE C |
 loc_1CAA6 :                  1CB02 C |  loc_1CABC :                  1CB18 C |
 loc_1CF9E :                  1CFFA C |  loc_1CFBE :                  1D01A C |
 loc_1D000 :                  1D05C C |  loc_1D018 :                  1D074 C |
 loc_1D01C :                  1D078 C |  loc_1D03C :                  1D098 C |
 loc_1D052 :                  1D0AE C |  loc_1D05E :                  1D0BA C |
 loc_1D066 :                  1D0C2 C |  loc_1DCE :                    1BB4 C |
 loc_1DFA :                    1BE0 C |  loc_1E1E :                    1C04 C |
 loc_1E4E :                    1C34 C |  loc_1E5C :                    1C42 C |
 loc_1E82 :                    1C68 C |  loc_1E98 :                    1C7E C |
 loc_1ECC :                    1CB2 C |  loc_1EF4 :                    1CDA C |
 loc_1F20 :                    1D06 C |  loc_1F44 :                    1D2A C |
 loc_1F64 :                    1D4A C |  loc_1F74 :                    1D5A C |
 loc_1F78 :                    1D5E C |  loc_1F86 :                    1D6C C |
 loc_1FAC :                    1D92 C |  loc_1FC2 :                    1DA8 C |
 loc_1FE2 :                    1DC8 C |  loc_1FF4 :                    1DDA C |
 loc_2006 :                    1DEC C |  loc_2020 :                    1E06 C |
 loc_202A :                    1E10 C |  loc_2034 :                    1E1A C |
 loc_203E :                    1E24 C |  loc_2054 :                    1E3A C |
 loc_2062 :                    1E48 C |  loc_206A :                    1E50 C |
 loc_2088 :                    1E6E C |  loc_20A8 :                    1E8E C |
 loc_20B2 :                    1E98 C |  loc_20BC :                    1EA2 C |
 loc_2110 :                    1EF6 C |  loc_2128 :                    1F0E C |
 loc_2144 :                    1F2A C |  loc_2160 :                    1F46 C |
 loc_29AC :                    2792 C |  loc_29C0 :                    27A6 C |
 loc_2C80 :                    2A66 C |  loc_2C9A :                    2A80 C |
 loc_2CC2 :                    2AA8 C |  loc_2CCA :                    2AB0 C |
 loc_2CDC :                    2AC2 C |  loc_2CE6 :                    2ACC C |
 loc_2CF2 :                    2AD8 C |  loc_2CFE :                    2AE4 C |
 loc_2D04 :                    2AEA C |  loc_317C :                    2F62 C |
 loc_3210 :                    2FF6 C |  loc_3230 :                    3016 C |
 loc_32C :                      32C C |  loc_33B6 :                    319C C |
 loc_33E4 :                    31CA C |  loc_3422 :                    3208 C |
 loc_348 :                      348 C |  loc_34FE :                    32E4 C |
 loc_3550 :                    3336 C |  loc_3580 :                    3366 C |
 loc_3588 :                    336E C |  loc_3598 :                    337E C |
 loc_37B6 :                    359C C |  loc_37FC :                    35E2 C |
 loc_3946 :                    372C C |  loc_39E8 :                    37CE C |
 loc_3B10 :                    38F6 C |  loc_3B14 :                    38FA C |
 loc_3B88 :                    396E C |  loc_3B98 :                    397E C |
 loc_3BC8 :                    39AE C |  loc_3C1A :                    3A00 C |
 loc_3C24 :                    3A0A C |  loc_3C56 :                    3A3C C |
 loc_3CB4 :                    3A9A C |  loc_3CBA :                    3AA0 C |
 loc_3CD0 :                    3AB6 C |  loc_3CF0 :                    3AD6 C |
 loc_3D12 :                    3AF8 C |  loc_3D54 :                    3B3C C |
 loc_3D5E :                    3B46 C |  loc_3D8E :                    3B76 C |
 loc_3DA2 :                    3B8A C |  loc_3DA8 :                    3B90 C |
 loc_3DC6 :                    3BAE C |  loc_3DCC :                    3BB4 C |
 loc_3DD2 :                    3BBA C |  loc_3E04 :                    3BEC C |
 loc_3E0E :                    3BF6 C |  loc_3E2C :                    3C14 C |
 loc_3E56 :                    3C3E C |  loc_3E90 :                    3C78 C |
 loc_3EBA :                    3CA2 C |  loc_3EF4 :                    3CDC C |
 loc_3F06 :                    3CEE C |  loc_3F6A :                    3D58 C |
 loc_3F84 :                    3D72 C |  loc_3F9A :                    3D88 C |
 loc_3FFA :                    3E04 C |  loc_4022 :                    3E2C C |
 loc_4038 :                    3E42 C |  loc_4056 :                    3E60 C |
 loc_4184 :                    3FB0 C |  loc_41A4 :                    3FCC C |
 loc_41BA :                    3FDE C |  loc_421C :                    4040 C |
 loc_4232 :                    4056 C |  loc_4250 :                    4074 C |
 loc_463C :                    4460 C |  loc_47D4 :                    45F8 C |
 loc_48BE :                    46E2 C |  loc_48CC :                    46F0 C |
 loc_48CE :                    46F2 C |  loc_48E2 :                    4706 C |
 loc_48F2 :                    4716 C |  loc_491C :                    4740 C |
 loc_4992 :                    47B6 C |  loc_49E8 :                    480C C |
 loc_49F4 :                    4818 C |  loc_4A18 :                    483C C |
 loc_4A2E :                    4852 C |  loc_4BF6 :                    4A1A C |
 loc_4C10 :                    4A34 C |  loc_4C26 :                    4A4A C |
 loc_4C4E :                    4A72 C |  loc_4C64 :                    4A88 C |
 loc_4C74 :                    4A98 C |  loc_4C7E :                    4AA2 C |
 loc_4C9A :                    4ABE C |  loc_4CA4 :                    4AC8 C |
 loc_4DF2 :                    4C16 C |  loc_4EC4 :                    4CE8 C |
 loc_4ED0 :                    4CF4 C |  loc_4EEA :                    4D0C C |
 loc_4F40 :                    4D62 C |  loc_52DA :                    5104 C |
 loc_5334 :                    515E C |  loc_55FA :                    5424 C |
 loc_5608 :                    5432 C |  loc_5862 :                    568C C |
 loc_5A6A :                    5894 C |  loc_5A70 :                    589A C |
 loc_5A8E :                    58B8 C |  loc_5B3E :                    5968 C |
 loc_5B42 :                    596C C |  loc_5B78 :                    59A2 C |
 loc_5B80 :                    59AA C |  loc_5B8C :                    59B6 C |
 loc_5B96 :                    59C0 C |  loc_60D0 :                    5F1E C |
 loc_60D8 :                    5F26 C |  loc_60E2 :                    5F30 C |
 loc_60EE :                    5F3C C |  loc_60F8 :                    5F46 C |
 loc_6206 :                    6054 C |  loc_628E :                    60DC C |
 loc_633C :                    618A C |  loc_6346 :                    6194 C |
 loc_6356 :                    61A4 C |  loc_6384 :                    61D2 C |
 loc_63C6 :                    6214 C |  loc_6402 :                    6250 C |
 loc_6426 :                    6274 C |  loc_6480 :                    62CE C |
 loc_6482 :                    62D0 C |  loc_64CE :                    631C C |
 loc_64E2 :                    6330 C |  loc_64F0 :                    633E C |
 loc_64FE :                    634C C |  loc_653C :                    638A C |
 loc_6576 :                    63C4 C |  loc_65AA :                    63F8 C |
 loc_65CC :                    641A C |  loc_65D6 :                    6424 C |
 loc_65E4 :                    6432 C |  loc_65F6 :                    6444 C |
 loc_6610 :                    645E C |  loc_662A :                    6478 C |
 loc_664A :                    6498 C |  loc_6656 :                    64A4 C |
 loc_665C :                    64AA C |  loc_666C :                    64BA C |
 loc_6684 :                    64D2 C |  loc_6696 :                    64E4 C |
 loc_66A8 :                    64F6 C |  loc_66AE :                    64FC C |
 loc_66C0 :                    650E C |  loc_66CC :                    651A C |
 loc_66F0 :                    653E C |  loc_66F6 :                    6544 C |
 loc_6700 :                    654E C |  loc_6720 :                    656E C |
 loc_6724 :                    6572 C |  loc_6760 :                    65AE C |
 loc_6796 :                    65E4 C |  loc_679C :                    65EA C |
 loc_67CA :                    6618 C |  loc_680C :                    665A C |
 loc_683C :                    668A C |  loc_687E :                    66CC C |
 loc_6908 :                    6756 C |  loc_6922 :                    6770 C |
 loc_6938 :                    6786 C |  loc_6972 :                    67C0 C |
 loc_698E :                    67DC C |  loc_69BA :                    6808 C |
 loc_69BE :                    680C C |  loc_69EE :                    683C C |
 loc_6A3E :                    688C C |  loc_6AAC :                    68FA C |
 loc_6AE2 :                    6930 C |  loc_6B0E :                    695C C |
 loc_6B4E :                    699C C |  loc_6B6E :                    69BC C |
 loc_6B90 :                    69DE C |  loc_6C82 :                    6ACA C |
 loc_6DA0 :                    6BB4 C |  loc_6DAC :                    6BC0 C |
 loc_6DC4 :                    6BD8 C |  loc_6E8E :                    6CA2 C |
 loc_6E98 :                    6CAC C |  loc_6EB0 :                    6CC4 C |
 loc_6ED0 :                    6CE2 C |  loc_6F28 :                    6D40 C |
 loc_6F4A :                    6D60 C |  loc_6FBA :                    6DD0 C |
 loc_6FEA :                    6E00 C |  loc_6FF8 :                    6E0E C |
 loc_702E :                    6E44 C |  loc_703C :                    6E52 C |
 loc_7050 :                    6E66 C |  loc_70D0 :                    6EE4 C |
 loc_7144 :                    6F58 C |  loc_71B5A :                  8665C C |
 loc_71B82 :                  86684 C |  loc_71B9E :                  866A0 C |
 loc_71BA8 :                  866AA C |  loc_71BB2 :                  866B4 C |
 loc_71BBC :                  866BE C |  loc_71BC8 :                  866CA C |
 loc_71BD4 :                  866D6 C |  loc_71BDA :                  866DC C |
 loc_71BE6 :                  866E8 C |  loc_71BEC :                  866EE C |
 loc_71BF8 :                  866FA C |  loc_71C04 :                  86706 C |
 loc_71C10 :                  86712 C |  loc_71C16 :                  86718 C |
 loc_71C22 :                  86724 C |  loc_71C38 :                  8673A C |
 loc_71C44 :                  86746 C |  loc_71C5E :                  86760 C |
 loc_71C6E :                  86770 C |  loc_71C84 :                  86786 C |
 loc_71C88 :                  8678A C |  loc_71CAC :                  867AE C |
 loc_71CE0 :                  867E2 C |  loc_71CF4 :                  867F6 C |
 loc_71D04 :                  86806 C |  loc_71D1A :                  8681C C |
 loc_71D46 :                  86848 C |  loc_71D4E :                  86850 C |
 loc_71D58 :                  8685A C |  loc_71DBE :                  868C0 C |
 loc_71DDA :                  868DC C |  loc_71DE2 :                  868E4 C |
 loc_71DFE :                  86900 C |  loc_71E24 :                  86926 C |
 loc_71E4A :                  8694C C |  loc_71E50 :                  86952 C |
 loc_71E6A :                  8696C C |  loc_71E7C :                  8697E C |
 loc_71E94 :                  86996 C |  loc_71EA0 :                  869A2 C |
 loc_71EB8 :                  869BA C |  loc_71EC :                    7000 C |
 loc_71EC4 :                  869C6 C |  loc_71EDC :                  869DE C |
 loc_71EFE :                  86A00 C |  loc_71F12 :                  86A12 C |
 loc_71F2C :                  86A2C C |  loc_71F3E :                  86A3E C |
 loc_71FE6 :                  86B04 C |  loc_71FF8 :                  86B16 C |
 loc_72012 :                  86B2E C |  loc_72024 :                  86B3E C |
 loc_7202C :                  86B46 C |  loc_72068 :                  86B82 C |
 loc_72098 :                  86BB2 C |  loc_720D8 :                  86BF2 C |
 loc_72114 :                  86C2E C |  loc_72126 :                  86C40 C |
 loc_72154 :                  86C6E C |  loc_7215A :                  86C74 C |
 loc_7216E :                  86C88 C |  loc_72170 :                  86C8A C |
 loc_7217C :                  86C96 C |  loc_7218E :                  86CA8 C |
 loc_7219A :                  86CB4 C |  loc_721A0 :                  86CBA C |
 loc_721AC :                  86CC6 C |  loc_721B6 :                  86CD0 C |
 loc_721EE :                  86D08 C |  loc_72228 :                  86D42 C |
 loc_72244 :                  86D5E C |  loc_7226E :                  86D88 C |
 loc_72276 :                  86D90 C |  loc_722A8 :                  86DC2 C |
 loc_722B8 :                  86DD2 C |  loc_722C6 :                  86DE0 C |
 loc_72348 :                  86E60 C |  loc_7235A :                  86E72 C |
 loc_72364 :                  86E7C C |  loc_72368 :                  86E80 C |
 loc_72396 :                  86EAE C |  loc_723A6 :                  86EBE C |
 loc_723EA :                  86F00 C |  loc_72416 :                  86F2C C |
 loc_72428 :                  86F3E C |  loc_7243C :                  86F52 C |
 loc_7245A :                  86F70 C |  loc_72472 :                  86F88 C |
 loc_724AE :                  86FC4 C |  loc_72510 :                  87026 C |
 loc_72524 :                  8703A C |  loc_72534 :                  8704A C |
 loc_72538 :                  8704E C |  loc_72542 :                  87058 C |
 loc_72558 :                  8706E C |  loc_72560 :                  87076 C |
 loc_7256E :                  87084 C |  loc_72584 :                  8709A C |
 loc_72586 :                  8709C C |  loc_725B6 :                  870CC C |
 loc_725E4 :                  870F8 C |  loc_7261A :                  8712C C |
 loc_7263E :                  87150 C |  loc_7266A :                  8717C C |
 loc_72688 :                  8719A C |  loc_7269E :                  871B0 C |
 loc_726AA :                  871BC C |  loc_726B4 :                  871C6 C |
 loc_726C8 :                  871DA C |  loc_726CC :                  871DE C |
 loc_726D6 :                  871E8 C |  loc_726E2 :                  871F4 C |
 loc_7270A :                  8721C C |  loc_72716 :                  87228 C |
 loc_72746 :                  87258 C |  loc_7275A :                  8726C C |
 loc_7277C :                  8728E C |  loc_72866 :                  87378 C |
 loc_72880 :                  87392 C |  loc_72890 :                  873A2 C |
 loc_728A4 :                  873B6 C |  loc_728CA :                  873DC C |
 loc_72904 :                  87416 C |  loc_72920 :                  87432 C |
 loc_7292E :                  87440 C |  loc_72960 :                  87472 C |
 loc_7297C :                  8748E C |  loc_7298C :                  8749E C |
 loc_7299A :                  874AC C |  loc_729A6 :                  874B8 C |
 loc_72A64 :                  87576 C |  loc_72ACC :                  875DE C |
 loc_72AEC :                  875FE C |  loc_72AF2 :                  87604 C |
 loc_72AF8 :                  8760A C |  loc_72B0 :                    70C4 C |
 loc_72B14 :                  87626 C |  loc_72B1E :                  87630 C |
 loc_72B3A :                  8764C C |  loc_72B5C :                  8766E C |
 loc_72B6 :                    70CA C |  loc_72B66 :                  87678 C |
 loc_72B78 :                  8768A C |  loc_72B9E :                  876B0 C |
 loc_72BA4 :                  876B6 C |  loc_72BAE :                  876C0 C |
 loc_72BB4 :                  876C6 C |  loc_72BBE :                  876D0 C |
 loc_72BC6 :                  876D8 C |  loc_72BD0 :                  876E2 C |
 loc_72BDA :                  876EC C |  loc_72BE6 :                  876F8 C |
 loc_72BEE :                  87700 C |  loc_72BF4 :                  87706 C |
 loc_72C2 :                    70D6 C |  loc_72C22 :                  87734 C |
 loc_72C26 :                  87738 C |  loc_72C56 :                  87768 C |
 loc_72C5C :                  8776E C |  loc_72C72 :                  87784 C |
 loc_72C8C :                  8779E C |  loc_72C96 :                  877A8 C |
 loc_72CD8 :                  877EA C |  loc_72CE0 :                  877F2 C |
 loc_72CE6 :                  877F8 C |  loc_72D02 :                  87814 C |
 loc_72D12 :                  87824 C |  loc_72D30 :                  87842 C |
 loc_72D52 :                  87864 C |  loc_72D58 :                  8786A C |
 loc_72D74 :                  87886 C |  loc_72D78 :                  8788A C |
 loc_72DA8 :                  878B8 C |  loc_72DB8 :                  878C8 C |
 loc_72DC8 :                  878D8 C |  loc_72DCC :                  878DC C |
 loc_72DE0 :                  878F0 C |  loc_72DEA :                  878FA C |
 loc_72E02 :                  87912 C |  loc_72E06 :                  87916 C |
 loc_72E20 :                  87930 C |  loc_72E26 :                  87936 C |
 loc_72E2C :                  8793C C |  loc_72E38 :                  87948 C |
 loc_72E48 :                  87958 C |  loc_72E52 :                  87962 C |
 loc_72E64 :                  87974 C |  loc_72F4 :                    7108 C |
 loc_7312 :                    7126 C |  loc_7320 :                    7134 C |
 loc_73B8 :                    71CA C |  loc_74AE :                    72BE C |
 loc_74DC :                    72EC C |  loc_7512 :                    7322 C |
 loc_754A :                    735A C |  loc_75B6 :                    73C6 C |
 loc_75E0 :                    73F0 C |  loc_765C :                    746C C |
 loc_76A4 :                    74B4 C |  loc_791E :                    772E C |
 loc_7A8E :                    789A C |  loc_7A92 :                    789E C |
 loc_7AD4 :                    78E0 C |  loc_7B78 :                    7984 C |
 loc_7B9C :                    79A8 C |  loc_7BB6 :                    79C2 C |
 loc_7BCE :                    79DA C |  loc_7D78 :                    7B80 C |
 loc_7EE0 :                    7CE8 C |  loc_7F06 :                    7D0E C |
 loc_8042 :                    7E4A C |  loc_8048 :                    7E50 C |
 loc_82D0 :                    80D8 C |  loc_82FC :                    8104 C |
 loc_8402 :                    820A C |  loc_842E :                    8236 C |
 loc_8458 :                    8260 C |  loc_846C :                    8274 C |
 loc_847A :                    8282 C |  loc_8486 :                    828E C |
 loc_84AA :                    82B0 C |  loc_84B2 :                    82B8 C |
 loc_84EE :                    82F2 C |  loc_84F2 :                    82F6 C |
 loc_854E :                    8352 C |  loc_8918 :                    871C C |
 loc_899A :                    879E C |  loc_8A7C :                    8880 C |
 loc_8A82 :                    8886 C |  loc_8A92 :                    8896 C |
 loc_8AA8 :                    88AC C |  loc_8AB6 :                    88BA C |
 loc_8AC4 :                    88C8 C |  loc_8B30 :                    8934 C |
 loc_8B3C :                    8940 C |  loc_8B44 :                    8948 C |
 loc_8B48 :                    894C C |  loc_8C0A :                    8A0C C |
 loc_8C1A :                    8A1C C |  loc_8CA4 :                    8AA6 C |
 loc_90C0 :                    8EBC C |  loc_911C :                    8F16 C |
 loc_912A :                    8F24 C |  loc_9180 :                    8F7A C |
 loc_9184 :                    8F7E C |  loc_91AE :                    8FA8 C |
 loc_91C0 :                    8FBA C |  loc_91FC :                    8FF6 C |
 loc_9212 :                    900C C |  loc_9224 :                    901E C |
 loc_923C :                    9036 C |  loc_9240 :                    903A C |
 loc_925C :                    9056 C |  loc_9260 :                    905A C |
 loc_927C :                    9076 C |  loc_9280 :                    907A C |
 loc_92B6 :                    90B0 C |  loc_92BA :                    90B4 C |
 loc_92D6 :                    90D0 C |  loc_9306 :                    9100 C |
 loc_9310 :                    910A C |  loc_9314 :                    910E C |
 loc_932E :                    9128 C |  loc_9332 :                    912C C |
 loc_936C :                    9166 C |  loc_9370 :                    916A C |
 loc_93A0 :                    919A C |  loc_93AA :                    91A4 C |
 loc_93C0 :                    91BA C |  loc_93C4 :                    91BE C |
 loc_93EC :                    91E6 C |  loc_9640 :                    9436 C |
 loc_9654 :                    944A C |  loc_966E :                    9464 C |
 loc_96A4 :                    949A C |  loc_98AA :                    969E C |
 loc_9B80 :                    9970 C |  loc_9BBA :                    99AA C |
 loc_9C02 :                    99F0 C |  loc_9C0E :                    99FC C |
 loc_9CA4 :                    9A92 C |  loc_9CDE :                    9ACC C |
 loc_9D62 :                    9B4E C |  loc_A1BC :                    9FA6 C |
 loc_A1EC :                    9FD6 C |  loc_A20A :                    9FF4 C |
 loc_A220 :                    A00A C |  loc_A230 :                    A01A C |
 loc_A236 :                    A020 C |  loc_A246 :                    A030 C |
 loc_A25C :                    A046 C |  loc_A26A :                    A054 C |
 loc_A4DC :                    A2C2 C |  loc_A4E2 :                    A2C8 C |
 loc_A4E6 :                    A2CC C |  loc_A4EA :                    A2D0 C |
 loc_AD6A :                    AB50 C |  loc_AD78 :                    AB5E C |
 loc_AD84 :                    AB6A C |  loc_ADA4 :                    AB8A C |
 loc_AE40 :                    AC26 C |  loc_AF8E :                    AD74 C |
 loc_AFF2 :                    ADD8 C |  loc_B010 :                    ADF6 C |
 loc_B01C :                    AE02 C |  loc_B07A :                    AE5E C |
 loc_B086 :                    AE6A C |  loc_B0C6 :                    AEAA C |
*loc_B0E8 :                    AECC C |  loc_B0F4 :                    AED8 C |
 loc_B10 :                      8F6 C |  loc_B238 :                    B01C C |
 loc_B2B0 :                    B092 C |  loc_B3E :                      924 C |
 loc_B40C :                    B1EE C |  loc_B42 :                      928 C |
 loc_B480 :                    B260 C |  loc_B514 :                    B2F4 C |
 loc_B526 :                    B306 C |  loc_B53E :                    B31E C |
 loc_B54E :                    B32E C |  loc_B582 :                    B362 C |
 loc_B594 :                    B374 C |  loc_B5A4 :                    B384 C |
 loc_B5AA :                    B38A C |  loc_B5E :                      944 C |
 loc_B5E0 :                    B3C0 C |  loc_B5EA :                    B3CA C |
 loc_B5EE :                    B3CE C |  loc_B64 :                      94A C |
 loc_B6CE :                    B4AE C |  loc_B6E0 :                    B4C0 C |
 loc_B76A :                    B548 C |  loc_B798 :                    B576 C |
 loc_B7E2 :                    B5C0 C |  loc_B7FE :                    B5DC C |
 loc_B872 :                    B650 C |  loc_B88 :                      96E C |
 loc_B892 :                    B670 C |  loc_B8A0 :                    B67E C |
 loc_B8A8 :                    B686 C |  loc_B902 :                    B6E0 C |
 loc_B91C :                    B6FA C |  loc_B938 :                    B716 C |
 loc_B97C :                    B75A C |  loc_B98C :                    B76A C |
 loc_B996 :                    B774 C |  loc_B9A :                      980 C |
 loc_BA40 :                    B81C C |  loc_BA52 :                    B82E C |
 loc_BA7A :                    B856 C |  loc_BA8E :                    B86A C |
 loc_BADA :                    B8B6 C |  loc_BAEC :                    B8C8 C |
 loc_BB08 :                    B8E4 C |  loc_BB3C :                    B918 C |
 loc_BB6 :                      99C C |  loc_BBA :                      9A0 C |
 loc_BC8 :                      9AE C |  loc_BD60 :                    BB3C C |
 loc_BDB2 :                    BB8E C |  loc_BDBE :                    BB9A C |
 loc_BDC8 :                    BBA4 C |  loc_BDD6 :                    BBB2 C |
 loc_BDDE :                    BBBA C |  loc_BE4E :                    BC2A C |
 loc_BE5E :                    BC3A C |  loc_BE80 :                    BC5C C |
 loc_BE84 :                    BC60 C |  loc_BE9A :                    BC76 C |
 loc_BE9E :                    BC7A C |  loc_BF16 :                    BCF2 C |
 loc_BF6E :                    BD4A C |  loc_BFC6 :                    BDA2 C |
 loc_BFE :                      9E4 C |  loc_BFE6 :                    BDC2 C |
 loc_C016 :                    BDF2 C |  loc_C028 :                    BE04 C |
 loc_C02C :                    BE08 C |  loc_C046 :                    BE22 C |
 loc_C056 :                    BE32 C |  loc_C09E :                    BE7A C |
 loc_C0A0 :                    BE7C C |  loc_C0BC :                    BE98 C |
 loc_C0D6 :                    BEB2 C |  loc_C0E6 :                    BEC2 C |
 loc_C104 :                    BEE0 C |  loc_C186 :                    BF60 C |
 loc_C1A4 :                    BF7E C |  loc_C1AA :                    BF84 C |
 loc_C1F2 :                    BFCC C |  loc_C218 :                    BFF2 C |
 loc_C22 :                      A08 C |  loc_C230 :                    C00A C |
 loc_C268 :                    C042 C |  loc_C294 :                    C06E C |
 loc_C2D8 :                    C0B2 C |  loc_C2E0 :                    C0BA C |
 loc_C32 :                      A18 C |  loc_C36 :                      A1C C |
 loc_C3C8 :                    C1A0 C |  loc_C44 :                      A2A C |
 loc_C4EC :                    C2C4 C |  loc_C50C :                    C2E4 C |
 loc_C5CA :                    C3A0 C |  loc_C5E :                      A44 C |
 loc_C5FE :                    C3D4 C |  loc_C610 :                    C3E6 C |
 loc_C61A :                    C3F0 C |  loc_C64 :                      A4A C |
 loc_C6E :                      A54 C |  loc_C6EA :                    C4C0 C |
 loc_C76 :                      A5C C |  loc_C766 :                    C53C C |
 loc_C842 :                    C616 C |  loc_C85A :                    C62E C |
 loc_C86C :                    C640 C |  loc_C8C4 :                    C698 C |
 loc_C91A :                    C6EE C |  loc_CB0 :                      A96 C |
 loc_CD4 :                      ABA C |  loc_CF20 :                    CCF2 C |
 loc_CFA4 :                    CD76 C |  loc_CFC6 :                    CD98 C |
 loc_D268 :                    D036 C |  loc_D348 :                    D116 C |
 loc_D358 :                    D126 C |  loc_D362 :                    D130 C |
 loc_D368 :                    D136 C |  loc_D378 :                    D146 C |
*loc_D37C :                    D14A C |  loc_D50 :                      B36 C |
 loc_D646 :                    D414 C |  loc_D66A :                    D438 C |
 loc_D672 :                    D440 C |  loc_D6DE :                    D4AC C |
 loc_D6E8 :                    D4B6 C |  loc_D700 :                    D4CE C |
 loc_D71C :                    D4EA C |  loc_D720 :                    D4EE C |
 loc_D726 :                    D4F4 C |  loc_D72E :                    D4FC C |
 loc_D748 :                    D516 C |  loc_D78E :                    D55C C |
 loc_D796 :                    D564 C |  loc_D79E :                    D56C C |
 loc_D7DC :                    D5AA C |  loc_D7E4 :                    D5B2 C |
 loc_D822 :                    D5F0 C |  loc_D82A :                    D5F8 C |
 loc_D876 :                    D644 C |  loc_D93C :                    D70A C |
 loc_D944 :                    D712 C |  loc_D952 :                    D720 C |
 loc_D956 :                    D724 C |  loc_D964 :                    D732 C |
 loc_D972 :                    D740 C |  loc_D976 :                    D744 C |
 loc_D9A6 :                    D774 C |  loc_D9BC :                    D78A C |
 loc_D9C6 :                    D794 C |  loc_D9D0 :                    D79E C |
 loc_D9D2 :                    D7A0 C |  loc_D9DE :                    D7AC C |
 loc_D9EC :                    D7BA C |  loc_D9F0 :                    D7BE C |
 loc_D9F6 :                    D7C4 C |  loc_DA02 :                    D7D0 C |
 loc_DA10 :                    D7DE C |  loc_DA16 :                    D7E4 C |
 loc_DA24 :                    D7F2 C |  loc_DA32 :                    D800 C |
 loc_DA36 :                    D804 C |  loc_DA3C :                    D80A C |
 loc_DA6 :                      B8C C |  loc_DA80 :                    D84E C |
 loc_DA94 :                    D860 C |  loc_DAB0 :                    D87C C |
 loc_DAE :                      B94 C |  loc_DB54 :                    D920 C |
 loc_DB66 :                    D932 C |  loc_DB72 :                    D93E C |
 loc_DC0C :                    D9D8 C |  loc_DC36 :                    DA02 C |
 loc_DC56 :                    DA22 C |  loc_DCA4 :                    DA70 C |
 loc_DDEA :                    DBB6 C |  loc_DE42 :                    DC0E C |
 loc_DEA2 :                    DC6E C |  loc_DF04 :                    DCCE C |
 loc_E0D2 :                    DE9C C |  loc_E0F8 :                    DEC2 C |
 loc_E35A :                    E122 C |  loc_E41E :                    E1E6 C |
 loc_E57A :                    E342 C |  loc_E64 :                      C4A C |
 loc_E72 :                      C58 C |  loc_E7A :                      C60 C |
 loc_E888 :                    E650 C |  loc_E8A8 :                    E670 C |
 loc_EB4 :                      C9A C |  loc_EC70 :                    EA34 C |
 loc_EC86 :                    EA4A C |  loc_ECD0 :                    EA94 C |
 loc_ED8 :                      CBE C |  loc_EDCC :                    EB90 C |
 loc_EE18 :                    EBDA C |  loc_EE3E :                    EC00 C |
 loc_EEA4 :                    EC66 C | *loc_EEE :                      CD4 C |
 loc_EF0A :                    ECCA C |  loc_EF10 :                    ECD0 C |
 loc_EFFC :                    EDBC C |  loc_F026 :                    EDE6 C |
 loc_F02E :                    EDEE C |  loc_F04C :                    EE0C C |
 loc_F0C8 :                    EE86 C |  loc_F0F4 :                    EEB2 C |
 loc_F54 :                      D3A C |  loc_F828 :                    F5E4 C |
 loc_F82C :                    F5E8 C |  loc_F836 :                    F5F2 C |
 loc_F8A :                      D70 C |  loc_F9A :                      D80 C |
 loc_F9FE :                    F7BA C |  loc_FA12 :                    F7CE C |
 loc_FA44 :                    F800 C |  loc_FA58 :                    F814 C |
 loc_FA6 :                      D8C C |  loc_FA94 :                    F850 C |
 loc_FAC8 :                    F884 C |  loc_FAD0 :                    F88C C |
 loc_FAE :                      D94 C |  loc_FB0E :                    F8CA C |
 loc_FB36 :                    F8F2 C |  loc_FB44 :                    F900 C |
 loc_FB5E :                    F91A C |  loc_FB64 :                    F920 C |
 loc_FB70 :                    F92C C |  loc_FB8C :                    F948 C |
 loc_FB92 :                    F94E C |  loc_FBA0 :                    F95C C |
 loc_FBAC :                    F968 C |  loc_FBB0 :                    F96C C |
 loc_FBBC :                    F978 C |  loc_FBD2 :                    F98E C |
 loc_FBD6 :                    F992 C |  loc_FBEE :                    F9AA C |
 loc_FC28 :                    F9E4 C |  loc_FC4E :                    FA0A C |
 loc_FC84 :                    FA40 C |  loc_FD98 :                    FB52 C |
 loc_FE44 :                    FBFE C |  loc_FE60 :                    FC1A C |
 loc_FF26 :                    FCE0 C |  loc_FFE2 :                    FD9C C |
 locret_1002E :                FDE8 C |  locret_10180 :                FF3A C |
 locret_101C6 :                FF80 C |  locret_101F4 :                FFAE C |
 locret_10578 :               10332 C |  locret_106C :                  E52 C |
 locret_10BD4 :               10988 C |  locret_10C0C :               109C0 C |
 locret_10CFA :               10AAE C |  locret_10FA0 :               10D50 C |
 locret_10FBE :               10D6E C |  locret_10FDE :               10D8E C |
 locret_11038 :               10DE8 C |  locret_11790 :               1153E C |
 locret_11898 :               11646 C |  locret_11938 :               116E6 C |
 locret_119C :                  F82 C |  locret_11A96 :               11844 C |
 locret_11AD0 :               1187C C |  locret_11B5E :               11908 C |
 locret_11DBC :               11B60 C |  locret_120D4 :               11E76 C |
 locret_12106 :               11EA8 C |  locret_12126 :               11EC8 C |
 locret_12138 :               11EDA C |  locret_12160 :               11F02 C |
 locret_1217E :               11F20 C |  locret_121C0 :               11F62 C |
 locret_12D80 :               12B22 C |  locret_1307C :               12E1E C |
 locret_130E8 :               12E8A C |  locret_1314E :               12EF0 C |
 locret_132D2 :               13074 C |  locret_13302 :               130A4 C |
 locret_133E8 :               1318A C |  locret_1348E :               13230 C |
 locret_134C2 :               13264 C |  locret_134D2 :               13274 C |
 locret_13502 :               132A4 C |  locret_13508 :               132AA C |
 locret_13544 :               132E6 C |  locret_13580 :               13322 C |
 locret_135A2 :               13344 C |  locret_1367E :               13420 C |
 locret_136B2 :               13454 C |  locret_136E0 :               13482 C |
 locret_1373C :               134DE C |  locret_13770 :               13512 C |
 locret_1379E :               13540 C |  locret_13860 :               13602 C |
 locret_13900 :               136A2 C |  locret_13914 :               136B6 C |
 locret_139C2 :               13782 C |  locret_13C96 :               13A56 C |
 locret_13E1A :               13BDA C |  locret_1408C :               13E4A C |
 locret_146BE :               1448E C |  locret_146E6 :               144B6 C |
 locret_1470A :               144DA C |  locret_147F0 :               145C0 C |
 locret_14892 :               14662 C |  locret_14934 :               14704 C |
 locret_14DE6 :               14BD6 C |  locret_14E16 :               14C06 C |
 locret_14E4E :               14C3E C |  locret_14F06 :               14CF6 C |
 locret_14FD4 :               14DC4 C |  locret_15098 :               14E88 C |
 locret_15246 :               15034 C |  locret_155B6 :               153A4 C |
 locret_15606 :               153F4 C |  locret_15622 :               15410 C |
 locret_1572E :               1551C C |  locret_15A60 :               1584E C |
 locret_15AB0 :               1589E C |  locret_15B04 :               158F2 C |
 locret_15B24 :               15912 C |  locret_15B76 :               15964 C |
 locret_15B96 :               15984 C |  locret_15F5C :               15D4A C |
 locret_1640 :                 1426 C |  locret_1675C :               16548 C |
 locret_16796 :               16582 C |  locret_16950 :               1673C C |
 locret_16B5C :               16946 C |  locret_16DA :                 14C0 C |
 locret_16F90 :               16D76 C |  locret_170F6 :               16EDC C |
 locret_1784A :               1762E C |  locret_178A2 :               17684 C |
 locret_179AA :               1778A C |  locret_17C66 :               17A42 C |
 locret_17F8C :               17D64 C |  locret_18390 :               18166 C |
 locret_1849C :               18270 C |  locret_184F4 :               182C8 C |
 locret_1852A :               182FE C |  locret_18780 :               18554 C |
 locret_187EE :               185C2 C |  locret_1887E :               18652 C |
 locret_189A :                 1680 C |  locret_18A44 :               18816 C |
 locret_18DC4 :               18B96 C |  locret_18EA8 :               18C7A C |
 locret_19256 :               19028 C |  locret_19472 :               19244 C |
 locret_19588 :               1935A C |  locret_1990 :                 1776 C |
 locret_1A01E :               19DF0 C |  locret_1A190 :               19F62 C |
 locret_1A3A :                 1820 C |  locret_1A602 :               1A3D4 C |
 locret_1A674 :               1A446 C |  locret_1A80 :                 1866 C |
 locret_1AA1C :               1A7EE C |  locret_1AC6 :                 18AC C |
 locret_1AC60 :               1AA32 C |  locret_1ACF8 :               1AAC6 C |
 locret_1AD48 :               1AB14 C |  locret_1AEF2 :               1ACBE C |
 locret_1AF2E :               1ACFA C |  locret_1AF68 :               1AD34 C |
 locret_1B4CE :               1B296 C |  locret_1B530 :               1B2F8 C |
 locret_1B566 :               1B32E C |  locret_1B596 :               1B35E C |
 locret_1B5CC :               1B394 C |  locret_1B60C :               1B3D4 C |
 locret_1B64 :                 194A C |  locret_1B640 :               1B408 C |
 locret_1BB54 :               1B91C C |  locret_1BBB4 :               1B97C C |
 locret_1BBDE :               1B9A6 C |  locret_1BD44 :               1BB0C C |
 locret_1BEAC :               1BC74 C |  locret_1C10C :               1C16E C |
 locret_1C1EA :               1C24C C |  locret_1C2A0 :               1C302 C |
 locret_1C3B4 :               1C416 C |  locret_1C6B6 :               1C712 C |
 locret_1E24 :                 1C0A C |  locret_1F4A :                 1D30 C |
 locret_3C28 :                 3A0E C |  locret_3C5A :                 3A40 C |
 locret_3CF4 :                 3ADA C |  locret_3E1A :                 3C02 C |
 locret_3EF2 :                 3CDA C |  locret_3F0A :                 3CF2 C |
 locret_3F7A :                 3D68 C |  locret_3FBE :                 3DAC C |
 locret_407E :                 3E88 C |  locret_41C4 :                 3FE8 C |
 locret_4272 :                 4096 C |  locret_49E6 :                 480A C |
 locret_5480 :                 52AA C |  locret_5614 :                 543E C |
 locret_5AA0 :                 58CA C |  locret_5BBA :                 59E4 C |
 locret_65B0 :                 63FE C |  locret_6766 :                 65B4 C |
 locret_67D0 :                 661E C |  locret_6812 :                 6660 C |
 locret_6842 :                 6690 C |  locret_6884 :                 66D2 C |
 locret_6952 :                 67A0 C |  locret_69F2 :                 6840 C |
 locret_6A80 :                 68CE C |  locret_6AD6 :                 6924 C |
*locret_6C1E :                 6A66 C |  locret_6D10 :                 6B58 C |
 locret_6DAA :                 6BBE C |  locret_6E08 :                 6C1C C |
 locret_6E3A :                 6C4E C |  locret_6E96 :                 6CAA C |
 locret_6EE8 :                 6CFA C |  locret_6F62 :                 6D78 C |
 locret_6F64 :                 6D7A C |  locret_6F8C :                 6DA2 C |
 locret_6FE8 :                 6DFE C |  locret_702C :                 6E42 C |
 locret_704E :                 6E64 C |  locret_7072 :                 6E88 C |
 locret_7088 :                 6E9E C |  locret_70E8 :                 6EFC C |
 locret_7130 :                 6F44 C |  locret_715C :                 6F70 C |
 locret_71A2 :                 6FB6 C |  locret_71CAA :               867AC C |
 locret_71CE :                 6FE2 C |  locret_71D9C :               8689E C |
 locret_71DC4 :               868C6 C |  locret_71E16 :               86918 C |
 locret_71E48 :               8694A C |  locret_71F4A :               86A48 C |
 locret_71F8C :               86A8A C |  locret_7200 :                 7014 C |
 locret_722C4 :               86DDE C |  locret_723C6 :               86EDE C |
 locret_7242 :                 7056 C |  locret_724E4 :               86FFA C |
 locret_726FC :               8720E C |  locret_72714 :               87226 C |
 locret_72720 :               87232 C |  locret_727A :                 708E C |
 locret_7291E :               87430 C |  locret_7298 :                 70AC C |
 locret_7298A :               8749C C |  locret_729B4 :               874C6 C |
 locret_72AEA :               875FC C |  locret_72CAA :               877BC C |
 locret_72D16 :               87828 C |  locret_72E1E :               8792E C |
 locret_7322 :                 7136 C |  locret_751E :                 732E C |
 locret_75BE :                 73CE C |  locret_75F2 :                 7402 C |
 locret_76CA :                 74DA C |  locret_7B62 :                 796E C |
 locret_7DA6 :                 7BAE C |  locret_8074 :                 7E7C C |
 locret_8308 :                 8110 C |  locret_843A :                 8242 C |
 locret_856E :                 8372 C |  locret_8AC2 :                 88C6 C |
 locret_8AD8 :                 88DC C |  locret_8BAC :                 89B0 C |
 locret_93EA :                 91E4 C |  locret_9402 :                 91FC C |
 locret_955A :                 9354 C |  locret_95B6 :                 93B0 C |
 locret_9618 :                 940E C |  locret_96A2 :                 9498 C |
 locret_96B6 :                 94AC C |  locret_986C :                 9662 C |
 locret_98D0 :                 96C4 C |  locret_992A :                 971E C |
 locret_9F76 :                 9D60 C |  locret_A6F8 :                 A4DE C |
 locret_ABB6 :                 A99C C |  locret_AD42 :                 AB28 C |
 locret_ADF0 :                 ABD6 C |  locret_AE20 :                 AC06 C |
 locret_B09A :                 AE7E C |  locret_B116 :                 AEFA C |
*locret_BE5A :                 BC36 C |  locret_C044 :                 BE20 C |
 locret_C184 :                 BF5E C |  locret_C1F0 :                 BFCA C |
 locret_C2E4 :                 C0BE C |  locret_C3D8 :                 C1B0 C |
 locret_C412 :                 C1EA C |  locret_C42 :                   A28 C |
 locret_C5C :                   A42 C |  locret_C60E :                 C3E4 C |
 locret_C692 :                 C468 C |  locret_C748 :                 C51E C |
 locret_C86A :                 C63E C |  locret_C8EA :                 C6BE C |
 locret_CFE6 :                 CDB8 C |  locret_D180 :                 CF52 C |
 locret_D620 :                 D3EE C |  locret_D63E :                 D40C C |
 locret_D794 :                 D562 C |  locret_D7E2 :                 D5B0 C |
 locret_D828 :                 D5F6 C |  locret_D87C :                 D64A C |
 locret_DA3A :                 D808 C |  locret_DA8A :                 D856 C |
 locret_DAA0 :                 D86C C |  locret_DABC :                 D888 C |
 locret_DCAE :                 DA7A C |  locret_DE12 :                 DBDE C |
 locret_DE32 :                 DBFE C |  locret_DE86 :                 DC52 C |
 locret_DF14 :                 DCDE C |  locret_E052 :                 DE1C C |
 locret_E0F6 :                 DEC0 C |  locret_E12E :                 DEF8 C |
 locret_E150 :                 DF1A C |  locret_E188 :                 DF52 C |
 locret_E302 :                 E0CA C |  locret_E430 :                 E1F8 C |
 locret_E452 :                 E21A C |  locret_E474 :                 E23C C |
 locret_E498 :                 E260 C |  locret_E4BC :                 E284 C |
 locret_E70 :                   C56 C |  locret_E8EE :                 E6B6 C |
 locret_EBBA :                 E980 C |  locret_EC42 :                 EA06 C |
 locret_ECEE :                 EAB2 C |  locret_ED1A :                 EADE C |
 locret_EDF0 :                 EBB4 C |  locret_EFDA :                 ED9A C |
 locret_EFFA :                 EDBA C |  locret_F17E :                 EF3C C |
 locret_F68A :                 F448 C |  locret_F70A :                 F4C8 C |
 locret_F756 :                 F512 C |  locret_F89E :                 F65A C |
 locret_F8E2 :                 F69E C |  locret_FCFC :                 FAB8 C |
 locret_FFA0 :                 FD5A C | *long :                           3 - |
*nA0 :                           8A - | *nA1 :                           96 - |
*nA2 :                           A2 - | *nA3 :                           AE - |
*nA4 :                           BA - |  nA5 :                           C6 - |
*nA6 :                           D2 - | *nA7 :                           DE - |
*nAb0 :                          89 - | *nAb1 :                          95 - |
*nAb2 :                          A1 - | *nAb3 :                          AD - |
*nAb4 :                          B9 - | *nAb5 :                          C5 - |
*nAb6 :                          D1 - | *nAb7 :                          DD - |
*nB0 :                           8C - | *nB1 :                           98 - |
*nB2 :                           A4 - | *nB3 :                           B0 - |
*nB4 :                           BC - | *nB5 :                           C8 - |
*nB6 :                           D4 - | *nBb0 :                          8B - |
*nBb1 :                          97 - | *nBb2 :                          A3 - |
*nBb3 :                          AF - | *nBb4 :                          BB - |
*nBb5 :                          C7 - | *nBb6 :                          D3 - |
*nBb7 :                          DF - | *nC0 :                           81 - |
*nC1 :                           8D - | *nC2 :                           99 - |
*nC3 :                           A5 - | *nC4 :                           B1 - |
*nC5 :                           BD - | *nC6 :                           C9 - |
*nC7 :                           D5 - | *nCs0 :                          82 - |
*nCs1 :                          8E - | *nCs2 :                          9A - |
*nCs3 :                          A6 - | *nCs4 :                          B2 - |
*nCs5 :                          BE - | *nCs6 :                          CA - |
*nCs7 :                          D6 - | *nD0 :                           83 - |
*nD1 :                           8F - | *nD2 :                           9B - |
*nD3 :                           A7 - | *nD4 :                           B3 - |
*nD5 :                           BF - | *nD6 :                           CB - |
*nD7 :                           D7 - | *nE0 :                           85 - |
*nE1 :                           91 - | *nE2 :                           9D - |
*nE3 :                           A9 - | *nE4 :                           B5 - |
*nE5 :                           C1 - | *nE6 :                           CD - |
*nE7 :                           D9 - | *nEb0 :                          84 - |
*nEb1 :                          90 - | *nEb2 :                          9C - |
*nEb3 :                          A8 - | *nEb4 :                          B4 - |
*nEb5 :                          C0 - | *nEb6 :                          CC - |
*nEb7 :                          D8 - | *nF0 :                           86 - |
*nF1 :                           92 - | *nF2 :                           9E - |
*nF3 :                           AA - | *nF4 :                           B6 - |
*nF5 :                           C2 - | *nF6 :                           CE - |
*nF7 :                           DA - | *nFs0 :                          87 - |
*nFs1 :                          93 - | *nFs2 :                          9F - |
*nFs3 :                          AB - | *nFs4 :                          B7 - |
*nFs5 :                          C3 - | *nFs6 :                          CF - |
*nFs7 :                          DB - | *nG0 :                           88 - |
*nG1 :                           94 - | *nG2 :                           A0 - |
*nG3 :                           AC - | *nG4 :                           B8 - |
*nG5 :                           C4 - | *nG6 :                           D0 - |
*nG7 :                           DC - | *nMaxPSG :                       C6 - |
*nMaxPSG1 :                      D2 - | *nMaxPSG2 :                      D2 - |
*nRst :                          80 - |  nullsub_2 :                  1B962 C |
 off_164A6 :                  16292 C |  off_183C2 :                  18198 C |
 off_192FA :                  190CC C |  off_19546 :                  19318 C |
 off_19568 :                  1933A C |  off_19E80 :                  19C52 C |
 off_1A590 :                  1A362 C |  off_6E4A :                    6C5E C |
 off_6FB2 :                    6DC8 C |  off_7098 :                    6EAE C |
 off_7118 :                    6F2C C |  off_719A0 :                  864A2 C |
 off_71B2 :                    6FC6 C |  off_7252 :                    7066 C |
 off_72D8 :                    70EC C |  off_B6E :                      954 C |
 off_BAD6 :                    B8B2 C | *pal0 :                          E8 - |
*pal1 :                          EA - | *pal2 :                          EC - |
*pal3 :                          EE - |  psgdelta :                       C - |
 return_1FEAC :               1BF98 C |  return_1FFB6 :               1C084 C |
 return_PlayPCM :             86AEC C | *setoff :                        F4 - |
*setpat :                        F8 - | *setw :                          F0 - |
*setx :                          FA - | *signed :                         8 - |
*smpsNoAttack :                  E7 - | *smpsPitch00 :                    0 - |
*smpsPitch01hi :                  C - | *smpsPitch01lo :                 F4 - |
*smpsPitch02hi :                 18 - | *smpsPitch02lo :                 E8 - |
*smpsPitch03hi :                 24 - | *smpsPitch03lo :                 DC - |
*smpsPitch04hi :                 30 - | *smpsPitch04lo :                 D0 - |
*smpsPitch05hi :                 3C - | *smpsPitch05lo :                 C4 - |
*smpsPitch06hi :                 48 - | *smpsPitch06lo :                 B8 - |
*smpsPitch07hi :                 54 - | *smpsPitch07lo :                 AC - |
*smpsPitch08hi :                 60 - | *smpsPitch08lo :                 A0 - |
*smpsPitch09hi :                 6C - | *smpsPitch09lo :                 94 - |
*smpsPitch10hi :                 78 - | *smpsPitch10lo :                 88 - |
*split :                          8 - | *str :                           D0 - |
 sub_106E :                     E54 C |  sub_12502 :                  122A0 C |
 sub_14D48 :                  14B38 C |  sub_14E50 :                  14C40 C |
 sub_14EB4 :                  14CA4 C |  sub_1642 :                    1428 C |
 sub_165E :                    1444 C |  sub_1681C :                  16608 C |
 sub_17C2A :                  17A08 C |  sub_188C :                    1672 C |
 sub_1BCE8 :                  1BAB0 C |  sub_1BD30 :                  1BAF8 C |
 sub_6886 :                    66D4 C |  sub_6954 :                    67A2 C |
 sub_69F4 :                    6842 C |  sub_6AD8 :                    6926 C |
 sub_6ADA :                    6928 C |  sub_6B04 :                    6952 C |
 sub_6B06 :                    6954 C |  sub_6B32 :                    6980 C |
 sub_6BD6 :                    6A24 C |  sub_6C20 :                    6A68 C |
 sub_6C3C :                    6A84 C |  sub_71B4C :                  8664E C |
 sub_71C4E :                  86750 C |  sub_71CCA :                  867CC C |
 sub_71CEC :                  867EE C |  sub_71D22 :                  86824 C |
 sub_71D40 :                  86842 C |  sub_71D60 :                  86862 C |
 sub_71D9E :                  868A0 C |  sub_71DC6 :                  868C8 C |
 sub_71E18 :                  8691A C |  sub_72504 :                  8701A C |
 sub_7256A :                  87080 C |  sub_725CA :                  870E0 C |
 sub_7260C :                  8711E C |  sub_7267C :                  8718E C |
 sub_726FE :                  87210 C |  sub_72722 :                  87234 C |
 sub_7272E :                  87240 C |  sub_72764 :                  87276 C |
 sub_72850 :                  87362 C |  sub_72878 :                  8738A C |
 sub_728AC :                  873BE C |  sub_728DC :                  873EE C |
 sub_728E2 :                  873F4 C |  sub_72926 :                  87438 C |
 sub_7296A :                  8747C C |  sub_729A0 :                  874B2 C |
 sub_729B6 :                  874C8 C |  sub_72A5A :                  8756C C |
 sub_72C4E :                  87760 C |  sub_72CB4 :                  877C6 C |
 sub_9404 :                    91FE C |  sub_B09C :                    AE80 C |
 sub_D750 :                    D51E C |  sub_D762 :                    D530 C |
 sub_FC2C :                    F9E8 C | *sym :                           B0 - |
*symdisp :                       C0 - | *tracenum :                       0 - |
 var_1 :           FFFFFFFFFFFFFFFF - | *var_2 :           FFFFFFFFFFFFFFFE - |
*weak :                           8 - | *word :                           1 - |
 word_125F4 :                 12392 C |  word_12610 :                 123AE C |
 word_12628 :                 123C6 C |  word_1263C :                 123DA C |
 word_12650 :                 123EE C |  word_12668 :                 12406 C |
 word_164B2 :                 1629E C |  word_164C6 :                 162B2 C |
 word_164DA :                 162C6 C |  word_164EE :                 162DA C |
 word_16502 :                 162EE C |  word_16516 :                 16302 C |
 word_168BC :                 166A8 C |  word_168C2 :                 166AE C |
 word_168C8 :                 166B4 C |  word_168E6 :                 166D2 C |
 word_168EC :                 166D8 C |  word_1690A :                 166F6 C |
 word_16910 :                 166FC C |  word_1692E :                 1671A C |
 word_186C :                   1652 C |  word_19018 :                 18DEA C |
 word_19FD6 :                 19DA8 C |  word_1FD68 :                 1BE82 C |
 word_72790 :                 872A2 C |  word_729CE :                 874E0 C |
 word_B6A4 :                   B484 C |  word_B9BE :                   B79C C |
 z80_stack :                   1FFC - |  zBankRegister :               6000 - |
 zBankSwitchLoop :               1A C |  zCheckForSamples :              32 C |
 zDACDecodeTbl :                 22 C |  zDAC_Sample :                 1FFF - |
 zDAC_Sample1 :                  EE C |  zDAC_Sample1_End :             440 C |
 zDAC_Sample2 :                 440 C |  zDAC_Sample2_End :             BB0 C |
 zDAC_Sample3 :                 BB0 C |  zDAC_Sample3_End :            1BC6 C |
 zDAC_Status :                 1FFD - |  zPCM_Table :                    D6 C |
 zPlayPCMLoop :                  77 C |  zPlaySEGAPCMLoop :              C1 C |
 zPlay_SegaPCM :                 B9 C |  zROMWindow :                  8000 - |
 zSEGA_Pitch :                    B - | *zSample3_Pitch :                EA C |
 zWaitDACLoop :                  35 C |  zYM2612_A0 :                  4000 - |

   6423 symbols
    297 unused symbols

 AS V1.42 Beta [Bld 212] - Source File sonic.asm - Page 3 - 12/19/2024 3:38:4


  Defined Macros:
  ---------------

CheckedChannelPointer                 | Console                              
KDebug                                | PSGPitchConvert                      
RaiseError                            | _Console                             
_KDebug                               | __ErrorMessage                       
__FSTRING_GenerateArgumentsCode       | __FSTRING_GenerateDecodedString      
__FSTRING_PushArgument                | _assert                              
align                                 | align0                               
assert                                | cnop                                 
cnop0                                 | convertMainTempoMod                  
copyTilemap                           | disable_ints                         
ds                                    | enable_ints                          
ensure1byteoffset                     | even                                 
fillVRAM                              | insn1op                              
insn2op                               | jcc                                  
jcs                                   | jeq                                  
jge                                   | jgt                                  
jhi                                   | jhs                                  
jle                                   | jlo                                  
jls                                   | jlt                                  
jmi                                   | jne                                  
jpl                                   | locVRAM                              
org                                   | org0                                 
smpsAlterNote                         | smpsAlterPitch                       
smpsAlterVol                          | smpsCall                             
smpsChanTempoDiv                      | smpsChangeTransposition              
smpsClearPush                         | smpsDetune                           
smpsFMAlterVol                        | smpsFMFlutter                        
smpsFMvoice                           | smpsFade                             
smpsHeaderChan                        | smpsHeaderChanSFX                    
smpsHeaderDAC                         | smpsHeaderFM                         
smpsHeaderPSG                         | smpsHeaderSFXChannel                 
smpsHeaderStartSong                   | smpsHeaderTempo                      
smpsHeaderTempoSFX                    | smpsHeaderVoice                      
smpsHeaderVoiceNull                   | smpsHeaderVoiceUVB                   
smpsJump                              | smpsLoop                             
smpsMaxRelRate                        | smpsModOff                           
smpsModOn                             | smpsModSet                           
smpsNop                               | smpsNoteFill                         
smpsPSGAlterVol                       | smpsPSGform                          
smpsPSGvoice                          | smpsPan                              
smpsReturn                            | smpsSetTempoDiv                      
smpsSetTempoMod                       | smpsSetVol                           
smpsSetvoice                          | smpsStop                             
smpsStopSpecial                       | smpsVcAlgorithm                      
smpsVcAmpMod                          | smpsVcAttackRate                     
smpsVcCoarseFreq                      | smpsVcDecayLevel                     
smpsVcDecayRate1                      | smpsVcDecayRate2                     
smpsVcDetune                          | smpsVcFeedback                       
smpsVcRateScale                       | smpsVcReleaseRate                    
smpsVcTotalLevel                      | smpsVcUnusedBits                     
smpsWeirdD1LRR                        | trace                                
writeCRAM                             | writeVRAM                            
zonewarning                           |

    105 macros

 AS V1.42 Beta [Bld 212] - Source File sonic.asm - Page 4 - 12/19/2024 3:38:4


  Defined Functions:
  ------------------

s3TempotoS2                           | s3TempotoS1                          
s1TempotoS3                           | s1TempotoS2                          
s2TempotoS3                           | s2TempotoS1                          
conv0To256                            | offsetover1byte                      
zmake68kBank                          | zmake68kPtr                          
chkop                                 | notZ80                               

 AS V1.42 Beta [Bld 212] - Source File sonic.asm - Page 5 - 12/19/2024 3:38:4


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

1.50 second assembly time

  49994 lines source file
  56712 lines incl. macro expansions
      5 passes
      0 errors
      0 warnings
